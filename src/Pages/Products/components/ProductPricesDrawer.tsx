import React from 'react';
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Stack,
  Divider
} from '@mui/material';
import { IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  open: boolean;
  product: Product | null;
  units: Unit[];
  onClose: () => void;
}

const ProductPricesDrawer: React.FC<Props> = ({ open, product, units, onClose }) => {
  const { t } = useTranslation();

  const getUnitName = (unitId: string) => {
    const unit = units.find(u => u.id === unitId);
    return unit?.name || 'Unknown Unit';
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: { xs: '100%', sm: 600 },
          maxWidth: '100vw'
        }
      }}
    >
      <Box sx={{ p: 3, height: '100%', display: 'flex', flexDirection: 'column' }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Typography variant="h5">
            {t('products.pricesFor')}: {product?.name || ''}
          </Typography>
          <IconButton onClick={onClose}>
            <IconX size={24} />
          </IconButton>
        </Box>

        {product && (
          <>
            {/* Product Info */}
            <Box sx={{ mb: 3, p: 2, backgroundColor: 'background.default', borderRadius: 1 }}>
              <Typography variant="h6" gutterBottom>
                {product.name}
              </Typography>
              <Stack direction="row" spacing={2} flexWrap="wrap">
                <Typography variant="body2" color="text.secondary">
                  {t('products.code')}: {product.code}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {t('products.group')}: {product.group?.name || 'No Group'}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {t('products.cost')}: {Number(product.cost).toFixed(2)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {t('products.reorderLevel')}: {product.reorderLevel}
                </Typography>
              </Stack>
              {product.description && (
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                  {t('products.description')}: {product.description}
                </Typography>
              )}
            </Box>

            <Divider sx={{ mb: 3 }} />

            {/* Prices Table */}
            <Box sx={{ flex: 1, overflow: 'auto' }}>
              <Typography variant="h6" gutterBottom>
                {t('products.prices')} ({product.productPrices?.length || 0})
              </Typography>

              <TableContainer component={Paper} variant="outlined">
                <Table size="small" stickyHeader>
                  <TableHead>
                    <TableRow>
                      <TableCell>{t('products.barcode')}</TableCell>
                      <TableCell>{t('products.unit')}</TableCell>
                      <TableCell>{t('products.unitFactor')}</TableCell>
                      <TableCell>{t('products.price')}</TableCell>
                      <TableCell>{t('products.generated')}</TableCell>
                      <TableCell>{t('products.status')}</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {product.productPrices?.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={6} align="center">
                          <Typography color="text.secondary" sx={{ py: 4 }}>
                            {t('products.noPrices')}
                          </Typography>
                        </TableCell>
                      </TableRow>
                    ) : (
                      product.productPrices?.map((price, index) => (
                        <TableRow key={price.id || index}>
                          <TableCell>
                            <Stack direction="row" alignItems="center" spacing={1}>
                              <Typography variant="body2">
                                {price.barcode || '-'}
                              </Typography>
                              {price.isGenerated && (
                                <Chip 
                                  label={t('products.autoGenerated')} 
                                  size="small" 
                                  color="info"
                                />
                              )}
                            </Stack>
                          </TableCell>
                          <TableCell>{getUnitName(price.unitId)}</TableCell>
                          <TableCell>{price.unitFactor}</TableCell>
                          <TableCell>
                            <Typography variant="body2" fontWeight="bold">
                              {price.price.toFixed(2)}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={price.isGenerated ? t('products.yes') : t('products.no')}
                              color={price.isGenerated ? 'info' : 'default'}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={price.isActive ? t('products.active') : t('products.inactive')}
                              color={price.isActive ? 'success' : 'default'}
                              size="small"
                            />
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          </>
        )}

        {!product && (
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flex: 1 }}>
            <Typography variant="h6" color="text.secondary">
              {t('products.selectProductToViewPrices')}
            </Typography>
          </Box>
        )}
      </Box>
    </Drawer>
  );
};

export default ProductPricesDrawer;
