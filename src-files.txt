
===== src/Pages/pos/newSales/CategorySidebar.tsx =====
import React from 'react';
import { CategoryItem } from './types/PosSystem';

interface CategorySidebarProps {
  categories: CategoryItem[];
  selectedCategory: string;
  onCategorySelect: (categoryId: string) => void;
  className?: string;
  style?: React.CSSProperties;
}

const CategorySidebar: React.FC<CategorySidebarProps> = ({
  categories,
  selectedCategory,
  onCategorySelect,
  className = '',
  style
}) => {
  return (
    <div className={`flex flex-col gap-4 overflow-y-auto invisible-scroll ${className}`} style={style}>
      {categories.map((category) => (
        <button
          key={category.id}
          onClick={() => onCategorySelect(category.id)}
          className="transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-blue flex-shrink-0 flex flex-col items-center justify-center"
          style={{ 
            width: '100%',
            background: 'white',
            borderRadius: 16,
            border: category.id === selectedCategory ? '2px #0373ED solid' : '2px transparent solid',
            minHeight: 'min(12vh, 120px)',
            padding: 'min(1vh, 12px)'
          }}
        >
          <div style={{ 
            width: 'min(3vw, 48px)', 
            height: 'min(3vw, 48px)',
            marginBottom: 'min(0.5vh, 8px)'
          }}>
            <img
              src={category.image}
              alt={category.name}
              className="w-full h-full object-contain"
            />
          </div>
          <span 
            className="font-cairo font-normal text-primary text-center"
            style={{ 
              fontSize: 'clamp(14px, 1.2vw, 18px)', // تكبير الخط من 12px إلى 14-18px
              lineHeight: 'clamp(18px, 1.5vw, 24px)',
              fontWeight: '600' // جعل الخط أكثر وضوحاً
            }}
          >
            {category.nameArabic}
          </span>
        </button>
      ))}
    </div>
  );
};

export default CategorySidebar;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
import React, { useState } from 'react';

const Header: React.FC = () => {
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');

  const orderTypes = ['Takeaway', 'Dine In', 'Delivery'];

  return (
    <div className="header-content">
      {/* Logo */}
      <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />

      {/* Navigation */}
      <nav className="nav-items">
        <a href="#" className="nav-item">
          <img src="/images/img_sending_order.svg" alt="" />
          Today Orders
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_table_02.svg" alt="" />
          Table
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_discount_tag_01.svg" alt="" />
          Discount
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_delete_01.svg" alt="" />
          Void
        </a>
        <select 
          value={selectedOrderType}
          onChange={(e) => setSelectedOrderType(e.target.value)}
          style={{ 
            padding: '0.8rem 1.6rem', 
            borderRadius: '0.4rem',
            border: '0.1rem solid #ccc',
            fontSize: '1.6rem',
            fontFamily: 'Nunito, sans-serif'
          }}
        >
          {orderTypes.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        <button style={{ 
          padding: '0.8rem',
          background: 'none',
          border: 'none',
          cursor: 'pointer'
        }}>
          <img src="/images/img_menu_01.svg" alt="Menu" style={{ width: '2.8rem', height: '2.8rem' }} />
        </button>
      </nav>
    </div>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/index.tsx =====
import React, { useState, useCallback, useMemo } from 'react';
import { MenuItem, CategoryItem, OrderSummary } from './types/PosSystem';
import './styles/index.css';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('0');
  const [selectedCategory, setSelectedCategory] = useState('crepe');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);

  // Mock data
  const categories: CategoryItem[] = useMemo(() => [
    { id: 'crepe', name: 'Crepe', nameArabic: 'كريب', image: '/images/img_crepes_1.png', selected: true },
    { id: 'burger', name: 'Burger', nameArabic: 'برجر', image: '/images/img_burger_1.png' },
    { id: 'fries', name: 'Fries', nameArabic: 'بطاطس', image: '/images/img_french_fries_1.png' },
    { id: 'pasta', name: 'Pasta', nameArabic: 'باستا', image: '/images/img_pasta_1.png' },
    { id: 'pizza', name: 'Pizza', nameArabic: 'بيتزا', image: '/images/img_pizza_1.png' },
    { id: 'drinks', name: 'Drinks', nameArabic: 'مشروبات', image: '/images/img_drinks_1.png' },
    { id: 'desserts', name: 'Desserts', nameArabic: 'حلويات', image: '/images/img_desserts_1.png' },
  ], []);

  const menuItems: MenuItem[] = useMemo(() => [
    { id: '1', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462.png', category: 'crepe' },
    { id: '2', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_186x194.png', category: 'crepe' },
    { id: '3', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_1.png', category: 'crepe' },
    { id: '4', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_2.png', category: 'crepe' },
    { id: '5', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_3.png', category: 'crepe' },
    { id: '6', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_4.png', category: 'crepe' },
    { id: '7', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_5.png', category: 'crepe' },
    { id: '8', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_6.png', category: 'crepe' },
    { id: '9', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_7.png', category: 'crepe' },
    { id: '10', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_8.png', category: 'crepe' },
    { id: '11', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_9.png', category: 'crepe' },
    { id: '12', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_10.png', category: 'crepe' },
    { id: '13', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_11.png', category: 'crepe' },
    { id: '14', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_12.png', category: 'crepe' },
    { id: '15', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_13.png', category: 'crepe' },
    { id: '16', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_6.png', category: 'crepe' },
    { id: '17', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_14.png', category: 'crepe' },
    { id: '18', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_15.png', category: 'crepe' },
  ], []);

  const orderSummary: OrderSummary = useMemo(() => ({
    items: [
      {
        id: '1',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '2',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '3',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '4',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      }
    ],
    subtotal: 250,
    discount: 20,
    tax: 50,
    service: 70,
    total: 320
  }), [menuItems]);

  // Event handlers
  const handleNumberClick = useCallback((number: string) => {
    if (keypadValue === '0' && number !== '.') {
      setKeypadValue(number);
    } else {
      setKeypadValue(prev => prev + number);
    }
  }, [keypadValue]);

  const handleClearClick = useCallback(() => {
    setKeypadValue('0');
  }, []);

  const handleMenuItemClick = useCallback((item: MenuItem) => {
    console.log('Menu item clicked:', item);
  }, []);

  const handleCategorySelect = useCallback((categoryId: string) => {
    setSelectedCategory(categoryId);
  }, []);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  const handleRemoveItem = useCallback((itemId: string) => {
    console.log('Remove item:', itemId);
  }, []);

  const handleSendOrder = useCallback(() => {
    console.log('Send order');
  }, []);

  const handlePrintOrder = useCallback(() => {
    console.log('Print order');
  }, []);

  const handlePayOrder = useCallback(() => {
    console.log('Pay order');
  }, []);

  const filteredMenuItems = useMemo(() => 
    menuItems.filter(item => 
      item.category === selectedCategory &&
      (item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       item.nameArabic.includes(searchQuery))
    ), [menuItems, selectedCategory, searchQuery]
  );

  return (
    <div className="pos-system-container">
      {/* Header */}
      <header className="site-header">
        <div className="header-content">
          <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />
          <nav className="nav-items">
            <a href="#" className="nav-item">
              <img src="/images/img_sending_order.svg" alt="" />
              Today Orders
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_table_02.svg" alt="" />
              Table
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_discount_tag_01.svg" alt="" />
              Discount
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_delete_01.svg" alt="" />
              Void
            </a>
            <select style={{ 
              padding: '0.6rem 1.2rem', 
              borderRadius: '0.4rem',
              border: '0.1rem solid #ccc',
              fontSize: '1.4rem'
            }}>
              <option>Takeaway</option>
              <option>Dine In</option>
              <option>Delivery</option>
            </select>
            <button style={{ 
              padding: '0.6rem',
              background: 'none',
              border: 'none',
              cursor: 'pointer'
            }}>
              <img src="/images/img_menu_01.svg" alt="Menu" style={{ width: '2.4rem', height: '2.4rem' }} />
            </button>
          </nav>
        </div>
      </header>
      
      {/* Main Content */}
      <main className="main-content">
        {/* Left Panel */}
        <section className="left-panel">
          {/* Numeric Keypad */}
          <div className="numeric-keypad">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          {/* Filter Section */}
          <div className="filter-section">
            <div className="chip-container">
              <button 
                className={`chip extra ${selectedChips.includes('extra') ? 'active' : ''}`}
                onClick={() => handleChipClick('extra')}
              >
                <img src="/images/img_addcircle.svg" alt="" />
                Extra
              </button>
              <button 
                className={`chip without ${selectedChips.includes('without') ? 'active' : ''}`}
                onClick={() => handleChipClick('without')}
              >
                <img src="/images/img_removecircle.svg" alt="" />
                Without
              </button>
              <button 
                className={`chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
                onClick={() => handleChipClick('offer')}
              >
                <img src="/images/img_tags.svg" alt="" />
                Offer
              </button>
            </div>
            
            <div className="search-container" style={{ position: 'relative' }}>
              <img src="/images/img_search01.svg" alt="search" className="search-icon" />
              <input
                type="text"
                placeholder="Search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
              <button className="filter-button">
                <img src="/images/img_group_7.svg" alt="Filter" />
              </button>
            </div>
          </div>

          {/* Products Grid */}
          <div className="products-grid">
            {filteredMenuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => handleMenuItemClick(item)}
                className="product-card"
              >
                <img src={item.image} alt={item.name} className="product-image" />
                <div className="product-info">
                  <div className="product-name">{item.nameArabic}</div>
                  <div className="product-price">
                    <span>{item.price}</span>
                    <span className="currency">EGP</span>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </section>

        {/* Category Sidebar */}
        <aside className="category-sidebar">
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => handleCategorySelect(category.id)}
              className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
            >
              <img src={category.image} alt={category.name} />
              <span>{category.nameArabic}</span>
            </button>
          ))}
        </aside>

        {/* Order Panel */}
        <aside className="order-panel">
          <div className="order-header">
            <div className="order-number">#123</div>
            <div className="order-total">
              <span>1250</span>
              <span style={{ fontSize: '1.2rem', marginLeft: '0.4rem' }}>EGP</span>
            </div>
          </div>

          <div className="order-body">
            <h3 className="order-title">Order Details</h3>

            <div className="customer-input-container">
              <input
                type="text"
                placeholder="Walk in Customer"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                className="customer-input"
              />
              <button className="customer-button">
                <img src="/images/img_group_1000004320.svg" alt="Add customer" />
              </button>
            </div>

            <div className="order-items">
              {orderSummary.items.map((item) => (
                <div key={item.id} className="order-item">
                  <div className="item-details">
                    <button onClick={() => handleRemoveItem(item.id)} className="delete-button">
                      <img src="/images/img_delete_02.svg" alt="Remove" />
                    </button>
                    <div className="item-info">
                      <div className="item-name">
                        {item.quantity} X {item.menuItem.name}
                      </div>
                      {item.extras.map((extra, index) => (
                        <div key={index} className="item-extras">
                          {extra.quantity} X {extra.name} ({extra.price})
                          <span style={{ marginLeft: '2.4rem' }}>{extra.price * extra.quantity}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  <div className="item-prices">
                    <div className="item-price">{item.menuItem.price * item.quantity}</div>
                    <div className="item-total">{item.totalPrice}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="order-summary">
            <div className="summary-rows">
              {[
                { label: 'Sub Total', value: orderSummary.subtotal },
                { label: 'Discount', value: orderSummary.discount },
                { label: 'Tax', value: orderSummary.tax },
                { label: 'Service', value: orderSummary.service }
              ].map(item => (
                <div key={item.label} className="summary-row">
                  <span>{item.label}</span>
                  <span className="value">{item.value} <small>EGP</small></span>
                </div>
              ))}
            </div>

            <div className="summary-total">
              <span>Total</span>
              <span>{orderSummary.total} <small>EGP</small></span>
            </div>

            <div className="action-buttons">
              <button onClick={handleSendOrder} className="action-button send-button">
                <img src="/images/img_tabler_send.svg" alt="Send" />
                Send
              </button>
              <button onClick={handlePrintOrder} className="action-button print-button">
                <img src="/images/img_printer.svg" alt="Print" />
                Print
              </button>
              <button onClick={handlePayOrder} className="action-button pay-button">
                <img src="/images/img_payment_02.svg" alt="Pay" />
                Pay
              </button>
            </div>
          </div>
        </aside>
      </main>
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/MenuGrid.tsx =====
import React from 'react';
import { MenuItem } from './types/PosSystem';

interface MenuGridProps {
  items: MenuItem[];
  onItemClick: (item: MenuItem) => void;
  className?: string;
}

const MenuGrid: React.FC<MenuGridProps> = ({
  items,
  onItemClick,
  className = ''
}) => {
  return (
    <div className={`product-grid ${className}`}>
      {items.map((item) => (
        <button
          key={item.id}
          onClick={() => onItemClick(item)}
          className="product-card"
        >
          <img src={item.image} alt={item.name} className="product-image" />
          <div className="product-info">
            <div className="product-name">{item.nameArabic}</div>
            <div className="product-price">
              <span>{item.price}</span>
              <span className="currency">EGP</span>
            </div>
          </div>
        </button>
      ))}
    </div>
  );
};

export default MenuGrid;

===== src/Pages/pos/newSales/NumericKeypad.tsx =====
import React from 'react';

interface NumericKeypadProps {
  onNumberClick: (number: string) => void;
  onClearClick: () => void;
  currentValue: string;
  className?: string;
}

const NumericKeypad: React.FC<NumericKeypadProps> = ({
  onNumberClick,
  onClearClick,
  currentValue,
  className = ''
}) => {
  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'];

  return (
    <div className={`numeric-keypad ${className}`}>
      <div className="keypad-grid">
        {numbers.map((key) => (
          <button 
            key={key}
            className="keypad-key"
            onClick={() => key === 'C' ? onClearClick() : onNumberClick(key)}
          >
            {key}
          </button>
        ))}
      </div>
      <div className="keypad-display">
        {currentValue}
      </div>
    </div>
  );
};

export default NumericKeypad;

===== src/Pages/pos/newSales/OrderSummaryPanel.tsx =====
import React from 'react';
import { OrderSummary } from './types/PosSystem';

interface OrderSummaryPanelProps {
  orderNumber: string;
  totalAmount: string;
  orderSummary: OrderSummary;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveItem: (itemId: string) => void;
  onSendOrder: () => void;
  onPrintOrder: () => void;
  onPayOrder: () => void;
  className?: string;
}

const OrderSummaryPanel: React.FC<OrderSummaryPanelProps> = ({
  orderNumber,
  totalAmount,
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveItem,
  onSendOrder,
  onPrintOrder,
  onPayOrder,
  className = ''
}) => {
  return (
    <div className={`order-container ${className}`}>
      {/* Header */}
      <div className="order-header">
        <div className="order-number">{orderNumber}</div>
        <div className="order-total">
          <span>{totalAmount.split(' ')[0]}</span>
          <span style={{ fontSize: '1.4rem', marginLeft: '0.4rem' }}>EGP</span>
        </div>
      </div>

      {/* Body */}
      <div className="order-body">
        <h3 className="order-title">Order Details</h3>

        {/* Customer Info */}
        <div className="customer-input-container">
          <input
            type="text"
            placeholder="Walk in Customer"
            value={customerName}
            onChange={(e) => onCustomerNameChange(e.target.value)}
            className="customer-input"
          />
          <button className="customer-button">
            <img src="/images/img_group_1000004320.svg" alt="Add customer" />
          </button>
        </div>

        {/* Order Items */}
        <div className="order-items">
          {orderSummary.items.map((item) => (
            <div key={item.id} className="order-item">
              <div className="item-details">
                <button onClick={() => onRemoveItem(item.id)} className="delete-button">
                  <img src="/images/img_delete_02.svg" alt="Remove" />
                </button>
                <div className="item-info">
                  <div className="item-name">
                    {item.quantity} X {item.menuItem.name}
                  </div>
                  {item.extras.map((extra, index) => (
                    <div key={index} className="item-extras">
                      {extra.quantity} X {extra.name} ({extra.price})
                      <span style={{ marginLeft: '3.2rem' }}>{extra.price * extra.quantity}</span>
                    </div>
                  ))}
                </div>
              </div>
              <div className="item-prices">
                <div className="item-price">{item.menuItem.price * item.quantity}</div>
                <div className="item-total">{item.totalPrice}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Summary */}
      <div className="order-summary">
        <div className="summary-rows">
          {[
            { label: 'Sub Total', value: orderSummary.subtotal },
            { label: 'Discount', value: orderSummary.discount },
            { label: 'Tax', value: orderSummary.tax },
            { label: 'Service', value: orderSummary.service }
          ].map(item => (
            <div key={item.label} className="summary-row">
              <span>{item.label}</span>
              <span className="value">{item.value} <small>EGP</small></span>
            </div>
          ))}
        </div>

        <div className="summary-total">
          <span>Total</span>
          <span>{orderSummary.total} <small>EGP</small></span>
        </div>

        <div className="action-buttons">
          <button onClick={onSendOrder} className="action-button send-button">
            <img src="/images/img_tabler_send.svg" alt="Send" />
            Send
          </button>
          <button onClick={onPrintOrder} className="action-button print-button">
            <img src="/images/img_printer.svg" alt="Print" />
            Print
          </button>
          <button onClick={onPayOrder} className="action-button pay-button">
            <img src="/images/img_payment_02.svg" alt="Pay" />
            Pay
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderSummaryPanel;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/index.css =====
@import './tailwind.css';
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Aleo:wght@400;700&display=swap');

/* إعداد النظام الأساسي للـ REM مع الأبعاد الصحيحة 2000×1200 */
html {
  font-size: 62.5%; /* 1rem = 10px */
  direction: ltr !important;
  text-align: left !important;
  color-scheme: light only !important;
}

/* Responsive breakpoints */
@media (max-width: 768px) {
  html { font-size: 50%; }
}

@media (min-width: 769px) and (max-width: 1200px) {
  html { font-size: 56.25%; }
}

@media (min-width: 1201px) and (max-width: 1600px) {
  html { font-size: 62.5%; }
}

@media (min-width: 1601px) and (max-width: 2000px) {
  html { font-size: 68.75%; }
}

@media (min-width: 2001px) {
  html { font-size: 75%; }
}

/* إعدادات عامة */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  direction: ltr !important;
  text-align: left !important;
  color-scheme: light only !important;
}

body {
  font-family: 'Nunito', 'Inter', sans-serif;
  background-color: #f5f5f5;
  color: #000;
  font-size: 1.6rem;
  line-height: 1.5;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  direction: ltr !important;
  width: 100%;
  height: 100%;
}

/* Container رئيسي يملأ الشاشة بالكامل */
.pos-system-container {
  width: 100vw;
  height: 100vh;
  min-width: 100vw;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: #f5f5f5;
  overflow: hidden;
  direction: ltr !important;
}

/* Header يملأ العرض بالكامل */
.site-header {
  height: 7.2rem; /* 72px */
  background-color: #ffffff;
  display: flex;
  align-items: center;
  padding: 0 4rem;
  flex-shrink: 0;
  width: 100%;
  box-shadow: 0 0.2rem 0.8rem rgba(0, 0, 0, 0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.logo {
  width: 14rem;
  height: 6rem;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: 2.4rem;
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  font-size: 1.6rem;
  font-weight: 500;
  color: #000;
  text-decoration: none;
  transition: color 0.2s ease;
}

.nav-item:first-child {
  color: #0373ed;
}

.nav-item img {
  width: 1.8rem;
  height: 1.8rem;
}

/* Main Content يملأ المساحة المتبقية */
.main-content {
  flex: 1;
  display: flex;
  gap: 1.5rem;
  padding: 2rem;
  height: calc(100vh - 7.2rem);
  overflow: hidden;
  width: 100%;
    flex-direction: row; /* التأكد من الترتيب الأفقي */
  align-items: stretch; /* جعل جميع العناصر بنفس الارتفاع */
    justify-content: space-between;

}

/* Left Panel - 62% من الشاشة الكاملة */
.left-panel {
  width: 62%;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  overflow: hidden;
  order: 1;
}

/* Numeric Keypad */
.numeric-keypad {
  height: 8.5rem;
  display: flex;
  background-color: #ffffff;
  border: 0.1rem solid rgba(0, 0, 0, 0.3);
  border-radius: 0.8rem;
  overflow: hidden;
  flex-shrink: 0;
  direction: ltr !important;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  height: 100%;
  direction: ltr !important;
}

.keypad-key {
  font-family: 'Aleo', serif;
  font-size: 2.8rem;
  border-right: 0.1rem solid rgba(0, 0, 0, 0.2);
  color: #000;
  background: #ffffff;
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  direction: ltr !important;
  text-align: center !important;
}

.keypad-key:hover {
  background-color: #f8f9fa;
}

.keypad-key:last-child {
  font-family: 'Nunito', sans-serif;
  border-right: none;
}

.keypad-display {
  width: 20rem;
  background-color: #0373ed;
  color: #ffffff;
  font-family: 'Nunito', sans-serif;
  font-size: 3.2rem;
  font-weight: 400;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
  direction: ltr !important;
  text-align: center !important;
}

/* Filter Section */
.filter-section {
  height: 4.8rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1.6rem;
  flex-shrink: 0;
}

.chip-container {
  display: flex;
  gap: 1.2rem;
  flex: 1;
}

.chip {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  padding: 0.8rem 2rem;
  border-radius: 0.6rem;
  font-family: 'Nunito', sans-serif;
  font-size: 2rem;
  font-weight: 500;
  color: #ffffff;
  border: none;
  cursor: pointer;
  transition: opacity 0.2s ease;
  height: 4.8rem;
  direction: ltr !important;
}

.chip:hover {
  opacity: 0.9;
}

.chip.extra { background-color: #23a929; }
.chip.without { background-color: #e53935; }
.chip.offer { background-color: #ffb74d; }

.chip img {
  width: 2rem;
  height: 2rem;
}

.search-container {
  display: flex;
  background-color: #ffffff;
  border-radius: 0.6rem;
  box-shadow: 0 0.8rem 2.4rem rgba(0, 0, 0, 0.15);
  overflow: hidden;
  height: 4.8rem;
}

.search-input {
  width: 28rem;
  height: 4.8rem;
  border: none;
  background: transparent;
  padding: 0 1.6rem 0 4.4rem;
  font-size: 1.6rem;
  outline: none;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.search-icon {
  position: absolute;
  left: 1.6rem;
  top: 50%;
  transform: translateY(-50%);
  width: 1.8rem;
  height: 1.8rem;
}

.filter-button {
  width: 5.6rem;
  height: 4.8rem;
  background-color: #0373ed;
  border: none;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.filter-button:hover {
  background-color: #025bb5;
}

.filter-button img {
  width: 2rem;
  height: 2rem;
}

/* Products Grid */
.products-grid {
  flex: 1;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding: 0.6rem;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(18rem, 1fr));
  gap: 0.6rem;
  align-content: start;
  direction: ltr !important;
}

.products-grid::-webkit-scrollbar {
  display: none;
}

.product-card {
  width: 18rem;
  height: 24rem;
  background-color: #ffffff;
  border-radius: 1.2rem;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  box-shadow: 0 0.2rem 0.6rem rgba(0, 0, 0, 0.1);
  position: relative;
}

.product-card:hover {
  transform: translateY(-0.2rem);
  box-shadow: 0 0.4rem 1rem rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 16rem;
  object-fit: cover;
}

.product-info {
  padding: 0.6rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 8rem;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-weight: 600;
  font-size: 1.4rem;
  color: #000;
  text-align: center;
  direction: ltr !important;
}

.product-price {
  font-family: 'Cairo', sans-serif;
  font-weight: 600;
  font-size: 1.8rem;
  color: #000;
  direction: ltr !important;
  text-align: left !important;
}

.product-price .currency {
  font-size: 1rem;
}

/* Category Sidebar - 9% من الشاشة الكاملة */
.category-sidebar {
  order: 2;
  width: 9%;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding: 1.2rem;
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  flex-shrink: 0; /* منع الانكماش */
}

.category-sidebar::-webkit-scrollbar {
  display: none;
}

.category-item {
  width: 100%;
  min-width: 12rem;
  height: 10rem;
  background-color: #ffffff;
  border-radius: 1.2rem;
  padding: 1.2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.6rem;
  text-align: center;
  font-family: 'Cairo', sans-serif;
  font-size: 2rem;
  font-weight: 400;
  transition: all 0.2s ease;
  cursor: pointer;
  border: 0.2rem solid transparent;
  flex-shrink: 0;
  color: #000;
  direction: ltr !important;
}

.category-item:hover {
  background-color: #f8f9fa;
  transform: translateY(-0.2rem);
  box-shadow: 0 0.4rem 1rem rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border: 0.2rem solid #0373ed;
}

.category-item img {
  width: 4.8rem;
  height: 4.8rem;
  object-fit: contain;
}

/* إضافة responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .category-sidebar {
    padding: 1rem;
    gap: 1rem;
  }
  
  .category-item {
    height: 8rem;
    padding: 1rem;
    font-size: 1.6rem;
  }
  
  .category-item img {
    width: 3.6rem;
    height: 3.6rem;
  }
}

@media (max-width: 1024px) {
  .category-sidebar {
    padding: 0.8rem;
    gap: 0.8rem;
  }
  
  .category-item {
    height: 7rem;
    padding: 0.8rem;
    font-size: 1.4rem;
  }
  
  .category-item img {
    width: 3rem;
    height: 3rem;
  }
}

/* Order Panel - 29% من الشاشة الكاملة */
.order-panel {
    order: 3;
  width: 29%;
  background-color: #ffffff;
  border-radius: 1.2rem;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 0.2rem 0.6rem rgba(0, 0, 0, 0.1);
    flex-shrink: 0; /* منع الانكماش */

}

.order-header {
  height: 5.6rem;
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background-color: #0373ed;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem 0 0 0;
  font-size: 2rem;
  font-weight: 700;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: center !important;
}

.order-total {
  width: 13rem;
  border: 0.1rem solid #0373ed;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0 1.2rem 0 0;
  font-size: 2.4rem;
  font-weight: 700;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: center !important;
}

.order-body {
  flex: 1;
  padding: 2rem 1.4rem;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  display: flex;
  flex-direction: column;
}

.order-body::-webkit-scrollbar {
  display: none;
}

.order-title {
  font-size: 1.8rem;
  font-weight: 700;
  margin-bottom: 1.4rem;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.customer-input-container {
  display: flex;
  margin-bottom: 2rem;
  border: 0.1rem solid rgba(0, 0, 0, 0.3);
  border-radius: 0.4rem;
  overflow: hidden;
}

.customer-input {
  flex: 1;
  padding: 0.8rem 1.2rem;
  font-size: 1.2rem;
  border: none;
  outline: none;
  background: transparent;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.customer-button {
  width: 3.6rem;
  height: 3.2rem;
  background-color: #0373ed;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.customer-button img {
  width: 1.6rem;
  height: 1.6rem;
}

/* Order Items */
.order-items {
  flex: 1;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  margin-bottom: 2rem;
  direction: ltr !important;
}

.order-items::-webkit-scrollbar {
  display: none;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: 0.6rem;
  margin-bottom: 0.6rem;
  border-bottom: 0.05rem solid rgba(0, 0, 0, 0.2);
}

.item-details {
  display: flex;
  gap: 0.6rem;
  align-items: flex-start;
  flex: 1;
}

.delete-button {
  margin-top: 0.2rem;
  padding: 0.2rem;
  background: none;
  border: none;
  cursor: pointer;
}

.delete-button img {
  width: 1.4rem;
  height: 1.4rem;
}

.item-info {
  flex: 1;
}

.item-name {
  font-size: 1.4rem;
  font-weight: 600;
  font-family: 'Nunito', sans-serif;
  margin-bottom: 0.3rem;
  direction: ltr !important;
  text-align: left !important;
}

.item-extras {
  font-size: 1rem;
  color: rgba(0, 0, 0, 0.5);
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.item-prices {
  text-align: right;
  flex-shrink: 0;
}

.item-price {
  font-size: 1.4rem;
  font-weight: 600;
  font-family: 'Nunito', sans-serif;
  margin-bottom: 0.3rem;
  direction: ltr !important;
  text-align: right !important;
}

.item-total {
  font-size: 1.4rem;
  font-weight: 600;
  color: #0373ed;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: right !important;
}

/* Order Summary */
.order-summary {
  padding: 2rem 1.4rem;
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  margin-bottom: 2rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  font-size: 1.4rem;
  font-weight: 500;
  font-family: 'Nunito', sans-serif;
}

.summary-row .value {
  font-weight: 700;
}

.summary-total {
  display: flex;
  justify-content: space-between;
  font-size: 1.8rem;
  font-weight: 700;
  padding-top: 2rem;
  border-top: 0.1rem solid rgba(0, 0, 0, 0.3);
  margin-bottom: 2rem;
  font-family: 'Nunito', sans-serif;
}

/* Action Buttons */
.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.2rem;
}

.action-button {
  height: 5.2rem;
  border-radius: 0.4rem;
  color: #ffffff;
  font-size: 1.6rem;
  font-weight: 700;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 0.3rem;
  transition: opacity 0.2s ease;
  font-family: 'Nunito', sans-serif;
  border: none;
  cursor: pointer;
  direction: ltr !important;
}

.action-button img {
  width: 1.6rem;
  height: 1.6rem;
}

.action-button:hover {
  opacity: 0.9;
}

.send-button { background-color: #e53935; }
.print-button { background-color: #0373ed; }
.pay-button { background-color: #23a929; }

/* إخفاء الـ scrollbar تماماً */
.invisible-scroll {
  overflow-y: auto;
  overflow-x: hidden;
  scrollbar-width: none;
  -ms-overflow-style: none;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  direction: ltr !important;
}

.invisible-scroll::-webkit-scrollbar {
  display: none;
}

/* تحسين scroll للمنتجات فقط في Order Details */
.order-products-list {
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  direction: ltr !important;
  max-height: 30rem;
  margin-bottom: 1.6rem;
}

.order-products-list::-webkit-scrollbar {
  display: none;
}

/* Utility Classes */
.hidden-scroll {
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.hidden-scroll::-webkit-scrollbar {
  display: none;
}

/* فرض LTR على جميع العناصر */
[dir="rtl"], .rtl {
  direction: ltr !important;
  text-align: left !important;
}

.flex {
  direction: ltr !important;
}

.grid {
  direction: ltr !important;
}

html[dir="rtl"], 
body[dir="rtl"], 
*[dir="rtl"] {
  direction: ltr !important;
  text-align: left !important;
}

.pos-system-container,
.pos-system-container * {
  direction: ltr !important;
}

/* استثناءات للنصوص العربية */
.category-name,
.product-name-arabic,
.order-item-arabic {
  text-align: center !important;
  direction: ltr !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .main-content {
    flex-direction: column;
    padding: 1.2rem;
  }
  
  .left-panel, .category-sidebar, .order-panel {
    width: 100%;
    height: auto;
  }
  
  .category-sidebar {
    flex-direction: row;
    flex-wrap: wrap;
    height: auto;
    overflow: visible;
  }
  
  .category-item {
    flex-grow: 1;
    min-width: 8rem;
  }
}

@media (min-width: 1920px) {
  .left-panel {
    width: 68%;
  }
  
  .category-sidebar {
    width: 7%;
  }
  
  .order-panel {
    width: 25%;
  }
}

@media (min-width: 2560px) {
  .pos-system-container {
    width: 100vw;
  }
}

/* Print Styles */
@media print {
  .pos-system-container {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
  
  * {
    direction: ltr !important;
  }
}

/* High DPI Screens */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  img {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }
}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}

/* Loading State */
.loading {
  opacity: 0.7;
  pointer-events: none;
}

/* Error State */
.error {
  border-color: #e53935 !important;
  background-color: rgba(229, 57, 53, 0.1) !important;
}

/* Success State */
.success {
  border-color: #23a929 !important;
  background-color: rgba(35, 169, 41, 0.1) !important;
}


/* منع التداخل بين العناصر */
.main-content > * {
  flex-shrink: 0; /* منع انكماش أي عنصر */
  min-width: 0; /* السماح بالتقلص عند الحاجة */
}

/* تأكيد عدم التداخل */
.category-sidebar {
  position: relative;
  z-index: 1;
}

.order-panel {
  position: relative;
  z-index: 1;
}

/* للشاشات الصغيرة */
@media (max-width: 1440px) {
  .left-panel {
    width: 58%;
  }
  
  .category-sidebar {
    width: 12%;
  }
  
  .order-panel {
    width: 29%;
  }
  
  .main-content {
    gap: 1rem;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .left-panel {
    width: 64%;
  }
  
  .category-sidebar {
    width: 8%;
  }
  
  .order-panel {
    width: 27.5%;
  }
  
  .main-content {
    gap: 1rem;
  }
}
===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
export interface MenuItem {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  image: string;
  category: string;
}

export interface OrderItem {
  id: string;
  menuItem: MenuItem;
  quantity: number;
  extras: OrderExtra[];
  totalPrice: number;
}

export interface OrderExtra {
  name: string;
  nameArabic: string;
  price: number;
  quantity: number;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  selected?: boolean;
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}