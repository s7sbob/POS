
===== src/Pages/pos/newSales/components/ActionButtons.tsx =====
// src/Pages/pos/newSales/components/ActionButtons.tsx
import React from 'react';

interface ActionButtonsProps {
  selectedChips: string[];
  onChipClick: (chipType: string) => void;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  onExtraClick: () => void;
  onWithoutClick: () => void;
  searchQuery: string;
  onSearchChange: (query: string) => void;
    hasSelectedOrderItem: boolean; // إضافة جديدة

}

const ActionButtons: React.FC<ActionButtonsProps> = ({
  selectedChips,
  onChipClick,
  isExtraMode,
  isWithoutMode,
  onExtraClick,
  onWithoutClick,
  searchQuery,
  onSearchChange,
  hasSelectedOrderItem

}) => {
  return (
    <div className="action-buttons-bar">
      <div className="action-chips">
        <button 
          className={`action-chip extra ${selectedChips.includes('extra') || isExtraMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onExtraClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_addcircle.svg" alt="" />
          <span>Extra</span>
        </button>
        <button 
          className={`action-chip without ${selectedChips.includes('without') || isWithoutMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onWithoutClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_removecircle.svg" alt="" />
          <span>Without</span>
        </button>
        <button 
          className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
          onClick={() => onChipClick('offer')}
        >
          <img src="/images/img_tags.svg" alt="" />
          <span>Offer</span>
        </button>
      </div>
      
      <div className="search-container">
        <img src="/images/img_search01.svg" alt="search" className="search-icon" />
        <input
          type="text"
          placeholder="Search"
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          className="search-input"
        />
        <button className="filter-button">
          <img src="/images/img_group_7.svg" alt="Filter" />
        </button>
      </div>
    </div>
  );
};

export default ActionButtons;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
// src/Pages/pos/newSales/components/Header.tsx
import React, { useState, useRef, useEffect } from 'react';
import '../../styles/Header.css';

interface HeaderProps {
  selectedOrderType: string;
  onOrderTypeChange: (type: string) => void;
  onResetOrder?: () => void;
}

interface OrderType {
  id: number;
  name: string;
  displayName: string;
  icon: string;
  color: string;
  description: string;
}

interface DeliveryPartner {
  id: number;
  name: string;
  displayName: string;
  icon: string;
  color: string;
  bgColor: string;
}

const Header: React.FC<HeaderProps> = ({ 
  selectedOrderType, 
  onOrderTypeChange, 
  onResetOrder 
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [selectedDeliveryPartner, setSelectedDeliveryPartner] = useState<string | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const orderTypes: OrderType[] = [
    {
      id: 1,
      name: 'Takeaway',
      displayName: 'Takeaway',
      icon: '/images/takeaway.png',
      color: '#28a745',
      description: 'عميل يأخذ الطلب'
    },
    {
      id: 2,
      name: 'Dine-in',
      displayName: 'Dine-in',
      icon: '/images/dine-in.png',
      color: '#007bff',
      description: 'تناول في المطعم'
    },
    {
      id: 3,
      name: 'Delivery',
      displayName: 'Delivery',
      icon: '/images/delivery.png',
      color: '#dc3545',
      description: 'توصيل للمنزل'
    },
    {
      id: 4,
      name: 'Pickup',
      displayName: 'Pickup',
      icon: '/images/pickup.png',
      color: '#ffc107',
      description: 'استلام من المطعم'
    }
  ];

  const deliveryPartners: DeliveryPartner[] = [
    {
      id: 1,
      name: 'talabat',
      displayName: 'طلبات',
      icon: '/images/talabat.png',
      color: '#ff6b35',
      bgColor: '#fff5f3'
    },
    {
      id: 2,
      name: 'elmenus',
      displayName: 'الميناس',
      icon: '/images/elmenus.png',
      color: '#00c851',
      bgColor: '#f3fff6'
    },
    {
      id: 3,
      name: 'uber-eats',
      displayName: 'أوبر إيتس',
      icon: '/images/uber-eats.png',
      color: '#000000',
      bgColor: '#f8f9fa'
    }
  ];

  const handleMenuClick = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleOrderTypeSelect = (type: string) => {
    onOrderTypeChange(type);
    setIsDropdownOpen(false);
  };

  const handleDeliveryPartnerSelect = (partner: string) => {
    setSelectedDeliveryPartner(partner);
    console.log('Selected delivery partner:', partner);
    setIsDropdownOpen(false);
  };

  const handleOrderTypeReset = () => {
    if (onResetOrder) {
      onResetOrder();
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <header className="pos-header">
      <div className="header-content">
        <img 
          src="/images/img_foodify_logo_2_78x166.png" 
          alt="Foodify Logo" 
          className="header-logo" 
        />

        <nav className="header-nav">
          <a href="#" className="nav-item active">
            <img src="/images/img_sending_order.svg" alt="" />
            <span>Today Orders</span>
          </a>
          <a href="#" className="nav-item">
            <img src="/images/img_table_02.svg" alt="" />
            <span>Table</span>
          </a>
          <a href="#" className="nav-item">
            <img src="/images/img_discount_tag_01.svg" alt="" />
            <span>Discount</span>
          </a>
          <a href="#" className="nav-item">
            <img src="/images/img_delete_01.svg" alt="" />
            <span>Void</span>
          </a>
          
          <button 
            className="order-type-display clickable"
            onClick={handleOrderTypeReset}
          >
            {selectedOrderType}
          </button>
          
          <div className="menu-dropdown-container" ref={dropdownRef}>
            <button className="menu-button" onClick={handleMenuClick}>
              <img src="/images/img_menu_01.svg" alt="Menu" />
            </button>
            
            {isDropdownOpen && (
              <div className="professional-dropdown">
                {/* Order Types Section */}
                <div className="dropdown-section">
                  <div className="section-header">
                    <h3 className="section-title">نوع الطلب</h3>
                    <div className="section-divider"></div>
                  </div>
                  
                  <div className="order-types-grid">
                    {orderTypes.map((type) => (
                      <button
                        key={type.id}
                        className={`order-type-card ${selectedOrderType === type.name ? 'selected' : ''}`}
                        onClick={() => handleOrderTypeSelect(type.name)}
                        style={{ '--accent-color': type.color } as React.CSSProperties}
                      >
                        <div className="card-icon-container">
                          <img src={type.icon} alt={type.displayName} className="card-icon" />
                        </div>
                        <div className="card-content">
                          <div className="card-title">{type.displayName}</div>
                        </div>
                        <div className="card-check">
                          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                            <path d="M13 4L6 11L3 8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Delivery Partners Section */}
                <div className="dropdown-section">
                  <div className="section-header">
                    <h3 className="section-title">شركاء التوصيل</h3>
                    <div className="section-divider"></div>
                  </div>
                  
                  <div className="delivery-partners-grid">
                    {deliveryPartners.map((partner) => (
                      <button
                        key={partner.id}
                        className={`delivery-partner-card ${selectedDeliveryPartner === partner.name ? 'selected' : ''}`}
                        onClick={() => handleDeliveryPartnerSelect(partner.name)}
                        style={{ 
                          '--partner-color': partner.color,
                          '--partner-bg': partner.bgColor 
                        } as React.CSSProperties}
                      >
                        <div className="partner-icon-container">
                          <img src={partner.icon} alt={partner.displayName} className="partner-icon" />
                        </div>
                        <div className="partner-content">
                          <div className="partner-name">{partner.displayName}</div>
                          <div className="partner-status">متاح</div>
                        </div>
                        <div className="partner-badge">
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <circle cx="6" cy="6" r="6" fill="currentColor"/>
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </nav>
      </div>
    </header>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx =====
// src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OrderItem } from '../types/PosSystem';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import styles from '../styles/OrderItemDetailsPopup.module.css';

interface OrderItemDetailsPopupProps {
  orderItem: OrderItem | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdateItem: (itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => void;
  onRemoveItem: (itemId: string) => void;
}

const OrderItemDetailsPopup: React.FC<OrderItemDetailsPopupProps> = ({
  orderItem,
  isOpen,
  onClose,
  onUpdateItem
}) => {
  const [quantity, setQuantity] = useState(1);
  const [notes, setNotes] = useState('');
  const [discountPercentage, setDiscountPercentage] = useState(0);
  const [discountAmount, setDiscountAmount] = useState(0);
  
  // States مؤقتة للتحكم في التحديث
  const [tempDiscountPercentage, setTempDiscountPercentage] = useState('0');
  const [tempDiscountAmount, setTempDiscountAmount] = useState('0');
  
  // Refs للـ inputs
  const percentageInputRef = useRef<HTMLInputElement>(null);
  const amountInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (orderItem) {
      setQuantity(orderItem.quantity);
      setNotes(orderItem.notes || '');
      const currentDiscount = orderItem.discountAmount || 0;
      const baseTotal = orderItem.selectedPrice.price * orderItem.quantity;
      const currentDiscountPercentage = baseTotal > 0 ? (currentDiscount / baseTotal) * 100 : 0;
      setDiscountAmount(currentDiscount);
      setDiscountPercentage(currentDiscountPercentage);
      setTempDiscountAmount(currentDiscount.toFixed(2));
      setTempDiscountPercentage(currentDiscountPercentage.toFixed(1));
    }
  }, [orderItem]);

  if (!isOpen || !orderItem) return null;

  const unitPrice = orderItem.selectedPrice.price;
  const subItemsTotal = orderItem.subItems?.reduce((sum, item) => sum + item.price, 0) || 0;
  const baseTotal = (unitPrice * quantity) + subItemsTotal;
  const finalTotal = baseTotal - discountAmount;

  const handleQuantityChange = (change: number) => {
    const newQuantity = Math.max(1, quantity + change);
    setQuantity(newQuantity);
    
    const newBaseTotal = (unitPrice * newQuantity) + subItemsTotal;
    const newDiscountAmount = (newBaseTotal * discountPercentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير نسبة الخصم
  const handleDiscountPercentageChange = (value: number) => {
    const percentage = Math.max(0, Math.min(100, value));
    setDiscountPercentage(percentage);
    const newDiscountAmount = (baseTotal * percentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير قيمة الخصم
  const handleDiscountAmountChange = (value: number) => {
    const amount = Math.max(0, Math.min(baseTotal, value));
    setDiscountAmount(amount);
    const newDiscountPercentage = baseTotal > 0 ? (amount / baseTotal) * 100 : 0;
    setDiscountPercentage(newDiscountPercentage);
    setTempDiscountPercentage(newDiscountPercentage.toFixed(1));
  };

  // معالج Focus للنسبة المئوية
  const handlePercentageFocus = () => {
    if (percentageInputRef.current) {
      percentageInputRef.current.select();
    }
  };

  // معالج Focus لقيمة الخصم
  const handleAmountFocus = () => {
    if (amountInputRef.current) {
      amountInputRef.current.select();
    }
  };

  // معالج Blur للنسبة المئوية
  const handlePercentageBlur = () => {
    const value = parseFloat(tempDiscountPercentage) || 0;
    handleDiscountPercentageChange(value);
  };

  // معالج Blur لقيمة الخصم
  const handleAmountBlur = () => {
    const value = parseFloat(tempDiscountAmount) || 0;
    handleDiscountAmountChange(value);
  };

  // معالج Enter للنسبة المئوية
  const handlePercentageKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountPercentage) || 0;
      handleDiscountPercentageChange(value);
      percentageInputRef.current?.blur();
    }
  };

  // معالج Enter لقيمة الخصم
  const handleAmountKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountAmount) || 0;
      handleDiscountAmountChange(value);
      amountInputRef.current?.blur();
    }
  };

  const handleConfirm = () => {
    onUpdateItem(orderItem.id, {
      quantity,
      notes,
      discountPercentage,
      discountAmount
    });
    onClose();
  };

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.orderItemDetails}>
        
        {/* سطر واحد فقط: اسم المنتج + السعر + الكمية + الإجمالي */}
        <div className={styles.mainRow}>
          {/* اسم المنتج والسعر على اليمين */}
          <div className={styles.productInfo}>
            <span className={styles.productName}>{orderItem.product.nameArabic}</span>
            {orderItem.product.hasMultiplePrices && (
              <span className={styles.productSize}> - {orderItem.selectedPrice.nameArabic}</span>
            )}
            <span className={styles.unitPrice}>{unitPrice} EGP</span>
          </div>

          {/* الكمية في النص */}
          <div className={styles.quantityControls}>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(-1)}
              disabled={quantity <= 1}
            >
              <RemoveIcon />
            </button>
            <span className={styles.quantityDisplay}>{quantity}</span>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(1)}
            >
              <AddIcon />
            </button>
          </div>
          
          {/* الإجمالي على الشمال */}
          <div className={styles.totalDisplay}>
            <span className={styles.totalAmount}>{finalTotal.toFixed(2)} EGP</span>
          </div>
        </div>

        {/* حقل الملاحظات */}
        <div className={styles.notesSection}>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="ملاحظات الصنف..."
            className={styles.notesInput}
            rows={3}
          />
        </div>

        {/* قسم الخصم */}
        <div className={styles.discountSection}>
          <div className={styles.discountInputs}>
            <div className={styles.discountField}>
              <label>نسبة الخصم %</label>
              <input
                ref={percentageInputRef}
                type="number"
                value={tempDiscountPercentage}
                onChange={(e) => setTempDiscountPercentage(e.target.value)}
                onFocus={handlePercentageFocus}
                onBlur={handlePercentageBlur}
                onKeyDown={handlePercentageKeyDown}
                min="0"
                max="100"
                step="0.1"
                className={styles.discountInput}
              />
            </div>
            
            <div className={styles.discountField}>
              <label>قيمة الخصم</label>
              <input
                ref={amountInputRef}
                type="number"
                value={tempDiscountAmount}
                onChange={(e) => setTempDiscountAmount(e.target.value)}
                onFocus={handleAmountFocus}
                onBlur={handleAmountBlur}
                onKeyDown={handleAmountKeyDown}
                min="0"
                max={baseTotal}
                step="0.01"
                className={styles.discountInput}
              />
            </div>
          </div>
        </div>

        {/* أزرار التأكيد والإلغاء */}
        <div className={styles.actionButtons}>
          <button className={styles.confirmBtn} onClick={handleConfirm}>
            تأكيد
          </button>
          <button className={styles.cancelBtn} onClick={onClose}>
            إلغاء
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderItemDetailsPopup;

===== src/Pages/pos/newSales/components/OrderManager.tsx =====
// src/Pages/pos/newSales/components/OrderManager.tsx - الكود الكامل المُحدث
import React from 'react';
import { PosProduct, PosPrice, SelectedOption, OrderItem, SubItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface OrderManagerProps {
  keypadValue: string;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  selectedOrderItemId: string | null;
  onOrderAdd: (orderItem: OrderItem) => void;
  onOrderUpdate: (itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => void;
  onModeReset: () => void;
  onLoadNormalProducts: () => void;
}

export const useOrderManager = ({
  keypadValue,
  isExtraMode,
  isWithoutMode,
  selectedOrderItemId,
  onOrderAdd,
  onOrderUpdate,
  onModeReset,
  onLoadNormalProducts
}: OrderManagerProps) => {
  
  const addToOrder = React.useCallback((
    product: PosProduct, 
    price: PosPrice, 
    selectedOptions: SelectedOption[]
  ) => {
    const quantity = parseInt(keypadValue) || 1;
    const basePrice = posService.calculateTotalPrice(price.price, selectedOptions, quantity);
    
    // إذا كان Extra أو Without mode مع منتج محدد
    if ((isExtraMode || isWithoutMode) && selectedOrderItemId) {
      const subItem: SubItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        type: isExtraMode ? 'extra' : 'without',
        name: `${product.nameArabic}${price.nameArabic ? ` - ${price.nameArabic}` : ''}`,
        quantity,
        price: isWithoutMode ? 0 : basePrice,
        productId: product.id
      };
      
      onOrderUpdate(selectedOrderItemId, 'addSubItem', subItem);
    } else {
      // إضافة منتج جديد (سواء عادي أو Extra/Without منفصل)
      const subItems: SubItem[] = [];
      
      // تحويل الخيارات إلى sub-items
      selectedOptions.forEach(option => {
        subItems.push({
          id: `option_${option.itemId}_${Date.now()}`,
          type: 'option',
          name: option.itemName,
          quantity: option.quantity,
          price: option.extraPrice * option.quantity,
          isRequired: true,
          groupId: option.groupId
        });
      });
      
      const orderItem: OrderItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        product,
        selectedPrice: price,
        quantity,
        totalPrice: basePrice,
        subItems: subItems.length > 0 ? subItems : undefined,
        // إضافة كمنتج Extra/Without منفصل إذا لم يكن هناك منتج محدد
        isExtra: isExtraMode && !selectedOrderItemId,
        isWithout: isWithoutMode && !selectedOrderItemId,
      };

      onOrderAdd(orderItem);
    }
    
    onModeReset();
    onLoadNormalProducts();
  }, [
    keypadValue, 
    isExtraMode, 
    isWithoutMode, 
    selectedOrderItemId, 
    onOrderAdd,
    onOrderUpdate,
    onModeReset, 
    onLoadNormalProducts
  ]);

  const removeSubItem = React.useCallback((orderItemId: string, subItemId: string) => {
    onOrderUpdate(orderItemId, 'removeSubItem', subItemId);
  }, [onOrderUpdate]);

  return { addToOrder, removeSubItem };
};

===== src/Pages/pos/newSales/components/OrderSummary.tsx =====
import React, { useState } from 'react';
import { OrderSummary as OrderSummaryType, OrderItem, SubItem } from '../types/PosSystem';
import styles from '../styles/OrderSummary.module.css';

interface OrderSummaryProps {
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: OrderItem) => void;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick
}) => {
  
  // إضافة state للـ sub-item المحدد
  const [selectedSubItemId, setSelectedSubItemId] = useState<string | null>(null);
  
const renderSubItem = (subItem: SubItem, orderItemId: string) => {
  // فقط المنتجات من نوع extra و without يمكن حذفها أو تحديدها
  const canDelete = subItem.type === 'extra' || subItem.type === 'without';
  const isSelected = selectedSubItemId === subItem.id && canDelete;
  
  return (
    <div 
      key={subItem.id} 
      className={`${styles.subItem} ${isSelected ? styles.selectedSubItem : ''}`}
      onClick={(e) => {
        e.stopPropagation();
        
        // فقط إذا كان من النوع القابل للحذف
        if (canDelete) {
          const rect = e.currentTarget.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          
          if (isSelected && clickX <= 30) {
            onRemoveSubItem(orderItemId, subItem.id);
            setSelectedSubItemId(null);
          } else {
            setSelectedSubItemId(isSelected ? null : subItem.id);
          }
        }
        // إذا كان من نوع option، لا يحدث شيء
      }}
      style={{
        cursor: canDelete ? 'pointer' : 'default' // تغيير الـ cursor بناءً على القابلية للحذف
      }}
    >
      <div className={styles.subItemDetails}>
        <div className={styles.subItemInfo}>
          {/* إظهار الـ badge فقط إذا لم يكن محدد */}
          {!isSelected && (
            <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
              {subItem.type === 'extra' && '+'}
              {subItem.type === 'without' && '-'}
              {subItem.type === 'option' && '•'}
            </span>
          )}
          <div className={styles.subItemName}>
            {subItem.quantity} X {subItem.name}
          </div>
        </div>
      </div>
      
      <div className={styles.subItemPrices}>
        <div className={styles.subItemPrice}>
          {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
        </div>
        <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
          {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
        </div>
      </div>
    </div>
  );
};


  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>💬</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  return (
    <aside className={styles.orderSummary}>
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{orderSummary.total.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      <div className={styles.orderContent}>
        <div className={styles.customerInput}>
          <input
            type="text"
            placeholder="Walk in Customer"
            value={customerName}
            onChange={(e) => onCustomerNameChange(e.target.value)}
            className={styles.customerField}
          />
          <button className={styles.customerButton}>
            <img src="/images/img_group_1000004320.svg" alt="Add customer" />
          </button>
        </div>

        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div 
                className={`${styles.orderItem} ${selectedOrderItemId === item.id ? styles.selected : ''} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}
onClick={(e) => {
  const rect = e.currentTarget.getBoundingClientRect();
  const clickX = e.clientX - rect.left;
  
  // إذا كان محدد والضغط على أول 30px (منطقة الـ border)
  if (selectedOrderItemId === item.id && clickX <= 30) {
    onRemoveOrderItem(item.id);
  } else {
    onOrderItemSelect(item.id);
  }
}}
                onDoubleClick={() => onOrderItemDoubleClick?.(item)}
              >
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice}
                  </div>
                </div>
              </div>
              
              {/* عرض التعليقات */}
              {item.notes && renderNotes(item.notes)}
              
              {/* عرض Sub-items */}
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem, item.id))}
                </div>
              )}
              
              {/* عرض الخيارات القديمة */}
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{orderSummary.tax.toFixed(2)} <small>EGP</small></span>
          </div>
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{orderSummary.total.toFixed(2)} <small>EGP</small></span>
        </div>

        <div className={styles.actionButtons}>
          <button className={`${styles.actionButton} ${styles.send}`}>
            <img src="/images/img_tabler_send.svg" alt="Send" />
            <span>Send</span>
          </button>
          <button className={`${styles.actionButton} ${styles.print}`}>
            <img src="/images/img_printer.svg" alt="Print" />
            <span>Print</span>
          </button>
          <button className={`${styles.actionButton} ${styles.pay}`}>
            <img src="/images/img_payment_02.svg" alt="Pay" />
            <span>Pay</span>
          </button>
        </div>
      </div>
    </aside>
  );
};

export default OrderSummary;

===== src/Pages/pos/newSales/components/PriceSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/PriceSelectionPopup.module.css';

interface PriceSelectionPopupProps {
  product: PosProduct | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  quantity,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen || !product) return null;

  return (
    <div className={styles.popupOverlay} ref={overlayRef}>
      <div className={styles.popupContent}>
        <div className={styles.popupHeader}>
          <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
          <button className={styles.popupClose} onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className={styles.popupBody}>
          
          <div className={styles.pricesGrid}>
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className={styles.priceCard}
                onClick={() => onSelectPrice(price)}
              >
                <div className={styles.priceName}>{price.nameArabic}</div>
                <div className={styles.priceValue}>
                  <span className={styles.price}>{price.price}</span>
                  <span className={styles.currency}>EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;

===== src/Pages/pos/newSales/components/ProductCard.tsx =====
// src/Pages/pos/newSales/components/ProductCard.tsx
import React from 'react';
import { PosProduct } from '../types/PosSystem';
import styles from '../styles/ProductCard.module.css';

interface ProductCardProps {
  product: PosProduct;
  onClick: (product: PosProduct) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onClick }) => {
  const handleClick = () => {
    onClick(product);
  };

  // تحديد ما إذا كان المنتج له سعر واحد أم أكثر
  const hasMultiplePrices = product.hasMultiplePrices;
  const singlePrice = !hasMultiplePrices && product.productPrices.length > 0 
    ? product.productPrices[0].price 
    : null;

  return (
    <div className={styles.productCard} onClick={handleClick}>
      <div className={styles.productImageContainer}>
        <img 
          src={product.image} 
          alt={product.nameArabic} 
          className={styles.productImage}
        />
        
        {/* عرض السعر على الصورة إذا كان المنتج له سعر واحد */}
        {singlePrice !== null && (
          <div className={styles.priceOverlay}>
            {singlePrice.toFixed(2)} EGP
          </div>
        )}
      </div>
      
      <div className={styles.productInfo}>
        <h3 className={styles.productName}>
          {product.nameArabic}
        </h3>
      </div>
    </div>
  );
};

export default ProductCard;

===== src/Pages/pos/newSales/components/ProductOptionsPopup.tsx =====
// src/Pages/pos/newSales/components/ProductOptionsPopup.tsx
import React, { useState, useEffect } from 'react';
import { PosProduct, PosPrice, ProductOptionGroup, ProductOptionItem, SelectedOption } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import CheckIcon from '@mui/icons-material/Check';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import styles from '../styles/ProductOptionsPopup.module.css';

interface ProductOptionsPopupProps {
  product: PosProduct | null;
  selectedPrice: PosPrice | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onComplete: (selectedOptions: SelectedOption[]) => void;
}

const ProductOptionsPopup: React.FC<ProductOptionsPopupProps> = ({
  product,
  selectedPrice,
  quantity,
  isOpen,
  onClose,
  onComplete
}) => {
  const [selectedOptions, setSelectedOptions] = useState<SelectedOption[]>([]);
  const [groupSelections, setGroupSelections] = useState<{[groupId: string]: {[itemId: string]: number}}>({});
  const [currentGroupIndex, setCurrentGroupIndex] = useState(0);

  useEffect(() => {
    if (isOpen && product) {
      setSelectedOptions([]);
      setGroupSelections({});
      setCurrentGroupIndex(0);
    }
  }, [isOpen, product]);

  if (!isOpen || !product || !selectedPrice) return null;

  const optionGroups = product.productOptionGroups || [];

  if (optionGroups.length === 0) {
    onComplete([]);
    return null;
  }

  const currentGroup = optionGroups[currentGroupIndex];

  const handleItemSelection = (group: ProductOptionGroup, item: ProductOptionItem, change: number) => {
    const newSelections = { ...groupSelections };
    
    if (!newSelections[group.id]) {
      newSelections[group.id] = {};
    }
    
    const currentCount = newSelections[group.id][item.id] || 0;
    const newCount = Math.max(0, currentCount + change);
    
    const totalSelected = Object.values(newSelections[group.id]).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      if (newCount + otherItemsTotal <= group.maxSelection) {
        newSelections[group.id][item.id] = newCount;
      }
    } else {
      if (newCount > 0) {
        newSelections[group.id] = { [item.id]: 1 };
      } else {
        newSelections[group.id][item.id] = 0;
      }
    }
    
    setGroupSelections(newSelections);
  };

  const handleCardClick = (group: ProductOptionGroup, item: ProductOptionItem) => {
    const currentCount = groupSelections[group.id]?.[item.id] || 0;
    const totalSelected = Object.values(groupSelections[group.id] || {}).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      // للمجموعات المتعددة: زيادة الكمية
      if (otherItemsTotal < group.maxSelection) {
        handleItemSelection(group, item, 1);
      }
    } else {
      // للمجموعات الفردية: تغيير الحالة
      handleItemSelection(group, item, currentCount > 0 ? -1 : 1);
    }
  };

  const isCurrentGroupValid = (): boolean => {
    const selections = groupSelections[currentGroup.id] || {};
    const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
    
    if (currentGroup.isRequired) {
      return totalSelected >= currentGroup.minSelection;
    }
    
    return true; // المجموعات غير المطلوبة صحيحة دائما
  };

  const isAllGroupsValid = (): boolean => {
    return optionGroups.every(group => {
      const selections = groupSelections[group.id] || {};
      const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
      
      if (group.isRequired) {
        return totalSelected >= group.minSelection;
      }
      
      return totalSelected === 0 || totalSelected >= group.minSelection;
    });
  };

  const handleNext = () => {
    if (currentGroupIndex < optionGroups.length - 1) {
      setCurrentGroupIndex(currentGroupIndex + 1);
    }
  };

  const handlePrevious = () => {
    if (currentGroupIndex > 0) {
      setCurrentGroupIndex(currentGroupIndex - 1);
    }
  };

  const handleComplete = () => {
    const allSelectedOptions: SelectedOption[] = [];
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            allSelectedOptions.push({
              groupId: group.id,
              itemId: itemId,
              itemName: item.name,
              quantity: count,
              extraPrice: item.extraPrice,
              isCommentOnly: item.isCommentOnly
            });
          }
        }
      });
    });
    
    onComplete(allSelectedOptions);
  };

  const calculateTotalPrice = () => {
    let total = selectedPrice.price * quantity;
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            total += item.extraPrice * count * quantity;
          }
        }
      });
    });
    
    return total;
  };

  const selections = groupSelections[currentGroup.id] || {};
  const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContent}>
<div className={styles.popupHeader}>
  <div className={styles.popupTitleSection}>
    <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
    <div className={styles.popupSubtitle}>
      {selectedPrice.nameArabic} - الكمية: {quantity}
    </div>
  </div>
  <div style={{ display: 'flex', gap: '8px' }}>
    {currentGroupIndex > 0 && (
      <button 
        className={styles.popupClose} 
        onClick={handlePrevious}
        title="الرجوع للمجموعة السابقة"
      >
        <ArrowBackIcon />
      </button>
    )}
    <button className={styles.popupClose} onClick={onClose}>
      <CloseIcon />
    </button>
  </div>
</div>
        
        <div className={styles.popupBody}>
          {/* مؤشر التقدم */}
          <div className={styles.progressIndicator}>
            <div className={styles.progressText}>
              مجموعة {currentGroupIndex + 1} من {optionGroups.length}
            </div>
            <div className={styles.progressBar}>
              <div 
                className={styles.progressFill} 
                style={{ width: `${((currentGroupIndex + 1) / optionGroups.length) * 100}%` }}
              />
            </div>
          </div>

          <div className={styles.optionsContainer}>
            <div className={styles.optionGroup}>
              <div className={styles.groupHeader}>
                <div className={styles.groupTitle}>
                  <span className={styles.groupName}>{currentGroup.name}</span>
                  {currentGroup.isRequired && (
                    <span className={styles.requiredBadge}>مطلوب</span>
                  )}
                </div>
                <div className={styles.groupInfo}>
                  <span className={styles.selectionCount}>
                    {totalSelected} من {currentGroup.maxSelection}
                  </span>
                  {currentGroup.minSelection > 0 && (
                    <span className={styles.minSelection}>
                      (الحد الأدنى: {currentGroup.minSelection})
                    </span>
                  )}
                </div>
              </div>
              
              <div className={styles.optionsGrid}>
                {currentGroup.optionItems
                  .sort((a, b) => a.sortOrder - b.sortOrder)
                  .map((item) => {
                    const itemCount = selections[item.id] || 0;
                    const canAdd = currentGroup.allowMultiple 
                      ? totalSelected < currentGroup.maxSelection
                      : itemCount === 0;
                    
                    return (
                      <div 
                        key={item.id} 
                        className={`${styles.optionCard} ${itemCount > 0 ? styles.selected : ''}`}
                        onClick={() => handleCardClick(currentGroup, item)}
                      >
                        <div className={styles.optionContent}>
                          <div className={styles.optionInfo}>
                            <div className={styles.optionName}>{item.name}</div>
                            {item.extraPrice > 0 && (
                              <div className={styles.optionPrice}>
                                +{item.extraPrice} EGP
                              </div>
                            )}
                          </div>
                          
                          <div className={styles.optionControls}>
                            {currentGroup.allowMultiple ? (
                              <div className={styles.quantitySection}>
                                {itemCount > 0 && (
                                  <button
                                    className={styles.removeBtn}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleItemSelection(currentGroup, item, -1);
                                    }}
                                  >
                                    <RemoveIcon />
                                  </button>
                                )}
                                
                                {itemCount > 0 ? (
                                  <div className={styles.quantityBadge}>
                                    {itemCount}
                                  </div>
                                ) : canAdd ? (
                                  <div className={styles.addIcon}>
                                    <AddIcon />
                                  </div>
                                ) : (
                                  <div className={styles.maxReached}>
                                    <span>الحد الأقصى</span>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className={styles.singleSelect}>
                                {itemCount > 0 ? (
                                  <div className={styles.selectedIcon}>
                                    <CheckIcon />
                                  </div>
                                ) : (
                                  <div className={styles.unselectedIcon}>
                                    <AddIcon />
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
          
          <div className={styles.totalSection}>
            <div className={styles.totalRow}>
              <span className={styles.totalLabel}>الإجمالي:</span>
              <span className={styles.totalValue}>{calculateTotalPrice().toFixed(2)} EGP</span>
            </div>
          </div>
        </div>
        
        <div className={styles.popupFooter}>
          <button className={styles.btnCancel} onClick={onClose}>
            إلغاء
          </button>
          
          {currentGroupIndex < optionGroups.length - 1 ? (
            <button
              className={styles.btnConfirm}
              onClick={handleNext}
              disabled={currentGroup.isRequired && !isCurrentGroupValid()}
            >
              التالي
              <ArrowForwardIcon />
            </button>
          ) : (
            <button
              className={styles.btnConfirm}
              onClick={handleComplete}
              disabled={!isAllGroupsValid()}
            >
              تأكيد الاختيار
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductOptionsPopup;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/hooks/useDataManager.tsx =====
// src/Pages/pos/newSales/hooks/useDataManager.tsx
import { useState, useEffect, useCallback } from 'react';
import { PosProduct, CategoryItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface DataState {
  mainProducts: PosProduct[];
  mainCategories: CategoryItem[];
  additionProducts: PosProduct[];
  additionCategories: CategoryItem[];
  normalModeProducts: PosProduct[];
  normalModeCategories: CategoryItem[];
  loading: boolean;
  error: string | null;
  defaultCategoryId: string | null;
}

export const useDataManager = () => {
  const [dataState, setDataState] = useState<DataState>({
    mainProducts: [],
    mainCategories: [],
    additionProducts: [],
    additionCategories: [],
    normalModeProducts: [],
    normalModeCategories: [],
    loading: true,
    error: null,
    defaultCategoryId: null
  });

  const loadAllData = useCallback(async () => {
    try {
      setDataState(prev => ({ ...prev, loading: true, error: null }));

      // تحميل البيانات من posService (التي تحتوي على productType)
      const [mainProducts, additionProducts] = await Promise.all([
        posService.getAllPosProducts(),
        posService.getAdditionProducts()
      ]);

      // تحويل البيانات إلى النوع المطلوب
      const convertedMainProducts: PosProduct[] = mainProducts.map(product => ({
        ...product,
        productType: product.productType || 1 // ضمان وجود productType
      }));

      const convertedAdditionProducts: PosProduct[] = additionProducts.map(product => ({
        ...product,
        productType: product.productType || 3 // ضمان وجود productType
      }));

      const [mainCategories, additionCategories] = await Promise.all([
        posService.getAllCategories(mainProducts),
        posService.getCategoriesByProductType(3)
      ]);

      // تحويل الفئات إلى النوع المطلوب
      const convertedMainCategories: CategoryItem[] = mainCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const convertedAdditionCategories: CategoryItem[] = additionCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 3
        }))
      }));

      // دمج المنتجات للعرض العادي
      const normalModeProducts = [...convertedMainProducts, ...convertedAdditionProducts];
      const normalModeCategories = await posService.getAllCategories([...mainProducts, ...additionProducts]);
      
      const convertedNormalModeCategories: CategoryItem[] = normalModeCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const rootMainCategories = convertedNormalModeCategories.filter(cat => !cat.parentId);
      const defaultCategoryId = rootMainCategories.length > 0 ? rootMainCategories[0].id : null;

      setDataState({
        mainProducts: convertedMainProducts,
        mainCategories: convertedMainCategories,
        additionProducts: convertedAdditionProducts,
        additionCategories: convertedAdditionCategories,
        normalModeProducts,
        normalModeCategories: convertedNormalModeCategories,
        loading: false,
        error: null,
        defaultCategoryId
      });

    } catch (error) {
      console.error('Error loading data:', error);
      setDataState(prev => ({
        ...prev,
        loading: false,
        error: 'فشل في تحميل البيانات'
      }));
    }
  }, []);

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // دالة للحصول على المنتجات المفلترة حسب الوضع
  const getProducts = useCallback((isAdditionMode: boolean): PosProduct[] => {
    if (isAdditionMode) {
      return dataState.additionProducts.filter(product => product.productType === 3);
    }
    return dataState.normalModeProducts;
  }, [dataState.additionProducts, dataState.normalModeProducts]);

  // دالة للحصول على الفئات المفلترة حسب الوضع
  const getCategories = useCallback((isAdditionMode: boolean): CategoryItem[] => {
    if (isAdditionMode) {
      return dataState.additionCategories.filter(category => 
        category.products && category.products.some(product => product.productType === 3)
      );
    }
    return dataState.normalModeCategories;
  }, [dataState.additionCategories, dataState.normalModeCategories]);

  // إضافة دوال مساعدة متوافقة مع posService
  const searchProducts = useCallback((products: PosProduct[], query: string): PosProduct[] => {
    if (!query.trim()) return [];
    
    const searchTerm = query.toLowerCase();
    return products.filter(product => 
      product.nameArabic.toLowerCase().includes(searchTerm) ||
      product.name.toLowerCase().includes(searchTerm)
    );
  }, []);

  const getProductsByScreenId = useCallback((products: PosProduct[], screenId: string): PosProduct[] => {
    return products.filter(product => product.categoryId === screenId);
  }, []);

  const hasProductOptions = useCallback((product: PosProduct): boolean => {
    return !!(product.productOptionGroups && product.productOptionGroups.length > 0);
  }, []);

  return {
    ...dataState,
    loadAllData,
    getProducts,
    getCategories,
    // إضافة الدوال المساعدة
    searchProducts,
    getProductsByScreenId,
    hasProductOptions,
    // مؤشرات الحالة
    isLoading: dataState.loading,
    hasError: !!dataState.error,
    isDataReady: !dataState.loading && !dataState.error && dataState.normalModeProducts.length > 0
  };
};

===== src/Pages/pos/newSales/index.tsx =====
// src/Pages/pos/newSales/index.tsx - الكود الكامل المُحدث
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary as OrderSummaryType, OrderItem, PosPrice, SelectedOption } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import ProductOptionsPopup from './components/ProductOptionsPopup';
import ProductCard from './components/ProductCard';
import Header from './components/common/Header';
import ActionButtons from './components/ActionButtons';
import OrderSummary from './components/OrderSummary';
import { useOrderManager } from './components/OrderManager';
import { useDataManager } from './hooks/useDataManager';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import OrderItemDetailsPopup from './components/OrderItemDetailsPopup';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('1');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');
  
  // استخدام Data Manager الجديد
  const {
    loading,
    error,
    getProducts,
    getCategories,
    defaultCategoryId,
    searchProducts,
    getProductsByScreenId,
    hasProductOptions
  } = useDataManager();

  // Extra/Without States
  const [isExtraMode, setIsExtraMode] = useState(false);
  const [isWithoutMode, setIsWithoutMode] = useState(false);
  const [selectedOrderItemId, setSelectedOrderItemId] = useState<string | null>(null);
  
  // Categories States
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [, setParentCategory] = useState<CategoryItem | null>(null);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  const [selectedProductForOptions, setSelectedProductForOptions] = useState<PosProduct | null>(null);
  const [selectedPriceForOptions, setSelectedPriceForOptions] = useState<PosPrice | null>(null);
  
  // Order Details Popup States
  const [showOrderDetailsPopup, setShowOrderDetailsPopup] = useState(false);
  const [selectedOrderItemForDetails, setSelectedOrderItemForDetails] = useState<OrderItem | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // الحصول على البيانات الحالية
  const isAdditionMode = isExtraMode || isWithoutMode;
  const currentProducts = getProducts(isAdditionMode);
  const currentCategories = getCategories(isAdditionMode);
  const rootCategories = currentCategories.filter(cat => !cat.parentId);
  const categories = showingChildren 
    ? currentCategories.find(cat => cat.id === showingChildren)?.children || []
    : rootCategories;

  // المنتجات المعروضة
  const displayedProducts = useMemo(() => {
    if (searchQuery.trim()) {
      return searchProducts(currentProducts, searchQuery);
    }
    
    if (selectedCategory) {
      return getProductsByScreenId(currentProducts, selectedCategory);
    }
    
    return [];
  }, [currentProducts, selectedCategory, searchQuery, searchProducts, getProductsByScreenId]);

  // تحديث دالة updateOrderItem

const updateOrderItem = useCallback((itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => {
  setOrderItems(prev => prev.map(item => {
    if (item.id === itemId) {
      if (updateType === 'addSubItem') {
        const newSubItems = [...(item.subItems || []), data];
        
        // ✅ العناصر "بدون" لا تؤثر على الإجمالي
        const priceImpact = data.type === 'without' ? 0 : data.price;
        const newTotalPrice = item.totalPrice + priceImpact;
        
        return {
          ...item,
          subItems: newSubItems,
          totalPrice: newTotalPrice
        };
      } else if (updateType === 'removeSubItem') {
        const removedSubItem = item.subItems?.find(sub => sub.id === data);
        const newSubItems = item.subItems?.filter(sub => sub.id !== data) || [];
        
        // ✅ العناصر "بدون" لا تؤثر على الإجمالي عند الحذف
        const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
        const newTotalPrice = item.totalPrice - priceImpact;
        
        return {
          ...item,
          subItems: newSubItems.length > 0 ? newSubItems : undefined,
          totalPrice: newTotalPrice
        };
      }
    }
    return item;
  }));
}, []);

  // Order Manager Hook
  const { addToOrder, removeSubItem } = useOrderManager({
    keypadValue,
    isExtraMode,
    isWithoutMode,
    selectedOrderItemId,
    onOrderAdd: (orderItem) => setOrderItems(prev => [...prev, orderItem]),
    onOrderUpdate: updateOrderItem,
    onModeReset: () => {
      setIsExtraMode(false);
      setIsWithoutMode(false);
      setSelectedOrderItemId(null);
      setKeypadValue('1');
    },
    onLoadNormalProducts: () => {
      // لا نحتاج لإعادة تحميل البيانات لأنها محملة مسبقاً
    }
  });

  // إضافة معالج double click
  const handleOrderItemDoubleClick = useCallback((item: OrderItem) => {
    setSelectedOrderItemForDetails(item);
    setShowOrderDetailsPopup(true);
  }, []);

  // إضافة معالج تحديث المنتج للـ OrderItemDetailsPopup
const handleUpdateOrderItem = useCallback((itemId: string, updates: {
  quantity?: number;
  notes?: string;
  discountPercentage?: number;
  discountAmount?: number;
}) => {
  setOrderItems(prev => prev.map(item => {
    if (item.id === itemId) {
      const updatedItem = { ...item };
      
      if (updates.quantity !== undefined) {
        updatedItem.quantity = updates.quantity;
      }
      
      if (updates.notes !== undefined) {
        updatedItem.notes = updates.notes;
      }
      
      if (updates.discountPercentage !== undefined) {
        updatedItem.discountPercentage = updates.discountPercentage;
      }
      
      if (updates.discountAmount !== undefined) {
        updatedItem.discountAmount = updates.discountAmount;
      }
      
      // ✅ إعادة حساب السعر الإجمالي مع تجاهل عناصر "بدون"
      const basePrice = item.selectedPrice.price * (updates.quantity || item.quantity);
      const subItemsTotal = item.subItems?.reduce((sum, subItem) => {
        // تجاهل عناصر "بدون" في الحساب
        return sum + (subItem.type === 'without' ? 0 : subItem.price);
      }, 0) || 0;
      
      const totalBeforeDiscount = basePrice + subItemsTotal;
      const discountAmount = updates.discountAmount || item.discountAmount || 0;
      updatedItem.totalPrice = totalBeforeDiscount - discountAmount;
      
      return updatedItem;
    }
    return item;
  }));
}, []);

  // إضافة معالج حذف sub-item
const handleRemoveSubItem = useCallback((orderItemId: string, subItemId: string) => {
  setOrderItems(prev => prev.map(item => {
    if (item.id === orderItemId && item.subItems) {
      const removedSubItem = item.subItems.find(sub => sub.id === subItemId);
      const newSubItems = item.subItems.filter(sub => sub.id !== subItemId);
      
      // ✅ العناصر "بدون" لا تؤثر على الإجمالي
      const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
      const newTotalPrice = item.totalPrice - priceImpact;
      
      return {
        ...item,
        subItems: newSubItems.length > 0 ? newSubItems : undefined,
        totalPrice: newTotalPrice
      };
    }
    return item;
  }));
}, []);

  // إضافة useEffect لتحديد الفئة الافتراضية
  useEffect(() => {
    if (defaultCategoryId && !selectedCategory && !isAdditionMode) {
      setSelectedCategory(defaultCategoryId);
    }
  }, [defaultCategoryId, selectedCategory, isAdditionMode]);

  // معالج زر Extra - التحديث الجديد
  const handleExtraClick = useCallback(() => {
    // إذا لم يكن هناك منتج محدد، استخدم آخر منتج في السلة
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    // إذا لم يكن هناك منتجات في السلة، لا تفعل شيء
    if (!targetItemId) {
      return;
    }
    
    setIsExtraMode(true);
    setIsWithoutMode(false);
    setSelectedChips(prev => prev.includes('extra') ? prev : [...prev.filter(chip => chip !== 'without'), 'extra']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج زر Without - التحديث الجديد
  const handleWithoutClick = useCallback(() => {
    // إذا لم يكن هناك منتج محدد، استخدم آخر منتج في السلة
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    // إذا لم يكن هناك منتجات في السلة، لا تفعل شيء
    if (!targetItemId) {
      return;
    }
    
    setIsWithoutMode(true);
    setIsExtraMode(false);
    setSelectedChips(prev => prev.includes('without') ? prev : [...prev.filter(chip => chip !== 'extra'), 'without']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج الرجوع للمنتجات الأساسية
  const handleBackToMainProducts = useCallback(() => {
    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedOrderItemId(null);
    setSelectedChips(prev => prev.filter(chip => chip !== 'extra' && chip !== 'without'));
    
    // استخدام الفئة الافتراضية
    if (defaultCategoryId) {
      setSelectedCategory(defaultCategoryId);
    }
    
    setShowingChildren(null);
    setParentCategory(null);
  }, [defaultCategoryId]);

  // معالج اختيار منتج في الفاتورة
  const handleOrderItemSelect = useCallback((itemId: string) => {
    if (selectedOrderItemId === itemId) {
      setSelectedOrderItemId(null);
    } else {
      setSelectedOrderItemId(itemId);
    }
  }, [selectedOrderItemId]);

  // معالج اختيار الفئة
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      setShowingChildren(categoryId);
      setParentCategory(category);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // دالة الرجوع للفئة الأب
  const handleBackToParent = useCallback(() => {
    setShowingChildren(null);
    setParentCategory(null);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [rootCategories]);

  // معالج ضغط المنتج
  const handleProductClick = useCallback((product: PosProduct) => {
    if (product.hasMultiplePrices) {
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      const price = product.productPrices[0];
      
      if (hasProductOptions(product)) {
        setSelectedProductForOptions(product);
        setSelectedPriceForOptions(price);
        setShowOptionsPopup(true);
      } else {
        addToOrder(product, price, []);
      }
    }
  }, [addToOrder, hasProductOptions]);

  // معالج اختيار السعر
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      if (hasProductOptions(selectedProduct)) {
        setSelectedProductForOptions(selectedProduct);
        setSelectedPriceForOptions(price);
        setShowPricePopup(false);
        setShowOptionsPopup(true);
      } else {
        addToOrder(selectedProduct, price, []);
      }
    }
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder, hasProductOptions]);

  // معالج إكمال اختيار المجموعات
  const handleOptionsComplete = useCallback((selectedOptions: SelectedOption[]) => {
    if (selectedProductForOptions && selectedPriceForOptions) {
      addToOrder(selectedProductForOptions, selectedPriceForOptions, selectedOptions);
    }
    setShowOptionsPopup(false);
    setSelectedProductForOptions(null);
    setSelectedPriceForOptions(null);
  }, [selectedProductForOptions, selectedPriceForOptions, addToOrder]);

  // حساب ملخص الطلب
  const orderSummary: OrderSummaryType = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const discount = 0;
    const tax = 0;
    const service = 0;
    const total = subtotal - discount + tax + service;

    return {
      items: orderItems,
      subtotal,
      discount,
      tax,
      service,
      total
    };
  }, [orderItems]);

  // حذف منتج من الطلب
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  const handleNumberClick = useCallback((number: string) => {
    if (keypadValue === '1' && number !== '.') {
      setKeypadValue(number);
    } else if (keypadValue !== '0') {
      setKeypadValue(prev => prev + number);
    }
  }, [keypadValue]);

  const handleClearClick = useCallback(() => {
    setKeypadValue('1');
  }, []);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  const handleResetOrder = useCallback(() => {
    // إعادة تعيين الفاتورة بالكامل
    setOrderItems([]);
    setSelectedOrderItemId(null);
    setCustomerName('');
    setKeypadValue('1');
    
    // إعادة تعيين الـ modes
    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedChips([]);
    
    // الرجوع للمنتجات الأساسية
    handleBackToMainProducts();
    
    // إعادة تعيين البحث
    setSearchQuery('');
    
    // رسالة تأكيد (اختيارية)
    console.log('Order reset successfully');
  }, [handleBackToMainProducts]);

  // عرض حالة التحميل
  if (loading) {
    return (
      <div className="pos-system loading">
        <div className="loading-spinner">جاري تحميل البيانات...</div>
      </div>
    );
  }

  // عرض حالة الخطأ
  if (error) {
    return (
      <div className="pos-system error">
        <div className="error-message">{error}</div>
        <button onClick={() => window.location.reload()}>إعادة المحاولة</button>
      </div>
    );
  }

  return (
    <div className="pos-system">
      <Header
        selectedOrderType={selectedOrderType}
        onOrderTypeChange={setSelectedOrderType}
        onResetOrder={handleResetOrder}
      />

      <main className="main-content">
        <section className="products-section">
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          <ActionButtons
            selectedChips={selectedChips}
            onChipClick={handleChipClick}
            isExtraMode={isExtraMode}
            isWithoutMode={isWithoutMode}
            onExtraClick={handleExtraClick}
            onWithoutClick={handleWithoutClick}
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            hasSelectedOrderItem={true} // ✅ دائماً true لإزالة الـ disabled
          />

          <div className="product-grid">
            {displayedProducts.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                onClick={handleProductClick}
              />
            ))}
          </div>
        </section>

        <aside className="categories-sidebar">
          <div className="categories-list">
            {isAdditionMode && (
              <button
                onClick={handleBackToMainProducts}
                className="category-item back-button main-back"
              >
                <ArrowBackIcon />
                <span>رجوع للمنتجات الأساسية</span>
              </button>
            )}
            
            {showingChildren && (
              <button
                onClick={handleBackToParent}
                className="category-item back-button"
              >
                <ArrowBackIcon />
                <span>رجوع</span>
              </button>
            )}
            
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
                className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
              >
                <img src={category.image} alt={category.name} />
                <span>{category.nameArabic}</span>
              </button>
            ))}
          </div>
        </aside>

        <OrderSummary
          orderSummary={orderSummary}
          customerName={customerName}
          onCustomerNameChange={setCustomerName}
          onRemoveOrderItem={removeOrderItem}
          onRemoveSubItem={removeSubItem}
          selectedOrderItemId={selectedOrderItemId}
          onOrderItemSelect={handleOrderItemSelect}
          onOrderItemDoubleClick={handleOrderItemDoubleClick}
        />
      </main>

      <PriceSelectionPopup
        product={selectedProduct}
        quantity={parseInt(keypadValue) || 1}
        isOpen={showPricePopup}
        onClose={() => {
          setShowPricePopup(false);
          setSelectedProduct(null);
        }}
        onSelectPrice={handlePriceSelect}
      />

      <ProductOptionsPopup
        product={selectedProductForOptions}
        selectedPrice={selectedPriceForOptions}
        quantity={parseInt(keypadValue) || 1}
        isOpen={showOptionsPopup}
        onClose={() => {
          setShowOptionsPopup(false);
          setSelectedProductForOptions(null);
          setSelectedPriceForOptions(null);
        }}
        onComplete={handleOptionsComplete}
      />

      <OrderItemDetailsPopup
        orderItem={selectedOrderItemForDetails}
        isOpen={showOrderDetailsPopup}
        onClose={() => {
          setShowOrderDetailsPopup(false);
          setSelectedOrderItemForDetails(null);
        }}
        onUpdateItem={handleUpdateOrderItem}
        onRemoveItem={removeOrderItem}
      />
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/ActionButtons.css =====
/* src/Pages/pos/newSales/components/ActionButtons.css */

.action-buttons-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  background: #ffffff;
  border-bottom: 1px solid #e9ecef;
}

.action-chips {
  display: flex;
  gap: 12px;
}

.action-chip {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  background: #ffffff;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  font-weight: 500;
}

.action-chip:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
}

.action-chip.active {
  background: #0373ed;
  color: white;
  border-color: #0373ed;
}

.action-chip img {
  width: 16px;
  height: 16px;
}

.search-container {
  display: flex;
  align-items: center;
  position: relative;
  gap: 8px;
}

.search-icon {
  position: absolute;
  left: 12px;
  width: 16px;
  height: 16px;
  z-index: 1;
}

.search-input {
  padding: 8px 12px 8px 36px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: 14px;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #0373ed;
}

.filter-button {
  padding: 8px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  background: white;
  cursor: pointer;
}

.filter-button:hover {
  border-color: #0373ed;
}

.filter-button img {
  width: 16px;
  height: 16px;
}

===== src/Pages/pos/newSales/styles/Header.css =====
/* src/Pages/pos/newSales/components/Header.css */

.pos-header {
  height: clamp(60px, 8vh, 100px);
  background: #ffffff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
  z-index: 100;
  position: relative;
}

.header-content {
  height: 100%;
  padding: 0 clamp(16px, 3vw, 32px);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.header-nav {
  display: flex;
  align-items: center;
  gap: clamp(12px, 2vw, 24px);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  padding: clamp(6px, 1.2vw, 12px) clamp(8px, 1.6vw, 16px);
  border-radius: 6px;
  text-decoration: none;
  color: #333333;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 500;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
}

.nav-item img {
  width: clamp(14px, 1.8vw, 20px);
  height: clamp(14px, 1.8vw, 20px);
}

.order-type-display {
  padding: clamp(6px, 1.2vw, 12px) clamp(12px, 2.4vw, 20px);
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 600;
  color: #333333;
  min-width: clamp(80px, 12vw, 120px);
  text-align: center;
}

.menu-dropdown-container {
  position: relative;
}

.menu-button {
  padding: clamp(6px, 1.2vw, 12px);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(18px, 2.4vw, 28px);
  height: clamp(18px, 2.4vw, 28px);
}

/* Figma Dropdown - مع scroll مخفي */
.figma-dropdown {
  position: absolute;
  top: calc(100% + 8px);
  right: 0;
  background: transparent;
  z-index: 1000;
  animation: slideInFromRight 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  flex-direction: column;
  gap: clamp(16px, 2.5vw, 20px);
  max-height: calc(100vh - 120px);
  overflow-y: auto;
  overflow-x: hidden;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
  /* إخفاء الـ scrollbar */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* Internet Explorer 10+ */
}

/* إخفاء الـ scrollbar في WebKit browsers */
.figma-dropdown::-webkit-scrollbar {
  width: 0;
  height: 0;
  background: transparent;
  display: none;
}

/* Order Types Section */
.order-types-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  flex-shrink: 0;
}

/* Delivery Partners Section */
.delivery-partners-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  margin-top: clamp(12px, 2vw, 16px);
  flex-shrink: 0;
}

/* Section Separator */
.section-separator {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.1), transparent);
  margin: clamp(8px, 1.5vw, 12px) 0;
  flex-shrink: 0;
}

/* Figma Cards - مُحسنة بدون تأثير على الكروت المجاورة */
.figma-card {
  width: clamp(90px, 14vw, 110px);
  height: clamp(85px, 13vw, 105px);
  background: white;
  border-radius: 12px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: clamp(6px, 1.2vw, 8px);
  backdrop-filter: blur(8px);
  scroll-snap-align: start;
  contain: layout style paint;
  /* إضافة margin للحفاظ على المساحة */
  margin: 2px;
}

.figma-card:hover {
  border-color: #0373ed;
  /* تقليل الحركة لتجنب التأثير على الكروت المجاورة */
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(3, 115, 237, 0.2);
  /* استخدام brightness كبديل للـ scale */
  filter: brightness(1.05);
}

.figma-card.selected {
  border-color: #0373ed;
  box-shadow: 0 5px 12px rgba(3, 115, 237, 0.25);
  background: rgba(3, 115, 237, 0.02);
}

.delivery-card {
  border: 1px solid #e9ecef;
}

.delivery-card:hover {
  border-color: #0373ed;
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  filter: brightness(1.05);
}

/* Card Icon Section */
.card-icon-section {
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1;
  width: 100%;
}

/* Card Icons - مُصغرة */
.card-icon {
  width: clamp(24px, 3.5vw, 32px);
  height: clamp(24px, 3.5vw, 32px);
  object-fit: contain;
}

.delivery-icon {
  max-width: clamp(45px, 7vw, 60px);
  max-height: clamp(15px, 2.5vw, 20px);
  object-fit: contain;
}

/* Card Labels - داخل الكارت */
.card-label {
  color: black;
  font-size: clamp(10px, 1.5vw, 14px);
  font-family: 'Nunito', sans-serif;
  font-weight: 400;
  word-wrap: break-word;
  text-align: center;
  line-height: 1.1;
  margin-top: clamp(2px, 0.5vw, 4px);
  width: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

.figma-card.selected .card-label {
  color: #0373ed;
  font-weight: 500;
}

/* Animations */
@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(15px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* تأثيرات إضافية للكروت */
.figma-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3));
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  border-radius: 10px;
}

.figma-card:hover::before {
  opacity: 1;
}

/* تأثيرات fade للـ scroll */
.figma-dropdown::before {
  content: '';
  position: sticky;
  top: 0;
  height: 6px;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

.figma-dropdown::after {
  content: '';
  position: sticky;
  bottom: 0;
  height: 6px;
  background: linear-gradient(to top, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .nav-item span {
    display: none;
  }
  
  .nav-item {
    padding: clamp(8px, 1.5vw, 12px);
  }
  
  .figma-dropdown {
    right: -5px;
  }
}

@media (max-width: 768px) {
  .header-nav {
    gap: clamp(8px, 1.5vw, 16px);
  }
  
  .order-type-display {
    min-width: clamp(60px, 10vw, 80px);
    font-size: clamp(10px, 1.2vw, 14px);
  }
  
  .figma-dropdown {
    right: -10px;
    gap: clamp(12px, 2vw, 16px);
    max-height: calc(100vh - 100px);
  }
  
  .figma-card {
    width: clamp(75px, 16vw, 95px);
    height: clamp(70px, 15vw, 90px);
    padding: clamp(4px, 1vw, 6px);
    margin: 1px;
  }
  
  .figma-card:hover {
    transform: translateX(-1px);
  }
  
  .delivery-card:hover {
    transform: translateX(-1px);
  }
  
  .card-icon {
    width: clamp(18px, 3vw, 24px);
    height: clamp(18px, 3vw, 24px);
  }
  
  .delivery-icon {
    max-width: clamp(35px, 6vw, 45px);
    max-height: clamp(12px, 2vw, 16px);
  }
  
  .card-label {
    font-size: clamp(8px, 1.3vw, 12px);
  }
}

@media (max-width: 480px) {
  .header-content {
    padding: 0 clamp(8px, 2vw, 16px);
  }
  
  .header-nav {
    gap: clamp(4px, 1vw, 8px);
  }
  
  .figma-dropdown {
    right: -15px;
    max-height: calc(100vh - 80px);
  }
  
  .figma-card {
    width: clamp(65px, 18vw, 85px);
    height: clamp(60px, 17vw, 80px);
    padding: clamp(3px, 0.8vw, 5px);
    margin: 1px;
  }
  
  /* إزالة الحركة نهائياً في الشاشات الصغيرة */
  .figma-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .delivery-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .card-icon {
    width: clamp(16px, 2.5vw, 20px);
    height: clamp(16px, 2.5vw, 20px);
  }
  
  .delivery-icon {
    max-width: clamp(30px, 5vw, 40px);
    max-height: clamp(10px, 1.8vw, 14px);
  }
  
  .card-label {
    font-size: clamp(7px, 1.1vw, 10px);
  }
}

/* تحسينات للأجهزة اللمسية */
@media (hover: none) and (pointer: coarse) {
  .figma-dropdown {
    -webkit-overflow-scrolling: touch;
    scroll-snap-type: y proximity;
  }
  
  .figma-card {
    scroll-snap-align: start;
  }
}

/* تحسينات الأداء */
.figma-dropdown {
  will-change: scroll-position;
  contain: layout style paint;
}

.figma-card {
  will-change: transform, box-shadow;
  backface-visibility: hidden;
}

/* تحسينات للشاشات عالية الدقة */
@media (min-resolution: 150dpi) {
  .figma-card {
    border-width: 1.5px;
  }
}

@media (min-resolution: 200dpi) {
  .figma-card {
    border-width: 1px;
  }
}



/* إضافة هذا في Header.css */

.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 4px;
  padding: 8px 12px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid transparent;
  position: relative;
  overflow: hidden;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}

/* تأثير ripple عند النقر */
.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: width 0.3s ease, height 0.3s ease;
}

.order-type-display.clickable:active::before {
  width: 100px;
  height: 100px;
}

/* إضافة أيقونة صغيرة للإشارة للـ reset */
.order-type-display.clickable::after {
  content: '↻';
  position: absolute;
  top: 2px;
  right: 2px;
  font-size: 10px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.order-type-display.clickable:hover::after {
  opacity: 0.7;
}

/* تحسين الـ tooltip */
.order-type-display.clickable[title] {
  position: relative;
}

.order-type-display.clickable[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  opacity: 0.9;
}

/* Responsive */
@media (max-width: 768px) {
  .order-type-display.clickable {
    padding: 6px 8px;
    font-size: 12px;
  }
  
  .order-type-display.clickable::after {
    font-size: 8px;
  }
}



/* إضافة هذا في Header.css */

/* Professional Dropdown Styles */
.professional-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  width: 420px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
  border: 1px solid #e9ecef;
  z-index: 1000;
  transform: translateY(8px);
  opacity: 0;
  animation: dropdownSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  max-height: 80vh;
  overflow-y: auto;
}

@keyframes dropdownSlideIn {
  from {
    opacity: 0;
    transform: translateY(0);
  }
  to {
    opacity: 1;
    transform: translateY(8px);
  }
}

.dropdown-section {
  padding: 20px;
}

.dropdown-section:not(:last-child) {
  border-bottom: 1px solid #f1f3f4;
}

.section-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.section-title {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.section-divider {
  flex: 1;
  height: 1px;
  background: linear-gradient(to right, #e9ecef, transparent);
}

/* Order Types Cards */
.order-types-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.order-type-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  background: white;
  border: 2px solid #f1f3f4;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.order-type-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, var(--accent-color), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-card:hover {
  border-color: var(--accent-color);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.order-type-card:hover::before {
  opacity: 0.05;
}

.order-type-card.selected {
  border-color: var(--accent-color);
  background: rgba(var(--accent-color), 0.05);
  box-shadow: 0 4px 16px rgba(var(--accent-color), 0.2);
}

.order-type-card.selected::before {
  opacity: 0.08;
}

.card-icon-container {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: rgba(var(--accent-color), 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.card-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.card-content {
  flex: 1;
  text-align: left;
}

.card-title {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.card-description {
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.card-check {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--accent-color);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.order-type-card.selected .card-check {
  opacity: 1;
  transform: scale(1);
}

/* Delivery Partners Cards */
.delivery-partners-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.delivery-partner-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.delivery-partner-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.delivery-partner-card:hover {
  border-color: var(--partner-color);
  transform: translateX(4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
}

.delivery-partner-card:hover::before {
  opacity: 1;
}

.delivery-partner-card.selected {
  border-color: var(--partner-color);
  background: var(--partner-bg);
  box-shadow: 0 4px 16px rgba(var(--partner-color), 0.15);
}

.partner-icon-container {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  background: var(--partner-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.partner-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.partner-content {
  flex: 1;
  text-align: left;
}

.partner-name {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.partner-status {
  font-size: 11px;
  color: #28a745;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.partner-badge {
  width: 16px;
  height: 16px;
  color: var(--partner-color);
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.delivery-partner-card.selected .partner-badge {
  opacity: 1;
  transform: scale(1);
}

/* Order Type Display Button Enhancement */
.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 8px;
  padding: 8px 16px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:hover::before {
  opacity: 1;
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Design */
@media (max-width: 768px) {
  .professional-dropdown {
    width: 360px;
    right: -20px;
  }
  
  .order-types-grid {
    grid-template-columns: 1fr;
  }
  
  .dropdown-section {
    padding: 16px;
  }
  
  .order-type-card {
    padding: 12px;
  }
  
  .delivery-partner-card {
    padding: 10px 12px;
  }
}

@media (max-width: 480px) {
  .professional-dropdown {
    width: 320px;
    right: -40px;
  }
  
  .section-title {
    font-size: 14px;
  }
  
  .card-title,
  .partner-name {
    font-size: 13px;
  }
  
  .card-description {
    font-size: 11px;
  }
}

/* Scroll Styling */
.professional-dropdown::-webkit-scrollbar {
  width: 6px;
}

.professional-dropdown::-webkit-scrollbar-track {
  background: #f1f3f4;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb {
  background: #c1c8cd;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb:hover {
  background: #a8b2ba;
}

===== src/Pages/pos/newSales/styles/OrderItemDetailsPopup.module.css =====
/* src/Pages/pos/newSales/components/OrderItemDetailsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.orderItemDetails {
  background: white;
  border-radius: 12px;
  padding: 24px;
  width: 90%;
  max-width: 600px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* السطر الرئيسي الوحيد */
.mainRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 0;
  border-bottom: 1px solid #eee;
}

/* اسم المنتج والسعر على اليمين */
.productInfo {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1;
}

.productName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.productSize {
  font-size: 12px;
  color: #666;
}

.unitPrice {
  font-size: 14px;
  font-weight: 600;
  color: #e74c3c;
}

/* الكمية في النص */
.quantityControls {
  display: flex;
  align-items: center;
  gap: 12px;
  flex: 0 0 auto;
}

.quantityBtn {
  width: 36px;
  height: 36px;
  border: 2px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantityBtn:hover:not(:disabled) {
  border-color: #0373ed;
  background: #f8f9ff;
}

.quantityBtn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantityDisplay {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  min-width: 30px;
  text-align: center;
}

/* الإجمالي على الشمال */
.totalDisplay {
  flex: 0 0 auto;
}

.totalAmount {
  font-size: 18px;
  font-weight: 700;
  color: #e74c3c;
}

/* حقل الملاحظات */
.notesSection {
  width: 100%;
}

.notesInput {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  resize: vertical;
  font-family: inherit;
  transition: border-color 0.2s ease;
}

.notesInput:focus {
  outline: none;
  border-color: #0373ed;
}

.notesInput::placeholder {
  color: #999;
}

/* قسم الخصم */
.discountSection {
  width: 100%;
}

.discountInputs {
  display: flex;
  gap: 16px;
}

.discountField {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.discountField label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
}

.discountInput {
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.2s ease;
  /* إزالة الأزرار من number input */
  -moz-appearance: textfield;
}

.discountInput::-webkit-outer-spin-button,
.discountInput::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.discountInput:focus {
  outline: none;
  border-color: #0373ed;
}

/* أزرار التأكيد والإلغاء */
.actionButtons {
  display: flex;
  gap: 0;
  width: 100%;
  margin-top: 8px;
}

.confirmBtn,
.cancelBtn {
  flex: 1;
  padding: 16px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.confirmBtn {
  background: #28a745;
  color: white;
  border-radius: 8px 0 0 8px;
}

.confirmBtn:hover {
  background: #218838;
}

.cancelBtn {
  background: #f8f9fa;
  color: #333;
  border-radius: 0 8px 8px 0;
  border-left: 1px solid #ddd;
}

.cancelBtn:hover {
  background: #e9ecef;
}

/* Responsive */
@media (max-width: 768px) {
  .mainRow {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .productInfo {
    align-items: center;
    text-align: center;
  }
  
  .quantityControls {
    justify-content: center;
  }
  
  .totalDisplay {
    text-align: center;
  }
  
  .discountInputs {
    flex-direction: column;
  }
  
  .actionButtons {
    flex-direction: column;
  }
  
  .confirmBtn,
  .cancelBtn {
    border-radius: 8px;
  }
  
  .cancelBtn {
    border-left: none;
    border-top: 1px solid #ddd;
  }
}

===== src/Pages/pos/newSales/styles/OrderSummary.module.css =====
/* OrderSummary Module CSS */
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');

:root {
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --scale-factor: clamp(0.8, 1vw, 1.2);
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
}

/* Main Container */
.orderSummary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

/* Header Section */
.orderHeader {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.orderNumber {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.orderTotal {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.orderTotal .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.orderTotal .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

/* Content Section */
.orderContent {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.orderContent::-webkit-scrollbar {
  width: 6px;
}

.orderContent::-webkit-scrollbar-track {
  background: transparent;
}

.orderContent::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

/* Customer Input */
.customerInput {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customerField {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Cairo', sans-serif;
  background: transparent;
}

.customerField:focus {
  outline: none;
}

.customerButton {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customerButton:hover {
  background: #025bb5;
}

.customerButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

/* Order Items */
.orderItems {
  max-height: 50vh;
  margin-bottom: var(--spacing-md);
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.orderItems::-webkit-scrollbar {
  width: 4px;
}

.orderItems::-webkit-scrollbar-track {
  background: transparent;
}

.orderItems::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

/* Order Item Container - التعديل الرئيسي للفاصل */
.orderItemContainer {
  margin-bottom: clamp(12px, 1.5vw, 16px); /* مسافة بين مجموعات المنتجات فقط */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* خط فاصل بين المجموعات */
  padding-bottom: clamp(8px, 1vw, 12px);
}

.orderItemContainer:last-child {
  border-bottom: none; /* إزالة الخط من آخر عنصر */
}

/* Main Order Item */
.orderItem {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 6px;
  margin-bottom: 0; /* إزالة المسافة السفلية */
}

.orderItem:hover {
  background: rgba(0, 0, 0, 0.05);
}

.orderItem.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 30px solid #0373ed;
  padding-left: 8px;
  position: relative;
}

/* حرف X للمنتج الرئيسي */
.orderItem.selected::before {
  content: '✕';
  position: absolute;
  left: -30px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 30px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للمنتج الرئيسي */
.orderItem.selected:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 18px;
  transform: scale(1.1);
}

.orderItem.extraItem {
  border-left: 3px solid #28a745;
}

.orderItem.withoutItem {
  border-left: 3px solid #dc3545;
}

/* Item Details */
.itemDetails {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0;
}

.deleteButton {
    order: -1; /* أول عنصر */

  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.deleteButton:hover {
  background: rgba(229, 57, 53, 0.1);
}

.deleteButton img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.itemInfo {
  flex: 1;
  min-width: 0;
}

.itemName {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.itemSizeInline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em;
}

/* Item Prices - التعديل الرئيسي للأسعار */
.itemPrices {
  display: flex;
  align-items: center;
  gap: clamp(6px, 1vw, 10px);
  flex-shrink: 0;
  min-width: fit-content;
}

.itemPrice {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
  padding-right: clamp(6px, 1vw, 10px);
  border-right: 1px solid #ccc; /* الخط العمودي الفاصل */
}

.itemTotal {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
  padding-left: clamp(6px, 1vw, 10px);
}

.itemTotal.negative {
  color: #dc3545;
  font-weight: 600;
}

/* Badges */
.extraBadge, .withoutBadge {
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.extraBadge {
  background: #28a745;
}

.withoutBadge {
  background: #dc3545;
}

/* Sub-items Container - إزالة الفاصل مع المنتج الرئيسي */
.subItemsContainer {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
  border-left: 2px solid #f0f0f0;
}

/* Sub-item */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}


.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}

/* Sub-item المحدد - مع border أكبر */
.selectedSubItem {
  background: rgba(3, 115, 237, 0.1);
  border-left: 30px solid #0373ed;
  padding-left: 8px;
  position: relative;
}
.selectedSubItem::before {
  content: '✕';
  position: absolute;
  left: -30px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 30px;
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للـ sub-item */
.selectedSubItem:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 16px;
  transform: scale(1.1);
}

/* تأثير الضغط للعناصر المحددة */
.orderItem.selected:active::before,
.selectedSubItem:active::before {
  transform: scale(0.9);
  background: rgba(0, 0, 0, 0.2);
}

/* الـ options لا تأخذ تأثيرات الـ hover */
.subItem[data-type="option"] {
  cursor: default;
}

.subItem[data-type="option"]:hover {
  background: initial;
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 35px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 35px;
    font-size: 15px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 38px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 38px;
    font-size: 16px;
  }
}

/* تحسين للشاشات الصغيرة جداً */
@media (max-width: 480px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 40px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 40px;
    font-size: 17px;
  }
}

.subItemDetails {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

/* Sub-item Prices - نفس تصميم الأسعار الرئيسية */
.subItemPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.subItemPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.subItemTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

.subItemTotal.negative {
  color: #dc3545;
}

.subItemDelete {
  width: 14px;
  height: 14px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.subItemDelete:hover {
  opacity: 1;
}

.subItemDelete img {
  width: 8px;
  height: 8px;
}

/* Item Options - إزالة الفاصل مع المنتج الرئيسي */
.itemOptions {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
}

.optionDetail {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1px;
  padding: 2px 0;
  min-height: 18px;
}

.optionText {
  font-size: 10px;
  color: #666;
  font-weight: 400;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
  flex: 1;
}

/* Option Prices - نفس تصميم الأسعار الرئيسية */
.optionPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.optionPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.optionTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

/* Order Footer */
.orderFooter {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summaryRows {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-sm) * 0.8);
  margin-bottom: var(--spacing-md);
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px);
  font-weight: 500;
  line-height: 1.3;
}

.summaryRow span:last-child {
  font-weight: 700;
  color: var(--text-primary);
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px);
  font-weight: 700;
  padding-top: var(--spacing-md);
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md);
}

.actionButtons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.actionButton {
  height: clamp(40px, 7vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.actionButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.actionButton:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.actionButton.send {
  background: var(--primary-red);
}

.actionButton.print {
  background: var(--primary-blue);
}

.actionButton.pay {
  background: var(--primary-green);
}

/* Responsive Design */
@media (max-width: 1366px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .orderItems {
    max-height: 45vh;
  }
}

@media (max-width: 1024px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.4);
  }
  
  .orderItems {
    max-height: 42vh;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 4px;
  }
}

@media (max-width: 768px) {
  .subItemName {
    font-size: 9px;
  }
  
  .subItemPrice {
    font-size: 7px;
  }
  
  .subItemTotal {
    font-size: 8px;
  }
  
  .subItemDelete {
    width: 12px;
    height: 12px;
  }
  
  .subItemDelete img {
    width: 6px;
    height: 6px;
  }
  
  .optionText {
    font-size: 9px;
  }
  
  .optionPrice {
    font-size: 7px;
  }
  
  .optionTotal {
    font-size: 8px;
  }
}

@media (max-width: 480px) {
  .orderItemContainer {
    margin-bottom: 8px;
  }
  
  .subItem {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 16px;
  }
  
  .optionDetail {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 14px;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 3px;
  }
}


/* Comments Container */
.commentsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #e3f2fd;
}

.commentItem {
  display: flex;
  align-items: flex-start;
  gap: 6px;
  padding: 3px 0;
  margin-bottom: 2px;
  min-height: 20px;
}

.commentIcon {
  font-size: 10px;
  color: #2196f3;
  margin-top: 1px;
  flex-shrink: 0;
}

.commentText {
  font-size: 10px;
  color: #2196f3;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
  font-style: italic;
  word-wrap: break-word;
  flex: 1;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .commentText {
    font-size: 9px;
  }
  
  .commentIcon {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .commentItem {
    padding: 2px 0;
    margin-bottom: 1px;
    min-height: 16px;
  }
  
  .commentText {
    font-size: 8px;
  }
  
  .commentIcon {
    font-size: 8px;
  }
}










/* زر الحذف المدمج */
.deleteButtonInline {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 10px;
  font-weight: 600;
  cursor: pointer;
  margin-left: 8px;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 18px;
  height: 16px;
}

.deleteButtonInline:hover {
  background: #c82333;
  transform: scale(1.1);
}

/* تحديث SubItem لتقليل المسافات */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0; /* تقليل المسافة */
  margin-bottom: 0px; /* إزالة المسافة السفلية */
  min-height: 18px; /* تقليل الارتفاع */
  cursor: pointer;
}

.subItem:hover {
  background: rgba(0, 0, 0, 0.02);
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.1; /* تحسين المسافة بين الأسطر */
  font-family: 'Cairo', sans-serif;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

/* تحديث OrderItemContainer لتقليل المسافة */
.orderItemContainer {
  margin-bottom: clamp(6px, 1vw, 10px); /* تقليل المسافة */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding-bottom: clamp(4px, 0.8vw, 8px); /* تقليل المسافة */
}

/* تحديث SubItemsContainer */
.subItemsContainer {
  margin-top: -2px; /* تقليل الفجوة مع المنتج الأساسي */
  padding-left: 12px; /* تقليل المسافة اليسرى */
  border-left: 2px solid #f0f0f0;
}

/* تحديث SubItemDetails */
.subItemDetails {
  display: flex;
  align-items: center;
  gap: 4px; /* تقليل المسافة */
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 3px; /* تقليل المسافة */
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* تحديث الـ responsive */
@media (max-width: 768px) {
  .deleteButtonInline {
    font-size: 8px;
    padding: 1px 4px;
    min-width: 16px;
    height: 14px;
  }
  
  .subItem {
    min-height: 16px;
  }
  
  .subItemName {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .deleteButtonInline {
    font-size: 7px;
    padding: 1px 3px;
    min-width: 14px;
    height: 12px;
  }
  
  .subItem {
    min-height: 14px;
  }
  
  .subItemName {
    font-size: 8px;
  }
  
  .orderItemContainer {
    margin-bottom: 4px;
    padding-bottom: 4px;
  }
  
  .subItemsContainer {
    padding-left: 8px;
  }
}









/* تحديث SubItemBadge */
.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* حالة الحذف - يكبر ويصبح قابل للنقر */
.subItemBadge.deletable {
  width: 18px;
  height: 18px;
  font-size: 10px;
  cursor: pointer;
  transform: scale(1.1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.subItemBadge.deletable:hover {
  transform: scale(1.2);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
}

.subItemBadge.deletable:active {
  transform: scale(1.0);
}
/* ألوان الـ badges */
.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.extra.deletable {
  background: #dc3545; /* أحمر للحذف */
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.without.deletable {
  background: #dc3545; /* يبقى أحمر */
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemBadge.option.deletable {
  background: #dc3545; /* أحمر للحذف */
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .subItemBadge.deletable {
    width: 22px; /* أكبر للتابلت */
    height: 22px;
    font-size: 12px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .subItemBadge.deletable {
    width: 20px;
    height: 20px;
    font-size: 11px;
  }
}

@media (max-width: 480px) {
  .subItemBadge.deletable {
    width: 24px; /* أكبر للشاشات الصغيرة */
    height: 24px;
    font-size: 12px;
  }
}
===== src/Pages/pos/newSales/styles/popup.css =====
/* src/Pages/pos/newSales/styles/popup.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.popup-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.popup-title {
  font-size: 20px;
  font-weight: 700;
  color: var(--text-primary);
  margin: 0;
}

.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
}


.popup-close:hover {
  background: #f0f0f0;
  transform: scale(1.1);
}

.popup-close img {
  width: 20px;
  height: 20px;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
  transition: color 0.2s ease;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

.popup-body {
  padding: 20px;
}

.quantity-display {
  text-align: center;
  font-size: 18px;
  font-weight: 600;
  color: var(--primary-blue);
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 8px;
}

.prices-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
}

.price-card {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.price-card:hover {
  border-color: var(--primary-blue);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.price-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  text-align: center;
}

.price-value {
  display: flex;
  align-items: baseline;
  gap: 5px;
}

.price-value .price {
  font-size: 20px;
  font-weight: 700;
  color: var(--primary-blue);
}

.price-value .currency {
  font-size: 14px;
  color: var(--text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .popup-content {
    width: 95%;
    margin: 20px;
  }
  
  .prices-grid {
    grid-template-columns: 1fr;
  }
  
  .popup-header {
    padding: 15px;
  }
  
  .popup-body {
    padding: 15px;
  }
}



@media (max-width: 768px) {
  .popup-close {
    width: 32px;
    height: 32px;
    padding: 6px;
  }
  
  .popup-close .MuiSvgIcon-root {
    font-size: 18px !important;
  }
}


.options-popup {
  max-width: 600px;
  max-height: 85vh;
}

.popup-title-section {
  flex: 1;
}

.popup-subtitle {
  font-size: 14px;
  color: var(--text-secondary);
  margin-top: 4px;
}

.group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.group-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.group-progress {
  font-size: 12px;
  color: var(--text-secondary);
  background: #f0f0f0;
  padding: 4px 8px;
  border-radius: 4px;
}

.group-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.selection-info {
  display: flex;
  align-items: center;
  gap: 10px;
}

.required-badge {
  background: var(--primary-red);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.selection-count {
  font-size: 14px;
  color: var(--text-primary);
  font-weight: 500;
}

.min-selection {
  font-size: 12px;
  color: var(--text-secondary);
}

.options-list {
  max-height: 300px;
  overflow-y: auto;
  margin-bottom: 20px;
}

.option-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border: 1px solid #eee;
  border-radius: 8px;
  margin-bottom: 10px;
  transition: all 0.2s ease;
}

.option-item:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.option-info {
  flex: 1;
}

.option-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 4px;
}

.option-price {
  font-size: 14px;
  color: var(--primary-green);
  font-weight: 500;
}

.comment-only {
  font-size: 12px;
  color: var(--text-secondary);
  font-style: italic;
}

.option-controls {
  display: flex;
  align-items: center;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 10px;
}

.quantity-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantity-btn:hover:not(:disabled) {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.quantity-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantity-btn.plus {
  border-color: var(--primary-green);
  color: var(--primary-green);
}

.quantity-btn.minus {
  border-color: var(--primary-red);
  color: var(--primary-red);
}

.quantity-display {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 20px;
  text-align: center;
}

.select-btn {
  padding: 8px 16px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.select-btn:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.select-btn.selected {
  background: var(--primary-blue);
  color: white;
  border-color: var(--primary-blue);
}

.popup-footer {
  border-top: 1px solid #eee;
  padding: 15px 20px;
}

.footer-buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.footer-buttons button {
  padding: 10px 20px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-cancel {
  background: #f5f5f5;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-cancel:hover {
  background: #e0e0e0;
}

.btn-back {
  background: #f8f9fa;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-back:hover {
  background: #e9ecef;
}

.btn-skip {
  background: var(--primary-orange);
  border: 1px solid var(--primary-orange);
  color: white;
}

.btn-skip:hover {
  opacity: 0.9;
}

.btn-skip:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-next {
  background: var(--primary-blue);
  border: 1px solid var(--primary-blue);
  color: white;
}

.btn-next:hover:not(:disabled) {
  opacity: 0.9;
}

.btn-next:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* عرض الخيارات في الفاتورة */
.item-options {
  margin-top: 4px;
  padding-left: 10px;
}

.option-detail {
  margin-bottom: 2px;
}

.option-text {
  font-size: 11px;
  color: var(--text-secondary);
  font-weight: 400;
  line-height: 1.3;
}

/* Responsive */
@media (max-width: 768px) {
  .options-popup {
    width: 98%;
    max-height: 90vh;
  }
  
  .option-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .option-controls {
    align-self: flex-end;
  }
  
  .footer-buttons {
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .footer-buttons button {
    flex: 1;
    min-width: 80px;
  }
}
===== src/Pages/pos/newSales/styles/PriceSelectionPopup.module.css =====
/* src/Pages/pos/newSales/components/PriceSelectionPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease-out;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  width: 50%;
  max-height: 80vh;
  overflow-y: auto;
  animation: slideIn 0.3s ease-out;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #eee;
}

.popupTitle {
  font-size: 20px;
  font-weight: 600;
  color: #333;
  margin: 0;
}

.popupClose {
  width: 36px;
  height: 36px;
  border: none;
  background: #f5f5f5;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #e9ecef;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.quantityDisplay {
  text-align: center;
  font-size: 16px;
  font-weight: 500;
  color: #666;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.pricesGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 15px;
}

.priceCard {
  border: 2px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.priceCard:hover {
  border-color: #0373ed;
  background: #f8f9ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.priceName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin-bottom: 10px;
}

.priceValue {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
}

.price {
  font-size: 24px;
  font-weight: 700;
  color: #0373ed;
}

.currency {
  font-size: 14px;
  color: #666;
  font-weight: 500;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 95%;
    margin: 10px;
  }
  
  .pricesGrid {
    grid-template-columns: 1fr;
  }
  
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .popupTitle {
    font-size: 18px;
  }
}

===== src/Pages/pos/newSales/styles/ProductCard.module.css =====
/* src/Pages/pos/newSales/styles/ProductCard.module.css */

.productCard {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  height: auto; /* تغيير من fixed height إلى auto */
  min-height: 180px; /* حد أدنى للارتفاع */
}

.productCard:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.productCard:active {
  transform: translateY(-2px);
}

.productImageContainer {
  position: relative;
  width: 100%;
  height: 120px; /* ارتفاع ثابت للصورة */
  overflow: hidden;
}

.productImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.productCard:hover .productImage {
  transform: scale(1.05);
}

/* النص المعروض على الصورة (السعر) */
.priceOverlay {
  position: absolute;
  top: 8px;
  right: 8px;
  background: rgba(3, 115, 237, 0.9);
  color: white;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  backdrop-filter: blur(4px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.productInfo {
  padding: 12px;
  flex: 1; /* يأخذ باقي المساحة المتاحة */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.productName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin: 0;
  line-height: 1.4;
  text-align: center;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* إزالة height constraints لتسمح بالتوسع */
}

/* Responsive Design */
@media (max-width: 1366px) {
  .productCard {
    min-height: 160px;
  }
  
  .productImageContainer {
    height: 100px;
  }
  
  .productName {
    font-size: 13px;
  }
  
  .priceOverlay {
    font-size: 11px;
    padding: 3px 6px;
  }
}

@media (max-width: 1024px) {
  .productCard {
    min-height: 140px;
  }
  
  .productImageContainer {
    height: 90px;
  }
  
  .productName {
    font-size: 12px;
  }
  
  .productInfo {
    padding: 10px;
  }
  
  .priceOverlay {
    font-size: 10px;
    padding: 2px 5px;
  }
}

@media (max-width: 768px) {
  .productCard {
    min-height: 120px;
  }
  
  .productImageContainer {
    height: 80px;
  }
  
  .productName {
    font-size: 11px;
  }
  
  .productInfo {
    padding: 8px;
  }
  
  .priceOverlay {
    font-size: 9px;
    padding: 2px 4px;
  }
}

@media (max-width: 480px) {
  .productCard {
    min-height: 100px;
  }
  
  .productImageContainer {
    height: 70px;
  }
  
  .productName {
    font-size: 10px;
  }
  
  .productInfo {
    padding: 6px;
  }
  
  .priceOverlay {
    font-size: 8px;
    padding: 1px 3px;
  }
}

===== src/Pages/pos/newSales/styles/ProductOptionsPopup.module.css =====
/* src/Pages/pos/newSales/components/ProductOptionsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  max-width: 700px;
  width: 50%;
  max-height: 85vh;
  overflow-y: auto;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 20px;
  border-bottom: 1px solid #e9ecef;
  background: #f8f9fa;
}

.popupTitleSection {
  flex: 1;
}

.popupTitle {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  margin: 0 0 5px 0;
  font-family: 'Cairo', sans-serif;
}

.popupSubtitle {
  font-size: 14px;
  color: #666;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.popupClose {
  width: 32px;
  height: 32px;
  border: none;
  background: #e9ecef;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #dee2e6;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.optionsContainer {
  display: flex;
  flex-direction: column;
  gap: 25px;
}

.optionGroup {
  background: #f8f9fa;
  border-radius: 12px;
  padding: 20px;
  border-left: 4px solid #0373ed;
}

.groupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #e9ecef;
}

.groupTitle {
  display: flex;
  align-items: center;
  gap: 10px;
}

.groupName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
}

.requiredBadge {
  background: #e74c3c;
  color: white;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 10px;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.groupInfo {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.selectionCount {
  font-weight: 600;
  color: #0373ed;
}

.minSelection {
  color: #666;
}

.optionsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 12px;
}

.optionCard {
  background: white;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  padding: 16px;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.optionCard:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.15);
}

.optionCard.selected {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.2);
}

.optionContent {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
  text-align: center;
}

.optionInfo {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.optionName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
}

.optionPrice {
  font-size: 12px;
  color: #e74c3c;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.optionControls {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

/* للمجموعات المتعددة */
.quantitySection {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  justify-content: center;
}

.removeBtn {
  width: 28px;
  height: 28px;
  border: none;
  border-radius: 50%;
  background: #dc3545;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

.removeBtn:hover {
  background: #c82333;
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

.quantityBadge {
  background: #0373ed;
  color: white;
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 14px;
  font-weight: 600;
  min-width: 32px;
  text-align: center;
  font-family: 'Cairo', sans-serif;
  box-shadow: 0 2px 4px rgba(3, 115, 237, 0.2);
}

.addIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .addIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.maxReached {
  padding: 6px 12px;
  background: #f8f9fa;
  border-radius: 16px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

/* للمجموعات الفردية */
.singleSelect {
  display: flex;
  justify-content: center;
  align-items: center;
}

.selectedIcon {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #28a745;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
}

.unselectedIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .unselectedIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.totalSection {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #e9ecef;
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 18px;
  font-weight: 600;
  font-family: 'Cairo', sans-serif;
}

.totalLabel {
  color: #333;
}

.totalValue {
  color: #0373ed;
}

.popupFooter {
  display: flex;
  gap: 12px;
  padding: 20px;
  border-top: 1px solid #e9ecef;
  background: #f8f9fa;
}

.btnCancel {
  flex: 1;
  padding: 12px;
  background: #f8f9fa;
  color: #666;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnCancel:hover {
  background: #e9ecef;
}

.btnConfirm {
  flex: 2;
  padding: 12px;
  background: #0373ed;
  color: white;
  border: 1px solid #0373ed;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnConfirm:hover:not(:disabled) {
  background: #0256c7;
}

.btnConfirm:disabled {
  background: #ccc;
  border-color: #ccc;
  cursor: not-allowed;
}

/* تأثيرات النقر */
.optionCard:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(3, 115, 237, 0.2);
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 98%;
    max-height: 90vh;
  }
  
  .optionsGrid {
    grid-template-columns: 1fr;
  }
  
  .groupHeader {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .popupFooter {
    flex-direction: column;
  }
  
  .optionGroup {
    padding: 15px;
  }
}

@media (max-width: 480px) {
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .optionCard {
    padding: 12px;
  }
  
  .popupTitle {
    font-size: 16px;
  }
  
  .groupName {
    font-size: 14px;
  }
  
  .optionName {
    font-size: 13px;
  }
  
  .removeBtn {
    width: 24px;
    height: 24px;
  }
  
  .quantityBadge {
    padding: 4px 8px;
    font-size: 12px;
  }
  
  .selectedIcon,
  .unselectedIcon,
  .addIcon {
    width: 28px;
    height: 28px;
  }
}

===== src/Pages/pos/newSales/styles/responsive.css =====
/* src/Pages/pos/newSales/styles/responsive.css */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');


html[dir="rtl"] .pos-system,
html[dir="rtl"] .pos-system * {
  direction: ltr !important;
}


/* تحديد نظام الوحدات المرن */
:root {
  --base-font-size: clamp(10px, 0.8vw, 16px);
  --scale-factor: clamp(0.8, 1vw, 1.2);
  
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
  --spacing-xxl: calc(3rem * var(--scale-factor));
  
  /* Component heights */
  --header-height: clamp(60px, 8vh, 100px);
  --keypad-height: clamp(80px, 8vh, 120px);
  --action-bar-height: clamp(50px, 7vh, 80px);
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
      font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;

}

html {
  font-size: var(--base-font-size);
  height: 100%;
}

body {
  font-family: 'Nunito', sans-serif;
  background-color: var(--bg-main);
  color: var(--text-primary);
  height: 100%;
  overflow: hidden;
    direction: ltr !important;

}

/* Main container */
.pos-system {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
    direction: ltr !important;
}

/* Top Bar */
.top-bar {
  height: var(--header-height);
  background: var(--bg-white);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.top-bar-content {
  height: 100%;
  padding: 0 var(--spacing-xl);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  text-decoration: none;
  color: var(--text-primary);
  font-size: clamp(12px, 1.2vw, 18px);
  font-weight: 500;
  transition: all 0.2s ease;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: var(--primary-blue);
}

.nav-item img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

.order-type-select {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: clamp(12px, 1.2vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: var(--bg-white);
  min-width: 120px;
}

.menu-button {
  padding: var(--spacing-sm);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(20px, 2vw, 28px);
  height: clamp(20px, 2vw, 28px);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  overflow: hidden;
}

/* Products Section */
.products-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  overflow: hidden;
}

/* Number Pad Bar */
.number-pad-bar {
  height: var(--keypad-height);
  display: flex;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1px;
  background: var(--border-color);
}

.keypad-key {
  background: var(--bg-white);
  border: none;
  font-size: clamp(18px, 2.5vw, 32px);
  font-weight: 600;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypad-key:hover {
  background: #f8f9fa;
}

.keypad-display {
  width: clamp(120px, 15vw, 200px);
  background: var(--primary-blue);
  color: white;
  font-size: clamp(20px, 2.8vw, 36px);
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Action Buttons Bar */
.action-buttons-bar {
  height: var(--action-bar-height);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  flex-shrink: 0;
}

.action-chips {
  display: flex;
  gap: var(--spacing-md);
}

.action-chip {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(12px, 1.4vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.action-chip img {
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
}

.action-chip.extra { background: var(--primary-green); }
.action-chip.without { background: var(--primary-red); }
.action-chip.offer { background: var(--primary-orange); }

.action-chip:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.search-container {
  position: relative;
  display: flex;
  background: var(--bg-white);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  height: 85%;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
  z-index: 1;
}

.search-input {
  width: clamp(200px, 25vw, 350px);
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: calc(var(--spacing-md) * 2 + 20px);
  border: none;
  font-size: clamp(12px, 1.4vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
  height: 100%;
}

.search-input:focus {
  outline: none;
}

.filter-button {
  width: clamp(40px, 5vw, 60px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.filter-button:hover {
  background: #025bb5;
}

.filter-button img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  padding: 20px;
  max-height: calc(100vh - 200px);
  overflow-y: auto;
  overflow-x: hidden;
}


.product-grid::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-grid::-webkit-scrollbar-track {
  background: transparent;
}

.product-grid::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.product-card {
  aspect-ratio: 3/4;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: none;
  display: flex;
  flex-direction: column;
    min-width: 0; /* للسماح بالتقلص */

}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 70%;
  object-fit: cover;
    flex-shrink: 0;

}

.product-info {
  height: 30%;
  padding: clamp(4px, 0.8vw, 12px);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: clamp(4px, 0.6vw, 8px);
  width: 100%;
  min-height: 0;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1.2vw, 16px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
  text-align: right; /* محاذاة لليمين للنص العربي */
  flex: 1; /* يأخذ المساحة المتاحة */
  min-width: 0; /* يسمح بالتقلص */
  word-wrap: break-word;
    flex-direction: row; /* تغيير من column إلى row */

  overflow-wrap: break-word;
  hyphens: auto;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* السماح بسطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: clamp(2px, 0.3vw, 4px);
  width: 100%;
}

.product-price .price {
  font-size: clamp(9px, 1.4vw, 18px);
  font-weight: 700;
  color: var(--text-primary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}
.product-price .currency {
  font-size: clamp(7px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-secondary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}

/* Categories Sidebar */
.categories-sidebar {
  width: clamp(80px, 10vw, 120px);
  background: transparent;
  flex-shrink: 0;
}

.categories-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  height: 100%;
  overflow-y: auto;
  padding: var(--spacing-sm);
 scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.categories-list::-webkit-scrollbar {
  width: 4px;
}

.categories-list::-webkit-scrollbar-track {
  background: transparent;
}

.categories-list::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.category-item {
  aspect-ratio: 1;
  background: var(--bg-white);
  border-radius: 8px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-sm);
  text-align: center;
}

.category-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border-color: var(--primary-blue);
}

.category-item img {
  width: clamp(24px, 3vw, 48px);
  height: clamp(24px, 3vw, 48px);
  object-fit: contain;
}

.category-item span {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
}

/* Order Summary */
.order-summary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.order-header {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.order-total {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.order-total .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.order-total .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

.order-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.order-content::-webkit-scrollbar {
  width: 6px;
}

.order-content::-webkit-scrollbar-track {
  background: transparent;
}

.order-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.order-title {
  font-size: clamp(14px, 1.6vw, 20px);
  font-weight: 700;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  
}

.customer-input {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customer-field {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
}

.customer-field:focus {
  outline: none;
}

.customer-button {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customer-button:hover {
  background: #025bb5;
}

.customer-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.order-items {
  max-height: 50vh; /* زيادة من 40vh إلى 50vh */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.order-items::-webkit-scrollbar {
  width: 4px;
}

.order-items::-webkit-scrollbar-track {
  background: transparent;
}

.order-items::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.item-details {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0; /* للسماح بالتقلص */
}

.delete-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.delete-button:hover {
  background: rgba(229, 57, 53, 0.1);
}

.delete-button img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.item-info {
  flex: 1;
  min-width: 0;
}

.item-name {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
}

.item-extra {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.extra-price,
.extra-total {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
}

.item-prices {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  min-width: fit-content;
}

.item-price::after {
  content: "|";
  margin-left: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: normal;
}

.item-price {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
}

.item-total {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
}

.order-footer {
  padding: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm); /* كان var(--spacing-md) */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px); /* كان 11px, 1.3vw, 16px */
  font-weight: 500;
  line-height: 1.3; /* إضافة line-height للوضوح */
}

.summary-row span:last-child {
  font-weight: 700;
  color: var(--text-primary); /* تأكيد اللون */
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px); /* كان 14px, 1.6vw, 20px */
  font-weight: 700;
  padding-top: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.action-button {
  height: clamp(40px, 6vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
}

.action-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.action-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.action-button.send { background: var(--primary-red); }
.action-button.print { background: var(--primary-blue); }
.action-button.pay { background: var(--primary-green); }

/* Responsive breakpoints */
@media (max-width: 1366px) {
  :root {
    --scale-factor: 0.9;
  }
    .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.8);
  }
  
  .order-items {
    max-height: 45vh;
  }
  
}

@media (max-width: 1024px) {
  :root {
    --scale-factor: 0.8;
  }
  
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .order-items {
    max-height: 42vh;
  }
}

@media (min-width: 1920px) {
  :root {
    --scale-factor: 1.1;
  }
}

@media (min-width: 2560px) {
  :root {
    --scale-factor: 1.3;
  }
}

/* Print styles */
@media print {
  .pos-system {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
}



/* إضافة media query لمنطقة 1400-1600px */
@media (min-width: 1400px) and (max-width: 1600px) {
  :root {
    --scale-factor: 0.95; /* قيمة وسط */
    --base-font-size: clamp(12px, 1vw, 18px); /* تحسين الخط */
  }
  
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: var(--spacing-md);
  }
  
  /* تثبيت ارتفاعات العناصر */
  .action-buttons-bar {
    height: clamp(55px, 8vh, 85px);
  }
  
  
  .top-bar {
    height: clamp(65px, 9vh, 105px);
  }
}

.loading-message {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  font-size: 1.6rem;
  color: var(--text-secondary);
}

.item-size {
  font-size: clamp(9px, 1vw, 12px);
  color: var(--primary-blue);
  font-weight: 500;
}

.product-card .product-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-xs);
}

.product-card .product-name {
  order: 1;
}

.product-card .product-price {
  order: 2;
}


.item-size-inline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em; /* أصغر قليلاً من اسم الصنف */
}

.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

/* تحسين responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .product-name {
    font-size: clamp(7px, 1.1vw, 14px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(8px, 1.3vw, 16px);
  }
  
  .product-price .currency {
    font-size: clamp(6px, 0.9vw, 12px);
  }
}

@media (max-width: 1024px) {
  .product-name {
    font-size: clamp(6px, 1vw, 12px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(7px, 1.2vw, 14px);
  }
  
  .product-price .currency {
    font-size: clamp(5px, 0.8vw, 10px);
  }
  
  .item-prices {
    flex-direction: column;
    gap: 2px;
    align-items: flex-end;
  }
  
  .item-price::after {
    display: none;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .product-name {
    font-size: clamp(10px, 1.4vw, 20px);
  }
  
  .product-price .price {
    font-size: clamp(12px, 1.6vw, 22px);
  }
  
  .product-price .currency {
    font-size: clamp(9px, 1.2vw, 18px);
  }
}

/* جعل الصفحة دائماً LTR */
.pos-system {
  direction: ltr !important;
}

.pos-system * {
  direction: ltr !important;
}

/* تحسين شكل الـ Material UI Icons */
.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

.back-button .MuiSvgIcon-root {
  font-size: 18px !important;
  color: var(--text-primary) !important;
}

/* تحسين شكل زر الإغلاق في الـ popup */
.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup-close:hover {
  background: #f0f0f0;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

/* التأكد من أن الـ popup overlay يمكن الضغط عليه */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  cursor: pointer; /* إضافة cursor للإشارة أنه قابل للضغط */
}

.popup-content {
  cursor: default; /* إزالة cursor من المحتوى */
  /* باقي الـ styles كما هي */
}

/* إضافة animation للـ popup */
.popup-overlay {
  animation: fadeIn 0.2s ease-out;
}

.popup-content {
  animation: slideIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}


/* ضمان عدد المنتجات في الصف حسب حجم الشاشة */

/* شاشات كبيرة جداً - 7 منتجات */
@media (min-width: 1920px) {
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: 20px;
    padding: 24px;
  }
}

/* شاشات كبيرة - 6-7 منتجات */
@media (max-width: 1600px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 18px;
    padding: 22px;
  }
}

/* شاشات متوسطة - 6 منتجات */
@media (max-width: 1400px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 16px;
    padding: 20px;
  }
}

/* شاشات لابتوب - 5-6 منتجات */
@media (max-width: 1200px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 14px;
    padding: 18px;
  }
}

/* شاشات صغيرة - 5 منتجات */
@media (max-width: 1024px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 12px;
    padding: 16px;
  }
}

/* تابلت - 5 منتجات */
@media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    padding: 14px;
  }
}

/* موبايل - 5 منتجات */
@media (max-width: 480px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 8px;
    padding: 12px;
  }
}

/* تحسينات إضافية للشبكة */
.product-grid::-webkit-scrollbar {
  width: 8px;
}

.product-grid::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* تأثيرات الانتقال للشبكة */
.product-grid {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



/* إضافة هذا للـ CSS الموجود */

/* Order Item Selection */
.order-item {
  cursor: pointer;
  transition: all 0.3s ease;
}

.order-item.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 4px solid #0373ed;
}

.order-item:hover {
  background: rgba(0, 0, 0, 0.05);
}

/* Extra/Without Items */
.extra-item {
  border-left: 3px solid #28a745;
}

.without-item {
  border-left: 3px solid #dc3545;
}

.extra-badge {
  background: #28a745;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.without-badge {
  background: #dc3545;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.item-total.negative {
  color: #dc3545;
  font-weight: 600;
}
/* Sub-items styling */
.sub-items-container {
  margin-top: 6px;
  padding-left: 8px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  margin-bottom: 3px;
}

.sub-item-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 2px 0;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-text {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 12px;
  height: 12px;
}

/* Loading and Error states */
.pos-system.loading,
.pos-system.error {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  flex-direction: column;
  gap: 20px;
}

.loading-spinner {
  font-size: 18px;
  color: #666;
}

.error-message {
  font-size: 16px;
  color: #dc3545;
  text-align: center;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-text {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 10px;
    height: 10px;
  }
}



* تصميم التعليق */
.item-note {
  display: flex;
  align-items: flex-start;
  gap: 4px;
  margin-top: 4px;
  padding: 3px 6px;
  background: rgba(108, 117, 125, 0.1);
  border-radius: 4px;
  border-left: 2px solid #6c757d;
}

.note-icon {
  font-size: 10px;
  line-height: 1;
  flex-shrink: 0;
  margin-top: 1px;
}

.note-text {
  font-size: 10px;
  color: #6c757d;
  line-height: 1.2;
  font-style: italic;
  word-wrap: break-word;
  overflow-wrap: break-word;
  flex: 1;
}

/* تأكيد أن التعليق بنفس حجم الخيارات */
.item-note,
.option-detail,
.sub-item {
  font-size: 10px;
  line-height: 1.2;
  margin-top: 3px;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .item-note {
    padding: 2px 4px;
    margin-top: 3px;
  }
  
  .note-icon {
    font-size: 9px;
  }
  
  .note-text {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .item-note {
    padding: 2px 3px;
    margin-top: 2px;
  }
  
  .note-icon {
    font-size: 8px;
  }
  
  .note-text {
    font-size: 8px;
  }
}

/* تحسينات إضافية */
.item-note:empty {
  display: none;
}

.note-text:empty {
  display: none;
}

/* تأثير hover خفيف */
.order-item:hover .item-note {
  background: rgba(108, 117, 125, 0.15);
}


/* للمنتجات الإضافية */
.order-item.extra-item .item-note {
  background: rgba(40, 167, 69, 0.1);
  border-left-color: #28a745;
}

.order-item.extra-item .note-text {
  color: #28a745;
}

/* للمنتجات بدون */
.order-item.without-item .item-note {
  background: rgba(220, 53, 69, 0.1);
  border-left-color: #dc3545;
}

.order-item.without-item .note-text {
  color: #dc3545;
}




/* تحديث Sub-items styling */
.order-item-container {
  margin-bottom: 8px;
}

.sub-items-container {
  margin-top: 6px;
  padding-left: 20px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 4px 0;
  margin-bottom: 2px;
  min-height: 24px;
}

.sub-item-details {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-name {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
}

.sub-item-prices {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 2px;
  min-width: 60px;
}

.sub-item-price {
  font-size: 9px;
  color: #999;
  font-weight: 500;
}

.sub-item-total {
  font-size: 10px;
  color: #333;
  font-weight: 600;
}

.sub-item-total.negative {
  color: #dc3545;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 10px;
  height: 10px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-name {
    font-size: 9px;
  }
  
  .sub-item-price {
    font-size: 8px;
  }
  
  .sub-item-total {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 8px;
    height: 8px;
  }
}


/* حالة الأزرار المعطلة */
.action-chip.disabled {
  opacity: 0.4;
  cursor: not-allowed;
  pointer-events: none;
}

.action-chip.disabled:hover {
  background: inherit;
  border-color: inherit;
  transform: none;
  box-shadow: none;
}

.action-chip.disabled img {
  opacity: 0.5;
}

.action-chip.disabled span {
  opacity: 0.5;
}

/* تحسين الـ tooltip */
.action-chip[title] {
  position: relative;
}

.action-chip[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #333;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  margin-bottom: 5px;
}

.action-chip[title]:hover::before {
  content: '';
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  border: 5px solid transparent;
  border-top-color: #333;
  z-index: 1000;
}
===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productType: number; // ✅ إضافة هذا الحقل
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
  productOptionGroups?: ProductOptionGroup[]; // إضافة المجموعات
}


export interface ProductOptionGroup {
  id: string;
  name: string;
  isRequired: boolean;
  allowMultiple: boolean;
  minSelection: number;
  maxSelection: number;
  sortOrder: number;
  optionItems: ProductOptionItem[];
}

export interface ProductOptionItem {
  id: string;
  name: string;
  productPriceId?: string | null; // Change this line to support null
  useOriginalPrice: boolean;
  extraPrice: number;
  isCommentOnly: boolean;
  sortOrder: number;
}

export interface SelectedOption {
  groupId: string;
  itemId: string;
  itemName: string;
  quantity: number;
  extraPrice: number;
  isCommentOnly: boolean;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  products?: PosProduct[]; // ✅ إضافة هذا الحقل
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  selectedOptions?: SelectedOption[]; // إضافة الخيارات المختارة
  notes?: string;
    isExtra?: boolean;        // جديد
  isWithout?: boolean;      // جديد
  parentItemId?: string;    // جديد - للربط بالمنتج الأصلي
  subItems?: SubItem[]; // جديد - للعناصر الفرعية
  discountPercentage?: number; // جديد
  discountAmount?: number; // جديد
}


export interface SubItem {
  id: string;
  type: 'option' | 'extra' | 'without';
  name: string;
  quantity: number;
  price: number;
  isRequired?: boolean; // للمجموعات المطلوبة
  groupId?: string; // للمجموعات
  productId?: string; // للإضافات/بدون
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}