
===== src/Pages/pos/newSales/CategorySidebar.tsx =====
import React from 'react';
import { CategoryItem } from './types/PosSystem';

interface CategorySidebarProps {
  categories: CategoryItem[];
  selectedCategory: string;
  onCategorySelect: (categoryId: string) => void;
  className?: string;
  style?: React.CSSProperties;
}

const CategorySidebar: React.FC<CategorySidebarProps> = ({
  categories,
  selectedCategory,
  onCategorySelect,
  className = '',
  style
}) => {
  return (
    <div className={`flex flex-col gap-4 overflow-y-auto invisible-scroll ${className}`} style={style}>
      {categories.map((category) => (
        <button
          key={category.id}
          onClick={() => onCategorySelect(category.id)}
          className="transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-blue flex-shrink-0 flex flex-col items-center justify-center"
          style={{ 
            width: '100%',
            background: 'white',
            borderRadius: 16,
            border: category.id === selectedCategory ? '2px #0373ED solid' : '2px transparent solid',
            minHeight: 'min(12vh, 120px)',
            padding: 'min(1vh, 12px)'
          }}
        >
          <div style={{ 
            width: 'min(3vw, 48px)', 
            height: 'min(3vw, 48px)',
            marginBottom: 'min(0.5vh, 8px)'
          }}>
            <img
              src={category.image}
              alt={category.name}
              className="w-full h-full object-contain"
            />
          </div>
          <span 
            className="font-cairo font-normal text-primary text-center"
            style={{ 
              fontSize: 'clamp(14px, 1.2vw, 18px)', // تكبير الخط من 12px إلى 14-18px
              lineHeight: 'clamp(18px, 1.5vw, 24px)',
              fontWeight: '600' // جعل الخط أكثر وضوحاً
            }}
          >
            {category.nameArabic}
          </span>
        </button>
      ))}
    </div>
  );
};

export default CategorySidebar;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
import React, { useState } from 'react';
import Dropdown from '../ui/Dropdown';
import { useResponsiveDimensions } from '../../hooks/useResponsiveScale';

const Header: React.FC = () => {
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');
  const { responsive, responsivePX } = useResponsiveDimensions();

  const orderTypes = ['Takeaway', 'Dine In', 'Delivery'];

  return (
    <header className="w-full bg-card shadow-sm h-full">
      <div 
        className="w-full h-full flex items-center" 
        style={{ padding: `0 ${responsivePX(24)}` }}
      >
        <div className="flex items-center justify-between w-full">
          {/* Logo */}
          <div className="flex items-center">
            <img
              src="/images/img_foodify_logo_2_78x166.png"
              alt="Foodify Logo"
              className="object-contain"
              style={{ 
                width: responsivePX(120), 
                height: responsivePX(56) 
              }}
            />
          </div>

          {/* Right Section */}
          <div 
            className="flex items-center" 
            style={{ gap: responsivePX(16) }}
          >
            <button 
              className="flex items-center gap-2 text-blue font-nunito font-medium hover:opacity-80 transition-opacity"
              style={{ fontSize: responsivePX(14) }}
            >
              <img 
                src="/images/img_sending_order.svg" 
                alt="" 
                style={{ 
                  width: responsivePX(20), 
                  height: responsivePX(20) 
                }}
              />
              Today Orders
            </button>
            
            <button 
              className="flex items-center gap-2 text-primary font-nunito font-medium hover:opacity-80 transition-opacity"
              style={{ fontSize: responsivePX(14) }}
            >
              <img 
                src="/images/img_table_02.svg" 
                alt="" 
                style={{ 
                  width: responsivePX(20), 
                  height: responsivePX(20) 
                }}
              />
              Table
            </button>
            
            <button 
              className="flex items-center gap-2 text-primary font-nunito font-medium hover:opacity-80 transition-opacity"
              style={{ fontSize: responsivePX(14) }}
            >
              <img 
                src="/images/img_discount_tag_01.svg" 
                alt="" 
                style={{ 
                  width: responsivePX(20), 
                  height: responsivePX(20) 
                }}
              />
              Discount
            </button>
            
            <button 
              className="flex items-center gap-2 text-primary font-nunito font-medium hover:opacity-80 transition-opacity"
              style={{ fontSize: responsivePX(14) }}
            >
              <img 
                src="/images/img_delete_01.svg" 
                alt="" 
                style={{ 
                  width: responsivePX(20), 
                  height: responsivePX(20) 
                }}
              />
              Void
            </button>
            
            <div style={{ width: responsivePX(160) }}>
              <div style={{ fontSize: responsivePX(16) }}>
                <Dropdown
                  placeholder="Takeaway"
                  options={orderTypes}
                  value={selectedOrderType}
                  onChange={setSelectedOrderType}
                  rightImage={{
                    src: "/images/img_arrowdown.svg",
                    width: responsive(24),
                    height: responsive(24)
                  }}
                />
              </div>
            </div>
            
            <button 
              className="hover:bg-gray-100 rounded-lg transition-colors"
              style={{ padding: responsivePX(8) }}
            >
              <img 
                src="/images/img_menu_01.svg" 
                alt="Menu" 
                style={{ 
                  width: responsivePX(28), 
                  height: responsivePX(28) 
                }}
              />
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/hooks/useResponsiveScale.ts =====
import { useState, useEffect, useCallback } from 'react';

interface ResponsiveConfig {
  baseWidth: number;
  baseHeight: number;
  minScale: number;
  maxScale: number;
}

export const useResponsiveScale = (config: ResponsiveConfig = {
  baseWidth: 2000,
  baseHeight: 1400,
  minScale: 0.4,
  maxScale: 2.0
}) => {
  const [scale, setScale] = useState(1);
  const [dimensions, setDimensions] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });

  const updateScale = useCallback(() => {
    const currentWidth = window.innerWidth;
    const currentHeight = window.innerHeight;
    
    // تجنب التحديث إذا لم تتغير الأبعاد
    if (currentWidth === dimensions.width && currentHeight === dimensions.height) {
      return;
    }
    
    const widthScale = currentWidth / config.baseWidth;
    const heightScale = currentHeight / config.baseHeight;
    const newScale = Math.min(widthScale, heightScale);
    const finalScale = Math.max(config.minScale, Math.min(config.maxScale, newScale));
    
    setDimensions({ width: currentWidth, height: currentHeight });
    setScale(finalScale);
    
    // تحديث CSS variable
    document.documentElement.style.setProperty('--responsive-scale', finalScale.toString());
  }, [config.baseWidth, config.baseHeight, config.minScale, config.maxScale, dimensions.width, dimensions.height]);

  useEffect(() => {
    updateScale();

    window.addEventListener('resize', updateScale);
    window.addEventListener('orientationchange', updateScale);
    
    return () => {
      window.removeEventListener('resize', updateScale);
      window.removeEventListener('orientationchange', updateScale);
    };
  }, [updateScale]);

  return { scale, dimensions };
};

// Hook للحصول على أبعاد متجاوبة
export const useResponsiveDimensions = () => {
  const { scale } = useResponsiveScale();
  
  const responsive = useCallback((value: number) => value * scale, [scale]);
  const responsiveVW = useCallback((value: number) => `${value * scale}vw`, [scale]);
  const responsiveVH = useCallback((value: number) => `${value * scale}vh`, [scale]);
  const responsivePX = useCallback((value: number) => `${value * scale}px`, [scale]);
  
  return { responsive, responsiveVW, responsiveVH, responsivePX, scale };
};

===== src/Pages/pos/newSales/index.tsx =====
import React, { useState, useCallback, useMemo } from 'react';
import Header from './components/common/Header';
import { ChipView, ChipItem } from './components/ui/ChipView';
import SearchView from './components/ui/SearchView';
import NumericKeypad from './NumericKeypad';
import MenuGrid from './MenuGrid';
import CategorySidebar from './CategorySidebar';
import OrderSummaryPanel from './OrderSummaryPanel';
import { MenuItem, CategoryItem, OrderSummary } from './types/PosSystem';
import './styles/index.css';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('0');
  const [selectedCategory, setSelectedCategory] = useState('crepe');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);

  // Mock data - استخدام useMemo للبيانات الثابتة
  const categories: CategoryItem[] = useMemo(() => [
    { id: 'crepe', name: 'Crepe', nameArabic: 'كريب', image: '/images/img_crepes_1.png', selected: true },
    { id: 'burger', name: 'Burger', nameArabic: 'برجر', image: '/images/img_burger_1.png' },
    { id: 'fries', name: 'Fries', nameArabic: 'بطاطس', image: '/images/img_french_fries_1.png' },
    { id: 'pasta', name: 'Pasta', nameArabic: 'باستا', image: '/images/img_pasta_1.png' },
    { id: 'pizza', name: 'Pizza', nameArabic: 'بيتزا', image: '/images/img_pizza_1.png' },
    { id: 'drinks', name: 'Drinks', nameArabic: 'مشروبات', image: '/images/img_drinks_1.png' },
    { id: 'desserts', name: 'Desserts', nameArabic: 'حلويات', image: '/images/img_desserts_1.png' },
  ], []);

  const menuItems: MenuItem[] = useMemo(() => [
    { id: '1', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462.png', category: 'crepe' },
    { id: '2', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_186x194.png', category: 'crepe' },
    { id: '3', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_1.png', category: 'crepe' },
    { id: '4', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_2.png', category: 'crepe' },
    { id: '5', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_3.png', category: 'crepe' },
    { id: '6', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_4.png', category: 'crepe' },
    { id: '7', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_5.png', category: 'crepe' },
    { id: '8', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_6.png', category: 'crepe' },
    { id: '9', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_7.png', category: 'crepe' },
    { id: '10', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_8.png', category: 'crepe' },
    { id: '11', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_9.png', category: 'crepe' },
    { id: '12', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_10.png', category: 'crepe' },
    { id: '13', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_11.png', category: 'crepe' },
    { id: '14', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_12.png', category: 'crepe' },
    { id: '15', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_13.png', category: 'crepe' },
    { id: '16', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_6.png', category: 'crepe' },
    { id: '17', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_14.png', category: 'crepe' },
    { id: '18', name: 'Crepe', nameArabic: 'كريب فراخ', price: 100, image: '/images/img_rectangle_34624462_15.png', category: 'crepe' },
  ], []);

  const orderSummary: OrderSummary = useMemo(() => ({
    items: [
      {
        id: '1',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '2',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '3',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      },
      {
        id: '4',
        menuItem: menuItems[0],
        quantity: 2,
        extras: [{ name: 'Extra cheese', nameArabic: 'جبنة إضافية', price: 20, quantity: 2 }],
        totalPrice: 100
      }
    ],
    subtotal: 250,
    discount: 20,
    tax: 50,
    service: 70,
    total: 320
  }), [menuItems]);

  // Event handlers - استخدام useCallback لمنع إعادة إنشاء الدوال
  const handleNumberClick = useCallback((number: string) => {
    if (keypadValue === '0' && number !== '.') {
      setKeypadValue(number);
    } else {
      setKeypadValue(prev => prev + number);
    }
  }, [keypadValue]);

  const handleClearClick = useCallback(() => {
    setKeypadValue('0');
  }, []);

  const handleMenuItemClick = useCallback((item: MenuItem) => {
    console.log('Menu item clicked:', item);
  }, []);

  const handleCategorySelect = useCallback((categoryId: string) => {
    setSelectedCategory(categoryId);
  }, []);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  const handleRemoveItem = useCallback((itemId: string) => {
    console.log('Remove item:', itemId);
  }, []);

  const handleSendOrder = useCallback(() => {
    console.log('Send order');
  }, []);

  const handlePrintOrder = useCallback(() => {
    console.log('Print order');
  }, []);

  const handlePayOrder = useCallback(() => {
    console.log('Pay order');
  }, []);

  // تصفية العناصر باستخدام useMemo
  const filteredMenuItems = useMemo(() => 
    menuItems.filter(item => 
      item.category === selectedCategory &&
      (item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       item.nameArabic.includes(searchQuery))
    ), [menuItems, selectedCategory, searchQuery]
  );

  return (
    <div className="h-screen w-screen bg-main flex flex-col" style={{ minWidth: '1024px', overflow: 'hidden' }}>
      {/* Header - ثابت في الأعلى */}
      <div className="flex-shrink-0" style={{ height: '6vh' }}>
        <Header />
      </div>
      
      {/* Main Content - يأخذ باقي المساحة */}
      <div className="flex-1 flex" style={{ height: '94vh', overflow: 'hidden' }}>
        {/* Left Section - Main Content - 70% */}
        <div className="flex flex-col" style={{ width: '70vw', overflow: 'hidden' }}>
          {/* Numeric Keypad - ثابت الشكل والحجم */}
{/* Numeric Keypad - مع مسافة معقولة */}
<div 
  className="flex-shrink-0 numeric-keypad" 
  style={{ 
    height: '15%', 
    padding: 'min(1vw, 16px)',
    marginBottom: 'clamp(8px, 1.5vw, 20px)' // مسافة معقولة في جميع الأبعاد
  }}
>
  <NumericKeypad
    onNumberClick={handleNumberClick}
    onClearClick={handleClearClick}
    currentValue={keypadValue}
  />
</div>

{/* Filter Chips and Search - بدون مسافة علوية إضافية */}
<div 
  className="flex-shrink-0" 
  style={{ 
    height: '10%', 
    padding: '0 min(1vw, 16px)',
    paddingTop: 0 // إزالة أي مسافة علوية
  }}
>
  <div className="flex items-center justify-between gap-4 h-full">
    <ChipView className="flex-1">
      <ChipItem
        variant="extra"
        leftImage={{ src: '/images/img_addcircle.svg', width: 24, height: 24 }}
        selected={selectedChips.includes('extra')}
        onClick={() => handleChipClick('extra')}
      >
        Extra
      </ChipItem>
      <ChipItem
        variant="without"
        leftImage={{ src: '/images/img_removecircle.svg', width: 24, height: 24 }}
        selected={selectedChips.includes('without')}
        onClick={() => handleChipClick('without')}
      >
        Without
      </ChipItem>
      <ChipItem
        variant="offer"
        leftImage={{ src: '/images/img_tags.svg', width: 24, height: 24 }}
        selected={selectedChips.includes('offer')}
        onClick={() => handleChipClick('offer')}
      >
        Offer
      </ChipItem>
    </ChipView>

    <div className="flex items-center gap-2">
      <SearchView
        placeholder="Search"
        value={searchQuery}
        onChange={setSearchQuery}
        leftImage={{ src: '/images/img_search01.svg', width: 20, height: 20 }}
        className="w-80"
      />
      <button className="p-4 bg-primary-blue rounded-lg hover:opacity-90 transition-opacity focus:outline-none focus:ring-2 focus:ring-primary-blue">
        <img src="/images/img_group_7.svg" alt="Filter" className="w-6 h-6" />
      </button>
    </div>
  </div>
</div>

          {/* Menu Grid - يأخذ باقي المساحة مع scroll مخفي */}
          <div className="flex-1" style={{ 
            height: '75%', 
            padding: '0 min(1vw, 16px) min(1vw, 16px)',
            overflow: 'hidden'
          }}>
            <MenuGrid
              items={filteredMenuItems}
              onItemClick={handleMenuItemClick}
              className="h-full invisible-scroll"
            />
          </div>
        </div>

        {/* Category Sidebar - 10% مع scroll مخفي */}
        <div className="flex-shrink-0" style={{ 
          width: '10vw',
          overflow: 'hidden'
        }}>
          <CategorySidebar
            categories={categories}
            selectedCategory={selectedCategory}
            onCategorySelect={handleCategorySelect}
            className="h-full invisible-scroll"
            style={{ padding: 'min(1vw, 16px)' }}
          />
        </div>

        {/* Right Section - Order Summary - 20% بدون scroll */}
        <div className="flex-shrink-0" style={{ 
          width: '20vw', 
          padding: 'min(1vw, 16px)',
          overflow: 'hidden'
        }}>
          <OrderSummaryPanel
            orderNumber="#123"
            totalAmount="1250 EGP"
            orderSummary={orderSummary}
            customerName={customerName}
            onCustomerNameChange={setCustomerName}
            onRemoveItem={handleRemoveItem}
            onSendOrder={handleSendOrder}
            onPrintOrder={handlePrintOrder}
            onPayOrder={handlePayOrder}
            className="h-full"
          />
        </div>
      </div>
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/MenuGrid.tsx =====
import React, { useMemo } from 'react';
import { MenuItem } from './types/PosSystem';
import { useResponsiveDimensions } from './hooks/useResponsiveScale';

interface MenuGridProps {
  items: MenuItem[];
  onItemClick: (item: MenuItem) => void;
  className?: string;
}

const MenuGrid: React.FC<MenuGridProps> = ({
  items,
  onItemClick,
  className = ''
}) => {
  const { responsive, responsivePX } = useResponsiveDimensions();

  // استخدام useMemo لحساب الأبعاد مرة واحدة فقط عند تغيير scale
  const cardDimensions = useMemo(() => ({
    cardWidth: responsive(195),
    cardHeight: responsive(269),
    imageHeight: responsive(187)
  }), [responsive]);

  const { cardWidth, cardHeight, imageHeight } = cardDimensions;

  return (
    <div className={`h-full overflow-auto hidden-scroll ${className}`}>
      <div 
        className="grid gap-4 auto-rows-max justify-items-center"
        style={{ 
          gridTemplateColumns: `repeat(auto-fit, ${cardWidth}px)`,
          padding: responsivePX(8),
          gap: responsivePX(8)
        }}
      >
        {items.map((item) => (
          <button
            key={item.id}
            onClick={() => onItemClick(item)}
            className="transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-blue flex-shrink-0 relative hover:transform hover:scale-105"
            style={{ 
              width: cardWidth,
              height: cardHeight,
              borderRadius: responsive(16)
            }}
          >
            {/* باقي محتوى الكارت */}
            <div 
              style={{
                width: cardWidth,
                height: cardHeight,
                position: 'absolute',
                left: 0,
                top: 0,
                background: 'white',
                borderRadius: responsive(16),
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
              }}
            />
            
            <img
              src={item.image}
              alt={item.name}
              style={{
                width: cardWidth,
                height: imageHeight,
                position: 'absolute',
                left: 0,
                top: 0,
                borderRadius: responsive(16),
                objectFit: 'cover'
              }}
            />
            
            <div
              style={{
                position: 'absolute',
                right: responsive(8),
                top: responsive(202),
                color: 'black',
                fontSize: responsivePX(16),
                fontFamily: 'Cairo',
                fontWeight: '600',
                textAlign: 'right'
              }}
            >
              {item.nameArabic}
            </div>
            
            <div
              style={{
                position: 'absolute',
                left: responsive(8),
                top: responsive(198)
              }}
            >
              <span
                style={{
                  color: 'black',
                  fontSize: responsivePX(20),
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}
              >
                {item.price}{' '}
              </span>
              <span
                style={{
                  color: 'black',
                  fontSize: responsivePX(12),
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}
              >
                EGP
              </span>
            </div>
          </button>
        ))}
      </div>
    </div>
  );
};

export default MenuGrid;

===== src/Pages/pos/newSales/NumericKeypad.tsx =====
import React from 'react';
import { useResponsiveDimensions } from './hooks/useResponsiveScale';

interface NumericKeypadProps {
  onNumberClick: (number: string) => void;
  onClearClick: () => void;
  currentValue: string;
  className?: string;
}

const NumericKeypad: React.FC<NumericKeypadProps> = ({
  onNumberClick,
  onClearClick,
  currentValue,
  className = ''
}) => {
  const { responsive, responsivePX } = useResponsiveDimensions();
  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'];

  return (
    <section 
      className={`flex gap-2 bg-card border border-gray-300 rounded-lg overflow-hidden ${className}`}
      style={{ 
        height: responsivePX(95),
        gap: responsivePX(5)
      }}
    >
      <div 
        className="flex-grow grid grid-cols-12 h-full"
        style={{ gap: 0 }}
      >
        {numbers.map((key) => (
          <button 
            key={key}
            className="font-aleo text-primary bg-card hover:bg-gray-50 active:bg-gray-100 transition-colors duration-200 border-r border-gray-200 last:border-r-0 flex items-center justify-center"
            style={{ 
              fontSize: responsivePX(32),
              fontFamily: key === 'C' ? 'Nunito' : 'Aleo'
            }}
            onClick={() => key === 'C' ? onClearClick() : onNumberClick(key)}
          >
            {key}
          </button>
        ))}
      </div>
      
      <div 
        className="bg-primary-blue text-white font-nunito flex items-center justify-center flex-shrink-0"
        style={{ 
          width: responsivePX(247),
          fontSize: responsivePX(40),
          fontWeight: '400'
        }}
      >
        {currentValue}
      </div>
    </section>
  );
};

export default NumericKeypad;

===== src/Pages/pos/newSales/OrderSummaryPanel.tsx =====
import React from 'react';
import { OrderSummary } from './types/PosSystem';
import EditText from './components/ui/EditText';
import { useResponsiveDimensions } from './hooks/useResponsiveScale';

interface OrderSummaryPanelProps {
  orderNumber: string;
  totalAmount: string;
  orderSummary: OrderSummary;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveItem: (itemId: string) => void;
  onSendOrder: () => void;
  onPrintOrder: () => void;
  onPayOrder: () => void;
  className?: string;
}

const OrderSummaryPanel: React.FC<OrderSummaryPanelProps> = ({
  orderNumber,
  totalAmount,
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveItem,
  onSendOrder,
  onPrintOrder,
  onPayOrder,
  className = ''
}) => {
  const { responsive, responsivePX } = useResponsiveDimensions();

  return (
    <div className={`bg-card rounded-2xl shadow-sm flex flex-col h-full ${className}`}>
      {/* Header */}
      <div className="flex-shrink-0 flex items-center">
        <EditText
          placeholder={orderNumber}
          value={orderNumber}
          variant="primary"
          className="flex-1 rounded-none rounded-tl-2xl border-r-0 font-nunito font-bold"
          style={{ fontSize: responsivePX(24) }}
        />
        <div 
          className="bg-card rounded-r-2xl"
          style={{ padding: `${responsivePX(16)} ${responsivePX(24)}` }}
        >
          <span 
            className="font-nunito font-bold text-primary-blue"
            style={{ fontSize: responsivePX(20) }}
          >
            {totalAmount.split(' ')[0]}{' '}
          </span>
          <span 
            className="font-nunito font-bold text-primary-blue"
            style={{ fontSize: responsivePX(10) }}
          >
            EGP
          </span>
        </div>
      </div>

{/* Scrollable Middle: Order Details & Items - بدون scroll على كامل القسم */}
<div className="flex-1 flex flex-col min-h-0" style={{ padding: 'min(0.8vw, 12px)' }}>
  <h3 
    className="font-nunito font-bold text-primary mb-4"
    style={{ fontSize: 'min(1.2vw, 20px)' }}
  >
    Order Details
  </h3>

  {/* Customer Info - ثابت بدون scroll */}
  <div className="flex items-center gap-2 mb-4" style={{ gap: 'min(0.5vw, 8px)' }}>
    <div className="flex-1">
      <input
        type="text"
        placeholder="Walk in Customer"
        value={customerName}
        onChange={(e) => onCustomerNameChange(e.target.value)}
        className="w-full border border-gray-300 rounded font-nunito text-primary placeholder-secondary focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue"
        style={{ 
          padding: 'min(0.8vh, 12px) min(0.8vw, 12px)',
          fontSize: 'min(0.9vw, 14px)'
        }}
      />
    </div>
    <button 
      className="bg-primary-blue rounded focus:outline-none focus:ring-2 focus:ring-primary-blue"
      style={{ padding: 'min(0.5vh, 8px)' }}
    >
      <img 
        src="/images/img_group_1000004320.svg" 
        alt="Add customer" 
        style={{ width: 'min(1.5vw, 24px)', height: 'min(1.5vw, 24px)' }}
      />
    </button>
  </div>

{/* Products List - فقط هذا الجزء له scroll مع خط أكبر */}
<div 
  className="order-products-list flex-1 overflow-auto"
  style={{ 
    maxHeight: 'min(40vh, 300px)',
    marginBottom: 'min(1vh, 16px)'
  }}
>
  {orderSummary.items.map((item) => (
    <div key={item.id}>
      <div 
        className="flex items-start justify-between py-1"
        style={{ padding: 'min(0.4vh, 6px) 0' }} // زيادة المسافة قليلاً
      >
        <div 
          className="flex items-start gap-4 flex-1"
          style={{ gap: 'min(1vw, 16px)' }}
        >
          <button
            onClick={() => onRemoveItem(item.id)}
            className="mt-1 p-1 hover:bg-gray-100 rounded transition-colors"
            style={{ padding: 'min(0.3vh, 4px)' }}
          >
            <img 
              src="/images/img_delete_02.svg" 
              alt="Remove" 
              style={{ width: 'min(1vw, 14px)', height: 'min(1vw, 14px)' }} // تكبير أيقونة الحذف
            />
          </button>
          <div className="flex-1">
            <p 
              className="font-nunito font-semibold text-primary"
              style={{ 
                fontSize: 'clamp(14px, 1.2vw, 18px)', // تكبير من 12px إلى 14-18px
                lineHeight: 'clamp(18px, 1.5vw, 24px)',
                marginBottom: 'min(0.5vh, 6px)'
              }}
            >
              {item.quantity} X {item.menuItem.name}
            </p>
            {item.extras.map((extra, index) => (
              <div 
                key={index} 
                className="text-secondary mt-1" 
                style={{ 
                  fontSize: 'clamp(12px, 1vw, 16px)', // تكبير من 10px إلى 12-16px
                  lineHeight: 'clamp(16px, 1.3vw, 20px)',
                  marginTop: 'min(0.4vh, 6px)'
                }}
              >
                <span>{extra.quantity} X {extra.name} ({extra.price})</span>
                <span 
                  className="ml-8"
                  style={{ marginLeft: 'min(2vw, 32px)' }}
                >
                  {extra.price * extra.quantity}
                </span>
              </div>
            ))}
          </div>
        </div>
        <div className="text-right">
          <p 
            className="font-nunito font-semibold text-primary"
            style={{ 
              fontSize: 'clamp(14px, 1.2vw, 18px)', // تكبير من 12px إلى 14-18px
              lineHeight: 'clamp(18px, 1.5vw, 24px)',
              marginBottom: 'min(0.3vh, 4px)'
            }}
          >
            {item.menuItem.price * item.quantity}
          </p>
          <p 
            className="font-nunito font-semibold text-primary-blue"
            style={{ 
              fontSize: 'clamp(14px, 1.2vw, 18px)', // تكبير من 12px إلى 14-18px
              lineHeight: 'clamp(18px, 1.5vw, 24px)'
            }}
          >
            {item.totalPrice}
          </p>
        </div>
      </div>
      <div 
        className="h-px bg-gray-200"
        style={{ height: 'min(0.1vh, 1px)' }}
      />
    </div>
  ))}
</div>
</div>

      {/* Fixed Summary at Bottom */}
      <div 
        className="flex-shrink-0 border-t"
        style={{ padding: responsivePX(16) }}
      >
        <div 
          className="space-y-2"
          style={{ gap: responsivePX(8) }}
        >
          {[
            { label: 'Sub Total', value: orderSummary.subtotal },
            { label: 'Discount',  value: orderSummary.discount },
            { label: 'Tax',       value: orderSummary.tax },
            { label: 'Service',   value: orderSummary.service }
          ].map(item => (
            <div key={item.label} className="flex justify-between items-center">
              <span 
                className="font-nunito font-medium text-primary"
                style={{ fontSize: responsivePX(12) }}
              >
                {item.label}
              </span>
              <span 
                className="font-nunito font-bold text-primary"
                style={{ fontSize: responsivePX(12) }}
              >
                {item.value} <span style={{ fontSize: responsivePX(12) }}>EGP</span>
              </span>
            </div>
          ))}
        </div>

        <div 
          className="h-px bg-gray-400 my-4"
          style={{ 
            height: responsivePX(1),
            margin: `${responsivePX(16)} 0`
          }}
        />

        <div className="flex justify-between items-center">
          <span 
            className="font-nunito font-bold text-primary"
            style={{ fontSize: responsivePX(16) }}
          >
            Total
          </span>
          <span 
            className="font-nunito font-bold text-primary"
            style={{ fontSize: responsivePX(16) }}
          >
            {orderSummary.total} <span style={{ fontSize: responsivePX(14) }}>EGP</span>
          </span>
        </div>
      </div>

      {/* Fixed Action Buttons */}
      <div 
        className="flex-shrink-0"
        style={{ padding: responsivePX(16) }}
      >
        <div 
          className="grid grid-cols-3 gap-4"
          style={{ gap: responsivePX(16) }}
        >
          {[
            { onClick: onSendOrder,  bg: 'bg-primary-red',   icon: '/images/img_tabler_send.svg',    label: 'Send' },
            { onClick: onPrintOrder, bg: 'bg-primary-blue',  icon: '/images/img_printer.svg',       label: 'Print' },
            { onClick: onPayOrder,   bg: 'bg-primary-green', icon: '/images/img_payment_02.svg',    label: 'Pay' }
          ].map(btn => (
            <button
              key={btn.label}
              onClick={btn.onClick}
              className={`flex flex-col items-center justify-center ${btn.bg} rounded text-white focus:outline-none hover:opacity-90 transition-opacity`}
              style={{ 
                padding: responsivePX(16),
                borderRadius: responsivePX(8)
              }}
            >
              <img 
                src={btn.icon} 
                alt={btn.label} 
                className="mb-1"
                style={{ 
                  width: responsivePX(20), 
                  height: responsivePX(20),
                  marginBottom: responsivePX(4)
                }}
              />
              <span 
                className="font-nunito font-bold"
                style={{ fontSize: responsivePX(18) }}
              >
                {btn.label}
              </span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default OrderSummaryPanel;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/index.css =====
@import './tailwind.css';
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Aleo:wght@400;700&display=swap');

:root {
  /* فرض Light Mode فقط */
  color-scheme: light only;
  
  /* الألوان الثابتة للـ Light Mode */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-card: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.5);
  --border-color-light: rgba(0, 0, 0, 0.2);
  --border-color-medium: rgba(0, 0, 0, 0.3);
}

/* فرض LTR على جميع العناصر */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  direction: ltr !important;
  text-align: left !important;
}

/* فرض LTR على HTML و Body */
html {
  direction: ltr !important;
  text-align: left !important;
  color-scheme: light only !important;
}

body {
  font-family: 'Nunito', 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  direction: ltr !important;
  text-align: left !important;
  /* فرض الألوان الثابتة */
  background-color: var(--bg-main) !important;
  color: var(--text-primary) !important;
}

/* منع أي تأثير للـ Dark Mode أو RTL */
* {
  color-scheme: light only !important;
  direction: ltr !important;
}

/* فرض LTR على جميع عناصر النص */
p, span, div, h1, h2, h3, h4, h5, h6, input, button, label {
  direction: ltr !important;
  text-align: left !important;
}

/* استثناء للنصوص العربية فقط - محاذاة وسط أو يمين حسب الحاجة */
.arabic-text {
  text-align: center !important;
  direction: ltr !important; /* الاتجاه يبقى LTR */
}

/* إخفاء الـ scrollbar تماماً مع الاحتفاظ بوظيفة الـ scroll */
.invisible-scroll {
  overflow-y: auto;
  overflow-x: hidden;
  
  /* إخفاء scrollbar في Firefox */
  scrollbar-width: none;
  
  /* إخفاء scrollbar في Internet Explorer and Edge */
  -ms-overflow-style: none;
  
  /* تمكين smooth scrolling */
  scroll-behavior: smooth;
  
  /* تحسين الأداء على الأجهزة اللوحية */
  -webkit-overflow-scrolling: touch;
  
  /* فرض LTR */
  direction: ltr !important;
}

/* إخفاء scrollbar في WebKit browsers (Chrome, Safari, Opera) */
.invisible-scroll::-webkit-scrollbar {
  display: none;
  width: 0;
  height: 0;
  background: transparent;
}

/* تأكد من عدم ظهور أي scrollbar حتى عند التفاعل */
.invisible-scroll::-webkit-scrollbar-track {
  display: none;
}

.invisible-scroll::-webkit-scrollbar-thumb {
  display: none;
}

.invisible-scroll::-webkit-scrollbar-corner {
  display: none;
}

/* إزالة أي margin أو padding قد يسبب scroll غير مرغوب فيه */
.invisible-scroll > * {
  margin: 0;
}

/* تحسين الأداء للعناصر الطويلة */
.invisible-scroll {
  contain: layout style paint;
  will-change: scroll-position;
}

/* ضبط المسافة بين NumericKeypad و Filter Chips */
.numeric-keypad {
  margin-bottom: clamp(8px, 1.5vw, 20px) !important;
}

/* تحسين scroll للمنتجات فقط في Order Details */
.order-products-list {
  overflow-y: auto;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  direction: ltr !important;
}

.order-products-list::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
  width: 0;
  height: 0;
  background: transparent;
}

/* تحسين خطوط الفئات */
.category-name-enhanced {
  font-size: clamp(14px, 1.2vw, 18px) !important;
  line-height: clamp(18px, 1.5vw, 24px) !important;
  font-weight: 600 !important;
  text-align: center !important;
  word-wrap: break-word;
  overflow-wrap: break-word;
  direction: ltr !important;
}

/* تحسين خطوط المنتجات في Order Details */
.order-item-name-enhanced {
  font-size: clamp(14px, 1.2vw, 18px) !important;
  line-height: clamp(18px, 1.5vw, 24px) !important;
  font-weight: 600 !important;
  margin-bottom: 6px;
  direction: ltr !important;
  text-align: left !important;
}

.order-item-extras-enhanced {
  font-size: clamp(12px, 1vw, 16px) !important;
  line-height: clamp(16px, 1.3vw, 20px) !important;
  margin-top: 6px;
  direction: ltr !important;
  text-align: left !important;
}

.order-item-price-enhanced {
  font-size: clamp(14px, 1.2vw, 18px) !important;
  line-height: clamp(18px, 1.5vw, 24px) !important;
  font-weight: 600 !important;
  direction: ltr !important;
  text-align: left !important;
}

/* NumericKeypad Styles */
.numpad-section {
  display: flex;
  gap: 5px;
  background-color: var(--bg-card);
  border: 1px solid var(--border-color-medium);
  border-radius: 8px;
  height: 95px;
  overflow: hidden;
  flex-shrink: 0;
  direction: ltr !important;
}

.numpad-grid {
  flex-grow: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  height: 100%;
  direction: ltr !important;
}

.numpad-key {
  font-family: 'Aleo', serif;
  font-size: 32px;
  border-right: 1px solid var(--border-color-light);
  color: var(--text-primary);
  background: var(--bg-card);
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  border-radius: 0;
  direction: ltr !important;
  text-align: center !important;
}

.numpad-key:hover {
  background-color: #f8f9fa;
}

.numpad-key:active {
  background-color: #e9ecef;
}

.numpad-key:last-child {
  font-family: 'Nunito', sans-serif;
  border-right: none;
}

.numpad-display {
  background-color: var(--primary-blue);
  color: white;
  font-family: 'Nunito', sans-serif;
  font-size: 40px;
  font-weight: 400;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 247px;
  flex-shrink: 0;
  direction: ltr !important;
  text-align: center !important;
}

/* Smooth Transitions */
* {
  transition: all 0.2s ease;
}

/* Responsive Images */
img {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Button Hover Effects */
button {
  cursor: pointer;
  transition: all 0.2s ease;
  direction: ltr !important;
}

button:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

button:active {
  transform: translateY(0);
}

/* Focus States */
button:focus,
input:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(3, 115, 237, 0.3);
}

/* Input Elements */
input {
  direction: ltr !important;
  text-align: left !important;
}

/* فرض Light Mode */
.force-light-mode {
  color-scheme: light only !important;
  background-color: var(--bg-main) !important;
  color: var(--text-primary) !important;
  direction: ltr !important;
}

/* للشاشات الصغيرة */
@media (max-width: 768px) {
  .numeric-keypad {
    margin-bottom: clamp(6px, 1.2vw, 16px) !important;
  }
  
  .order-products-list {
    max-height: min(35vh, 250px) !important;
  }
  
  .category-name-enhanced {
    font-size: clamp(16px, 2vw, 20px) !important;
    line-height: clamp(20px, 2.5vw, 26px) !important;
  }
  
  .order-item-name-enhanced {
    font-size: clamp(16px, 2vw, 20px) !important;
    line-height: clamp(20px, 2.5vw, 26px) !important;
  }
  
  .order-item-extras-enhanced {
    font-size: clamp(14px, 1.8vw, 18px) !important;
    line-height: clamp(18px, 2.2vw, 22px) !important;
  }
  
  .order-item-price-enhanced {
    font-size: clamp(16px, 2vw, 20px) !important;
    line-height: clamp(20px, 2.5vw, 26px) !important;
  }
  
  .numpad-section {
    height: 80px;
  }
  
  .numpad-key {
    font-size: 24px;
  }
  
  .numpad-display {
    font-size: 32px;
    width: 200px;
  }
}

/* للشاشات الكبيرة جداً */
@media (min-width: 1920px) {
  .numeric-keypad {
    margin-bottom: 20px !important;
  }
  
  .order-products-list {
    max-height: min(45vh, 350px) !important;
  }
  
  .category-name-enhanced {
    font-size: 18px !important;
    line-height: 24px !important;
  }
  
  .order-item-name-enhanced {
    font-size: 18px !important;
    line-height: 24px !important;
  }
  
  .order-item-extras-enhanced {
    font-size: 16px !important;
    line-height: 20px !important;
  }
  
  .order-item-price-enhanced {
    font-size: 18px !important;
    line-height: 24px !important;
  }
}

/* Media Queries للشاشات الصغيرة جداً */
@media (max-width: 480px) {
  .pos-system-container {
    min-width: 320px;
  }
  
  .numpad-section {
    height: 60px;
    gap: 4px;
  }
  
  .numpad-key {
    font-size: 18px;
  }
  
  .numpad-display {
    font-size: 24px;
    width: 150px;
  }
}

/* Media Queries للشاشات الكبيرة */
@media (min-width: 2560px) {
  .pos-system-container {
    max-width: 2560px;
    margin: 0 auto;
  }
}

/* Print Styles */
@media print {
  .pos-system-container {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
  
  * {
    direction: ltr !important;
  }
}

/* High DPI Screens */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  img {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }
}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}

/* Loading State */
.loading {
  opacity: 0.7;
  pointer-events: none;
}

/* Error State */
.error {
  border-color: var(--primary-red) !important;
  background-color: rgba(229, 57, 53, 0.1) !important;
}

/* Success State */
.success {
  border-color: var(--primary-green) !important;
  background-color: rgba(35, 169, 41, 0.1) !important;
}

/* منع أي RTL styles */
[dir="rtl"], .rtl {
  direction: ltr !important;
  text-align: left !important;
}

/* فرض LTR على Flexbox */
.flex {
  direction: ltr !important;
}

/* فرض LTR على Grid */
.grid {
  direction: ltr !important;
}

/* تأكيد إضافي لمنع RTL */
html[dir="rtl"], 
body[dir="rtl"], 
*[dir="rtl"] {
  direction: ltr !important;
  text-align: left !important;
}

/* فرض LTR على جميع العناصر المخصصة */
.pos-system-container,
.pos-system-container * {
  direction: ltr !important;
}

/* استثناءات للنصوص العربية - محاذاة فقط */
.category-name,
.product-name-arabic,
.order-item-arabic {
  text-align: center !important;
  direction: ltr !important; /* الاتجاه يبقى LTR */
}

===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
export interface MenuItem {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  image: string;
  category: string;
}

export interface OrderItem {
  id: string;
  menuItem: MenuItem;
  quantity: number;
  extras: OrderExtra[];
  totalPrice: number;
}

export interface OrderExtra {
  name: string;
  nameArabic: string;
  price: number;
  quantity: number;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  selected?: boolean;
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}