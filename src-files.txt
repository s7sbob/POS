
===== src/App.css =====
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

===== src/App.tsx =====
// File: src/App.tsx
import { CssBaseline, ThemeProvider } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { ThemeSettings } from './theme/Theme';
import RTL from './layouts/full/shared/customizer/RTL';
import { RouterProvider } from 'react-router';
import router from './routes/Router';
import { AppState } from './store/Store';
import { useEffect, useRef } from 'react';
import { useDispatch } from 'src/store/Store';
import { setLanguage, setDir } from './store/customizer/CustomizerSlice';
import { useTranslation } from 'react-i18next';
import Cookies from 'js-cookie';
import { AuthProvider } from './contexts/AuthContext';
import { ErrorProvider } from './contexts/ErrorContext';
import GlobalPrintHandler from './components/GlobalPrintHandler';

function App() {
  const theme = ThemeSettings();
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();
  const { i18n } = useTranslation();
  const isInitialized = useRef(false);

  const thermalPrinterConfig = {
    enabled: localStorage.getItem('thermal_printer_enabled') === 'true',
    type: (localStorage.getItem('thermal_printer_type') as 'usb' | 'network') || 'usb',
    networkConfig: {
      ip: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
      port: Number(localStorage.getItem('thermal_printer_port')) || 9100
    }
  };

  useEffect(() => {
    if (isInitialized.current) return;
    
    const savedLanguage = Cookies.get('language');
    const savedDirection = Cookies.get('direction');
    
    if (savedLanguage && savedLanguage.trim() !== '') {
      dispatch(setLanguage(savedLanguage));
      i18n.changeLanguage(savedLanguage);
      document.documentElement.lang = savedLanguage;
    } else {
      const defaultLang = 'en';
      dispatch(setLanguage(defaultLang));
      i18n.changeLanguage(defaultLang);
      document.documentElement.lang = defaultLang;
      Cookies.set('language', defaultLang, { expires: 365 });
    }
    
    if (savedDirection && savedDirection.trim() !== '') {
      dispatch(setDir(savedDirection));
      document.documentElement.dir = savedDirection;
    } else {
      const defaultDir = 'ltr';
      dispatch(setDir(defaultDir));
      document.documentElement.dir = defaultDir;
      Cookies.set('direction', defaultDir, { expires: 365 });
    }
    
    isInitialized.current = true;
  }, []);

  const themeWithDirection = {
    ...theme,
    direction: customizer.activeDir,
  };

  return (
    <ThemeProvider theme={themeWithDirection}>
      <RTL>
        <CssBaseline />
        <ErrorProvider>
          <AuthProvider>
            <GlobalPrintHandler thermalPrinterConfig={thermalPrinterConfig}>
              <RouterProvider router={router} />
            </GlobalPrintHandler>
          </AuthProvider>
        </ErrorProvider>
      </RTL>
    </ThemeProvider>
  );
}

export default App;

===== src/components/apps/blog/BlogCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';

// third-party
import { format } from 'date-fns';
import { Link } from 'react-router';
import { useDispatch } from 'src/store/Store';
import {
  CardContent,
  Stack,
  Avatar,
  Typography,
  CardMedia,
  Chip,
  Grid2 as Grid,
  Tooltip,
  Box,
  Skeleton
} from '@mui/material';
import { IconEye, IconMessage2, IconPoint } from '@tabler/icons-react';
import { fetchBlogPost } from 'src/store/apps/blog/BlogSlice';
import BlankCard from '../../shared/BlankCard';
import { BlogPostType } from 'src/types/apps/blog';

interface Btype {
  post: BlogPostType;
  index?: number;
}

const BlogCard = ({ post }: Btype) => {
  const dispatch = useDispatch();
  const { coverImg, title, view, comments, category, author, createdAt }: any = post;
  const linkTo = title
    .toLowerCase()
    .replace(/ /g, '-')
    .replace(/[^\w-]+/g, '');

  // skeleton
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<Grid
      display="flex"
      alignItems="stretch"
      size={{
        xs: 12,
        lg: 4,
        md: 4,
        sm: 6
      }}>
      {isLoading ? (
        <>
          <Skeleton
            animation="wave"
            variant="rectangular"
            width="100%"
            height={400}
            sx={{ borderRadius: (theme) => theme.shape.borderRadius / 5 }}
          ></Skeleton>
        </>
      ) : (
        <BlankCard className="hoverCard">
          <>
            <Typography
              component={Link}
              to={`/frontend-pages/blog/detail/${linkTo}`}
              onClick={() => dispatch(fetchBlogPost(linkTo))}
            >
              <CardMedia component="img" height="240" image={coverImg} alt="green iguana" />
            </Typography>
            <CardContent>
              <Stack direction="row" sx={{ marginTop: '-45px' }}>
                <Tooltip title={author?.name} placement="top">
                  <Avatar aria-label="recipe" src={author?.avatar}></Avatar>
                </Tooltip>
                <Chip
                  sx={{ marginLeft: 'auto', marginTop: '-21px', backgroundColor: (theme) => theme.palette.mode === 'dark' ? theme.palette.background.default : 'white', }}
                  label="2 min Read"
                  size="small"
                ></Chip>
              </Stack>
              <Chip label={category} size="small" sx={{ marginTop: 2 }}></Chip>
              <Box my={3}>
                <Typography
                  gutterBottom
                  variant="h5"
                  color="inherit"
                  sx={{ textDecoration: 'none' }}
                  component={Link}
                  to={`/frontend-pages/blog/detail/${linkTo}`}
                  onClick={() => dispatch(fetchBlogPost(linkTo))}
                >
                  {title}
                </Typography>
              </Box>
              <Stack direction="row" gap={3} alignItems="center">
                <Stack direction="row" gap={1} alignItems="center">
                  <IconEye size="18" /> {view}
                </Stack>
                <Stack direction="row" gap={1} alignItems="center">
                  <IconMessage2 size="18" /> {comments?.length}
                </Stack>

                <Stack direction="row" ml="auto" alignItems="center">
                  <IconPoint size="16" />
                  <small>{format(new Date(createdAt), 'E, MMM d')}</small>
                </Stack>
              </Stack>
            </CardContent>
          </>
        </BlankCard>
      )}
    </Grid>)
  );
};

export default BlogCard;

===== src/components/apps/blog/BlogFeaturedCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import { useDispatch } from 'src/store/Store';
import {
  CardContent,
  Stack,
  Avatar,
  Typography,
  Chip,
  Grid2 as Grid,
  Tooltip,
  Box,
  alpha,
  styled,
  Skeleton
} from '@mui/material';
import { IconEye, IconMessage2, IconPoint } from '@tabler/icons-react';
import { format } from 'date-fns';
import { fetchBlogPost } from 'src/store/apps/blog/BlogSlice';
import BlankCard from '../../shared/BlankCard';
import { BlogPostType } from 'src/types/apps/blog';

const CoverImgStyle = styled(CardContent)({
  position: 'absolute',
  top: '0',
  left: '0',
  zIndex: 1,
  width: '100%',
  height: '100%',
  color: 'white',
});
const CoverBox = styled(Box)({
  top: 0,
  content: "''",
  width: '100%',
  height: '100%',
  position: 'absolute',
});

interface Btype {
  post: BlogPostType;
  index: number;
}

const BlogFeaturedCard = ({ post, index }: Btype) => {
  const dispatch = useDispatch();
  const { coverImg, title, view, comments, category, author, createdAt }: any = post;
  const linkTo = title
    .toLowerCase()
    .replace(/ /g, '-')
    .replace(/[^\w-]+/g, '');
  const mainPost = index === 0;

  const CoverImgBg = styled(BlankCard)({
    p: 0,
    height: '400px',
    position: 'relative',
    background: `url(${coverImg}) no-repeat center`,
    backgroundSize: 'cover',
  });

  // skeleton
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (<>
    {post ? (
      <Grid
        display="flex"
        alignItems="stretch"
        size={{
          xs: 12,
          lg: mainPost ? 8 : 4,
          md: 12,
          sm: 12
        }}>
        {isLoading ? (
          <>
            <Skeleton
              variant="rectangular"
              animation="wave"
              width="100%"
              height={400}
              sx={{ borderRadius: (theme) => theme.shape.borderRadius / 5 }}
            ></Skeleton>
          </>
        ) : (
          <CoverImgBg className="hoverCard">
            <>
              <Typography
                component={Link}
                to={`/frontend-pages/blog/detail/${linkTo}`}
                onClick={() => dispatch(fetchBlogPost(linkTo))}
              >
                <CoverBox
                  sx={{ backgroundColor: (theme) => alpha(theme.palette.grey[900], 0.6) }}
                />
              </Typography>
              <CoverImgStyle>
                <Box
                  height={'100%'}
                  display={'flex'}
                  justifyContent="space-between"
                  flexDirection="column"
                >
                  <Box>
                    <Stack direction="row">
                      <Tooltip title={author?.name} placement="top">
                        <Avatar aria-label="recipe" src={author?.avatar}></Avatar>
                      </Tooltip>
                      <Chip
                        sx={{ marginLeft: 'auto' }}
                        label={category}
                        size="small"
                        color="primary"
                      ></Chip>
                    </Stack>
                  </Box>
                  <Box>
                    <Box my={3}>
                      <Typography
                        gutterBottom
                        variant="h3"
                        color="inherit"
                        sx={{ textDecoration: 'none' }}
                        component={Link}
                        to={`/frontend-pages/blog/detail/${linkTo}`}
                        onClick={() => dispatch(fetchBlogPost(linkTo))}
                      >
                        {title}
                      </Typography>
                    </Box>
                    <Stack direction="row" gap={3} alignItems="center">
                      <Stack direction="row" gap={1} alignItems="center">
                        <IconEye size="18" /> {view}
                      </Stack>
                      <Stack direction="row" gap={1} alignItems="center">
                        <IconMessage2 size="18" /> {comments?.length}
                      </Stack>

                      <Stack direction="row" ml="auto" alignItems="center">
                        <IconPoint size="16" />
                        <small>{format(new Date(createdAt), 'E, MMM d')}</small>
                      </Stack>
                    </Stack>
                  </Box>
                </Box>
              </CoverImgStyle>
            </>
          </CoverImgBg>
        )}
      </Grid>
    ) : (
      ''
    )}
  </>);
};

export default BlogFeaturedCard;

===== src/components/apps/blog/BlogListing.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Grid2 as Grid, Pagination } from '@mui/material';
import BlogCard from './BlogCard';
import { orderBy } from 'lodash';
import { useSelector, useDispatch } from 'src/store/Store';
import { fetchBlogPosts } from 'src/store/apps/blog/BlogSlice';
import BlogFeaturedCard from './BlogFeaturedCard';
import { BlogPostType } from 'src/types/apps/blog';

const BlogListing = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchBlogPosts());
  }, [dispatch]);

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const filterBlogs = (posts: BlogPostType[], sortBy: string, _cSearch: string) => {
    // SORT BY

    if (sortBy === 'newest') {
      posts = orderBy(posts, ['createdAt'], ['desc']);
    }
    if (sortBy === 'oldest') {
      posts = orderBy(posts, ['createdAt'], ['asc']);
    }
    if (sortBy === 'popular') {
      posts = orderBy(posts, ['view'], ['desc']);
    }
    if (posts) {
      return (posts = posts.filter((t) => t.featured === false));
    }

    return posts;
  };

  const filterFeaturedpost = (posts: BlogPostType[]) => {
    return (posts = posts.filter((t) => t.featured));
  };

  const blogPosts = useSelector((state) =>
    filterBlogs(
      state.blogReducer.blogposts,
      state.blogReducer.sortBy,
      state.blogReducer.blogSearch,
    ),
  );
  const featuredPost = useSelector((state) => filterFeaturedpost(state.blogReducer.blogposts));

  return (
    (<Grid container spacing={3}>
      {featuredPost.map((post, index) => {
        return <BlogFeaturedCard index={index} post={post} key={post.title} />;
      })}
      {blogPosts.map((post) => {
        return <BlogCard post={post} key={post.id} />;
      })}
      <Grid
        mt={3}
        size={{
          lg: 12,
          sm: 12
        }}>
        <Pagination count={10} color="primary" sx={{ display: 'flex', justifyContent: 'center' }} />
      </Grid>
    </Grid>)
  );
};

export default BlogListing;

===== src/components/apps/blog/detail/BlogComment.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Stack, Avatar, Box, Typography, Tooltip, Fab, TextField, Button } from '@mui/material';
import { IconArrowBackUp, IconCircle } from '@tabler/icons-react';
import { BlogType } from 'src/types/apps/blog';

const BlogComment = ({ comment }: BlogType | any) => {
  const [showReply, setShowReply] = React.useState(false);

  return (
    <>
      <Box mt={2} p={3} sx={{ backgroundColor: 'grey.100' }}>
        <Stack direction={'row'} gap={2} alignItems="center">
          <Avatar
            alt="Remy Sharp"
            src={comment?.profile.avatar}
            sx={{ width: '33px', height: '33px' }}
          />
          <Typography variant="h6">{comment?.profile.name}</Typography>
          <Typography variant="caption" color="textSecondary">
            <>
              <IconCircle size="7" fill="" fillOpacity={'0.1'} strokeOpacity="0.1" />{' '}
              {comment?.profile.time}
            </>
          </Typography>
        </Stack>
        <Box py={2}>
          <Typography color="textSecondary">{comment?.comment}</Typography>
        </Box>
        <Stack direction="row" gap={1} alignItems="center">
          <Tooltip title="Reply" placement="top">
            <Fab size="small" color="info" onClick={() => setShowReply(!showReply)}>
              <IconArrowBackUp size="16" />
            </Fab>
          </Tooltip>
        </Stack>
      </Box>
      {comment?.replies ? (
        <>
          {comment?.replies.map((reply: BlogType | any) => {
            return (
              <Box pl={4} key={reply.comment}>
                <Box mt={2} p={3} sx={{ backgroundColor: 'grey.100' }}>
                  <Stack direction={'row'} gap={2} alignItems="center">
                    <Avatar alt="Remy Sharp" src={reply.profile.avatar} />
                    <Typography variant="h6">{reply.profile.name}</Typography>
                    <Typography variant="caption" color="textSecondary">
                      <IconCircle size="7" fill="" fillOpacity={'0.1'} strokeOpacity="0.1" />{' '}
                      {reply.profile.time}
                    </Typography>
                  </Stack>
                  <Box py={2}>
                    <Typography color="textSecondary">{reply.comment}</Typography>
                  </Box>
                </Box>
              </Box>
            );
          })}
        </>
      ) : (
        ''
      )}
      {showReply ? (
        <Box p={2}>
          <Stack direction={'row'} gap={2} alignItems="center">
            <Avatar
              alt="Remy Sharp"
              src={comment?.profile.avatar}
              sx={{ width: '33px', height: '33px' }}
            />
            <TextField placeholder="Reply" variant="outlined" fullWidth />
            <Button variant="contained">Reply</Button>
          </Stack>
        </Box>
      ) : (
        ''
      )}
    </>
  );
};

export default BlogComment;

===== src/components/apps/blog/detail/BlogDetail.tsx =====
/* eslint-disable react-hooks/exhaustive-deps */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { fetchBlogPost } from 'src/store/apps/blog/BlogSlice';
import { useLocation } from 'react-router';
import {
  CardContent,
  Stack,
  Avatar,
  Typography,
  CardMedia,
  Chip,
  Tooltip,
  Box,
  Divider,
  TextField,
  Button,
  Skeleton,
} from '@mui/material';
import { IconEye, IconMessage2, IconPoint, IconQuote } from '@tabler/icons-react';
import { format } from 'date-fns';
import BlogComment from './BlogComment';
import { uniqueId } from 'lodash';
import { addComment } from 'src/store/apps/blog/BlogSlice';
import BlankCard from '../../../shared/BlankCard';
import { AppState, useDispatch, useSelector } from 'src/store/Store';
import type { BlogPostType, BlogType } from 'src/types/apps/blog';

const BlogDetail = () => {
  const dispatch = useDispatch();
  const title = useLocation();
  const getTitle: any = title.pathname.split('/').pop();
  const [replyTxt, setReplyTxt] = React.useState('');

  useEffect(() => {
    dispatch(fetchBlogPost(getTitle));
  }, [dispatch]);

  // Get post
  const post: BlogPostType | any = useSelector((state: AppState) => state.blogReducer.selectedPost);

  const onSubmit = async (id: number, reply: string) => {
    const replyId: string = uniqueId('#comm_');
    const newReply = {
      id: replyId,
      profile: {
        id: uniqueId('#REPLY_'),
        avatar: post?.author.avatar,
        name: post?.author.name,
        time: 'now',
      },
      comment: reply,
      replies: [],
    };
    dispatch(addComment(id, newReply));
    dispatch(fetchBlogPost(getTitle));
    setReplyTxt('');
  };

  // skeleton
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    <Box>
      <BlankCard>
        <>
          {isLoading ? (
            <>
              <Skeleton
                animation="wave"
                variant="rectangular"
                width="100%"
                height={440}
                sx={{ borderRadius: (theme) => theme.shape.borderRadius / 5 }}
              ></Skeleton>
            </>
          ) : (
            <CardMedia component="img" height="440" image={post?.coverImg} alt="green iguana" />
          )}
          <CardContent>
            <Stack direction="row" sx={{ marginTop: '-45px' }}>
              <Tooltip title={post ? post?.author.name : ''} placement="top">
                <Avatar aria-label="recipe" src={post?.author.avatar}></Avatar>
              </Tooltip>
              <Chip
                sx={{
                  marginLeft: 'auto',
                  marginTop: '-21px',
                  backgroundColor: (theme) =>
                    theme.palette.mode === 'dark' ? theme.palette.background.default : 'white',
                }}
                label="2 min Read"
                size="small"
              ></Chip>
            </Stack>
            <Chip label={post?.category} size="small" sx={{ marginTop: 2 }}></Chip>
            <Box my={3}>
              <Typography
                gutterBottom
                variant="h1"
                fontWeight={600}
                color="inherit"
                sx={{ textDecoration: 'none' }}
              >
                {post?.title}
              </Typography>
            </Box>
            <Stack direction="row" gap={3} alignItems="center">
              <Stack direction="row" gap={1} alignItems="center">
                <IconEye size="18" /> {post?.view}
              </Stack>
              <Stack direction="row" gap={1} alignItems="center">
                <IconMessage2 size="18" /> {post?.comments.length}
              </Stack>

              <Stack direction="row" ml="auto" alignItems="center">
                <IconPoint size="16" />
                <small>{post ? <>{format(new Date(post.createdAt), 'E, MMM d')}</> : ''}</small>
              </Stack>
            </Stack>
          </CardContent>
          <Divider />
          <CardContent>
            <Typography variant="h2">Title of the paragraph</Typography>
            <p>
              But you cannot figure out what it is or what it can do. MTA web directory is the
              simplest way in which one can bid on a link, or a few links if they wish to do so. The
              link directory on MTA displays all of the links it currently has, and does so in
              alphabetical order, which makes it much easier for someone to find what they are
              looking for if it is something specific and they do not want to go through all the
              other sites and links as well. It allows you to start your bid at the bottom and
              slowly work your way to the top of the list.
            </p>
            <p>
              Gigure out what it is or what it can do. MTA web directory is the simplest way in
              which one can bid on a link, or a few links if they wish to do so. The link directory
              on MTA displays all of the links it currently has, and does so in alphabetical order,
              which makes it much easier for someone to find what they are looking for if it is
              something specific and they do not want to go through all the other sites and links as
              well. It allows you to start your bid at the bottom and slowly work your way to the
              top of the
            </p>
            <Typography fontWeight={600}>This is strong text.</Typography>
            <Typography fontStyle="italic">This is italic text.</Typography>
            <Box my={4}>
              <Divider />
            </Box>
            <Typography variant="h3">Unorder list.</Typography>
            <ul>
              <li>Gigure out what it is or</li>
              <li>The links it currently</li>
              <li>It allows you to start your bid</li>
              <li>Gigure out what it is or</li>
              <li>The links it currently</li>
              <li>It allows you to start your bid</li>
            </ul>
            <Box my={4}>
              <Divider />
            </Box>
            <Typography variant="h3">Order list.</Typography>
            <ol>
              <li>Gigure out what it is or</li>
              <li>The links it currently</li>
              <li>It allows you to start your bid</li>
              <li>Gigure out what it is or</li>
              <li>The links it currently</li>
              <li>It allows you to start your bid</li>
            </ol>
            <Box my={4}>
              <Divider />
            </Box>
            <Typography variant="h3">Quotes</Typography>
            <Box p={2} bgcolor="grey[100]" mt={2}>
              <Typography variant="h6">
                <IconQuote /> Life is short, Smile while you still have teeth!
              </Typography>
            </Box>
          </CardContent>
        </>
      </BlankCard>
      <BlankCard sx={{ mt: 3, p: 0 }}>
        <CardContent>
          <Typography variant="h4" fontWeight={600}>
            Post Comments
          </Typography>
          <br />
          <TextField
            rows={4}
            multiline
            fullWidth
            value={replyTxt}
            onChange={(e) => setReplyTxt(e.target.value)}
          ></TextField>
          <br />
          <br />
          <Button color="primary" variant="contained" onClick={() => onSubmit(post.id, replyTxt)}>
            Post Comment
          </Button>

          <Stack direction="row" gap={2} alignItems="center" mb={3} mt={5}>
            <Typography variant="h4" fontWeight={600}>
              Comments
            </Typography>
            <Box px={1.5} py={1} color="primary.main" bgcolor={'primary.light'}>
              <Typography variant="h6" fontWeight={600}>
                {post?.comments.length}
              </Typography>
            </Box>
          </Stack>
          <Box>
            {post?.comments?.map((comment: BlogType | any) => {
              return <BlogComment comment={comment} key={comment.profile.id} />;
            })}
          </Box>
        </CardContent>
      </BlankCard>
    </Box>
  );
};

export default BlogDetail;

===== src/components/apps/chats/ChatContent.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Typography,
  Divider,
  Avatar,
  ListItem,
  ListItemText,
  ListItemAvatar,
  IconButton,
  Box,
  Stack,
  Badge,
  useMediaQuery,
  Theme
} from '@mui/material';
import { IconDotsVertical, IconMenu2, IconPhone, IconVideo } from '@tabler/icons-react';
import { useSelector } from 'src/store/Store';

import { ChatsType } from 'src/types/apps/chat';
import { formatDistanceToNowStrict } from 'date-fns';
import ChatInsideSidebar from './ChatInsideSidebar';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';


interface ChatContentProps {
  toggleChatSidebar: () => void;
}

  const ChatContent: React.FC<ChatContentProps> = ({ toggleChatSidebar }) => {
  const [open, setOpen] = React.useState(true);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  const chatDetails: ChatsType = useSelector(
    (state) => state.chatReducer.chats[state.chatReducer.chatContent - 1],
  );

  return (
    <Box>
      {chatDetails ? (
        <Box>
          {/* ------------------------------------------- */}
          {/* Header Part */}
          {/* ------------------------------------------- */}
          <Box>
            <Box display="flex" alignItems="center" p={2}>
              <Box
                sx={{
                  display: { xs: 'block', md: 'block', lg: 'none' },
                  mr: '10px',
                }}
              >
                <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />
              </Box>
              <ListItem key={chatDetails.id} dense disableGutters>
                <ListItemAvatar>
                  <Badge
                    color={
                      chatDetails.status === 'online'
                        ? 'success'
                        : chatDetails.status === 'busy'
                        ? 'error'
                        : chatDetails.status === 'away'
                        ? 'warning'
                        : 'secondary'
                    }
                    variant="dot"
                    anchorOrigin={{
                      vertical: 'bottom',
                      horizontal: 'right',
                    }}
                    overlap="circular"
                  >
                    <Avatar alt={chatDetails.name} src={chatDetails.thumb} />
                  </Badge>
                </ListItemAvatar>
                <ListItemText
                  primary={<Typography variant="h5">{chatDetails.name}</Typography>}
                  secondary={chatDetails.status}
                />
              </ListItem>
              <Stack direction={'row'}>
                <IconButton aria-label="delete">
                  <IconPhone stroke={1.5} />
                </IconButton>
                <IconButton aria-label="delete">
                  <IconVideo stroke={1.5} />
                </IconButton>
                <IconButton aria-label="delete" onClick={() => setOpen(!open)}>
                  <IconDotsVertical stroke={1.5} />
                </IconButton>
              </Stack>
            </Box>
            <Divider />
          </Box>
          {/* ------------------------------------------- */}
          {/* Chat Content */}
          {/* ------------------------------------------- */}

          <Box display="flex">
            {/* ------------------------------------------- */}
            {/* Chat msges */}
            {/* ------------------------------------------- */}

            <Box width="100%">
              <Scrollbar sx={{ height: '650px', overflow: 'auto', maxHeight: '800px' }}>
                <Box p={3}>
                  {chatDetails.messages.map((chat) => {
                    return (
                      <Box key={chat.id + chat.msg + chat.createdAt}>
                        {chatDetails.id === chat.senderId ? (
                          <>
                            <Box display="flex">
                              <ListItemAvatar>
                                <Avatar
                                  alt={chatDetails.name}
                                  src={chatDetails.thumb}
                                  sx={{ width: 40, height: 40 }}
                                />
                              </ListItemAvatar>
                              <Box>
                                {chat.createdAt ? (
                                  <Typography variant="body2" color="grey.400" mb={1}>
                                    {chatDetails.name},{' '}
                                    {formatDistanceToNowStrict(new Date(chat.createdAt), {
                                      addSuffix: false,
                                    })}{' '}
                                    ago
                                  </Typography>
                                ) : null}
                                {chat.type === 'text' ? (
                                  <Box
                                    mb={2}
                                    sx={{
                                      p: 1,
                                      backgroundColor: 'grey.100',
                                      mr: 'auto',
                                      maxWidth: '320px',
                                    }}
                                  >
                                    {chat.msg}
                                  </Box>
                                ) : null}
                                {chat.type === 'image' ? (
                                  <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>
                                    <img src={chat.msg} alt="attach" width="150" />
                                  </Box>
                                ) : null}
                              </Box>
                            </Box>
                          </>
                        ) : (
                          <Box
                            mb={1}
                            display="flex"
                            alignItems="flex-end"
                            flexDirection="row-reverse"
                          >
                            <Box alignItems="flex-end" display="flex" flexDirection={'column'}>
                              {chat.createdAt ? (
                                <Typography variant="body2" color="grey.400" mb={1}>
                                  ago
                                </Typography>
                              ) : null}
                              {chat.type === 'text' ? (
                                <Box
                                  mb={1}
                                  key={chat.id}
                                  sx={{
                                    p: 1,
                                    backgroundColor: 'primary.light',
                                    ml: 'auto',
                                    maxWidth: '320px',
                                  }}
                                >
                                  {chat.msg}
                                </Box>
                              ) : null}
                              {chat.type === 'image' ? (
                                <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>
                                  <img src={chat.msg} alt="attach" width="250" />
                                </Box>
                              ) : null}
                            </Box>
                          </Box>
                        )}
                      </Box>
                    );
                  })}
                </Box>
              </Scrollbar>
            </Box>

            {/* ------------------------------------------- */}
            {/* Chat right sidebar Content */}
            {/* ------------------------------------------- */}
            <ChatInsideSidebar isInSidebar={lgUp ? open : !open} chat={chatDetails} />
          </Box>
        </Box>
      ) : (
        <Box display="flex" alignItems="center" p={2} pb={1} pt={1}>
          {/* ------------------------------------------- */}
          {/* if No Chat Content */}
          {/* ------------------------------------------- */}
          <Box
            sx={{
              display: { xs: 'flex', md: 'flex', lg: 'none' },
              mr: '10px',
            }}
          >
            <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />
          </Box>
          <Typography variant="h4">Select Chat</Typography>
        </Box>
      )}
    </Box>
  );
};

export default ChatContent;

===== src/components/apps/chats/ChatInsideSidebar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Box,
  Theme,
  useMediaQuery,
  Typography,
  Stack,
  Avatar,
  Grid2 as Grid,
  Alert,
  IconButton,
  styled,
} from '@mui/material';
import { ChatsType } from 'src/types/apps/chat';
import { uniq, flatten } from 'lodash';
import { IconDownload } from '@tabler/icons-react';

interface chatType {
  isInSidebar?: boolean;
  chat?: ChatsType;
}

const drawerWidth = 320;

const ChatInsideSidebar = ({ isInSidebar, chat }: chatType) => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const totalAttachment = uniq(flatten(chat?.messages.map((item) => item.attachment))).length;
  const totalMedia =
    uniq(flatten(chat?.messages.map((item) => (item?.type === 'image' ? item.msg : null)))).length -
    1;

  const StyledStack = styled(Stack)(() => ({
    '.showOnHover': {
      display: 'none',
    },
    '&:hover .showOnHover': {
      display: 'block',
    },
  }));

  return (<>
    {isInSidebar ? (
      <Box
        sx={{
          width: isInSidebar === true ? drawerWidth : 0,
          flexShrink: 0,
          border: '0',
          borderLeft: '1px',
          borderStyle: 'solid',
          right: '0',
          background: (theme) => theme.palette.background.paper,
          boxShadow: lgUp ? null : (theme) => theme.shadows[8],
          position: lgUp ? 'relative' : 'absolute',
          borderColor: (theme) => theme.palette.divider,
        }}
        p={3}
      >
        <Typography variant="h6" mb={2}>
          Media ({totalMedia})
        </Typography>
        <Grid container spacing={2}>
          {chat?.messages.map((c) => {
            return (
              (<Grid
                key={c.id}
                size={{
                  xs: 12,
                  lg: 4
                }}>
                {c?.type === 'image' ? (
                  <Avatar
                    src={c?.msg}
                    alt="media"
                    variant="rounded"
                    sx={{ width: '72px', height: '72px' }}
                  />
                ) : (
                  ''
                )}
              </Grid>)
            );
          })}
          <Grid
            size={{
              xs: 12,
              lg: 12
            }}>
            {totalMedia === 0 ? <Alert severity="error">No Media Found!</Alert> : null}
          </Grid>
        </Grid>

        <Typography variant="h6" mt={5} mb={2}>
          Attachments ({totalAttachment})
        </Typography>
        <Box>
          {chat?.messages.map((c, index) => {
            return (
              <Stack spacing={2.5} key={index} direction="column">
                {c?.attachment?.map((a, index) => {
                  return (
                    <StyledStack key={index} direction="row" gap={2}>
                      <Avatar
                        variant="rounded"
                        sx={{
                          width: '48px',
                          height: '48px',
                          bgcolor: (theme) => theme.palette.grey[100],
                        }}
                      >
                        <Avatar
                          src={a.icon}
                          alt="av"
                          variant="rounded"
                          sx={{ width: '24px', height: '24px' }}
                        ></Avatar>
                      </Avatar>
                      <Box mr={'auto'}>
                        <Typography variant="subtitle2" fontWeight={600} mb={1}>
                          {a.file}
                        </Typography>
                        <Typography variant="body2">{a.fileSize}</Typography>
                      </Box>
                      <Box className="showOnHover">
                        <IconButton aria-label="delete">
                          <IconDownload stroke={1.5} size="20" />
                        </IconButton>
                      </Box>
                    </StyledStack>
                  );
                })}
              </Stack>
            );
          })}
          {totalAttachment === 0 ? <Alert severity="error">No Attachment Found!</Alert> : null}
        </Box>
      </Box>
    ) : null}
  </>);
};

export default ChatInsideSidebar;

===== src/components/apps/chats/ChatListing.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import {
  Avatar,
  List,
  ListItemText,
  ListItemAvatar,
  TextField,
  Box,
  Alert,
  Badge,
  ListItemButton,
  Typography,
  InputAdornment,
  Button,
  Menu,
  MenuItem,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import Scrollbar from '../../custom-scroll/Scrollbar';
import { SelectChat, fetchChats, SearchChat } from '../../../store/apps/chat/ChatSlice';
import { ChatsType } from 'src/types/apps/chat';
import { last } from 'lodash';
import { formatDistanceToNowStrict } from 'date-fns';
import { IconChevronDown, IconSearch } from '@tabler/icons-react';
import user1 from 'src/assets/images/profile/user-1.jpg';

const ChatListing = () => {
  const dispatch = useDispatch();
  const activeChat = useSelector((state) => state.chatReducer.chatContent);

  useEffect(() => {
    dispatch(fetchChats());
  }, [dispatch]);

  const filterChats = (chats: ChatsType[], cSearch: string) => {
    if (chats)
      return chats.filter((t) => t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()));

    return chats;
  };

  const chats = useSelector((state) =>
    filterChats(state.chatReducer.chats, state.chatReducer.chatSearch),
  );

  const getDetails = (conversation: ChatsType) => {
    let displayText = '';

    const lastMessage = conversation.messages[conversation.messages.length - 1];
    if (lastMessage) {
      const sender = lastMessage.senderId === conversation.id ? 'You: ' : '';
      const message = lastMessage.type === 'image' ? 'Sent a photo' : lastMessage.msg;
      displayText = `${sender}${message}`;
    }

    return displayText;
  };

  const lastActivity = (chat: ChatsType) => last(chat.messages)?.createdAt;

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <div>
      {/* ------------------------------------------- */}
      {/* Profile */}
      {/* ------------------------------------------- */}
      <Box display={'flex'} alignItems="center" gap="10px" p={3}>
        <Badge
          variant="dot"
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'right',
          }}
          overlap="circular"
          color="success"
        >
          <Avatar alt="Remy Sharp" src={user1} sx={{ width: 54, height: 54 }} />
        </Badge>
        <Box>
          <Typography variant="body1" fontWeight={600}>
            John Deo
          </Typography>
          <Typography variant="body2">Marketing Manager</Typography>
        </Box>
      </Box>
      {/* ------------------------------------------- */}
      {/* Search */}
      {/* ------------------------------------------- */}
      <Box px={3} py={1}>
        <TextField
          id="outlined-search"
          placeholder="Search contacts"
          size="small"
          type="search"
          variant="outlined"
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconSearch size={'16'} />
              </InputAdornment>
            ),
          }}
          fullWidth
          onChange={(e) => dispatch(SearchChat(e.target.value))}
        />
      </Box>
      {/* ------------------------------------------- */}
      {/* Contact List */}
      {/* ------------------------------------------- */}
      <List sx={{ px: 0 }}>
        <Box px={2.5} pb={1}>
          <Button
            id="basic-button"
            aria-controls={open ? 'basic-menu' : undefined}
            aria-haspopup="true"
            aria-expanded={open ? 'true' : undefined}
            onClick={handleClick}
            color="inherit"
          >
            Recent Chats <IconChevronDown size="16" />
          </Button>
          <Menu
            id="basic-menu"
            anchorEl={anchorEl}
            open={open}
            onClose={handleClose}
            MenuListProps={{
              'aria-labelledby': 'basic-button',
            }}
          >
            <MenuItem onClick={handleClose}>Sort By Time</MenuItem>
            <MenuItem onClick={handleClose}>Sort By Unread</MenuItem>
            <MenuItem onClick={handleClose}>Mark as all Read</MenuItem>
          </Menu>
        </Box>
        <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '600px' }}>
          {chats && chats.length ? (
            chats.map((chat) => (
              <ListItemButton
                key={chat.id}
                onClick={() => dispatch(SelectChat(chat.id))}
                sx={{
                  mb: 0.5,
                  py: 2,
                  px: 3,
                  alignItems: 'start',
                }}
                selected={activeChat === chat.id}
              >
                <ListItemAvatar>
                  <Badge
                    color={
                      chat.status === 'online'
                        ? 'success'
                        : chat.status === 'busy'
                          ? 'error'
                          : chat.status === 'away'
                            ? 'warning'
                            : 'secondary'
                    }
                    variant="dot"
                    anchorOrigin={{
                      vertical: 'bottom',
                      horizontal: 'right',
                    }}
                    overlap="circular"
                  >
                    <Avatar alt="Remy Sharp" src={chat.thumb} sx={{ width: 42, height: 42 }} />
                  </Badge>
                </ListItemAvatar>
                <ListItemText
                  primary={
                    <Typography variant="subtitle2" fontWeight={600} mb={0.5}>
                      {chat.name}
                    </Typography>
                  }
                  secondary={getDetails(chat)}
                  secondaryTypographyProps={{
                    noWrap: true,
                  }}
                  sx={{ my: 0 }}
                />
                <Box sx={{ flexShrink: '0' }} mt={0.5}>
                  <Typography variant="body2">
                    {formatDistanceToNowStrict(new Date(lastActivity(chat)), {
                      addSuffix: false,
                    })}
                  </Typography>
                </Box>
              </ListItemButton>
            ))
          ) : (
            <Box m={2}>
              <Alert severity="error" variant="filled" sx={{ color: 'white' }}>
                No Contacts Found!
              </Alert>
            </Box>
          )}
        </Scrollbar>
      </List>
    </div>
  );
};

export default ChatListing;

===== src/components/apps/chats/ChatMsgSent.tsx =====
import React from "react";
import { useSelector, useDispatch } from 'src/store/Store';
import Box from "@mui/material/Box";
import IconButton from "@mui/material/IconButton";
import InputBase from "@mui/material/InputBase";

import {
  IconPaperclip,
  IconPhoto,
  IconSend,
} from "@tabler/icons-react";
import { sendMsg } from "src/store/apps/chat/ChatSlice";

const ChatMsgSent = () => {
  const [msg, setMsg] = React.useState<any>("");
  const dispatch = useDispatch();






  const id = useSelector((state: any) => state.chatReducer.chatContent);

  const handleChatMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setMsg(e.target.value);
  };

  const newMsg = { id, msg };

  const onChatMsgSubmit = (e: any) => {
    e.preventDefault();
    e.stopPropagation();
    dispatch(sendMsg(newMsg));
    setMsg("");
  };

  return (
    <Box p={2}>
      {/* ------------------------------------------- */}
      {/* sent chat */}
      {/* ------------------------------------------- */}
      <form
        onSubmit={onChatMsgSubmit}
        style={{ display: "flex", gap: "10px", alignItems: "center" }}
      >
        {/* ------------------------------------------- */}
        {/* Emoji picker */}
        {/* ------------------------------------------- */}

        <InputBase
          id="msg-sent"
          fullWidth
          value={msg}
          placeholder="Type a Message"
          size="small"
          type="text"
          inputProps={{ "aria-label": "Type a Message" }}
          onChange={handleChatMsgChange.bind(null)}
        />
        <IconButton
          aria-label="delete"
          onClick={() => {
            dispatch(sendMsg(newMsg));
            setMsg("");
          }}
          disabled={!msg}
          color="primary"
        >
          <IconSend stroke={1.5} size="20" />
        </IconButton>
        <IconButton aria-label="delete">
          <IconPhoto stroke={1.5} size="20" />
        </IconButton>
        <IconButton aria-label="delete">
          <IconPaperclip stroke={1.5} size="20" />
        </IconButton>
      </form>
    </Box>
  );
};

export default ChatMsgSent;

===== src/components/apps/chats/ChatSidebar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Drawer, Theme, useMediaQuery } from '@mui/material';
import ChatListing from './ChatListing';

interface chatType {
  isMobileSidebarOpen: boolean;
  onSidebarClose: (event: React.MouseEvent<HTMLElement>) => void;
}

const drawerWidth = 320;

const ChatSidebar = ({ isMobileSidebarOpen, onSidebarClose }: chatType) => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  return (
    <Drawer
      open={isMobileSidebarOpen}
      onClose={onSidebarClose}
      variant={lgUp ? 'permanent' : 'temporary'}
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        zIndex: lgUp ? 0 : 1,
        [`& .MuiDrawer-paper`]: { position: 'relative' },
      }}
    >
      <ChatListing />
    </Drawer>
  );
};

export default ChatSidebar;

===== src/components/apps/contacts/ContactAdd.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Box,
  Button,
  Dialog,
  DialogTitle,
  TextField,
  FormLabel,
  DialogContent,
  DialogContentText,
  Grid2 as Grid,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { addContact } from '../../../store/apps/contacts/ContactSlice';
import user1 from '../../../assets/images/profile/user-1.jpg';

const ContactAdd = () => {
  const dispatch = useDispatch();
  const id = useSelector((state) => state.contactsReducer.contacts.length + 1);
  const [modal, setModal] = React.useState(false);

  const toggle = () => {
    setModal(!modal);
  };

  const [values, setValues] = React.useState({
    firstname: '',
    lastname: '',
    department: '',
    company: '',
    phone: '',
    email: '',
    address: '',
    notes: '',
  });

  const handleSubmit = (e: any) => {
    e.preventDefault();
    dispatch(
      addContact(
        id,
        values.firstname,
        values.lastname,
        user1,
        values.department,
        values.company,
        values.phone,
        values.email,
        values.address,
        values.notes,
      ),
    );
    setModal(!modal);
  };

  return (<>
    <Box p={3} pb={1}>
      <Button color="primary" variant="contained" fullWidth onClick={toggle}>
        Add New Contact
      </Button>
    </Box>
    <Dialog
      open={modal}
      onClose={toggle}
      maxWidth="sm"
      aria-labelledby="alert-dialog-title"
      aria-describedby="alert-dialog-description"
    >
      <DialogTitle id="alert-dialog-title" variant="h5">
        {'Add New Contact'}
      </DialogTitle>
      <DialogContent>
        <DialogContentText id="alert-dialog-description">
          Lets add new contact for your application. fill the all field and
          <br /> click on submit button.
        </DialogContentText>
        <Box mt={3}>
          <form onSubmit={handleSubmit}>
            <Grid spacing={3} container>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>FirstName</FormLabel>
                <TextField
                  id="firstname"
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.firstname}
                  onChange={(e) => setValues({ ...values, firstname: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>LastName</FormLabel>
                <TextField
                  id="lastname"
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.lastname}
                  onChange={(e) => setValues({ ...values, lastname: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>Department</FormLabel>
                <TextField
                  id="department"
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.department}
                  onChange={(e) => setValues({ ...values, department: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>Company</FormLabel>
                <TextField
                  id="company"
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.company}
                  onChange={(e) => setValues({ ...values, company: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>Phone</FormLabel>
                <TextField
                  id="phone"
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.phone}
                  onChange={(e) => setValues({ ...values, phone: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <FormLabel>Email</FormLabel>
                <TextField
                  id="email"
                  type="email"
                  required
                  size="small"
                  variant="outlined"
                  fullWidth
                  value={values.email}
                  onChange={(e) => setValues({ ...values, email: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 12
                }}>
                <FormLabel>Address</FormLabel>
                <TextField
                  id="address"
                  size="small"
                  multiline
                  rows="3"
                  variant="outlined"
                  fullWidth
                  value={values.address}
                  onChange={(e) => setValues({ ...values, address: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 12
                }}>
                <FormLabel>Notes</FormLabel>
                <TextField
                  id="notes"
                  size="small"
                  multiline
                  rows="4"
                  variant="outlined"
                  fullWidth
                  value={values.notes}
                  onChange={(e) => setValues({ ...values, notes: e.target.value })}
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 12
                }}>
                <Button
                  variant="contained"
                  color="primary"
                  sx={{ mr: 1 }}
                  type="submit"
                  disabled={values.firstname.length === 0 || values.notes.length === 0}
                >
                  Submit
                </Button>
                <Button variant="contained" color="error" onClick={toggle}>
                  Cancel
                </Button>
              </Grid>
            </Grid>
          </form>
        </Box>
      </DialogContent>
    </Dialog>
  </>);
};

export default ContactAdd;

===== src/components/apps/contacts/ContactDetails.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useSelector, useDispatch } from 'src/store/Store';
import {
  Box,
  Button,
  TextField,
  Typography,
  Avatar,
  Divider,
  IconButton,
  Stack,
  Grid2 as Grid,
  Tooltip,
  useTheme
} from '@mui/material';
import {
  isEdit,
  UpdateContact,
  DeleteContact,
  toggleStarredContact,
} from 'src/store/apps/contacts/ContactSlice';
import BlankCard from '../../shared/BlankCard';
import { ContactType } from 'src/types/apps/contact';
import { IconPencil, IconStar, IconTrash, IconDeviceFloppy } from '@tabler/icons-react';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import emailIcon from 'src/assets/images/breadcrumb/emailSv.png';

const ContactDetails = () => {
  const contactDetail: ContactType = useSelector(
    (state) => state.contactsReducer.contacts[state.contactsReducer.contactContent - 1],
  );
  const editContact = useSelector((state) => state.contactsReducer.editContact);
  const dispatch = useDispatch();
  const theme = useTheme();

  const warningColor = theme.palette.warning.main;

  const tableData = [
    {
      id: 1,
      title: 'Firstname',
      alias: 'firstname',
      gdata: contactDetail ? contactDetail.firstname : '',
      type: 'text',
    },
    {
      id: 2,
      title: 'Lastname',
      alias: 'lastname',
      gdata: contactDetail ? contactDetail.lastname : '',
      type: 'text',
    },
    {
      id: 3,
      title: 'Company',
      alias: 'company',
      gdata: contactDetail ? contactDetail.company : '',
      type: 'text',
    },
    {
      id: 4,
      title: 'Department',
      alias: 'department',
      gdata: contactDetail ? contactDetail.department : '',
      type: 'text',
    },
    {
      id: 5,
      title: 'Email',
      alias: 'email',
      gdata: contactDetail ? contactDetail.email : '',
      type: 'email',
    },
    {
      id: 6,
      title: 'Phone',
      alias: 'phone',
      gdata: contactDetail ? contactDetail.phone : '',
      type: 'phone',
    },
    {
      id: 7,
      title: 'Address',
      alias: 'address',
      gdata: contactDetail ? contactDetail.address : '',
      type: 'text',
    },
    {
      id: 8,
      title: 'Notes',
      alias: 'notes',
      gdata: contactDetail ? contactDetail.notes : '',
      type: 'text',
    },
  ];

  return (<>
    {/* ------------------------------------------- */}
    {/* Contact Detail Part */}
    {/* ------------------------------------------- */}
    {contactDetail && !contactDetail.deleted ? (
      <>
        {/* ------------------------------------------- */}
        {/* Header Part */}
        {/* ------------------------------------------- */}
        <Box p={3} py={2} display={'flex'} alignItems="center">
          <Typography variant="h5">Contact Details</Typography>
          <Stack gap={0} direction="row" ml={'auto'}>
            <Tooltip title={contactDetail.starred ? 'Unstar' : 'Star'}>
              <IconButton onClick={() => dispatch(toggleStarredContact(contactDetail.id))}>
                <IconStar
                  stroke={1.3}
                  size="18"
                  style={{
                    fill: contactDetail.starred ? warningColor : '',
                    stroke: contactDetail.starred ? warningColor : '',
                  }}
                />
              </IconButton>
            </Tooltip>
            <Tooltip title={editContact ? 'Save' : 'Edit'}>
              <IconButton onClick={() => dispatch(isEdit())}>
                {!editContact ? (
                  <IconPencil size="18" stroke={1.3} />
                ) : (
                  <IconDeviceFloppy size="18" stroke={1.3} />
                )}
              </IconButton>
            </Tooltip>
            <Tooltip title="Delete">
              <IconButton onClick={() => dispatch(DeleteContact(contactDetail.id))}>
                <IconTrash size="18" stroke={1.3} />
              </IconButton>
            </Tooltip>
          </Stack>
        </Box>
        <Divider />
        {/* ------------------------------------------- */}
        {/* Contact Table Part */}
        {/* ------------------------------------------- */}
        <Box sx={{ overflow: 'auto' }}>
          {!editContact ? (
            <Box>
              <Box p={3}>
                <Box display="flex" alignItems="center">
                  <Avatar
                    alt={contactDetail.image}
                    src={contactDetail.image}
                    sx={{ width: '72px', height: '72px' }}
                  />
                  <Box sx={{ ml: 2 }}>
                    <Typography variant="h6" mb={0.5}>
                      {contactDetail.firstname} {contactDetail.lastname}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" mb={0.5}>
                      {contactDetail.department}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {contactDetail.company}
                    </Typography>
                  </Box>
                </Box>
                <Grid container>
                  <Grid
                    mt={4}
                    size={{
                      lg: 6,
                      xs: 12
                    }}>
                    <Typography variant="body2" color="text.secondary">
                      Phone Number
                    </Typography>
                    <Typography variant="subtitle1" mb={0.5} fontWeight={600}>
                      {contactDetail.phone}
                    </Typography>
                  </Grid>
                  <Grid
                    mt={4}
                    size={{
                      lg: 6,
                      xs: 12
                    }}>
                    <Typography variant="body2" color="text.secondary">
                      Email address
                    </Typography>
                    <Typography variant="subtitle1" fontWeight={600} mb={0.5}>
                      {contactDetail.email}
                    </Typography>
                  </Grid>
                  <Grid
                    mt={4}
                    size={{
                      lg: 12,
                      xs: 12
                    }}>
                    <Typography variant="body2" color="text.secondary">
                      Address
                    </Typography>
                    <Typography variant="subtitle1" fontWeight={600} mb={0.5}>
                      {contactDetail.address}
                    </Typography>
                  </Grid>
                  <Grid
                    mt={4}
                    size={{
                      lg: 6,
                      xs: 12
                    }}>
                    <Typography variant="body2" color="text.secondary">
                      Department
                    </Typography>
                    <Typography variant="subtitle1" mb={0.5} fontWeight={600}>
                      {contactDetail.department}
                    </Typography>
                  </Grid>
                  <Grid
                    mt={4}
                    size={{
                      lg: 6,
                      xs: 12
                    }}>
                    <Typography variant="body2" color="text.secondary">
                      Company
                    </Typography>
                    <Typography variant="subtitle1" fontWeight={600} mb={0.5}>
                      {contactDetail.company}
                    </Typography>
                  </Grid>
                  <Grid
                    mt={4}
                    size={{
                      lg: 12,
                      xs: 12
                    }}>
                    <Typography variant="body2" mb={1} color="text.secondary">
                      Notes
                    </Typography>
                    <Typography variant="subtitle1" mb={0.5}>
                      {contactDetail.notes}
                    </Typography>
                  </Grid>
                </Grid>
              </Box>
              <Divider />
              <Box p={3} gap={1} display="flex">
                <Button
                  color="primary"
                  variant="contained"
                  size="small"
                  onClick={() => dispatch(isEdit())}
                >
                  Edit
                </Button>
                <Button
                  color="error"
                  variant="contained"
                  size="small"
                  onClick={() => dispatch(DeleteContact(contactDetail.id))}
                >
                  Delete
                </Button>
              </Box>
            </Box>
          ) : (
            <>
              <BlankCard sx={{ p: 0 }}>
                <Scrollbar sx={{ height: { lg: 'calc(100vh - 360px)', md: '100vh' } }}>
                  <Box pt={1}>
                    {tableData.map((data) => (
                      <Box key={data.id} px={3} py={1.5}>
                        <Typography variant="subtitle1" fontWeight={600} mb={0.5}>
                          {data.title}
                        </Typography>
                        <TextField
                          id="firstname"
                          size="small"
                          fullWidth
                          type="text"
                          value={data.gdata}
                          onChange={(e) =>
                            dispatch(UpdateContact(contactDetail.id, data.alias, e.target.value))
                          }
                        />
                      </Box>
                    ))}
                    <Box p={3}>
                      <Button
                        color="primary"
                        variant="contained"
                        onClick={() => dispatch(isEdit())}
                      >
                        Save Contact
                      </Button>
                    </Box>
                  </Box>
                </Scrollbar>
              </BlankCard>
            </>
          )}
        </Box>
      </>
    ) : (
      <Box p={3} height="50vh" display={'flex'} justifyContent="center" alignItems={'center'}>
        {/* ------------------------------------------- */}
        {/* If no Contact  */}
        {/* ------------------------------------------- */}
        <Box>
          <Typography variant="h4">Please Select a Contact</Typography>
          <br />
          <img src={emailIcon} alt={emailIcon} width={'250px'} />
        </Box>
      </Box>
    )}
  </>);
};

export default ContactDetails;

===== src/components/apps/contacts/ContactFilter.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useDispatch, useSelector } from 'src/store/Store';
import {
  ListItemText,
  ListItemButton,
  List,
  Divider,
  ListItemIcon,
  Typography,
} from '@mui/material';
import { setVisibilityFilter } from '../../../store/apps/contacts/ContactSlice';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import { IconMail, IconSend, IconBucket, IconFolder } from '@tabler/icons-react';
import ContactAdd from './ContactAdd';

interface DataType {
  id: number;
  name?: string;
  sort?: string;
  icon?: any;
  filterbyTitle?: string;
  devider?: boolean;
  color?: string;
}

const ContactFilter = () => {
  const dispatch = useDispatch();
  const active = useSelector((state) => state.contactsReducer.currentFilter);
  const customizer = useSelector((state) => state.customizer);
  const br = `${customizer.borderRadius}px`;

  const filterData: DataType[] = [
    {
      id: 2,
      name: 'All',
      sort: 'show_all',
      icon: IconMail,
    },
    {
      id: 3,
      name: 'Frequent',
      sort: 'frequent_contact',
      icon: IconSend,
    },
    {
      id: 4,
      name: 'Starred',
      sort: 'starred_contact',
      icon: IconBucket,
    },
    {
      id: 6,
      devider: true,
    },
    {
      id: 5,
      filterbyTitle: 'Categories',
    },

    {
      id: 7,
      name: 'Engineering',
      sort: 'engineering_department',
      icon: IconFolder,
      color: 'primary.main',
    },
    {
      id: 8,
      name: 'Support',
      sort: 'support_department',
      icon: IconFolder,
      color: 'error.main',
    },
    {
      id: 9,
      name: 'Sales',
      sort: 'sales_department',
      icon: IconFolder,
      color: 'success.main',
    },
  ];

  return (
    <>
      <ContactAdd />
      <List>
        <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '800px' }}>
          {filterData.map((filter) => {
            if (filter.filterbyTitle) {
              return (
                <Typography
                  variant="subtitle1"
                  fontWeight={600}
                  pl={5.1}
                  mt={1}
                  pb={2}
                  key={filter.id}
                >
                  {filter.filterbyTitle}
                </Typography>
              );
            } else if (filter.devider) {
              return <Divider key={filter.id} sx={{ mb: 3 }} />;
            }

            return (
              <ListItemButton
                sx={{ mb: 1, mx: 3, borderRadius: br }}
                selected={active === `${filter.sort}`}
                onClick={() => dispatch(setVisibilityFilter(`${filter.sort}`))}
                key={filter.id}
              >
                <ListItemIcon sx={{ minWidth: '30px', color: filter.color }}>
                  <filter.icon stroke="1.5" size={19} />
                </ListItemIcon>
                <ListItemText>{filter.name}</ListItemText>
              </ListItemButton>
            );
          })}
        </Scrollbar>
      </List>
    </>
  );
};

export default ContactFilter;

===== src/components/apps/contacts/ContactList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { List } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import {
  SelectContact,
  fetchContacts,
  DeleteContact,
  toggleStarredContact,
} from '../../../store/apps/contacts/ContactSlice';

import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import ContactListItem from './ContactListItem';
import type { ContactType } from 'src/types/apps/contact';

type Props = {
  showrightSidebar: () => void;
};

const ContactList = ({ showrightSidebar }: Props) => {
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchContacts());
  }, [dispatch]);

  const getVisibleContacts = (contacts: ContactType[], filter: string, contactSearch: string) => {
    switch (filter) {
      case 'show_all':
        return contacts.filter(
          (c) => !c.deleted && c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      case 'frequent_contact':
        return contacts.filter(
          (c) =>
            !c.deleted &&
            c.frequentlycontacted &&
            c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      case 'starred_contact':
        return contacts.filter(
          (c) => !c.deleted && c.starred && c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      case 'engineering_department':
        return contacts.filter(
          (c) =>
            !c.deleted &&
            c.department === 'Engineering' &&
            c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      case 'support_department':
        return contacts.filter(
          (c) =>
            !c.deleted &&
            c.department === 'Support' &&
            c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      case 'sales_department':
        return contacts.filter(
          (c) =>
            !c.deleted &&
            c.department === 'Sales' &&
            c.firstname.toLocaleLowerCase().includes(contactSearch),
        );

      default:
        throw new Error(`Unknown filter: ${filter}`);
    }
  };
  const contacts = useSelector((state) =>
    getVisibleContacts(
      state.contactsReducer.contacts,
      state.contactsReducer.currentFilter,
      state.contactsReducer.contactSearch,
    ),
  );

  const active = useSelector((state) => state.contactsReducer.contactContent);

  return (
    <List>
      <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '800px' }}>
        {contacts.map((contact) => (
          <ContactListItem
            key={contact.id}
            active={contact.id === active}
            {...contact}
            onContactClick={() => {
              dispatch(SelectContact(contact.id));
              showrightSidebar();
            }}
            onDeleteClick={() => dispatch(DeleteContact(contact.id))}
            onStarredClick={() => dispatch(toggleStarredContact(contact.id))}
          />
        ))}
      </Scrollbar>
    </List>
  );
};

export default ContactList;

===== src/components/apps/contacts/ContactListItem.tsx =====
/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { useSelector } from 'src/store/Store';
import {
  ListItemText,
  Box,
  Avatar,
  ListItemButton,
  Typography,
  Stack,
  ListItemAvatar,
  useTheme,
} from '@mui/material';

import { IconStar, IconTrash } from '@tabler/icons-react';

type Props = {
  onContactClick: (event: React.MouseEvent<HTMLElement>) => void;
  onStarredClick: React.MouseEventHandler<SVGElement>;
  onDeleteClick: React.MouseEventHandler<SVGElement>;
  id: string | number;
  firstname: string;
  lastname: string;
  image: string;
  department: string;
  starred: boolean;
  active: any;
};

const ContactListItem = ({
  onContactClick,
  onStarredClick,
  onDeleteClick,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  id,
  firstname,
  lastname,
  image,
  department,
  starred,
  active,
}: Props) => {
  const customizer = useSelector((state) => state.customizer);

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const br = `${customizer.borderRadius}px`;

  const theme = useTheme();

  const warningColor = theme.palette.warning.main;

  return (
    <ListItemButton sx={{ mb: 1 }} selected={active}>
      <ListItemAvatar>
        <Avatar alt={image} src={image} />
      </ListItemAvatar>
      <ListItemText>
        <Stack direction="row" gap="10px" alignItems="center">
          <Box mr="auto" onClick={onContactClick}>
            <Typography variant="subtitle1" noWrap fontWeight={600} sx={{ maxWidth: '150px' }}>
              {firstname} {lastname}
            </Typography>
            <Typography variant="body2" color="text.secondary" noWrap>
              {department}
            </Typography>
          </Box>
          <IconStar
            onClick={onStarredClick}
            size="16"
            stroke={1.5}
            style={{ fill: starred ? warningColor : '', stroke: starred ? warningColor : '' }}
          />
          <IconTrash onClick={onDeleteClick} size="16" stroke={1.5} />
        </Stack>
      </ListItemText>
    </ListItemButton>
  );
};


export default ContactListItem;

===== src/components/apps/contacts/ContactSearch.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useSelector, useDispatch, AppState } from 'src/store/Store';
import { Box, Fab, TextField, InputAdornment } from '@mui/material';

import { SearchContact } from '../../../store/apps/contacts/ContactSlice';
import { IconMenu2, IconSearch } from '@tabler/icons-react';

type Props = {
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
};

const ContactSearch = ({ onClick }: Props) => {
  const searchTerm = useSelector((state: AppState) => state.contactsReducer.contactSearch);
  const dispatch = useDispatch();

  return (
    <Box display="flex" sx={{ p: 2 }}>
      <Fab
        onClick={onClick}
        color="primary"
        size="small"
        sx={{ mr: 1, flexShrink: '0', display: { xs: 'block', lineHeight: '10px', lg: 'none' } }}
      >
        <IconMenu2 width="16" />
      </Fab>
      <TextField
        id="outlined-basic"
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <IconSearch size={'16'} />
            </InputAdornment>
          ),
        }}
        fullWidth
        size="small"
        value={searchTerm}
        placeholder="Search Contacts"
        variant="outlined"
        onChange={(e) => dispatch(SearchContact(e.target.value))}
      />
    </Box>
  );
};

export default ContactSearch;

===== src/components/apps/email/EmailActions.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Button, ButtonGroup } from '@mui/material';
import { IconFolder, IconActivity, IconTag } from '@tabler/icons-react';

const EmailActions = () => {
  return (
    <Box sx={{ p: 2 }}>
      <ButtonGroup size="small" aria-label="small button group" fullWidth>
        {/* ------------------------------------------- */}
        {/* Action buttons */}
        {/* ------------------------------------------- */}
        <Button key="one">
          <IconActivity width="17" />
        </Button>
        <Button key="two">
          <IconFolder width="17" />
        </Button>
        <Button key="three">
          <IconTag width="17" />
        </Button>
      </ButtonGroup>
    </Box>
  );
};

export default EmailActions;

===== src/components/apps/email/EmailCompose.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  Button,
  Box,
  Dialog,
  DialogTitle,
  Slide,
  TextField,
  DialogContent,
  DialogActions,
  DialogContentText,
} from '@mui/material';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import { TransitionProps } from '@mui/material/transitions';

const Transition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement<any, any>;
  },
  ref: React.Ref<unknown>,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const EmailCompose = () => {
  const [open, setOpen] = useState(false);
  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <Box>
      {/* ------------------------------------------- */}
      {/* Compose Email */}
      {/* ------------------------------------------- */}
      <Box p={3} pb={1}>
        <Button variant="contained" fullWidth color="primary" onClick={handleClickOpen}>
          Compose
        </Button>
      </Box>
      {/* ------------------------------------------- */}
      {/* Dialog for compose */}
      {/* ------------------------------------------- */}
      <Dialog
        open={open}
        TransitionComponent={Transition}
        keepMounted
        onClose={handleClose}
        fullWidth
        aria-labelledby="alert-dialog-slide-title"
        aria-describedby="alert-dialog-slide-description"
      >
        <DialogTitle id="alert-dialog-slide-title" variant="h5">
          Compose Mail
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-slide-description" component="div">
            <CustomFormLabel htmlFor="to-text">To</CustomFormLabel>
            <TextField id="to-text" fullWidth size="small" variant="outlined" />
            <CustomFormLabel htmlFor="subject-text">Subject</CustomFormLabel>
            <TextField id="subject-text" fullWidth size="small" variant="outlined" />
            <CustomFormLabel htmlFor="message-text">Message</CustomFormLabel>
            <TextField
              id="message-text"
              placeholder="Write a message"
              multiline
              fullWidth
              rows={4}
              variant="outlined"
            />
            <CustomFormLabel htmlFor="upload-text">Attachment</CustomFormLabel>
            <TextField
              type="file"
              autoFocus
              id="upload-text"
              fullWidth
              size="small"
              variant="outlined"
            />
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="primary" variant="contained">
            Send
          </Button>
          <Button onClick={handleClose} color="secondary">
            Cancel
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EmailCompose;

===== src/components/apps/email/EmailContent.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  Box,
  Avatar,
  Typography,
  Chip,
  Button,
  Divider,
  Stack,
  IconButton,
  Grid2 as Grid,
  Tooltip,
  Paper,
  useTheme
} from '@mui/material';
import { EmailType } from 'src/types/apps/email';
import { IconStar, IconCircle, IconTrash } from '@tabler/icons-react';
import { useSelector, useDispatch } from 'src/store/Store';
import { starEmail, importantEmail, deleteEmail } from '../../../store/apps/email/EmailSlice';
import emailIcon from 'src/assets/images/breadcrumb/emailSv.png';

import TiptapEdit from 'src/views/forms/from-tiptap/TiptapEdit'

const EmailContent = () => {
  const emailDetails: EmailType = useSelector(
    (state) => state.emailReducer.emails[state.emailReducer.emailContent - 1],
  );

  const [show, setShow] = useState(false);

  const toggleEditor = () => {
    setShow(!show);
  };

  const dispatch = useDispatch();

  const theme = useTheme();

  const warningColor = theme.palette.warning.main;
  const errorColor = theme.palette.error.light;

  return emailDetails && !emailDetails.trash ? (
    <Box>
      <Stack p={2} gap={0} direction="row">
        <Tooltip title={emailDetails.starred ? 'Unstar' : 'Star'}>
          <IconButton onClick={() => dispatch(starEmail(emailDetails.id))}>
            <IconStar
              stroke={1.3}
              size="18"
              style={{
                fill: emailDetails.starred ? warningColor : '',
                stroke: emailDetails.starred ? warningColor : '',
              }}
            />
          </IconButton>
        </Tooltip>
        <Tooltip title={emailDetails ? 'Important' : 'Not Important'}>
          <IconButton onClick={() => dispatch(importantEmail(emailDetails.id))}>
            <IconCircle
              size="18"
              stroke={1.3}
              style={{
                fill: emailDetails.important ? errorColor : '',
              }}
            />
          </IconButton>
        </Tooltip>
        <Tooltip title="Delete">
          <IconButton onClick={() => dispatch(deleteEmail(emailDetails.id))}>
            <IconTrash size="18" stroke={1.3} />
          </IconButton>
        </Tooltip>
      </Stack>
      <Divider />
      <Box p={3}>
        {/* ------------------------------------------- */}
        {/* Email Detail page */}
        {/* ------------------------------------------- */}
        <Box display="flex" alignItems="center" sx={{ pb: 3 }}>
          <Avatar alt={emailDetails.from} src={emailDetails.thumbnail} />
          <Box sx={{ ml: 2 }}>
            <Typography variant="h6">{emailDetails.from}</Typography>
            <Typography variant="body2">{emailDetails.To}</Typography>
          </Box>
          <Chip
            label={emailDetails.label}
            sx={{ ml: 'auto', height: '21px' }}
            size="small"
            color={
              emailDetails.label === 'Promotional'
                ? 'primary'
                : emailDetails.label === 'Social'
                  ? 'error'
                  : 'success'
            }
          />
        </Box>
        {/* ------------------------------------------- */}
        {/* Email Detail page */}
        {/* ------------------------------------------- */}

        <Box sx={{ py: 2 }}>
          <Typography variant="h4">{emailDetails.subject}</Typography>
        </Box>

        <Box sx={{ py: 2 }}>
          <div dangerouslySetInnerHTML={{ __html: emailDetails.emailContent }} />
        </Box>
      </Box>
      {emailDetails?.attchments?.length == 0 ? null : (
        <>
          <Divider />
          <Box p={3}>
            <Typography variant="h6">Attachments ({emailDetails?.attchments?.length})</Typography>

            <Grid container spacing={3}>
              {emailDetails.attchments?.map((attach) => {
                return (
                  (<Grid
                    key={attach.id}
                    size={{
                      lg: 4
                    }}>
                    <Stack direction="row" gap={2} mt={2}>
                      <Avatar
                        variant="rounded"
                        sx={{ width: '48px', height: '48px', bgcolor: (theme: any) => theme.palette.grey[100] }}
                      >
                        <Avatar
                          src={attach.image}
                          alt="av"
                          variant="rounded"
                          sx={{ width: '24px', height: '24px' }}
                        ></Avatar>
                      </Avatar>
                      <Box mr={'auto'}>
                        <Typography variant="subtitle2" fontWeight={600} mb={1}>
                          {attach.title}
                        </Typography>
                        <Typography variant="body2">{attach.fileSize}</Typography>
                      </Box>
                    </Stack>
                  </Grid>)
                );
              })}
            </Grid>
          </Box>
          <Divider />
        </>
      )}

      <Box p={3}>
        <Stack direction="row" gap={2}>
          <Button variant="outlined" size="small" color="primary" onClick={toggleEditor}>
            Reply
          </Button>
          <Button variant="outlined" size="small">
            Forward
          </Button>
        </Stack>

        {/* Editor */}
        {show ? (
          <Box mt={3}>
            <Paper variant="outlined">
              <TiptapEdit />
            </Paper>
          </Box>
        ) : null}
      </Box>
    </Box>
  ) : (
    <Box p={3} height="50vh" display={'flex'} justifyContent="center" alignItems={'center'}>
      {/* ------------------------------------------- */}
      {/* If no Email  */}
      {/* ------------------------------------------- */}
      <Box>
        <Typography variant="h4">Please Select a Mail</Typography>
        <br />
        <img src={emailIcon} alt={emailIcon} width={'250px'} />
      </Box>
    </Box>
  );
};

export default EmailContent;

===== src/components/apps/email/EmailFilter.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useSelector, useDispatch } from 'src/store/Store';
import { ListItemText,
  ListItemButton,
  List,
  Divider,
  ListItemIcon,
  Box,
  Typography } from '@mui/material';

import { setVisibilityFilter } from '../../../store/apps/email/EmailSlice';
import EmailCompose from './EmailCompose';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import { IconMail,
  IconSend,
  IconFlag,
  IconTrash,
  IconStar,
  IconCircle,
  IconFolder,
  IconNote } from '@tabler/icons-react';
import { GeneralIcon } from 'src/types/apps/icon';

interface fitlerType {
  id?: number;
  filterbyTitle?: string;
  icon?: GeneralIcon | any;
  name?: string;
  divider?: boolean;
  color?: string;
}

const EmailFilter = () => {
  const active = useSelector((state) => state.emailReducer.currentFilter);
  const customizer = useSelector((state) => state.customizer);
  const br = `${customizer.borderRadius}px`;

  const dispatch = useDispatch();
  const filterData: fitlerType[] = [
    {
      id: 2,
      name: 'inbox',
      icon: IconMail,
      color: 'inherit',
    },
    {
      id: 3,
      name: 'sent',
      icon: IconSend,
      color: 'inherit',
    },
    {
      id: 4,
      name: 'draft',
      icon: IconNote,
      color: 'inherit',
    },
    {
      id: 4,
      name: 'spam',
      icon: IconFlag,
      color: 'inherit',
    },
    {
      id: 5,
      name: 'trash',
      icon: IconTrash,
      color: 'inherit',
    },
    {
      id: 6,
      divider: true,
    },
    {
      id: 1,
      filterbyTitle: 'Sort By',
    },
    {
      id: 7,
      name: 'starred',
      icon: IconStar,
      color: 'inherit',
    },
    {
      id: 8,
      name: 'important',
      icon: IconCircle,
      color: 'inherit',
    },
    {
      id: 9,
      divider: true,
    },
    {
      id: 13,
      filterbyTitle: 'Labels',
    },
    {
      id: 10,
      name: 'Promotional',
      icon: IconFolder,
      color: 'primary.main',
    },
    {
      id: 11,
      name: 'Social',
      icon: IconFolder,
      color: 'error.main',
    },
    {
      id: 12,
      name: 'Health',
      icon: IconFolder,
      color: 'success.main',
    },
  ];

  return (
    <>
      <Box>
        {/* ------------------------------------------- */}
        {/* Email compose */}
        {/* ------------------------------------------- */}
        <EmailCompose />
      </Box>
      <List>
      <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '800px' }}>
          {filterData.map((filter) => {
            if (filter.filterbyTitle) {
              return (
                <Typography
                  variant="subtitle2"
                  p={3}
                  pb={1}
                  pl={5.5}
                  fontWeight={600}
                  key={filter.id}
                >
                  {filter.filterbyTitle}
                </Typography>
              );
            } else if (filter.divider) {
              return <Divider key={filter.id} />;
            }

            return (
              <ListItemButton
                sx={{
                  mb: 1,
                  px: '20px',
                  mx: 3,
                  borderRadius: br,
                }}
                selected={active === `${filter.name}`}
                onClick={() => dispatch(setVisibilityFilter(`${filter.name}`))}
                key={`${filter.id}${filter.name}`}
              >
                {/* ------------------------------------------- */}
                {/* If list to filter */}
                {/* ------------------------------------------- */}
                <ListItemIcon sx={{ minWidth: '30px', color: filter.color }}>
                  <filter.icon stroke="1.5" size={19} />
                </ListItemIcon>
                <ListItemText sx={{ textTransform: 'capitalize' }}>{filter.name}</ListItemText>
              </ListItemButton>
            );
          })}
        </Scrollbar>
      </List>
    </>
  );
};

export default EmailFilter;

===== src/components/apps/email/EmailList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { List } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import EmailListItem from './EmailListItem';
import {
  fetchEmails,
  SelectEmail,
  starEmail,
  importantEmail,
  deleteEmail,
  checkEmail,
} from '../../../store/apps/email/EmailSlice';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import { EmailType } from 'src/types/apps/email';

interface Props {
  showrightSidebar: React.MouseEventHandler;
}

const EmailList = ({ showrightSidebar }: Props) => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchEmails());
  }, [dispatch]);

  const getVisibleEmail = (emails: EmailType[], filter: string, emailSearch: string) => {
    switch (filter) {
      case 'inbox':
        return emails.filter(
          (t) => t.inbox && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'sent':
        return emails.filter(
          (t) => t.sent && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'draft':
        return emails.filter(
          (t) => t.draft && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'spam':
        return emails.filter(
          (t) => t.spam && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'trash':
        return emails.filter((t) => t.trash && t.from.toLocaleLowerCase().includes(emailSearch));
      case 'starred':
        return emails.filter(
          (t) => t.starred && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'important':
        return emails.filter(
          (t) => t.important && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'Promotional':
        return emails.filter(
          (t) =>
            t.label === 'Promotional' &&
            !t.trash &&
            t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'Social':
        return emails.filter(
          (t) =>
            t.label === 'Social' && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      case 'Health':
        return emails.filter(
          (t) =>
            t.label === 'Health' && !t.trash && t.from.toLocaleLowerCase().includes(emailSearch),
        );
      default:
        throw new Error(`Unknown filter: ${filter}`);
    }
  };

  const emails = useSelector((state) =>
    getVisibleEmail(
      state.emailReducer.emails,
      state.emailReducer.currentFilter,
      state.emailReducer.emailSearch,
    ),
  );

  const active = useSelector((state) => state.emailReducer.emailContent);

  return (
    <List>
      <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '800px' }}>
        {/* ------------------------------------------- */}
        {/* Email page */}
        {/* ------------------------------------------- */}
        {emails.map((email) => (
          <EmailListItem
            key={email.id}
            {...email}
            onClick={() => {
              dispatch(SelectEmail(email.id));
              showrightSidebar;
            }}
            onDelete={() => dispatch(deleteEmail(email.id))}
            isSelected={email.id === active}
            onStar={() => dispatch(starEmail(email.id))}
            onImportant={() => dispatch(importantEmail(email.id))}
            onChange={(e) => {
              if (e.target.checked === true) dispatch(checkEmail(email.id));
              else dispatch(checkEmail(email.id));
            }}
          />
        ))}
      </Scrollbar>
    </List>
  );
};

export default EmailList;

===== src/components/apps/email/EmailListItem.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { ListItemText,
  ListItemIcon,
  Chip,
  ListItemButton,
  Typography,
  Stack,
  useTheme } from '@mui/material';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import { IconCircle, IconStar, IconTrash } from '@tabler/icons-react';
import { formatDistanceToNowStrict } from 'date-fns';

interface EmailListType {
  id: number;
  from: string;
  subject: string;
  time: string;
  unread: boolean;
  starred: boolean;
  important: boolean;
  label: string;
  onClick: React.MouseEventHandler<HTMLElement>;
  onChange: React.ChangeEventHandler<HTMLInputElement>;
  onStar: React.MouseEventHandler<SVGAElement>;
  onImportant: React.MouseEventHandler<SVGAElement>;
  onDelete: React.MouseEventHandler<SVGAElement>;
  checked?: boolean;
  isSelected: boolean;
}

const EmailListItem = ({
  id,
  onClick,
  onChange,
  onStar,
  onImportant,
  from,
  subject,
  time,
  checked,
  label,
  starred,
  onDelete,
  important,
  isSelected,
}: EmailListType) => {
  const theme = useTheme();

  const warningColor = theme.palette.warning.main;
  const errorColor = theme.palette.error.light;

  return (
    <ListItemButton sx={{ mb: 1, py: 2 }} selected={isSelected} alignItems="flex-start">
      <ListItemIcon sx={{ minWidth: '35px', mt: '0' }}>
        <CustomCheckbox edge="start" id={`check${id}`} tabIndex={-1} onChange={onChange} />
      </ListItemIcon>
      {/* ------------------------------------------- */}
      {/* Email page */}
      {/* ------------------------------------------- */}
      <ListItemText onClick={onClick}>
        <Stack direction="row" gap="10px" alignItems="center">
          <Typography variant="subtitle2" mb={0.5} fontWeight={600} mr={'auto'}>
            {from}
          </Typography>
          <Chip
            label={label}
            size="small"
            color={label === 'Promotional' ? 'primary' : label === 'Social' ? 'error' : 'success'}
          />
        </Stack>
        <Typography variant="subtitle2" noWrap width={'80%'} color="text.secondary">
          {subject}
        </Typography>
        {/* ------------------------------------------- */}
        {/* Email page */}
        {/* ------------------------------------------- */}
        <Stack direction="row" mt={1} gap="10px" alignItems="center">

          <IconStar
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            onClick={onStar}
            stroke={1}
            size="18"
            style={{ fill: starred ? warningColor : '', stroke: starred ? warningColor : '' }}
          />
          <IconCircle
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            onClick={onImportant}
            size="18"
            stroke={1.2}
            style={{ fill: important ? errorColor : '' }}
          />
          {/* ------------------------------------------- */}
          {/* Checked ? */}
          {/* ------------------------------------------- */}
          {checked ? <IconTrash
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            onClick={onDelete} stroke={1.5} size="16" /> : ''}
          <Typography variant="caption" noWrap sx={{ ml: 'auto' }}>
            { }
            {formatDistanceToNowStrict(new Date(time), {
              addSuffix: false,
            })}{' '}
            ago
          </Typography>
        </Stack>
      </ListItemText>
    </ListItemButton>
  );
};

export default EmailListItem;

===== src/components/apps/email/EmailSearch.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useSelector, useDispatch } from 'src/store/Store';
import { Box, Fab, TextField, InputAdornment } from '@mui/material';
import { SearchEmail } from '../../../store/apps/email/EmailSlice';
import { IconMenu2, IconSearch } from '@tabler/icons-react';

interface Props {
  onClick: React.MouseEventHandler<HTMLButtonElement>;
}

const EmailSearch = ({ onClick }: Props) => {
  const searchTerm = useSelector((state) => state.emailReducer.emailSearch);
  const dispatch = useDispatch();

  return (
    <Box display="flex" sx={{ p: 2 }}>
      {/* ------------------------------------------- */}
      {/* Button toggle sidebar when lgdown */}
      {/* ------------------------------------------- */}
      <Fab
        onClick={onClick}
        color="primary"
        size="small"
        sx={{ mr: 1, flexShrink: '0', display: { xs: 'block', lineHeight: '10px', lg: 'none' } }}
      >
        <IconMenu2 width="16" />
      </Fab>
      {/* ------------------------------------------- */}
      {/* Search */}
      {/* ------------------------------------------- */}
      <TextField
        id="outlined-basic"
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <IconSearch size={'16'} />
            </InputAdornment>
          ),
        }}
        fullWidth
        size="small"
        value={searchTerm}
        placeholder="Search emails"
        variant="outlined"
        onChange={(e) => dispatch(SearchEmail(e.target.value))}
      />
    </Box>
  );
};

export default EmailSearch;

===== src/components/apps/invoice/Add-invoice/index.tsx =====

import React, { useState, useContext, useEffect } from 'react';
import { InvoiceContext } from 'src/context/InvoiceContext';
import {
  Alert,
  Button,
  MenuItem,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  IconButton,
  Tooltip,
  Box,
  Stack,
  Divider,
  Grid2 as Grid,
} from '@mui/material';
import { useNavigate } from 'react-router';
import { format, isValid } from 'date-fns';
import { IconPlus, IconSquareRoundedPlus, IconTrash } from '@tabler/icons-react';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';

const CreateInvoice = () => {
  const { addInvoice, invoices } = useContext(InvoiceContext);
  const [showAlert, setShowAlert] = useState(false);
  const router = useNavigate();
  const [formData, setFormData] = useState({
    id: 0,
    billFrom: '',
    billTo: '',
    totalCost: 0,
    status: 'Pending',
    billFromAddress: '',
    billToAddress: '',
    orders: [{ itemName: '', unitPrice: '', units: '', unitTotalPrice: 0 }],
    vat: 0,
    grandTotal: 0,
    subtotal: 0,
    date: new Date().toISOString().split('T')[0],
  });

  useEffect(() => {
    if (invoices.length > 0) {
      const lastId = invoices[invoices.length - 1].id;
      setFormData((prevData: any) => ({
        ...prevData,
        id: lastId + 1,
      }));
    } else {
      setFormData((prevData: any) => ({
        ...prevData,
        id: 1,
      }));
    }
  }, [invoices]);

  const calculateTotals = (orders: any[]) => {
    let subtotal = 0;

    orders.forEach((order) => {
      const unitPrice = parseFloat(order.unitPrice) || 0;
      const units = parseInt(order.units) || 0;
      const totalCost = unitPrice * units;

      subtotal += totalCost;
      order.unitTotalPrice = totalCost;
    });

    const vat = subtotal * 0.1;
    const grandTotal = subtotal + vat;

    return { subtotal, vat, grandTotal };
  };

  const handleChange = (e: { target: { name: any; value: any } }) => {
    const { name, value } = e.target;
    setFormData((prevData) => {
      const newFormData = { ...prevData, [name]: value };
      const totals = calculateTotals(newFormData.orders);
      return {
        ...newFormData,
        ...totals,
      };
    });
  };

  const handleOrderChange = (index: number, field: string, value: string) => {
    setFormData((prevData) => {
      const updatedOrders = [...prevData.orders];
      updatedOrders[index] = {
        ...updatedOrders[index],
        [field]: value,
      };
      const totals = calculateTotals(updatedOrders);
      return {
        ...prevData,
        orders: updatedOrders,
        ...totals,
      };
    });
  };

  const handleAddItem = () => {
    setFormData((prevData) => {
      const updatedOrders = [
        ...prevData.orders,
        { itemName: '', unitPrice: '', units: '', unitTotalPrice: 0 },
      ];
      const totals = calculateTotals(updatedOrders);
      return {
        ...prevData,
        orders: updatedOrders,
        ...totals,
      };
    });
  };

  const handleDeleteItem = (index: number) => {
    setFormData((prevData) => {
      const updatedOrders = prevData.orders.filter((_, i) => i !== index);
      const totals = calculateTotals(updatedOrders);
      return {
        ...prevData,
        orders: updatedOrders,
        ...totals,
      };
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addInvoice(formData);
      setFormData({
        id: 0,
        billFrom: '',
        billTo: '',
        totalCost: 0,
        status: 'Pending',
        billFromAddress: '',
        billToAddress: '',
        orders: [{ itemName: '', unitPrice: '', units: '', unitTotalPrice: 0 }],
        vat: 0,
        grandTotal: 0,
        subtotal: 0,
        date: new Date().toISOString().split('T')[0],
      });
      setShowAlert(true);
      setTimeout(() => {
        setShowAlert(false);
      }, 5000);
      router('/apps/invoice/list');
    } catch (error) {
      console.error('Error adding invoice:', error);
    }
  };

  const parsedDate = isValid(new Date(formData.date)) ? new Date(formData.date) : new Date();
  const formattedOrderDate = format(parsedDate, 'EEEE, MMMM dd, yyyy');

  return (<>
    <form onSubmit={handleSubmit}>
      <Box>
        <Stack
          direction="row"
          spacing={{ xs: 1, sm: 2, md: 4 }}
          justifyContent="space-between"
          mb={3}
        >
          <Typography variant="h5"># {formData.id}</Typography>
          <Box display="flex" gap={1}>
            <Button
              variant="outlined"
              color="error"
              onClick={() => {
                router('/apps/invoice/list');
              }}
            >
              Cancel
            </Button>
            <Button type="submit" variant="contained" color="primary">
              Create Invoice
            </Button>
          </Box>
        </Stack>
        <Divider></Divider>
        <Stack
          direction="row"
          spacing={{ xs: 1, sm: 2, md: 4 }}
          justifyContent="space-between"
          alignItems="center"
          mb={3}
        >
          <Box>
            <CustomFormLabel htmlFor="demo-simple-select">Order Status</CustomFormLabel>

            <CustomSelect
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              value={formData.status}
              onChange={handleChange}
              disabled
            >
              <MenuItem value="Pending">Pending</MenuItem>
              <MenuItem value="Shipped">Shipped</MenuItem>
              <MenuItem value="Delivered">Delivered</MenuItem>
            </CustomSelect>
          </Box>
          <Box textAlign="right">
            <CustomFormLabel htmlFor="demo-simple-select">Order Date</CustomFormLabel>
            <Typography variant="body1"> {formattedOrderDate}</Typography>
          </Box>
        </Stack>
        <Divider></Divider>

        <Grid container spacing={3} mb={4}>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            <CustomFormLabel htmlFor="bill-from">Bill From</CustomFormLabel>
            <CustomTextField
              id="bill-from"
              name="billFrom"
              value={formData.billFrom}
              onChange={handleChange}
              fullWidth
            />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            <CustomFormLabel
              htmlFor="bill-to"
              sx={{
                mt: {
                  xs: 0,
                  sm: 3,
                },
              }}
            >
              Bill To
            </CustomFormLabel>
            <CustomTextField
              name="billTo"
              value={formData.billTo}
              onChange={handleChange}
              fullWidth
            />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            <CustomFormLabel
              htmlFor="From Address"
              sx={{
                mt: 0,
              }}
            >
              From Address
            </CustomFormLabel>
            <CustomTextField
              name="billFromAddress"
              value={formData.billFromAddress}
              onChange={handleChange}
              fullWidth
            />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            <CustomFormLabel
              htmlFor="Bill To Address"
              sx={{
                mt: 0,
              }}
            >
              Bill To Address
            </CustomFormLabel>
            <CustomTextField
              name="billToAddress"
              value={formData.billToAddress}
              onChange={handleChange}
              fullWidth
            />
          </Grid>
        </Grid>
        {/* Orders Table */}
        <Stack direction="row" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6">Items Details :</Typography>
          <Button
            onClick={handleAddItem}
            variant="contained"
            color="primary"
            startIcon={<IconPlus width={18} />}
          >
            Add Item
          </Button>
        </Stack>

        <Paper variant="outlined">
          <TableContainer sx={{ whiteSpace: { xs: 'nowrap', md: 'unset' } }}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      Item Name
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      Unit Price
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      Units
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      Total Cost
                    </Typography>
                  </TableCell>
                  <TableCell></TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      Actions
                    </Typography>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {formData.orders.map((order, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <CustomTextField
                        type="text"
                        value={order.itemName}
                        placeholder="Item Name"
                        onChange={(e: any) =>
                          handleOrderChange(index, 'itemName', e.target.value)
                        }
                        fullWidth
                      />
                    </TableCell>
                    <TableCell>
                      <CustomTextField
                        type="number"
                        value={order.unitPrice}
                        placeholder="Unit Price"
                        onChange={(e: any) =>
                          handleOrderChange(index, 'unitPrice', e.target.value)
                        }
                        fullWidth
                      />
                    </TableCell>
                    <TableCell>
                      <CustomTextField
                        type="number"
                        value={order.units}
                        placeholder="Units"
                        onChange={(e: any) => handleOrderChange(index, 'units', e.target.value)}
                        fullWidth
                      />
                    </TableCell>
                    <TableCell>
                      <Typography variant="body1">{order.unitTotalPrice}</Typography>
                    </TableCell>
                    <TableCell></TableCell>
                    <TableCell>
                      <Tooltip title="Add Item">
                        <IconButton onClick={handleAddItem} color="primary">
                          <IconSquareRoundedPlus width={22} />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Delete Item">
                        <IconButton onClick={() => handleDeleteItem(index)} color="error">
                          <IconTrash width={22} />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>

        {/* Totals */}
        <Box p={3} bgcolor="primary.light" mt={3}>
          <Box display="flex" justifyContent="end" gap={3} mb={3}>
            <Typography variant="body1" fontWeight={600}>
              Sub Total:
            </Typography>
            <Typography variant="body1" fontWeight={600}>
              {formData.subtotal}
            </Typography>
          </Box>
          <Box display="flex" justifyContent="end" gap={3} mb={3}>
            <Typography variant="body1" fontWeight={600}>
              VAT:
            </Typography>
            <Typography variant="body1" fontWeight={600}>
              {formData.vat}
            </Typography>
          </Box>
          <Box display="flex" justifyContent="end" gap={3}>
            <Typography variant="body1" fontWeight={600}>
              Grand Total:
            </Typography>
            <Typography variant="body1" fontWeight={600}>
              {formData.grandTotal}
            </Typography>
          </Box>
        </Box>

        {showAlert && (
          <Alert severity="success" sx={{ position: 'fixed', top: 16, right: 16 }}>
            Invoice added successfully.
          </Alert>
        )}
      </Box>
    </form>
  </>);
};

export default CreateInvoice;

===== src/components/apps/invoice/Edit-invoice/index.tsx =====

import { useContext, useState, useEffect } from 'react';
import { InvoiceContext } from 'src/context/InvoiceContext/index';
import { useLocation, useNavigate } from 'react-router';
import {
  Button,
  MenuItem,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Alert,
  IconButton,
  Tooltip,
  Box,
  Stack,
  Divider,
  Grid2 as Grid,
} from '@mui/material';
import { format, isValid } from 'date-fns';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import { IconSquareRoundedPlus, IconTrash } from '@tabler/icons-react';

const EditInvoicePage = () => {
  const { invoices, updateInvoice } = useContext(InvoiceContext);
  const [showAlert, setShowAlert] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState<any>(null);
  const [editing, setEditing] = useState(false);
  const [editedInvoice, setEditedInvoice]: any = useState(null);

  const title = useLocation();
  const getTitle = title.pathname.split('/').pop();

  useEffect(() => {
    if (invoices.length > 0) {
      // If there's a specific item to edit, use it
      if (getTitle) {
        const invoice = invoices.find((inv: { billFrom: string }) => inv.billFrom === getTitle);
        if (invoice) {
          setSelectedInvoice(invoice);
          setEditedInvoice({ ...invoice });
          setEditing(true);
        } else {
          // If specific item not found, fallback to default
          setSelectedInvoice(invoices[0]);
          setEditedInvoice({ ...invoices[0] });
          setEditing(true);
        }
      } else {
        // No specific item, default to the first invoice
        setSelectedInvoice(invoices[0]);
        setEditedInvoice({ ...invoices[0] });
        setEditing(true);
      }
    }
  }, [getTitle, invoices]);

  const router = useNavigate();

  const handleSave = async () => {
    try {
      await updateInvoice(editedInvoice);
      setSelectedInvoice({ ...editedInvoice });
      setEditing(false); // Exit editing mode
      setShowAlert(true);

      // Navigate to the list page
      router('/apps/invoice/list');
    } catch (error) {
      console.error('Error updating invoice:', error);
    }

    setTimeout(() => {
      setShowAlert(false);
    }, 5000);
  };

  const handleCancel = () => {
    setEditing(false);
  };

  const handleOrderChange = (
    index: string | number | any,
    field: string,
    value: string | number,
  ) => {
    const updatedOrders = [...editedInvoice.orders];
    updatedOrders[index][field] = value;

    // Calculate unitTotalPrice for the changed item
    if (field === 'unitPrice' || field === 'units') {
      updatedOrders[index].unitTotalPrice =
        updatedOrders[index].unitPrice * updatedOrders[index].units;
    }

    // Update editedInvoice with updated orders and recalculate totals
    const updatedInvoice = {
      ...editedInvoice,
      orders: updatedOrders,
      totalCost: calculateTotalCost(updatedOrders),
      vat: calculateVAT(updatedOrders),
      grandTotal: calculateGrandTotal(
        calculateTotalCost(updatedOrders),
        calculateVAT(updatedOrders),
      ),
    };

    setEditedInvoice(updatedInvoice);
  };

  const handleAddItem = () => {
    const newItem = {
      itemName: '',
      unitPrice: 0,
      units: 0,
      unitTotalPrice: 0,
      vat: 0,
    };
    const updatedOrders = [...editedInvoice.orders, newItem];

    // Update editedInvoice with updated orders and recalculate totals
    const updatedInvoice = {
      ...editedInvoice,
      orders: updatedOrders,
      totalCost: calculateTotalCost(updatedOrders),
      vat: calculateVAT(updatedOrders),
      grandTotal: calculateGrandTotal(
        calculateTotalCost(updatedOrders),
        calculateVAT(updatedOrders),
      ),
    };
    setEditedInvoice(updatedInvoice);
  };

  const handleDeleteItem = (index: any) => {
    const updatedOrders = editedInvoice.orders.filter((_: any, i: any) => i !== index);

    const updatedInvoice = {
      ...editedInvoice,
      orders: updatedOrders,
      totalCost: calculateTotalCost(updatedOrders),
      vat: calculateVAT(updatedOrders),
      grandTotal: calculateGrandTotal(
        calculateTotalCost(updatedOrders),
        calculateVAT(updatedOrders),
      ),
    };
    setEditedInvoice(updatedInvoice);
  };

  const calculateTotalCost = (orders: any[]) => {
    return orders.reduce((total, order) => total + order.unitTotalPrice, 0);
  };

  const calculateVAT = (orders: any[]) => {
    return orders.reduce((totalVAT, order) => totalVAT + order.units, 0);
  };

  const calculateGrandTotal = (totalCost: number, vat: number) => {
    return (totalCost += (totalCost * vat) / 100);
  };

  if (!selectedInvoice) {
    return <div>Please select an invoice.</div>;
  }

  const orderDate = selectedInvoice.orderDate;
  const parsedDate = isValid(new Date(orderDate)) ? new Date(orderDate) : new Date();
  const formattedOrderDate = format(parsedDate, 'EEEE, MMMM dd, yyyy');

  return (
    (<Box>
      <Stack
        direction="row"
        spacing={{ xs: 1, sm: 2, md: 4 }}
        justifyContent="space-between"
        alignItems="center"
        mb={3}
      >
        <Typography variant="h5"># {editedInvoice.id}</Typography>
        <Box display="flex" gap={1}>
          {editing ? (
            <>
              <Button variant="contained" color="primary" onClick={handleSave}>
                Save
              </Button>
              <Button variant="outlined" color="error" onClick={handleCancel}>
                Cancel
              </Button>
            </>
          ) : (
            <Button variant="contained" color="info" onClick={() => setEditing(true)}>
              Edit Invoice
            </Button>
          )}
        </Box>
      </Stack>
      <Divider></Divider>
      <Stack
        direction="row"
        spacing={{ xs: 1, sm: 2, md: 4 }}
        justifyContent="space-between"
        alignItems="center"
        mb={3}
      >
        <Box>
          <CustomFormLabel htmlFor="demo-simple-select">Order Status</CustomFormLabel>
          <CustomSelect
            value={editedInvoice.status}
            onChange={(e: any) => setEditedInvoice({ ...editedInvoice, status: e.target.value })}
          >
            <MenuItem value="Pending">Pending</MenuItem>
            <MenuItem value="Delivered">Delivered</MenuItem>
            <MenuItem value="Shipped">Shipped</MenuItem>
          </CustomSelect>
        </Box>
        <Box textAlign="right">
          <CustomFormLabel htmlFor="demo-simple-select">Order Date</CustomFormLabel>
          <Typography variant="body1"> {formattedOrderDate}</Typography>
        </Box>
      </Stack>
      <Divider></Divider>
      <Grid container spacing={3} mb={4}>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel>Bill From</CustomFormLabel>
          <CustomTextField
            value={editedInvoice.billFrom}
            onChange={(e: any) => setEditedInvoice({ ...editedInvoice, billFrom: e.target.value })}
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel
            sx={{
              mt: {
                xs: 0,
                sm: 3,
              },
            }}
          >
            Bill To
          </CustomFormLabel>
          <CustomTextField
            value={editedInvoice.billTo}
            onChange={(e: any) => setEditedInvoice({ ...editedInvoice, billTo: e.target.value })}
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
          >
            From Address
          </CustomFormLabel>
          <CustomTextField
            value={editedInvoice.billFromAddress}
            onChange={(e: any) =>
              setEditedInvoice({
                ...editedInvoice,
                billFromAddress: e.target.value,
              })
            }
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
          >
            Bill To Address
          </CustomFormLabel>
          <CustomTextField
            value={editedInvoice.billToAddress}
            onChange={(e: any) =>
              setEditedInvoice({
                ...editedInvoice,
                billToAddress: e.target.value,
              })
            }
            fullWidth
          />
        </Grid>
      </Grid>
      <Paper variant="outlined">
        <TableContainer sx={{ whiteSpace: { xs: 'nowrap', md: 'unset' } }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>
                  <Typography variant="h6" fontSize="14px">
                    Item Name
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6" fontSize="14px">
                    Unit Price
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6" fontSize="14px">
                    Units
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6" fontSize="14px">
                    Total Cost
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6" fontSize="14px">
                    Action
                  </Typography>
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {editedInvoice.orders.map((order: any, index: number) => (
                <TableRow key={index}>
                  <TableCell>
                    <CustomTextField
                      type="text"
                      value={order.itemName}
                      onChange={(e: any) => handleOrderChange(index, 'itemName', e.target.value)}
                      fullWidth
                    />
                  </TableCell>
                  <TableCell>
                    <CustomTextField
                      type="number"
                      value={order.unitPrice}
                      onChange={(e: any) =>
                        handleOrderChange(index, 'unitPrice', parseFloat(e.target.value))
                      }
                      fullWidth
                    />
                  </TableCell>
                  <TableCell>
                    <CustomTextField
                      type="number"
                      value={order.units}
                      onChange={(e: any) =>
                        handleOrderChange(index, 'units', parseInt(e.target.value))
                      }
                      fullWidth
                    />
                  </TableCell>
                  <TableCell>
                    <Typography variant="body1">{order.unitTotalPrice}</Typography>
                  </TableCell>
                  <TableCell>
                    <Tooltip title="Add Item">
                      <IconButton onClick={handleAddItem} color="primary">
                        <IconSquareRoundedPlus width={22} />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete Item">
                      <IconButton color="error" onClick={() => handleDeleteItem(index)}>
                        <IconTrash width={22} />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      <Box p={3} bgcolor="primary.light" mt={3}>
        <Box display="flex" justifyContent="end" gap={3} mb={3}>
          <Typography variant="body1" fontWeight={600}>
            Sub Total:
          </Typography>
          <Typography variant="body1" fontWeight={600}>
            {editedInvoice.totalCost}
          </Typography>
        </Box>
        <Box display="flex" justifyContent="end" gap={3} mb={3}>
          <Typography variant="body1" fontWeight={600}>
            VAT:
          </Typography>
          <Typography variant="body1" fontWeight={600}>
            {editedInvoice.vat}
          </Typography>
        </Box>
        <Box display="flex" justifyContent="end" gap={3}>
          <Typography variant="body1" fontWeight={600}>
            Grand Total:
          </Typography>
          <Typography variant="body1" fontWeight={600}>
            {editedInvoice.grandTotal}
          </Typography>
        </Box>
      </Box>
      {showAlert && (
        <Alert severity="success" sx={{ position: 'fixed', top: 16, right: 16 }}>
          Invoice data updated successfully.
        </Alert>
      )}
    </Box>)
  );
};

export default EditInvoicePage;

===== src/components/apps/invoice/Invoice-detail/index.tsx =====

import React, { useContext, useEffect, useState } from 'react';
import { InvoiceContext } from 'src/context/InvoiceContext/index';
import { useLocation } from 'react-router';
import {
  Typography,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Stack,
  Chip,
  Divider,
  Grid2 as Grid,
} from '@mui/material';
import { format, isValid, parseISO } from 'date-fns';
import { Link } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';

const InvoiceDetail = () => {
  const { invoices } = useContext(InvoiceContext);
  const [selectedInvoice, setSelectedInvoice]: any = useState(null);

  useEffect(() => {
    // Set the first invoice as the default selected invoice initially
    if (invoices.length > 0) {
      setSelectedInvoice(invoices[0]);
    }
  }, [invoices]);

  // Get the last part of the URL path as the billFrom parameter
  const title = useLocation();
  const getTitle = title.pathname.split('/').pop();

  // Find the invoice that matches the billFrom extracted from the URL
  useEffect(() => {
    if (getTitle) {
      const invoice = invoices.find((p: { billFrom: string }) => p.billFrom === getTitle);
      if (invoice) {
        setSelectedInvoice(invoice);
      }
    }
  }, [getTitle, invoices]);

  if (!selectedInvoice) {
    return <div>Loading...</div>;
  }

  const orderDate = selectedInvoice.orderDate
    ? isValid(parseISO(selectedInvoice.orderDate))
      ? format(parseISO(selectedInvoice.orderDate), 'EEEE, MMMM dd, yyyy')
      : 'Invalid Date'
    : format(new Date(), 'EEEE, MMMM dd, yyyy');

  return (<>
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      alignItems="center"
      justifyContent="space-between"
      mb={2}
    >
      <Box
        sx={{
          textAlign: {
            xs: 'center',
            sm: 'left',
          },
        }}
      >
        <Typography variant="h5"># {selectedInvoice.id}</Typography>
        <Box mt={1}>
          <Chip size="small" color="secondary" variant="outlined" label={orderDate}></Chip>
        </Box>
      </Box>

      <Logo />
      <Box textAlign="right">
        {selectedInvoice.status === 'Shipped' ? (
          <Chip size="small" color="primary" label={selectedInvoice.status} />
        ) : selectedInvoice.status === 'Delivered' ? (
          <Chip size="small" color="success" label={selectedInvoice.status} />
        ) : selectedInvoice.status === 'Pending' ? (
          <Chip size="small" color="warning" label={selectedInvoice.status} />
        ) : (
          ''
        )}
      </Box>
    </Stack>
    <Divider></Divider>
    <Grid container spacing={3} mt={2} mb={4}>
      <Grid
        size={{
          xs: 12,
          sm: 6
        }}>
        <Paper variant="outlined">
          <Box p={3} display="flex" flexDirection="column" gap="4px">
            <Typography variant="h6" mb={2}>
              From :
            </Typography>
            <Typography variant="body1">{selectedInvoice.billFrom}</Typography>
            <Typography variant="body1">{selectedInvoice.billFromEmail}</Typography>
            <Typography variant="body1">{selectedInvoice.billFromAddress}</Typography>
            <Typography variant="body1">{selectedInvoice.billFromPhone}</Typography>
          </Box>
        </Paper>
      </Grid>
      <Grid
        size={{
          xs: 12,
          sm: 6
        }}>
        <Paper variant="outlined">
          <Box p={3} display="flex" flexDirection="column" gap="4px">
            <Typography variant="h6" mb={2}>
              To :
            </Typography>
            <Typography variant="body1">{selectedInvoice.billTo}</Typography>
            <Typography variant="body1">{selectedInvoice.billToEmail}</Typography>
            <Typography variant="body1">{selectedInvoice.billToAddress}</Typography>
            <Typography variant="body1">{selectedInvoice.billToPhone}</Typography>
          </Box>
        </Paper>
      </Grid>
    </Grid>
    <Paper variant="outlined">
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Item Name
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Unit Price
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Unit
                </Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="h6" fontSize="14px">
                  Total Cost
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {selectedInvoice.orders.map(
              (
                order: {
                  itemName: string;
                  unitPrice: string;
                  units: number;
                  unitTotalPrice: string;
                },
                index: React.Key | null | undefined,
              ) => (
                <TableRow key={index}>
                  <TableCell>
                    <Typography variant="body1">{order.itemName}</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body1">{order.unitPrice}</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body1">{order.units}</Typography>
                  </TableCell>
                  <TableCell align="right">
                    <Typography variant="body1">{order.unitTotalPrice}</Typography>
                  </TableCell>
                </TableRow>
              ),
            )}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
    <Box p={3} bgcolor="primary.light" mt={3}>
      <Box display="flex" justifyContent="end" gap={3} mb={3}>
        <Typography variant="body1" fontWeight={600}>
          Sub Total:
        </Typography>
        <Typography variant="body1" fontWeight={600}>
          {selectedInvoice.totalCost}
        </Typography>
      </Box>
      <Box display="flex" justifyContent="end" gap={3} mb={3}>
        <Typography variant="body1" fontWeight={600}>
          Vat:
        </Typography>
        <Typography variant="body1" fontWeight={600}>
          {selectedInvoice.vat}
        </Typography>
      </Box>
      <Box display="flex" justifyContent="end" gap={3}>
        <Typography variant="body1" fontWeight={600}>
          Grand Total:
        </Typography>
        <Typography variant="body1" fontWeight={600}>
          {selectedInvoice.grandTotal}
        </Typography>
      </Box>
    </Box>
    <Box display="flex" alignItems="center" gap={1} mt={3} justifyContent="end">
      <Button
        variant="contained"
        color="secondary"
        component={Link}
        to={`/apps/invoice/edit/${selectedInvoice.billFrom}`}
      >
        Edit Invoice
      </Button>
      <Button variant="contained" color="primary" component={Link} to="/apps/invoice/list">
        Back to Invoice List
      </Button>
    </Box>
  </>);
};

export default InvoiceDetail;

===== src/components/apps/invoice/Invoice-list/index.tsx =====

import { useContext, useState } from "react";
import { InvoiceContext } from "src/context/InvoiceContext/index";
import {
  Table,
  TextField,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Tooltip,
  IconButton,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Box,
  Typography,
  Grid2 as Grid,
  Stack,
  InputAdornment,
  Chip,
} from "@mui/material";
import {
  IconEdit,
  IconEye,
  IconListDetails,
  IconSearch,
  IconShoppingBag,
  IconSortAscending,
  IconTrash,
  IconTruck,
} from "@tabler/icons-react";
import CustomCheckbox from "src/components/forms/theme-elements/CustomCheckbox";
import { Link } from 'react-router';

function InvoiceList() {
  const { invoices, deleteInvoice } = useContext(InvoiceContext);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("All");
  const [selectedProducts, setSelectedProducts] = useState<any>([]);
  const [selectAll, setSelectAll] = useState(false);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);

  // Handle status filter change
  const handleClick = (status: string) => {
    setActiveTab(status);
  };

  // Filter invoices based on search term
  const filteredInvoices = invoices.filter(
    (invoice: { billFrom: string; billTo: string; status: string }) => {
      return (
        (invoice.billFrom.toLowerCase().includes(searchTerm.toLowerCase()) ||
          invoice.billTo.toLowerCase().includes(searchTerm.toLowerCase())) &&
        (activeTab === "All" || invoice.status === activeTab)
      );
    }
  );



  // Calculate the counts for different statuses
  const Shipped = invoices.filter(
    (t: { status: string }) => t.status === "Shipped"
  ).length;
  const Delivered = invoices.filter(
    (t: { status: string }) => t.status === "Delivered"
  ).length;
  const Pending = invoices.filter(
    (t: { status: string }) => t.status === "Pending"
  ).length;

  // Toggle all checkboxes
  const toggleSelectAll = () => {
    const selectAllValue = !selectAll;
    setSelectAll(selectAllValue);
    if (selectAllValue) {
      setSelectedProducts(invoices.map((invoice: { id: any }) => invoice.id));
    } else {
      setSelectedProducts([]);
    }
  };

  // Toggle individual product selection
  const toggleSelectProduct = (productId: any) => {
    const index = selectedProducts.indexOf(productId);
    if (index === -1) {
      setSelectedProducts([...selectedProducts, productId]);
    } else {
      setSelectedProducts(
        selectedProducts.filter((id: any) => id !== productId)
      );
    }
  };

  // Handle opening delete confirmation dialog
  const handleDelete = () => {
    setOpenDeleteDialog(true);
  };

  // Handle confirming deletion of selected products
  const handleConfirmDelete = async () => {
    for (const productId of selectedProducts) {
      await deleteInvoice(productId);
    }
    setSelectedProducts([]);
    setSelectAll(false);
    setOpenDeleteDialog(false);
  };

  // Handle closing delete confirmation dialog
  const handleCloseDeleteDialog = () => {
    setOpenDeleteDialog(false);
  };

  return (
    (<Box>
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 3
          }}>
          <Box bgcolor="primary.light" p={3} onClick={() => handleClick("All")} sx={{ cursor: "pointer" }}>
            <Stack direction="row" gap={2} alignItems="center">
              <Box
                width={38}
                height={38}
                bgcolor="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Typography
                  color="primary.contrastText"
                  display="flex"
                  alignItems="center"
                  justifyContent="center"
                >
                  <IconListDetails width={22} />
                </Typography>
              </Box>
              <Box>
                <Typography>Total</Typography>
                <Typography fontWeight={500}>
                  {invoices.length} Invoices
                </Typography>
              </Box>
            </Stack>
          </Box>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 3
          }}>
          <Box bgcolor="secondary.light" p={3} onClick={() => handleClick("Shipped")} sx={{ cursor: "pointer" }}>
            <Stack direction="row" gap={2} alignItems="center">
              <Box
                width={38}
                height={38}
                bgcolor="secondary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Typography
                  color="primary.contrastText"
                  display="flex"
                  alignItems="center"
                  justifyContent="center"
                >
                  <IconShoppingBag width={22} />
                </Typography>
              </Box>
              <Box>
                <Typography>Shipped</Typography>
                <Typography fontWeight={500}>{Shipped} Invoices</Typography>
              </Box>
            </Stack>
          </Box>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 3
          }}>
          <Box bgcolor="success.light" p={3} onClick={() => handleClick("Delivered")} sx={{ cursor: "pointer" }}>
            <Stack direction="row" gap={2} alignItems="center">
              <Box
                width={38}
                height={38}
                bgcolor="success.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Typography
                  color="primary.contrastText"
                  display="flex"
                  alignItems="center"
                  justifyContent="center"
                >
                  <IconTruck width={22} />
                </Typography>
              </Box>
              <Box>
                <Typography>Delivered</Typography>
                <Typography fontWeight={500}>{Delivered} Invoices</Typography>
              </Box>
            </Stack>
          </Box>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 3
          }}>
          <Box bgcolor="warning.light" p={3} onClick={() => handleClick("Pending")} sx={{ cursor: "pointer" }}>
            <Stack direction="row" gap={2} alignItems="center">
              <Box
                width={38}
                height={38}
                bgcolor="warning.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Typography
                  color="primary.contrastText"
                  display="flex"
                  alignItems="center"
                  justifyContent="center"
                >
                  <IconSortAscending width={22} />
                </Typography>
              </Box>
              <Box>
                <Typography>Pending</Typography>
                <Typography fontWeight={500}>{Pending} Invoices</Typography>
              </Box>
            </Stack>
          </Box>
        </Grid>
      </Grid>
      <Stack
        mt={3}
        justifyContent="space-between"
        direction={{ xs: "column", sm: "row" }}
        spacing={{ xs: 1, sm: 2, md: 4 }}
      >
        <TextField
          id="search"
          type="text"
          size="small"
          variant="outlined"
          placeholder="Search"
          value={searchTerm}
          onChange={(e: any) => setSearchTerm(e.target.value)}
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconSearch size={"16"} />
              </InputAdornment>
            ),
          }}
        />
        <Box display="flex" gap={1}>
          {selectAll && (
            <Button
              variant="outlined"
              color="error"
              onClick={handleDelete}
              startIcon={<IconTrash width={18} />}
            >
              Delete All
            </Button>
          )}
          <Button
            variant="contained"
            color="primary"
            component={Link}
            to="/apps/invoice/create"
          >
            New Invoice
          </Button>
        </Box>
      </Stack>
      <Box sx={{ overflowX: "auto" }}>
        <Table sx={{ whiteSpace: { xs: "nowrap", md: "unset" } }}>
          <TableHead>
            <TableRow>
              <TableCell padding="checkbox">
                <CustomCheckbox
                  checked={selectAll}
                  onChange={toggleSelectAll}
                />
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Id
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Bill From
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Bill To
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Total Cost
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6" fontSize="14px">
                  Status
                </Typography>
              </TableCell>
              <TableCell align="center">
                <Typography variant="h6" fontSize="14px">
                  Action
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredInvoices.map(
              (invoice: {
                id: any;
                billFrom: any;
                billTo: any;
                totalCost: any;
                status: any;
              }) => (
                <TableRow key={invoice.id}>
                  <TableCell padding="checkbox">
                    <CustomCheckbox
                      checked={selectedProducts.includes(invoice.id)}
                      onChange={() => toggleSelectProduct(invoice.id)}
                    />
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      {invoice.id}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6" fontSize="14px">
                      {invoice.billFrom}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography fontSize="14px">{invoice.billTo}</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography fontSize="14px">{invoice.totalCost}</Typography>
                  </TableCell>
                  <TableCell>
                    {invoice.status === "Shipped" ? (
                      <Chip
                        color="primary"
                        label={invoice.status}
                        size="small"
                      />
                    ) : invoice.status === "Delivered" ? (
                      <Chip
                        color="success"
                        label={invoice.status}
                        size="small"
                      />
                    ) : invoice.status === "Pending" ? (
                      <Chip
                        color="warning"
                        label={invoice.status}
                        size="small"
                      />
                    ) : (
                      ""
                    )}
                  </TableCell>
                  <TableCell align="center">
                    <Tooltip title="Edit Invoice">
                      <IconButton
                        color="success"
                        component={Link}
                        to={`/apps/invoice/edit/${invoice.billFrom}`}
                      >
                        <IconEdit width={22} />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="View Invoice">
                      <IconButton
                        color="primary"
                        component={Link}
                        to={`/apps/invoice/detail/${invoice.billFrom}`}
                      >
                        <IconEye width={22} />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete Invoice">
                      <IconButton
                        color="error"
                        onClick={() => {
                          setSelectedProducts([invoice.id]);
                          handleDelete();
                        }}
                      >
                        <IconTrash width={22} />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              )
            )}
          </TableBody>
        </Table>
      </Box>
      <Dialog open={openDeleteDialog} onClose={handleCloseDeleteDialog}>
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          Are you sure you want to delete selected invoices?
        </DialogContent>
        <DialogActions>
          <Button variant="contained" onClick={handleCloseDeleteDialog}>
            Cancel
          </Button>
          <Button
            color="error"
            variant="outlined"
            onClick={handleConfirmDelete}
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>)
  );
}
export default InvoiceList;

===== src/components/apps/kanban/CategoryTaskList.tsx =====

import { SetStateAction, useContext, useEffect, useState } from 'react';
import { IconPlus, IconDotsVertical } from '@tabler/icons-react';
import TaskData from './TaskData';
import EditCategoryModal from './TaskModal/EditCategoryModal';
import AddNewTaskModal from './TaskModal/AddNewTaskModal';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { KanbanDataContext } from 'src/context/kanbancontext/index';
import axios from 'src/utils/axios';
import { Box, IconButton, Stack, Tooltip, Typography } from '@mui/material';

function CategoryTaskList({ id }: any) {
  const { todoCategories, deleteCategory, clearAllTasks, deleteTodo } =
    useContext(KanbanDataContext);

  const category = todoCategories.find((cat) => cat.id === id) as any;

  const [allTasks, setAllTasks] = useState(category ? category.child : []);
  const [showModal, setShowModal] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState(category.name);
  const [showEditCategoryModal, setShowEditCategoryModal] = useState(false);
  const [showContainer, setShowContainer] = useState(true);
  const [anchorEl, setAnchorEl] = useState(null);

  const handleClick = (event: any) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  // Find the category and update tasks
  useEffect(() => {
    const category = todoCategories.find((cat) => cat.id === id);
    if (category) {
      setAllTasks(category.child);
    }
  }, [todoCategories, id]);

  const [newTaskData, setNewTaskData]: any = useState({
    task: '',
    taskText: '',
    taskProperty: '',
    date: new Date().toISOString().split('T')[0],
    imageURL: null,
  });

  //Shows the modal for adding a new task.
  const handleShowModal = () => {
    setShowModal(true);
  };
  // Closes the modal
  const handleCloseModal = (): any => {
    setShowModal(false);
  };
  //  Shows the modal for editing a category.
  const handleShowEditCategoryModal = () => {
    handleClose();
    setShowEditCategoryModal(true);
  };
  //Closes the modal for editing a category.
  const handleCloseEditCategoryModal = () => setShowEditCategoryModal(false);

  //Updates the category name
  const handleUpdateCategory = async (updatedName: SetStateAction<string | any>) => {
    try {
      const response = await axios.post('/api/TodoData/updateCategory', {
        categoryId: id,
        categoryName: updatedName,
      });
      if (response.status === 200) {
        setNewCategoryName(updatedName);
      } else {
        throw new Error('Failed to update category');
      }
    } catch (error) {
      }
  };
  //Adds a new task to the category.
  const handleAddTask = async () => {
    try {
      const response = await axios.post('/api/TodoData/addTask', {
        categoryId: id,
        newTaskData: {
          ...newTaskData,
          id: Math.random(),
          taskImage: newTaskData.imageURL,
        },
      });
      if (response.status === 200) {
        setNewTaskData({
          taskText: '',
          taskProperty: '',
          date: newTaskData.date,
          imageURL: '',
        });
        handleCloseModal();
        setNewTaskData('Task added successfully');
        } else {
        throw new Error('Failed to add task');
      }
    } catch (error) {
      }
  };
  // Clears all tasks from the current category.
  const handleClearAll = () => {
    clearAllTasks(id);
    setAllTasks([]);
  };
  // Deletes a specific task.
  const handleDeleteTask = (taskId: number | any) => {
    deleteTodo(taskId);
    setAllTasks((prevTasks: any[]) =>
      prevTasks.filter((task: { id: number }) => task.id !== taskId),
    );
  };
  //Handles the deletion of the current category.
  const handleDeleteClick = () => {
    setShowContainer(false);
    deleteCategory(id);
  };

  const backgroundColor = category
    ? category.name === 'Todo'
      ? 'primary.light'
      : category.name === 'Progress'
        ? 'secondary.light'
        : category.name === 'Pending'
          ? 'warning.light'
          : category.name === 'Done'
            ? 'success.light'
            : 'primary.light'
    : 'primary.light';

  return (
    <>
      <Box width="265px" flexShrink="0px">
        {showContainer && category && (
          <Box px={3} py={2} sx={{ backgroundColor }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="h6" className="fw-semibold">
                {newCategoryName}
              </Typography>
              <Stack direction="row">
                <Box>
                  {category.name === 'Todo' && (
                    <>
                      <Tooltip title="Add Task">
                        <IconButton onClick={handleShowModal}>
                          <IconPlus size="1rem" />
                        </IconButton>
                      </Tooltip>
                      <AddNewTaskModal
                        show={showModal}
                        onHide={handleCloseModal}
                        onSave={handleAddTask}
                        newTaskData={newTaskData}
                        setNewTaskData={setNewTaskData}
                        updateTasks={() => setAllTasks([...allTasks, newTaskData])}
                      />
                    </>
                  )}
                  <EditCategoryModal
                    showModal={showEditCategoryModal}
                    handleCloseModal={handleCloseEditCategoryModal}
                    initialCategoryName={newCategoryName}
                    handleUpdateCategory={handleUpdateCategory}
                  />
                </Box>
                <Tooltip title="Menu">
                  <IconButton onClick={handleClick}>
                    <IconDotsVertical size="1rem" />
                  </IconButton>
                </Tooltip>
                <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
                  <MenuItem onClick={handleShowEditCategoryModal}>Edit</MenuItem>
                  <MenuItem onClick={handleDeleteClick}>Delete</MenuItem>
                  <MenuItem onClick={handleClearAll}>Clear All</MenuItem>
                </Menu>
              </Stack>
            </Box>
            {allTasks.map((task: { id: any }, index: number) => (
              <TaskData
                key={task.id}
                task={task}
                onDeleteTask={() => handleDeleteTask(task.id)}
                index={index}
              />
            ))}
          </Box>
        )}
      </Box>
    </>
  );
}
export default CategoryTaskList;

===== src/components/apps/kanban/KanbanHeader.tsx =====
import { useState, useContext } from 'react';
import { KanbanDataContext } from 'src/context/kanbancontext/index';
import axios from 'src/utils/axios';
import { Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Button,
  Typography,
  Box,
  Grid2 as Grid } from '@mui/material';
import CustomFormLabel from '../../forms/theme-elements/CustomFormLabel';
import CustomTextField from '../../forms/theme-elements/CustomTextField';

function KanbanHeader() {
  const { addCategory, setError } = useContext(KanbanDataContext);
  const [show, setShow] = useState(false);
  const [listName, setListName] = useState('');

  //Closes the modal
  const handleClose = () => setShow(false);
  //open the modal
  const handleShow = () => setShow(true);

  //Handles Add a new category.
  const handleSave = async () => {
    try {
      const response = await axios.post('/api/TodoData/addCategory', {
        categoryName: listName,
      });
      addCategory(response.data.name);
      setListName('');
      setShow(false);
    } catch (error: any) {    }
  };

  const isAddButtonDisabled = listName.trim().length === 0;

  return (<>
    <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
      <Typography variant="h5">Improving Work Processes</Typography>
      <Button variant="contained" onClick={handleShow}>
        Add List
      </Button>
    </Box>
    <Dialog
      open={show}
      onClose={handleClose}
      maxWidth="lg"
      sx={{ '.MuiDialog-paper': { width: '600px' } }}
    >
      <DialogTitle>Add List</DialogTitle>
      <DialogContent>
        <Grid container spacing={3}>
          <Grid
            size={{
              xs: 12,
              lg: 12
            }}>
            <CustomFormLabel htmlFor="default-value">List Name</CustomFormLabel>
            <CustomTextField
              autoFocus
              id="default-value"
              variant="outlined"
              value={listName}
              fullWidth
              onChange={(e: any) => setListName(e.target.value)}
            />
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button variant="outlined" onClick={handleClose} color="error">
          Cancel
        </Button>
        <Button
          variant="contained"
          onClick={handleSave}
          color="primary"
          disabled={isAddButtonDisabled}
        >
          Add List
        </Button>
      </DialogActions>
    </Dialog>
  </>);
}
export default KanbanHeader;

===== src/components/apps/kanban/TaskData.tsx =====

import { useContext, useState } from 'react';
import { IconPencil, IconDotsVertical, IconTrash, IconCalendar } from '@tabler/icons-react';
import EditTaskModal from './TaskModal/EditTaskModal';
import { KanbanDataContext } from 'src/context/kanbancontext/index';
import { Draggable } from '@hello-pangea/dnd';
import axios from 'src/utils/axios';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { Box,
  Chip,
  IconButton,
  ListItemIcon,
  ListItemText,
  Stack,
  Typography } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import dayjs from 'dayjs';
interface TaskDataProps {
  task: { id: any };
  onDeleteTask: () => void;
  index: number;
}
const TaskData: React.FC<TaskDataProps> = ({ task, onDeleteTask, index }: any) => {
  const { setError } = useContext(KanbanDataContext);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editedTask, setEditedTask] = useState(task);
  const [anchorEl, setAnchorEl] = useState(null);

  const handleShowEditModal = () => {
    handleClose();
    setShowEditModal(true);
  };
  const handleCloseEditModal = () => setShowEditModal(false);

  const handleClick = (event: any) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleDeleteClick = () => onDeleteTask(task.id);

  const handleSaveEditedTask = async (editedTaskData: { id: any }) => {
    try {
      const response = await axios.put('/api/TodoData/editTask', {
        taskId: editedTaskData.id,
        newData: editedTaskData,
      });
      if (response.status === 200) {
        setEditedTask(editedTaskData);
      } else {
        throw new Error('Failed to edit task');
      }
    } catch (error: any) {    }
  };

  // Function to format the date as 'DD MMM' (Day and Month)
  const formatDate = (date: string | undefined) => {
    if (date) {
      // If the date is provided, format it to 'DD MMM' (Day and Month)
      const parsedDate = dayjs(date, "DD MMMM", true); // strict parsing mode
      if (parsedDate.isValid()) {
        return parsedDate.format("DD MMM");
      } else {
        // If invalid, try to append the current year
        const currentYear = dayjs().year();
        const newDate = `${date} ${currentYear}`; // Example: '24 july 2024'
        const correctedDate = dayjs(newDate, "DD MMMM YYYY");
        return correctedDate.isValid() ? correctedDate.format("DD MMM") : dayjs().format("DD MMM");
      }
    } else {
      // If the date is not provided, return today's date in 'DD MMM' format
      return dayjs().format("DD MMM");
    }
  };

  const taskDate = formatDate(editedTask.date); // Get formatted task date

  const backgroundColor =
    editedTask.taskProperty === 'Design'
      ? 'success.main'
      : editedTask.taskProperty === 'Development'
        ? 'warning.main'
        : editedTask.taskProperty === 'Mobile'
          ? 'primary.main'
          : editedTask.taskProperty === 'UX Stage'
            ? 'warning.main'
            : editedTask.taskProperty === 'Research'
              ? 'secondary.main'
              : editedTask.taskProperty === 'Data Science'
                ? 'error.main'
                : editedTask.taskProperty === 'Branding'
                  ? 'success.main'
                  : 'primary.contrastText';

  return (
    <Draggable draggableId={task.id} index={index}>
      {(provided: any) => (
        <Box
          mb={3}
          {...provided.draggableProps}
          {...provided.dragHandleProps}
          ref={provided.innerRef}
        >
          <BlankCard>
            <Box px={2} py={1} display="flex" alignItems="center" justifyContent="space-between">
              <Typography fontSize="14px" variant="h6">
                {editedTask.task}
              </Typography>
              <Box>
                <IconButton
                  aria-label="more"
                  aria-controls="long-menu"
                  aria-haspopup="true"
                  onClick={handleClick}
                >
                  <IconDotsVertical size="1rem" />
                </IconButton>
                <Menu
                  id="long-menu"
                  anchorEl={anchorEl}
                  keepMounted
                  open={Boolean(anchorEl)}
                  onClose={handleClose}
                >
                  <MenuItem onClick={handleShowEditModal}>
                    <ListItemIcon>
                      <IconPencil size="1.2rem" />
                    </ListItemIcon>
                    <ListItemText> Edit</ListItemText>
                  </MenuItem>
                  <MenuItem onClick={handleDeleteClick}>
                    <ListItemIcon>
                      <IconTrash size="1.2rem" />{' '}
                    </ListItemIcon>
                    <ListItemText> Delete</ListItemText>
                  </MenuItem>
                </Menu>
                <EditTaskModal
                  show={showEditModal}
                  onHide={handleCloseEditModal}
                  task={task}
                  editedTask={editedTask}
                  onSave={handleSaveEditedTask}
                />
              </Box>
            </Box>
            <Box>
              {editedTask.taskImage && (
                <img
                  src={editedTask.taskImage}
                  alt="Task Image"
                  className="img-fluid"
                  style={{ width: '100%', height: '106px' }}
                />
              )}
            </Box>
            {editedTask.taskText && (
              <Box px={2} py={1}>
                <Typography variant="body2">{editedTask.taskText}</Typography>
              </Box>
            )}
            <Box display="flex" alignItems="center" justifyContent="space-between" px={2} py={1}>
              <Stack direction="row" gap={1}>
                <IconCalendar size="1rem" />
                <Typography variant="body2">  {taskDate}</Typography>
              </Stack>
              <Box>
                <Chip
                  size="small"
                  label={editedTask.taskProperty}
                  sx={{
                    backgroundColor,
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '11px',
                    fontWeight: 400,
                  }}
                />
              </Box>
            </Box>
          </BlankCard>
        </Box>
      )}
    </Draggable>
  );
};
export default TaskData;

===== src/components/apps/kanban/TaskManager.tsx =====

import { useContext } from 'react';
import KanbanHeader from './KanbanHeader';
import { KanbanDataContext } from 'src/context/kanbancontext/index';
import CategoryTaskList from './CategoryTaskList';
import { DragDropContext, Droppable } from '@hello-pangea/dnd';
import SimpleBar from 'simplebar-react';
import { Box } from '@mui/material';

function TaskManager() {
  const { todoCategories, moveTask } = useContext(KanbanDataContext);
  const onDragEnd = (result: { source: any; destination: any; draggableId: any }) => {
    const { source, destination, draggableId } = result;

    // If no destination is provided or the drop is in the same place, do nothing
    if (
      !destination ||
      (source.droppableId === destination.droppableId && source.index === destination.index)
    ) {
      return;
    }

    // Extract necessary information from the result
    const sourceCategoryId = source.droppableId;
    const destinationCategoryId = destination.droppableId;
    const sourceIndex = source.index;
    const destinationIndex = destination.index;

    // Call moveTask function from context
    moveTask(draggableId, sourceCategoryId, destinationCategoryId, sourceIndex, destinationIndex);
  };

  return (
    <>
      <KanbanHeader />
      <SimpleBar>
        <DragDropContext onDragEnd={onDragEnd}>
          <Box display="flex" gap={2}>
            {todoCategories.map((category) => (
              <Droppable droppableId={category.id.toString()} key={category.id}>
                {(provided: any) => (
                  <div ref={provided.innerRef} {...provided.droppableProps}>
                    <CategoryTaskList id={category.id} />
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            ))}
          </Box>
        </DragDropContext>
      </SimpleBar>
    </>
  );
}

export default TaskManager;

===== src/components/apps/kanban/TaskModal/AddNewTaskModal.tsx =====



import { TaskProperties } from '../../../../_mockApis/kanban/KanbanData';
import {
  Button,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid2 as Grid,
} from '@mui/material';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';

function AddNewList({
  show,
  onHide,
  onSave,
  newTaskData,
  setNewTaskData,
  updateTasks,
}: any) {


  const { task, taskText, taskProperty, taskImage } = newTaskData;

  //Function to handle saving changes and updating tasks
  const handleSave = () => {

    // Update the task data with the default date if needed
    setNewTaskData({ ...newTaskData });
    onSave();
    updateTasks();
  };


  const isFormValid = () => {
    return task && taskText && taskProperty && taskImage;
  };
  return (
    (<Dialog
      open={show}
      onClose={onHide}
      PaperProps={{
        component: "form",
      }}
    >
      <DialogTitle>Add Task</DialogTitle>
      <DialogContent>
        <Grid container spacing={3}>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* task title */}
            <CustomFormLabel
              sx={{
                mt: 0,
              }}
              htmlFor="task"
            >
              Task Title *
            </CustomFormLabel>
            <CustomTextField
              id="task"
              variant="outlined"
              fullWidth
              value={task}
              onChange={(e: { target: { value: any; }; }) =>
                setNewTaskData({ ...newTaskData, task: e.target.value })
              }
            />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* task text */}
            <CustomFormLabel
              htmlFor="taskText"
              sx={{
                mt: 0,
              }}
            >
              Text*
            </CustomFormLabel>
            <CustomTextField
              id="taskText"
              variant="outlined"
              fullWidth
              value={taskText}
              onChange={(e: { target: { value: any; }; }) =>
                setNewTaskData({ ...newTaskData, taskText: e.target.value })
              }
            />
          </Grid>
          <Grid size={12}>
            {/* task image */}
            <CustomFormLabel
              htmlFor="taskImage"
              sx={{
                mt: 0,
              }}
            >
              Image URL*
            </CustomFormLabel>
            <CustomTextField
              id="taskImage"
              variant="outlined"
              fullWidth
              value={taskImage}
              onChange={(e: { target: { value: any; }; }) =>
                setNewTaskData({ ...newTaskData, taskImage: e.target.value })
              }
            />
            {taskImage !== undefined && (
              <img

                src={taskImage}
                alt="Selected"
                style={{
                  marginTop: "8px", width: "200px", height: "100px"
                }}
              />
            )}
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* task image */}
            <CustomFormLabel
              htmlFor="taskProperty"
              sx={{
                mt: 0,
              }}
            >
              Task Property *
            </CustomFormLabel>
            <CustomSelect
              fullWidth
              id="taskProperty"
              variant="outlined"
              value={taskProperty}
              onChange={(e: { target: { value: any; }; }) =>
                setNewTaskData({ ...newTaskData, taskProperty: e.target.value })
              }
            >
              <MenuItem value="">Select Task Property</MenuItem>
              {TaskProperties.map((property) => (
                <MenuItem key={property} value={property}>
                  {property}
                </MenuItem>
              ))}
            </CustomSelect>
          </Grid>

        </Grid>
      </DialogContent>
      <DialogActions>
        <Button variant="outlined" color="error" onClick={onHide}>
          Cancel
        </Button>
        <Button
          variant="contained"
          onClick={handleSave}
          disabled={!isFormValid()}
        >
          Add Task
        </Button>
      </DialogActions>
    </Dialog>)
  );
}
export default AddNewList;



===== src/components/apps/kanban/TaskModal/EditCategoryModal.tsx =====

import { useState } from 'react';

import { Button, Dialog, DialogTitle, DialogContent, Grid2 as Grid, DialogActions } from '@mui/material';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';

function EditCategoryModal({
  showModal,
  handleCloseModal,
  handleUpdateCategory,
  initialCategoryName,
}: any) {
  const [newCategoryName, setNewCategoryName] = useState(initialCategoryName);
  // Function to handle saving changes and updating category name
  const handleSave = () => {
    handleUpdateCategory(newCategoryName);
    handleCloseModal();
  };
  return (
    (<Dialog
      open={showModal}
      onClose={handleCloseModal}
      aria-labelledby="alert-dialog-title"
      aria-describedby="alert-dialog-description"
      sx={{ ".MuiDialog-paper": { width: "600px" } }}
    >
      <DialogTitle id="alert-dialog-title">Edit Category</DialogTitle>
      <DialogContent>
        <Grid container spacing={3}>
          <Grid size={12}>
            {/* category title */}
            <CustomFormLabel htmlFor="cname">Category name</CustomFormLabel>
            <CustomTextField
              id="cname"
              variant="outlined"
              fullWidth
              value={newCategoryName}
              onChange={(e: any) => setNewCategoryName(e.target.value)}
            />
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button variant="outlined" color="error" onClick={handleCloseModal}>
          Cancel
        </Button>
        <Button variant="contained" onClick={handleSave} autoFocus>
          Save
        </Button>
      </DialogActions>
    </Dialog>)
  );
}
export default EditCategoryModal;

===== src/components/apps/kanban/TaskModal/EditTaskModal.tsx =====


import { useEffect, useState } from 'react';
import { TaskProperties } from '../../../../_mockApis/kanban/KanbanData';
import {
  Button,

  MenuItem,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid2 as Grid,
} from '@mui/material';
import Dialog from '@mui/material/Dialog';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';

function EditTaskModal({ show, onHide, editedTask, onSave }: any) {
  const [tempEditedTask, setTempEditedTask] = useState(editedTask);

  const [newImageUrl, setNewImageUrl] = useState(editedTask.taskImage || "");
  const [imagePreview, setImagePreview] = useState(editedTask.taskImage || "");

  useEffect(() => {

    setTempEditedTask({
      ...editedTask,
    });
    setNewImageUrl(editedTask.taskImage || "");
    setImagePreview(editedTask.taskImage || "");
  }, [editedTask]);


  // Function to handle changes in the task input fields
  const handleChange = (e: { target: { name: any; value: any } }) => {
    const { name, value } = e.target;
    setTempEditedTask({ ...tempEditedTask, [name]: value });
  };

  // Function to handle changes in the task property
  const handlePropertyChange = (property: any) => {
    setTempEditedTask({ ...tempEditedTask, taskProperty: property });
  };

  // Function to handle saving the changes made to the task and hiding the modal
  const handleSaveChanges = () => {
    const updatedTask = { ...tempEditedTask, taskImage: newImageUrl };
    onSave(updatedTask);
    onHide();
  };



  // Function to handle new image URL input
  const handleNewImageUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value;
    setNewImageUrl(url);
    setImagePreview(url); // Update the preview with the new image URL
  };

  return (
    (<Dialog
      open={show}
      onClose={onHide}
      aria-labelledby="alert-dialog-title"
      aria-describedby="alert-dialog-description"
      PaperProps={{ component: "form" }}
    >
      <DialogTitle id="alert-dialog-title">Edit Task</DialogTitle>
      <DialogContent>
        <Grid container spacing={3}>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* Task title */}
            <CustomFormLabel sx={{ mt: 0 }} htmlFor="task">
              Task Title
            </CustomFormLabel>
            <CustomTextField
              id="task"
              name="task"
              variant="outlined"
              fullWidth
              value={tempEditedTask.task}
              onChange={handleChange}
            />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* Task property */}
            <CustomFormLabel htmlFor="taskProperty" sx={{ mt: 0 }}>
              Task Property *
            </CustomFormLabel>
            <CustomSelect
              fullWidth
              id="taskProperty"
              variant="outlined"
              value={tempEditedTask.taskProperty}
              onChange={(e: any) => handlePropertyChange(e.target.value)}
            >
              {TaskProperties.map((property) => (
                <MenuItem key={property} value={property}>
                  {property}
                </MenuItem>
              ))}
            </CustomSelect>
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6
            }}>
            {/* Task text or image */}
            {tempEditedTask.taskImage ? (
              <>
                {/* Image handling */}
                <CustomFormLabel htmlFor="taskImage" sx={{ mt: 0 }}>
                  Image URL
                </CustomFormLabel>
                <CustomTextField
                  id="taskImage"
                  variant="outlined"
                  fullWidth
                  value={newImageUrl}
                  onChange={handleNewImageUrlChange}
                />
                {imagePreview && (
                  <Grid sx={{ mt: 2 }} size={12}>
                    <CustomFormLabel htmlFor="taskImage">Image Preview:</CustomFormLabel>
                    <img
                      src={imagePreview}
                      alt="Selected"
                      style={{ maxWidth: '100%', height: 'auto', marginTop: '8px', borderRadius: "4px" }}

                    />
                  </Grid>
                )}
              </>
            ) : (
              <>
                {/* Task text */}
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="task-text">
                  Text
                </CustomFormLabel>
                <CustomTextField
                  id="task-text"
                  variant="outlined"
                  fullWidth
                  name="taskText"
                  value={tempEditedTask.taskText}
                  onChange={handleChange}
                />
              </>
            )}
          </Grid>


        </Grid>
      </DialogContent>
      <DialogActions>
        <Button variant="outlined" color="error" onClick={onHide}>
          Close
        </Button>
        <Button variant="contained" onClick={handleSaveChanges} autoFocus>
          Save Changes
        </Button>
      </DialogActions>
    </Dialog>)
  );
}

export default EditTaskModal;
===== src/components/apps/notes/AddNotes.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { addNote } from 'src/store/apps/notes/NotesSlice';
import {
  Button,
  Dialog,
  Fab,
  DialogContent,
  TextField,
  DialogActions,
  DialogContentText,
  Typography,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { IconCheck } from '@tabler/icons-react';

interface Props {
  colors: any[];
}

const AddNotes = ({ colors }: Props) => {
  const dispatch = useDispatch();
  const [open, setOpen] = React.useState(false);
  const [scolor, setScolor] = React.useState<string>('primary');
  const id = useSelector((state) => state.notesReducer.notes.length + 1);
  const [title, setTitle] = React.useState('');

  const setColor = (e: string) => {
    setScolor(e);
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Button variant="contained" disableElevation color="primary" onClick={handleClickOpen}>
        Add Note
      </Button>
      <Dialog open={open} onClose={handleClose}>
        <DialogContent>
          <Typography variant="h5" mb={2} fontWeight={700}>
            Add New Note
          </Typography>
          <DialogContentText>
            To add new notes please enter your description and choose note colors. and press the
            submit button to add new note.
          </DialogContentText>
          <TextField
            multiline
            rows={5}
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            margin="normal"
            id="description"
            label="Add Note Description"
            type="text"
            fullWidth
            size="small"
            variant="outlined"
          />
          <Typography variant="h6" my={2}>
            Choose Color
          </Typography>
          {colors.map((color) => (
            <Fab
              color={color.disp}
              sx={{
                marginRight: '3px',
                transition: '0.1s ease-in',
                scale: scolor === color.disp ? '0.9' : '0.7',
              }}
              size="small"
              key={color.disp}
              onClick={() => setColor(color.disp)}
            >
              {scolor === color.disp ? <IconCheck /> : ''}
            </Fab>
          ))}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button
            disabled={title === ''}
            onClick={(e) => {
              e.preventDefault();
              dispatch(addNote(id, title, scolor));
              setOpen(false);
              setTitle('');
            }}
            variant="contained"
          >
            Submit
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default AddNotes;

===== src/components/apps/notes/NoteContent.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useSelector, useDispatch } from 'src/store/Store';
import {
  Box,
  Divider,
  Fab,
  TextField,
  FormLabel,
  useTheme,
  IconButton,
  Typography,
} from '@mui/material';
import { IconCheck, IconMenu2 } from '@tabler/icons-react';

import { UpdateNote } from '../../../store/apps/notes/NotesSlice';
import AddNotes from './AddNotes';
import { NotesType } from 'src/types/apps/notes';

interface colorsType {
  lineColor: string;
  disp: string | any;
  id: number;
}

interface Props {
  
  // toggleNoteSidebar: func,

  toggleNoteSidebar: (event: React.MouseEvent<HTMLElement>) => void,
}

const NoteContent = ({ toggleNoteSidebar }: Props) => {
  const noteDetails: NotesType = useSelector(
    (state) => state.notesReducer.notes[state.notesReducer.notesContent - 1],
  );
  const theme = useTheme();

  const dispatch = useDispatch();

  const colorvariation: colorsType[] = [
    {
      id: 1,
      lineColor: theme.palette.warning.main,
      disp: 'warning',
    },
    {
      id: 2,
      lineColor: theme.palette.info.main,
      disp: 'info',
    },
    {
      id: 3,
      lineColor: theme.palette.error.main,
      disp: 'error',
    },
    {
      id: 4,
      lineColor: theme.palette.success.main,
      disp: 'success',
    },
    {
      id: 5,
      lineColor: theme.palette.primary.main,
      disp: 'primary',
    },
  ];

  return (
    <Box sx={{ height: { lg: 'calc(100vh - 250px)', sm: '100vh' }, maxHeight: '700px' }}>
      {/* ------------------------------------------- */}
      {/* Header Part */}
      {/* ------------------------------------------- */}
      <Box display="flex" alignItems="center" justifyContent="space-between" p={2}>
        <IconButton onClick={toggleNoteSidebar}>
          <IconMenu2 stroke={1.5} />
        </IconButton>
        <AddNotes colors={colorvariation} />
      </Box>
      <Divider />
      {/* ------------------------------------------- */}
      {/* Edit notes */}
      {/* ------------------------------------------- */}
      {noteDetails && noteDetails.deleted === false ? (
        <Box p={3}>
          <FormLabel htmlFor="outlined-multiline-static">
            <Typography variant="h6" mb={2} fontWeight={600} color="text.primary">
              Edit Note
            </Typography>
          </FormLabel>

          <TextField
            id="outlined-multiline-static"
            placeholder="Edit Note"
            multiline
            fullWidth
            rows={5}
            variant="outlined"
            value={noteDetails.title}
            onChange={(e) => dispatch(UpdateNote(noteDetails.id, 'title', e.target.value))}
          />
          <br />
          <Typography variant="h6" mt={3} mb={2} fontWeight={600}>
            Change Note Color
          </Typography>

          {colorvariation.map((color1) => (
            <Fab
              sx={{
                marginRight: '3px',
                boxShadow: 'none',
                transition: '0.1s ease-in',
                scale: noteDetails.color === color1.disp ? '0.9' : '0.7',
              }}
              size="small"
              key={color1.id}
              color={color1?.disp}
              onClick={() => dispatch(UpdateNote(noteDetails.id, 'color', color1.disp))}
            >
              {noteDetails.color === color1.disp ? <IconCheck width="16" /> : ''}
            </Fab>
          ))}
        </Box>
      ) : (
        <Box sx={{ textAlign: 'center', fontSize: '24px', mt: 2 }}>Select a Note</Box>
      )}
    </Box>
  );
};


export default NoteContent;

===== src/components/apps/notes/NoteList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { IconButton, Box, Stack, Typography, TextField, Tooltip, Alert } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import Scrollbar from '../../custom-scroll/Scrollbar';
import {
  fetchNotes,
  SelectNote,
  DeleteNote,
  SearchNotes,
} from '../../../store/apps/notes/NotesSlice';
import { IconTrash } from '@tabler/icons-react';
import { NotesType } from 'src/types/apps/notes';

const NoteList = () => {
  const dispatch = useDispatch();
  const activeNote = useSelector((state) => state.notesReducer.notesContent);
  const searchTerm = useSelector((state) => state.notesReducer.noteSearch);

  useEffect(() => {
    dispatch(fetchNotes());
  }, [dispatch]);

  const filterNotes = (notes: NotesType[], nSearch: string) => {
    if (nSearch !== '')
      return notes.filter(
        (t: any) =>
          !t.deleted &&
          t.title.toLocaleLowerCase().concat(' ').includes(nSearch.toLocaleLowerCase()),
      );

    return notes.filter((t) => !t.deleted);
  };

  const notes = useSelector((state) =>
    filterNotes(state.notesReducer.notes, state.notesReducer.noteSearch),
  );

  return (
    <>
      <Box p={3} px={2}>
        <TextField
          id="search"
          value={searchTerm}
          placeholder="Search Notes"
          inputProps={{ 'aria-label': 'Search Notes' }}
          size="small"
          type="search"
          variant="outlined"
          fullWidth
          onChange={(e) => dispatch(SearchNotes(e.target.value))}
        />
        <Typography variant="h6" mb={0} mt={4} pl={1}>
          All Notes
        </Typography>
      </Box>
      <Box>
        <Scrollbar sx={{ height: { lg: 'calc(100vh - 300px)', sm: '100vh' }, maxHeight: '700px' }}>
          {notes && notes.length ? (
            notes.map((note) => (
              <Box key={note.id} px={2}>
                <Box
                  p={2}
                  sx={{
                    position: 'relative',
                    cursor: 'pointer',
                    mb: 1,
                    transition: '0.1s ease-in',
                    transform: activeNote === note.id ? 'scale(1)' : 'scale(0.95)',
                    backgroundColor: `${note.color}.light`,
                  }}
                  onClick={() => dispatch(SelectNote(note.id))}
                >
                  <Typography variant="h6" noWrap color={note.color + '.main'}>
                    {note.title}
                  </Typography>
                  <Stack direction="row" justifyContent="space-between" alignItems="center">
                    <Typography variant="caption">
                      {new Date(note.datef).toLocaleDateString()}
                    </Typography>
                    <Tooltip title="Delete">
                      <IconButton
                        aria-label="delete"
                        size="small"
                        onClick={() => dispatch(DeleteNote(note.id))}
                      >
                        <IconTrash width={18} />
                      </IconButton>
                    </Tooltip>
                  </Stack>
                </Box>
              </Box>
            ))
          ) : (
            <Box m={2}>
              <Alert severity="error" variant="filled" sx={{ color: 'white' }}>
                No Notes Found!
              </Alert>
            </Box>
          )}
        </Scrollbar>
      </Box>
    </>
  );
};

export default NoteList;

===== src/components/apps/notes/NoteSidebar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Drawer, Theme, useMediaQuery } from '@mui/material';
import NoteList from './NoteList';

const drawerWidth = 260;

interface NoteType {
  isMobileSidebarOpen: boolean;
  onSidebarClose: (event: React.MouseEvent<HTMLElement>) => void;
}

const NoteSidebar = ({ isMobileSidebarOpen, onSidebarClose }: NoteType) => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  return (
    <Drawer
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        zIndex: lgUp ? 0 : 1,
        [`& .MuiDrawer-paper`]: { position: 'relative' },
      }}
      open={isMobileSidebarOpen}
      onClose={onSidebarClose}
      variant={lgUp ? 'persistent' : 'temporary'}
    >
      <NoteList />
    </Drawer>
  );
};

export default NoteSidebar;

===== src/components/apps/tickets/TicketFilter.tsx =====
import { Box, Grid2 as Grid, Typography, styled } from '@mui/material';
import { useDispatch, useSelector } from 'src/store/Store';
import { TicketType } from 'src/types/apps/ticket';
import { setVisibilityFilter } from '../../../store/apps/tickets/TicketSlice';

const BoxStyled = styled(Box)(() => ({
  padding: '30px',
  transition: '0.1s ease-in',
  cursor: 'pointer',
  color: 'inherit',
  '&:hover': {
    transform: 'scale(1.03)',
  },
}));

const TicketFilter = () => {
  const dispatch = useDispatch();
  const counter: TicketType[] = useSelector((state) => state.ticketReducer.tickets);
  const pendingC = counter.filter((t) => t.Status === 'Pending').length;
  const openC = counter.filter((t) => t.Status === 'Open').length;
  const closeC = counter.filter((t) => t.Status === 'Closed').length;

  return (
    (<Grid container spacing={3} textAlign="center">
      <Grid
        size={{
          lg: 3,
          sm: 6,
          xs: 12
        }}>
        <BoxStyled
          onClick={() => dispatch(setVisibilityFilter('total_tickets'))}
          sx={{ backgroundColor: 'primary.light', color: 'primary.main' }}
        >
          <Typography variant="h3">{counter.length}</Typography>
          <Typography variant="h6">Total Tickets</Typography>
        </BoxStyled>
      </Grid>
      <Grid
        size={{
          lg: 3,
          sm: 6,
          xs: 12
        }}>
        <BoxStyled
          onClick={() => dispatch(setVisibilityFilter('Pending'))}
          sx={{ backgroundColor: 'warning.light', color: 'warning.main' }}
        >
          <Typography variant="h3">{pendingC}</Typography>
          <Typography variant="h6">Pending Tickets</Typography>
        </BoxStyled>
      </Grid>
      <Grid
        size={{
          lg: 3,
          sm: 6,
          xs: 12
        }}>
        <BoxStyled
          onClick={() => dispatch(setVisibilityFilter('Open'))}
          sx={{ backgroundColor: 'success.light', color: 'success.main' }}
        >
          <Typography variant="h3">{openC}</Typography>
          <Typography variant="h6">Open Tickets</Typography>
        </BoxStyled>
      </Grid>
      <Grid
        size={{
          lg: 3,
          sm: 6,
          xs: 12
        }}>
        <BoxStyled
          onClick={() => dispatch(setVisibilityFilter('Closed'))}
          sx={{ backgroundColor: 'error.light', color: 'error.main' }}
        >
          <Typography variant="h3">{closeC}</Typography>
          <Typography variant="h6">Closed Tickets</Typography>
        </BoxStyled>
      </Grid>
    </Grid>)
  );
};

export default TicketFilter;

===== src/components/apps/tickets/TicketListing.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'src/store/Store';
import { format } from 'date-fns';
import {
  Box,
  Table,
  TableHead,
  TableRow,
  TableCell,
  Typography,
  TableBody,
  IconButton,
  Chip,
  Stack,
  Avatar,
  Tooltip,
  TextField,
  Pagination,
  useTheme,
  TableContainer,
} from '@mui/material';
import { fetchTickets, DeleteTicket, SearchTicket } from 'src/store/apps/tickets/TicketSlice';
import { IconTrash } from '@tabler/icons-react';
import { TicketType } from 'src/types/apps/ticket';

const TicketListing = () => {
  const dispatch = useDispatch();
  const theme = useTheme();

  useEffect(() => {
    dispatch(fetchTickets());
  }, [dispatch]);

  const getVisibleTickets = (tickets: TicketType[], filter: string, ticketSearch: string) => {
    switch (filter) {
      case 'total_tickets':
        return tickets.filter(
          (c) => !c.deleted && c.ticketTitle.toLocaleLowerCase().includes(ticketSearch),
        );

      case 'Pending':
        return tickets.filter(
          (c) =>
            !c.deleted &&
            c.Status === 'Pending' &&
            c.ticketTitle.toLocaleLowerCase().includes(ticketSearch),
        );

      case 'Closed':
        return tickets.filter(
          (c) =>
            !c.deleted &&
            c.Status === 'Closed' &&
            c.ticketTitle.toLocaleLowerCase().includes(ticketSearch),
        );

      case 'Open':
        return tickets.filter(
          (c) =>
            !c.deleted &&
            c.Status === 'Open' &&
            c.ticketTitle.toLocaleLowerCase().includes(ticketSearch),
        );

      default:
        throw new Error(`Unknown filter: ${filter}`);
    }
  };

  const tickets = useSelector((state) =>
    getVisibleTickets(
      state.ticketReducer.tickets,
      state.ticketReducer.currentFilter,
      state.ticketReducer.ticketSearch,
    ),
  );
  const ticketBadge = (ticket: TicketType) => {
    return ticket.Status === 'Open'
      ? theme.palette.success.light
      : ticket.Status === 'Closed'
        ? theme.palette.error.light
        : ticket.Status === 'Pending'
          ? theme.palette.warning.light
          : ticket.Status === 'Moderate'
            ? theme.palette.primary.light
            : 'primary';
  };

  return (
    <Box mt={4}>
      <Box sx={{ maxWidth: '260px', ml: 'auto' }} mb={3}>
        <TextField
          size="small"
          label="Search"
          fullWidth
          onChange={(e) => dispatch(SearchTicket(e.target.value))}
        />
      </Box>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Id</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Ticket</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Assigned To</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Date</Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="h6">Action</Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {tickets.map((ticket) => (
              <TableRow key={ticket.Id} hover>
                <TableCell>{ticket.Id}</TableCell>
                <TableCell>
                  <Box>
                    <Typography variant="h6" fontWeight={600} noWrap>
                      {ticket.ticketTitle}
                    </Typography>
                    <Typography
                      color="textSecondary"
                      noWrap
                      sx={{ maxWidth: '250px' }}
                      variant="subtitle2"
                      fontWeight={400}
                    >
                      {ticket.ticketDescription}
                    </Typography>
                  </Box>
                </TableCell>
                <TableCell>
                  <Stack direction="row" gap="10px" alignItems="center">
                    <Avatar
                      src={ticket.thumb}
                      alt={ticket.thumb}
                      sx={{
                        borderRadius: '100%',
                        width: '35',
                      }}
                    />
                    <Typography variant="h6">{ticket.AgentName}</Typography>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Chip
                    sx={{
                      backgroundColor: ticketBadge(ticket),
                    }}
                    size="small"
                    label={ticket.Status}
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle1">
                    {format(new Date(ticket.Date), 'E, MMM d')}
                  </Typography>
                </TableCell>
                <TableCell align="right">
                  <Tooltip title="Delete Ticket">
                    <IconButton onClick={() => dispatch(DeleteTicket(ticket.Id))}>
                      <IconTrash size="18" />
                    </IconButton>
                  </Tooltip>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Box my={3} display="flex" justifyContent={'center'}>
        <Pagination count={10} color="primary" />
      </Box>
    </Box>
  );
};

export default TicketListing;

===== src/components/apps/userprofile/followers/FollowerCard.tsx =====
import {
  CardContent,
  Box,
  Stack,
  Avatar,
  Grid2 as Grid,
  Button,
  Typography,
  Chip,
  TextField,
  InputAdornment,
} from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import BlankCard from 'src/components/shared/BlankCard';
import { useSelector, useDispatch } from 'src/store/Store';
import { fetchFollwores, onToggleFollow } from 'src/store/apps/userProfile/UserProfileSlice';
import { IconMapPin, IconSearch } from '@tabler/icons-react';
import { userType } from 'src/types/apps/users';

const FollowerCard = () => {
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchFollwores());
  }, [dispatch]);

  const filterFollowers = (followers: userType[], cSearch: string) => {
    if (followers)
      return followers.filter((t) =>
        t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()),
      );

    return followers;
  };
  const [search, setSearch] = React.useState('');
  const getFollowers = useSelector((state) =>
    filterFollowers(state.userpostsReducer.followers, search),
  );

  return (<>
    <Grid container spacing={3}>
      <Grid
        size={{
          sm: 12,
          lg: 12
        }}>
        <Stack direction="row" alignItems={'center'} mt={2}>
          <Box>
            <Typography variant="h3">
              Followers &nbsp;
              <Chip label={getFollowers.length} color="secondary" size="small" />
            </Typography>
          </Box>
          <Box ml="auto">
            <TextField
              id="outlined-search"
              placeholder="Search Followers"
              size="small"
              type="search"
              variant="outlined"
              inputProps={{ 'aria-label': 'Search Followers' }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size="14" />
                  </InputAdornment>
                ),
              }}
              fullWidth
              onChange={(e) => setSearch(e.target.value)}
            />
          </Box>
        </Stack>
      </Grid>
      {getFollowers.map((profile) => {
        return (
          (<Grid
            key={profile.id}
            size={{
              xs: 12,
              lg: 4
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction={'row'} gap={2} alignItems="center">
                  <Avatar alt="Remy Sharp" src={profile.avatar} />
                  <Box>
                    <Typography variant="h6" textOverflow={'ellipsis'} noWrap>{profile.name}</Typography>
                    <Typography
                      variant="caption"
                      sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}
                    >
                      <IconMapPin size="14" />
                      {profile.country}
                    </Typography>
                  </Box>
                  <Box ml="auto">
                    {profile.isFollowed ? (
                      <Button
                        variant="contained"
                        color="primary"
                        size="small"
                        onClick={() => dispatch(onToggleFollow(profile.id))}
                      >
                        Followed
                      </Button>
                    ) : (
                      <Button
                        variant="outlined"
                        color="primary"
                        size="small"
                        onClick={() => dispatch(onToggleFollow(profile.id))}
                      >
                        Follow
                      </Button>
                    )}
                  </Box>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>)
        );
      })}
    </Grid>
  </>);
};

export default FollowerCard;

===== src/components/apps/userprofile/friends/FriendsCard.tsx =====
import {
  CardContent,
  Box,
  Stack,
  Avatar,
  Grid2 as Grid,
  Typography,
  Chip,
  TextField,
  InputAdornment,
  Divider,
  IconButton,
} from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import BlankCard from 'src/components/shared/BlankCard';
import { useSelector, useDispatch } from 'src/store/Store';
import { fetchFollwores } from 'src/store/apps/userProfile/UserProfileSlice';
import {
  IconBrandFacebook,
  IconBrandGithub,
  IconBrandInstagram,
  IconBrandTwitter,
  IconSearch,
} from '@tabler/icons-react';
import { userType } from 'src/types/apps/users';

interface socialType {
  name: string;
  icon: React.ReactElement;
}

const SocialIcons: socialType[] = [
  {
    name: 'Facebook',
    icon: <IconBrandFacebook size="18" color="#1877F2" />,
  },
  {
    name: 'Instagram',
    icon: <IconBrandInstagram size="18" color="#D7336D" />,
  },
  {
    name: 'Github',
    icon: <IconBrandGithub size="18" color="#006097" />,
  },
  {
    name: 'Twitter',
    icon: <IconBrandTwitter size="18" color="#1C9CEA" />,
  },
];

const FriendsCard = () => {
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchFollwores());
  }, [dispatch]);

  const filterFriends = (friends: userType[], cSearch: string) => {
    if (friends)
      return friends.filter((t) =>
        t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()),
      );

    return friends;
  };
  const [search, setSearch] = React.useState('');
  const getFriends = useSelector((state) =>
    filterFriends(state.userpostsReducer.followers, search),
  );

  return (<>
    <Grid container spacing={3}>
      <Grid
        size={{
          sm: 12,
          lg: 12
        }}>
        <Stack direction="row" alignItems={'center'} mt={2}>
          <Box>
            <Typography variant="h3">
              Friends &nbsp;
              <Chip label={getFriends.length} color="secondary" size="small" />
            </Typography>
          </Box>
          <Box ml="auto">
            <TextField
              id="outlined-search"
              placeholder="Search Friends"
              size="small"
              type="search"
              variant="outlined"
              inputProps={{ 'aria-label': 'Search Followers' }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size="14" />
                  </InputAdornment>
                ),
              }}
              fullWidth
              onChange={(e) => setSearch(e.target.value)}
            />
          </Box>
        </Stack>
      </Grid>
      {getFriends.map((profile) => {
        return (
          (<Grid
            key={profile.id}
            size={{
              xs: 12,
              lg: 4
            }}>
            <BlankCard className="hoverCard">
              <CardContent>
                <Stack direction={'column'} gap={2} alignItems="center">
                  <Avatar
                    alt="Remy Sharp"
                    src={profile.avatar}
                    sx={{ width: '80px', height: '80px' }}
                  />
                  <Box textAlign={'center'}>
                    <Typography variant="h5">{profile.name}</Typography>
                    <Typography variant="caption">{profile.role}</Typography>
                  </Box>
                </Stack>
              </CardContent>
              <Divider />
              <Box p={2} py={1} textAlign={'center'} sx={{ backgroundColor: 'grey.100' }}>
                {SocialIcons.map((sicon) => {
                  return <IconButton key={sicon.name}>{sicon.icon}</IconButton>;
                })}
              </Box>
            </BlankCard>
          </Grid>)
        );
      })}
    </Grid>
  </>);
};

export default FriendsCard;

===== src/components/apps/userprofile/gallery/GalleryCard.tsx =====
import {
  Box,
  Stack,
  Grid2 as Grid,
  Typography,
  Chip,
  TextField,
  InputAdornment,
  IconButton,
  CardMedia,
  Skeleton,
} from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect, useState } from 'react';
import BlankCard from 'src/components/shared/BlankCard';
import { useSelector, useDispatch } from 'src/store/Store';
import { fetchPhotos } from 'src/store/apps/userProfile/UserProfileSlice';
import { IconDotsVertical, IconSearch } from '@tabler/icons-react';
import { format } from 'date-fns';
import { GallaryType } from 'src/types/apps/users';

import FsLightbox from 'fslightbox-react';

const GalleryCard = () => {
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchPhotos());
  }, [dispatch]);

  const filterPhotos = (photos: GallaryType[], cSearch: string) => {
    if (photos)
      return photos.filter((t) => t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()));

    return photos;
  };
  const [search, setSearch] = React.useState('');
  const getPhotos = useSelector((state) => filterPhotos(state.userpostsReducer.gallery, search));

  // skeleton
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 500);

    return () => clearTimeout(timer);
  }, []);

  const [toggler, setToggler] = useState(false);
  const [currentImage, setCurrentImage] = useState(null);

  const openLightbox = (image: any) => {
    setCurrentImage(image);
    setToggler((prev) => !prev);
  };

  return (<>
    <Grid container spacing={3}>
      <Grid
        size={{
          sm: 12,
          lg: 12
        }}>
        <Stack direction="row" alignItems={'center'} mt={2}>
          <Box>
            <Typography variant="h3">
              Gallery &nbsp;
              <Chip label={getPhotos.length} color="secondary" size="small" />
            </Typography>
          </Box>
          <Box ml="auto">
            <TextField
              id="outlined-search"
              placeholder="Search Gallery"
              size="small"
              type="search"
              variant="outlined"
              inputProps={{ 'aria-label': 'Search Gallery' }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size="14" />
                  </InputAdornment>
                ),
              }}
              fullWidth
              onChange={(e) => setSearch(e.target.value)}
            />
          </Box>
        </Stack>
      </Grid>
      {getPhotos.map((photo) => {
        return (
          (<Grid
            key={photo.id}
            size={{
              xs: 12,
              lg: 4
            }}>
            <BlankCard className="hoverCard">
              {isLoading ? (
                <>
                  <Skeleton
                    variant="rectangular"
                    animation="wave"
                    width="100%"
                    height={220}
                  ></Skeleton>
                </>
              ) : (
                <CardMedia
                  component={'img'}
                  height="220"
                  alt="Remy Sharp"
                  src={photo.cover}
                  onClick={() => openLightbox(photo.cover)}
                  sx={{ cursor: 'pointer' }}
                />
              )}
              <Box p={3}>
                <Stack direction="row" gap={1}>
                  <Box>
                    <Typography variant="h6">{photo.name}jpg</Typography>
                    <Typography variant="caption">
                      {format(new Date(photo.time), 'E, MMM d, yyyy')}
                    </Typography>
                  </Box>
                  <Box ml={'auto'}>
                    <IconButton>
                      <IconDotsVertical size="16" />
                    </IconButton>
                  </Box>
                </Stack>
              </Box>
            </BlankCard>
          </Grid>)
        );
      })}
    </Grid>
    {/* FSLightbox component */}
    <FsLightbox toggler={!toggler} sources={currentImage ? [currentImage] : []} />
  </>);
};

export default GalleryCard;

===== src/components/apps/userprofile/profile/IntroCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Stack, Typography } from '@mui/material';

import ChildCard from 'src/components/shared/ChildCard';
import { IconBriefcase, IconDeviceDesktop, IconMail, IconMapPin } from '@tabler/icons-react';

const IntroCard = () => (
  <ChildCard>
    <Typography fontWeight={600} variant="h4" mb={2}>
      Introduction
    </Typography>
    <Typography color="textSecondary" variant="subtitle2" mb={2}>
      Hello, I am Julia Roberts. I love making websites and graphics. Lorem ipsum dolor sit amet,
      consectetur adipiscing elit.
    </Typography>
    <Stack direction="row" gap={2} alignItems="center" mb={3}>
      <IconBriefcase size="21" />
      <Typography variant="h6">Sir, P P Institute Of Science</Typography>
    </Stack>
    <Stack direction="row" gap={2} alignItems="center" mb={3}>
      <IconMail size="21" />
      <Typography variant="h6">xyzjonathan@gmail.com</Typography>
    </Stack>
    <Stack direction="row" gap={2} alignItems="center" mb={3}>
      <IconDeviceDesktop size="21" />
      <Typography variant="h6">www.xyz.com</Typography>
    </Stack>
    <Stack direction="row" gap={2} alignItems="center" mb={1}>
      <IconMapPin size="21" />
      <Typography variant="h6">Newyork, USA - 100001</Typography>
    </Stack>
  </ChildCard>
);

export default IntroCard;

===== src/components/apps/userprofile/profile/PhotosCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Typography, ImageList, ImageListItem, Skeleton, Box } from '@mui/material';

import img1 from 'src/assets/images/products/s1.jpg';
import img2 from 'src/assets/images/products/s2.jpg';
import img3 from 'src/assets/images/products/s3.jpg';
import img4 from 'src/assets/images/products/s4.jpg';
import img5 from 'src/assets/images/products/s5.jpg';
import img6 from 'src/assets/images/products/s6.jpg';
import img7 from 'src/assets/images/products/s11.jpg';
import img8 from 'src/assets/images/products/s8.jpg';
import ChildCard from 'src/components/shared/ChildCard';

interface photoType {
  img: string;
  id: number;
}

const photos: photoType[] = [
  {
    img: img1,
    id: 1,
  },
  {
    img: img2,
    id: 2,
  },
  {
    img: img3,
    id: 3,
  },
  {
    img: img4,
    id: 4,
  },
  {
    img: img5,
    id: 5,
  },
  {
    img: img6,
    id: 6,
  },
  {
    img: img7,
    id: 7,
  },
  {
    img: img8,
    id: 8,
  },
  {
    img: img1,
    id: 9,
  },
];

const PhotosCard = () => {

  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 500);
    
    return () => clearTimeout(timer);
  }, []);

  return (
    <ChildCard>
      <Typography variant="h4">Photos</Typography>
      <ImageList cols={3} gap={20}>
        {photos.map((photo) => (
          <Box key={photo.id}>
            {
              isLoading ? (
                <>
                  <Skeleton
                    variant="rectangular"
                    animation="wave"
                    width="100%"
                    height={93}
                    key={photo.id}
                  ></Skeleton>
                </>
              ) : (
                <ImageListItem key={photo.id}>
                  <img
                    srcSet={`${photo.img} 1x, ${photo.img} 2x`}
                    alt={photo.img}
                    loading="lazy"
                    style={{ borderRadius: 8 }}
                  />
                </ImageListItem>
              )}
          </Box>
        ))}
      </ImageList>
    </ChildCard >
  )
};

export default PhotosCard;

===== src/components/apps/userprofile/profile/Post.tsx =====
import Grid from '@mui/material/Grid2';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'src/store/Store';

import { fetchPosts } from 'src/store/apps/userProfile/UserProfileSlice';
import PostItem from './PostItem';
import { PostTextBox } from './PostTextBox';
import { PostType } from 'src/types/apps/userProfile';

const Post = () => {
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchPosts());
  }, [dispatch]);

  const getPosts: PostType[] = useSelector((state) => state.userpostsReducer.posts);

  return (
    (<Grid container spacing={3}>
      <Grid
        size={{
          sm: 12
        }}>
        <PostTextBox />
      </Grid>
      {getPosts.map((posts) => {
        return (
          (<Grid
            key={posts.id}
            size={{
              sm: 12
            }}>
            <PostItem post={posts} />
          </Grid>)
        );
      })}
    </Grid>)
  );
};

export default Post;

===== src/components/apps/userprofile/profile/PostComments.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Stack, Avatar, Box, Typography, Tooltip, Fab, TextField, Button } from '@mui/material';
import { IconArrowBackUp, IconCircle, IconThumbUp } from '@tabler/icons-react';

import { useDispatch } from 'src/store/Store';
import uniqueId from 'lodash/uniqueId';
import { addReply } from 'src/store/apps/userProfile/UserProfileSlice';
import {
  PostType,
  Comment as CommentType,
  CommentDataType,
  Reply,
  ProfileType,
} from 'src/types/apps/userProfile';

interface CommentProps {
  comment: CommentType | any;
  post: PostType;
}
interface ReplyProps {
  data: CommentDataType;
  reply: Reply[];
  profile: ProfileType;
}
const PostComments = ({ comment, post }: CommentProps) => {
  const [replyTxt, setReplyTxt] = useState<any>('');
  const [showReply, setShowReply] = useState(false);
  const dispatch = useDispatch();
  const onSubmit = async (id: number, commentid: string | any, reply: CommentDataType) => {
    const replyId = uniqueId('#REPLY_');
    const newReply: PostType[] | any = {
      id: replyId,
      profile: {
        id: uniqueId('#REPLY_'),
        avatar: post?.profile.avatar,
        name: post?.profile.name,
        time: 'now',
      },
      data: {
        comment: reply,
        likes: {
          like: false,
          value: 0,
        },
        replies: [],
      },
    };
    dispatch(addReply(id, commentid, newReply));
    setReplyTxt('');
    setShowReply(false);
  };

  return (
    <>
      <Box mt={2} p={3} sx={{ borderColor: (theme: any) => theme.palette.divider, borderWidth: '1px', borderStyle: 'solid' }}>
        <Stack direction={'row'} gap={2} alignItems="center">
          <Avatar
            alt="Remy Sharp"
            src={comment?.profile.avatar}
            sx={{ width: '33px', height: '33px' }}
          />
          <Typography variant="h6">{comment?.profile.name}</Typography>
          <Typography variant="caption" color="textSecondary">
            <IconCircle size="7" fill="" fillOpacity={'0.1'} strokeOpacity="0.1" />{' '}
            {comment?.profile.time}
          </Typography>
        </Stack>
        <Box py={2}>
          <Typography color="textSecondary">{comment?.data.comment}</Typography>
        </Box>
        <Stack direction="row" gap={1} alignItems="center">
          <Tooltip title="Like" placement="top">
            <Fab
              size="small"
              color={
                comment?.data && comment?.data.likes && comment?.data.likes.like
                  ? 'primary'
                  : 'inherit'
              }
            >
              <IconThumbUp size="16" />
            </Fab>
          </Tooltip>
          <Typography variant="body1" fontWeight={600}>
            {comment?.data && comment?.data.likes && comment?.data.likes.value}
          </Typography>
          <Tooltip title="Reply" placement="top">
            <Fab sx={{ ml: 2 }} size="small" color="info" onClick={() => setShowReply(!showReply)}>
              <IconArrowBackUp size="16" />
            </Fab>
          </Tooltip>
          {comment?.data.replies.length > 0 ? comment?.data.replies.length : 0}
        </Stack>
      </Box>
      {comment?.data.replies ? (
        <>
          {comment?.data.replies.map((reply: ReplyProps) => {
            return (
              <Box pl={4} key={reply.data.comment}>
                <Box
                  mt={2}
                  p={3}
                  sx={{ borderColor: (theme: any) => theme.palette.grey[100], borderWidth: '1px', borderStyle: 'solid' }}
                >
                  <Stack direction={'row'} gap={2} alignItems="center">
                    <Avatar alt="Remy Sharp" src={reply.profile.avatar} />
                    <Typography variant="h6">{reply.profile.name}</Typography>
                    <Typography variant="caption" color="textSecondary">
                      <IconCircle size="7" fill="" fillOpacity={'0.1'} strokeOpacity="0.1" />{' '}
                      {reply.profile.time}
                    </Typography>
                  </Stack>
                  <Box py={2}>
                    <Typography color="textSecondary">{reply.data.comment}</Typography>
                  </Box>
                </Box>
              </Box>
            );
          })}
        </>
      ) : (
        ''
      )}
      {showReply ? (
        <Box p={2}>
          <Stack direction={'row'} gap={2} alignItems="center">
            <Avatar
              alt="Remy Sharp"
              src={post?.profile.avatar}
              sx={{ width: '33px', height: '33px' }}
            />
            <TextField
              placeholder="Reply"
              value={replyTxt}
              onChange={(e) => setReplyTxt(e.target.value)}
              variant="outlined"
              fullWidth
            />
            <Button variant="contained" onClick={() => onSubmit(post.id, comment.id, replyTxt)}>
              Reply
            </Button>
          </Stack>
        </Box>
      ) : (
        ''
      )}
    </>
  );
};

export default PostComments;

===== src/components/apps/userprofile/profile/PostItem.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';

import {
  Stack,
  Avatar,
  Box,
  Typography,
  CardMedia,
  Grid2 as Grid,
  IconButton,
  Fab,
  Tooltip,
  TextField,
  Button,
  Divider,
} from '@mui/material';
import { IconCircle, IconMessage2, IconShare, IconThumbUp } from '@tabler/icons-react';
import uniqueId from 'lodash/uniqueId';
import { useDispatch, useSelector } from 'src/store/Store';
import { likePosts, addComment } from 'src/store/apps/userProfile/UserProfileSlice';
import PostComments from './PostComments';
import BlankCard from '../../../shared/BlankCard';
import { Comment as CommentType, PostType } from 'src/types/apps/userProfile';

interface Props {
  post: PostType;
}

const PostItem = ({ post }: Props) => {
  const dispatch = useDispatch();
  const customizer = useSelector((state) => state.customizer);
  const handleLike = async (postId: number) => {
    dispatch(likePosts(postId));
  };
  const [comText, setComText] = useState<any>('');

  const onSubmit = async (id: number, comment: CommentType) => {
    const commentId = uniqueId('#COMMENT_');
    const newComment: any = {
      id: commentId,
      profile: {
        id: uniqueId('#COMMENT_'),
        avatar: post?.profile.avatar,
        name: post?.profile.name,
        time: 'now',
      },
      data: {
        comment: comment,
        likes: {
          like: false,
          value: 0,
        },
        replies: [],
      },
    };

    dispatch(addComment(id, newComment));
    setComText('');
  };

  return (
    (<BlankCard>
      <Box p={3}>
        <Stack direction={'row'} gap={2} alignItems="center">
          <Avatar alt="Remy Sharp" src={post?.profile.avatar} />
          <Typography variant="h6">{post?.profile.name}</Typography>
          <Typography variant="caption" color="textSecondary">
            <IconCircle size="7" fill="" fillOpacity={'0.1'} strokeOpacity="0.1" />{' '}
            {post?.profile.time}
          </Typography>
        </Stack>
        {/**Post Content**/}
        <Box py={2}>{post?.data.content}</Box>
        {/**If Post has Image**/}
        {post.data.images.length > 0 ? (
          <Box>
            <Grid container spacing={3} mb={2}>
              {post?.data.images.map((photo) => {
                return (
                  (<Grid
                    key={photo.img}
                    size={{
                      sm: 12,
                      lg: photo.featured ? 12 : 6
                    }}>
                    <CardMedia
                      component="img"
                      sx={{ borderRadius: customizer.borderRadius / 4, height: 360 }}
                      image={photo.img}
                      alt="cover"
                      width={'100%'}
                    />
                  </Grid>)
                );
              })}
            </Grid>
          </Box>
        ) : (
          ''
        )}
        {/**If Post has Video**/}
        {post?.data.video ? (
          <CardMedia
            sx={{
              borderRadius: customizer.borderRadius / 4,
              height: 300,
              mb: 2,
            }}
            component="iframe"
            src={`https://www.youtube.com/embed/${post?.data.video}`}
          />
        ) : (
          ''
        )}
        {/**Post Like Comment Share buttons**/}
        <Box>
          <Stack direction="row" gap={1} alignItems="center">
            <Tooltip title="Like" placement="top">
              <Fab
                size="small"
                color={
                  post?.data && post?.data.likes && post?.data.likes.like ? 'primary' : 'inherit'
                }
                onClick={() => handleLike(post?.id)}
              >
                <IconThumbUp size="16" />
              </Fab>
            </Tooltip>
            <Typography variant="body1" fontWeight={600}>
              {post?.data && post?.data.likes && post?.data.likes.value}
            </Typography>
            <Tooltip title="Comment" placement="top">
              <Fab sx={{ ml: 2 }} size="small" color="secondary">
                <IconMessage2 size="16" />
              </Fab>
            </Tooltip>
            <Typography variant="body1" fontWeight={600}>
              {post?.data.comments ? post?.data.comments.length : 0}
            </Typography>
            <Tooltip title="Share" placement="top">
              <IconButton sx={{ ml: 'auto' }}>
                <IconShare size="16" />
              </IconButton>
            </Tooltip>
          </Stack>
        </Box>
        {/**Comments if any**/}
        <Box>
          {post?.data.comments ? (
            <>
              {post?.data.comments.map((comment) => {
                return <PostComments comment={comment} key={comment.id} post={post} />;
              })}
            </>
          ) : (
            ''
          )}
        </Box>
      </Box>
      <Divider />
      <Box p={2}>
        <Stack direction={'row'} gap={2} alignItems="center">
          <Avatar
            alt="Remy Sharp"
            src={post?.profile.avatar}
            sx={{ width: '33px', height: '33px' }}
          />
          <TextField
            placeholder="Comment"
            value={comText}
            onChange={(e) => setComText(e.target.value)}
            variant="outlined"
            fullWidth
          />
          <Button variant="contained" onClick={() => onSubmit(post?.id, comText)}>
            Comment
          </Button>
        </Stack>
      </Box>
    </BlankCard>)
  );
};


export default PostItem;

===== src/components/apps/userprofile/profile/PostTextBox.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Stack, Fab, TextField, Button } from '@mui/material';
import { IconPhoto, IconNotebook } from '@tabler/icons-react';
import ChildCard from 'src/components/shared/ChildCard';

export const PostTextBox = () => {
  return (
    <ChildCard>
      <TextField
        id="outlined-multiline-static"
        placeholder="Share your thoughts"
        multiline
        fullWidth
        rows={4}
      />
      <Stack direction="row" gap={1} mt={2} alignItems="center">
        <Fab size="small" color="primary">
          <IconPhoto size="16" />
        </Fab>
        <Button variant="text" color="inherit" component="label">
          <input hidden accept="image/*" multiple type="file" />
          Photo / Video
        </Button>

        <Button
          variant="text"
          color="inherit"
          component="label"
          startIcon={
            <Fab size="small" color="secondary">
              <IconNotebook size="16" />
            </Fab>
          }
        >
          Article
          <input hidden accept="image/*" multiple type="file" />
        </Button>

        <Button variant="contained" color="primary" sx={{ ml: 'auto' }}>
          Post
        </Button>
      </Stack>
    </ChildCard>
  );
};

===== src/components/apps/userprofile/profile/ProfileBanner.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Grid2 as Grid,
  Box,
  Typography,
  Button,
  Avatar,
  Stack,
  CardMedia,
  styled,
  Fab,
} from '@mui/material';
import profilecover from 'src/assets/images/backgrounds/profilebg.jpg';
import userimg from 'src/assets/images/profile/user-1.jpg';
import {
  IconBrandDribbble,
  IconBrandFacebook,
  IconBrandTwitter,
  IconBrandYoutube,
  IconFileDescription,
  IconUserCheck,
  IconUserCircle,
} from '@tabler/icons-react';
import ProfileTab from './ProfileTab';
import BlankCard from '../../../shared/BlankCard';

const ProfileBanner = () => {
  const ProfileImage = styled(Box)(() => ({
    backgroundImage: 'linear-gradient(#50b2fc,#f44c66)',
    borderRadius: '50%',
    width: '110px',
    height: '110px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    margin: '0 auto'
  }));

  return (<>
    <BlankCard>
      <CardMedia component="img" image={profilecover} alt={profilecover} width="100%" />
      <Grid container spacing={0} justifyContent="center" alignItems="center">
        {/* Post | Followers | Following */}
        <Grid
          sx={{
            order: {
              xs: '2',
              sm: '2',
              lg: '1',
            },
          }}
          size={{
            lg: 4,
            sm: 12,
            md: 5,
            xs: 12
          }}>
          <Stack direction="row" textAlign="center" justifyContent="center" gap={6} m={3}>
            <Box>
              <Typography color="text.secondary">
                <IconFileDescription width="20" />
              </Typography>
              <Typography variant="h4" fontWeight="600">
                938
              </Typography>
              <Typography color="textSecondary" variant="h6" fontWeight={400}>
                Posts
              </Typography>
            </Box>
            <Box>
              <Typography color="text.secondary">
                <IconUserCircle width="20" />
              </Typography>
              <Typography variant="h4" fontWeight="600">
                3,586
              </Typography>
              <Typography color="textSecondary" variant="h6" fontWeight={400}>
                Followers
              </Typography>
            </Box>
            <Box>
              <Typography color="text.secondary">
                <IconUserCheck width="20" />
              </Typography>
              <Typography variant="h4" fontWeight="600">
                2,659
              </Typography>
              <Typography color="textSecondary" variant="h6" fontWeight={400}>
                Following
              </Typography>
            </Box>
          </Stack>
        </Grid>
        {/* about profile */}
        <Grid
          sx={{
            order: {
              xs: '1',
              sm: '1',
              lg: '2',
            },
          }}
          size={{
            lg: 4,
            sm: 12,
            xs: 12
          }}>
          <Box
            display="flex"
            alignItems="center"
            textAlign="center"
            justifyContent="center"
            sx={{
              mt: '-85px',
            }}
          >
            <Box>
              <ProfileImage>
                <Avatar
                  src={userimg}
                  alt={userimg}
                  sx={{
                    borderRadius: '50%',
                    width: '100px',
                    height: '100px',
                    border: '4px solid #fff',
                  }}
                />
              </ProfileImage>
              <Box mt={1}>
                <Typography fontWeight={600} variant="h5">
                  Mathew Anderson
                </Typography>
                <Typography color="textSecondary" variant="h6" fontWeight={400}>
                  Designer
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        {/* friends following buttons */}
        <Grid
          sx={{
            order: {
              xs: '3',
              sm: '3',
              lg: '3',
            },
          }}
          size={{
            lg: 4,
            sm: 12,
            xs: 12
          }}>
          <Stack direction={'row'} gap={2} alignItems="center" justifyContent="center" my={2}>
            <Fab size="small" color="primary" sx={{ backgroundColor: '#1877F2' }}>
              <IconBrandFacebook size="16" />
            </Fab>
            <Fab size="small" color="primary" sx={{ backgroundColor: '#1DA1F2' }}>
              <IconBrandTwitter size="18" />
            </Fab>
            <Fab size="small" color="error" sx={{ backgroundColor: '#EA4C89' }}>
              <IconBrandDribbble size="18" />
            </Fab>
            <Fab size="small" color="error" sx={{ backgroundColor: '#CD201F' }}>
              <IconBrandYoutube size="18" />
            </Fab>
            <Button color="primary" variant="contained">
              Add To Story
            </Button>
          </Stack>
        </Grid>
      </Grid>
      {/**TabbingPart**/}
      <ProfileTab />
    </BlankCard>
  </>);
};

export default ProfileBanner;

===== src/components/apps/userprofile/profile/ProfileTab.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Tabs, Tab, Box } from '@mui/material';
import { IconHeart, IconPhoto, IconUserCircle } from '@tabler/icons-react';
import { Link, useLocation } from 'react-router';

const ProfileTab = () => {
  const location = useLocation();
  const [value, setValue] = React.useState(location.pathname);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  interface profileType {
    label: string;
    icon: any;
    to: string;
  }

  const ProfileTabs: profileType[] = [
    {
      label: 'Profile',
      icon: <IconUserCircle size="20" />,
      to: '/user-profile',
    },
    {
      label: 'Followers',
      icon: <IconHeart size="20" />,
      to: '/apps/followers',
    },
    {
      label: 'Friends',
      icon: <IconUserCircle size="20" />,
      to: '/apps/friends',
    },
    {
      label: 'Gallery',
      icon: <IconPhoto size="20" />,
      to: '/apps/gallery',
    },
  ];

  return (
    <Box mt={1} sx={{ mt: 1, backgroundColor: (theme) => theme.palette.grey[100] }}>
      <Box justifyContent={'end'} display="flex" sx={{ overflow: 'auto', width: { xs: '333px', sm: 'auto' } }}>
        <Tabs value={value} onChange={handleChange} aria-label="scrollable prevent tabs example" variant="scrollable" scrollButtons="auto">
          {ProfileTabs.map((tab) => {
            return (
              <Tab
                iconPosition="start"
                label={tab.label}
                sx={{ minHeight: '50px' }}
                icon={tab.icon}
                component={Link}
                to={tab.to}
                value={tab.to}
                key={tab.label}
              />
            );
          })}
        </Tabs>
      </Box>
    </Box>
  );
};

export default ProfileTab;

===== src/components/BranchSelector.tsx =====
// File: src/components/BranchSelector.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  Menu,
  MenuItem,
  Typography,
  Divider,
  ListItemIcon,
  ListItemText,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconBuilding, IconChevronDown, IconCheck } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

interface Props {
  compact?: boolean;
}

const BranchSelector: React.FC<Props> = ({ compact = false }) => {
  const { t } = useTranslation();
  const { selectedBranch, branches, selectBranch } = useAuth();
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    if (branches.length > 1) {
      setAnchorEl(event.currentTarget);
    }
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleBranchSelect = async (branch: Branch) => {
    try {
      await selectBranch(branch);
      handleClose();
    } catch (error) {
      }
  };

  if (!selectedBranch) return null;

  return (
    <Box>
      <Button
        onClick={handleClick}
        sx={{
          color: 'inherit',
          textTransform: 'none',
          display: 'flex',
          alignItems: 'center',
          gap: 1,
          px: compact ? 1 : 2,
          py: 0.5,
          minWidth: compact ? 'auto' : 200,
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.04)'
          },
          borderRadius: 1
        }}
        disabled={branches.length <= 1}
      >
        <IconBuilding size={18} />
        {!compact && (
          <Box sx={{ textAlign: 'left', flex: 1 }}>
            <Typography 
              variant="body2" 
              sx={{ 
                fontWeight: 500,
                fontSize: isMobile ? '0.8rem' : '0.875rem',
                lineHeight: 1.2
              }}
              noWrap
            >
              {selectedBranch.name}
            </Typography>
            <Typography 
              variant="caption" 
              sx={{ 
                opacity: 0.7,
                fontSize: isMobile ? '0.7rem' : '0.75rem',
                lineHeight: 1
              }}
              noWrap
            >
              {selectedBranch.company.name}
            </Typography>
          </Box>
        )}
        {branches.length > 1 && <IconChevronDown size={14} />}
      </Button>

      <Menu
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        PaperProps={{
          sx: { minWidth: 280 }
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <Box sx={{ px: 2, py: 1 }}>
          <Typography variant="subtitle2" color="text.secondary">
            {t('branch.selectBranch')}
          </Typography>
        </Box>
        <Divider />
        
        {branches.map((branch) => (
          <MenuItem
            key={branch.id}
            onClick={() => handleBranchSelect(branch)}
            selected={branch.id === selectedBranch?.id}
            sx={{ py: 1.5 }}
          >
            <ListItemIcon>
              {branch.id === selectedBranch?.id ? (
                <IconCheck size={20} color="primary" />
              ) : (
                <IconBuilding size={20} />
              )}
            </ListItemIcon>
            <ListItemText>
              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                {branch.name}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {branch.company.name}
              </Typography>
            </ListItemText>
          </MenuItem>
        ))}
      </Menu>
    </Box>
  );
};

export default BranchSelector;

===== src/components/charts/Area Chart/code/AreaChartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const AreaChartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Area Chart',
  },
];

const AreaChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionsareachart:Props = {
    chart: {
      id: 'area-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        enabled: true,
      },
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      width: '3',
      curve: 'smooth',
    },
    colors: [primary, secondary],
    xaxis: {
      type: 'datetime',
      categories: [
        '2018-09-19T00:00:00',
        '2018-09-19T01:30:00',
        '2018-09-19T02:30:00',
        '2018-09-19T03:30:00',
        '2018-09-19T04:30:00',
        '2018-09-19T05:30:00',
        '2018-09-19T06:30:00',
      ],
    },
    yaxis: {
      opposite: false,
      labels: {
        show: true,
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    grid: {
      show: false,
    },
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesareachart = [
    {
      name: 'Sales Summery 1',
      data: [31, 40, 28, 51, 42, 109, 100],
    },
    {
      name: 'Sales Summery 2',
      data: [11, 32, 45, 32, 34, 52, 41],
    },
  ];

    return (
        <Chart options={optionsareachart} series={seriesareachart} type="area" height="300px" />
    );
};

export default AreaChart;`}
      </CodeDialog>
    </>
  );
};

export default AreaChartCode;

===== src/components/charts/Candlestick Chart/code/CandlestickChartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CandlestickChartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';


const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Candlestick Chart',
  },
];

const CandlestickChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionscandlestickchart: Props = {
    chart: {
      height: 350,
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    xaxis: {
      type: 'datetime',
    },
    yaxis: {
      tooltip: {
        enabled: true,
      },
    },
    plotOptions: {
      candlestick: {
        colors: {
          upward: primary,
          downward: secondary,
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriecandlestickchart: any = [
    {
      data: [
        { x: new Date(1538778600000), y: [6629.81, 6650.5, 6623.04, 6633.33] },
        { x: new Date(1538780400000), y: [6632.01, 6643.59, 6620, 6630.11] },
        { x: new Date(1538782200000), y: [6630.71, 6648.95, 6623.34, 6635.65] },
        { x: new Date(1538784000000), y: [6635.65, 6651, 6629.67, 6638.24] },
        { x: new Date(1538785800000), y: [6638.24, 6640, 6620, 6624.47] },
        { x: new Date(1538787600000), y: [6624.53, 6636.03, 6621.68, 6624.31] },
        { x: new Date(1538789400000), y: [6624.61, 6632.2, 6617, 6626.02] },
        { x: new Date(1538791200000), y: [6627, 6627.62, 6584.22, 6603.02] },
        { x: new Date(1538793000000), y: [6605, 6608.03, 6598.95, 6604.01] },
        { x: new Date(1538794800000), y: [6604.5, 6614.4, 6602.26, 6608.02] },
        { x: new Date(1538796600000), y: [6608.02, 6610.68, 6601.99, 6608.91] },
        { x: new Date(1538798400000), y: [6608.91, 6618.99, 6608.01, 6612] },
        { x: new Date(1538800200000), y: [6612, 6615.13, 6605.09, 6612] },
        { x: new Date(1538802000000), y: [6612, 6624.12, 6608.43, 6622.95] },
        { x: new Date(1538803800000), y: [6623.91, 6623.91, 6615, 6615.67] },
        { x: new Date(1538805600000), y: [6618.69, 6618.74, 6610, 6610.4] },
        { x: new Date(1538807400000), y: [6611, 6622.78, 6610.4, 6614.9] },
        { x: new Date(1538809200000), y: [6614.9, 6626.2, 6613.33, 6623.45] },
        { x: new Date(1538811000000), y: [6623.48, 6627, 6618.38, 6620.35] },
        { x: new Date(1538812800000), y: [6619.43, 6620.35, 6610.05, 6615.53] },
        { x: new Date(1538814600000), y: [6615.53, 6617.93, 6610, 6615.19] },
        { x: new Date(1538816400000), y: [6615.19, 6621.6, 6608.2, 6620] },
        { x: new Date(1538818200000), y: [6619.54, 6625.17, 6614.15, 6620] },
        { x: new Date(1538820000000), y: [6620.33, 6634.15, 6617.24, 6624.61] },
        { x: new Date(1538821800000), y: [6625.95, 6626, 6611.66, 6617.58] },
        { x: new Date(1538823600000), y: [6619, 6625.97, 6595.27, 6598.86] },
        { x: new Date(1538825400000), y: [6598.86, 6598.88, 6570, 6587.16] },
        { x: new Date(1538827200000), y: [6588.86, 6600, 6580, 6593.4] },
        { x: new Date(1538829000000), y: [6593.99, 6598.89, 6585, 6587.81] },
        { x: new Date(1538830800000), y: [6587.81, 6592.73, 6567.14, 6578] },
        { x: new Date(1538832600000), y: [6578.35, 6581.72, 6567.39, 6579] },
        { x: new Date(1538834400000), y: [6579.38, 6580.92, 6566.77, 6575.96] },
        { x: new Date(1538836200000), y: [6575.96, 6589, 6571.77, 6588.92] },
        { x: new Date(1538838000000), y: [6588.92, 6594, 6577.55, 6589.22] },
        { x: new Date(1538839800000), y: [6589.3, 6598.89, 6589.1, 6596.08] },
        { x: new Date(1538841600000), y: [6597.5, 6600, 6588.39, 6596.25] },
        { x: new Date(1538843400000), y: [6598.03, 6600, 6588.73, 6595.97] },
        { x: new Date(1538845200000), y: [6595.97, 6602.01, 6588.17, 6602] },
        { x: new Date(1538847000000), y: [6602, 6607, 6596.51, 6599.95] },
        { x: new Date(1538848800000), y: [6600.63, 6601.21, 6590.39, 6591.02] },
        { x: new Date(1538850600000), y: [6591.02, 6603.08, 6591, 6591] },
        { x: new Date(1538852400000), y: [6591, 6601.32, 6585, 6592] },
        { x: new Date(1538854200000), y: [6593.13, 6596.01, 6590, 6593.34] },
        { x: new Date(1538856000000), y: [6593.34, 6604.76, 6582.63, 6593.86] },
        { x: new Date(1538857800000), y: [6593.86, 6604.28, 6586.57, 6600.01] },
        { x: new Date(1538859600000), y: [6601.81, 6603.21, 6592.78, 6596.25] },
        { x: new Date(1538861400000), y: [6596.25, 6604.2, 6590, 6602.99] },
        { x: new Date(1538863200000), y: [6602.99, 6606, 6584.99, 6587.81] },
        { x: new Date(1538865000000), y: [6587.81, 6595, 6583.27, 6591.96] },
        { x: new Date(1538866800000), y: [6591.97, 6596.07, 6585, 6588.39] },
        { x: new Date(1538868600000), y: [6587.6, 6598.21, 6587.6, 6594.27] },
        { x: new Date(1538870400000), y: [6596.44, 6601, 6590, 6596.55] },
        { x: new Date(1538872200000), y: [6598.91, 6605, 6596.61, 6600.02] },
        { x: new Date(1538874000000), y: [6600.55, 6605, 6589.14, 6593.01] },
        { x: new Date(1538875800000), y: [6593.15, 6605, 6592, 6603.06] },
        { x: new Date(1538877600000), y: [6603.07, 6604.5, 6599.09, 6603.89] },
        { x: new Date(1538879400000), y: [6604.44, 6604.44, 6600, 6603.5] },
        { x: new Date(1538881200000), y: [6603.5, 6603.99, 6597.5, 6603.86] },
        { x: new Date(1538883000000), y: [6603.85, 6605, 6600, 6604.07] },
        { x: new Date(1538884800000), y: [6604.98, 6606, 6604.07, 6606] },
      ],
    },
  ];

    return (
        <Chart
            options={optionscandlestickchart}
            series={seriecandlestickchart}
            type="candlestick"
            height="308px"
            width={'95%'}
        />
    );
};

export default CandlestickChart;
`}
      </CodeDialog>
    </>
  );
};

export default CandlestickChartCode;

===== src/components/charts/Column Chart/code/ColumnChartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColumnChartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Column Chart',
  },
];

const ColumnChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const error = theme.palette.error.main;

  const optionscolumnchart: Props = {
    chart: {
      id: 'column-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, error],
    plotOptions: {
      bar: {
        horizontal: false,
        endingShape: 'rounded',
        columnWidth: '20%',
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2,
      colors: ['transparent'],
    },
    xaxis: {
      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],
    },
    yaxis: {
      title: {
        text: '$ (thousands)',
      },
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      y: {
        formatter(val: any) {
          return '$ {val} thousands';
        },
      },
      theme: 'dark',
    },
    grid: {
      show: false,
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
  };
  const seriescolumnchart: any = [
    {
      name: 'Desktop',
      data: [44, 55, 57, 56, 61, 58, 63, 60, 66],
    },
    {
      name: 'Mobile',
      data: [76, 85, 101, 98, 87, 105, 91, 114, 94],
    },
    {
      name: 'Other',
      data: [35, 41, 36, 26, 45, 48, 52, 53, 41],
    },
  ];

  return (    
        <Chart
          options={optionscolumnchart}
          series={seriescolumnchart}
          type="bar"
          height="300px"
        />      
  );
};

export default ColumnChart;

`}
      </CodeDialog>
    </>
  );
};

export default ColumnChartCode;

===== src/components/charts/Doughnut Charts/code/DoughnutChartsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DoughnutChartsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import  Grid  from '@mui/material/Grid2';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Doughtnut Chart',
  },
];

const DoughnutChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const warning = theme.palette.warning.main;

  // 1
  const optionsdoughnutchart: Props = {
    chart: {
      id: 'donut-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesdoughnutchart = [45, 15, 27, 18, 35];

    return (
        <Chart
            options={optionsdoughnutchart}
            series={seriesdoughnutchart}
            type="donut"
            height="300px"
        />
    );
};

export default DoughnutChart;
`}
      </CodeDialog>
    </>
  );
};

export default DoughnutChartsCode;

===== src/components/charts/Gradient Chart/code/GradientChartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const GradientChartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Gradient Chart',
  },
];

const GredientChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  
  const optionsgredientchart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      dropShadow: {
        enabled: true,
        color: 'rgba(0,0,0,0.2)',
        top: 12,
        left: 4,
        blur: 3,
        opacity: 0.4,
      },
    },
    stroke: {
      width: 7,
      curve: 'smooth',
    },

    xaxis: {
      type: 'datetime',
      categories: [
        '1/11/2000',
        '2/11/2000',
        '3/11/2000',
        '4/11/2000',
        '5/11/2000',
        '6/11/2000',
        '7/11/2000',
        '8/11/2000',
        '9/11/2000',
        '10/11/2000',
        '11/11/2000',
        '12/11/2000',
        '1/11/2001',
        '2/11/2001',
        '3/11/2001',
        '4/11/2001',
        '5/11/2001',
        '6/11/2001',
      ],
    },
    fill: {
      type: 'gradient',
      gradient: {
        shade: 'dark',
        gradientToColors: [primary],
        shadeIntensity: 1,
        type: 'horizontal',
        opacityFrom: 1,
        opacityTo: 0.9,
        stops: [0, 100, 100, 100],
      },
    },
    markers: {
      size: 4,
      opacity: 0.9,
      colors: [primary],
      strokeColor: '#fff',
      strokeWidth: 2,

      hover: {
        size: 7,
      },
    },
    yaxis: {
      min: 0,
      max: 40,
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriesgredientchart: any = [
    {
      name: 'Likes',
      data: [4, 3, 10, 9, 35, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5],
    },
  ];

    return (
        <Chart
            options={optionsgredientchart}
            series={seriesgredientchart}
            type="line"
            height="300px"
        />
    );
};

export default GredientChart;`}
      </CodeDialog>
    </>
  );
};

export default GradientChartCode;

===== src/components/charts/Line Chart/code/LineChartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const LineChartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Line Chart',
  },
];

const LineChart = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionslinechart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        type: 'x',
        enabled: true,
      },
      toolbar: {
        show: false,
      },
      shadow: {
        enabled: true,
        color: '#000',
        top: 18,
        left: 7,
        blur: 10,
        opacity: 1,
      },
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
      title: {
        text: 'Month',
      },
    },
    grid: {
      show: false,
    },
    colors: [primary, secondary],
    dataLabels: {
      enabled: true,
    },
    stroke: {
      curve: 'straight',
      width: '2',
    },
    legend: {
      position: 'top',
      horizontalAlign: 'right',
      floating: true,
      offsetY: -25,
      offsetX: -5,
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const serieslinechart: any = [
    {
      name: 'High - 2013',
      data: [28, 29, 33, 36, 32, 32, 33],
    },
    {
      name: 'Low - 2013',
      data: [12, 11, 14, 18, 17, 13, 13],
    },
  ];

  return (
    <Chart
        options={optionslinechart}
        series={serieslinechart}
        type="line"
        height="308px"
        width={'90%'}
    />
  );
};

export default LineChart;`}
      </CodeDialog>
    </>
  );
};

export default LineChartCode;

===== src/components/charts/Pie Charts/code/PieChartsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const PieChartsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import  Grid  from '@mui/material/Grid2';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Doughtnut Chart',
  },
];

const DoughnutChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const warning = theme.palette.warning.main;

  // 2
  const optionspiechart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      fillSeriesColor: false,
    },
  };
  const seriespiechart = [45, 15, 27, 18, 35];

  return (
    <Chart options={optionspiechart} series={seriespiechart} type="pie" height="300px" />
  );
};

export default DoughnutChart;
`}
      </CodeDialog>
    </>
  );
};

export default PieChartsCode;

===== src/components/charts/Radar Charts/code/RadarChartsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const RadarChartsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import  Grid  from '@mui/material/Grid2';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radialbar Chart',
  },
];

const RadialbarChart = () => {
  
   // chart color
   const theme = useTheme();
   const primary = theme.palette.primary.main;
   const secondary = theme.palette.secondary.main;
   const success = theme.palette.success.main;
   const warning = theme.palette.warning.main;

  // 2
  const optionsradarchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      toolbar: {
        show: false,
      },
    },
    colors: [primary],
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradarchart: any = [
    {
      name: 'Sales',
      data: [80, 50, 30, 40, 100, 20],
    },
  ];

    return (
        <Chart
            options={optionsradarchart}
            series={seriesradarchart}
            type="radar"
            height="300px"
        />
    );
};

export default RadialbarChart;`}
      </CodeDialog>
    </>
  );
};

export default RadarChartsCode;

===== src/components/charts/Radialbar Charts/code/RadialbarChartsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const RadialbarChartsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import Chart from 'react-apexcharts';
import  Grid  from '@mui/material/Grid2';
import { useTheme } from '@mui/material/styles';
import { Props } from 'react-apexcharts';


const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radialbar Chart',
  },
];

const RadialbarChart = () => {
  
   // chart color
   const theme = useTheme();
   const primary = theme.palette.primary.main;
   const secondary = theme.palette.secondary.main;
   const success = theme.palette.success.main;
   const warning = theme.palette.warning.main;

  const optionsradialchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, success, warning],
    plotOptions: {
      radialBar: {
        dataLabels: {
          name: {
            fontSize: '22px',
          },
          value: {
            fontSize: '16px',
          },
          total: {
            show: true,
            label: 'Total',
            formatter() {
              return 249;
            },
          },
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradialchart: any = [44, 55, 67, 83];

    return (
        <Chart
                options={optionsradialchart}
                series={seriesradialchart}
                type="radialBar"
                height="300px"
                />
    );
};

export default RadialbarChart;
`}
      </CodeDialog>
    </>
  );
};

export default RadialbarChartsCode;

===== src/components/container/PageContainer.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Helmet } from 'react-helmet';

type Props = {
  description?: string;
  children: any | any[]
  title?: string;
};

const PageContainer = ({ title, description, children }: Props) => (
  <div>
    <Helmet>
      <title>{title}</title>
      <meta name="description" content={description} />
    </Helmet>
    {children}
  </div>
);

export default PageContainer;

===== src/components/custom-scroll/Scrollbar.tsx =====
import SimpleBar from 'simplebar-react';
import 'simplebar/dist/simplebar.min.css';
import { Box, styled, SxProps } from '@mui/material';

const SimpleBarStyle = styled(SimpleBar)(() => ({
  maxHeight: '100%',
}));

interface PropsType {
  children: React.ReactElement | React.ReactNode;
  sx: SxProps;
}

const Scrollbar = (props: PropsType) => {
  const { children, sx, ...other } = props;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent,
  );

  if (isMobile) {
    return <Box sx={{ overflowX: 'auto' }}>{children}</Box>;
  }

  return (
    <SimpleBarStyle sx={sx} {...other}>
      {children}
    </SimpleBarStyle>
  );
};

export default Scrollbar;

===== src/components/dashboards/ecommerce/Expence.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const Expence = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const error = theme.palette.error.main;

  // chart
  const optionsexpencechart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 120,
    },
    labels: ["Profit", "Revenue", "Expance"],
    colors: [primary, error, secondary],
    plotOptions: {
      pie: {
        
        donut: {
          size: '70%',
          background: 'transparent'
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriesexpencechart = [60, 25, 15];

  return (
    <DashboardCard>
      <>
        <Typography variant="h4">$10,230</Typography>
        <Typography variant="subtitle2" color="textSecondary" mb={2}>
          Expense
        </Typography>
        <Chart
          options={optionsexpencechart}
          series={seriesexpencechart}
          type="donut"
          height="120"
        />
      </>
    </DashboardCard>
  );
};

export default Expence;

===== src/components/dashboards/ecommerce/Growth.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography, Avatar } from '@mui/material';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';
import { IconArrowUpRight } from '@tabler/icons-react';

import icon1 from 'src/assets/images/svgs/icon-bars.svg';

const Growth = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      height: 25,
      fontFamily: `inherit`,
      foreColor: '#a1aab2',
      toolbar: {
        show: false,
      },
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    colors: [secondary],
    stroke: {
      curve: 'straight',
      width: 2,
    },
    fill: {
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: 'dark',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 10, 10, 10, 35, 45, 30, 30, 30, 50, 52, 30, 25, 45, 50, 80, 60, 65],
    },
  ];

  return (
    <DashboardCard>
      <>
        <Box
          width={38}
          height={38}
          bgcolor="secondary.light"
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <Avatar src={icon1} alt="img" sx={{ width: 25, height: 25 }} />
        </Box>

        <Box mt={3} mb={2}>
          <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="25px" />
        </Box>

        <Typography variant="h4">
          24%
          <span>
            <IconArrowUpRight width={18} color="#39B69A" />
          </span>
        </Typography>
        <Typography variant="subtitle2" color="textSecondary">
          Growth
        </Typography>
      </>
    </DashboardCard>
  );
};

export default Growth;

===== src/components/dashboards/ecommerce/MonthlyEarnings.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar } from '@mui/material';
import { IconArrowUpLeft } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import icon1Img from 'src/assets/images/svgs/icon-master-card-2.svg';
import { Props } from 'react-apexcharts';

const MonthlyEarnings = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const successlight = theme.palette.success.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 70,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      color: primary,
      data: [25, 66, 20, 40, 12, 58, 20],
    },
  ];

  return (
    <DashboardCard
      title="Monthly Earnings"
      action={
        <Avatar
          variant="rounded"
          sx={{ bgcolor: (theme) => theme.palette.primary.light, width: 40, height: 40 }}
        >
          <Avatar src={icon1Img} alt={icon1Img} sx={{ width: 24, height: 24 }} />
        </Avatar>
      }
      footer={
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="70px" />
      }
    >
      <>
        <Stack direction="row" spacing={1} alignItems="center" mb={3}>
          <Typography variant="h3" fontWeight="700">
            $6,820
          </Typography>
          <Stack direction="row" spacing={1} mt={1} mb={2} alignItems="center">
            <Avatar sx={{ bgcolor: successlight, width: 20, height: 20 }}>
              <IconArrowUpLeft width={18} color="#13DEB9" />
            </Avatar>
            <Typography variant="subtitle2" color="textSecondary">
              +9%
            </Typography>
          </Stack>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default MonthlyEarnings;

===== src/components/dashboards/ecommerce/PaymentGateways.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box, Button } from '@mui/material';
import DashboardCard from '../../shared/DashboardCard';

import icon1Img from "src/assets/images/svgs/icon-paypal.svg"
import icon2Img from "src/assets/images/svgs/icon-office-bag.svg"
import icon3Img from "src/assets/images/svgs/icon-master-card.svg"
import icon4Img from "src/assets/images/svgs/icon-pie.svg"


interface statType {
  title: string;
  subtitle: string;
  price: number;
  color: string;
  lightcolor: string;
  icon: string;
  }

  const PaymentGateways: React.FC = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.success.main;
  const secondarylight = theme.palette.success.light;


    const stats: statType[] = [
    {
      title: 'Paypal',
      subtitle: 'Big Brands',
      price: 6235,
      color: primary,
      lightcolor: primarylight,
      icon: icon1Img,
    },
    {
      title: 'Wallet',
      subtitle: 'Bill payment',
      price: 345,
      color: secondary,
      lightcolor: secondarylight,
      icon: icon2Img,
    },
    {
      title: 'Credit Card',
      subtitle: 'Money reversed',
      price: 2235,
      color: warning,
      lightcolor: warninglight,
      icon: icon3Img,
    },
    {
      title: 'Refund',
      subtitle: 'Bill Payment',
      price: 32,
      color: error,
      lightcolor: errorlight,
      icon: icon4Img,
    },
  ];

  return (
    <DashboardCard title="Payment Gateways" subtitle="Platform For Income">
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                    <Avatar src={stat.icon} alt={stat.icon} sx={{ width: 24, height: 24 }} />
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>
              {stat.price < 400 ? (
                <Typography variant="subtitle2" color="textSecondary" fontWeight="600">
                  -${stat.price}
                </Typography>
              ) : (
                <Typography variant="subtitle2" fontWeight="600">
                  +${stat.price}
                </Typography>
              )}
            </Stack>
          ))}
          <Button variant="outlined" color="primary" sx={{mt: "40px !important"}}>
            View all transactions
          </Button>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default PaymentGateways;

===== src/components/dashboards/ecommerce/ProductPerformances.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import DashboardCard from '../../shared/DashboardCard';
import CustomSelect from '../../forms/theme-elements/CustomSelect';
import { Props } from 'react-apexcharts';
import {
  MenuItem,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Avatar,
  Chip,
  TableContainer,
  Stack,
} from '@mui/material';

import img1 from 'src/assets/images/products/s6.jpg';
import img2 from 'src/assets/images/products/s9.jpg';
import img3 from 'src/assets/images/products/s7.jpg';
import img4 from 'src/assets/images/products/s4.jpg';

const ProductPerformances = () => {
  // for select
  const [month, setMonth] = React.useState('1');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMonth(event.target.value);
  };

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const grey = theme.palette.grey[300];
  const primarylight = theme.palette.primary.light;
  const greylight = theme.palette.grey[100];

  //   // chart 1
  const optionsrow1chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow1chart = [
    {
      name: 'Customers',
      color: primary,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 2
  const optionsrow2chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [greylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow2chart = [
    {
      name: 'Customers',
      color: grey,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 3
  const optionsrow3chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow3chart = [
    {
      name: 'Customers',
      color: primary,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 4
  const optionsrow4chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [greylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow4chart = [
    {
      color: grey,
      data: [30, 25, 35, 20, 30],
    },
  ];

  return (
    <DashboardCard
      title="Product Performance"
      action={
        <CustomSelect
          labelId="month-dd"
          id="month-dd"
          size="small"
          value={month}
          onChange={handleChange}
        >
          <MenuItem value={1}>March 2023</MenuItem>
          <MenuItem value={2}>April 2023</MenuItem>
          <MenuItem value={3}>May 2023</MenuItem>
        </CustomSelect>
      }
    >
      <TableContainer>
        <Table
          aria-label="simple table"
          sx={{
            whiteSpace: 'nowrap',
          }}
        >
          <TableHead>
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Typography variant="subtitle2" fontWeight={600}>
                  Product
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Progress
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Status
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Sales
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Growth
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img1} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Gaming Console
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Electronics
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  78.5%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.success.light,
                    color: (theme) => theme.palette.success.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Low"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.9k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow1chart}
                  series={seriesrow1chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 2 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img2} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Leather Purse
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Fashion
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  58.6%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.warning.light,
                    color: (theme) => theme.palette.warning.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Medium"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow2chart}
                  series={seriesrow2chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 3 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img3} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Red Velvate Dress
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Womens Fashion
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  25%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.primary.light,
                    color: (theme) => theme.palette.primary.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Very High"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow3chart}
                  series={seriesrow3chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 4 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img4} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Headphone Boat
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Electronics
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  96.3%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.error.light,
                    color: (theme) => theme.palette.error.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="High"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow4chart}
                  series={seriesrow4chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    </DashboardCard>
  );
};

export default ProductPerformances;

===== src/components/dashboards/ecommerce/RecentTransactions.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import DashboardCard from '../../shared/DashboardCard';
import {
  TimelineItem,
  TimelineOppositeContent,
  TimelineSeparator,
  TimelineDot,
  TimelineConnector,
  TimelineContent,
  timelineOppositeContentClasses,
} from '@mui/lab';
import { Link, Typography } from '@mui/material';
import Timeline from '@mui/lab/Timeline';

const RecentTransactions = () => {
  return (
    <DashboardCard title="Recent Transactions">
      <>
        <Timeline
          className="theme-timeline"
          nonce={undefined}
          onResize={undefined}
          onResizeCapture={undefined}
          sx={{
            p: 0,
            mb: '-40px',
            [`& .${timelineOppositeContentClasses.root}`]: {
              flex: 0.5,
              paddingLeft: 0,
            },
          }}
        >
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="primary" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>Payment received from John Doe of $385.90</TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>10:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="secondary" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New sale recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>12:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="success" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>Payment was made of $64.95 to Michael</TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="warning" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New sale recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="error" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New arrival recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>12:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="success" variant="outlined" />
            </TimelineSeparator>
            <TimelineContent>Payment Done</TimelineContent>
          </TimelineItem>
        </Timeline>
      </>
    </DashboardCard>
  );
};

export default RecentTransactions;

===== src/components/dashboards/ecommerce/RevenueUpdates.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';

const RevenueUpdates: React.FC = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 320,
      offsetX: -20,
      stacked: true,
    },
    colors: [primary, secondary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,

    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      }
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: 'Footware',
      data: [2.5, 3.7, 3.2, 2.6, 1.9],
    },
    {
      name: 'Fashionware',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9],
    },
  ];

  return (
    <DashboardCard
      title="Revenue Updates"
      subtitle="Overview of Profit">
      <>
        <Stack direction="row" spacing={3}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Avatar
              sx={{ width: 9, height: 9, bgcolor: primary, svg: { display: 'none' } }}
            ></Avatar>
            <Box>
              <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
                Footware
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Avatar
              sx={{ width: 9, height: 9, bgcolor: secondary, svg: { display: 'none' } }}
            ></Avatar>
            <Box>
              <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
                Fashionware
              </Typography>
            </Box>
          </Stack>
        </Stack>
        <Box className="rounded-bars">
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="320px" />
        </Box>
      </>
    </DashboardCard>
  );
};

export default RevenueUpdates;

===== src/components/dashboards/ecommerce/Sales.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography } from '@mui/material';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const Sales = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      width:'100%',
      stacked: true,
      stackType: '100%',
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary, secondary, '#EAEFF4'],
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '50%',
        borderRadius: [3],
        borderRadiusApplication: 'around',
        borderRadiusWhenStacked: 'around',
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
      width: 1,
      colors: ['rgba(0,0,0,0.01)'],
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
      x: {
        show: false,
      },
    },
    responsive: [{ breakpoint: 1025, options: { chart: { height: 150, width: 250 } } }],
  };
  const seriescolumnchart = [
    {
      color: primary,
      name: '',
      data: [25, 35, 20, 25, 40, 25],
    },
    {
      color: secondary,
      name: '',
      data: [35, 40, 20, 35, 40, 35],
    },
    {
      color: '#EAEFF4',
      name: '',
      data: [40, 25, 60, 40, 20, 40],
    },
  ];

  return (
    <DashboardCard>
      <>
        <Typography variant="h4">$65,432</Typography>
        <Typography variant="subtitle2" color="textSecondary" mb={3}>
          Sales
        </Typography>
        <Box className="rounded-bars">
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="90px" />
        </Box>
      </>
    </DashboardCard>
  );
};

export default Sales;

===== src/components/dashboards/ecommerce/SalesOverview.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Box } from '@mui/material';
import { IconGridDots } from '@tabler/icons-react';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const SalesOverview = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const primarylight = theme.palette.primary.light;
  const textColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : '#2A3547';

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 275,
    },
    labels: ["Profit", "Revenue", "Expance"],
    colors: [primary, primarylight, secondary],
    plotOptions: {
      pie: {
        
        donut: {
          size: '89%',
          background: 'transparent',

          labels: {
            show: true,
            name: {
              show: true,
              offsetY: 7,
            },
            value: {
              show: false,
            },
            total: {
              show: true,
              color: textColor,
              fontSize: '20px',
              fontWeight: '600',
              label: '$500,458',
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [55, 55, 55];

  return (
    <DashboardCard title="Sales Overview" subtitle="Every month">
      <>
        <Box mt={3}>
          <Chart
            options={optionscolumnchart}
            series={seriescolumnchart}
            type="donut"
            height="275px"
          />
        </Box>

        <Stack direction="row" spacing={2} justifyContent="space-between" mt={7}>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="primary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="h6" fontWeight="600">
                $23,450
              </Typography>
              <Typography variant="subtitle2" color="textSecondary">
                Profit
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="secondary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="secondary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="h6" fontWeight="600">
                $23,450
              </Typography>
              <Typography variant="subtitle2" color="textSecondary">
                Expance
              </Typography>
            </Box>
          </Stack>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default SalesOverview;

===== src/components/dashboards/ecommerce/SalesTwo.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography } from '@mui/material';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';
import { IconArrowUpRight, IconShoppingCart } from '@tabler/icons-react';

const SalesTwo = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 25,
      resize: true,
      barColor: '#fff',
      offsetX: -15,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],
    grid: {
      show: false,
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '100%',
        borderRadius: 3,
        distributed: true,
    }
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 5,
      colors: ['rgba(0,0,0,0.01)']
  },
    xaxis: {
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    axisBorder: {
      show: false,
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
      responsive: [
        {
            breakpoint: 767,
            options: {
                chart: { height: 60 },
                plotOptions: {
                    bar: { columnWidth: "60%" }
                }
                
            }
        }
    ],
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [100, 60, 35, 90, 35, 100]
    },
  ];

  return (
    <DashboardCard>
      <>
        <Box
          width={38}
          height={38}
          bgcolor="primary.light"
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <Typography
            color="primary.main"
            display="flex"
            alignItems="center"
            justifyContent="center"
          >
            <IconShoppingCart width={22} />
          </Typography>
        </Box>

        <Box mt={3} mb={2}>
          <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="25px" />
        </Box>

        <Typography variant="h4">$16.5k<span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
        <Typography variant="subtitle2" color="textSecondary">
          Sales
        </Typography>
      </>
    </DashboardCard>
  );
};

export default SalesTwo;

===== src/components/dashboards/ecommerce/WelcomeCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Avatar, Typography, Card, CardContent, Grid2 as Grid, Divider, Stack } from '@mui/material';
import { IconArrowUpRight } from '@tabler/icons-react';

import welcomeImg from 'src/assets/images/backgrounds/welcome-bg2.png';
import userImg from 'src/assets/images/profile/user-1.jpg';

const WelcomeCard = () => {
  return (
    (<Card elevation={0} sx={{ backgroundColor: (theme) => theme.palette.primary.light, py: 0 }}>
      <CardContent sx={{ py: 4, px: 2 }}>
        <Grid container justifyContent="space-between">
          <Grid
            display="flex"
            alignItems="center"
            size={{
              sm: 6
            }}>
            <Box>
              <Box
                gap="16px" mb={5}
                sx={{
                  display: {
                    xs: 'block',
                    sm: 'flex',
                  },
                  alignItems: 'center',
                }}
              >
                <Avatar src={userImg} alt="img" sx={{ width: 40, height: 40 }} />
                <Typography variant="h5" whiteSpace="nowrap">
                  Welcome back Mathew Anderson!
                </Typography>
              </Box>

              <Stack spacing={2} direction="row" divider={<Divider orientation="vertical" flexItem />}>
                <Box>
                  <Typography variant="h2" whiteSpace="nowrap">$2,340 <span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
                  <Typography variant="subtitle1" whiteSpace="nowrap">Today’s Sales</Typography>
                </Box>
                <Box>
                  <Typography variant="h2" whiteSpace="nowrap">35%<span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
                  <Typography variant="subtitle1" whiteSpace="nowrap">Performance</Typography>
                </Box>
              </Stack>
            </Box>
          </Grid>
          <Grid
            size={{
              sm: 6
            }}>
            <Box mb="-88px" textAlign="right">
              <img src={welcomeImg} alt={welcomeImg} width={'300px'} />
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>)
  );
};

export default WelcomeCard;

===== src/components/dashboards/ecommerce/YearlySales.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';

import DashboardWidgetCard from '../../shared/DashboardWidgetCard';
import { Props } from 'react-apexcharts';

const YearlySales = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.grey[100];

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 295,
    },
    colors: [primarylight, primarylight, primary, primarylight, primarylight, primarylight],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '45%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    xaxis: {
      categories: [['Apr'], ['May'], ['June'], ['July'], ['Aug'], ['Sept']],
      axisBorder: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10, 15],
    },
  ];

  return (
    <DashboardWidgetCard
      title="Yearly Sales"
      subtitle="Total Sales"
      dataLabel1="Salary"
      dataItem1="$36,358"
      dataLabel2="Expance"
      dataItem2="$5,296"
    >
      <>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="295px" />
      </>
    </DashboardWidgetCard>
  );
};

export default YearlySales;

===== src/components/dashboards/modern/Customers.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar } from '@mui/material';
import { IconArrowDownRight } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';

const Customers = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const errorlight = theme.palette.error.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 80,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [secondarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      color: secondary,
      data: [30, 25, 35, 20, 30, 40],
    },
  ];

  return (
    <DashboardCard
      footer={
        <>
          <Chart
            options={optionscolumnchart}
            series={seriescolumnchart}
            type="area"
            height="80px"
          />
        </>
      }
    >
      <>
        <Typography variant="subtitle2" color="textSecondary">
          Customers
        </Typography>
        <Typography variant="h4">36,358</Typography>
        <Stack direction="row" spacing={1} mt={1} alignItems="center">
          <Avatar sx={{ bgcolor: errorlight, width: 24, height: 24 }}>
            <IconArrowDownRight width={18} color="#FA896B" />
          </Avatar>
          <Typography variant="subtitle2" fontWeight="600">
            +9%
          </Typography>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default Customers;

===== src/components/dashboards/modern/EmployeeSalary.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';

import DashboardWidgetCard from '../../shared/DashboardWidgetCard';
import { Props } from 'react-apexcharts';

const EmployeeSalary = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.grey[100];

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 280,
    },
    colors: [primarylight, primarylight, primary, primarylight, primarylight, primarylight],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '45%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    xaxis: {
      categories: [['Apr'], ['May'], ['June'], ['July'], ['Aug'], ['Sept']],
      axisBorder: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10, 15],
    },
  ];

  return (
    <DashboardWidgetCard
      title="Employee Salary"
      subtitle="Every month"
      dataLabel1="Salary"
      dataItem1="$36,358"
      dataLabel2="Profit"
      dataItem2="$5,296"
    >
      <>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="280px" />
      </>
    </DashboardWidgetCard>
  );
};

export default EmployeeSalary;

===== src/components/dashboards/modern/MonthlyEarnings.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Fab } from '@mui/material';
import { IconArrowDownRight, IconCurrencyDollar } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';


const MonthlyEarnings = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const errorlight = theme.palette.error.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 60,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [secondarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false
      }
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      color: secondary,
      data: [25, 66, 20, 40, 12, 58, 20],
    },
  ];

  return (
    <DashboardCard
      title="Monthly Earnings"
      action={
        <Fab color="secondary" size="medium">
          <IconCurrencyDollar width={24} />
        </Fab>
      }
      footer={
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="60px" />
      }
    >
      <>
        <Typography variant="h3" fontWeight="700" mt="-20px">
          $6,820
        </Typography>
        <Stack direction="row" spacing={1} my={1} alignItems="center">
          <Avatar sx={{ bgcolor: errorlight, width: 27, height: 27 }}>
            <IconArrowDownRight width={20} color="#FA896B" />
          </Avatar>
          <Typography variant="subtitle2" fontWeight="600">
            +9%
          </Typography>
          <Typography variant="subtitle2" color="textSecondary">
            last year
          </Typography>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default MonthlyEarnings;

===== src/components/dashboards/modern/Projects.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar } from '@mui/material';
import { IconArrowUpLeft } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';


const Projects = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const successlight = theme.palette.success.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 80,
      resize: true,
      barColor: '#fff',
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],
    grid: {
      show: false,
    },
    plotOptions: {
      bar: {
        horizontal: false,
        startingShape: 'flat',
        endingShape: 'flat',
        columnWidth: '60%',
        barHeight: '20%',
        borderRadius: 3,
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2.5,
      colors: ['rgba(0,0,0,0.01)'],
    },
    xaxis: {
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    axisBorder: {
      show: false,
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [4, 10, 9, 7, 9, 10, 11, 8, 10],
    },
  ];

  return (
    <DashboardCard>
      <>
        <Typography variant="subtitle2" color="textSecondary">
          Projects
        </Typography>
        <Typography variant="h4">78,298</Typography>
        <Stack direction="row" spacing={1} my={1} alignItems="center">
          <Avatar sx={{ bgcolor: successlight, width: 24, height: 24 }}>
            <IconArrowUpLeft width={18} color="#39B69A" />
          </Avatar>
          <Typography variant="subtitle2" fontWeight="600">
            +9%
          </Typography>
        </Stack>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="80px" />
      </>
    </DashboardCard>
  );
};

export default Projects;

===== src/components/dashboards/modern/RevenueUpdates.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { MenuItem, Grid2 as Grid, Stack, Typography, Button, Avatar, Box } from '@mui/material';
import { IconGridDots } from '@tabler/icons-react';
import DashboardCard from '../../shared/DashboardCard';
import CustomSelect from '../../forms/theme-elements/CustomSelect';
import { Props } from 'react-apexcharts';

const RevenueUpdates = () => {
  const [month, setMonth] = React.useState('1');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMonth(event.target.value);
  };

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: true,
      },
      height: 370,
      stacked: true,
    },
    colors: [primary, secondary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },

    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      borderColor: 'rgba(0,0,0,0.1)',
      strokeDashArray: 3,
      xaxis: {
        lines: {
          show: false,
        },
      },
    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['16/08', '17/08', '18/08', '19/08', '20/08', '21/08', '22/08'],
      axisBorder: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: 'Eanings this month',
      data: [1.5, 2.7, 2.2, 3.6, 1.5, 1.0],
    },
    {
      name: 'Expense this month',
      data: [-1.8, -1.1, -2.5, -1.5, -0.6, -1.8],
    },
  ];

  return (
    (<DashboardCard
      title="Revenue Updates"
      subtitle="Overview of Profit"
      action={
        <CustomSelect
          labelId="month-dd"
          id="month-dd"
          size="small"
          value={month}
          onChange={handleChange}
        >
          <MenuItem value={1}>March 2023</MenuItem>
          <MenuItem value={2}>April 2023</MenuItem>
          <MenuItem value={3}>May 2023</MenuItem>
        </CustomSelect>
      }
    >
      <Grid container spacing={3}>
        {/* column */}
        <Grid
          size={{
            xs: 12,
            sm: 8
          }}>
          <Box className="rounded-bars">
            <Chart
              options={optionscolumnchart}
              series={seriescolumnchart}
              type="bar"
              height="370px"
            />
          </Box>
        </Grid>
        {/* column */}
        <Grid
          size={{
            xs: 12,
            sm: 4
          }}>
          <Stack spacing={3} mt={3}>
            <Stack direction="row" spacing={2} alignItems="center">
              <Box
                width={40}
                height={40}
                bgcolor="primary.light"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Typography color="primary" variant="h6" display="flex">
                  <IconGridDots width={21} />
                </Typography>
              </Box>
              <Box>
                <Typography variant="h3" fontWeight="700">
                  $63,489.50
                </Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  Total Earnings
                </Typography>
              </Box>
            </Stack>
          </Stack>
          <Stack spacing={3} my={5}>
            <Stack direction="row" spacing={2}>
              <Avatar
                sx={{ width: 9, mt: 1, height: 9, bgcolor: primary, svg: { display: 'none' } }}
              ></Avatar>
              <Box>
                <Typography variant="subtitle1" color="textSecondary">
                  Earnings this month
                </Typography>
                <Typography variant="h5">$48,820</Typography>
              </Box>
            </Stack>
            <Stack direction="row" spacing={2}>
              <Avatar
                sx={{ width: 9, mt: 1, height: 9, bgcolor: secondary, svg: { display: 'none' } }}
              ></Avatar>
              <Box>
                <Typography variant="subtitle1" color="textSecondary">
                  Expense this month
                </Typography>
                <Typography variant="h5">$26,498</Typography>
              </Box>
            </Stack>
          </Stack>
          <Button color="primary" variant="contained" fullWidth>
            View Full Report
          </Button>
        </Grid>
      </Grid>
    </DashboardCard>)
  );
};

export default RevenueUpdates;

===== src/components/dashboards/modern/SellingProducts.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, CardContent, Chip, Paper, Stack, Typography, LinearProgress } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import SavingsImg from '../../../assets/images/backgrounds/piggy.png';

interface sellsData {
  product: string;
  price: string;
  percent: number;
  color: string;
}

const sells: sellsData[] = [
  {
    product: 'MaterialPro',
    price: '23,568',
    percent: 55,
    color: 'primary',
  },
  {
    product: 'Flexy Admin',
    price: '23,568',
    percent: 20,
    color: 'secondary',
  },
];

const SellingProducts = () => {
  const theme = useTheme();
  const secondarylight = theme.palette.secondary.light;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const primary = theme.palette.primary.main;
  const borderColor = theme.palette.divider;

  return (
    <Paper sx={{ bgcolor: 'primary.main', border: `1px solid ${borderColor}` }} variant="outlined">
      <CardContent>
        <Typography variant="h5" color="white">
          Best selling products
        </Typography>
        <Typography variant="subtitle1" color="white" mb={4}>
          Overview 2023
        </Typography>

        <Box textAlign="center" mt={2} mb="-90px">
          <img src={SavingsImg} alt={SavingsImg} width={'300px'} />
        </Box>
      </CardContent>
      <Paper sx={{ overflow: 'hidden', zIndex: '1', position: 'relative', margin: '10px' }}>
        <Box p={3}>
          <Stack spacing={3}>
            {sells.map((sell: any, i: number) => (
              <Box key={i}>
                <Stack
                  direction="row"
                  spacing={2}
                  mb={1}
                  justifyContent="space-between"
                  alignItems="center"
                >
                  <Box>
                    <Typography variant="h6">{sell.product}</Typography>
                    <Typography variant="subtitle2" color="textSecondary">
                      ${sell.price}
                    </Typography>
                  </Box>
                  <Chip
                    sx={{
                      backgroundColor: sell.color === 'primary' ? primarylight : secondarylight,
                      color: sell.color === 'primary' ? primary : secondary,
                      borderRadius: '4px',
                      width: 55,
                      height: 24,
                    }}
                    label={sell.percent + '%'}
                  />
                </Stack>
                <LinearProgress value={sell.percent} variant="determinate" color={sell.color} />
              </Box>
            ))}
          </Stack>
        </Box>
      </Paper>
    </Paper>
  );
};

export default SellingProducts;

===== src/components/dashboards/modern/Social.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Link } from 'react-router';
import { Stack, Typography, Avatar, Box, AvatarGroup } from '@mui/material';
import { IconMessage2 } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import ProfileImg from '../../../assets/images/profile/user-1.jpg';
import User1Img from '../../../assets/images/profile/user-2.jpg';
import User2Img from '../../../assets/images/profile/user-3.jpg';
import User3Img from '../../../assets/images/profile/user-4.jpg';
import User4Img from '../../../assets/images/profile/user-5.jpg';

const Social = () => {
  return (
    <DashboardCard>
      <>
        <Stack direction="row" spacing={2}>
          <Avatar
            src={ProfileImg}
            alt={ProfileImg}
            sx={{ borderRadius: '8px', width: 70, height: 70 }}
          />
          <Box>
            <Typography variant="h5">Super awesome, Vue coming soon!</Typography>
            <Typography variant="subtitle2" color="textSecondary">
              22 March, 2023
            </Typography>
          </Box>
        </Stack>
        <Stack direction="row" justifyContent="space-between" mt={5}>
          <AvatarGroup max={4}>
            <Avatar alt="Remy Sharp" src={User1Img} />
            <Avatar alt="Travis Howard" src={User2Img} />
            <Avatar alt="Cindy Baker" src={User3Img} />
            <Avatar alt="Agnes Walker" src={User4Img} />
          </AvatarGroup>
          <Link to="/">
            <Box
              width="40px"
              height="40px"
              bgcolor="primary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconMessage2 width={22} />
              </Typography>
            </Box>
          </Link>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default Social;

===== src/components/dashboards/modern/TopCards.tsx =====
import { Box, CardContent, Grid2 as Grid, Typography } from '@mui/material';

import icon1 from '../../../assets/images/svgs/icon-connect.svg';
import icon2 from '../../../assets/images/svgs/icon-user-male.svg';
import icon3 from '../../../assets/images/svgs/icon-briefcase.svg';
import icon4 from '../../../assets/images/svgs/icon-mailbox.svg';
import icon5 from '../../../assets/images/svgs/icon-favorites.svg';
import icon6 from '../../../assets/images/svgs/icon-speech-bubble.svg';

interface cardType {
  icon: string;
  title: string;
  digits: string;
  bgcolor: string;
}

const topcards: cardType[] = [
  {
    icon: icon2,
    title: 'Employees',
    digits: '96',
    bgcolor: 'primary',
  },
  {
    icon: icon3,
    title: 'Clients',
    digits: '3,650',
    bgcolor: 'warning',
  },
  {
    icon: icon4,
    title: 'Projects',
    digits: '356',
    bgcolor: 'secondary',
  },
  {
    icon: icon5,
    title: 'Events',
    digits: '696',
    bgcolor: 'error',
  },
  {
    icon: icon6,
    title: 'Payroll',
    digits: '$96k',
    bgcolor: 'success',
  },
  {
    icon: icon1,
    title: 'Reports',
    digits: '59',
    bgcolor: 'info',
  },
];

const TopCards = () => {
  return (
    (<Grid container spacing={3}>
      {topcards.map((topcard, i) => (
        <Grid
          key={i}
          size={{
            xs: 12,
            sm: 4,
            lg: 2
          }}>
          <Box bgcolor={topcard.bgcolor + '.light'} textAlign="center">
            <CardContent>
              <img src={topcard.icon} alt={topcard.icon} width="50" />
              <Typography
                color={topcard.bgcolor + '.main'}
                mt={1}
                variant="subtitle1"
                fontWeight={600}
              >
                {topcard.title}
              </Typography>
              <Typography color={topcard.bgcolor + '.main'} variant="h4" fontWeight={600}>
                {topcard.digits}
              </Typography>
            </CardContent>
          </Box>
        </Grid>
      ))}
    </Grid>)
  );
};

export default TopCards;

===== src/components/dashboards/modern/TopPerformerData.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';

interface PerformerType {
  id: string;
  imgsrc: string;
  name: string;
  post: string;
  pname: string;
  status: string;
  budget: string;
}

const TopPerformerData: PerformerType[] = [
  {
    id: '1',
    imgsrc: img1,
    name: 'Sunil Joshi',
    post: 'Web Designer',
    pname: 'Elite Admin',
    status: 'Low',
    budget: '3.9',
  },
  {
    id: '2',
    imgsrc: img2,
    name: 'John Deo',
    post: 'Web Developer',
    pname: 'Flexy Admin',
    status: 'Medium',
    budget: '24.5',
  },
  {
    id: '3',
    imgsrc: img3,
    name: 'Mathew Anderson',
    post: 'Web Manager',
    pname: 'Material Pro',
    status: 'High',
    budget: '12.8',
  },
  {
    id: '4',
    imgsrc: img4,
    name: 'Yuvraj Sheth',
    post: 'Project Manager',
    pname: 'Xtreme Admin',
    status: 'Very High',
    budget: '2.4',
  },
];

export default TopPerformerData;

===== src/components/dashboards/modern/TopPerformers.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import DashboardCard from '../../shared/DashboardCard';
import CustomSelect from '../../forms/theme-elements/CustomSelect';
import {
  MenuItem,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Avatar,
  Chip,
  TableContainer,
  Stack,
} from '@mui/material';
import TopPerformerData from './TopPerformerData';

const performers = TopPerformerData;

const TopPerformers = () => {
  // for select
  const [month, setMonth] = React.useState('1');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMonth(event.target.value);
  };

  return (
    <DashboardCard
      title="Top Projects"
      subtitle="Best Products"
      action={
        <CustomSelect
          labelId="month-dd"
          id="month-dd"
          size="small"
          value={month}
          onChange={handleChange}
        >
          <MenuItem value={1}>March 2023</MenuItem>
          <MenuItem value={2}>April 2023</MenuItem>
          <MenuItem value={3}>May 2023</MenuItem>
        </CustomSelect>
      }
    >
      <TableContainer>
        <Table
          aria-label="simple table"
          sx={{
            whiteSpace: 'nowrap',
          }}
        >
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Assigned
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Project
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Priority
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Budget
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {performers.map((basic) => (
              <TableRow key={basic.id}>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar src={basic.imgsrc} alt={basic.imgsrc} sx={{ width: 40, height: 40 }} />
                    <Box>
                      <Typography variant="subtitle2" fontWeight={600}>
                        {basic.name}
                      </Typography>
                      <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                        {basic.post}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                    {basic.pname}
                  </Typography>
                </TableCell>
                <TableCell>
                  {/* <Chip chipcolor={basic.status == 'Active' ? 'success' : basic.status == 'Pending' ? 'warning' : basic.status == 'Completed' ? 'primary' : basic.status == 'Cancel' ? 'error' : 'secondary'} */}
                  <Chip
                    sx={{
                      bgcolor:
                        basic.status === 'High'
                          ? (theme) => theme.palette.error.light
                          : basic.status === 'Medium'
                          ? (theme) => theme.palette.warning.light
                          : basic.status === 'Low'
                          ? (theme) => theme.palette.success.light
                          : (theme) => theme.palette.secondary.light,
                      color:
                        basic.status === 'High'
                          ? (theme) => theme.palette.error.main
                          : basic.status === 'Medium'
                          ? (theme) => theme.palette.warning.main
                          : basic.status === 'Low'
                          ? (theme) => theme.palette.success.main
                          : (theme) => theme.palette.secondary.main,
                      borderRadius: '8px',
                    }}
                    size="small"
                    label={basic.status}
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2">${basic.budget}k</Typography>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </DashboardCard>
  );
};

export default TopPerformers;

===== src/components/dashboards/modern/WeeklyStats.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import DashboardCard from '../../shared/DashboardCard';
import { IconGridDots } from '@tabler/icons-react';
import { Props } from 'react-apexcharts';

interface Stat {
  title: string;
  subtitle: string;
  percent: string;
  color: string;
  lightcolor: string;
  icon: any;
}

const WeeklyStats: React.FC = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const secondary = theme.palette.success.main;
  const secondarylight = theme.palette.success.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 130,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      type: 'gradient',
      gradient: {
        shadeIntensity: 0,
        inverseColors: false,
        opacityFrom: 0.45,
        opacityTo: 0,
        stops: [20, 180],
      },
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: 'Weekly Stats',
      color: primary,
      data: [5, 15, 5, 10, 5],
    },
  ];

  const stats: Stat[] = [
    {
      title: 'Top Sales',
      subtitle: 'Johnathan Doe',
      percent: '68',
      color: primary,
      lightcolor: primarylight,
      icon: <IconGridDots width={18} />,
    },
    {
      title: 'Best Seller',
      subtitle: 'Footware',
      percent: '45',
      color: secondary,
      lightcolor: secondarylight,
      icon: <IconGridDots width={18} />,
    },
    {
      title: 'Most Commented',
      subtitle: 'Fashionware',
      percent: '14',
      color: error,
      lightcolor: errorlight,
      icon: <IconGridDots width={18} />,
    },
  ];

  return (
    <DashboardCard title="Weekly Stats" subtitle="Average sales">
      <>
        <Stack mt={4}>
          <Chart
            options={optionscolumnchart}
            series={seriescolumnchart}
            type="area"
            height="130px"
          />
        </Stack>
        <Stack spacing={3} mt={3}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                  {stat.icon}
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>
              <Avatar
                sx={{
                  bgcolor: stat.lightcolor,
                  color: stat.color,
                  width: 42,
                  height: 24,
                  borderRadius: '4px',
                }}
              >
                <Typography variant="subtitle2" fontWeight="600">
                  +{stat.percent}
                </Typography>
              </Avatar>
            </Stack>
          ))}
        </Stack>
      </>
    </DashboardCard>
  );
};

export default WeeklyStats;

===== src/components/dashboards/modern/YearlyBreakup.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Grid2 as Grid, Stack, Typography, Avatar } from '@mui/material';
import { IconArrowUpLeft } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';

const YearlyBreakup = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const successlight = theme.palette.success.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 155,
    },
    colors: [primary, primarylight, '#F9F9FD'],
    plotOptions: {
      pie: {
        startAngle: 0,
        endAngle: 360,
        donut: {
          size: '75%',
          background: 'transparent',
        },
      },
    },
    tooltip: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    responsive: [
      {
        breakpoint: 991,
        options: {
          chart: {
            width: 120,
          },
        },
      },
    ],
  };
  const seriescolumnchart = [38, 40, 25];

  return (
    (<DashboardCard title="Yearly Breakup">
      <Grid container spacing={3}>
        {/* column */}
        <Grid
          size={{
            xs: 7,
            sm: 7
          }}>
          <Typography variant="h3" fontWeight="700">
            $36,358
          </Typography>
          <Stack direction="row" spacing={1} mt={1} alignItems="center">
            <Avatar sx={{ bgcolor: successlight, width: 27, height: 27 }}>
              <IconArrowUpLeft width={20} color="#39B69A" />
            </Avatar>
            <Typography variant="subtitle2" fontWeight="600">
              +9%
            </Typography>
            <Typography variant="subtitle2" color="textSecondary">
              last year
            </Typography>
          </Stack>
          <Stack spacing={3} mt={5} direction="row">
            <Stack direction="row" spacing={1} alignItems="center">
              <Avatar
                sx={{ width: 9, height: 9, bgcolor: primary, svg: { display: 'none' } }}
              ></Avatar>
              <Typography variant="subtitle2" color="textSecondary">
                2022
              </Typography>
            </Stack>
            <Stack direction="row" spacing={1} alignItems="center">
              <Avatar
                sx={{ width: 9, height: 9, bgcolor: primarylight, svg: { display: 'none' } }}
              ></Avatar>
              <Typography variant="subtitle2" color="textSecondary">
                2023
              </Typography>
            </Stack>
          </Stack>
        </Grid>
        {/* column */}
        <Grid
          size={{
            xs: 5,
            sm: 5
          }}>
          <Chart
            options={optionscolumnchart}
            series={seriescolumnchart}
            type="donut"
            height="130px"
          />
        </Grid>
      </Grid>
    </DashboardCard>)
  );
};

export default YearlyBreakup;

===== src/components/ErrorBoundary.tsx =====
// File: src/components/ErrorBoundary.tsx
import { Component, ErrorInfo, ReactNode } from 'react';
import { Box, Typography, Button, Alert } from '@mui/material';
import { IconBug, IconRefresh } from '@tabler/icons-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '100vh',
            textAlign: 'center',
            gap: 3,
            p: 3
          }}
        >
          <IconBug size={64} color="error" />
          
          <Typography variant="h4" component="h1">
            حدث خطأ غير متوقع
          </Typography>
          
          <Typography variant="body1" color="text.secondary">
            نعتذر عن هذا الخطأ. يرجى تحديث الصفحة أو المحاولة مرة أخرى.
          </Typography>

          {this.state.error && (
            <Alert severity="error" sx={{ width: '100%', maxWidth: 600, textAlign: 'left' }}>
              <Typography variant="caption" component="pre">
                {this.state.error.message}
              </Typography>
            </Alert>
          )}

          <Button
            variant="contained"
            startIcon={<IconRefresh />}
            onClick={() => window.location.reload()}
            size="large"
          >
            تحديث الصفحة
          </Button>
        </Box>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

===== src/components/forms/form-custom/code/FormCustomCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FormCustomCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import * as React from 'react';
import {
  Grid2 as Grid,
  Box,
  Typography,
  FormControl,
  MenuItem,
  RadioGroup,
  FormControlLabel,
  Button,
  SliderValueLabelProps,
} from '@mui/material';
import { SliderThumb } from '@mui/material/Slider';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import { Select } from '@mui/material';
import { Slider } from '@mui/material';
import { Switch } from '@mui/material';
import { Button } from '@mui/material';
import { Typography } from '@mui/material';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';
import Radio, { RadioProps } from '@mui/material/Radio';
import { useTheme } from '@mui/material/styles';
import { Card, CardHeader, CardContent, Divider, Box } from '@mui/material';
import { useSelector } from '@/store/hooks';
import { AppState } from '@/store/store';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';
import { Stack } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomSelect = styled((props: any) => <Select {...props} />)(({}) => ({}));

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

const CustomRangeSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
  },
}));

const CustomSwitch = styled((props: any) => <Switch {...props} />)(({ theme }) => ({
  '&.MuiSwitch-root': {
    width: '68px',
    height: '49px',
  },
  '&  .MuiButtonBase-root': {
    top: '6px',
    left: '6px',
  },
  '&  .MuiButtonBase-root.Mui-checked .MuiSwitch-thumb': {
    backgroundColor: 'primary.main',
  },
  '& .MuiSwitch-thumb': {
    width: '18px',
    height: '18px',
    borderRadius: '6px',
  },

  '& .MuiSwitch-track': {
    backgroundColor: theme.palette.grey[200],
    opacity: 1,
    borderRadius: '5px',
  },
  '& .MuiSwitch-switchBase': {
    '&.Mui-checked': {
      '& + .MuiSwitch-track': {
        backgroundColor: 'primary',
        opacity: 0.18,
      },
    },
  },
}));

const CustomDisabledButton =  styled((Button))(({ theme })  => ({
  backgroundColor: theme.palette.grey[100]
}));

const CustomOutlinedButton = styled(Button)(({ theme }) => ({
  border: '1px solid {theme.palette.grey[100]}',
  color: theme.palette.text.primary,

  '&:hover': {
    border: theme.palette.mode === 'dark' ? '1px solid {theme.palette.grey[200]}' : '1px solid {theme.palette.grey[300]}' ,
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.text.secondary,
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});


function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.mai' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const BpIcon2 = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon2 = styled(BpIcon2)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));


function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon2
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon2 />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

function CustomThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}
  const [age, setAge] = React.useState('1');
  const [select1, setSelect] = React.useState('1');
  const [select2, setSelect2] = React.useState('1');

  const handleChange = (event: any) => {
    setAge(event.target.value);
  };
  const handleChange4 = (event2: any) => {
    setSelect(event2.target.value);
  };

  const handleChange5 = (event3: any) => {
    setSelect2(event3.target.value);
  };

 
  const [value, setValue] = React.useState(null);
  const [value2, setValue2] = React.useState(null);

  const [value3, setValue3] = React.useState(30);
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
  <Grid container spacing={3}>
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 4
    }}>
    <CustomFormLabel htmlFor="name">Name</CustomFormLabel>
    <CustomTextField id="name" placeholder="Enter text" variant="outlined" fullWidth />
    <CustomFormLabel htmlFor="demo-simple-select">Select Dropdown</CustomFormLabel>
    <CustomSelect
      labelId="demo-simple-select-label"
      id="demo-simple-select"
      value={age}
      onChange={handleChange}
      fullWidth
    >
      <MenuItem value={1}>One</MenuItem>
      <MenuItem value={2}>Two</MenuItem>
      <MenuItem value={3}>Three</MenuItem>
    </CustomSelect>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 2 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 4
    }}>
    <CustomFormLabel htmlFor="cname">Company Name</CustomFormLabel>
    <CustomTextField id="cname" placeholder="Enter text" variant="outlined" fullWidth />
    <CustomFormLabel htmlFor="time">Time</CustomFormLabel>
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <TimePicker
        value={value2}
        onChange={(newValue) => setValue2(newValue)}
        slotProps={{
          textField: {
            fullWidth: true,
            sx: {
              '& .MuiSvgIcon-root': {
                width: '18px',
                height: '18px',
              },
              '& .MuiFormHelperText-root': {
                display: 'none',
              },
            },
          },
        }}
      />
    </LocalizationProvider>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 3 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 4
    }}>
    <CustomFormLabel htmlFor="disabled">Industry Type</CustomFormLabel>
    <CustomTextField
      id="disabled"
      placeholder="Disabled filled"
      variant="outlined"
      fullWidth
      disabled
      sx={{
        '& .MuiOutlinedInput-notchedOutline': {
          borderColor: (theme) =>
            theme.palette.mode === 'dark'
              ? 'rgba(255, 255, 255, 0.12) !important'
              : '#dee3e9 !important',
        },
      }}
    />
    <CustomFormLabel htmlFor="date">Date</CustomFormLabel>
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <DateTimePicker
        slotProps={{
          textField: {
            fullWidth: true,
            sx: {
              '& .MuiSvgIcon-root': {
                width: '18px',
                height: '18px',
              },
              '& .MuiFormHelperText-root': {
                display: 'none',
              },
            },
          },
        }}
        value={value}
        onChange={(newValue) => setValue(newValue)}
      />
    </LocalizationProvider>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 4 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 12
    }}>
    <CustomFormLabel>Lorem ipsum dolor sit amet</CustomFormLabel>
    <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
      <Grid container>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControl component="fieldset">
            <FormControlLabel value="radio1" control={<CustomRadio />} label="Male" />
          </FormControl>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControl component="fieldset">
            <FormControlLabel value="radio2" control={<CustomRadio />} label="Female" />
          </FormControl>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControl component="fieldset">
            <FormControlLabel value="radio3" control={<CustomRadio disabled />} label="Disabled" />
          </FormControl>
        </Grid>
      </Grid>
    </RadioGroup>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 5 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 12
    }}>
    <CustomFormLabel>Industry Type</CustomFormLabel>
    <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
      <Grid container>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControlLabel control={<CustomCheckbox defaultChecked />} label="Enter text" />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControlLabel control={<CustomCheckbox />} label="Enter text" />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 4,
            lg: 4
          }}>
          <FormControlLabel disabled control={<CustomCheckbox disabled />} label="Disabled" />
        </Grid>
      </Grid>
    </RadioGroup>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 6 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 4
    }}>
    <CustomFormLabel>Slider</CustomFormLabel>
    <CustomRangeSlider
      slots={{ thumb: CustomThumbComponent }}
      getAriaLabel={(index) => (index === 0 ? 'Minimum price' : 'Maximum price')}
      defaultValue={[20, 40]}
    />
    <Grid container spacing={2} mt={1}>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 6
        }}>
        <CustomSelect id="range1" value={select1} onChange={handleChange4} fullWidth>
          <MenuItem value={1}>750</MenuItem>
          <MenuItem value={2}>850</MenuItem>
          <MenuItem value={3}>950</MenuItem>
        </CustomSelect>
      </Grid>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 6
        }}>
        <CustomSelect id="rang2" value={select2} onChange={handleChange5} fullWidth>
          <MenuItem value={1}>950</MenuItem>
          <MenuItem value={2}>1050</MenuItem>
          <MenuItem value={3}>1150</MenuItem>
        </CustomSelect>
      </Grid>
    </Grid>
    <CustomFormLabel sx={{ mt: 3 }}>Volume</CustomFormLabel>
    <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
    <Box display="flex" alignItems="stretch">
      <Typography>
        <IconVolume2 width={20} />
      </Typography>
      <Box ml="auto">
        <Typography>
          <IconVolume width={20} />
        </Typography>
      </Box>
    </Box>
  </Grid>

  {/* ----------------------------------- */}
  {/* column 7 */}
  {/* ----------------------------------- */}
  <Grid
    size={{
      xs: 12,
      sm: 12,
      lg: 12
    }}>
    <CustomFormLabel>Switch</CustomFormLabel>
    <Grid container spacing={0}>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 3
        }}>
        <FormControlLabel control={<CustomSwitch />} label="Enter text" />
      </Grid>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 3
        }}>
        <FormControlLabel control={<CustomSwitch defaultChecked />} label="Enter text" />
      </Grid>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 3
        }}>
        <FormControlLabel
          control={
            <CustomSwitch
              disabled
              sx={{
                '& .MuiSwitch-switchBase.Mui-disabled+.MuiSwitch-track': {
                  opacity: 1,
                },
              }}
            />
          }
          label="Disabled"
        />
      </Grid>
      <Grid
        size={{
          xs: 12,
          sm: 6,
          lg: 3
        }}>
        <FormControlLabel
          control={
            <CustomSwitch
              defaultChecked
              disabled
              sx={{
                '& .MuiSwitch-switchBase.Mui-checked.Mui-disabled': {
                  opacity: 0.5,
                },
              }}
            />
          }
          label="Disabled"
        />
      </Grid>
    </Grid>

    {/* button */}
    <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} justifyContent="space-between" mt={2}>
      <Stack spacing={1} direction="row">
        <Button variant="contained" color="primary">Add New</Button>
        <CustomDisabledButton variant="contained" disabled>Add New</CustomDisabledButton>
        <CustomOutlinedButton variant="outlined">Add New</CustomOutlinedButton>
      </Stack>
      <Stack direction="row" spacing={1}>
        <Button variant="contained" color="secondary">Add New</Button>
        <Button variant="contained" color="success">Add New</Button>
      </Stack>
    </Stack>
  </Grid>
</Grid>
  );
`}
      </CodeDialog>
    </>
  );
};

export default FormCustomCode;

===== src/components/forms/form-elements/autoComplete/CheckboxesAutocomplete.tsx =====
'use client'

import Autocomplete from '@mui/material/Autocomplete';
import top100Films from './data';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';
import CustomTextField from '../../theme-elements/CustomTextField';



export default function CheckboxesAutocomplete() {
  return (
    <Autocomplete
      multiple
      id="checkboxes-tags-demo"
      options={top100Films}
      disableCloseOnSelect
      getOptionLabel={(option) => option.title}
      renderOption={(props, option, { selected }) => {
        const { key, ...optionProps } = props;
        return (
          <li key={key} {...optionProps}>
            <CustomCheckbox style={{ marginRight: 8 }} checked={selected} />
            {option.title}
          </li>
        );
      }}
      fullWidth
      renderInput={(params) => (
        <CustomTextField {...params} placeholder="Favorites" aria-label="Favorites" />
      )}
    />
  );
}




===== src/components/forms/form-elements/autoComplete/code/CheckboxesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const CheckboxesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  { title: 'The Dark Knight', year: 2008 },
  { title: '12 Angry Men', year: 1957 },
  { title: "Schindler's List", year: 1993 },
  { title: 'Pulp Fiction', year: 1994 },
  {
    title: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { title: 'The Good, the Bad and the Ugly', year: 1966 },
  { title: 'Fight Club', year: 1999 },
  {
    title: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    title: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { title: 'Forrest Gump', year: 1994 },
  { title: 'Inception', year: 2010 },
  {
    title: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { title: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { title: 'Goodfellas', year: 1990 },
  { title: 'The Matrix', year: 1999 },
  { title: 'Seven Samurai', year: 1954 },
  {
    title: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { title: 'City of God', year: 2002 },
  { title: 'Se7en', year: 1995 },
  { title: 'The Silence of the Lambs', year: 1991 },
  { title: "It's a Wonderful Life", year: 1946 },
  { title: 'Life Is Beautiful', year: 1997 },
  { title: 'The Usual Suspects', year: 1995 },
  { title: 'Léon: The Professional', year: 1994 },
  { title: 'Spirited Away', year: 2001 },
  { title: 'Saving Private Ryan', year: 1998 },
  { title: 'Once Upon a Time in the West', year: 1968 },
  { title: 'American History X', year: 1998 },
  { title: 'Interstellar', year: 2014 },
];

<Autocomplete
      multiple
      id="checkboxes-tags-demo"
      options={top100Films}
      disableCloseOnSelect
      getOptionLabel={(option) => option.title}
      renderOption={(props, option, { selected }) => {
        const { key, ...optionProps } = props;
        return (
          <li key={key} {...optionProps}>
            <CustomCheckbox style={{ marginRight: 8 }} checked={selected} />
            {option.title}
          </li>
        );
      }}
      fullWidth
      renderInput={(params) => (
        <CustomTextField {...params} placeholder="Favorites" aria-label="Favorites" />
      )}
    />`}
      </CodeDialog>
    </>
  );
};

export default CheckboxesCode;

===== src/components/forms/form-elements/autoComplete/code/ComboBoxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const ComboBoxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const top100Films = [
  { label: 'The Shawshank Redemption', year: 1994 },
  { label: 'The Godfather', year: 1972 },
  { label: 'The Godfather: Part II', year: 1974 },
  { label: 'The Dark Knight', year: 2008 },
  { label: '12 Angry Men', year: 1957 },
  { label: "Schindler's List", year: 1993 },
  { label: 'Pulp Fiction', year: 1994 },
  {
    label: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { label: 'The Good, the Bad and the Ugly', year: 1966 },
  { label: 'Fight Club', year: 1999 },
  {
    label: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    label: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { label: 'Forrest Gump', year: 1994 },
  { label: 'Inception', year: 2010 },
  {
    label: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { label: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { label: 'Goodfellas', year: 1990 },
  { label: 'The Matrix', year: 1999 },
  { label: 'Seven Samurai', year: 1954 },
  {
    label: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { label: 'City of God', year: 2002 },
  { label: 'Se7en', year: 1995 },
  { label: 'The Silence of the Lambs', year: 1991 },
  { label: "It's a Wonderful Life", year: 1946 },
  { label: 'Life Is Beautiful', year: 1997 },
  { label: 'The Usual Suspects', year: 1995 },
  { label: 'Léon: The Professional', year: 1994 },
  { label: 'Spirited Away', year: 2001 },
  { label: 'Saving Private Ryan', year: 1998 },
  { label: 'Once Upon a Time in the West', year: 1968 },
  { label: 'American History X', year: 1998 },
  { label: 'Interstellar', year: 2014 },
  { label: 'Casablanca', year: 1942 },
  { label: 'City Lights', year: 1931 },
  { label: 'Psycho', year: 1960 },
  { label: 'The Green Mile', year: 1999 },
  { label: 'The Intouchables', year: 2011 },
  { label: 'Modern Times', year: 1936 },
  { label: 'Raiders of the Lost Ark', year: 1981 },
  { label: 'Rear Window', year: 1954 },
  { label: 'The Pianist', year: 2002 },
  { label: 'The Departed', year: 2006 },
  { label: 'Terminator 2: Judgment Day', year: 1991 },
  { label: 'Back to the Future', year: 1985 },
  { label: 'Whiplash', year: 2014 },
  { label: 'Gladiator', year: 2000 },
  { label: 'Memento', year: 2000 },
  { label: 'The Prestige', year: 2006 },
  { label: 'The Lion King', year: 1994 },
  { label: 'Apocalypse Now', year: 1979 },
  { label: 'Alien', year: 1979 },
  { label: 'Sunset Boulevard', year: 1950 },
  {
    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',
    year: 1964,
  },
  { label: 'The Great Dictator', year: 1940 },
  { label: 'Cinema Paradiso', year: 1988 },
  { label: 'The Lives of Others', year: 2006 },
  { label: 'Grave of the Fireflies', year: 1988 },
  { label: 'Paths of Glory', year: 1957 },
  { label: 'Django Unchained', year: 2012 },
  { label: 'The Shining', year: 1980 },
  { label: 'WALL·E', year: 2008 },
  { label: 'American Beauty', year: 1999 },
  { label: 'The Dark Knight Rises', year: 2012 },
  { label: 'Princess Mononoke', year: 1997 },
  { label: 'Aliens', year: 1986 },
  { label: 'Oldboy', year: 2003 },
  { label: 'Once Upon a Time in America', year: 1984 },
  { label: 'Witness for the Prosecution', year: 1957 },
  { label: 'Das Boot', year: 1981 },
  { label: 'Citizen Kane', year: 1941 },
  { label: 'North by Northwest', year: 1959 },
  { label: 'Vertigo', year: 1958 },
  {
    label: 'Star Wars: Episode VI - Return of the Jedi',
    year: 1983,
  },
  { label: 'Reservoir Dogs', year: 1992 },
  { label: 'Braveheart', year: 1995 },
  { label: 'M', year: 1931 },
  { label: 'Requiem for a Dream', year: 2000 },
  { label: 'Amélie', year: 2001 },
  { label: 'A Clockwork Orange', year: 1971 },
  { label: 'Like Stars on Earth', year: 2007 },
  { label: 'Taxi Driver', year: 1976 },
  { label: 'Lawrence of Arabia', year: 1962 },
  { label: 'Double Indemnity', year: 1944 },
  {
    label: 'Eternal Sunshine of the Spotless Mind',
    year: 2004,
  },
  { label: 'Amadeus', year: 1984 },
  { label: 'To Kill a Mockingbird', year: 1962 },
  { label: 'Toy Story 3', year: 2010 },
  { label: 'Logan', year: 2017 },
  { label: 'Full Metal Jacket', year: 1987 },
  { label: 'Dangal', year: 2016 },
  { label: 'The Sting', year: 1973 },
  { label: '2001: A Space Odyssey', year: 1968 },
  { label: "Singin' in the Rain", year: 1952 },
  { label: 'Toy Story', year: 1995 },
  { label: 'Bicycle Thieves', year: 1948 },
  { label: 'The Kid', year: 1921 },
  { label: 'Inglourious Basterds', year: 2009 },
  { label: 'Snatch', year: 2000 },
  { label: '3 Idiots', year: 2009 },
  { label: 'Monty Python and the Holy Grail', year: 1975 },
];

<Autocomplete
    disablePortal
    id="combo-box-demo"
    options={top100Films}
    fullWidth
    renderInput={(params) => (
        <CustomTextField {...params} placeholder="Select movie" aria-label="Select movie" />
    )}
/>

`}
      </CodeDialog>
    </>
  );
};

export default ComboBoxCode;

===== src/components/forms/form-elements/autoComplete/code/ControlledStateCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const ControlledStateCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const options = ['Option 1', 'Option 2'];

const [value, setValue] = React.useState<string | null>(options[0]);
const [inputValue, setInputValue] = React.useState('');

<Autocomplete
    value={value}
    onChange={(event: any, newValue: string | null) => {
        setValue(newValue);
    }}
    inputValue={inputValue}
    onInputChange={(event, newInputValue) => {
        setInputValue(newInputValue);
    }}
    id="controllable-states-demo"
    options={options}
    fullWidth
    renderInput={(params) => (
        <CustomTextField
            {...params}
            placeholder="Controllable"
            aria-label="Controllable"
        />
    )}
/>
<Typography
    color="textSecondary"
    variant="subtitle2"
    sx={{
        mt: 1,
    }}
    >{'value: {value !== null ? ''{value}'' : 'null'}'}
</Typography>
<Typography
    color="textSecondary"
    variant="subtitle2"
    >{'inputvalue: '{inputValue}''}
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default ControlledStateCode;

===== src/components/forms/form-elements/autoComplete/code/CountrySelectCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CountrySelectAutocompleteCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box } from '@mui/material';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';0...............................................0.
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const countryData = [
    { code: 'AD', label: 'Andorra', phone: '376' },
    {
        code: 'AE',
        label: 'United Arab Emirates',
        phone: '971',
    },
    { code: 'AF', label: 'Afghanistan', phone: '93' },
    {
        code: 'AG',
        label: 'Antigua and Barbuda',
        phone: '1-268',
    },
    { code: 'AI', label: 'Anguilla', phone: '1-264' },
    { code: 'AL', label: 'Albania', phone: '355' },
    { code: 'AM', label: 'Armenia', phone: '374' },
    { code: 'AO', label: 'Angola', phone: '244' },
    { code: 'AQ', label: 'Antarctica', phone: '672' },
    { code: 'AR', label: 'Argentina', phone: '54' },
    { code: 'AS', label: 'American Samoa', phone: '1-684' },
    { code: 'AT', label: 'Austria', phone: '43' },
    {
        code: 'AU',
        label: 'Australia',
        phone: '61',
        suggested: true,
    },
    { code: 'AW', label: 'Aruba', phone: '297' },
    { code: 'AX', label: 'Alland Islands', phone: '358' },
    { code: 'AZ', label: 'Azerbaijan', phone: '994' },
    {
        code: 'BA',
        label: 'Bosnia and Herzegovina',
        phone: '387',
    },
    { code: 'BB', label: 'Barbados', phone: '1-246' },
    { code: 'BD', label: 'Bangladesh', phone: '880' },
    { code: 'BE', label: 'Belgium', phone: '32' },
    { code: 'BF', label: 'Burkina Faso', phone: '226' },
    { code: 'BG', label: 'Bulgaria', phone: '359' },
    { code: 'BH', label: 'Bahrain', phone: '973' },
    { code: 'BI', label: 'Burundi', phone: '257' },
    { code: 'BJ', label: 'Benin', phone: '229' },
    { code: 'BL', label: 'Saint Barthelemy', phone: '590' },
    { code: 'BM', label: 'Bermuda', phone: '1-441' },
    { code: 'BN', label: 'Brunei Darussalam', phone: '673' },
    { code: 'BO', label: 'Bolivia', phone: '591' },
    { code: 'BR', label: 'Brazil', phone: '55' },
    { code: 'BS', label: 'Bahamas', phone: '1-242' },
    { code: 'BT', label: 'Bhutan', phone: '975' },
    { code: 'BV', label: 'Bouvet Island', phone: '47' },
    { code: 'BW', label: 'Botswana', phone: '267' },
    { code: 'BY', label: 'Belarus', phone: '375' },
    { code: 'BZ', label: 'Belize', phone: '501' },
    {
        code: 'CA',
        label: 'Canada',
        phone: '1',
        suggested: true,
    },
    {
        code: 'CC',
        label: 'Cocos (Keeling) Islands',
        phone: '61',
    },
    {
        code: 'CD',
        label: 'Congo, Democratic Republic of the',
        phone: '243',
    },
    {
        code: 'CF',
        label: 'Central African Republic',
        phone: '236',
    },
    {
        code: 'CG',
        label: 'Congo, Republic of the',
        phone: '242',
    },
    { code: 'CH', label: 'Switzerland', phone: '41' },
    { code: 'CI', label: "Cote d'Ivoire", phone: '225' },
    { code: 'CK', label: 'Cook Islands', phone: '682' },
    { code: 'CL', label: 'Chile', phone: '56' },
    { code: 'CM', label: 'Cameroon', phone: '237' },
    { code: 'CN', label: 'China', phone: '86' },
    { code: 'CO', label: 'Colombia', phone: '57' },
    { code: 'CR', label: 'Costa Rica', phone: '506' },
    { code: 'CU', label: 'Cuba', phone: '53' },
    { code: 'CV', label: 'Cape Verde', phone: '238' },
    { code: 'CW', label: 'Curacao', phone: '599' },
    { code: 'CX', label: 'Christmas Island', phone: '61' },
    { code: 'CY', label: 'Cyprus', phone: '357' },
    { code: 'CZ', label: 'Czech Republic', phone: '420' },
    {
        code: 'DE',
        label: 'Germany',
        phone: '49',
        suggested: true,
    },
    { code: 'DJ', label: 'Djibouti', phone: '253' },
    { code: 'DK', label: 'Denmark', phone: '45' },
    { code: 'DM', label: 'Dominica', phone: '1-767' },
    {
        code: 'DO',
        label: 'Dominican Republic',
        phone: '1-809',
    },
    { code: 'DZ', label: 'Algeria', phone: '213' },
    { code: 'EC', label: 'Ecuador', phone: '593' },
    { code: 'EE', label: 'Estonia', phone: '372' },
    { code: 'EG', label: 'Egypt', phone: '20' },
    { code: 'EH', label: 'Western Sahara', phone: '212' },
    { code: 'ER', label: 'Eritrea', phone: '291' },
    { code: 'ES', label: 'Spain', phone: '34' },
    { code: 'ET', label: 'Ethiopia', phone: '251' },
    { code: 'FI', label: 'Finland', phone: '358' },
    { code: 'FJ', label: 'Fiji', phone: '679' },
    {
        code: 'FK',
        label: 'Falkland Islands (Malvinas)',
        phone: '500',
    },
    {
        code: 'FM',
        label: 'Micronesia, Federated States of',
        phone: '691',
    },
    { code: 'FO', label: 'Faroe Islands', phone: '298' },
    {
        code: 'FR',
        label: 'France',
        phone: '33',
        suggested: true,
    },
    { code: 'GA', label: 'Gabon', phone: '241' },
    { code: 'GB', label: 'United Kingdom', phone: '44' },
    { code: 'GD', label: 'Grenada', phone: '1-473' },
    { code: 'GE', label: 'Georgia', phone: '995' },
    { code: 'GF', label: 'French Guiana', phone: '594' },
    { code: 'GG', label: 'Guernsey', phone: '44' },
    { code: 'GH', label: 'Ghana', phone: '233' },
    { code: 'GI', label: 'Gibraltar', phone: '350' },
    { code: 'GL', label: 'Greenland', phone: '299' },
    { code: 'GM', label: 'Gambia', phone: '220' },
    { code: 'GN', label: 'Guinea', phone: '224' },
    { code: 'GP', label: 'Guadeloupe', phone: '590' },
    { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },
    { code: 'GR', label: 'Greece', phone: '30' },
    {
        code: 'GS',
        label: 'South Georgia and the South Sandwich Islands',
        phone: '500',
    },
    { code: 'GT', label: 'Guatemala', phone: '502' },
    { code: 'GU', label: 'Guam', phone: '1-671' },
    { code: 'GW', label: 'Guinea-Bissau', phone: '245' },
    { code: 'GY', label: 'Guyana', phone: '592' },
    { code: 'HK', label: 'Hong Kong', phone: '852' },
    {
        code: 'HM',
        label: 'Heard Island and McDonald Islands',
        phone: '672',
    },
    { code: 'HN', label: 'Honduras', phone: '504' },
    { code: 'HR', label: 'Croatia', phone: '385' },
    { code: 'HT', label: 'Haiti', phone: '509' },
    { code: 'HU', label: 'Hungary', phone: '36' },
    { code: 'ID', label: 'Indonesia', phone: '62' },
    { code: 'IE', label: 'Ireland', phone: '353' },
    { code: 'IL', label: 'Israel', phone: '972' },
    { code: 'IM', label: 'Isle of Man', phone: '44' },
    { code: 'IN', label: 'India', phone: '91' },
    {
        code: 'IO',
        label: 'British Indian Ocean Territory',
        phone: '246',
    },
    { code: 'IQ', label: 'Iraq', phone: '964' },
    {
        code: 'IR',
        label: 'Iran, Islamic Republic of',
        phone: '98',
    },
    { code: 'IS', label: 'Iceland', phone: '354' },
    { code: 'IT', label: 'Italy', phone: '39' },
    { code: 'JE', label: 'Jersey', phone: '44' },
    { code: 'JM', label: 'Jamaica', phone: '1-876' },
    { code: 'JO', label: 'Jordan', phone: '962' },
    {
        code: 'JP',
        label: 'Japan',
        phone: '81',
        suggested: true,
    },
    { code: 'KE', label: 'Kenya', phone: '254' },
    { code: 'KG', label: 'Kyrgyzstan', phone: '996' },
    { code: 'KH', label: 'Cambodia', phone: '855' },
    { code: 'KI', label: 'Kiribati', phone: '686' },
    { code: 'KM', label: 'Comoros', phone: '269' },
    {
        code: 'KN',
        label: 'Saint Kitts and Nevis',
        phone: '1-869',
    },
    {
        code: 'KP',
        label: "Korea, Democratic People's Republic of",
        phone: '850',
    },
    { code: 'KR', label: 'Korea, Republic of', phone: '82' },
    { code: 'KW', label: 'Kuwait', phone: '965' },
    { code: 'KY', label: 'Cayman Islands', phone: '1-345' },
    { code: 'KZ', label: 'Kazakhstan', phone: '7' },
    {
        code: 'LA',
        label: "Lao People's Democratic Republic",
        phone: '856',
    },
    { code: 'LB', label: 'Lebanon', phone: '961' },
    { code: 'LC', label: 'Saint Lucia', phone: '1-758' },
    { code: 'LI', label: 'Liechtenstein', phone: '423' },
    { code: 'LK', label: 'Sri Lanka', phone: '94' },
    { code: 'LR', label: 'Liberia', phone: '231' },
    { code: 'LS', label: 'Lesotho', phone: '266' },
    { code: 'LT', label: 'Lithuania', phone: '370' },
    { code: 'LU', label: 'Luxembourg', phone: '352' },
    { code: 'LV', label: 'Latvia', phone: '371' },
    { code: 'LY', label: 'Libya', phone: '218' },
    { code: 'MA', label: 'Morocco', phone: '212' },
    { code: 'MC', label: 'Monaco', phone: '377' },
    {
        code: 'MD',
        label: 'Moldova, Republic of',
        phone: '373',
    },
    { code: 'ME', label: 'Montenegro', phone: '382' },
    {
        code: 'MF',
        label: 'Saint Martin (French part)',
        phone: '590',
    },
    { code: 'MG', label: 'Madagascar', phone: '261' },
    { code: 'MH', label: 'Marshall Islands', phone: '692' },
    {
        code: 'MK',
        label: 'Macedonia, the Former Yugoslav Republic of',
        phone: '389',
    },
    { code: 'ML', label: 'Mali', phone: '223' },
    { code: 'MM', label: 'Myanmar', phone: '95' },
    { code: 'MN', label: 'Mongolia', phone: '976' },
    { code: 'MO', label: 'Macao', phone: '853' },
    {
        code: 'MP',
        label: 'Northern Mariana Islands',
        phone: '1-670',
    },
    { code: 'MQ', label: 'Martinique', phone: '596' },
    { code: 'MR', label: 'Mauritania', phone: '222' },
    { code: 'MS', label: 'Montserrat', phone: '1-664' },
    { code: 'MT', label: 'Malta', phone: '356' },
    { code: 'MU', label: 'Mauritius', phone: '230' },
    { code: 'MV', label: 'Maldives', phone: '960' },
    { code: 'MW', label: 'Malawi', phone: '265' },
    { code: 'MX', label: 'Mexico', phone: '52' },
    { code: 'MY', label: 'Malaysia', phone: '60' },
    { code: 'MZ', label: 'Mozambique', phone: '258' },
    { code: 'NA', label: 'Namibia', phone: '264' },
    { code: 'NC', label: 'New Caledonia', phone: '687' },
    { code: 'NE', label: 'Niger', phone: '227' },
    { code: 'NF', label: 'Norfolk Island', phone: '672' },
    { code: 'NG', label: 'Nigeria', phone: '234' },
    { code: 'NI', label: 'Nicaragua', phone: '505' },
    { code: 'NL', label: 'Netherlands', phone: '31' },
    { code: 'NO', label: 'Norway', phone: '47' },
    { code: 'NP', label: 'Nepal', phone: '977' },
    { code: 'NR', label: 'Nauru', phone: '674' },
    { code: 'NU', label: 'Niue', phone: '683' },
    { code: 'NZ', label: 'New Zealand', phone: '64' },
    { code: 'OM', label: 'Oman', phone: '968' },
    { code: 'PA', label: 'Panama', phone: '507' },
    { code: 'PE', label: 'Peru', phone: '51' },
    { code: 'PF', label: 'French Polynesia', phone: '689' },
    { code: 'PG', label: 'Papua New Guinea', phone: '675' },
    { code: 'PH', label: 'Philippines', phone: '63' },
    { code: 'PK', label: 'Pakistan', phone: '92' },
    { code: 'PL', label: 'Poland', phone: '48' },
    {
        code: 'PM',
        label: 'Saint Pierre and Miquelon',
        phone: '508',
    },
    { code: 'PN', label: 'Pitcairn', phone: '870' },
    { code: 'PR', label: 'Puerto Rico', phone: '1' },
    {
        code: 'PS',
        label: 'Palestine, State of',
        phone: '970',
    },
    { code: 'PT', label: 'Portugal', phone: '351' },
    { code: 'PW', label: 'Palau', phone: '680' },
    { code: 'PY', label: 'Paraguay', phone: '595' },
    { code: 'QA', label: 'Qatar', phone: '974' },
    { code: 'RE', label: 'Reunion', phone: '262' },
    { code: 'RO', label: 'Romania', phone: '40' },
    { code: 'RS', label: 'Serbia', phone: '381' },
    { code: 'RU', label: 'Russian Federation', phone: '7' },
    { code: 'RW', label: 'Rwanda', phone: '250' },
    { code: 'SA', label: 'Saudi Arabia', phone: '966' },
    { code: 'SB', label: 'Solomon Islands', phone: '677' },
    { code: 'SC', label: 'Seychelles', phone: '248' },
    { code: 'SD', label: 'Sudan', phone: '249' },
    { code: 'SE', label: 'Sweden', phone: '46' },
    { code: 'SG', label: 'Singapore', phone: '65' },
    { code: 'SH', label: 'Saint Helena', phone: '290' },
    { code: 'SI', label: 'Slovenia', phone: '386' },
    {
        code: 'SJ',
        label: 'Svalbard and Jan Mayen',
        phone: '47',
    },
    { code: 'SK', label: 'Slovakia', phone: '421' },
    { code: 'SL', label: 'Sierra Leone', phone: '232' },
    { code: 'SM', label: 'San Marino', phone: '378' },
    { code: 'SN', label: 'Senegal', phone: '221' },
    { code: 'SO', label: 'Somalia', phone: '252' },
    { code: 'SR', label: 'Suriname', phone: '597' },
    { code: 'SS', label: 'South Sudan', phone: '211' },
    {
        code: 'ST',
        label: 'Sao Tome and Principe',
        phone: '239',
    },
    { code: 'SV', label: 'El Salvador', phone: '503' },
    {
        code: 'SX',
        label: 'Sint Maarten (Dutch part)',
        phone: '1-721',
    },
    {
        code: 'SY',
        label: 'Syrian Arab Republic',
        phone: '963',
    },
    { code: 'SZ', label: 'Swaziland', phone: '268' },
    {
        code: 'TC',
        label: 'Turks and Caicos Islands',
        phone: '1-649',
    },
    { code: 'TD', label: 'Chad', phone: '235' },
    {
        code: 'TF',
        label: 'French Southern Territories',
        phone: '262',
    },
    { code: 'TG', label: 'Togo', phone: '228' },
    { code: 'TH', label: 'Thailand', phone: '66' },
    { code: 'TJ', label: 'Tajikistan', phone: '992' },
    { code: 'TK', label: 'Tokelau', phone: '690' },
    { code: 'TL', label: 'Timor-Leste', phone: '670' },
    { code: 'TM', label: 'Turkmenistan', phone: '993' },
    { code: 'TN', label: 'Tunisia', phone: '216' },
    { code: 'TO', label: 'Tonga', phone: '676' },
    { code: 'TR', label: 'Turkey', phone: '90' },
    {
        code: 'TT',
        label: 'Trinidad and Tobago',
        phone: '1-868',
    },
    { code: 'TV', label: 'Tuvalu', phone: '688' },
    {
        code: 'TW',
        label: 'Taiwan, Province of China',
        phone: '886',
    },
    {
        code: 'TZ',
        label: 'United Republic of Tanzania',
        phone: '255',
    },
    { code: 'UA', label: 'Ukraine', phone: '380' },
    { code: 'UG', label: 'Uganda', phone: '256' },
    {
        code: 'US',
        label: 'United States',
        phone: '1',
        suggested: true,
    },
    { code: 'UY', label: 'Uruguay', phone: '598' },
    { code: 'UZ', label: 'Uzbekistan', phone: '998' },
    {
        code: 'VA',
        label: 'Holy See (Vatican City State)',
        phone: '379',
    },
    {
        code: 'VC',
        label: 'Saint Vincent and the Grenadines',
        phone: '1-784',
    },
    { code: 'VE', label: 'Venezuela', phone: '58' },
    {
        code: 'VG',
        label: 'British Virgin Islands',
        phone: '1-284',
    },
    {
        code: 'VI',
        label: 'US Virgin Islands',
        phone: '1-340',
    },
    { code: 'VN', label: 'Vietnam', phone: '84' },
    { code: 'VU', label: 'Vanuatu', phone: '678' },
    { code: 'WF', label: 'Wallis and Futuna', phone: '681' },
    { code: 'WS', label: 'Samoa', phone: '685' },
    { code: 'XK', label: 'Kosovo', phone: '383' },
    { code: 'YE', label: 'Yemen', phone: '967' },
    { code: 'YT', label: 'Mayotte', phone: '262' },
    { code: 'ZA', label: 'South Africa', phone: '27' },
    { code: 'ZM', label: 'Zambia', phone: '260' },
    { code: 'ZW', label: 'Zimbabwe', phone: '263' },
];

    <Autocomplete
      id="country-select-demo"
      fullWidth
      options={countryData}
      autoHighlight
      getOptionLabel={(option) => option.label}
      renderOption={(props, option) => {
        const { key, ...optionProps } = props;
        return (
          <Box
            key={key}
            component="li"
            sx={{ fontSize: 15, '& > span': { mr: '10px', fontSize: 18 } }}
            {...optionProps}
          >
            <span>{countryToFlag(option.code)}</span>
            {option.label} ({option.code}) +{option.phone}
          </Box>
        );
      }}
      renderInput={(params) => (
        <CustomTextField
          {...params}
          placeholder="Choose a country"
          aria-label="Choose a country"
          autoComplete="off"
          inputProps={{
            ...params.inputProps,
            autoComplete: 'new-password', 
          }}
        />
      )}
    />
  `}
      </CodeDialog>
    </>
  );
};

export default CountrySelectAutocompleteCode;

===== src/components/forms/form-elements/autoComplete/code/FreeSoloCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const FreeSoloCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Stack } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  { title: 'The Dark Knight', year: 2008 },
  { title: '12 Angry Men', year: 1957 },
  { title: "Schindler's List", year: 1993 },
  { title: 'Pulp Fiction', year: 1994 },
  {
    title: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { title: 'The Good, the Bad and the Ugly', year: 1966 },
  { title: 'Fight Club', year: 1999 },
  {
    title: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    title: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { title: 'Forrest Gump', year: 1994 },
  { title: 'Inception', year: 2010 },
  {
    title: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { title: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { title: 'Goodfellas', year: 1990 },
  { title: 'The Matrix', year: 1999 },
  { title: 'Seven Samurai', year: 1954 },
  {
    title: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { title: 'City of God', year: 2002 },
  { title: 'Se7en', year: 1995 },
  { title: 'The Silence of the Lambs', year: 1991 },
  { title: "It's a Wonderful Life", year: 1946 },
  { title: 'Life Is Beautiful', year: 1997 },
  { title: 'The Usual Suspects', year: 1995 },
  { title: 'Léon: The Professional', year: 1994 },
  { title: 'Spirited Away', year: 2001 },
  { title: 'Saving Private Ryan', year: 1998 },
  { title: 'Once Upon a Time in the West', year: 1968 },
  { title: 'American History X', year: 1998 },
  { title: 'Interstellar', year: 2014 },
];

<Stack>
    <Autocomplete
        id="free-solo-demo"
        freeSolo
        fullWidth
        sx={{
          mb: 2,
        }}
        options={top100Films.map((option) => option.title)}
        renderInput={(params) => (
          <CustomTextField {...params} placeholder="FreeSolo" aria-label="FreeSolo" />
        )}
    />
    <Autocomplete
        freeSolo
        fullWidth
        id="free-solo-2-demo"
        disableClearable
        options={top100Films.map((option) => option.title)}
        renderInput={(params) => (
            <CustomTextField
                {...params}
                placeholder="Search input"
                aria-label="Search input"
                inputProps={{
                    ...params.inputProps,
                    type: 'search',
                }}
            />
        )}
    />
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default FreeSoloCode;

===== src/components/forms/form-elements/autoComplete/code/MultipleValuesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const MultipleValuesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  { title: 'The Dark Knight', year: 2008 },
  { title: '12 Angry Men', year: 1957 },
  { title: "Schindler's List", year: 1993 },
  { title: 'Pulp Fiction', year: 1994 },
  {
    title: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { title: 'The Good, the Bad and the Ugly', year: 1966 },
  { title: 'Fight Club', year: 1999 },
  {
    title: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    title: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { title: 'Forrest Gump', year: 1994 },
  { title: 'Inception', year: 2010 },
  {
    title: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { title: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { title: 'Goodfellas', year: 1990 },
  { title: 'The Matrix', year: 1999 },
  { title: 'Seven Samurai', year: 1954 },
  {
    title: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { title: 'City of God', year: 2002 },
  { title: 'Se7en', year: 1995 },
  { title: 'The Silence of the Lambs', year: 1991 },
  { title: "It's a Wonderful Life", year: 1946 },
  { title: 'Life Is Beautiful', year: 1997 },
  { title: 'The Usual Suspects', year: 1995 },
  { title: 'Léon: The Professional', year: 1994 },
  { title: 'Spirited Away', year: 2001 },
  { title: 'Saving Private Ryan', year: 1998 },
  { title: 'Once Upon a Time in the West', year: 1968 },
  { title: 'American History X', year: 1998 },
  { title: 'Interstellar', year: 2014 },
];

<Autocomplete
    multiple
    fullWidth
    id="tags-outlined"
    options={top100Films}
    getOptionLabel={(option) => option.title}
    defaultValue={[top100Films[13]]}
    filterSelectedOptions
    renderInput={(params) => (
        <CustomTextField {...params} placeholder="Favorites" aria-label="Favorites" />
    )}
/>`}
      </CodeDialog>
    </>
  );
};

export default MultipleValuesCode;

===== src/components/forms/form-elements/autoComplete/code/SizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const SizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const top100Films = [
  { label: 'The Shawshank Redemption', year: 1994 },
  { label: 'The Godfather', year: 1972 },
  { label: 'The Godfather: Part II', year: 1974 },
  { label: 'The Dark Knight', year: 2008 },
  { label: '12 Angry Men', year: 1957 },
  { label: "Schindler's List", year: 1993 },
  { label: 'Pulp Fiction', year: 1994 },
  {
    label: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { label: 'The Good, the Bad and the Ugly', year: 1966 },
  { label: 'Fight Club', year: 1999 },
  {
    label: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    label: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { label: 'Forrest Gump', year: 1994 },
  { label: 'Inception', year: 2010 },
  {
    label: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { label: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { label: 'Goodfellas', year: 1990 },
  { label: 'The Matrix', year: 1999 },
  { label: 'Seven Samurai', year: 1954 },
  {
    label: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { label: 'City of God', year: 2002 },
  { label: 'Se7en', year: 1995 },
  { label: 'The Silence of the Lambs', year: 1991 },
  { label: "It's a Wonderful Life", year: 1946 },
  { label: 'Life Is Beautiful', year: 1997 },
  { label: 'The Usual Suspects', year: 1995 },
  { label: 'Léon: The Professional', year: 1994 },
  { label: 'Spirited Away', year: 2001 },
  { label: 'Saving Private Ryan', year: 1998 },
  { label: 'Once Upon a Time in the West', year: 1968 },
  { label: 'American History X', year: 1998 },
  { label: 'Interstellar', year: 2014 },
  { label: 'Casablanca', year: 1942 },
  { label: 'City Lights', year: 1931 },
  { label: 'Psycho', year: 1960 },
  { label: 'The Green Mile', year: 1999 },
  { label: 'The Intouchables', year: 2011 },
  { label: 'Modern Times', year: 1936 },
  { label: 'Raiders of the Lost Ark', year: 1981 },
  { label: 'Rear Window', year: 1954 },
  { label: 'The Pianist', year: 2002 },
  { label: 'The Departed', year: 2006 },
  { label: 'Terminator 2: Judgment Day', year: 1991 },
  { label: 'Back to the Future', year: 1985 },
  { label: 'Whiplash', year: 2014 },
  { label: 'Gladiator', year: 2000 },
  { label: 'Memento', year: 2000 },
  { label: 'The Prestige', year: 2006 },
  { label: 'The Lion King', year: 1994 },
  { label: 'Apocalypse Now', year: 1979 },
  { label: 'Alien', year: 1979 },
  { label: 'Sunset Boulevard', year: 1950 },
  {
    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',
    year: 1964,
  },
  { label: 'The Great Dictator', year: 1940 },
  { label: 'Cinema Paradiso', year: 1988 },
  { label: 'The Lives of Others', year: 2006 },
  { label: 'Grave of the Fireflies', year: 1988 },
  { label: 'Paths of Glory', year: 1957 },
  { label: 'Django Unchained', year: 2012 },
  { label: 'The Shining', year: 1980 },
  { label: 'WALL·E', year: 2008 },
  { label: 'American Beauty', year: 1999 },
  { label: 'The Dark Knight Rises', year: 2012 },
  { label: 'Princess Mononoke', year: 1997 },
  { label: 'Aliens', year: 1986 },
  { label: 'Oldboy', year: 2003 },
  { label: 'Once Upon a Time in America', year: 1984 },
  { label: 'Witness for the Prosecution', year: 1957 },
  { label: 'Das Boot', year: 1981 },
  { label: 'Citizen Kane', year: 1941 },
  { label: 'North by Northwest', year: 1959 },
  { label: 'Vertigo', year: 1958 },
  {
    label: 'Star Wars: Episode VI - Return of the Jedi',
    year: 1983,
  },
  { label: 'Reservoir Dogs', year: 1992 },
  { label: 'Braveheart', year: 1995 },
  { label: 'M', year: 1931 },
  { label: 'Requiem for a Dream', year: 2000 },
  { label: 'Amélie', year: 2001 },
  { label: 'A Clockwork Orange', year: 1971 },
  { label: 'Like Stars on Earth', year: 2007 },
  { label: 'Taxi Driver', year: 1976 },
  { label: 'Lawrence of Arabia', year: 1962 },
  { label: 'Double Indemnity', year: 1944 },
  {
    label: 'Eternal Sunshine of the Spotless Mind',
    year: 2004,
  },
  { label: 'Amadeus', year: 1984 },
  { label: 'To Kill a Mockingbird', year: 1962 },
  { label: 'Toy Story 3', year: 2010 },
  { label: 'Logan', year: 2017 },
  { label: 'Full Metal Jacket', year: 1987 },
  { label: 'Dangal', year: 2016 },
  { label: 'The Sting', year: 1973 },
  { label: '2001: A Space Odyssey', year: 1968 },
  { label: "Singin' in the Rain", year: 1952 },
  { label: 'Toy Story', year: 1995 },
  { label: 'Bicycle Thieves', year: 1948 },
  { label: 'The Kid', year: 1921 },
  { label: 'Inglourious Basterds', year: 2009 },
  { label: 'Snatch', year: 2000 },
  { label: '3 Idiots', year: 2009 },
  { label: 'Monty Python and the Holy Grail', year: 1975 },
];

<Autocomplete
    disablePortal
    id="medium-combo-box-demo"
    options={top100Films}
    fullWidth
    sx={{
        mb: 2,
    }}
    renderInput={(params) => (
        <CustomTextField {...params} placeholder="Size Medium" aria-label="Size Medium" />
    )}
/>
    
<Autocomplete
    disablePortal
    id="medium-combo-box-demo"
    options={top100Films}
    fullWidth
    size="small"
    renderInput={(params) => (
        <CustomTextField {...params} placeholder="Size Small" aria-label="Size Small" />
    )}
/>

`}
      </CodeDialog>
    </>
  );
};

export default SizesCode;

===== src/components/forms/form-elements/autoComplete/ComboBoxAutocomplete.tsx =====
// import Autocomplete from '@mui/material/Autocomplete';
'use client'

import CustomTextField from '../../theme-elements/CustomTextField';
import Autocomplete from '@mui/material/Autocomplete';

// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top
const top100Films = [
  { label: 'The Shawshank Redemption', year: 1994 },
  { label: 'The Godfather', year: 1972 },
  { label: 'The Godfather: Part II', year: 1974 },
  { label: 'The Dark Knight', year: 2008 },
  { label: '12 Angry Men', year: 1957 },
  { label: "Schindler's List", year: 1993 },
  { label: 'Pulp Fiction', year: 1994 },
  {
    label: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { label: 'The Good, the Bad and the Ugly', year: 1966 },
  { label: 'Fight Club', year: 1999 },
  {
    label: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    label: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { label: 'Forrest Gump', year: 1994 },
  { label: 'Inception', year: 2010 },
  {
    label: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { label: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { label: 'Goodfellas', year: 1990 },
  { label: 'The Matrix', year: 1999 },
  { label: 'Seven Samurai', year: 1954 },
  {
    label: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { label: 'City of God', year: 2002 },
  { label: 'Se7en', year: 1995 },
  { label: 'The Silence of the Lambs', year: 1991 },
  { label: "It's a Wonderful Life", year: 1946 },
  { label: 'Life Is Beautiful', year: 1997 },
  { label: 'The Usual Suspects', year: 1995 },
  { label: 'Léon: The Professional', year: 1994 },
  { label: 'Spirited Away', year: 2001 },
  { label: 'Saving Private Ryan', year: 1998 },
  { label: 'Once Upon a Time in the West', year: 1968 },
  { label: 'American History X', year: 1998 },
  { label: 'Interstellar', year: 2014 },
  { label: 'Casablanca', year: 1942 },
  { label: 'City Lights', year: 1931 },
  { label: 'Psycho', year: 1960 },
  { label: 'The Green Mile', year: 1999 },
  { label: 'The Intouchables', year: 2011 },
  { label: 'Modern Times', year: 1936 },
  { label: 'Raiders of the Lost Ark', year: 1981 },
  { label: 'Rear Window', year: 1954 },
  { label: 'The Pianist', year: 2002 },
  { label: 'The Departed', year: 2006 },
  { label: 'Terminator 2: Judgment Day', year: 1991 },
  { label: 'Back to the Future', year: 1985 },
  { label: 'Whiplash', year: 2014 },
  { label: 'Gladiator', year: 2000 },
  { label: 'Memento', year: 2000 },
  { label: 'The Prestige', year: 2006 },
  { label: 'The Lion King', year: 1994 },
  { label: 'Apocalypse Now', year: 1979 },
  { label: 'Alien', year: 1979 },
  { label: 'Sunset Boulevard', year: 1950 },
  {
    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',
    year: 1964,
  },
  { label: 'The Great Dictator', year: 1940 },
  { label: 'Cinema Paradiso', year: 1988 },
  { label: 'The Lives of Others', year: 2006 },
  { label: 'Grave of the Fireflies', year: 1988 },
  { label: 'Paths of Glory', year: 1957 },
  { label: 'Django Unchained', year: 2012 },
  { label: 'The Shining', year: 1980 },
  { label: 'WALL·E', year: 2008 },
  { label: 'American Beauty', year: 1999 },
  { label: 'The Dark Knight Rises', year: 2012 },
  { label: 'Princess Mononoke', year: 1997 },
  { label: 'Aliens', year: 1986 },
  { label: 'Oldboy', year: 2003 },
  { label: 'Once Upon a Time in America', year: 1984 },
  { label: 'Witness for the Prosecution', year: 1957 },
  { label: 'Das Boot', year: 1981 },
  { label: 'Citizen Kane', year: 1941 },
  { label: 'North by Northwest', year: 1959 },
  { label: 'Vertigo', year: 1958 },
  {
    label: 'Star Wars: Episode VI - Return of the Jedi',
    year: 1983,
  },
  { label: 'Reservoir Dogs', year: 1992 },
  { label: 'Braveheart', year: 1995 },
  { label: 'M', year: 1931 },
  { label: 'Requiem for a Dream', year: 2000 },
  { label: 'Amélie', year: 2001 },
  { label: 'A Clockwork Orange', year: 1971 },
  { label: 'Like Stars on Earth', year: 2007 },
  { label: 'Taxi Driver', year: 1976 },
  { label: 'Lawrence of Arabia', year: 1962 },
  { label: 'Double Indemnity', year: 1944 },
  {
    label: 'Eternal Sunshine of the Spotless Mind',
    year: 2004,
  },
  { label: 'Amadeus', year: 1984 },
  { label: 'To Kill a Mockingbird', year: 1962 },
  { label: 'Toy Story 3', year: 2010 },
  { label: 'Logan', year: 2017 },
  { label: 'Full Metal Jacket', year: 1987 },
  { label: 'Dangal', year: 2016 },
  { label: 'The Sting', year: 1973 },
  { label: '2001: A Space Odyssey', year: 1968 },
  { label: "Singin' in the Rain", year: 1952 },
  { label: 'Toy Story', year: 1995 },
  { label: 'Bicycle Thieves', year: 1948 },
  { label: 'The Kid', year: 1921 },
  { label: 'Inglourious Basterds', year: 2009 },
  { label: 'Snatch', year: 2000 },
  { label: '3 Idiots', year: 2009 },
  { label: 'Monty Python and the Holy Grail', year: 1975 },
];

const ComboBoxAutocomplete = () => (

  <Autocomplete
    disablePortal
    id="combo-box-demo"
    options={top100Films}
    fullWidth
    renderInput={(params) => (
      <CustomTextField {...params} placeholder="Select movie" aria-label="Select movie" />
    )}
  />

);

export default ComboBoxAutocomplete;

===== src/components/forms/form-elements/autoComplete/ControlledStateAutocomplete.tsx =====
'use client'

import { Typography } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import CustomTextField from "../../theme-elements/CustomTextField";
import React from 'react';

const options = ['Option 1', 'Option 2'];

const ControlledStateAutocomplete = () => {
  const [value, setValue] = React.useState<string | null>(options[0]);
  const [inputValue, setInputValue] = React.useState('');

  return (
    <>
      <Autocomplete
        value={value}
        onChange={(_event: any, newValue: string | null) => {
          setValue(newValue);
        }}
        inputValue={inputValue}
        onInputChange={(_event, newInputValue) => {
          setInputValue(newInputValue);
        }}
        id="controllable-states-demo"
        options={options}
        fullWidth
        renderInput={(params) => (
          <CustomTextField
            {...params}
            placeholder="Controllable"
            aria-label="Controllable"
          />
        )}
      />
      <Typography
        color="textSecondary"
        variant="subtitle2"
        sx={{
          mt: 1,
        }}
      >{`value: ${value !== null ? `'${value}'` : 'null'}`}</Typography>
      <Typography
        color="textSecondary"
        variant="subtitle2"
      >{`inputvalue: '${inputValue}'`}</Typography>
    </>
  );
};

export default ControlledStateAutocomplete;

===== src/components/forms/form-elements/autoComplete/countrydata.tsx =====
const countryData = [
    { code: 'AD', label: 'Andorra', phone: '376' },
    {
        code: 'AE',
        label: 'United Arab Emirates',
        phone: '971',
    },
    { code: 'AF', label: 'Afghanistan', phone: '93' },
    {
        code: 'AG',
        label: 'Antigua and Barbuda',
        phone: '1-268',
    },
    { code: 'AI', label: 'Anguilla', phone: '1-264' },
    { code: 'AL', label: 'Albania', phone: '355' },
    { code: 'AM', label: 'Armenia', phone: '374' },
    { code: 'AO', label: 'Angola', phone: '244' },
    { code: 'AQ', label: 'Antarctica', phone: '672' },
    { code: 'AR', label: 'Argentina', phone: '54' },
    { code: 'AS', label: 'American Samoa', phone: '1-684' },
    { code: 'AT', label: 'Austria', phone: '43' },
    {
        code: 'AU',
        label: 'Australia',
        phone: '61',
        suggested: true,
    },
    { code: 'AW', label: 'Aruba', phone: '297' },
    { code: 'AX', label: 'Alland Islands', phone: '358' },
    { code: 'AZ', label: 'Azerbaijan', phone: '994' },
    {
        code: 'BA',
        label: 'Bosnia and Herzegovina',
        phone: '387',
    },
    { code: 'BB', label: 'Barbados', phone: '1-246' },
    { code: 'BD', label: 'Bangladesh', phone: '880' },
    { code: 'BE', label: 'Belgium', phone: '32' },
    { code: 'BF', label: 'Burkina Faso', phone: '226' },
    { code: 'BG', label: 'Bulgaria', phone: '359' },
    { code: 'BH', label: 'Bahrain', phone: '973' },
    { code: 'BI', label: 'Burundi', phone: '257' },
    { code: 'BJ', label: 'Benin', phone: '229' },
    { code: 'BL', label: 'Saint Barthelemy', phone: '590' },
    { code: 'BM', label: 'Bermuda', phone: '1-441' },
    { code: 'BN', label: 'Brunei Darussalam', phone: '673' },
    { code: 'BO', label: 'Bolivia', phone: '591' },
    { code: 'BR', label: 'Brazil', phone: '55' },
    { code: 'BS', label: 'Bahamas', phone: '1-242' },
    { code: 'BT', label: 'Bhutan', phone: '975' },
    { code: 'BV', label: 'Bouvet Island', phone: '47' },
    { code: 'BW', label: 'Botswana', phone: '267' },
    { code: 'BY', label: 'Belarus', phone: '375' },
    { code: 'BZ', label: 'Belize', phone: '501' },
    {
        code: 'CA',
        label: 'Canada',
        phone: '1',
        suggested: true,
    },
    {
        code: 'CC',
        label: 'Cocos (Keeling) Islands',
        phone: '61',
    },
    {
        code: 'CD',
        label: 'Congo, Democratic Republic of the',
        phone: '243',
    },
    {
        code: 'CF',
        label: 'Central African Republic',
        phone: '236',
    },
    {
        code: 'CG',
        label: 'Congo, Republic of the',
        phone: '242',
    },
    { code: 'CH', label: 'Switzerland', phone: '41' },
    { code: 'CI', label: "Cote d'Ivoire", phone: '225' },
    { code: 'CK', label: 'Cook Islands', phone: '682' },
    { code: 'CL', label: 'Chile', phone: '56' },
    { code: 'CM', label: 'Cameroon', phone: '237' },
    { code: 'CN', label: 'China', phone: '86' },
    { code: 'CO', label: 'Colombia', phone: '57' },
    { code: 'CR', label: 'Costa Rica', phone: '506' },
    { code: 'CU', label: 'Cuba', phone: '53' },
    { code: 'CV', label: 'Cape Verde', phone: '238' },
    { code: 'CW', label: 'Curacao', phone: '599' },
    { code: 'CX', label: 'Christmas Island', phone: '61' },
    { code: 'CY', label: 'Cyprus', phone: '357' },
    { code: 'CZ', label: 'Czech Republic', phone: '420' },
    {
        code: 'DE',
        label: 'Germany',
        phone: '49',
        suggested: true,
    },
    { code: 'DJ', label: 'Djibouti', phone: '253' },
    { code: 'DK', label: 'Denmark', phone: '45' },
    { code: 'DM', label: 'Dominica', phone: '1-767' },
    {
        code: 'DO',
        label: 'Dominican Republic',
        phone: '1-809',
    },
    { code: 'DZ', label: 'Algeria', phone: '213' },
    { code: 'EC', label: 'Ecuador', phone: '593' },
    { code: 'EE', label: 'Estonia', phone: '372' },
    { code: 'EG', label: 'Egypt', phone: '20' },
    { code: 'EH', label: 'Western Sahara', phone: '212' },
    { code: 'ER', label: 'Eritrea', phone: '291' },
    { code: 'ES', label: 'Spain', phone: '34' },
    { code: 'ET', label: 'Ethiopia', phone: '251' },
    { code: 'FI', label: 'Finland', phone: '358' },
    { code: 'FJ', label: 'Fiji', phone: '679' },
    {
        code: 'FK',
        label: 'Falkland Islands (Malvinas)',
        phone: '500',
    },
    {
        code: 'FM',
        label: 'Micronesia, Federated States of',
        phone: '691',
    },
    { code: 'FO', label: 'Faroe Islands', phone: '298' },
    {
        code: 'FR',
        label: 'France',
        phone: '33',
        suggested: true,
    },
    { code: 'GA', label: 'Gabon', phone: '241' },
    { code: 'GB', label: 'United Kingdom', phone: '44' },
    { code: 'GD', label: 'Grenada', phone: '1-473' },
    { code: 'GE', label: 'Georgia', phone: '995' },
    { code: 'GF', label: 'French Guiana', phone: '594' },
    { code: 'GG', label: 'Guernsey', phone: '44' },
    { code: 'GH', label: 'Ghana', phone: '233' },
    { code: 'GI', label: 'Gibraltar', phone: '350' },
    { code: 'GL', label: 'Greenland', phone: '299' },
    { code: 'GM', label: 'Gambia', phone: '220' },
    { code: 'GN', label: 'Guinea', phone: '224' },
    { code: 'GP', label: 'Guadeloupe', phone: '590' },
    { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },
    { code: 'GR', label: 'Greece', phone: '30' },
    {
        code: 'GS',
        label: 'South Georgia and the South Sandwich Islands',
        phone: '500',
    },
    { code: 'GT', label: 'Guatemala', phone: '502' },
    { code: 'GU', label: 'Guam', phone: '1-671' },
    { code: 'GW', label: 'Guinea-Bissau', phone: '245' },
    { code: 'GY', label: 'Guyana', phone: '592' },
    { code: 'HK', label: 'Hong Kong', phone: '852' },
    {
        code: 'HM',
        label: 'Heard Island and McDonald Islands',
        phone: '672',
    },
    { code: 'HN', label: 'Honduras', phone: '504' },
    { code: 'HR', label: 'Croatia', phone: '385' },
    { code: 'HT', label: 'Haiti', phone: '509' },
    { code: 'HU', label: 'Hungary', phone: '36' },
    { code: 'ID', label: 'Indonesia', phone: '62' },
    { code: 'IE', label: 'Ireland', phone: '353' },
    { code: 'IL', label: 'Israel', phone: '972' },
    { code: 'IM', label: 'Isle of Man', phone: '44' },
    { code: 'IN', label: 'India', phone: '91' },
    {
        code: 'IO',
        label: 'British Indian Ocean Territory',
        phone: '246',
    },
    { code: 'IQ', label: 'Iraq', phone: '964' },
    {
        code: 'IR',
        label: 'Iran, Islamic Republic of',
        phone: '98',
    },
    { code: 'IS', label: 'Iceland', phone: '354' },
    { code: 'IT', label: 'Italy', phone: '39' },
    { code: 'JE', label: 'Jersey', phone: '44' },
    { code: 'JM', label: 'Jamaica', phone: '1-876' },
    { code: 'JO', label: 'Jordan', phone: '962' },
    {
        code: 'JP',
        label: 'Japan',
        phone: '81',
        suggested: true,
    },
    { code: 'KE', label: 'Kenya', phone: '254' },
    { code: 'KG', label: 'Kyrgyzstan', phone: '996' },
    { code: 'KH', label: 'Cambodia', phone: '855' },
    { code: 'KI', label: 'Kiribati', phone: '686' },
    { code: 'KM', label: 'Comoros', phone: '269' },
    {
        code: 'KN',
        label: 'Saint Kitts and Nevis',
        phone: '1-869',
    },
    {
        code: 'KP',
        label: "Korea, Democratic People's Republic of",
        phone: '850',
    },
    { code: 'KR', label: 'Korea, Republic of', phone: '82' },
    { code: 'KW', label: 'Kuwait', phone: '965' },
    { code: 'KY', label: 'Cayman Islands', phone: '1-345' },
    { code: 'KZ', label: 'Kazakhstan', phone: '7' },
    {
        code: 'LA',
        label: "Lao People's Democratic Republic",
        phone: '856',
    },
    { code: 'LB', label: 'Lebanon', phone: '961' },
    { code: 'LC', label: 'Saint Lucia', phone: '1-758' },
    { code: 'LI', label: 'Liechtenstein', phone: '423' },
    { code: 'LK', label: 'Sri Lanka', phone: '94' },
    { code: 'LR', label: 'Liberia', phone: '231' },
    { code: 'LS', label: 'Lesotho', phone: '266' },
    { code: 'LT', label: 'Lithuania', phone: '370' },
    { code: 'LU', label: 'Luxembourg', phone: '352' },
    { code: 'LV', label: 'Latvia', phone: '371' },
    { code: 'LY', label: 'Libya', phone: '218' },
    { code: 'MA', label: 'Morocco', phone: '212' },
    { code: 'MC', label: 'Monaco', phone: '377' },
    {
        code: 'MD',
        label: 'Moldova, Republic of',
        phone: '373',
    },
    { code: 'ME', label: 'Montenegro', phone: '382' },
    {
        code: 'MF',
        label: 'Saint Martin (French part)',
        phone: '590',
    },
    { code: 'MG', label: 'Madagascar', phone: '261' },
    { code: 'MH', label: 'Marshall Islands', phone: '692' },
    {
        code: 'MK',
        label: 'Macedonia, the Former Yugoslav Republic of',
        phone: '389',
    },
    { code: 'ML', label: 'Mali', phone: '223' },
    { code: 'MM', label: 'Myanmar', phone: '95' },
    { code: 'MN', label: 'Mongolia', phone: '976' },
    { code: 'MO', label: 'Macao', phone: '853' },
    {
        code: 'MP',
        label: 'Northern Mariana Islands',
        phone: '1-670',
    },
    { code: 'MQ', label: 'Martinique', phone: '596' },
    { code: 'MR', label: 'Mauritania', phone: '222' },
    { code: 'MS', label: 'Montserrat', phone: '1-664' },
    { code: 'MT', label: 'Malta', phone: '356' },
    { code: 'MU', label: 'Mauritius', phone: '230' },
    { code: 'MV', label: 'Maldives', phone: '960' },
    { code: 'MW', label: 'Malawi', phone: '265' },
    { code: 'MX', label: 'Mexico', phone: '52' },
    { code: 'MY', label: 'Malaysia', phone: '60' },
    { code: 'MZ', label: 'Mozambique', phone: '258' },
    { code: 'NA', label: 'Namibia', phone: '264' },
    { code: 'NC', label: 'New Caledonia', phone: '687' },
    { code: 'NE', label: 'Niger', phone: '227' },
    { code: 'NF', label: 'Norfolk Island', phone: '672' },
    { code: 'NG', label: 'Nigeria', phone: '234' },
    { code: 'NI', label: 'Nicaragua', phone: '505' },
    { code: 'NL', label: 'Netherlands', phone: '31' },
    { code: 'NO', label: 'Norway', phone: '47' },
    { code: 'NP', label: 'Nepal', phone: '977' },
    { code: 'NR', label: 'Nauru', phone: '674' },
    { code: 'NU', label: 'Niue', phone: '683' },
    { code: 'NZ', label: 'New Zealand', phone: '64' },
    { code: 'OM', label: 'Oman', phone: '968' },
    { code: 'PA', label: 'Panama', phone: '507' },
    { code: 'PE', label: 'Peru', phone: '51' },
    { code: 'PF', label: 'French Polynesia', phone: '689' },
    { code: 'PG', label: 'Papua New Guinea', phone: '675' },
    { code: 'PH', label: 'Philippines', phone: '63' },
    { code: 'PK', label: 'Pakistan', phone: '92' },
    { code: 'PL', label: 'Poland', phone: '48' },
    {
        code: 'PM',
        label: 'Saint Pierre and Miquelon',
        phone: '508',
    },
    { code: 'PN', label: 'Pitcairn', phone: '870' },
    { code: 'PR', label: 'Puerto Rico', phone: '1' },
    {
        code: 'PS',
        label: 'Palestine, State of',
        phone: '970',
    },
    { code: 'PT', label: 'Portugal', phone: '351' },
    { code: 'PW', label: 'Palau', phone: '680' },
    { code: 'PY', label: 'Paraguay', phone: '595' },
    { code: 'QA', label: 'Qatar', phone: '974' },
    { code: 'RE', label: 'Reunion', phone: '262' },
    { code: 'RO', label: 'Romania', phone: '40' },
    { code: 'RS', label: 'Serbia', phone: '381' },
    { code: 'RU', label: 'Russian Federation', phone: '7' },
    { code: 'RW', label: 'Rwanda', phone: '250' },
    { code: 'SA', label: 'Saudi Arabia', phone: '966' },
    { code: 'SB', label: 'Solomon Islands', phone: '677' },
    { code: 'SC', label: 'Seychelles', phone: '248' },
    { code: 'SD', label: 'Sudan', phone: '249' },
    { code: 'SE', label: 'Sweden', phone: '46' },
    { code: 'SG', label: 'Singapore', phone: '65' },
    { code: 'SH', label: 'Saint Helena', phone: '290' },
    { code: 'SI', label: 'Slovenia', phone: '386' },
    {
        code: 'SJ',
        label: 'Svalbard and Jan Mayen',
        phone: '47',
    },
    { code: 'SK', label: 'Slovakia', phone: '421' },
    { code: 'SL', label: 'Sierra Leone', phone: '232' },
    { code: 'SM', label: 'San Marino', phone: '378' },
    { code: 'SN', label: 'Senegal', phone: '221' },
    { code: 'SO', label: 'Somalia', phone: '252' },
    { code: 'SR', label: 'Suriname', phone: '597' },
    { code: 'SS', label: 'South Sudan', phone: '211' },
    {
        code: 'ST',
        label: 'Sao Tome and Principe',
        phone: '239',
    },
    { code: 'SV', label: 'El Salvador', phone: '503' },
    {
        code: 'SX',
        label: 'Sint Maarten (Dutch part)',
        phone: '1-721',
    },
    {
        code: 'SY',
        label: 'Syrian Arab Republic',
        phone: '963',
    },
    { code: 'SZ', label: 'Swaziland', phone: '268' },
    {
        code: 'TC',
        label: 'Turks and Caicos Islands',
        phone: '1-649',
    },
    { code: 'TD', label: 'Chad', phone: '235' },
    {
        code: 'TF',
        label: 'French Southern Territories',
        phone: '262',
    },
    { code: 'TG', label: 'Togo', phone: '228' },
    { code: 'TH', label: 'Thailand', phone: '66' },
    { code: 'TJ', label: 'Tajikistan', phone: '992' },
    { code: 'TK', label: 'Tokelau', phone: '690' },
    { code: 'TL', label: 'Timor-Leste', phone: '670' },
    { code: 'TM', label: 'Turkmenistan', phone: '993' },
    { code: 'TN', label: 'Tunisia', phone: '216' },
    { code: 'TO', label: 'Tonga', phone: '676' },
    { code: 'TR', label: 'Turkey', phone: '90' },
    {
        code: 'TT',
        label: 'Trinidad and Tobago',
        phone: '1-868',
    },
    { code: 'TV', label: 'Tuvalu', phone: '688' },
    {
        code: 'TW',
        label: 'Taiwan, Province of China',
        phone: '886',
    },
    {
        code: 'TZ',
        label: 'United Republic of Tanzania',
        phone: '255',
    },
    { code: 'UA', label: 'Ukraine', phone: '380' },
    { code: 'UG', label: 'Uganda', phone: '256' },
    {
        code: 'US',
        label: 'United States',
        phone: '1',
        suggested: true,
    },
    { code: 'UY', label: 'Uruguay', phone: '598' },
    { code: 'UZ', label: 'Uzbekistan', phone: '998' },
    {
        code: 'VA',
        label: 'Holy See (Vatican City State)',
        phone: '379',
    },
    {
        code: 'VC',
        label: 'Saint Vincent and the Grenadines',
        phone: '1-784',
    },
    { code: 'VE', label: 'Venezuela', phone: '58' },
    {
        code: 'VG',
        label: 'British Virgin Islands',
        phone: '1-284',
    },
    {
        code: 'VI',
        label: 'US Virgin Islands',
        phone: '1-340',
    },
    { code: 'VN', label: 'Vietnam', phone: '84' },
    { code: 'VU', label: 'Vanuatu', phone: '678' },
    { code: 'WF', label: 'Wallis and Futuna', phone: '681' },
    { code: 'WS', label: 'Samoa', phone: '685' },
    { code: 'XK', label: 'Kosovo', phone: '383' },
    { code: 'YE', label: 'Yemen', phone: '967' },
    { code: 'YT', label: 'Mayotte', phone: '262' },
    { code: 'ZA', label: 'South Africa', phone: '27' },
    { code: 'ZM', label: 'Zambia', phone: '260' },
    { code: 'ZW', label: 'Zimbabwe', phone: '263' },
];

export default countryData;

===== src/components/forms/form-elements/autoComplete/CountrySelectAutocomplete.tsx =====
'use client'

import { Box } from '@mui/material'
import Autocomplete from '@mui/material/Autocomplete'
import CustomTextField from '../../theme-elements/CustomTextField'
import countryData from './countrydata'

const countryToFlag = (isoCode: any) =>
  typeof String.fromCodePoint !== 'undefined'
    ? isoCode
      .toUpperCase()
      .replace(/./g, (char: any) =>
        String.fromCodePoint(char.charCodeAt(0) + 127397)
      )
    : isoCode

const CountrySelectAutocomplete = () => {
  return (
    <Autocomplete
      id='country-select-demo'
      fullWidth
      options={countryData}
      autoHighlight
      getOptionLabel={(option) => option.label}
      renderOption={(props, option) => {
        const { key, ...optionProps } = props
        return (
          <Box
            key={key}
            component='li'
            sx={{ fontSize: 15, '& > span': { mr: '10px', fontSize: 18 } }}
            {...optionProps}>
            <span>{countryToFlag(option.code)}</span>
            {option.label} ({option.code}) +{option.phone}
          </Box>
        )
      }}
      renderInput={(params) => (
        <CustomTextField
          {...params}
          placeholder='Choose a country'
          aria-label='Choose a country'
          autoComplete='off'
          inputProps={{
            ...params.inputProps,
            autoComplete: 'new-password', // disable autocomplete and autofill
          }}
        />
      )}
    />
  )
}

export default CountrySelectAutocomplete

===== src/components/forms/form-elements/autoComplete/data.ts =====
const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  { title: 'The Dark Knight', year: 2008 },
  { title: '12 Angry Men', year: 1957 },
  { title: "Schindler's List", year: 1993 },
  { title: 'Pulp Fiction', year: 1994 },
  {
    title: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { title: 'The Good, the Bad and the Ugly', year: 1966 },
  { title: 'Fight Club', year: 1999 },
  {
    title: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    title: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { title: 'Forrest Gump', year: 1994 },
  { title: 'Inception', year: 2010 },
  {
    title: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { title: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { title: 'Goodfellas', year: 1990 },
  { title: 'The Matrix', year: 1999 },
  { title: 'Seven Samurai', year: 1954 },
  {
    title: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { title: 'City of God', year: 2002 },
  { title: 'Se7en', year: 1995 },
  { title: 'The Silence of the Lambs', year: 1991 },
  { title: "It's a Wonderful Life", year: 1946 },
  { title: 'Life Is Beautiful', year: 1997 },
  { title: 'The Usual Suspects', year: 1995 },
  { title: 'Léon: The Professional', year: 1994 },
  { title: 'Spirited Away', year: 2001 },
  { title: 'Saving Private Ryan', year: 1998 },
  { title: 'Once Upon a Time in the West', year: 1968 },
  { title: 'American History X', year: 1998 },
  { title: 'Interstellar', year: 2014 },
];

export default top100Films;

===== src/components/forms/form-elements/autoComplete/FreeSoloAutocomplete.tsx =====
'use client'

import { Stack } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import CustomTextField from '../../theme-elements/CustomTextField';
import top100Films from './data';

const FreeSoloAutocomplete = () => {

  return (
    <Stack>
      <Autocomplete
        id="free-solo-demo"
        freeSolo
        fullWidth
        sx={{
          mb: 2,
        }}
        options={top100Films.map((option) => option.title)}
        renderInput={(params) => (
          <CustomTextField {...params} placeholder="FreeSolo" aria-label="FreeSolo" />
        )}
      />
      <Autocomplete
        freeSolo
        fullWidth
        id="free-solo-2-demo"
        disableClearable
        options={top100Films.map((option) => option.title)}
        renderInput={(params) => (
          <CustomTextField
            {...params}
            placeholder="Search input"
            aria-label="Search input"
            inputProps={{
              ...params.inputProps,
              type: 'search',
            }}
          />
        )}
      />
    </Stack>
  );
};

export default FreeSoloAutocomplete;

===== src/components/forms/form-elements/autoComplete/MultipleValuesAutocomplete.tsx =====
'use client'

import Autocomplete from '@mui/material/Autocomplete';
import CustomTextField from '../../theme-elements/CustomTextField';
import top100Films from './data';

const MultipleValuesAutocomplete = () => (
  <Autocomplete
    multiple
    fullWidth
    id="tags-outlined"
    options={top100Films}
    getOptionLabel={(option) => option.title}
    defaultValue={[top100Films[13]]}
    filterSelectedOptions
    renderInput={(params) => (
      <CustomTextField {...params} placeholder="Favorites" aria-label="Favorites" />
    )}
  />
);

export default MultipleValuesAutocomplete;

===== src/components/forms/form-elements/autoComplete/SizesAutocomplete.tsx =====
'use client'

import Autocomplete from '@mui/material/Autocomplete';
import CustomTextField from '../../theme-elements/CustomTextField';

// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top
const top100Films = [
  { label: 'The Shawshank Redemption', year: 1994 },
  { label: 'The Godfather', year: 1972 },
  { label: 'The Godfather: Part II', year: 1974 },
  { label: 'The Dark Knight', year: 2008 },
  { label: '12 Angry Men', year: 1957 },
  { label: "Schindler's List", year: 1993 },
  { label: 'Pulp Fiction', year: 1994 },
  {
    label: 'The Lord of the Rings: The Return of the King',
    year: 2003,
  },
  { label: 'The Good, the Bad and the Ugly', year: 1966 },
  { label: 'Fight Club', year: 1999 },
  {
    label: 'The Lord of the Rings: The Fellowship of the Ring',
    year: 2001,
  },
  {
    label: 'Star Wars: Episode V - The Empire Strikes Back',
    year: 1980,
  },
  { label: 'Forrest Gump', year: 1994 },
  { label: 'Inception', year: 2010 },
  {
    label: 'The Lord of the Rings: The Two Towers',
    year: 2002,
  },
  { label: "One Flew Over the Cuckoo's Nest", year: 1975 },
  { label: 'Goodfellas', year: 1990 },
  { label: 'The Matrix', year: 1999 },
  { label: 'Seven Samurai', year: 1954 },
  {
    label: 'Star Wars: Episode IV - A New Hope',
    year: 1977,
  },
  { label: 'City of God', year: 2002 },
  { label: 'Se7en', year: 1995 },
  { label: 'The Silence of the Lambs', year: 1991 },
  { label: "It's a Wonderful Life", year: 1946 },
  { label: 'Life Is Beautiful', year: 1997 },
  { label: 'The Usual Suspects', year: 1995 },
  { label: 'Léon: The Professional', year: 1994 },
  { label: 'Spirited Away', year: 2001 },
  { label: 'Saving Private Ryan', year: 1998 },
  { label: 'Once Upon a Time in the West', year: 1968 },
  { label: 'American History X', year: 1998 },
  { label: 'Interstellar', year: 2014 },
  { label: 'Casablanca', year: 1942 },
  { label: 'City Lights', year: 1931 },
  { label: 'Psycho', year: 1960 },
  { label: 'The Green Mile', year: 1999 },
  { label: 'The Intouchables', year: 2011 },
  { label: 'Modern Times', year: 1936 },
  { label: 'Raiders of the Lost Ark', year: 1981 },
  { label: 'Rear Window', year: 1954 },
  { label: 'The Pianist', year: 2002 },
  { label: 'The Departed', year: 2006 },
  { label: 'Terminator 2: Judgment Day', year: 1991 },
  { label: 'Back to the Future', year: 1985 },
  { label: 'Whiplash', year: 2014 },
  { label: 'Gladiator', year: 2000 },
  { label: 'Memento', year: 2000 },
  { label: 'The Prestige', year: 2006 },
  { label: 'The Lion King', year: 1994 },
  { label: 'Apocalypse Now', year: 1979 },
  { label: 'Alien', year: 1979 },
  { label: 'Sunset Boulevard', year: 1950 },
  {
    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',
    year: 1964,
  },
  { label: 'The Great Dictator', year: 1940 },
  { label: 'Cinema Paradiso', year: 1988 },
  { label: 'The Lives of Others', year: 2006 },
  { label: 'Grave of the Fireflies', year: 1988 },
  { label: 'Paths of Glory', year: 1957 },
  { label: 'Django Unchained', year: 2012 },
  { label: 'The Shining', year: 1980 },
  { label: 'WALL·E', year: 2008 },
  { label: 'American Beauty', year: 1999 },
  { label: 'The Dark Knight Rises', year: 2012 },
  { label: 'Princess Mononoke', year: 1997 },
  { label: 'Aliens', year: 1986 },
  { label: 'Oldboy', year: 2003 },
  { label: 'Once Upon a Time in America', year: 1984 },
  { label: 'Witness for the Prosecution', year: 1957 },
  { label: 'Das Boot', year: 1981 },
  { label: 'Citizen Kane', year: 1941 },
  { label: 'North by Northwest', year: 1959 },
  { label: 'Vertigo', year: 1958 },
  {
    label: 'Star Wars: Episode VI - Return of the Jedi',
    year: 1983,
  },
  { label: 'Reservoir Dogs', year: 1992 },
  { label: 'Braveheart', year: 1995 },
  { label: 'M', year: 1931 },
  { label: 'Requiem for a Dream', year: 2000 },
  { label: 'Amélie', year: 2001 },
  { label: 'A Clockwork Orange', year: 1971 },
  { label: 'Like Stars on Earth', year: 2007 },
  { label: 'Taxi Driver', year: 1976 },
  { label: 'Lawrence of Arabia', year: 1962 },
  { label: 'Double Indemnity', year: 1944 },
  {
    label: 'Eternal Sunshine of the Spotless Mind',
    year: 2004,
  },
  { label: 'Amadeus', year: 1984 },
  { label: 'To Kill a Mockingbird', year: 1962 },
  { label: 'Toy Story 3', year: 2010 },
  { label: 'Logan', year: 2017 },
  { label: 'Full Metal Jacket', year: 1987 },
  { label: 'Dangal', year: 2016 },
  { label: 'The Sting', year: 1973 },
  { label: '2001: A Space Odyssey', year: 1968 },
  { label: "Singin' in the Rain", year: 1952 },
  { label: 'Toy Story', year: 1995 },
  { label: 'Bicycle Thieves', year: 1948 },
  { label: 'The Kid', year: 1921 },
  { label: 'Inglourious Basterds', year: 2009 },
  { label: 'Snatch', year: 2000 },
  { label: '3 Idiots', year: 2009 },
  { label: 'Monty Python and the Holy Grail', year: 1975 },
];


const SizesAutocomplete = () => (
  <>
    <Autocomplete
      disablePortal
      id="medium-combo-box-demo"
      options={top100Films}
      fullWidth
      sx={{
        mb: 2,
      }}
      renderInput={(params) => (
        <CustomTextField {...params} placeholder="Size Medium" aria-label="Size Medium" />
      )}
    />

    <Autocomplete
      disablePortal
      id="medium-combo-box-demo"
      options={top100Films}
      fullWidth
      size="small"
      renderInput={(params) => (
        <CustomTextField {...params} placeholder="Size Small" aria-label="Size Small" />
      )}
    />
  </>
);

export default SizesAutocomplete;

===== src/components/forms/form-elements/button/code/ColorButtonGroupCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColorButtonGroupCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, ButtonGroup, Stack } from '@mui/material';
import { IconAlignCenter, IconAlignLeft, IconAlignRight, IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';

<Stack spacing={2} direction={{ xs: 'column', sm: 'row', lg: 'column' }} justifyContent="center">
    <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
        <ButtonGroup variant="contained" aria-label="outlined primary button group">
          <Button>One</Button>
          <Button>Two</Button>
          <Button>Three</Button>
        </ButtonGroup>
        <ButtonGroup
          variant="contained"
          color="secondary"
          aria-label="outlined primary button group"
        >
          <Button>One</Button>
          <Button>Two</Button>
          <Button>Three</Button>
        </ButtonGroup>
        <ButtonGroup variant="contained" color="error" aria-label="outlined primary button group">
          <Button>One</Button>
          <Button>Two</Button>
          <Button>Three</Button>
        </ButtonGroup>
        <ButtonGroup
          color="success"
          variant="contained"
          aria-label="outlined primary button group"
        >
          <Button>One</Button>
          <Button>Two</Button>
          <Button>Three</Button>
        </ButtonGroup>
    </Stack>
    <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
        <ButtonGroup variant="outlined" aria-label="outlined button group">
          <Button>
            <IconPlayerSkipBack width={18} />
          </Button>
          <Button>
            <IconPlayerPlay width={18} />
          </Button>
          <Button>
            <IconPlayerSkipForward width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup variant="outlined" color="secondary" aria-label="outlined button group">
          <Button>
            <IconPlayerSkipBack width={18} />
          </Button>
          <Button>
            <IconPlayerPlay width={18} />
          </Button>
          <Button>
            <IconPlayerSkipForward width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup variant="outlined" color="warning" aria-label="outlined button group">
          <Button>
            <IconPlayerSkipBack width={18} />
          </Button>
          <Button>
            <IconPlayerPlay width={18} />
          </Button>
          <Button>
            <IconPlayerSkipForward width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup variant="outlined" color="error" aria-label="outlined button group">
          <Button>
            <IconPlayerSkipBack width={18} />
          </Button>
          <Button>
            <IconPlayerPlay width={18} />
          </Button>
          <Button>
            <IconPlayerSkipForward width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup variant="outlined" color="success" aria-label="outlined button group">
          <Button>
            <IconPlayerSkipBack width={18} />
          </Button>
          <Button>
            <IconPlayerPlay width={18} />
          </Button>
          <Button>
            <IconPlayerSkipForward width={18} />
          </Button>
        </ButtonGroup>
      </Stack>
      <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
        <ButtonGroup variant="text" aria-label="text button group">
          <Button>
            <IconAlignLeft width={18} />
          </Button>
          <Button>
            <IconAlignCenter width={18} />
          </Button>
          <Button>
            <IconAlignRight width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup color="secondary" variant="text" aria-label="text button group">
          <Button>
            <IconAlignLeft width={18} />
          </Button>
          <Button>
            <IconAlignCenter width={18} />
          </Button>
          <Button>
            <IconAlignRight width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup color="warning" variant="text" aria-label="text button group">
          <Button>
            <IconAlignLeft width={18} />
          </Button>
          <Button>
            <IconAlignCenter width={18} />
          </Button>
          <Button>
            <IconAlignRight width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup color="error" variant="text" aria-label="text button group">
          <Button>
            <IconAlignLeft width={18} />
          </Button>
          <Button>
            <IconAlignCenter width={18} />
          </Button>
          <Button>
            <IconAlignRight width={18} />
          </Button>
        </ButtonGroup>
        <ButtonGroup color="success" variant="text" aria-label="text button group">
          <Button>
            <IconAlignLeft width={18} />
          </Button>
          <Button>
            <IconAlignCenter width={18} />
          </Button>
          <Button>
            <IconAlignRight width={18} />
          </Button>
        </ButtonGroup>
    </Stack>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default ColorButtonGroupCode;

===== src/components/forms/form-elements/button/code/ColorsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColorsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="contained" color="primary">
        Primary
    </Button>
    <Button variant="contained" color="secondary">
        Secondary
    </Button>
    <Button variant="contained" color="error">
        Error
    </Button>
    <Button variant="contained" color="warning">
        Warning
    </Button>
    <Button variant="contained" color="success">
        Success
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default ColorsCode;

===== src/components/forms/form-elements/button/code/DefaultButtonGroupCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DefaultButtonGroupCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, ButtonGroup, Stack } from '@mui/material';

<Stack spacing={1} >
    <ButtonGroup variant="outlined" aria-label="outlined button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup variant="contained" aria-label="outlined primary button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup variant="text" aria-label="text button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default DefaultButtonGroupCode;

===== src/components/forms/form-elements/button/code/DefaultCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DefaultCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="contained" color="primary">
      Primary
    </Button>
    <Button variant="contained" color="secondary">
      Secondary
    </Button>
    <Button disabled>Disabled</Button>
    <Button href="#text-buttons" variant="contained" color="primary">
      Link
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default DefaultCode;

===== src/components/forms/form-elements/button/code/FABCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FABCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconClipboard, IconPlus, IconSend } from '@tabler/icons-react';

<Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Send">
      <Fab color="primary" aria-label="send">
        <IconSend width={20} />
      </Fab>
    </Tooltip>
    <Tooltip title="Add">
      <Fab color="secondary" aria-label="plus">
        <IconPlus width={20} />
      </Fab>
    </Tooltip>
    <Fab disabled aria-label="clipboard">
      <IconClipboard width={20} />
    </Fab>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default FABCode;

===== src/components/forms/form-elements/button/code/FABColorCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FABColorCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconSend } from '@tabler/icons-react';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center" alignItems="center">
    <Tooltip title="Send">
        <Fab color="primary" aria-label="send">
          <IconSend width={20} />
        </Fab>
    </Tooltip>
    <Tooltip title="Send">
        <Fab color="secondary" aria-label="send">
          <IconSend width={20} />
        </Fab>
    </Tooltip>
    <Tooltip title="Send">
        <Fab color="warning" aria-label="send">
          <IconSend width={20} />
        </Fab>
    </Tooltip>
    <Tooltip title="Send">
        <Fab color="error" aria-label="send">
          <IconSend width={20} />
        </Fab>
    </Tooltip>
    <Tooltip title="Send">
        <Fab color="success" aria-label="send">
          <IconSend width={20} />
        </Fab>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default FABColorCode;

===== src/components/forms/form-elements/button/code/FABSizeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FABSizeCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

<Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Bell">
        <Fab size="small" color="primary" aria-label="small-bell">
          <IconBell width={16} />
        </Fab>
    </Tooltip>
    <Tooltip title="Bell">
        <Fab size="medium" color="secondary" aria-label="medium-bell">
          <IconBell width={18} />
        </Fab>
    </Tooltip>
    <Tooltip title="Bell">
        <Fab size="large" color="warning" aria-label="large-bell">
          <IconBell width={20} />
        </Fab>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default FABSizeCode;

===== src/components/forms/form-elements/button/code/IconColorCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconColorCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { IconButton, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

<Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Bell">
      <IconButton color="primary" aria-label="primary-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="secondary" aria-label="secondary-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="error" aria-label="error-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="warning" aria-label="warning-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="success" aria-label="success-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default IconColorCode;

===== src/components/forms/form-elements/button/code/IconSizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconSizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { IconButton, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

<Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Bell">
      <IconButton aria-label="small-bell">
        <IconBell width={16} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton size="medium" aria-label="medium-bell">
        <IconBell width={19} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton aria-label="large-bell">
        <IconBell width={21} />
      </IconButton>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default IconSizesCode;

===== src/components/forms/form-elements/button/code/LoadingButtonsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const LoadingButtonsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Stack } from '@mui/material';
import { IconTrash } from '@tabler/icons-react';
import LoadingButton from '@mui/lab/LoadingButton';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <LoadingButton loading loadingIndicator="Loading…"
      variant="contained"
      color="error"
      startIcon={<IconTrash width={18} />}
    >
      Left Icon
    </LoadingButton >
    <LoadingButton loading
      variant="contained"
      color="secondary"
      endIcon={<IconTrash width={18} />}
    >
      Right Icon
    </LoadingButton >
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default LoadingButtonsCode;

===== src/components/forms/form-elements/button/code/OutlinedCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OutlinedCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="outlined" color="primary">
      Primary
    </Button>
    <Button variant="outlined" color="secondary">
      Secondary
    </Button>
    <Button variant="outlined" color="error">
      Error
    </Button>
    <Button variant="outlined" color="warning">
      Warning
    </Button>
    <Button variant="outlined" color="success">
      Success
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default OutlinedCode;

===== src/components/forms/form-elements/button/code/OutlinedIconCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OutlinedIconCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';
import { IconTrash, IconSend } from '@tabler/icons-react';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button
        variant="outlined"
        color="error"
        startIcon={<IconTrash width={18} />}
    >
        Left Icon
    </Button>
    <Button
        variant="outlined"
        color="secondary"
        endIcon={<IconSend width={18} />}
    >
        Right Icon
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default OutlinedIconCode;

===== src/components/forms/form-elements/button/code/OutlineSizeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OutlineSizeCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} alignItems="center" justifyContent="center">
    <Button variant="outlined" size="small">
      Small
    </Button>
    <Button variant="outlined" size="medium">
      Medium
    </Button>
    <Button variant="outlined" size="large">
      Large
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default OutlineSizeCode;

===== src/components/forms/form-elements/button/code/SizeButtonGroupCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizeButtonGroupCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, ButtonGroup, Stack } from '@mui/material';

<Stack spacing={1} justifyContent="center">
    <ButtonGroup size="small" variant="outlined" aria-label="outlined primary button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup variant="outlined" aria-label="outlined button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup size="large" variant="outlined" aria-label="text button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
    </ButtonGroup>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default SizeButtonGroupCode;

===== src/components/forms/form-elements/button/code/SizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} alignItems="center" justifyContent="center">
    <Button variant="contained" size="small">
      Small
    </Button>
    <Button variant="contained" size="medium">
      Medium
    </Button>
    <Button variant="contained" size="large">
      Large
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default SizesCode;

===== src/components/forms/form-elements/button/code/TextButtonGroupCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextButtonGroupCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, ButtonGroup, Stack } from '@mui/material';

<Stack spacing={1} direction="column" justifyContent="center">
    <ButtonGroup variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup color="secondary" variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup color="error" variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default TextButtonGroupCode;

===== src/components/forms/form-elements/button/code/TextCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const TextCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button color="primary">Primary</Button>
    <Button color="secondary">Secondary</Button>
    <Button disabled>Disabled</Button>
    <Button href="#text-buttons" color="primary">
      Link
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  )
}

export default TextCode

===== src/components/forms/form-elements/button/code/TextColorCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextColorCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button color="primary">Primary</Button>
    <Button color="secondary">Secondary</Button>
    <Button color="error">Error</Button>
    <Button color="warning">Warning</Button>
    <Button color="success">Success</Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default TextColorCode;

===== src/components/forms/form-elements/button/code/TextIconColor.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextIconColor = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';
import { IconTrash, IconSend } from '@tabler/icons-react';

<Stack spacing={1} direction="row" justifyContent="center">
    <Button color="error" startIcon={<IconTrash width={18} />}>
      Left Icon
    </Button>
    <Button color="secondary" endIcon={<IconSend width={18} />}>
      Right Icon
    </Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default TextIconColor;

===== src/components/forms/form-elements/button/code/TextSizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextSizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Button, Stack } from '@mui/material';

<Stack spacing={1} direction="row" alignItems="center" justifyContent="center">
    <Button size="small">Small</Button>
    <Button size="medium">Medium</Button>
    <Button size="large">Large</Button>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default TextSizesCode;

===== src/components/forms/form-elements/button/code/VerticalButtonGroupCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const VerticalButtonGroupCode = () => {
  return (
    <>
      <CodeDialog>
        {`
  "use client";
  
  import { Button, ButtonGroup, Stack } from '@mui/material';

  <Stack spacing={1} direction="row">
      <ButtonGroup
        orientation="vertical"
        variant="contained"
        aria-label="outlined primary button group"
      >
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>

      <ButtonGroup orientation="vertical" variant="outlined" aria-label="outlined button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>

      <ButtonGroup orientation="vertical" variant="text" aria-label="text button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>
  </Stack>`}
      </CodeDialog>
    </>
  );
};

export default VerticalButtonGroupCode;

===== src/components/forms/form-elements/button/ColorButtonGroup.tsx =====

import { Button, ButtonGroup, Stack } from '@mui/material';
import { IconAlignCenter, IconAlignLeft, IconAlignRight, IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';

const ColorButtonGroup = () => (
  <Stack spacing={2} direction={{ xs: 'column', sm: 'row', lg: 'column' }} justifyContent="center">
    {/* item 1 */}
    <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
      <ButtonGroup variant="contained" aria-label="outlined primary button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>

      <ButtonGroup
        variant="contained"
        color="secondary"
        aria-label="outlined primary button group"
      >
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>


      <ButtonGroup variant="contained" color="error" aria-label="outlined primary button group">
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>

      <ButtonGroup
        color="success"
        variant="contained"
        aria-label="outlined primary button group"
      >
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>
    </Stack>
    {/* item 2 */}
    <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
      <ButtonGroup variant="outlined" aria-label="outlined button group">
        <Button>
          <IconPlayerSkipBack width={18} />
        </Button>
        <Button>
          <IconPlayerPlay width={18} />
        </Button>
        <Button>
          <IconPlayerSkipForward width={18} />
        </Button>
      </ButtonGroup>
      <ButtonGroup variant="outlined" color="secondary" aria-label="outlined button group">
        <Button>
          <IconPlayerSkipBack width={18} />
        </Button>
        <Button>
          <IconPlayerPlay width={18} />
        </Button>
        <Button>
          <IconPlayerSkipForward width={18} />
        </Button>
      </ButtonGroup>

      <ButtonGroup variant="outlined" color="warning" aria-label="outlined button group">
        <Button>
          <IconPlayerSkipBack width={18} />
        </Button>
        <Button>
          <IconPlayerPlay width={18} />
        </Button>
        <Button>
          <IconPlayerSkipForward width={18} />
        </Button>
      </ButtonGroup>

      <ButtonGroup variant="outlined" color="error" aria-label="outlined button group">
        <Button>
          <IconPlayerSkipBack width={18} />
        </Button>
        <Button>
          <IconPlayerPlay width={18} />
        </Button>
        <Button>
          <IconPlayerSkipForward width={18} />
        </Button>
      </ButtonGroup>

      <ButtonGroup variant="outlined" color="success" aria-label="outlined button group">
        <Button>
          <IconPlayerSkipBack width={18} />
        </Button>
        <Button>
          <IconPlayerPlay width={18} />
        </Button>
        <Button>
          <IconPlayerSkipForward width={18} />
        </Button>
      </ButtonGroup>
    </Stack>
    {/* item 3 */}
    <Stack spacing={1} direction={{ xs: 'column', sm: 'column', lg: 'row' }}>
      <ButtonGroup variant="text" aria-label="text button group">
        <Button>
          <IconAlignLeft width={18} />
        </Button>
        <Button>
          <IconAlignCenter width={18} />
        </Button>
        <Button>
          <IconAlignRight width={18} />
        </Button>
      </ButtonGroup>
      <ButtonGroup color="secondary" variant="text" aria-label="text button group">
        <Button>
          <IconAlignLeft width={18} />
        </Button>
        <Button>
          <IconAlignCenter width={18} />
        </Button>
        <Button>
          <IconAlignRight width={18} />
        </Button>
      </ButtonGroup>
      <ButtonGroup color="warning" variant="text" aria-label="text button group">
        <Button>
          <IconAlignLeft width={18} />
        </Button>
        <Button>
          <IconAlignCenter width={18} />
        </Button>
        <Button>
          <IconAlignRight width={18} />
        </Button>
      </ButtonGroup>
      <ButtonGroup color="error" variant="text" aria-label="text button group">
        <Button>
          <IconAlignLeft width={18} />
        </Button>
        <Button>
          <IconAlignCenter width={18} />
        </Button>
        <Button>
          <IconAlignRight width={18} />
        </Button>
      </ButtonGroup>
      <ButtonGroup color="success" variant="text" aria-label="text button group">
        <Button>
          <IconAlignLeft width={18} />
        </Button>
        <Button>
          <IconAlignCenter width={18} />
        </Button>
        <Button>
          <IconAlignRight width={18} />
        </Button>
      </ButtonGroup>
    </Stack>
  </Stack>
);

export default ColorButtonGroup;

===== src/components/forms/form-elements/button/ColorButtons.tsx =====

import { Button, Stack } from '@mui/material';

const ColorButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="contained" color="primary">
      Primary
    </Button>
    <Button variant="contained" color="secondary">
      Secondary
    </Button>
    <Button variant="contained" color="error">
      Error
    </Button>
    <Button variant="contained" color="warning">
      Warning
    </Button>
    <Button variant="contained" color="success">
      Success
    </Button>
  </Stack>
);

export default ColorButtons;

===== src/components/forms/form-elements/button/DefaultButtonGroup.tsx =====

import { Button, ButtonGroup, Stack } from '@mui/material';

const DefaultButtonGroup = () => (
  <Stack spacing={1} >
    <ButtonGroup variant="outlined" aria-label="outlined button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup variant="contained" aria-label="outlined primary button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>

    <ButtonGroup variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  </Stack>
);

export default DefaultButtonGroup;

===== src/components/forms/form-elements/button/DefaultButtons.tsx =====

import { Button, Stack } from '@mui/material';

const DefaultButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="contained" color="primary">
      Primary
    </Button>
    <Button variant="contained" color="secondary">
      Secondary
    </Button>
    <Button disabled>Disabled</Button>
    <Button href="#text-buttons" variant="contained" color="primary">
      Link
    </Button>
  </Stack>
);

export default DefaultButtons;

===== src/components/forms/form-elements/button/FabColorButtons.tsx =====

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconSend } from '@tabler/icons-react';

const FabColorButtons = () => (
  <>
    <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center" alignItems="center">
      <Tooltip title="Send">
        <Fab color="primary" aria-label="send">
          <IconSend width={20} />
        </Fab>
      </Tooltip>
      <Tooltip title="Send">
        <Fab color="secondary" aria-label="send">
          <IconSend width={20} />
        </Fab>
      </Tooltip>
      <Tooltip title="Send">
        <Fab color="warning" aria-label="send">
          <IconSend width={20} />
        </Fab>
      </Tooltip>
      <Tooltip title="Send">
        <Fab color="error" aria-label="send">
          <IconSend width={20} />
        </Fab>
      </Tooltip>
      <Tooltip title="Send">
        <Fab color="success" aria-label="send">
          <IconSend width={20} />
        </Fab>
      </Tooltip>
    </Stack>
  </>
);

export default FabColorButtons;

===== src/components/forms/form-elements/button/FabDefaultButton.tsx =====

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconClipboard, IconPlus, IconSend } from '@tabler/icons-react';

const FabDefaultButton = () => (
  <Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Send">
      <Fab color="primary" aria-label="send">
        <IconSend width={20} />
      </Fab>
    </Tooltip>
    <Tooltip title="Add">
      <Fab color="secondary" aria-label="plus">
        <IconPlus width={20} />
      </Fab>
    </Tooltip>
    <Fab disabled aria-label="clipboard">
      <IconClipboard width={20} />
    </Fab>
  </Stack>
);

export default FabDefaultButton;

===== src/components/forms/form-elements/button/FabSizeButtons.tsx =====

import { Fab, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

const FabSizeButtons = () => (
  <>
    <Stack spacing={1} direction="row" justifyContent="center">
      <Tooltip title="Bell">
        <Fab size="small" color="primary" aria-label="small-bell">
          <IconBell width={16} />
        </Fab>
      </Tooltip>
      <Tooltip title="Bell">
        <Fab size="medium" color="secondary" aria-label="medium-bell">
          <IconBell width={18} />
        </Fab>
      </Tooltip>
      <Tooltip title="Bell">
        <Fab size="large" color="warning" aria-label="large-bell">
          <IconBell width={20} />
        </Fab>
      </Tooltip>
    </Stack>
  </>
);

export default FabSizeButtons;

===== src/components/forms/form-elements/button/IconColorButtons.tsx =====

import { IconButton, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

const IconColorButtons = () => (
  <Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Bell">
      <IconButton color="primary" aria-label="primary-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="secondary" aria-label="secondary-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="error" aria-label="error-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="warning" aria-label="warning-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton color="success" aria-label="success-bell">
        <IconBell width={18} />
      </IconButton>
    </Tooltip>
  </Stack>
);

export default IconColorButtons;

===== src/components/forms/form-elements/button/IconLoadingButtons.tsx =====

import { Stack } from '@mui/material';
import { IconTrash } from '@tabler/icons-react';
import LoadingButton from '@mui/lab/LoadingButton';

const IconLoadingButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <LoadingButton loading loadingIndicator="Loading…"
      variant="contained"
      color="error"
      startIcon={<IconTrash width={18} />}
    >
      Left Icon
    </LoadingButton >
    <LoadingButton loading
      variant="contained"
      color="secondary"
      endIcon={<IconTrash width={18} />}
    >
      Right Icon
    </LoadingButton >
  </Stack>
);

export default IconLoadingButtons;

===== src/components/forms/form-elements/button/IconSizeButtons.tsx =====

import { IconButton, Tooltip, Stack } from '@mui/material';
import { IconBell } from '@tabler/icons-react';

const IconSizeButtons = () => (
  <Stack spacing={1} direction="row" justifyContent="center">
    <Tooltip title="Bell">
      <IconButton aria-label="small-bell">
        <IconBell width={16} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton size="medium" aria-label="medium-bell">
        <IconBell width={19} />
      </IconButton>
    </Tooltip>
    <Tooltip title="Bell">
      <IconButton aria-label="large-bell">
        <IconBell width={21} />
      </IconButton>
    </Tooltip>
  </Stack>
);

export default IconSizeButtons;

===== src/components/forms/form-elements/button/OutlinedColorButtons.tsx =====

import { Button, Stack } from '@mui/material';

const OutlinedColorButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button variant="outlined" color="primary">
      Primary
    </Button>
    <Button variant="outlined" color="secondary">
      Secondary
    </Button>
    <Button variant="outlined" color="error">
      Error
    </Button>
    <Button variant="outlined" color="warning">
      Warning
    </Button>
    <Button variant="outlined" color="success">
      Success
    </Button>
  </Stack>
);

export default OutlinedColorButtons;

===== src/components/forms/form-elements/button/OutlinedIconButtons.tsx =====
import { Button, Stack } from '@mui/material';
import { IconTrash, IconSend } from '@tabler/icons-react';

const OutlinedIconButtons = () => (
    <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
      <Button
        variant="outlined"
        color="error"
        startIcon={<IconTrash width={18} />}
      >
        Left Icon
      </Button>
      <Button
        variant="outlined"
        color="secondary"
        endIcon={<IconSend width={18} />}
      >
        Right Icon
      </Button>
    </Stack>
);

export default OutlinedIconButtons;

===== src/components/forms/form-elements/button/OutlinedSizeButton.tsx =====
import { Button, Stack } from '@mui/material';

const OutlinedSizeButton = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} alignItems="center" justifyContent="center">
    <Button variant="outlined" size="small">
      Small
    </Button>
    <Button variant="outlined" size="medium">
      Medium
    </Button>
    <Button variant="outlined" size="large">
      Large
    </Button>
  </Stack>
);

export default OutlinedSizeButton;

===== src/components/forms/form-elements/button/SizeButton.tsx =====
import { Button, Stack } from '@mui/material';

const SizeButton = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} alignItems="center" justifyContent="center">
    <Button variant="contained" size="small">
      Small
    </Button>
    <Button variant="contained" size="medium">
      Medium
    </Button>
    <Button variant="contained" size="large">
      Large
    </Button>
  </Stack>
);

export default SizeButton;

===== src/components/forms/form-elements/button/SizeButtonGroup.tsx =====

import { Button, ButtonGroup, Stack } from '@mui/material';

const SizeButtonGroup = () => (
  <Stack spacing={1} justifyContent="center">
    <ButtonGroup size="small" variant="outlined" aria-label="outlined primary button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup variant="outlined" aria-label="outlined button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup size="large" variant="outlined" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  </Stack>
);

export default SizeButtonGroup;

===== src/components/forms/form-elements/button/TextButtonGroup.tsx =====

import { Button, ButtonGroup, Stack } from '@mui/material';

const TextButtonGroup = () => (
  <Stack spacing={1} direction="column" justifyContent="center">
    <ButtonGroup variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup color="secondary" variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
    <ButtonGroup color="error" variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  </Stack>
);

export default TextButtonGroup;

===== src/components/forms/form-elements/button/TextColorButtons.tsx =====

import { Button, Stack } from '@mui/material';

const TextColorButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button color="primary">Primary</Button>
    <Button color="secondary">Secondary</Button>
    <Button color="error">Error</Button>
    <Button color="warning">Warning</Button>
    <Button color="success">Success</Button>
  </Stack>
);

export default TextColorButtons;

===== src/components/forms/form-elements/button/TextDefaultButtons.tsx =====

import { Button, Stack } from '@mui/material';

const TextDefaultButtons = () => (
  <Stack spacing={1} direction={{ xs: 'column', sm: 'row' }} justifyContent="center">
    <Button color="primary">Primary</Button>
    <Button color="secondary">Secondary</Button>
    <Button disabled>Disabled</Button>
    <Button href="#text-buttons" color="primary">
      Link
    </Button>
  </Stack>
);

export default TextDefaultButtons;

===== src/components/forms/form-elements/button/TextIconButtons.tsx =====

import { Button, Stack } from '@mui/material';
import { IconTrash, IconSend } from '@tabler/icons-react';

const TextIconButtons = () => (
  <Stack spacing={1} direction="row" justifyContent="center">
    <Button color="error" startIcon={<IconTrash width={18} />}>
      Left Icon
    </Button>
    <Button color="secondary" endIcon={<IconSend width={18} />}>
      Right Icon
    </Button>
  </Stack>
);

export default TextIconButtons;

===== src/components/forms/form-elements/button/TextSizeButton.tsx =====

import { Button, Stack } from '@mui/material';

const TextSizeButton = () => (
  <Stack spacing={1} direction="row" alignItems="center" justifyContent="center">
    <Button size="small">Small</Button>
    <Button size="medium">Medium</Button>
    <Button size="large">Large</Button>
  </Stack>
);

export default TextSizeButton;

===== src/components/forms/form-elements/button/VerticalButtonGroup.tsx =====

import { Button, ButtonGroup, Stack } from '@mui/material';

const VerticalButtonGroup = () => (
  <Stack spacing={1} direction="row">
    <ButtonGroup
      orientation="vertical"
      variant="contained"
      aria-label="outlined primary button group"
    >
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>

    <ButtonGroup orientation="vertical" variant="outlined" aria-label="outlined button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>

    <ButtonGroup orientation="vertical" variant="text" aria-label="text button group">
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  </Stack>
);

export default VerticalButtonGroup;

===== src/components/forms/form-elements/checkbox/code/ColorsCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColorsCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, FormControlLabel } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';
import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}


<Box textAlign="center">
    <FormControlLabel control={<CustomCheckbox defaultChecked />} label="Primary" />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="secondary"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Secondary"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="success"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Success"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="warning"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Warning"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="error"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Error"
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default ColorsCheckboxCode;

===== src/components/forms/form-elements/checkbox/code/CustomEleCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CustomEleCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Box } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';
import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const [checked, setChecked] = React.useState(true);

const handleChange = (event: any) => {
    setChecked(event.target.checked);
};

<Box textAlign="center">
    <CustomCheckbox
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />

    <CustomCheckbox disabled checked inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
    <CustomCheckbox
        defaultChecked
        indeterminate
        color="secondary"
        inputProps={{ 'aria-label': 'indeterminate checkbox' }}
    />
    <CustomCheckbox
        defaultChecked
        color="default"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default CustomEleCheckboxCode;

===== src/components/forms/form-elements/checkbox/code/DefaultCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DefaultCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Box } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';
import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const [checked, setChecked] = React.useState(true);

const handleChange = (event: any) => {
    setChecked(event.target.checked);
};

<Box textAlign="center">
    <CustomCheckbox
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />
    <CustomCheckbox
        disabled
        checked
        inputProps={{ 'aria-label': 'disabled checked checkbox' }}
    />
    <CustomCheckbox
        defaultChecked
        indeterminate
        inputProps={{ 'aria-label': 'indeterminate checkbox' }}
    />
    <CustomCheckbox
        defaultChecked
        color="default"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default DefaultCheckboxCode;

===== src/components/forms/form-elements/checkbox/code/DefaultcolorsCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DefaultcolorsCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Checkbox } from '@mui/material';

<Box textAlign="center">
    <Checkbox
        defaultChecked
        color="primary"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
    />
    <Checkbox
        defaultChecked
        color="secondary"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
    />
    <Checkbox
        defaultChecked
        sx={{
            color: (theme) => theme.palette.success.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.success.main,
            },
        }}
    />
    <Checkbox
        defaultChecked
        sx={{
            color: (theme) => theme.palette.error.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.error.main,
            },
        }}
    />
    <Checkbox
        defaultChecked
        sx={{
            color: (theme) => theme.palette.warning.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.warning.main,
            },
        }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default DefaultcolorsCheckboxCode;

===== src/components/forms/form-elements/checkbox/code/PositionCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const PositionCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { FormGroup, FormControlLabel, FormControl } from '@mui/material';
import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto $theme.palette.grey[200]}'
        : '0px auto  $theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

<FormControl
    component="fieldset"
    sx={{
      display: 'flex',
      justifyContent: 'center',
    }}
>
    <FormGroup
        aria-label="position"
        row
        sx={{
            justifyContent: 'center',
        }}
    >
        <FormControlLabel
            value="top"
            control={<CustomCheckbox color="primary" />}
            label="Top"
            labelPlacement="top"
        />
        <FormControlLabel
            value="start"
            control={<CustomCheckbox color="primary" />}
            label="Start"
            labelPlacement="start"
        />
        <FormControlLabel
            value="bottom"
            control={<CustomCheckbox color="primary" />}
            label="Bottom"
            labelPlacement="bottom"
        />
        <FormControlLabel
            value="end"
            control={<CustomCheckbox color="primary" />}
            label="End"
            labelPlacement="end"
        />
    </FormGroup>
</FormControl>
`}
      </CodeDialog>
    </>
  );
};

export default PositionCheckboxCode;

===== src/components/forms/form-elements/checkbox/code/SizesCheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizesCheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { FormGroup, FormControlLabel, Checkbox } from '@mui/material';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import Favorite from '@mui/icons-material/Favorite';
import FavoriteBorder from '@mui/icons-material/FavoriteBorder';

<FormGroup
    row
    sx={{
        display: 'flex',
        justifyContent: 'center',
    }}
>
    <FormControlLabel
        control={
            <Checkbox color="primary"
                icon={<CheckBoxOutlineBlankIcon />}
                checkedIcon={<CheckBoxIcon />}
                name="checkednormal"
            />
        }
        label="Normal Size"
    />
    <FormControlLabel
        control={
            <Checkbox color="secondary"
                icon={<CheckBoxOutlineBlankIcon fontSize="small" />}
                checkedIcon={<CheckBoxIcon fontSize="small" />}
                name="checkedsmall"
            />
        }
        label="Small size"
    />
    <FormControlLabel
        control={
            <Checkbox color="error"
                icon={<FavoriteBorder />}
                checkedIcon={<Favorite />}
                name="checkedH"
            />
        }
        label="Heart"
    />
</FormGroup>`}
      </CodeDialog>
    </>
  );
};

export default SizesCheckboxCode;

===== src/components/forms/form-elements/checkbox/Colors.tsx =====
'use client'

import { Box, FormControlLabel } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';

const ColorsCheckbox = () => (
  <Box textAlign="center">
    <FormControlLabel control={<CustomCheckbox defaultChecked />} label="Primary" />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="secondary"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Secondary"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="success"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Success"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="warning"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Warning"
    />
    <FormControlLabel
      control={
        <CustomCheckbox
          defaultChecked
          color="error"
          inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
      }
      label="Error"
    />
  </Box>
);

export default ColorsCheckbox;

===== src/components/forms/form-elements/checkbox/Custom.tsx =====
'use client'

import React from 'react';
import { Box } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';

const CustomEleCheckbox = () => {
  const [checked, setChecked] = React.useState(true);

  const handleChange = (event: any) => {
    setChecked(event.target.checked);
  };

  return (
    <Box textAlign="center">
      <CustomCheckbox
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
      />

      <CustomCheckbox disabled checked inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
      <CustomCheckbox
        defaultChecked
        indeterminate
        color="secondary"
        inputProps={{ 'aria-label': 'indeterminate checkbox' }}
      />
      <CustomCheckbox
        defaultChecked
        color="default"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
      />
    </Box>
  );
};

export default CustomEleCheckbox;

===== src/components/forms/form-elements/checkbox/Default.tsx =====
'use client';

import React from 'react';
import { Box } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';
const DefaultCheckbox = () => {
  const [checked, setChecked] = React.useState(true);

  const handleChange = (event: any) => {
    setChecked(event.target.checked);
  };

  return (
    <Box textAlign="center">
      <CustomCheckbox
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
      />

      <CustomCheckbox disabled checked inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
      <CustomCheckbox
        defaultChecked
        indeterminate
        inputProps={{ 'aria-label': 'indeterminate checkbox' }}
      />
      <CustomCheckbox
        defaultChecked
        color="default"
        inputProps={{ 'aria-label': 'checkbox with default color' }}
      />
    </Box>
  );
};

export default DefaultCheckbox;

===== src/components/forms/form-elements/checkbox/DefaultColors.tsx =====
'use client'

import { Box, Checkbox } from '@mui/material';

const DefaultcolorsCheckbox = () => (
    <Box textAlign="center">
        <Checkbox
            defaultChecked
            color="primary"
            inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
        <Checkbox
            defaultChecked
            color="secondary"
            inputProps={{ 'aria-label': 'checkbox with default color' }}
        />
        <Checkbox
            defaultChecked
            sx={{
                color: (theme) => theme.palette.success.main,
                '&.Mui-checked': {
                    color: (theme) => theme.palette.success.main,
                },
            }}
        />
        <Checkbox
            defaultChecked
            sx={{
                color: (theme) => theme.palette.error.main,
                '&.Mui-checked': {
                    color: (theme) => theme.palette.error.main,
                },
            }}
        />
        <Checkbox
            defaultChecked
            sx={{
                color: (theme) => theme.palette.warning.main,
                '&.Mui-checked': {
                    color: (theme) => theme.palette.warning.main,
                },
            }}
        />
    </Box>
);

export default DefaultcolorsCheckbox;

===== src/components/forms/form-elements/checkbox/Position.tsx =====
'use client'

import { FormGroup, FormControlLabel, FormControl } from '@mui/material';
import CustomCheckbox from '../../theme-elements/CustomCheckbox';

const PositionCheckbox = () => (
  <FormControl
    component="fieldset"
    sx={{
      display: 'flex',
      justifyContent: 'center',
    }}
  >
    <FormGroup
      aria-label="position"
      row
      sx={{
        justifyContent: 'center',
      }}
    >
      <FormControlLabel
        value="top"
        control={<CustomCheckbox color="primary" />}
        label="Top"
        labelPlacement="top"
      />
      <FormControlLabel
        value="start"
        control={<CustomCheckbox color="primary" />}
        label="Start"
        labelPlacement="start"
      />
      <FormControlLabel
        value="bottom"
        control={<CustomCheckbox color="primary" />}
        label="Bottom"
        labelPlacement="bottom"
      />
      <FormControlLabel
        value="end"
        control={<CustomCheckbox color="primary" />}
        label="End"
        labelPlacement="end"
      />
    </FormGroup>
  </FormControl>
);

export default PositionCheckbox;

===== src/components/forms/form-elements/checkbox/Sizes.tsx =====
'use client'

import { FormGroup, FormControlLabel, Checkbox } from '@mui/material';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import Favorite from '@mui/icons-material/Favorite';
import FavoriteBorder from '@mui/icons-material/FavoriteBorder';

const SizesCheckbox = () => (
    <FormGroup
        row
        sx={{
            display: 'flex',
            justifyContent: 'center',
        }}
    >
        <FormControlLabel
            control={
                <Checkbox color="primary"
                    icon={<CheckBoxOutlineBlankIcon />}
                    checkedIcon={<CheckBoxIcon />}
                    name="checkednormal"
                />
            }
            label="Normal Size"
        />
        <FormControlLabel
            control={
                <Checkbox color="secondary"
                    icon={<CheckBoxOutlineBlankIcon fontSize="small" />}
                    checkedIcon={<CheckBoxIcon fontSize="small" />}
                    name="checkedsmall"
                />
            }
            label="Small size"
        />
        <FormControlLabel
            control={
                <Checkbox color="error"
                    icon={<FavoriteBorder />}
                    checkedIcon={<Favorite />}
                    name="checkedH"
                />
            }
            label="Heart"
        />
    </FormGroup>
);

export default SizesCheckbox;

===== src/components/forms/form-elements/date-time/BasicDateTime.tsx =====
'use client'

import React from 'react'
import dayjs, { Dayjs } from 'dayjs'

import ChildCard from 'src/components/shared/ChildCard'

import { LocalizationProvider } from '@mui/x-date-pickers'

import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'

// codeModel
import BasicDateTimeCode from './code/BasicDateTimeCode'

const BasicDateTime = () => {
  // date time
  const [value3, setValue3] = React.useState<Dayjs | null>(
    dayjs('2018-01-01T00:00:00.000Z')
  )

  return (
    <ChildCard title='Basic' codeModel={<BasicDateTimeCode />}>
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <MobileDateTimePicker
          onChange={(newValue) => {
            setValue3(newValue)
          }}
          slotProps={{
            textField: {
              fullWidth: true,
              variant: 'outlined',
              size: 'small',
              inputProps: { 'aria-label': 'basic date picker' },
            },
          }}
          value={value3}
        />
      </LocalizationProvider>
    </ChildCard>
  )
}

export default BasicDateTime

===== src/components/forms/form-elements/date-time/code/BasicDateTimeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicDateTimeCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import dayjs, { Dayjs } from 'dayjs';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const [value3, setValue3] = React.useState<Dayjs | null>(
    dayjs("2018-01-01T00:00:00.000Z")
  );

<LocalizationProvider dateAdapter={AdapterDayjs}>
  <MobileDateTimePicker
    onChange={(newValue) => {
      setValue3(newValue)
    }}
    slotProps={{
      textField: {
        fullWidth: true,
        variant: 'outlined',
        size: 'small',
        inputProps: { 'aria-label': 'basic date picker' },
      },
    }}
    value={value3}
  />
</LocalizationProvider>
`}
      </CodeDialog>
    </>
  );
};

export default BasicDateTimeCode;

===== src/components/forms/form-elements/date-time/code/DifferentDesignCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DifferentDesignCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import dayjs, { Dayjs } from 'dayjs';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const [value, setValue] = React.useState<Dayjs | null>(null);

<LocalizationProvider dateAdapter={AdapterDayjs}>
  <DateTimePicker
    slotProps={{
      textField: {
        fullWidth: true,
        size: 'small',
        sx: {
          "& .MuiSvgIcon-root": {
            width: "18px",
            height: "18px",
          },
          "& .MuiFormHelperText-root": {
            display: "none",
          },
        },
      },
    }}
    value={value}
    onChange={(newValue) => {
      setValue(newValue);
    }}
  />
</LocalizationProvider>
`}
      </CodeDialog>
    </>
  );
};

export default DifferentDesignCode;

===== src/components/forms/form-elements/date-time/code/TimepickerCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TimepickerCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import dayjs, { Dayjs } from 'dayjs';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers'
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const [value2, setValue2] = React.useState<Dayjs | null>(null);

<LocalizationProvider dateAdapter={AdapterDayjs}>
  <TimePicker
    value={value2}
    onChange={(newValue) => {
      setValue2(newValue)
    }}
    viewRenderers={{
      hours: renderTimeViewClock,
      minutes: renderTimeViewClock,
      seconds: renderTimeViewClock,
    }}
    slotProps={{
      textField: {
        size: 'small',
        fullWidth: true,
        sx: {
          '& .MuiSvgIcon-root': {
            width: '18px',
            height: '18px',
          },
          '& .MuiFormHelperText-root': {
            display: 'none',
          },
        },
      },
    }}
  />
</LocalizationProvider>
`}
      </CodeDialog>
    </>
  );
};

export default TimepickerCode;

===== src/components/forms/form-elements/date-time/DifferentDateTime.tsx =====
'use client'
import React from 'react'

import ChildCard from 'src/components/shared/ChildCard'
import dayjs, { Dayjs } from 'dayjs'
import { LocalizationProvider } from '@mui/x-date-pickers'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'

import DifferentDesignCode from './code/DifferentDesignCode'

const DifferentDateTime = () => {
  const [value, setValue] = React.useState<Dayjs | null>(dayjs())

  return (
    <ChildCard title='Different Design' codeModel={<DifferentDesignCode />}>
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <DateTimePicker
          slotProps={{
            textField: {
              fullWidth: true,
              size: 'small',
              sx: {
                '& .MuiSvgIcon-root': {
                  width: '18px',
                  height: '18px',
                },
                '& .MuiFormHelperText-root': {
                  display: 'none',
                },
              },
            },
          }}
          value={value}
          onChange={(newValue) => {
            setValue(newValue)
          }}
        />
      </LocalizationProvider>
    </ChildCard>
  )
}

export default DifferentDateTime

===== src/components/forms/form-elements/date-time/MuiDateTimePicker.tsx =====
'use client'

import React from 'react'
import dayjs, { Dayjs } from 'dayjs'
import ChildCard from 'src/components/shared/ChildCard'
import { LocalizationProvider } from '@mui/x-date-pickers'
import { TimePicker } from '@mui/x-date-pickers/TimePicker'
import TimepickerCode from './code/TimepickerCode'
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'

const MuiDateTimePicker = () => {
  const [value2, setValue2] = React.useState<Dayjs | null>(dayjs())

  return (
    <ChildCard title='Timepicker' codeModel={<TimepickerCode />}>
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <TimePicker
          value={value2}
          onChange={(newValue) => {
            setValue2(newValue)
          }}
          viewRenderers={{
            hours: renderTimeViewClock,
            minutes: renderTimeViewClock,
            seconds: renderTimeViewClock,
          }}
          slotProps={{
            textField: {
              size: 'small',
              fullWidth: true,
              sx: {
                '& .MuiSvgIcon-root': {
                  width: '18px',
                  height: '18px',
                },
                '& .MuiFormHelperText-root': {
                  display: 'none',
                },
              },
            },
          }}
        />
      </LocalizationProvider>
    </ChildCard>
  )
}

export default MuiDateTimePicker

===== src/components/forms/form-elements/radio/code/ColorLabelRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColorLabelRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, FormControlLabel } from '@mui/material';
import { styled } from '@mui/material/styles';
import Radio, { RadioProps } from '@mui/material/Radio';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}


<Box textAlign="center">
    <FormControlLabel
        value="end"
        control={<CustomRadio color="primary" checked />}
        label="Primary"
        labelPlacement="end"
    />
    <FormControlLabel
        value="end"
        control={<CustomRadio color="secondary" checked />}
        label="Secondary"
        labelPlacement="end"
    />
    <FormControlLabel
        value="end"
        control={<CustomRadio color="success" checked />}
        label="Success"
        labelPlacement="end"
    />
    <FormControlLabel
        value="end"
        control={<CustomRadio color="error" checked />}
        label="Danger"
        labelPlacement="end"
    />
    <FormControlLabel
        value="end"
        control={<CustomRadio color="warning" checked />}
        label="Warning"
        labelPlacement="end"
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default ColorLabelRadioCode;

===== src/components/forms/form-elements/radio/code/ColorsRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ColorsRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import React from 'react';
import { Box, Radio } from '@mui/material';

const [checked, setChecked] = React.useState(true);

const handleChange = (event: any) => {
    setChecked(event.target.checked);
};

<Box textAlign="center">
    <Radio
        checked={checked}
        onChange={handleChange}
        color="primary"
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />
    <Radio
        checked={checked}
        onChange={handleChange}
        color="secondary"
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />
    <Radio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
        sx={{
            color: (theme) => theme.palette.success.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.success.main,
            },
        }}
    />
    <Radio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
        sx={{
            color: (theme) => theme.palette.error.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.error.main,
            },
        }}
    />
    <Radio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
        sx={{
            color: (theme) => theme.palette.warning.main,
            '&.Mui-checked': {
                color: (theme) => theme.palette.warning.main,
            },
        }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default ColorsRadioCode;

===== src/components/forms/form-elements/radio/code/CustomExRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CustomExRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Box } from '@mui/material';
import { styled } from '@mui/material/styles';
import Radio, { RadioProps } from '@mui/material/Radio';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const [checked, setChecked] = React.useState(true);

const handleChange = (event: any) => {
    setChecked(event.target.checked);
};

<Box textAlign="center">
    <CustomRadio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />
    <CustomRadio disabled inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
    <CustomRadio
        checked={!checked}
        inputProps={{ 'aria-label': 'checkbox with default color' }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default CustomExRadioCode;

===== src/components/forms/form-elements/radio/code/DefaultRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DefaultRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Box, Radio } from '@mui/material';

const [checked, setChecked] = React.useState(true);

const handleChange = (event: any) => {
    setChecked(event.target.checked);
};

<Box textAlign="center">
    <Radio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
    />
    <Radio disabled inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
    <Radio color="default" inputProps={{ 'aria-label': 'checkbox with default color' }} />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default DefaultRadioCode;

===== src/components/forms/form-elements/radio/code/PositionRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const PositionRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, RadioGroup, FormControlLabel  } from '@mui/material';
import { styled } from '@mui/material/styles';
import Radio, { RadioProps } from '@mui/material/Radio';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

<Box textAlign="center">
    <RadioGroup row aria-label="position" name="position" defaultValue="top">
        <FormControlLabel value="top" control={<CustomRadio />} label="Top" labelPlacement="top" />
        <FormControlLabel
            value="start"
            control={<CustomRadio />}
            label="Start"
            labelPlacement="start"
        />
        <FormControlLabel
            value="bottom"
            control={<CustomRadio />}
            label="Bottom"
            labelPlacement="bottom"
        />
        <FormControlLabel value="end" control={<CustomRadio />} label="End" />
    </RadioGroup>
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default PositionRadioCode;

===== src/components/forms/form-elements/radio/code/SizesRadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizesRadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Box, Radio } from '@mui/material';

const [selectedValue, setSelectedValue] = React.useState('a');
const handleChange2 = (event: any) => {
    setSelectedValue(event.target.value);
};
    
const controlProps = (item: any) => ({
    checked: selectedValue === item,
    onChange: handleChange2,
    value: item,
    name: 'size-radio-button-demo',
    inputProps: { 'aria-label': item },
});

<Box textAlign="center">
    <Radio {...controlProps('a')} size="small" />
    <Radio {...controlProps('b')} />
    <Radio
        {...controlProps('c')}
        sx={{
            '& .MuiSvgIcon-root': {
                fontSize: 28,
            },
        }}
    />
</Box>`}
      </CodeDialog>
    </>
  );
};

export default SizesRadioCode;

===== src/components/forms/form-elements/radio/ColorLabel.tsx =====
'use client'

import { Box, FormControlLabel } from '@mui/material';
import CustomRadio from '../../theme-elements/CustomRadio';

const ColorLabelRadio = () => {
  return (
    <Box textAlign="center">
      <FormControlLabel
        value="end"
        control={<CustomRadio color="primary" checked />}
        label="Primary"
        labelPlacement="end"
      />
      <FormControlLabel
        value="end"
        control={<CustomRadio color="secondary" checked />}
        label="Secondary"
        labelPlacement="end"
      />
      <FormControlLabel
        value="end"
        control={<CustomRadio color="success" checked />}
        label="Success"
        labelPlacement="end"
      />

      <FormControlLabel
        value="end"
        control={<CustomRadio color="error" checked />}
        label="Danger"
        labelPlacement="end"
      />

      <FormControlLabel
        value="end"
        control={<CustomRadio color="warning" checked />}
        label="Warning"
        labelPlacement="end"
      />
    </Box>
  );
};

export default ColorLabelRadio;

===== src/components/forms/form-elements/radio/Colors.tsx =====
'use client'

import { Box, Radio } from '@mui/material';
import React from 'react';

const ColorsRadio = () => {
    // 2
    const [checked, setChecked] = React.useState(true);
    const handleChange = (event: any) => {
        setChecked(event.target.checked);
    };


    return (
        <Box textAlign="center">
            <Radio
                checked={checked}
                onChange={handleChange}
                color="primary"
                inputProps={{ 'aria-label': 'primary checkbox' }}
            />

            <Radio
                checked={checked}
                onChange={handleChange}
                color="secondary"
                inputProps={{ 'aria-label': 'primary checkbox' }}
            />

            <Radio
                checked={checked}
                onChange={handleChange}
                inputProps={{ 'aria-label': 'primary checkbox' }}
                sx={{
                    color: (theme) => theme.palette.success.main,
                    '&.Mui-checked': {
                        color: (theme) => theme.palette.success.main,
                    },
                }}
            />

            <Radio
                checked={checked}
                onChange={handleChange}
                inputProps={{ 'aria-label': 'primary checkbox' }}
                sx={{
                    color: (theme) => theme.palette.error.main,
                    '&.Mui-checked': {
                        color: (theme) => theme.palette.error.main,
                    },
                }}
            />

            <Radio
                checked={checked}
                onChange={handleChange}
                inputProps={{ 'aria-label': 'primary checkbox' }}
                sx={{
                    color: (theme) => theme.palette.warning.main,
                    '&.Mui-checked': {
                        color: (theme) => theme.palette.warning.main,
                    },
                }}
            />

        </Box>
    );
};

export default ColorsRadio;

===== src/components/forms/form-elements/radio/Custom.tsx =====
'use client'

import { Box } from '@mui/material';

import CustomRadio from '../../theme-elements/CustomRadio';
import React from 'react';

const CustomExRadio = () => {
  // 2
  const [checked, setChecked] = React.useState(true);

  const handleChange = (event: any) => {
    setChecked(event.target.checked);
  };

  return (
    <Box textAlign="center">
      <CustomRadio
        checked={checked}
        onChange={handleChange}
        inputProps={{ 'aria-label': 'primary checkbox' }}
      />

      <CustomRadio disabled inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
      <CustomRadio
        checked={!checked}
        inputProps={{ 'aria-label': 'checkbox with default color' }}
      />
    </Box>
  );
};

export default CustomExRadio;

===== src/components/forms/form-elements/radio/Default.tsx =====
'use client'

import { Box, Radio } from '@mui/material';
import React from 'react';
const DefaultRadio = () => {
    // 2
    const [checked, setChecked] = React.useState(true);

    const handleChange = (event: any) => {
        setChecked(event.target.checked);
    };

    return (
        <Box textAlign="center">
            <Radio
                checked={checked}
                onChange={handleChange}
                inputProps={{ 'aria-label': 'primary checkbox' }}
            />

            <Radio disabled inputProps={{ 'aria-label': 'disabled checked checkbox' }} />
            <Radio color="default" inputProps={{ 'aria-label': 'checkbox with default color' }} />
        </Box>
    );
};

export default DefaultRadio;

===== src/components/forms/form-elements/radio/Position.tsx =====
'use client'

import { Box, RadioGroup, FormControlLabel } from '@mui/material';

import CustomRadio from "../../theme-elements/CustomRadio"

const PositionRadio = () => {
  return (
    <Box textAlign="center">
      <RadioGroup row aria-label="position" name="position" defaultValue="top">
        <FormControlLabel value="top" control={<CustomRadio />} label="Top" labelPlacement="top" />
        <FormControlLabel
          value="start"
          control={<CustomRadio />}
          label="Start"
          labelPlacement="start"
        />
        <FormControlLabel
          value="bottom"
          control={<CustomRadio />}
          label="Bottom"
          labelPlacement="bottom"
        />
        <FormControlLabel value="end" control={<CustomRadio />} label="End" />
      </RadioGroup>

    </Box>
  );
};

export default PositionRadio;

===== src/components/forms/form-elements/radio/Sizes.tsx =====
'use client'

import { Box, Radio } from '@mui/material';
import React from 'react';

const SizesRadio = () => {
    const [selectedValue, setSelectedValue] = React.useState('a');
    const handleChange2 = (event: any) => {
        setSelectedValue(event.target.value);
    };

    const controlProps = (item: any) => ({
        checked: selectedValue === item,
        onChange: handleChange2,
        value: item,
        name: 'size-radio-button-demo',
        inputProps: { 'aria-label': item },
    });


    return (
        <Box textAlign="center">
            <Radio {...controlProps('a')} size="small" />
            <Radio {...controlProps('b')} />
            <Radio
                {...controlProps('c')}
                sx={{
                    '& .MuiSvgIcon-root': {
                        fontSize: 28,
                    },
                }}
            />
        </Box>
    );
};

export default SizesRadio;

===== src/components/forms/form-elements/slider/code/CustomSliderCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";

const CustomSliderCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import * as React from 'react';
import { styled } from '@mui/material/styles';
import { Slider } from '@mui/material';

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

<CustomSlider defaultValue={[30]}  />
`}
      </CodeDialog>
    </>
  );
};

export default CustomSliderCode;
===== src/components/forms/form-elements/slider/code/DefaultsliderCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";


const DefaultsliderCode = () => {
    return (
        <>
            <CodeDialog>
                {`
"use client";
import * as React from 'react';
import { Slider } from '@mui/material';

<Slider defaultValue={30}  />
`}
            </CodeDialog>
        </>
    );
};

export default DefaultsliderCode;
===== src/components/forms/form-elements/slider/code/DisabledSliderCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const DisabledSliderCode = () => {
    return (
        <>
            <CodeDialog>
                {`
"use client";
import * as React from 'react';
import { Slider } from '@mui/material';

<Slider disabled defaultValue={30}  />
`}
            </CodeDialog>
        </>
    );
};

export default DisabledSliderCode;
===== src/components/forms/form-elements/slider/code/DiscreteSliderCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DiscreteSliderCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Slider } from '@mui/material';

const valuetext = (value: any) => {value}°C;

<Slider
    aria-label="Temperature"
    defaultValue={30}
    getAriaValueText={valuetext}
    valueLabelDisplay="auto"
    step={10}
    marks
    min={10}
    max={110}
/>
`}
      </CodeDialog>
    </>
  );
};

export default DiscreteSliderCode;

===== src/components/forms/form-elements/slider/code/RangesliderCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const RangesliderCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import Box from '@mui/material/Box';
import { styled } from '@mui/material/styles';
import { SliderValueLabelProps } from '@mui/material/Slider';
import {SliderThumb} from '@mui/material/Slider';

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

function AirbnbThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}

<CustomRangeSlider
    slots={{ thumb: AirbnbThumbComponent }}
    getAriaLabel={(index: any) => (index === 0 ? 'Minimum price' : 'Maximum price')}
    defaultValue={[20, 40]}
/>
`}
      </CodeDialog>
    </>
  );
};

export default RangesliderCode;

===== src/components/forms/form-elements/slider/code/TemperatureRangeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DiscreteSliderCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from 'react';
import { Slider } from '@mui/material';

  function valuetext2(value: any) {
  return {value}°C;
}

  const [value2, setValue2] = React.useState([20, 37]);
  const handleChange2 = (event2: any, newValue2: any) => {
    setValue2(newValue2);
  };

<Slider
    getAriaLabel={() => 'Temperature range'}
    value={value2}
    onChange={handleChange2}
    valueLabelDisplay="auto"
    getAriaValueText={valuetext2}
/>
`}
      </CodeDialog>
    </>
  );
};

export default DiscreteSliderCode;

===== src/components/forms/form-elements/slider/code/VolumesliderCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const VolumesliderCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from "react";
import { Slider } from '@mui/material';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';
import { Stack } from "@mui/system";
import { styled } from '@mui/material/styles';


const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

const [value, setValue] = React.useState(30);
  const handleChange = (event: any, newValue: any) => {
    setValue(newValue);

 <Stack direction="row" spacing={1}>
    <IconVolume2 width={20} />
    <Slider aria-label="Volume" value={value} onChange={handleChange} />
    <IconVolume width={20} />
  </Stack>
`}
      </CodeDialog>
    </>
  );
};

export default VolumesliderCode;

===== src/components/forms/form-elements/slider/DiscreteSlider.tsx =====
"use client";

import { Slider } from "@mui/material";
import ChildCard from 'src/components/shared/ChildCard'
import DiscreteSliderCode from "src/components/forms/form-elements/slider/code/DiscreteSliderCode";

const valuetext = (value: any) => `${value}°C`;

const DiscreteSlider = () => {
  return (
    <ChildCard title="Discrete" codeModel={<DiscreteSliderCode />}>
      <Slider
        aria-label="Temperature"
        defaultValue={30}
        getAriaValueText={valuetext}
        valueLabelDisplay="auto"
        step={10}
        marks
        min={10}
        max={110}
      />
    </ChildCard>
  );
};

export default DiscreteSlider;

===== src/components/forms/form-elements/slider/RangeDefault.tsx =====
'use client'


import Box from '@mui/material/Box'
import { SliderValueLabelProps } from '@mui/material/Slider'
import { SliderThumb } from '@mui/material/Slider'
import ChildCard from 'src/components/shared/ChildCard'
import CustomRangeSlider from 'src/components/forms/theme-elements/CustomRangeSlider'
import RangesliderCode from './code/RangesliderCode'

function AirbnbThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  )
}

const RangeDefault = () => {
  return (
    <ChildCard title='Range' codeModel={<RangesliderCode />}>
      <CustomRangeSlider
        slots={{ thumb: AirbnbThumbComponent }}
        getAriaLabel={(index: any) =>
          index === 0 ? 'Minimum price' : 'Maximum price'
        }
        defaultValue={[20, 40]}
      />
    </ChildCard>
  )
}

export default RangeDefault

===== src/components/forms/form-elements/slider/RangeSlider.tsx =====
'use client'

import React from 'react'
import { Slider } from '@mui/material'
import ChildCard from 'src/components/shared/ChildCard'


import TemperatureRangeCode from 'src/components/forms/form-elements/slider/code/TemperatureRangeCode'

function valuetext2(value: any) {
  return `${value}°C`
}

const RangeSlider = () => {
  const [value2, setValue2] = React.useState([20, 37])
  const handleChange2 = (_event2: any, newValue2: any) => {
    setValue2(newValue2)
  }

  return (
    <ChildCard title='Range Default' codeModel={<TemperatureRangeCode />}>
      <Slider
        getAriaLabel={() => 'Temperature range'}
        value={value2}
        onChange={handleChange2}
        valueLabelDisplay='auto'
        getAriaValueText={valuetext2}
      />
    </ChildCard>
  )
}

export default RangeSlider

===== src/components/forms/form-elements/slider/VolumeSlider.tsx =====
"use client";

import React from "react";
import { Slider } from "@mui/material";
import ChildCard from 'src/components/shared/ChildCard'
import { IconVolume, IconVolume2 } from "@tabler/icons-react";
import { Stack } from "@mui/system";

import VolumesliderCode from "src/components/forms/form-elements/slider/code/VolumesliderCode";

const VolumeSlider = () => {
  const [value, setValue] = React.useState(30);
  const handleChange = (_event: any, newValue: any) => {
    setValue(newValue);
  };

  return (
    <ChildCard title="Volume" codeModel={<VolumesliderCode />}>
      <Stack direction="row" spacing={1}>
        <IconVolume2 width={20} />
        <Slider aria-label="Volume" value={value} onChange={handleChange} />
        <IconVolume width={20} />
      </Stack>
    </ChildCard>
  );
};

export default VolumeSlider;

===== src/components/forms/form-elements/switch/code/ColorsSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const ColorsSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Switch } from '@mui/material';

<Box textAlign="center">
    <Switch defaultChecked />
    <Switch defaultChecked color="secondary" />
    <Switch defaultChecked color="error" />
    <Switch defaultChecked color="warning" />
    <Switch defaultChecked color="success" />
    <Switch defaultChecked color="default" />
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default ColorsSwitchCode;

===== src/components/forms/form-elements/switch/code/CustomSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const CustomSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { styled } from '@mui/material/styles';
import { Switch } from '@mui/material';
import { Box } from '@mui/material';

const CustomSwitch = styled((props: any) => <Switch {...props} />)(({ theme }) => ({
  '&.MuiSwitch-root': {
    width: '68px',
    height: '49px',
  },
  '&  .MuiButtonBase-root': {
    top: '6px',
    left: '6px',
  },
  '&  .MuiButtonBase-root.Mui-checked .MuiSwitch-thumb': {
    backgroundColor: 'primary.main',
  },
  '& .MuiSwitch-thumb': {
    width: '18px',
    height: '18px',
    borderRadius: '6px',
  },

  '& .MuiSwitch-track': {
    backgroundColor: theme.palette.grey[200],
    opacity: 1,
    borderRadius: '5px',
  },
  '& .MuiSwitch-switchBase': {
    '&.Mui-checked': {
      '& + .MuiSwitch-track': {
        backgroundColor: 'primary',
        opacity: 0.18,
      },
    },
  },
}));

<Box textAlign="center">
    <CustomSwitch checked />
    <CustomSwitch />
    <CustomSwitch disabled defaultChecked />
    <CustomSwitch disabled />
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default CustomSwitchCode;

===== src/components/forms/form-elements/switch/code/DefaultLabelSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const DefaultLabelSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Switch, FormGroup, FormControlLabel } from '@mui/material';

<Box textAlign="center">
    <FormGroup>
        <FormControlLabel control={<Switch defaultChecked />} label="Label" />
        <FormControlLabel disabled control={<Switch />} label="Disabled" />
    </FormGroup>
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default DefaultLabelSwitchCode;

===== src/components/forms/form-elements/switch/code/DefaultSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const DefaultSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Switch } from '@mui/material';

<Box textAlign="center">
    <Switch defaultChecked />
    <Switch />
    <Switch disabled defaultChecked />
    <Switch disabled />
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default DefaultSwitchCode;

===== src/components/forms/form-elements/switch/code/PositionSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const PositionSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Switch, FormGroup, FormControlLabel } from '@mui/material';

<Box textAlign="center">
    <FormGroup aria-label="position" row>
        <FormControlLabel
            value="top"
            control={<Switch color="primary" />}
            label="Top"
            labelPlacement="top"
        />
        <FormControlLabel
            value="start"
            control={<Switch color="primary" />}
            label="Start"
            labelPlacement="start"
        />
        <FormControlLabel
            value="bottom"
            control={<Switch color="primary" />}
            label="Bottom"
            labelPlacement="bottom"
        />
        <FormControlLabel
            value="end"
            control={<Switch color="primary" />}
            label="End"
            labelPlacement="end"
        />
    </FormGroup>
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default PositionSwitchCode;

===== src/components/forms/form-elements/switch/code/SizesSwitchCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const SizesSwitchCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Box, Switch } from '@mui/material';

<Box textAlign="center">
    <Switch defaultChecked size="small" />
    <Switch defaultChecked />
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default SizesSwitchCode;

===== src/components/forms/form-elements/switch/Colors.tsx =====

import { Box, Switch } from '@mui/material';

const ColorsSwitch = () => (
    <Box textAlign="center">
        <Switch defaultChecked />
        <Switch defaultChecked color="secondary" />
        <Switch defaultChecked color="error" />
        <Switch defaultChecked color="warning" />
        <Switch defaultChecked color="success" />
        <Switch defaultChecked color="default" />
    </Box>
);
export default ColorsSwitch;

===== src/components/forms/form-elements/switch/Custom.tsx =====

import { Box } from '@mui/material';

import CustomSwitch from '../../theme-elements/CustomSwitch';


const CustomExSwitch = () => (
    <Box textAlign="center">
        <CustomSwitch checked />
        <CustomSwitch />
        <CustomSwitch disabled defaultChecked />
        <CustomSwitch disabled />
    </Box>
);
export default CustomExSwitch;

===== src/components/forms/form-elements/switch/Default.tsx =====

import { Box, Switch } from '@mui/material';

const DefaultSwitch = () => (
    <Box textAlign="center">
        <Switch defaultChecked />
        <Switch />
        <Switch disabled defaultChecked />
        <Switch disabled />
    </Box>
);
export default DefaultSwitch;

===== src/components/forms/form-elements/switch/DefaultLabel.tsx =====

import { Box, Switch, FormGroup, FormControlLabel } from '@mui/material';

const DefaultLabelSwitch = () => (
    <Box textAlign="center">
        <FormGroup>
            <FormControlLabel control={<Switch defaultChecked />} label="Label" />
            <FormControlLabel disabled control={<Switch />} label="Disabled" />
        </FormGroup>
    </Box>
);
export default DefaultLabelSwitch;

===== src/components/forms/form-elements/switch/Position.tsx =====

import { Box, Switch, FormGroup, FormControlLabel } from '@mui/material';

const PositionSwitch = () => (
    <Box textAlign="center">
        <FormGroup aria-label="position" row>
            <FormControlLabel
                value="top"
                control={<Switch color="primary" />}
                label="Top"
                labelPlacement="top"
            />
            <FormControlLabel
                value="start"
                control={<Switch color="primary" />}
                label="Start"
                labelPlacement="start"
            />
            <FormControlLabel
                value="bottom"
                control={<Switch color="primary" />}
                label="Bottom"
                labelPlacement="bottom"
            />
            <FormControlLabel
                value="end"
                control={<Switch color="primary" />}
                label="End"
                labelPlacement="end"
            />
        </FormGroup>
    </Box>
);
export default PositionSwitch;

===== src/components/forms/form-elements/switch/Sizes.tsx =====

import { Box, Switch } from '@mui/material';


const SizesSwitch = () => (
    <Box textAlign="center">
        <Switch defaultChecked size="small" />
        <Switch defaultChecked />
    </Box>
);
export default SizesSwitch;

===== src/components/forms/form-horizontal/BasicIcons.tsx =====
'use client'
import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { IconBuildingArch, IconMail, IconMessage2, IconPhone, IconUser } from '@tabler/icons-react';

const BasicIcons = () => {
  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container spacing={3}>
        {/* 1 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bi-name" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Name
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconUser size="20" />
              </InputAdornment>
            }
            id="bi-name"
            placeholder="John Deo"
            fullWidth
          />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bi-company" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Company
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconBuildingArch size="20" />
              </InputAdornment>
            }
            id="bi-company"
            placeholder="ACME Inc."
            fullWidth
          />
        </Grid>
        {/* 3 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bi-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Email
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconMail size="20" />
              </InputAdornment>
            }
            id="bi-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bi-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Phone No
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconPhone size="20" />
              </InputAdornment>
            }
            id="bi-phone"
            placeholder="412 2150 451"
            fullWidth
          />
        </Grid>
        {/* 5 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bi-message" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Message
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            id="bi-message"
            startAdornment={
              <InputAdornment position="start">
                <IconMessage2 size="20" />
              </InputAdornment>
            }
            placeholder="Hi, Do you  have a moment to talk Jeo ?"
            multiline
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}></Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <Button variant="contained" color="primary">
            Send
          </Button>
        </Grid>
      </Grid>
    </div>)
  );
};

export default BasicIcons;

===== src/components/forms/form-horizontal/BasicLayout.tsx =====
'use client'
import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';

const BasicLayout = () => {
  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container spacing={3}>
        {/* 1 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bl-name" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Name
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="bl-name" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bl-company" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Company
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="bl-company" placeholder="ACME Inc." fullWidth />
        </Grid>
        {/* 3 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bl-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Email
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
            id="bl-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bl-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Phone No
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="bl-phone" placeholder="412 2150 451" fullWidth />
        </Grid>
        {/* 5 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="bl-message" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Message
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField
            id="bl-message"
            placeholder="Hi, Do you  have a moment to talk Jeo ?"
            multiline
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}></Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <Button variant="contained" color="primary">Send</Button>
        </Grid>
      </Grid>
    </div>)
  );
};

export default BasicLayout;

===== src/components/forms/form-horizontal/code/BasicIconsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const BasicIconsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { OutlinedInput } from '@mui/material';
import { IconBuildingArch, IconMail, IconMessage2, IconPhone, IconUser } from '@tabler/icons-react';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

<div>
  <Grid container spacing={3}>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bi-name" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Name
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconUser size="20" />
          </InputAdornment>
        }
        id="bi-name"
        placeholder="John Deo"
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bi-company" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Company
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconBuildingArch size="20" />
          </InputAdornment>
        }
        id="bi-company"
        placeholder="ACME Inc."
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bi-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Email
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconMail size="20" />
          </InputAdornment>
        }
        id="bi-email"
        placeholder="john.deo"
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bi-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Phone No
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconPhone size="20" />
          </InputAdornment>
        }
        id="bi-phone"
        placeholder="412 2150 451"
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bi-message" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Message
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        id="bi-message"
        startAdornment={
          <InputAdornment position="start">
            <IconMessage2 size="20" />
          </InputAdornment>
        }
        placeholder="Hi, Do you  have a moment to talk Jeo ?"
        multiline
        fullWidth
      />
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 3
      }}></Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <Button variant="contained" color="primary">
        Send
      </Button>
    </Grid>
  </Grid>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default BasicIconsCode;

===== src/components/forms/form-horizontal/code/BasicLayoutCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const BasicLayoutCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import { Typography } from '@mui/material';
import { OutlinedInput } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

<div>
  <Grid container spacing={3}>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bl-name" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Name
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="bl-name" placeholder="John Deo" fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bl-company" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Company
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="bl-company" placeholder="ACME Inc." fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bl-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Email
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
        id="bl-email"
        placeholder="john.deo"
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bl-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Phone No
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="bl-phone" placeholder="412 2150 451" fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="bl-message" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Message
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField
        id="bl-message"
        placeholder="Hi, Do you  have a moment to talk Jeo ?"
        multiline
        fullWidth
      />
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 3
      }}></Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <Button variant="contained" color="primary">Send</Button>
    </Grid>
  </Grid>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default BasicLayoutCode;

===== src/components/forms/form-horizontal/code/FormSeparatorCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const FormSeparatorCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import {
  Grid2 as Grid,
  InputAdornment,
  Button,
  Typography,
  Divider,
  MenuItem,
  IconButton,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { TextField } from '@mui/material';
import { OutlinedInput } from '@mui/material';
import { Select } from '@mui/material';
import { Stack } from '@mui/system';
import { IconEye, IconEyeOff } from '@tabler/icons-react

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

const CustomSelect = styled((props: any) => <Select {...props} />)(({}) => ({}));

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const [country, setCountry] = React.useState('');

  const handleChange = (event: any) => {
    setCountry(event.target.value);
  };

  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
};

<div>
  <Typography variant="h6" mb={3}>
    Account Details
  </Typography>
  <Grid container spacing={3}>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-uname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Username
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="fs-uname" placeholder="John Deo" fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Email
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
        id="fs-email"
        placeholder="john.deo"
        fullWidth
      />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-pwd" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Password
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomOutlinedInput
        type={showPassword ? 'text' : 'password'}
        endAdornment={
          <InputAdornment position="end">
            <IconButton
              aria-label="toggle password visibility"
              onClick={handleClickShowPassword}
              onMouseDown={handleMouseDownPassword}
              edge="end"
            >
              {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
            </IconButton>
          </InputAdornment>
        }
        id="fs-pwd"
        placeholder="john.deo"
        fullWidth
      />
    </Grid>
    <Grid size={12}>
      <Divider sx={{mx: "-24px"}} />
      <Typography variant="h6" mt={2}>
        Personal Info
      </Typography>
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Full Name
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="fs-fname" placeholder="John Deo" fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-country" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Country
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomSelect
        id="standard-select-currency"
        value={country}
        onChange={handleChange}
        fullWidth
        variant="outlined"
      >
        {countries.map((option) => (
          <MenuItem key={option.value} value={option.value}>
            {option.label}
          </MenuItem>
        ))}
      </CustomSelect>
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-date" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Birth Date
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField type="date" id="fs-date" placeholder="John Deo" fullWidth />
    </Grid>
    <Grid
      display="flex"
      alignItems="center"
      size={{
        xs: 12,
        sm: 3
      }}>
      <CustomFormLabel htmlFor="fs-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
        Phone no
      </CustomFormLabel>
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <CustomTextField id="fs-phone" placeholder="123 4567 201" fullWidth />
    </Grid>
    <Grid
      size={{
        xs: 12,
        sm: 3
      }}></Grid>
    <Grid
      size={{
        xs: 12,
        sm: 9
      }}>
      <Stack direction="row" spacing={2}>
        <Button variant="contained" color="primary">
          Submit
        </Button>
        <Button variant="text" color="error">
          Cancel
        </Button>
      </Stack>
    </Grid>
  </Grid>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default FormSeparatorCode;

===== src/components/forms/form-horizontal/CollapsibleForm.tsx =====
'use client'

import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Grid2 as Grid,
  FormControlLabel,
  RadioGroup,
  FormControl,
  InputAdornment,
  Stack,
  Button,
} from '@mui/material';
import { IconChevronDown, IconHelp } from '@tabler/icons-react';

// components
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomRadio from '../theme-elements/CustomRadio';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { Box } from '@mui/system';
import React from 'react';

const CollapsibleForm = () => {
  // address type
  const [value, setValue] = React.useState('');

  const handleChange = (event: any) => {
    setValue(event.target.value);
  };

  //   delivery options
  const [value2, setValue2] = React.useState('');

  const handleChange2 = (event: any) => {
    setValue2(event.target.value);
  };

  //   payment
  const [value3, setValue3] = React.useState('radio1');

  const handleChange3 = (event: any) => {
    setValue3(event.target.value);
  };

  // default open slide
  const [expanded, setExpanded] = React.useState<string | false>('panel1');

  const handleChange4 =
    (panel: string) => (_event: React.SyntheticEvent, newExpanded: boolean) => {
      setExpanded(newExpanded ? panel : false);
    };

  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel1'} onChange={handleChange4('panel1')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel1a-content"
          id="panel1a-header"
        >
          <Typography variant="h6">Delivery Address</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={3}>
            {/* column 1 */}
            <Grid
              size={{
                xs: 12,
                lg: 6
              }}>
              <Grid container spacing={3}>
                {/* 1 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    Full Name
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField id="cs-fname" placeholder="John Deo" fullWidth />
                </Grid>
                {/* 2 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-address" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    Address
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField
                    multiline
                    id="cs-address"
                    placeholder="150, Ring Road"
                    fullWidth
                  />
                </Grid>
                {/* 3 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-city" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    City
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField id="cs-city" placeholder="Jackson" fullWidth />
                </Grid>
                {/* 37*/}
                <Grid
                  display="flex"
                  alignItems="start"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-address" sx={{ mt: 1 }}>
                    Address Type
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <FormControl component="fieldset">
                    <RadioGroup name="cs-address" value={value} onChange={handleChange}>
                      <FormControlLabel
                        value="radio1"
                        control={<CustomRadio />}
                        label="Home (All day delivery)"
                      />
                      <FormControlLabel
                        value="radio2"
                        control={<CustomRadio />}
                        label="
                        Office (Delivery between 10 AM - 5 PM)"
                      />
                    </RadioGroup>
                  </FormControl>
                </Grid>
              </Grid>
            </Grid>
            {/* column 2 */}
            <Grid
              size={{
                xs: 12,
                lg: 6
              }}>
              <Grid container spacing={3}>
                {/* 4 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    Phone no
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField id="cs-phone" placeholder="1340 2154 123" fullWidth />
                </Grid>
                {/* 5 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-pin" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    Pincode
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField id="cs-pin" placeholder="120125" fullWidth />
                </Grid>
                {/* 6 */}
                <Grid
                  display="flex"
                  alignItems="center"
                  justifyContent="end"
                  size={{
                    xs: 12,
                    sm: 3
                  }}>
                  <CustomFormLabel htmlFor="cs-landmark" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                    Landmark
                  </CustomFormLabel>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 9
                  }}>
                  <CustomTextField id="cs-landmark" placeholder="Nr. Wall Street" fullWidth />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel2'} onChange={handleChange4('panel2')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel2a-content"
          id="panel2a-header"
        >
          <Typography variant="h6">Delivery Options</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <RadioGroup row name="delivery-opt" value={value2} onChange={handleChange2}>
            <FormControlLabel value="radio1" control={<CustomRadio />} label="Standard 3-5 Days" />
            <FormControlLabel value="radio2" control={<CustomRadio />} label="Express" />
            <FormControlLabel value="radio3" control={<CustomRadio />} label="Overnight" />
          </RadioGroup>
        </AccordionDetails>
      </Accordion>
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel3'} onChange={handleChange4('panel3')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel3a-content"
          id="panel3a-header"
        >
          <Typography variant="h6">Payment Method</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={3}>
            <Grid
              size={{
                xs: 12,
                sm: 8
              }}>
              <RadioGroup row name="payment-method" value={value3} onChange={handleChange3}>
                <FormControlLabel
                  value="radio1"
                  control={<CustomRadio />}
                  label="Credit/Debit/ATM Card"
                />
                <FormControlLabel
                  value="radio2"
                  control={<CustomRadio />}
                  label="Cash on Delivery"
                />
              </RadioGroup>
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 8
              }}>
              <Box>
                <Grid container spacing={3}>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="cs-co" sx={{ mt: 0 }}>Card Number</CustomFormLabel>
                    <CustomTextField id="cs-co" placeholder="1250 4521 5630 1540" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 6
                    }}>
                    <CustomFormLabel htmlFor="cs-name" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Name
                    </CustomFormLabel>
                    <CustomTextField id="cs-name" placeholder="John Deo" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="cs-exdate" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Exp. Date
                    </CustomFormLabel>
                    <CustomTextField id="cs-exdate" placeholder="MM/YY" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="cs-code" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      CCV Code
                    </CustomFormLabel>
                    <CustomOutlinedInput
                      id="cs-code"
                      placeholder="456"
                      fullWidth
                      endAdornment={
                        <InputAdornment position="end">
                          <IconHelp width="20" />
                        </InputAdornment>
                      }
                    />
                  </Grid>
                  <Grid size={12}>
                    <Stack direction="row" spacing={2}>
                      <Button variant="contained" color="primary">Submit</Button>
                      <Button variant="text" color="error">Cancel</Button>
                    </Stack>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
    </div>)
  );
};

export default CollapsibleForm;

===== src/components/forms/form-horizontal/FormLabelAlignment.tsx =====
'use client'
import {
  Grid2 as Grid,
  InputAdornment,
  Button,
  Typography,
  Divider,
  MenuItem,
  IconButton,
} from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import CustomSelect from '../theme-elements/CustomSelect';
import { Stack } from '@mui/system';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import React from 'react';

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const FormLabelAlignment = () => {
  // country
  const [country, setCountry] = React.useState('');

  const handleChange = (event: any) => {
    setCountry(event.target.value);
  };

  //   password
  //
  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  return (
    (<div>
      <Typography variant="h6" mb={3}>
        Account Details
      </Typography>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container spacing={3}>
        {/* 1 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-uname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Username
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-uname" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Email
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
            id="fs-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-pwd" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Password
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            type={showPassword ? 'text' : 'password'}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword}
                  onMouseDown={handleMouseDownPassword}
                  edge="end"
                >
                  {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                </IconButton>
              </InputAdornment>
            }
            id="fs-pwd"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        <Grid size={12}>
          <Divider sx={{ mx: "-24px" }} />
          <Typography variant="h6" mt={2}>
            Personal Info
          </Typography>
        </Grid>

        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Full Name
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-fname" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-country" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Country
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomSelect
            id="standard-select-currency"
            value={country}
            onChange={handleChange}
            fullWidth
            variant="outlined"
          >
            {countries.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </CustomSelect>
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-date" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Birth Date
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField type="date" id="fs-date" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          justifyContent="end"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Phone no
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-phone" placeholder="123 4567 201" fullWidth />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}></Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <Stack direction="row" spacing={2}>
            <Button variant="contained" color="primary">
              Submit
            </Button>
            <Button variant="text" color="error">
              Cancel
            </Button>
          </Stack>
        </Grid>
      </Grid>
    </div>)
  );
};

export default FormLabelAlignment;

===== src/components/forms/form-horizontal/FormSeparator.tsx =====
'use client'
import {
  Grid2 as Grid,
  InputAdornment,
  Button,
  Typography,
  Divider,
  MenuItem,
  IconButton,
} from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import CustomSelect from '../theme-elements/CustomSelect';
import { Stack } from '@mui/system';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import React from 'react';

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const FormSeparator = () => {
  // country
  const [country, setCountry] = React.useState('');

  const handleChange = (event: any) => {
    setCountry(event.target.value);
  };

  //   password
  //
  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  return (
    (<div>
      <Typography variant="h6" mb={3}>
        Account Details
      </Typography>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container spacing={3}>
        {/* 1 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-uname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Username
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-uname" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Email
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
            id="fs-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 2 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-pwd" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Password
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomOutlinedInput
            type={showPassword ? 'text' : 'password'}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword}
                  onMouseDown={handleMouseDownPassword}
                  edge="end"
                >
                  {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                </IconButton>
              </InputAdornment>
            }
            id="fs-pwd"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        <Grid size={12}>
          <Divider sx={{ mx: "-24px" }} />
          <Typography variant="h6" mt={2}>
            Personal Info
          </Typography>
        </Grid>

        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Full Name
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-fname" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-country" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Country
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomSelect
            id="standard-select-currency"
            value={country}
            onChange={handleChange}
            fullWidth
            variant="outlined"
          >
            {countries.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </CustomSelect>
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-date" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Birth Date
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField type="date" id="fs-date" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 4 */}
        <Grid
          display="flex"
          alignItems="center"
          size={{
            xs: 12,
            sm: 3
          }}>
          <CustomFormLabel htmlFor="fs-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
            Phone no
          </CustomFormLabel>
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <CustomTextField id="fs-phone" placeholder="123 4567 201" fullWidth />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}></Grid>
        <Grid
          size={{
            xs: 12,
            sm: 9
          }}>
          <Stack direction="row" spacing={2}>
            <Button variant="contained" color="primary">
              Submit
            </Button>
            <Button variant="text" color="error">
              Cancel
            </Button>
          </Stack>
        </Grid>
      </Grid>
    </div>)
  );
};

export default FormSeparator;

===== src/components/forms/form-horizontal/FormTabs.tsx =====
'use client'

import { Box, Button, Grid2 as Grid, IconButton, InputAdornment, MenuItem, Stack, Tab } from '@mui/material';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

// components
import BlankCard from '../../shared/BlankCard';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomSelect from '../theme-elements/CustomSelect';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import React from 'react';

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const lang = [
  {
    value: 'en',
    label: 'English',
  },
  {
    value: 'fr',
    label: 'French',
  },
];

const FormTabs = () => {
  const [value, setValue] = React.useState('1');

  const handleChange = (_event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  //   country
  const [country, setCountry] = React.useState('');

  const handleChange2 = (event: any) => {
    setCountry(event.target.value);
  };

  //   language
  const [language, setLanguage] = React.useState('en');

  const handleChange3 = (event: any) => {
    setLanguage(event.target.value);
  };

  //   password
  //
  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  //   confirm password
  //
  const [showPassword2, setShowPassword2] = React.useState(false);

  const handleClickShowPassword2 = () => setShowPassword2((show) => !show);

  const handleMouseDownPassword2 = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <BlankCard>
        <TabContext value={value}>
          <Box sx={{ borderBottom: 1, borderColor: (theme: any) => theme.palette.divider }}>
            <TabList onChange={handleChange} aria-label="lab API tabs example">
              <Tab label="Personal Info" value="1" />
              <Tab label="Account Details" value="2" />
              <Tab label="Social Links" value="3" />
            </TabList>
          </Box>
          <TabPanel value="1">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      First Name
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-fname" placeholder="John" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel
                      htmlFor="ft-country"
                      sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}
                    >
                      Country
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomSelect
                      id="standard-select-currency"
                      value={country}
                      onChange={handleChange2}
                      fullWidth
                      variant="outlined"
                    >
                      {countries.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </CustomSelect>
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-date" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Birth Date
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField type="date" id="ft-date" placeholder="John Deo" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              {/* 2 column */}
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-fname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Last Name
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-fname" placeholder="Deo" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-lang" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Language
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomSelect
                      value={language}
                      onChange={handleChange3}
                      fullWidth
                      variant="outlined"
                    >
                      {lang.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </CustomSelect>
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-phone" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Phone no
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-phone" placeholder="123 4567 201" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 3
                }}></Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 9
                }}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
          <TabPanel value="2">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-uname" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Username
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-uname" placeholder="John.Deo" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-pwd" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Password
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomOutlinedInput
                      type={showPassword ? 'text' : 'password'}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={handleClickShowPassword}
                            onMouseDown={handleMouseDownPassword}
                            edge="end"
                          >
                            {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                          </IconButton>
                        </InputAdornment>
                      }
                      id="fs-pwd"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              {/* 2 column */}
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-email" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Email
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomOutlinedInput
                      endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
                      id="fs-email"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                  {/* 4 */}
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-lang" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Confirm
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomOutlinedInput
                      type={showPassword2 ? 'text' : 'password'}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={handleClickShowPassword2}
                            onMouseDown={handleMouseDownPassword2}
                            edge="end"
                          >
                            {showPassword2 ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                          </IconButton>
                        </InputAdornment>
                      }
                      id="fs-pwd"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 3
                }}></Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 9
                }}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
          <TabPanel value="3">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel
                      htmlFor="ft-twitter"
                      sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}
                    >
                      Twitter
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField
                      id="ft-twitter"
                      placeholder="https://twitter.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-google" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Google
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField
                      id="ft-google"
                      placeholder="https://plus.google.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-insta" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Instagram
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField
                      id="ft-insta"
                      placeholder="https://instagram.com/abc"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container spacing={3}>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-fb" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Facebook
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-fb" placeholder="https://facebook.com/abc" fullWidth />
                  </Grid>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel
                      htmlFor="ft-linkedin"
                      sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}
                    >
                      Linkedin
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField
                      id="ft-linkedin"
                      placeholder="https://linkedin.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid
                    display="flex"
                    alignItems="center"
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="ft-quora" sx={{ mt: 0, mb: { xs: '-10px', sm: 0 } }}>
                      Quora
                    </CustomFormLabel>
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 9
                    }}>
                    <CustomTextField id="ft-quora" placeholder="https://quora.com/abc" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 3
                }}></Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 9
                }}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
        </TabContext>
      </BlankCard>
    </div>)
  );
};

export default FormTabs;

===== src/components/forms/form-layouts/code/BasicHeaderFormCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const BasicHeaderFormCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from "react";
import {
  Box,
  FormControlLabel,
  Button,
  Grid2 as Grid,
  MenuItem,
  FormControl
} from "@mui/material";
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { TextField } from '@mui/material';
import { Select } from '@mui/material';
import Radio, { RadioProps } from '@mui/material/Radio';

const BpIcon2 = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon2 = styled(BpIcon2)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomSelect = styled((props: any) => <Select {...props} />)(({}) => ({}));

function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon2
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon2 />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const currencies = [
  {
    value: 'female',
    label: 'Female',
  },
  {
    value: 'male',
    label: 'Male',
  },
  {
    value: 'other',
    label: 'Other',
  },
];

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const [currency, setCurrency] = React.useState('');

const handleChange2 = (event: any) => {
    setCurrency(event.target.value);
};

const [selectedValue, setSelectedValue] = React.useState('');

const handleChange3 = (event: any) => {
    setSelectedValue(event.target.value);
};

const [country, setCountry] = React.useState('');

const handleChange4 = (event: any) => {
    setCountry(event.target.value);
};

<div>
    <>
      <severity="info">Person Info</>
      <form>
        <Grid container spacing={3} mb={3}>
          <Grid
            size={{
              lg: 6,
              md: 12,
              sm: 12
            }}>
            <CustomFormLabel htmlFor="fname-text">
              First Name
            </CustomFormLabel>
            <CustomTextField id="fname-text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="standard-select-currency">
              Select Gender
            </CustomFormLabel>
            <CustomSelect
              id="standard-select-currency"
              value={currency}
              onChange={handleChange2}
              fullWidth
              variant="outlined"
            >
              {currencies.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </CustomSelect>
            <CustomFormLabel>Membership</CustomFormLabel>

            <FormControl
              sx={{
                width: "100%",
              }}
            >
              <Box>
                <FormControlLabel
                  checked={selectedValue === "a"}
                  onChange={handleChange3}
                  value="a"
                  label="Free"
                  name="radio-button-demo"
                  control={<CustomRadio />}
                />
                <FormControlLabel
                  checked={selectedValue === "b"}
                  onChange={handleChange3}
                  value="b"
                  label="Paid"
                  control={<CustomRadio />}
                  name="radio-button-demo"
                />
              </Box>
            </FormControl>
          </Grid>
          <Grid
            size={{
              lg: 6,
              md: 12,
              sm: 12
            }}>
            <CustomFormLabel htmlFor="lname-text">
              Last Name
            </CustomFormLabel>

            <CustomTextField id="lname-text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="date">Date of Birth</CustomFormLabel>

            <CustomTextField
              id="date"
              type="date"
              variant="outlined"
              fullWidth
              InputLabelProps={{
                shrink: true,
              }}
            />
          </Grid>
        </Grid>
      </form>
      <severity="info">Address</>
      <Grid container spacing={3} mb={3} mt={1}>
        <Grid
          size={{
            lg: 12,
            md: 12,
            sm: 12,
            xs: 12
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="street-text"
          >
            Street
          </CustomFormLabel>

          <CustomTextField id="street-text" variant="outlined" fullWidth />
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            sm: 12,
            xs: 12
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="city-text"
          >
            City
          </CustomFormLabel>
          <CustomTextField id="city-text" variant="outlined" fullWidth />
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            sm: 12,
            xs: 12
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="state-text"
          >
            State
          </CustomFormLabel>
          <CustomTextField id="state-text" variant="outlined" fullWidth />
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            sm: 12,
            xs: 12
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="post-text"
          >
            Post Code
          </CustomFormLabel>
          <CustomTextField id="post-text" variant="outlined" fullWidth />
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            sm: 12,
            xs: 12
          }}>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="country-text"
          >
            Country
          </CustomFormLabel>
          <CustomSelect
            id="country-select"
            value={country}
            onChange={handleChange4}
            fullWidth
            variant="outlined"
          >
            {countries.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </CustomSelect>
        </Grid>
      </Grid>
    </>
    <>
      <Button
        variant="contained"
        color="error"
        sx={{
          mr: 1,
        }}
      >
        Cancel
      </Button>
      <Button variant="contained" color="primary">
        Submit
      </Button>
    </>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default BasicHeaderFormCode;

===== src/components/forms/form-layouts/code/DefaultFormCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const DefaultFormCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from "react";
import {
  FormControlLabel,
  Button,
  Grid2 as Grid,
  RadioGroup,
  FormControl,
  MenuItem,
} from "@mui/material";
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { TextField } from '@mui/material';
import { Select } from '@mui/material';
import Radio, { RadioProps } from '@mui/material/Radio';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

const BpIcon2 = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon2 = styled(BpIcon2)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? 'radial-gradient({theme.palette.background.paper},{theme.palette.background.paper} 28%,transparent 32%)'
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomSelect = styled((props: any) => <Select {...props} />)(({}) => ({}));

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon2
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon2 />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const numbers = [
  {
    value: 'one',
    label: 'One',
  },
  {
    value: 'two',
    label: 'Two',
  },
  {
    value: 'three',
    label: 'Three',
  },
  {
    value: 'four',
    label: 'Four',
  },
];

const [state, setState] = React.useState({
    checkedA: false,
    checkedB: false,
    checkedC: false,
});

const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
};

const [value, setValue] = React.useState('');

const handleChange2 = (event: any) => {
    setValue(event.target.value);
};

const [number, setNumber] = React.useState('');

const handleChange3 = (event: any) => {
    setNumber(event.target.value);
};

<form>
  <CustomFormLabel
    sx={{
      mt: 0,
    }}
    htmlFor="default-value"
  >
    Default Text
  </CustomFormLabel>
  <CustomTextField
    id="default-value"
    variant="outlined"
    defaultValue="George deo"
    fullWidth
  />
  <CustomFormLabel htmlFor="email-text">Email</CustomFormLabel>
  <CustomTextField
    id="email-text"
    type="email"
    variant="outlined"
    fullWidth
  />
  <CustomFormLabel htmlFor="default-outlined-password-input">
    Password
  </CustomFormLabel>

  <CustomTextField
    id="default-outlined-password-input"
    type="password"
    autoComplete="current-password"
    variant="outlined"
    fullWidth
  />
  <CustomFormLabel htmlFor="outlined-multiline-static">
    Textarea
  </CustomFormLabel>

  <CustomTextField
    id="outlined-multiline-static"
    multiline
    rows={4}
    variant="outlined"
    fullWidth
  />
  <CustomFormLabel htmlFor="readonly-text">Read Only</CustomFormLabel>

  <CustomTextField
    id="readonly-text"
    defaultValue="Hello World"
    InputProps={{
      readOnly: true,
    }}
    variant="outlined"
    fullWidth
  />
  <Grid container spacing={0} my={2}>
    <Grid
      size={{
        lg: 4,
        md: 6,
        sm: 12
      }}>
      <FormControlLabel
        control={
          <CustomCheckbox
            checked={state.checkedA}
            onChange={handleChange}
            name="checkedA"
            color="primary"
          />
        }
        label="Check this custom checkbox"
      />
      <FormControlLabel
        control={
          <CustomCheckbox
            checked={state.checkedB}
            onChange={handleChange}
            name="checkedB"
            color="primary"
          />
        }
        label="Check this custom checkbox"
      />
      <FormControlLabel
        control={
          <CustomCheckbox
            checked={state.checkedC}
            onChange={handleChange}
            name="checkedC"
            color="primary"
          />
        }
        label="Check this custom checkbox"
      />
    </Grid>
    <Grid
      size={{
        lg: 4,
        md: 6,
        sm: 12
      }}>
      <FormControl component="fieldset">
        <RadioGroup
          aria-label="gender"
          name="gender1"
          value={value}
          onChange={handleChange2}
        >
          <FormControlLabel
            value="radio1"
            control={<CustomRadio />}
            label="Toggle this custom radio"
          />
          <FormControlLabel
            value="radio2"
            control={<CustomRadio />}
            label="Toggle this custom radio"
          />
          <FormControlLabel
            value="radio3"
            control={<CustomRadio />}
            label="Toggle this custom radio"
          />
        </RadioGroup>
      </FormControl>
    </Grid>
  </Grid>
  <CustomFormLabel htmlFor="standard-select-number">
    Select
  </CustomFormLabel>
  <CustomSelect
    fullWidth
    id="standard-select-number"
    variant="outlined"
    value={number}
    onChange={handleChange3}
    sx={{
      mb: 2,
    }}
  >
    {numbers.map((option) => (
      <MenuItem key={option.value} value={option.value}>
        {option.label}
      </MenuItem>
    ))}
  </CustomSelect>
  <div>
    <Button color="primary" variant="contained">
      Submit
    </Button>
  </div>
  </form>
`}
      </CodeDialog>
    </>
  );
};

export default DefaultFormCode;

===== src/components/forms/form-layouts/code/InputVariantsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const InputVariantsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { FormControl } from '@mui/material';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

<form>
    <CustomFormLabel
        sx={{
            mt: 0,
        }}
        htmlFor="success-input"
    >
        Success Input
    </CustomFormLabel>
    <CustomTextField
        id="success-input"
        variant="outlined"
        defaultValue="Success value"
        fullWidth
        required
        sx={{
            '& input:valid + fieldset': {
              borderColor: '#39cb7f',
            },
            '& input:invalid + fieldset': {
              borderColor: '#fc4b6c',
            },
        }}
    />
    <CustomFormLabel htmlFor="error-input">Error Input</CustomFormLabel>
    <CustomTextField
        id="error-input"
        variant="outlined"
        fullWidth
        required
        error
    />
    <FormControl fullWidth error>
        <CustomFormLabel htmlFor="error-text-input">Input with Error text</CustomFormLabel>
        <CustomTextField
            id="error-text-input"
            variant="outlined"
            fullWidth
            required
            error
            helperText="Incorrect entry."
        />
    </FormControl>
</form>
`}
      </CodeDialog>
    </>
  );
};

export default InputVariantsCode;

===== src/components/forms/form-layouts/code/LeftIconFormCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const LeftIconFormCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from "react";
import {
  Button,
  FormControlLabel,
  FormControl,
  InputAdornment,
  OutlinedInput,
  Stack,
} from "@mui/material";
import { IconLock, IconMail, IconUser } from "@tabler/icons-react";
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

// Inspired by blueprintjs
function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const [state, setState] = React.useState({
    checkedA: false,
});

const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
};

<form>
    <FormControl fullWidth>
        <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="username-text"
        >
            Username
        </CustomFormLabel>
        <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconUser width={20} />
              </InputAdornment>
            }
            id="username-text"
            placeholder="Username"
            fullWidth
        />
    </FormControl>
    <FormControl fullWidth>
        <CustomFormLabel htmlFor="mail-text">Email</CustomFormLabel>
        <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconMail width={20} />
              </InputAdornment>
            }
            id="mail-text"
            placeholder="Email"
            fullWidth
        />
    </FormControl>
    <FormControl fullWidth>
        <CustomFormLabel htmlFor="pwd-text">Password</CustomFormLabel>
        <OutlinedInput
            type="password"
            startAdornment={
              <InputAdornment position="start">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="pwd-text"
            placeholder="Password"
            fullWidth
        />
    </FormControl>
    <FormControl fullWidth>
        <CustomFormLabel htmlFor="cpwd-text">Confirm Password</CustomFormLabel>
        <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="cpwd-text"
            placeholder="Confirm Password"
            fullWidth
        />
    </FormControl>

    <FormControlLabel
        control={
            <CustomCheckbox checked={state.checkedA} onChange={handleChange} name="checkedA" />
        }
        sx={{
            mt: '10px',
        }}
        label="Remember Me!"
    />

    <>
      <Stack direction="row" spacing={2}>
        <Button color="primary" variant="contained">
          Submit
        </Button>
        <Button variant="contained" color="error">
          Cancel
        </Button>
      </Stack>
    </>
</form>
`}
      </CodeDialog>
    </>
  );
};

export default LeftIconFormCode;

===== src/components/forms/form-layouts/FbBasicHeaderForm.tsx =====
"use client";
import React from "react";
import {
  Box,
  FormControlLabel,
  Button,
  Grid2 as Grid,
  MenuItem,
  FormControl,
  Alert,
} from "@mui/material";
import CustomTextField from "../theme-elements/CustomTextField";
import CustomSelect from "../theme-elements/CustomSelect";
import CustomRadio from "../theme-elements/CustomRadio";
import CustomFormLabel from "../theme-elements/CustomFormLabel";
import ParentCard from "../../shared/ParentCard";

import BasicHeaderFormCode from "src/components/forms/form-layouts/code/BasicHeaderFormCode";

const currencies = [
  {
    value: "female",
    label: "Female",
  },
  {
    value: "male",
    label: "Male",
  },
  {
    value: "other",
    label: "Other",
  },
];

const countries = [
  {
    value: "india",
    label: "India",
  },
  {
    value: "uk",
    label: "United Kingdom",
  },
  {
    value: "srilanka",
    label: "Srilanka",
  },
];

const FbBasicHeaderForm = () => {
  const [currency, setCurrency] = React.useState("");

  const handleChange2 = (event: any) => {
    setCurrency(event.target.value);
  };

  const [selectedValue, setSelectedValue] = React.useState("");

  const handleChange3 = (event: any) => {
    setSelectedValue(event.target.value);
  };

  const [country, setCountry] = React.useState("");

  const handleChange4 = (event: any) => {
    setCountry(event.target.value);
  };

  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Checkbox */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <ParentCard
        title="Basic Header Form"
        codeModel={<BasicHeaderFormCode />}
        footer={
          <>
            <Button
              variant="contained"
              color="error"
              sx={{
                mr: 1,
              }}
            >
              Cancel
            </Button>
            <Button variant="contained" color="primary">
              Submit
            </Button>
          </>
        }
      >
        <>
          <Alert severity="info">Person Info</Alert>
          <form>
            <Grid container spacing={3} mb={3}>
              <Grid
                size={{
                  lg: 6,
                  md: 12,
                  sm: 12
                }}>
                <CustomFormLabel htmlFor="fname-text">
                  First Name
                </CustomFormLabel>
                <CustomTextField id="fname-text" variant="outlined" fullWidth />
                <CustomFormLabel htmlFor="standard-select-currency">
                  Select Gender
                </CustomFormLabel>
                <CustomSelect
                  id="standard-select-currency"
                  value={currency}
                  onChange={handleChange2}
                  fullWidth
                  variant="outlined"
                >
                  {currencies.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </CustomSelect>
                <CustomFormLabel>Membership</CustomFormLabel>

                <FormControl
                  sx={{
                    width: "100%",
                  }}
                >
                  <Box>
                    <FormControlLabel
                      checked={selectedValue === "a"}
                      onChange={handleChange3}
                      value="a"
                      label="Free"
                      name="radio-button-demo"
                      control={<CustomRadio />}
                    />
                    <FormControlLabel
                      checked={selectedValue === "b"}
                      onChange={handleChange3}
                      value="b"
                      label="Paid"
                      control={<CustomRadio />}
                      name="radio-button-demo"
                    />
                  </Box>
                </FormControl>
              </Grid>
              <Grid
                size={{
                  lg: 6,
                  md: 12,
                  sm: 12
                }}>
                <CustomFormLabel htmlFor="lname-text">
                  Last Name
                </CustomFormLabel>

                <CustomTextField id="lname-text" variant="outlined" fullWidth />
                <CustomFormLabel htmlFor="date">Date of Birth</CustomFormLabel>

                <CustomTextField
                  id="date"
                  type="date"
                  variant="outlined"
                  fullWidth
                  InputLabelProps={{
                    shrink: true,
                  }}
                />
              </Grid>
            </Grid>
          </form>
          <Alert severity="info">Address</Alert>
          <Grid container spacing={3} mb={3} mt={1}>
            <Grid
              size={{
                lg: 12,
                md: 12,
                sm: 12,
                xs: 12
              }}>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="street-text"
              >
                Street
              </CustomFormLabel>

              <CustomTextField id="street-text" variant="outlined" fullWidth />
            </Grid>
            <Grid
              size={{
                lg: 6,
                md: 12,
                sm: 12,
                xs: 12
              }}>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="city-text"
              >
                City
              </CustomFormLabel>
              <CustomTextField id="city-text" variant="outlined" fullWidth />
            </Grid>
            <Grid
              size={{
                lg: 6,
                md: 12,
                sm: 12,
                xs: 12
              }}>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="state-text"
              >
                State
              </CustomFormLabel>
              <CustomTextField id="state-text" variant="outlined" fullWidth />
            </Grid>
            <Grid
              size={{
                lg: 6,
                md: 12,
                sm: 12,
                xs: 12
              }}>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="post-text"
              >
                Post Code
              </CustomFormLabel>
              <CustomTextField id="post-text" variant="outlined" fullWidth />
            </Grid>
            <Grid
              size={{
                lg: 6,
                md: 12,
                sm: 12,
                xs: 12
              }}>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="country-text"
              >
                Country
              </CustomFormLabel>
              <CustomSelect
                id="country-select"
                value={country}
                onChange={handleChange4}
                fullWidth
                variant="outlined"
              >
                {countries.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </CustomSelect>
            </Grid>
          </Grid>
        </>
      </ParentCard>
    </div>)
  );
};

export default FbBasicHeaderForm;

===== src/components/forms/form-layouts/FbDefaultForm.tsx =====
"use client";
import React from "react";
import {
  FormControlLabel,
  Button,
  Grid2 as Grid,
  RadioGroup,
  FormControl,
  MenuItem,
} from "@mui/material";
import CustomTextField from "../theme-elements/CustomTextField";
import CustomSelect from "../theme-elements/CustomSelect";
import CustomCheckbox from "../theme-elements/CustomCheckbox";
import CustomRadio from "../theme-elements/CustomRadio";
import CustomFormLabel from "../theme-elements/CustomFormLabel";
import ParentCard from "../../shared/ParentCard";

import DefaultFormCode from "src/components/forms/form-layouts/code/DefaultFormCode";

const numbers = [
  {
    value: "one",
    label: "One",
  },
  {
    value: "two",
    label: "Two",
  },
  {
    value: "three",
    label: "Three",
  },
  {
    value: "four",
    label: "Four",
  },
];

const FbDefaultForm = () => {
  const [state, setState] = React.useState({
    checkedA: false,
    checkedB: false,
    checkedC: false,
  });

  const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
  };

  const [value, setValue] = React.useState("");

  const handleChange2 = (event: any) => {
    setValue(event.target.value);
  };

  const [number, setNumber] = React.useState("");

  const handleChange3 = (event: any) => {
    setNumber(event.target.value);
  };

  return (
    (<ParentCard title="Default Form" codeModel={<DefaultFormCode />}>
      <form>
        <CustomFormLabel
          sx={{
            mt: 0,
          }}
          htmlFor="default-value"
        >
          Default Text
        </CustomFormLabel>
        <CustomTextField
          id="default-value"
          variant="outlined"
          defaultValue="George deo"
          fullWidth
        />
        <CustomFormLabel htmlFor="email-text">Email</CustomFormLabel>
        <CustomTextField
          id="email-text"
          type="email"
          variant="outlined"
          fullWidth
        />
        <CustomFormLabel htmlFor="default-outlined-password-input">
          Password
        </CustomFormLabel>

        <CustomTextField
          id="default-outlined-password-input"
          type="password"
          autoComplete="current-password"
          variant="outlined"
          fullWidth
        />
        <CustomFormLabel htmlFor="outlined-multiline-static">
          Textarea
        </CustomFormLabel>

        <CustomTextField
          id="outlined-multiline-static"
          multiline
          rows={4}
          variant="outlined"
          fullWidth
        />
        <CustomFormLabel htmlFor="readonly-text">Read Only</CustomFormLabel>

        <CustomTextField
          id="readonly-text"
          defaultValue="Hello World"
          InputProps={{
            readOnly: true,
          }}
          variant="outlined"
          fullWidth
        />
        <Grid container spacing={0} my={2}>
          <Grid
            size={{
              lg: 4,
              md: 6,
              sm: 12
            }}>
            <FormControlLabel
              control={
                <CustomCheckbox
                  checked={state.checkedA}
                  onChange={handleChange}
                  name="checkedA"
                  color="primary"
                />
              }
              label="Check this custom checkbox"
            />
            <FormControlLabel
              control={
                <CustomCheckbox
                  checked={state.checkedB}
                  onChange={handleChange}
                  name="checkedB"
                  color="primary"
                />
              }
              label="Check this custom checkbox"
            />
            <FormControlLabel
              control={
                <CustomCheckbox
                  checked={state.checkedC}
                  onChange={handleChange}
                  name="checkedC"
                  color="primary"
                />
              }
              label="Check this custom checkbox"
            />
          </Grid>
          <Grid
            size={{
              lg: 4,
              md: 6,
              sm: 12
            }}>
            <FormControl component="fieldset">
              <RadioGroup
                aria-label="gender"
                name="gender1"
                value={value}
                onChange={handleChange2}
              >
                <FormControlLabel
                  value="radio1"
                  control={<CustomRadio />}
                  label="Toggle this custom radio"
                />
                <FormControlLabel
                  value="radio2"
                  control={<CustomRadio />}
                  label="Toggle this custom radio"
                />
                <FormControlLabel
                  value="radio3"
                  control={<CustomRadio />}
                  label="Toggle this custom radio"
                />
              </RadioGroup>
            </FormControl>
          </Grid>
        </Grid>
        <CustomFormLabel htmlFor="standard-select-number">
          Select
        </CustomFormLabel>
        <CustomSelect
          fullWidth
          id="standard-select-number"
          variant="outlined"
          value={number}
          onChange={handleChange3}
          sx={{
            mb: 2,
          }}
        >
          {numbers.map((option) => (
            <MenuItem key={option.value} value={option.value}>
              {option.label}
            </MenuItem>
          ))}
        </CustomSelect>
        <div>
          <Button color="primary" variant="contained">
            Submit
          </Button>
        </div>
      </form>
    </ParentCard>)
  );
};

export default FbDefaultForm;

===== src/components/forms/form-layouts/FbDisabledForm.tsx =====
'use client'

import { Box, Button } from '@mui/material';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import ParentCard from '../../shared/ParentCard';

const FbDisabledForm = () => (
  <ParentCard title="Disabled Form">
    <form>
      <CustomFormLabel
        sx={{
          mt: 0,
        }}
        htmlFor="df-name"
      >
        Name
      </CustomFormLabel>
      <CustomTextField
        id="df-name"
        variant="outlined"
        fullWidth
        disabled
      />
      <CustomFormLabel htmlFor="df-email-address">Email</CustomFormLabel>
      <CustomTextField
        id="df-email-address"
        helperText="We'll never share your email with anyone else."
        variant="outlined"
        fullWidth
        disabled
      />
      <CustomFormLabel htmlFor="df-outlined-password-input">Password</CustomFormLabel>
      <CustomTextField
        id="df-outlined-password-input"
        type="password"
        autoComplete="current-password"
        variant="outlined"
        fullWidth
        disabled
      />
      <Box mt={2}>
        <Button color="primary" variant="contained" disabled>
          Submit
        </Button>
      </Box>
    </form>
  </ParentCard>
);

export default FbDisabledForm;

===== src/components/forms/form-layouts/FbInputVariants.tsx =====
"use client";

import { FormControl } from "@mui/material";
import CustomTextField from "../theme-elements/CustomTextField";
import CustomFormLabel from "../theme-elements/CustomFormLabel";
import ParentCard from "../../shared/ParentCard";

import InputVariantsCode from "src/components/forms/form-layouts/code/InputVariantsCode";

const FbInputVariants = () => {
  return (
    <ParentCard title="Input Variants" codeModel={<InputVariantsCode />}>
      <form>
        <CustomFormLabel
          sx={{
            mt: 0,
          }}
          htmlFor="success-input"
        >
          Success Input
        </CustomFormLabel>
        <CustomTextField
          id="success-input"
          variant="outlined"
          defaultValue="Success value"
          fullWidth
          required
          sx={{
            "& input:valid + fieldset": {
              borderColor: "#39cb7f",
            },
            "& input:invalid + fieldset": {
              borderColor: "#fc4b6c",
            },
          }}
        />
        <CustomFormLabel htmlFor="error-input">Error Input</CustomFormLabel>
        <CustomTextField
          id="error-input"
          variant="outlined"
          fullWidth
          required
          error
        />
        <FormControl fullWidth error>
          <CustomFormLabel htmlFor="error-text-input">
            Input with Error text
          </CustomFormLabel>
          <CustomTextField
            id="error-text-input"
            variant="outlined"
            fullWidth
            required
            error
            helperText="Incorrect entry."
          />
        </FormControl>
      </form>
    </ParentCard>
  );
};

export default FbInputVariants;

===== src/components/forms/form-layouts/FbLeftIconForm.tsx =====
"use client";
import React from "react";
import {
  Button,
  FormControlLabel,
  FormControl,
  InputAdornment,
  OutlinedInput,
  Stack,
} from "@mui/material";
import CustomCheckbox from "../theme-elements/CustomCheckbox";
import CustomFormLabel from "../theme-elements/CustomFormLabel";
import ParentCard from "../../shared/ParentCard";
import { IconLock, IconMail, IconUser } from "@tabler/icons-react";

import LeftIconFormCode from "src/components/forms/form-layouts/code/LeftIconFormCode";

const FbLeftIconForm = () => {
  const [state, setState] = React.useState({
    checkedA: false,
  });

  const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
  };

  return (
    <ParentCard
      title="Form with Left Icon"
      codeModel={<LeftIconFormCode />}
      footer={
        <>
          <Stack direction="row" spacing={2}>
            <Button color="primary" variant="contained">
              Submit
            </Button>
            <Button variant="contained" color="error">
              Cancel
            </Button>
          </Stack>
        </>
      }
    >
      <form>
        <FormControl fullWidth>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="username-text"
          >
            Username
          </CustomFormLabel>
          <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconUser width={20} />
              </InputAdornment>
            }
            id="username-text"
            placeholder="Username"
            fullWidth
          />
        </FormControl>
        {/* 2 */}
        <FormControl fullWidth>
          <CustomFormLabel htmlFor="mail-text">Email</CustomFormLabel>
          <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconMail width={20} />
              </InputAdornment>
            }
            id="mail-text"
            placeholder="Email"
            fullWidth
          />
        </FormControl>
        {/* 3 */}
        <FormControl fullWidth>
          <CustomFormLabel htmlFor="pwd-text">Password</CustomFormLabel>
          <OutlinedInput
            type="password"
            startAdornment={
              <InputAdornment position="start">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="pwd-text"
            placeholder="Password"
            fullWidth
          />
        </FormControl>

        <FormControl fullWidth>
          <CustomFormLabel htmlFor="cpwd-text">
            Confirm Password
          </CustomFormLabel>
          <OutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="cpwd-text"
            placeholder="Confirm Password"
            fullWidth
          />
        </FormControl>

        <FormControlLabel
          control={
            <CustomCheckbox
              checked={state.checkedA}
              onChange={handleChange}
              name="checkedA"
            />
          }
          sx={{
            mt: "10px",
          }}
          label="Remember Me!"
        />
      </form>
    </ParentCard>
  );
};

export default FbLeftIconForm;

===== src/components/forms/form-layouts/FbOrdinaryForm.tsx =====
'use client'

import { FormControlLabel, Button } from '@mui/material';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomCheckbox from '../theme-elements/CustomCheckbox';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import ParentCard from '../../shared/ParentCard';
import React from 'react';

const FbOrdinaryForm = () => {
  const [state, setState] = React.useState({
    checkedB: false,
  });

  const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
  };

  return (
    <ParentCard title="Ordrinary Form">
      <form>
        <CustomFormLabel
          sx={{
            mt: 0,
          }}
          htmlFor="email-address"
        >
          Email
        </CustomFormLabel>
        <CustomTextField
          id="email-address"
          helperText="We'll never share your email with anyone else."
          variant="outlined"
          fullWidth
        />
        <CustomFormLabel htmlFor="ordinary-outlined-password-input">Password</CustomFormLabel>

        <CustomTextField
          id="ordinary-outlined-password-input"
          type="password"
          autoComplete="current-password"
          variant="outlined"
          fullWidth
          sx={{
            mb: '10px',
          }}
        />
        <FormControlLabel
          control={
            <CustomCheckbox
              checked={state.checkedB}
              onChange={handleChange}
              name="checkedB"
              color="primary"
            />
          }
          label="Check Me Out!"
          sx={{
            mb: 1,
          }}
        />
        <div>
          <Button color="primary" variant="contained">
            Submit
          </Button>
        </div>
      </form>
    </ParentCard>
  );
};

export default FbOrdinaryForm;

===== src/components/forms/form-layouts/FbReadonlyForm.tsx =====
'use client'

import { Button } from '@mui/material';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import ParentCard from '../../shared/ParentCard';

const FbReadonlyForm = () => {
  return (
    <ParentCard title="Readonly Form">
      <form>
        <CustomFormLabel
          sx={{
            mt: 0,
          }}
          htmlFor="ro-name"
        >
          Name
        </CustomFormLabel>
        <CustomTextField
          id="ro-name"
          variant="outlined"
          defaultValue="Wrappixel"
          fullWidth
          InputProps={{
            readOnly: true,
          }}
        />
        <CustomFormLabel htmlFor="ro-email-address">Email</CustomFormLabel>

        <CustomTextField
          id="ro-email-address"
          helperText="We'll never share your email with anyone else."
          variant="outlined"
          defaultValue="info@wrappixel.com"
          fullWidth
          InputProps={{
            readOnly: true,
          }}
        />
        <CustomFormLabel htmlFor="ro-outlined-password-input">Password</CustomFormLabel>

        <CustomTextField
          id="ro-outlined-password-input"
          type="password"
          autoComplete="current-password"
          defaultValue="info@wrappixel.com"
          variant="outlined"
          fullWidth
          InputProps={{
            readOnly: true,
          }}
          sx={{
            mb: 2,
          }}
        />
        <div>
          <Button color="primary" variant="contained">
            Submit
          </Button>
        </div>
      </form>
    </ParentCard>
  );
};

export default FbReadonlyForm;

===== src/components/forms/form-layouts/FbRightIconForm.tsx =====
'use client'

import {
  Button,
  FormControlLabel,
  FormControl,
  InputAdornment,
  OutlinedInput,
} from '@mui/material';
import CustomCheckbox from '../theme-elements/CustomCheckbox';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import ParentCard from '../../shared/ParentCard';
import { IconLock, IconUser, IconMail } from '@tabler/icons-react';
import { Stack } from '@mui/system';
import React from 'react';

const FbRightIconForm = () => {
  const [state, setState] = React.useState({
    checkedB: false,
  });

  const handleChange = (event: any) => {
    setState({ ...state, [event.target.name]: event.target.checked });
  };

  return (
    <ParentCard title="Form with Right Icon" footer={
      <>
        <Stack direction="row" spacing={1}>
          <Button
            color="primary"
            variant="contained"
          >
            Submit
          </Button>
          <Button variant="contained" color="error">
            Cancel
          </Button>
        </Stack>

      </>
    }>
      <form>
        <FormControl fullWidth>
          <CustomFormLabel
            sx={{
              mt: 0,
            }}
            htmlFor="username2-text"
          >
            Username
          </CustomFormLabel>
          <OutlinedInput
            endAdornment={
              <InputAdornment position="end">
                <IconUser width={20} />
              </InputAdornment>
            }
            id="username2-text"
            placeholder="Username"
            fullWidth
          />
        </FormControl>
        {/* 2 */}
        <FormControl fullWidth>
          <CustomFormLabel htmlFor="mail2-text">Email</CustomFormLabel>
          <OutlinedInput
            endAdornment={
              <InputAdornment position="end">
                <IconMail width={20} />
              </InputAdornment>
            }
            id="mail2-text"
            placeholder="Email"
            fullWidth
          />
        </FormControl>
        {/* 3 */}
        <FormControl fullWidth>
          <CustomFormLabel htmlFor="pwd2-text">Password</CustomFormLabel>
          <OutlinedInput
            type="password"
            endAdornment={
              <InputAdornment position="end">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="pwd2-text"
            placeholder="Password"
            fullWidth
          />
        </FormControl>

        <FormControl fullWidth>
          <CustomFormLabel htmlFor="cpwd2-text">Confirm Password</CustomFormLabel>
          <OutlinedInput
            endAdornment={
              <InputAdornment position="end">
                <IconLock width={20} />
              </InputAdornment>
            }
            id="cpwd2-text"
            placeholder="Confirm Password"
            fullWidth
          />
        </FormControl>
        <FormControlLabel
          control={
            <CustomCheckbox checked={state.checkedB} onChange={handleChange} name="checkedB" />
          }
          sx={{
            mt: '10px',
          }}
          label="Remember Me!"
        />
      </form>
    </ParentCard>
  );
};

export default FbRightIconForm;

===== src/components/forms/form-layouts/index.tsx =====
import FbOrdinaryForm from './FbOrdinaryForm';
import FbDefaultForm from './FbDefaultForm';
import FbBasicHeaderForm from './FbBasicHeaderForm';
import FbReadonlyForm from './FbReadonlyForm';
import FbDisabledForm from './FbDisabledForm';
import FbLeftIconForm from './FbLeftIconForm';
import FbRightIconForm from './FbRightIconForm';
import FbInputVariants from './FbInputVariants';

export {
  FbOrdinaryForm,
  FbDefaultForm,
  FbBasicHeaderForm,
  FbReadonlyForm,
  FbDisabledForm,
  FbLeftIconForm,
  FbRightIconForm,
  FbInputVariants,
};

===== src/components/forms/form-validation/code/CheckboxCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CheckboxCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { useFormik } from 'formik';
import * as yup from 'yup';
import { Box, Button, Stack, FormHelperText } from '@mui/material';
import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto  {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});


function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const validationSchema = yup.object({
  color: yup.array().min(1, 'At least one color is required'),
});

const formik = useFormik({
    initialValues: {
      color: [],
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.color);
    },
  });

<form onSubmit={formik.handleSubmit}>
  <Stack>
    <Box mt="-10px" mb={3}>
      <CustomCheckbox
        color="primary"
        value="primary"
        name="color"
        onChange={formik.handleChange}
      />
      <CustomCheckbox
        value="secondary"
        name="color"
        color="secondary"
        onChange={formik.handleChange}
      />
      <CustomCheckbox value="error" name="color" color="error" onChange={formik.handleChange} />
      {formik.errors.color && (
        <FormHelperText error id="standard-weight-helper-text-email-login">
          {' '}
          {formik.errors.color}{' '}
        </FormHelperText>
      )}
    </Box>
    <Stack direction="row" justifyContent="flex-end">
      <Button variant="contained" type="submit">
        Submit
      </Button>
    </Stack>
  </Stack>
</form>
`}
      </CodeDialog>
    </>
  );
};

export default CheckboxCode;

===== src/components/forms/form-validation/code/OnLeaveCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OnLeaveCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { useFormik } from 'formik';
import * as yup from 'yup';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import { Typography } from '@mui/material';

import { Box, Button, Stack } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const validationSchema = yup.object({
  emailInstant: yup.string().email('Enter a valid email').required('Email is required'),
  passwordInstant: yup
    .string()
    .min(8, 'Password should be of minimum 8 characters length')
    .required('Password is required'),
});


  const formik = useFormik({
    initialValues: {
      emailInstant: '',
      passwordInstant: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.emailInstant);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box mt="-10px">
          <CustomFormLabel>Email Address</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="emailInstant"
            name="emailInstant"
            value={formik.values.emailInstant}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.touched.emailInstant && Boolean(formik.errors.emailInstant)}
            helperText={formik.touched.emailInstant && formik.errors.emailInstant}
          />
        </Box>
        <Box mb={3}>
          <CustomFormLabel>Password</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="passwordInstant"
            name="passwordInstant"
            type="password"
            value={formik.values.passwordInstant}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.touched.passwordInstant && Boolean(formik.errors.passwordInstant)}
            helperText={formik.touched.passwordInstant && formik.errors.passwordInstant}
          />
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
      </Stack>
    </form>
  );

`}
      </CodeDialog>
    </>
  );
};

export default OnLeaveCode;

===== src/components/forms/form-validation/code/RadioCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const RadioCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { useFormik } from 'formik';
import * as yup from 'yup';

import {
  Box,
  Button,
  Stack,
  FormControlLabel,
  FormControl,
  RadioGroup,
  Radio,
  FormHelperText,
} from '@mui/material';

const validationSchema = yup.object({
  color: yup.string().required('Color selection is required'),
});

const formik = useFormik({
    initialValues: {
      color: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.color);
    },
});

<form onSubmit={formik.handleSubmit}>
  <Stack>
        <Box mt="-10px" mb={3}>
          <FormControl>
            <RadioGroup
              row
              aria-label="color"
              value={formik.values.color}
              onChange={formik.handleChange}
              name="color"
              id="color"
            >
            <FormControlLabel
              value="primary"
              control={
                <Radio
                  sx={{
                    color: 'primary.main',
                    '&.Mui-checked': { color: 'primary.main' },
                  }}
                />
              }
              label="Primary"
            />
            <FormControlLabel
              value="error"
              control={
                <Radio
                  sx={{
                    color: 'error.main',
                    '&.Mui-checked': { color: 'error.main' },
                  }}
                />
              }
              label="Error"
            />
            <FormControlLabel
              value="secondary"
              control={
                  <Radio
                    sx={{
                      color: 'secondary.main',
                      '&.Mui-checked': { color: 'secondary.main' },
                    }}
                  />
                }
                label="Secondary"
              />
            </RadioGroup>
          </FormControl>
        {formik.errors.color && (
          <FormHelperText error id="standard-weight-helper-text-email-login">
            {' '}
            {formik.errors.color}{' '}
          </FormHelperText>
        )}
      </Box>
      <Stack direction="row" justifyContent="flex-end">
        <Button variant="contained" type="submit">
          Submit
        </Button>
      </Stack>
  </Stack>
</form>
`}
      </CodeDialog>
    </>
  );
};

export default RadioCode;

===== src/components/forms/form-validation/code/SelectCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const SelectCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { useFormik } from 'formik';
import * as yup from 'yup';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { Select } from '@mui/material';

import { Box, Button, Stack, FormHelperText, MenuItem } from '@mui/material';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomSelect = styled((props: any) => <Select {...props} />)(({}) => ({}));

const validationSchema = yup.object({
  age: yup.number().required('Age selection is required.'),
});

const formik = useFormik({
    initialValues: {
      age: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.age);
    },
});

<form onSubmit={formik.handleSubmit}>
    <Stack>
        <Box mt="-10px" mb={3}>
          <CustomFormLabel>Age</CustomFormLabel>
          <CustomSelect
            labelId="age-select"
            id="age"
            fullWidth
            name="age"
            value={formik.values.age}
            onChange={formik.handleChange}
          >
            <MenuItem value="">
              <em>None</em>
            </MenuItem>
            <MenuItem value={10}>Ten</MenuItem>
            <MenuItem value={20}>Twenty</MenuItem>
            <MenuItem value={30}>Thirty</MenuItem>
          </CustomSelect>
          {formik.errors.age && (
            <FormHelperText error id="standard-weight-helper-text-email-login">
              {' '}
              {formik.errors.age}{' '}
            </FormHelperText>
          )}
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
    </Stack>
</form>
`}
      </CodeDialog>
    </>
  );
};

export default SelectCode;

===== src/components/forms/form-validation/FVCheckbox.tsx =====
'use client'

import { useFormik } from 'formik';
import * as yup from 'yup';
import { Box, Button, Stack, FormHelperText } from '@mui/material';
import CustomCheckbox from '../theme-elements/CustomCheckbox';

const validationSchema = yup.object({
  color: yup.array().min(1, 'At least one color is required'),
});

const FVCheckbox = () => {
  const formik = useFormik({
    initialValues: {
      color: [],
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.color);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box mt="-10px" mb={3}>
          <CustomCheckbox
            color="primary"
            value="primary"
            name="color"
            onChange={formik.handleChange}
          />
          <CustomCheckbox
            value="secondary"
            name="color"
            color="secondary"
            onChange={formik.handleChange}
          />
          <CustomCheckbox value="error" name="color" color="error" onChange={formik.handleChange} />
          {formik.errors.color && (
            <FormHelperText error id="standard-weight-helper-text-email-login">
              {' '}
              {formik.errors.color}{' '}
            </FormHelperText>
          )}
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
      </Stack>
    </form>
  );
};

export default FVCheckbox;
===== src/components/forms/form-validation/FVLogin.tsx =====
'use client'

import { useFormik } from 'formik';
import * as yup from 'yup';
import { Link } from 'react-router';

import { Box, Button, Stack, FormGroup, FormControlLabel, Typography } from '@mui/material';

import CustomTextField from '../theme-elements/CustomTextField';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomCheckbox from '../theme-elements/CustomCheckbox';

const validationSchema = yup.object({
  firstName: yup
    .string()
    .min(2, 'Too Short!')
    .max(50, 'Too Long!')
    .required('Firstname is Required'),
  lastName: yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Lastname is Required'),
  email: yup.string().email('Enter a valid email').required('Email is required'),
  password: yup
    .string()
    .min(8, 'Password should be of minimum 8 characters length')
    .required('Password is required'),
  changepassword: yup.string().when('password', {
    is: (val: string) => (val && val.length > 0 ? true : false),
    then: yup.string().oneOf([yup.ref('password')], 'Both password need to be the same'),
  }),
});

const FVRegister = () => {
  const formik = useFormik({
    initialValues: {
      firstName: '',
      email: '',
      password: '',
      changepassword: '',
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      alert(JSON.stringify(values, null, 2));
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box>
          <CustomFormLabel>Email Address</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="email"
            name="email"
            value={formik.values.email}
            onChange={formik.handleChange}
            error={formik.touched.email && Boolean(formik.errors.email)}
            helperText={formik.touched.email && formik.errors.email}
          />
        </Box>
        <Box mb={3}>
          <CustomFormLabel>Password</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="password"
            name="password"
            type="password"
            value={formik.values.password}
            onChange={formik.handleChange}
            error={formik.touched.password && Boolean(formik.errors.password)}
            helperText={formik.touched.password && formik.errors.password}
          />
        </Box>
      </Stack>
      <Stack justifyContent="space-between" direction="row" alignItems="center" mb={2}>
        <FormGroup>
          <FormControlLabel
            control={<CustomCheckbox defaultChecked />}
            label="Remeber this Device"
          />
        </FormGroup>
        <Typography
          component={Link}
          to="/auth/auth1/forgot-password"
          fontWeight={600}
          sx={{
            textDecoration: 'none',
            color: 'primary.main',
          }}
        >
          Forgot Password ?
        </Typography>
      </Stack>
      <Button color="primary" variant="contained" type="submit">
        Sign In
      </Button>
    </form>
  );
};

export default FVRegister;

===== src/components/forms/form-validation/FVOnLeave.tsx =====
'use client'

import { useFormik } from 'formik';
import * as yup from 'yup';

import { Box, Button, Stack } from '@mui/material';

import CustomTextField from '../theme-elements/CustomTextField';
import CustomFormLabel from '../theme-elements/CustomFormLabel';

const validationSchema = yup.object({
  emailInstant: yup.string().email('Enter a valid email').required('Email is required'),
  passwordInstant: yup
    .string()
    .min(8, 'Password should be of minimum 8 characters length')
    .required('Password is required'),
});

const FVOnLeave = () => {
  const formik = useFormik({
    initialValues: {
      emailInstant: '',
      passwordInstant: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.emailInstant);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box mt="-10px">
          <CustomFormLabel>Email Address</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="emailInstant"
            name="emailInstant"
            value={formik.values.emailInstant}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.touched.emailInstant && Boolean(formik.errors.emailInstant)}
            helperText={formik.touched.emailInstant && formik.errors.emailInstant}
          />
        </Box>
        <Box mb={3}>
          <CustomFormLabel>Password</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="passwordInstant"
            name="passwordInstant"
            type="password"
            value={formik.values.passwordInstant}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.touched.passwordInstant && Boolean(formik.errors.passwordInstant)}
            helperText={formik.touched.passwordInstant && formik.errors.passwordInstant}
          />
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
      </Stack>
    </form>
  );
};

export default FVOnLeave;

===== src/components/forms/form-validation/FVRadio.tsx =====
'use client'

import { useFormik } from 'formik';
import * as yup from 'yup';

import {
  Box,
  Button,
  Stack,
  FormControlLabel,
  FormControl,
  RadioGroup,
  Radio,
  FormHelperText,
} from '@mui/material';

const validationSchema = yup.object({
  color: yup.string().required('Color selection is required'),
});

const FVRadio = () => {
  const formik = useFormik({
    initialValues: {
      color: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.color);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box mt="-10px" mb={3}>
          <FormControl>
            <RadioGroup
              row
              aria-label="color"
              value={formik.values.color}
              onChange={formik.handleChange}
              name="color"
              id="color"
            >
              <FormControlLabel
                value="primary"
                control={
                  <Radio
                    sx={{
                      color: 'primary.main',
                      '&.Mui-checked': { color: 'primary.main' },
                    }}
                  />
                }
                label="Primary"
              />
              <FormControlLabel
                value="error"
                control={
                  <Radio
                    sx={{
                      color: 'error.main',
                      '&.Mui-checked': { color: 'error.main' },
                    }}
                  />
                }
                label="Error"
              />
              <FormControlLabel
                value="secondary"
                control={
                  <Radio
                    sx={{
                      color: 'secondary.main',
                      '&.Mui-checked': { color: 'secondary.main' },
                    }}
                  />
                }
                label="Secondary"
              />
            </RadioGroup>
          </FormControl>
          {formik.errors.color && (
            <FormHelperText error id="standard-weight-helper-text-email-login">
              {' '}
              {formik.errors.color}{' '}
            </FormHelperText>
          )}
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
      </Stack>
    </form>
  );
};

export default FVRadio;

===== src/components/forms/form-validation/FVRegister.tsx =====
'use client'
import { useFormik } from 'formik';
import * as yup from 'yup';
import { Link } from 'react-router';

import { Box, Button, Stack, FormGroup, FormControlLabel, Typography } from '@mui/material';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomCheckbox from '../theme-elements/CustomCheckbox';

const validationSchema = yup.object({
  firstName: yup
    .string()
    .min(2, 'Too Short!')
    .max(50, 'Too Long!')
    .required('Firstname is Required'),
  lastName: yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Lastname is Required'),
  email: yup.string().email('Enter a valid email').required('Email is required'),
  password: yup
    .string()
    .min(8, 'Password should be of minimum 8 characters length')
    .required('Password is required'),
  changepassword: yup.string().when('password', {
    is: (val: any) => (val && val.length > 0 ? true : false),
    then: yup.string().oneOf([yup.ref('password')], 'Both password need to be the same'),
  }),
});

const FVRegister = () => {
  const formik = useFormik({
    initialValues: {
      firstName: '',
      email: '',
      password: '',
      changepassword: '',
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      alert(JSON.stringify(values, null, 2));
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box>
          <CustomFormLabel>Name</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="firstName"
            name="firstName"
            value={formik.values.firstName}
            onChange={formik.handleChange}
            error={formik.touched.firstName && Boolean(formik.errors.firstName)}
            helperText={formik.touched.firstName && formik.errors.firstName}
          />
        </Box>
        <Box>
          <CustomFormLabel>Email</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="email"
            name="email"
            value={formik.values.email}
            onChange={formik.handleChange}
            error={formik.touched.email && Boolean(formik.errors.email)}
            helperText={formik.touched.email && formik.errors.email}
          />
        </Box>
        <Box>
          <CustomFormLabel>Password</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="password"
            name="password"
            type="password"
            value={formik.values.password}
            onChange={formik.handleChange}
            error={formik.touched.password && Boolean(formik.errors.password)}
            helperText={formik.touched.password && formik.errors.password}
          />
        </Box>
        <Box mb={3}>
          <CustomFormLabel>Confirm Password</CustomFormLabel>
          <CustomTextField
            fullWidth
            id="changepassword"
            name="changepassword"
            type="password"
            value={formik.values.changepassword}
            onChange={formik.handleChange}
            error={formik.touched.changepassword && Boolean(formik.errors.changepassword)}
            helperText={formik.touched.changepassword && formik.errors.changepassword}
          />
        </Box>
      </Stack>
      <Stack justifyContent="space-between" direction="row" alignItems="center" mb={2}>
        <FormGroup>
          <FormControlLabel
            control={<CustomCheckbox defaultChecked />}
            label="Remeber this Device"
          />
        </FormGroup>
        <Typography
          component={Link}
          to="/auth/forgot-password"
          fontWeight={600}
          sx={{
            textDecoration: 'none',
            color: 'primary.main',
          }}
        >
          Forgot Password ?
        </Typography>
      </Stack>
      <Button color="primary" variant="contained" type="submit">
        Sign Up
      </Button>
    </form>
  );
};

export default FVRegister;

===== src/components/forms/form-validation/FVSelect.tsx =====
'use client'
import { useFormik } from 'formik';
import * as yup from 'yup';

import { Box, Button, Stack, FormHelperText, MenuItem } from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomSelect from '../theme-elements/CustomSelect';

const validationSchema = yup.object({
  age: yup.number().required('Age selection is required.'),
});

const FVSelect = () => {
  const formik = useFormik({
    initialValues: {
      age: '',
    },
    validationSchema,
    onSubmit: (values) => {
      alert(values.age);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <Stack>
        <Box mt="-10px" mb={3}>
          <CustomFormLabel>Age</CustomFormLabel>
          <CustomSelect
            labelId="age-select"
            id="age"
            fullWidth
            name="age"
            value={formik.values.age}
            onChange={formik.handleChange}
          >
            <MenuItem value="">
              <em>None</em>
            </MenuItem>
            <MenuItem value={10}>Ten</MenuItem>
            <MenuItem value={20}>Twenty</MenuItem>
            <MenuItem value={30}>Thirty</MenuItem>
          </CustomSelect>
          {formik.errors.age && (
            <FormHelperText error id="standard-weight-helper-text-email-login">
              {' '}
              {formik.errors.age}{' '}
            </FormHelperText>
          )}
        </Box>
        <Stack direction="row" justifyContent="flex-end">
          <Button variant="contained" type="submit">
            Submit
          </Button>
        </Stack>
      </Stack>
    </form>
  );
};

export default FVSelect;

===== src/components/forms/form-vertical/BasicIcons.tsx =====
'use client'
import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { IconBuildingArch, IconMail, IconMessage2, IconPhone, IconUser } from '@tabler/icons-react';

const BasicIcons = () => {
  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container>
        {/* 1 */}
        <Grid size={12}>
          <CustomFormLabel htmlFor="bi-name" sx={{ mt: 0 }}>
            Name
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconUser size="20" />
              </InputAdornment>
            }
            id="bi-name"
            placeholder="John Deo"
            fullWidth
          />
        </Grid>
        {/* 2 */}
        <Grid size={12}>
          <CustomFormLabel htmlFor="bi-company">
            Company
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconBuildingArch size="20" />
              </InputAdornment>
            }
            id="bi-company"
            placeholder="ACME Inc."
            fullWidth
          />
        </Grid>
        {/* 3 */}
        <Grid size={12}>
          <CustomFormLabel htmlFor="bi-email">
            Email
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconMail size="20" />
              </InputAdornment>
            }
            id="bi-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 4 */}
        <Grid size={12}>
          <CustomFormLabel htmlFor="bi-phone">
            Phone No
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            startAdornment={
              <InputAdornment position="start">
                <IconPhone size="20" />
              </InputAdornment>
            }
            id="bi-phone"
            placeholder="412 2150 451"
            fullWidth
          />
        </Grid>
        {/* 5 */}
        <Grid size={12}>
          <CustomFormLabel htmlFor="bi-message">
            Message
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            id="bi-message"
            startAdornment={
              <InputAdornment position="start">
                <IconMessage2 size="20" />
              </InputAdornment>
            }
            placeholder="Hi, Do you  have a moment to talk Jeo ?"
            multiline
            fullWidth
          />
        </Grid>
        <Grid mt={3} size={12}>
          <Button variant="contained" color="primary">
            Send
          </Button>
        </Grid>
      </Grid>
    </div>)
  );
};

export default BasicIcons;

===== src/components/forms/form-vertical/BasicLayout.tsx =====
'use client'
import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';

const BasicLayout = () => {
  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container>
        {/* 1 */}
        <Grid display="flex" alignItems="center" size={12}>
          <CustomFormLabel htmlFor="bl-name" sx={{ mt: 0 }}>
            Name
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomTextField id="bl-name" placeholder="John Deo" fullWidth />
        </Grid>
        {/* 2 */}
        <Grid display="flex" alignItems="center" size={12}>
          <CustomFormLabel htmlFor="bl-company">
            Company
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomTextField id="bl-company" placeholder="ACME Inc." fullWidth />
        </Grid>
        {/* 3 */}
        <Grid display="flex" alignItems="center" size={12}>
          <CustomFormLabel htmlFor="bl-email">
            Email
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomOutlinedInput
            endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
            id="bl-email"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        {/* 4 */}
        <Grid display="flex" alignItems="center" size={12}>
          <CustomFormLabel htmlFor="bl-phone">
            Phone No
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomTextField id="bl-phone" placeholder="412 2150 451" fullWidth />
        </Grid>
        {/* 5 */}
        <Grid display="flex" alignItems="center" size={12}>
          <CustomFormLabel htmlFor="bl-message">
            Message
          </CustomFormLabel>
        </Grid>
        <Grid size={12}>
          <CustomTextField
            id="bl-message"
            placeholder="Hi, Do you  have a moment to talk Jeo ?"
            multiline
            fullWidth
          />
        </Grid>
        <Grid mt={3} size={12}>
          <Button variant="contained" color="primary">Send</Button>
        </Grid>
      </Grid>
    </div>)
  );
};

export default BasicLayout;

===== src/components/forms/form-vertical/code/BasicIconsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicIconsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { OutlinedInput } from '@mui/material';
import { IconBuildingArch, IconMail, IconMessage2, IconPhone, IconUser } from '@tabler/icons-react';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

<div>
  <Grid container>
    {/* 1 */}
    <Grid size={12}>
      <CustomFormLabel htmlFor="bi-name" sx={{ mt: 0 }}>
        Name
      </CustomFormLabel>
    </Grid>
    <Grid size={12}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconUser size="20" />
          </InputAdornment>
        }
        id="bi-name"
        placeholder="John Deo"
        fullWidth
      />
    </Grid>
    {/* 2 */}
    <Grid size={12}>
      <CustomFormLabel htmlFor="bi-company">
        Company
      </CustomFormLabel>
    </Grid>
    <Grid size={12}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconBuildingArch size="20" />
          </InputAdornment>
        }
        id="bi-company"
        placeholder="ACME Inc."
        fullWidth
      />
    </Grid>
    {/* 3 */}
    <Grid size={12}>
      <CustomFormLabel htmlFor="bi-email">
        Email
      </CustomFormLabel>
    </Grid>
    <Grid size={12}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconMail size="20" />
          </InputAdornment>
        }
        id="bi-email"
        placeholder="john.deo"
        fullWidth
      />
    </Grid>
    {/* 4 */}
    <Grid size={12}>
      <CustomFormLabel htmlFor="bi-phone">
        Phone No
      </CustomFormLabel>
    </Grid>
    <Grid size={12}>
      <CustomOutlinedInput
        startAdornment={
          <InputAdornment position="start">
            <IconPhone size="20" />
          </InputAdornment>
        }
        id="bi-phone"
        placeholder="412 2150 451"
        fullWidth
      />
    </Grid>
    {/* 5 */}
    <Grid size={12}>
      <CustomFormLabel htmlFor="bi-message">
        Message
      </CustomFormLabel>
    </Grid>
    <Grid size={12}>
      <CustomOutlinedInput
        id="bi-message"
        startAdornment={
          <InputAdornment position="start">
            <IconMessage2 size="20" />
          </InputAdornment>
        }
        placeholder="Hi, Do you  have a moment to talk Jeo ?"
        multiline
        fullWidth
      />
    </Grid>
    <Grid mt={3} size={12}>
      <Button variant="contained" color="primary">
        Send
      </Button>
    </Grid>
  </Grid>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default BasicIconsCode;

===== src/components/forms/form-vertical/code/BasicLayoutCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicLayoutCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";

import { Grid2 as Grid, InputAdornment, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { TextField } from '@mui/material';
import { OutlinedInput } from '@mui/material';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

<div>
  <Grid container>
      {/* 1 */}
      <Grid display="flex" alignItems="center" size={12}>
        <CustomFormLabel htmlFor="bl-name" sx={{ mt: 0 }}>
          Name
        </CustomFormLabel>
      </Grid>
      <Grid size={12}>
        <CustomTextField id="bl-name" placeholder="John Deo" fullWidth />
      </Grid>
      {/* 2 */}
      <Grid display="flex" alignItems="center" size={12}>
        <CustomFormLabel htmlFor="bl-company">
          Company
        </CustomFormLabel>
      </Grid>
      <Grid size={12}>
        <CustomTextField id="bl-company" placeholder="ACME Inc." fullWidth />
      </Grid>
      {/* 3 */}
      <Grid display="flex" alignItems="center" size={12}>
        <CustomFormLabel htmlFor="bl-email">
          Email
        </CustomFormLabel>
      </Grid>
      <Grid size={12}>
        <CustomOutlinedInput
          endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
          id="bl-email"
          placeholder="john.deo"
          fullWidth
        />
      </Grid>
      {/* 4 */}
      <Grid display="flex" alignItems="center" size={12}>
        <CustomFormLabel htmlFor="bl-phone">
          Phone No
        </CustomFormLabel>
      </Grid>
      <Grid size={12}>
        <CustomTextField id="bl-phone" placeholder="412 2150 451" fullWidth />
      </Grid>
      {/* 5 */}
      <Grid display="flex" alignItems="center" size={12}>
        <CustomFormLabel htmlFor="bl-message">
          Message
        </CustomFormLabel>
      </Grid>
      <Grid size={12}>
        <CustomTextField
          id="bl-message"
          placeholder="Hi, Do you  have a moment to talk Jeo ?"
          multiline
          fullWidth
        />
      </Grid>
      <Grid mt={3} size={12}>
        <Button variant="contained" color="primary">Send</Button>
      </Grid>
    </Grid>
</div>
`}
      </CodeDialog>
    </>
  );
};

export default BasicLayoutCode;

===== src/components/forms/form-vertical/CollapsibleForm.tsx =====
'use client'

import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Grid2 as Grid,
  FormControlLabel,
  RadioGroup,
  FormControl,
  InputAdornment,
  Stack,
  Button,
  MenuItem,
} from '@mui/material';
import { IconChevronDown, IconHelp } from '@tabler/icons-react';

// components
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomRadio from '../theme-elements/CustomRadio';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { Box } from '@mui/system';
import CustomSelect from '../theme-elements/CustomSelect';
import React from 'react';

const states = [
  {
    value: '1',
    label: 'Alaska',
  },
  {
    value: '2',
    label: 'Arizona',
  },
  {
    value: '3',
    label: 'Hawaii',
  },
];

const CollapsibleForm = () => {
  // address type
  const [value, setValue] = React.useState('');

  const handleChange = (event: any) => {
    setValue(event.target.value);
  };

  //   delivery options
  const [value2, setValue2] = React.useState('');

  const handleChange2 = (event: any) => {
    setValue2(event.target.value);
  };

  //   payment
  const [value3, setValue3] = React.useState('radio1');

  const handleChange3 = (event: any) => {
    setValue3(event.target.value);
  };

  // states
  const [state, setStates] = React.useState('');

  const handleChange4 = (event: any) => {
    setStates(event.target.value);
  };

  // default open slide
  const [expanded, setExpanded] = React.useState<string | false>('panel1');

  const handleChange5 =
    (panel: string) => (_event: React.SyntheticEvent, newExpanded: boolean) => {
      setExpanded(newExpanded ? panel : false);
    };

  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel1'} onChange={handleChange5('panel1')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel1a-content"
          id="panel1a-header"
        >
          <Typography variant="h6">Delivery Address</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={3}>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-fname" sx={{ mt: 0 }}>
                Full Name
              </CustomFormLabel>
              <CustomTextField id="cs-fname" placeholder="John Deo" fullWidth />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-phone" sx={{ mt: 0 }}>
                Phone no
              </CustomFormLabel>
              <CustomTextField id="cs-phone" placeholder="1340 2154 123" fullWidth />
            </Grid>
            <Grid size={12}>
              <CustomFormLabel htmlFor="cs-address" sx={{ mt: 0 }}>
                Address
              </CustomFormLabel>
              <CustomTextField multiline id="cs-address" placeholder="150, Ring Road" fullWidth />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-pin" sx={{ mt: 0 }}>
                Pincode
              </CustomFormLabel>
              <CustomTextField id="cs-pin" placeholder="120125" fullWidth />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-landmark" sx={{ mt: 0 }}>
                Landmark
              </CustomFormLabel>
              <CustomTextField id="cs-landmark" placeholder="Nr. Wall Street" fullWidth />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-city" sx={{ mt: 0 }}>
                City
              </CustomFormLabel>
              <CustomTextField id="cs-city" placeholder="Jackson" fullWidth />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <CustomFormLabel htmlFor="cs-state" sx={{ mt: 0 }}>
                State
              </CustomFormLabel>
              <CustomSelect value={state} onChange={handleChange4} fullWidth variant="outlined">
                {states.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </CustomSelect>
            </Grid>
            <Grid size={12}>
              <CustomFormLabel htmlFor="cs-addr" sx={{ mt: 0 }}>
                Address Type
              </CustomFormLabel>
              <FormControl component="fieldset">
                <RadioGroup row name="cs-addr" value={value} onChange={handleChange}>
                  <FormControlLabel
                    value="radio1"
                    control={<CustomRadio />}
                    label="Home (All day delivery)"
                  />
                  <FormControlLabel
                    value="radio2"
                    control={<CustomRadio />}
                    label="
                        Office (Delivery between 10 AM - 5 PM)"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel2'} onChange={handleChange5('panel2')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel2a-content"
          id="panel2a-header"
        >
          <Typography variant="h6">Delivery Options</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <RadioGroup row name="delivery-opt" value={value2} onChange={handleChange2}>
            <FormControlLabel value="radio1" control={<CustomRadio />} label="Standard 3-5 Days" />
            <FormControlLabel value="radio2" control={<CustomRadio />} label="Express" />
            <FormControlLabel value="radio3" control={<CustomRadio />} label="Overnight" />
          </RadioGroup>
        </AccordionDetails>
      </Accordion>
      <Accordion elevation={9} sx={{ mb: 2 }} expanded={expanded === 'panel3'} onChange={handleChange5('panel3')}>
        <AccordionSummary
          expandIcon={<IconChevronDown size="20" />}
          aria-controls="panel3a-content"
          id="panel3a-header"
        >
          <Typography variant="h6">Payment Method</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={3}>
            <Grid
              size={{
                xs: 12,
                sm: 8
              }}>
              <RadioGroup row name="payment-method" value={value3} onChange={handleChange3}>
                <FormControlLabel
                  value="radio1"
                  control={<CustomRadio />}
                  label="Credit/Debit/ATM Card"
                />
                <FormControlLabel
                  value="radio2"
                  control={<CustomRadio />}
                  label="Cash on Delivery"
                />
              </RadioGroup>
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 8
              }}>
              <Box>
                <Grid container spacing={3}>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="cs-co" sx={{ mt: 0 }}>
                      Card Number
                    </CustomFormLabel>
                    <CustomTextField id="cs-co" placeholder="1250 4521 5630 1540" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 6
                    }}>
                    <CustomFormLabel htmlFor="cs-name" sx={{ mt: 0 }}>
                      Name
                    </CustomFormLabel>
                    <CustomTextField id="cs-name" placeholder="John Deo" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="cs-exdate" sx={{ mt: 0 }}>
                      Exp. Date
                    </CustomFormLabel>
                    <CustomTextField id="cs-exdate" placeholder="MM/YY" fullWidth />
                  </Grid>
                  <Grid
                    size={{
                      xs: 12,
                      sm: 3
                    }}>
                    <CustomFormLabel htmlFor="cs-code" sx={{ mt: 0 }}>
                      CCV Code
                    </CustomFormLabel>
                    <CustomOutlinedInput
                      id="cs-code"
                      placeholder="456"
                      fullWidth
                      endAdornment={
                        <InputAdornment position="end">
                          <IconHelp width="20" />
                        </InputAdornment>
                      }
                    />
                  </Grid>
                  <Grid size={12}>
                    <Stack direction="row" spacing={2}>
                      <Button variant="contained" color="primary">
                        Submit
                      </Button>
                      <Button variant="text" color="error">
                        Cancel
                      </Button>
                    </Stack>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
    </div>)
  );
};

export default CollapsibleForm;

===== src/components/forms/form-vertical/FormSeparator.tsx =====
'use client'
import {
  Grid2 as Grid,
  InputAdornment,
  Button,
  Typography,
  Divider,
  MenuItem,
  IconButton,
} from '@mui/material';

import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import CustomSelect from '../theme-elements/CustomSelect';
import { Stack } from '@mui/system';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import React from 'react';

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const lang = [
  {
    value: 'en',
    label: 'English',
  },
  {
    value: 'fr',
    label: 'French',
  },
];

const FormSeparator = () => {
  // country
  const [country, setCountry] = React.useState('');

  const handleChange = (event: any) => {
    setCountry(event.target.value);
  };

  // language
  const [language, setLanguage] = React.useState('');

  const handleChange2 = (event: any) => {
    setLanguage(event.target.value);
  };

  //   password
  //
  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  //  confirm  password
  //
  const [showPassword2, setShowPassword2] = React.useState(false);

  const handleClickShowPassword2 = () => setShowPassword2((show) => !show);

  const handleMouseDownPassword2 = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  return (
    (<div>
      <Typography variant="h6" mb={3}>
        Account Details
      </Typography>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel htmlFor="fs-uname" sx={{ mt: 0 }}>
            Username
          </CustomFormLabel>
          <CustomTextField id="fs-uname" placeholder="John Deo" fullWidth />

          <CustomFormLabel htmlFor="fs-pwd">Password</CustomFormLabel>
          <CustomOutlinedInput
            type={showPassword ? 'text' : 'password'}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword}
                  onMouseDown={handleMouseDownPassword}
                  edge="end"
                >
                  {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                </IconButton>
              </InputAdornment>
            }
            id="fs-pwd"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel htmlFor="fs-email" sx={{ mt: { sm: 0 } }}>
            Email
          </CustomFormLabel>
          <CustomOutlinedInput
            endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
            id="fs-email"
            placeholder="john.deo"
            fullWidth
          />
          <CustomFormLabel htmlFor="fs-pwd">Confirm Password</CustomFormLabel>
          <CustomOutlinedInput
            type={showPassword2 ? 'text' : 'password'}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword2}
                  onMouseDown={handleMouseDownPassword2}
                  edge="end"
                >
                  {showPassword2 ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                </IconButton>
              </InputAdornment>
            }
            id="fs-pwd"
            placeholder="john.deo"
            fullWidth
          />
        </Grid>

        <Grid size={12}>
          <Divider sx={{ mx: '-24px' }} />
          <Typography variant="h6" mt={2}>
            Personal Info
          </Typography>
        </Grid>

        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel htmlFor="fs-fname" sx={{ mt: 0 }}>
            First Name
          </CustomFormLabel>
          <CustomTextField id="fs-fname" placeholder="John" fullWidth />
          <CustomFormLabel htmlFor="fs-country">Country</CustomFormLabel>
          <CustomSelect
            id="standard-select-currency"
            value={country}
            onChange={handleChange}
            fullWidth
            variant="outlined"
          >
            {countries.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </CustomSelect>
          <CustomFormLabel htmlFor="fs-date">Birth Date</CustomFormLabel>
          <CustomTextField type="date" id="fs-date" placeholder="John Deo" fullWidth />
        </Grid>

        <Grid
          size={{
            xs: 12,
            sm: 6
          }}>
          <CustomFormLabel htmlFor="fs-lname" sx={{ mt: { sm: 0 } }}>
            Last Name
          </CustomFormLabel>
          <CustomTextField id="fs-lname" placeholder="Deo" fullWidth />
          <CustomFormLabel htmlFor="fs-language">Language</CustomFormLabel>
          <CustomSelect value={language} onChange={handleChange2} fullWidth variant="outlined">
            {lang.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </CustomSelect>

          <CustomFormLabel htmlFor="fs-phone">Phone no</CustomFormLabel>
          <CustomTextField id="fs-phone" placeholder="123 4567 201" fullWidth />
        </Grid>

        <Grid size={12}>
          <Stack direction="row" spacing={2}>
            <Button variant="contained" color="primary">
              Submit
            </Button>
            <Button variant="text" color="error">
              Cancel
            </Button>
          </Stack>
        </Grid>
      </Grid>
    </div>)
  );
};

export default FormSeparator;

===== src/components/forms/form-vertical/FormTabs.tsx =====
'use client'

import { Box, Button, Grid2 as Grid, IconButton, InputAdornment, MenuItem, Stack, Tab } from '@mui/material';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

// components
import BlankCard from '../../shared/BlankCard';
import CustomFormLabel from '../theme-elements/CustomFormLabel';
import CustomSelect from '../theme-elements/CustomSelect';
import CustomTextField from '../theme-elements/CustomTextField';
import CustomOutlinedInput from '../theme-elements/CustomOutlinedInput';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import React from 'react';

const countries = [
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'srilanka',
    label: 'Srilanka',
  },
];

const lang = [
  {
    value: 'en',
    label: 'English',
  },
  {
    value: 'fr',
    label: 'French',
  },
];

const FormTabs = () => {
  const [value, setValue] = React.useState('1');

  const handleChange = (_event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  //   country
  const [country, setCountry] = React.useState('');

  const handleChange2 = (event: any) => {
    setCountry(event.target.value);
  };

  //   language
  const [language, setLanguage] = React.useState('en');

  const handleChange3 = (event: any) => {
    setLanguage(event.target.value);
  };

  //   password
  //
  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  //   confirm password
  //
  const [showPassword2, setShowPassword2] = React.useState(false);

  const handleClickShowPassword2 = () => setShowPassword2((show) => !show);

  const handleMouseDownPassword2 = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  return (
    (<div>
      {/* ------------------------------------------------------------------------------------------------ */}
      {/* Basic Layout */}
      {/* ------------------------------------------------------------------------------------------------ */}
      <BlankCard>
        <TabContext value={value}>
          <Box sx={{ borderBottom: 1, borderColor: (theme: any) => theme.palette.divider }}>
            <TabList onChange={handleChange} aria-label="lab API tabs example">
              <Tab label="Personal Info" value="1" />
              <Tab label="Account Details" value="2" />
              <Tab label="Social Links" value="3" />
            </TabList>
          </Box>
          <TabPanel value="1">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-fname" sx={{ mt: 0 }}>
                      First Name
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-fname" placeholder="John" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-country">Country</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomSelect
                      id="standard-select-currency"
                      value={country}
                      onChange={handleChange2}
                      fullWidth
                      variant="outlined"
                    >
                      {countries.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </CustomSelect>
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-date">Birth Date</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField type="date" id="ft-date" placeholder="John Deo" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              {/* 2 column */}
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-fname" sx={{ mt: { sm: 0 } }}>
                      Last Name
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-fname" placeholder="Deo" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-lang">Language</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomSelect
                      value={language}
                      onChange={handleChange3}
                      fullWidth
                      variant="outlined"
                    >
                      {lang.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </CustomSelect>
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-phone">Phone no</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-phone" placeholder="123 4567 201" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              <Grid size={12}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
          <TabPanel value="2">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-uname" sx={{ mt: 0 }}>
                      Username
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-uname" placeholder="John.Deo" fullWidth />
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-pwd">Password</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomOutlinedInput
                      type={showPassword ? 'text' : 'password'}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={handleClickShowPassword}
                            onMouseDown={handleMouseDownPassword}
                            edge="end"
                          >
                            {showPassword ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                          </IconButton>
                        </InputAdornment>
                      }
                      id="fs-pwd"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              {/* 2 column */}
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-email" sx={{ mt: { sm: 0 } }}>
                      Email
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomOutlinedInput
                      endAdornment={<InputAdornment position="end">@example.com</InputAdornment>}
                      id="fs-email"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                  {/* 4 */}
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-lang">Confirm</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomOutlinedInput
                      type={showPassword2 ? 'text' : 'password'}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={handleClickShowPassword2}
                            onMouseDown={handleMouseDownPassword2}
                            edge="end"
                          >
                            {showPassword2 ? <IconEyeOff size="20" /> : <IconEye size="20" />}
                          </IconButton>
                        </InputAdornment>
                      }
                      id="fs-pwd"
                      placeholder="john.deo"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              <Grid size={12}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
          <TabPanel value="3">
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-twitter" sx={{ mt: 0 }}>
                      Twitter
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField
                      id="ft-twitter"
                      placeholder="https://twitter.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-google">Google</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField
                      id="ft-google"
                      placeholder="https://plus.google.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-insta">Instagram</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField
                      id="ft-insta"
                      placeholder="https://instagram.com/abc"
                      fullWidth
                    />
                  </Grid>
                </Grid>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  lg: 6
                }}>
                <Grid container>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-fb" sx={{ mt: { sm: 0 } }}>
                      Facebook
                    </CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-fb" placeholder="https://facebook.com/abc" fullWidth />
                  </Grid>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-linkedin">Linkedin</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField
                      id="ft-linkedin"
                      placeholder="https://linkedin.com/abc"
                      fullWidth
                    />
                  </Grid>
                  <Grid size={12}>
                    <CustomFormLabel htmlFor="ft-quora">Quora</CustomFormLabel>
                  </Grid>
                  <Grid size={12}>
                    <CustomTextField id="ft-quora" placeholder="https://quora.com/abc" fullWidth />
                  </Grid>
                </Grid>
              </Grid>
              <Grid size={12}>
                <Stack direction="row" spacing={2}>
                  <Button variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button variant="text" color="error">
                    Cancel
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </TabPanel>
        </TabContext>
      </BlankCard>
    </div>)
  );
};

export default FormTabs;

===== src/components/forms/form-wizard/code/FormWizardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';

const FormWizardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
"use client";
import React from "react";
import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  FormControlLabel
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';
import { Typography } from '@mui/material';
import { Stack } from '@mui/system';

const steps = ['Account', 'Profile', 'Finish'];

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? '0 0 0 1px {theme.palette.grey[200]}'
      : 'inset 0 0 0 1px {theme.palette.grey[300]}',
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? '0px auto {theme.palette.grey[200]}'
        : '0px auto {theme.palette.grey[300]}',
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

function CustomCheckbox(props: CheckboxProps) {
  return (
    <Checkbox
      disableRipple
      color={props.color ? props.color : 'default'}
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? '{props.color}.main' : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

const [activeStep, setActiveStep] = React.useState(0);
  const [skipped, setSkipped] = React.useState(new Set());

  const isStepOptional = (step:any) => step === 1;

  const isStepSkipped = (step:any) => skipped.has(step);

  const handleNext = () => {
    let newSkipped = skipped;
    if (isStepSkipped(activeStep)) {
      newSkipped = new Set(newSkipped.values());
      newSkipped.delete(activeStep);
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped(newSkipped);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this,
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.");
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values());
      newSkipped.add(activeStep);

      return newSkipped;
    });
  };

  // eslint-disable-next-line consistent-return
  const handleSteps = (step: any) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <CustomFormLabel htmlFor="Name">Name</CustomFormLabel>
            <CustomTextField id="Name" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Email">Email</CustomFormLabel>
            <CustomTextField id="Email" type="email" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Password">Password</CustomFormLabel>
            <CustomTextField id="Password" type="password" variant="outlined" fullWidth />
          </Box>
        );
      case 1:
        return (
          <Box>
            <CustomFormLabel htmlFor="Fname">First Name</CustomFormLabel>
            <CustomTextField id="Fname" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Lname">Last Name</CustomFormLabel>
            <CustomTextField id="Lname" type="text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Address">Address</CustomFormLabel>
            <CustomTextField id="Address" multiline rows={4} variant="outlined" fullWidth />
          </Box>
        );
      case 2:
        return (
          <Box pt={3}>
            <Typography variant="h5">Terms and condition</Typography>
            <Typography variant="body2" sx={{ mt: 1 }}>
              Sard about this site or you have been to it, but you cannot figure out what it is or
              what it can do. MTA web directory isSard about this site or you have been to it, but
              you cannot figure out what it is or what it can do. MTA web directory is
            </Typography>
            <FormControlLabel
              control={<CustomCheckbox defaultChecked />}
              label="Agree with terms?"
            />
          </Box>
        );
      default:
        break;
    }
  };

  const handleReset = () => {
    setActiveStep(0);
  };

<Box width="100%">
    <Stepper activeStep={activeStep}>
        {steps.map((label, index) => {
            const stepProps: { completed?: boolean } = {};
            const labelProps: {
                optional?: React.ReactNode;
            } = {};
            if (isStepOptional(index)) {
                labelProps.optional = <Typography variant="caption">Optional</Typography>;
            }
            if (isStepSkipped(index)) {
                stepProps.completed = false;
            }

            return (
                <Step key={label} {...stepProps}>
                  <StepLabel {...labelProps}>{label}</StepLabel>
                </Step>
            );
        })}
    </Stepper>
    {activeStep === steps.length ? (
        <>
            <Stack spacing={2} mt={3}>
                <severity="success">
                  All steps completed - you&apos;re finished
                </>

                <Box textAlign="right">
                  <Button onClick={handleReset} variant="contained" color="error">
                    Reset
                  </Button>
                </Box>
            </Stack>
        </>
    ) : (
        <>
            <Box>{handleSteps(activeStep)}</Box>

            <Box display="flex" flexDirection="row" mt={3}>
                <Button
                  color="inherit"
                  variant="contained"
                  disabled={activeStep === 0}
                  onClick={handleBack}
                  sx={{ mr: 1 }}
                >
                  Back
                </Button>
                <Box flex="1 1 auto" />
                {isStepOptional(activeStep) && (
                  <Button color="inherit" onClick={handleSkip} sx={{ mr: 1 }}>
                    Skip
                  </Button>
                )}

                <Button
                  onClick={handleNext}
                  variant="contained"
                  color={activeStep === steps.length - 1 ? 'success' : 'secondary'}
                >
                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
                </Button>
            </Box>
        </>
    )}
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default FormWizardCode;

===== src/components/forms/form-wizard/FormWizardSteps.tsx =====
'use client'

import React from 'react'
import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  FormControlLabel,
  Alert,
} from '@mui/material'

import CustomTextField from 'src/components/forms/theme-elements/CustomTextField'
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox'
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel'
import ParentCard from 'src/components/shared/ParentCard'
import { Stack } from '@mui/system'
import FormWizardCode from './code/FormWizardCode'

const steps = ['Account', 'Profile', 'Finish']

const FormWizardSteps = () => {
  const [activeStep, setActiveStep] = React.useState(0)
  const [skipped, setSkipped] = React.useState(new Set())

  const isStepOptional = (step: any) => step === 1

  const isStepSkipped = (step: any) => skipped.has(step)

  const handleNext = () => {
    let newSkipped = skipped
    if (isStepSkipped(activeStep)) {
      newSkipped = new Set(newSkipped.values())
      newSkipped.delete(activeStep)
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1)
    setSkipped(newSkipped)
  }

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1)
  }

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this,
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.")
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1)
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values())
      newSkipped.add(activeStep)

      return newSkipped
    })
  }

  // eslint-disable-next-line consistent-return
  const handleSteps = (step: any) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <CustomFormLabel htmlFor='Name'>Name</CustomFormLabel>
            <CustomTextField id='Name' variant='outlined' fullWidth />
            <CustomFormLabel htmlFor='Email'>Email</CustomFormLabel>
            <CustomTextField
              id='Email'
              type='email'
              variant='outlined'
              fullWidth
            />
            <CustomFormLabel htmlFor='Password'>Password</CustomFormLabel>
            <CustomTextField
              id='Password'
              type='password'
              variant='outlined'
              fullWidth
            />
          </Box>
        )
      case 1:
        return (
          <Box>
            <CustomFormLabel htmlFor='Fname'>First Name</CustomFormLabel>
            <CustomTextField id='Fname' variant='outlined' fullWidth />
            <CustomFormLabel htmlFor='Lname'>Last Name</CustomFormLabel>
            <CustomTextField
              id='Lname'
              type='text'
              variant='outlined'
              fullWidth
            />
            <CustomFormLabel htmlFor='Address'>Address</CustomFormLabel>
            <CustomTextField
              id='Address'
              multiline
              rows={4}
              variant='outlined'
              fullWidth
            />
          </Box>
        )
      case 2:
        return (
          <Box pt={3}>
            <Typography variant='h5'>Terms and condition</Typography>
            <Typography variant='body2' sx={{ mt: 1 }}>
              Sard about this site or you have been to it, but you cannot figure
              out what it is or what it can do. MTA web directory isSard about
              this site or you have been to it, but you cannot figure out what
              it is or what it can do. MTA web directory is
            </Typography>
            <FormControlLabel
              control={<CustomCheckbox defaultChecked />}
              label='Agree with terms?'
            />
          </Box>
        )
      default:
        break
    }
  }

  const handleReset = () => {
    setActiveStep(0)
  }

  return (
    <ParentCard title='Form Wizard' codeModel={<FormWizardCode />}>
      <Box width='100%'>
        <Stepper activeStep={activeStep}>
          {steps.map((label, index) => {
            const stepProps: { completed?: boolean } = {}
            const labelProps: {
              optional?: React.ReactNode
            } = {}
            if (isStepOptional(index)) {
              labelProps.optional = (
                <Typography variant='caption'>Optional</Typography>
              )
            }
            if (isStepSkipped(index)) {
              stepProps.completed = false
            }

            return (
              <Step key={label} {...stepProps}>
                <StepLabel {...labelProps}>{label}</StepLabel>
              </Step>
            )
          })}
        </Stepper>
        {activeStep === steps.length ? (
          <>
            <Stack spacing={2} mt={3}>
              <Alert severity='success'>
                All steps completed - you&apos;re finished
              </Alert>

              <Box textAlign='right'>
                <Button onClick={handleReset} variant='contained' color='error'>
                  Reset
                </Button>
              </Box>
            </Stack>
          </>
        ) : (
          <>
            <Box>{handleSteps(activeStep)}</Box>

            <Box display='flex' flexDirection='row' mt={3}>
              <Button
                color='inherit'
                variant='contained'
                disabled={activeStep === 0}
                onClick={handleBack}
                sx={{ mr: 1 }}>
                Back
              </Button>
              <Box flex='1 1 auto' />
              {isStepOptional(activeStep) && (
                <Button color='inherit' onClick={handleSkip} sx={{ mr: 1 }}>
                  Skip
                </Button>
              )}

              <Button
                onClick={handleNext}
                variant='contained'
                color={
                  activeStep === steps.length - 1 ? 'success' : 'secondary'
                }>
                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
              </Button>
            </Box>
          </>
        )}
      </Box>
    </ParentCard>
  )
}

export default FormWizardSteps

===== src/components/forms/theme-elements/CustomCheckbox.tsx =====

import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';
import React from 'react';
const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? `0 0 0 1px ${theme.palette.grey[200]}`
      : `inset 0 0 0 1px ${theme.palette.grey[300]}`,
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? `0px auto ${theme.palette.grey[200]}`
        : `0px auto  ${theme.palette.grey[300]}`,
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

// Use React.forwardRef to forward the ref
const CustomCheckbox = React.forwardRef<HTMLButtonElement, CheckboxProps>((props, ref) => (
  <Checkbox
    disableRipple
    color={props.color || 'default'}
    checkedIcon={
      <BpCheckedIcon
        sx={{
          backgroundColor: props.color ? `${props.color}.main` : 'primary.main',
        }}
      />
    }
    icon={<BpIcon />}
    inputProps={{ 'aria-label': 'Checkbox demo' }}
    ref={ref}
    {...props}
  />
));

// Set displayName to help with debugging
CustomCheckbox.displayName = 'CustomCheckbox';


export default CustomCheckbox;
===== src/components/forms/theme-elements/CustomDisabledButton.tsx =====
'use client'
import { styled } from '@mui/material/styles';
import { Button } from '@mui/material';

const CustomDisabledButton =  styled((Button))(({ theme })  => ({
  backgroundColor: theme.palette.grey[100]
}));

export default CustomDisabledButton;

===== src/components/forms/theme-elements/CustomFormLabel.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

export default CustomFormLabel;

===== src/components/forms/theme-elements/CustomOutlinedButton.tsx =====
'use client'
import { styled } from '@mui/material/styles';
import { Button } from '@mui/material';

const CustomOutlinedButton = styled(Button)(({ theme }) => ({
  border: `1px solid ${theme.palette.grey[100]}`,
  color: theme.palette.text.primary,

  '&:hover': {
    border: theme.palette.mode === 'dark' ? `1px solid ${theme.palette.grey[200]}` : `1px solid ${theme.palette.grey[300]}` ,
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.text.secondary,
  },
}));

export default CustomOutlinedButton;

===== src/components/forms/theme-elements/CustomOutlinedInput.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { OutlinedInput } from '@mui/material';

const CustomOutlinedInput = styled((props: any) => <OutlinedInput {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },

  '& .MuiTypography-root': {
    color: theme.palette.text.secondary,
  },

  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
}));

export default CustomOutlinedInput;

===== src/components/forms/theme-elements/CustomRadio.tsx =====
'use client'
import { styled } from '@mui/material/styles';
import Radio, { RadioProps } from '@mui/material/Radio';

const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: '50%',
  width: 21,
  height: 21,
  boxShadow:
    theme.palette.mode === 'dark'
      ? `0 0 0 1px ${theme.palette.grey[200]}`
      : `inset 0 0 0 1px ${theme.palette.grey[300]}`,
  backgroundColor: 'transparent',
  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? `0px auto ${theme.palette.grey[200]}`
        : `0px auto  ${theme.palette.grey[300]}`,
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)(({ theme }) => ({
  boxShadow: 'none',
  '&:before': {
    display: 'block',
    width: 21,
    height: 21,
    backgroundImage:
      theme.palette.mode === 'dark'
        ? `radial-gradient(${theme.palette.background.paper},${theme.palette.background.paper} 28%,transparent 32%)`
        : 'radial-gradient(#fff,#fff 28%,transparent 32%)',
    content: '""',
  },
}));

// Inspired by blueprintjs
function CustomRadio(props: RadioProps) {
  return (
    <Radio
      disableRipple
      color="default"
      checkedIcon={
        <BpCheckedIcon
          sx={{
            backgroundColor: props.color ? `${props.color}.main` : 'primary.main',
          }}
        />
      }
      icon={<BpIcon />}
      inputProps={{ 'aria-label': 'Checkbox demo' }}
      {...props}
    />
  );
}

export default CustomRadio;

===== src/components/forms/theme-elements/CustomRangeSlider.tsx =====
'use client'
import { styled } from '@mui/material/styles';
import { Slider } from '@mui/material';

const CustomRangeSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
  },
}));

export default CustomRangeSlider;

===== src/components/forms/theme-elements/CustomSelect.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { Select } from '@mui/material';

const CustomSelect = styled((props: any) => <Select {...props} />)(({ }) => ({}));

export default CustomSelect;

===== src/components/forms/theme-elements/CustomSlider.tsx =====
'use client'
import { styled } from '@mui/material/styles';
import { Slider } from '@mui/material';

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

export default CustomSlider;

===== src/components/forms/theme-elements/CustomSocialButton.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { Button } from '@mui/material';

const CustomSocialButton = styled((props: any) => (
  <Button variant="outlined" size="large" color="inherit" {...props} />
))(({ theme }) => ({
  border: `1px solid ${theme.palette.divider}`,

  '&:hover': {
    color: theme.palette.primary.main,
  },
}));

export default CustomSocialButton;

===== src/components/forms/theme-elements/CustomSwitch.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { Switch } from '@mui/material';

const CustomSwitch = styled((props: any) => <Switch {...props} />)(({ theme }) => ({
  '&.MuiSwitch-root': {
    width: '68px',
    height: '49px',
  },
  '&  .MuiButtonBase-root': {
    top: '6px',
    left: '6px',
  },
  '&  .MuiButtonBase-root.Mui-checked .MuiSwitch-thumb': {
    backgroundColor: 'primary.main',
  },
  '& .MuiSwitch-thumb': {
    width: '18px',
    height: '18px',
    borderRadius: '6px',
  },

  '& .MuiSwitch-track': {
    backgroundColor: theme.palette.grey[200],
    opacity: 1,
    borderRadius: '5px',
  },
  '& .MuiSwitch-switchBase': {
    '&.Mui-checked': {
      '& + .MuiSwitch-track': {
        backgroundColor: 'primary',
        opacity: 0.18,
      },
    },
  },
}));

export default CustomSwitch;

===== src/components/forms/theme-elements/CustomTextField.tsx =====
'use client'

import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

export default CustomTextField;

===== src/components/frontend-pages/about/banner/index.tsx =====
import { Box, Stack, Typography, Container, Grid2 as Grid, Button } from '@mui/material';
import { Link } from 'react-router';

const Banner = () => {
  return (
    (<Box
      bgcolor="primary.light"
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '100px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '100px',
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="space-between">
          <Grid
            alignItems="center"
            size={{
              xs: 12,
              lg: 6
            }}>
            <Typography
              variant="h1"
              mb={3}
              lineHeight={1.4}
              fontWeight={700}
              sx={{
                fontSize: {
                  xs: '34px',
                  sm: '48px',
                },
              }}
            >
              Get to know Modernize Dashboard Template
            </Typography>
            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
              <Button variant="contained" size="large" component={Link} to="/auth/register">
                Create an account
              </Button>
              <Button variant="outlined" size="large">
                View Open Positions
              </Button>
            </Stack>
          </Grid>
          <Grid
            display="flex"
            alignItems="center"
            size={{
              xs: 12,
              lg: 5
            }}>
            <Typography lineHeight={1.9}>
              Do you need a highly customizable and developer friendly premium next.js admin
              template packed with numerous features? Modernize React Admin Template has
              everything you need. This bootstrap based admin template is designed in accordance
              with industry standards and best practices to provide you.
            </Typography>
          </Grid>
        </Grid>
      </Container>
    </Box>)
  );
};

export default Banner;

===== src/components/frontend-pages/about/key-metric/ContentArea.tsx =====
import { Typography } from '@mui/material';

const ContentArea = () => {
  return (
    <>
      <Typography
        variant="h1"
        mb={2}
        lineHeight={1.4}
        fontWeight={700}
        sx={{
          fontSize: {
            xs: '34px',
            sm: '40px',
          },
        }}
      >
        Key metric at a glance
      </Typography>
      <Typography lineHeight={1.9}>
        From the year we were founded to the impressive customer base we've built, and the growth
        percentages that reflect our continuous improvement, these numbers tell our story at a
        glance. Explore the data that drives our mission and underscores our commitment to
        excellence.
      </Typography>
    </>
  );
};

export default ContentArea;

===== src/components/frontend-pages/about/key-metric/index.tsx =====
import { Box, Container, Grid2 as Grid } from '@mui/material';
import ContentArea from './ContentArea';
import Key from './Key';

const KeyMetric = () => {
  return (
    (<Box
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '90px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '90px',
        },
        boxShadow: (theme) => theme.shadows[10],
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="space-between">
          <Grid
            size={{
              xs: 12,
              lg: 5
            }}>
            <ContentArea />
          </Grid>
          <Grid
            size={{
              xs: 12,
              lg: 5
            }}>
            <Key />
          </Grid>
        </Grid>
      </Container>
    </Box>)
  );
};

export default KeyMetric;

===== src/components/frontend-pages/about/key-metric/Key.tsx =====
import { Grid2 as Grid, Typography } from '@mui/material';

const keys = [
  {
    text: 'Founded',
    title: '2019',
    subtext: 'When we founded Modernize',
  },
  {
    text: 'Growth',
    title: '1,400%',
    subtext: 'Revenue growth in 2024',
  },
  {
    text: 'Customers',
    title: '300k+',
    isMargin: true,
    subtext: 'Customers on Modernize',
  },
  {
    text: 'Dashboards',
    title: '25k+',
    isMargin: true,
    subtext: 'Dashboards built using Modernize',
  },
];

const Key = () => {
  return (
    (<Grid container spacing={2}>
      {keys.map((key, i) => (
        <Grid
          key={i}
          sx={{
            marginTop: {
              lg: key.isMargin ? '32px' : 0,
            },
          }}
          size={{
            xs: 6,
            sm: 6
          }}>
          <Typography color="primary.main" textTransform="uppercase" fontSize="13px">
            {key.text}
          </Typography>
          <Typography
            variant="h4"
            sx={{
              fontSize: {
                xs: '34px',
                sm: '48px',
              },
            }}
            my={1}
            lineHeight={1}
            fontWeight={700}
          >
            {key.title}
          </Typography>
          <Typography variant="body1">{key.subtext}</Typography>
        </Grid>
      ))}
    </Grid>)
  );
};

export default Key;

===== src/components/frontend-pages/about/process/index.tsx =====
import { Box, Stack, Typography, Grid2 as Grid, Container, Divider } from '@mui/material';

import Icon1 from 'src/assets/images/svgs/icon-briefcase.svg';
import FeatureApp from 'src/assets/images/frontend-pages/homepage/feature-apps.png';
import IconBubble from 'src/assets/images/svgs/icon-speech-bubble.svg';
import IconFav from 'src/assets/images/svgs/icon-favorites.svg';

const Process = () => {
  return (
    (<Box pt={10}>
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="center">
          <Grid
            textAlign="center"
            size={{
              xs: 12,
              lg: 7
            }}>
            <Typography
              variant="h4"
              sx={{
                fontSize: {
                  lg: '40px',
                  xs: '35px',
                },
              }}
              fontWeight="700"
              mt={5}
            >
              The hassle-free setup process
            </Typography>
          </Grid>
        </Grid>

        <Grid container spacing={3} mt={3}>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <Box mb={3} bgcolor="warning.light" borderRadius="24px">
              <Box px="20px" py="32px">
                <Stack direction="column" spacing={2} mt={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={Icon1} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    Light & Dark Color Schemes
                  </Typography>
                  <Typography variant="body1">
                    Choose your preferred visual style effortlessly.
                  </Typography>
                </Stack>
              </Box>
            </Box>
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <Box
              textAlign="center"
              mb={3}
              bgcolor="secondary.light"
              borderRadius="24px"
              overflow="hidden"
            >
              <Box px="20px" pt="26px" pb="20px">
                <Stack direction="column" spacing={2} textAlign="center">
                  <Typography variant="h6" fontWeight={700} px={1} lineHeight={1.4}>
                    12+ Ready to Use Application Designs
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    Instantly deployable designs for your applications.
                  </Typography>
                </Stack>
              </Box>
              <Box height="70px">
                <img src={FeatureApp} alt="icon1" width={250} height={70} />
              </Box>
            </Box>
          </Grid>

          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <Box textAlign="center" mb={3} bgcolor="success.light" borderRadius="24px">
              <Box px="20px" py="32px">
                <Stack direction="column" spacing={2} mt={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={IconBubble} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    Code Improvements
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    Benefit from continuous improvements and optimizations.
                  </Typography>
                </Stack>
              </Box>
            </Box>
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <Box textAlign="center" mb={3} bgcolor="error.light" borderRadius="24px">
              <Box px="20px" py="32px">
                <Stack direction="column" spacing={2} mt={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={IconFav} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    50+ UI Components
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    A rich collection for seamless user experiences.
                  </Typography>
                </Stack>
              </Box>
            </Box>
          </Grid>
        </Grid>
      </Container>
      <Divider
        sx={{
          mt: '65px',
        }}
      />
    </Box>)
  );
};

export default Process;

===== src/components/frontend-pages/blog/banner/index.tsx =====
import { Box, Typography, Container, Grid2 as Grid } from "@mui/material";

const Banner = () => {

    return (<>
        <Box bgcolor="primary.light" sx={{
            paddingTop: {
                xs: '40px',
                lg: '100px',
            },
            paddingBottom: {
                xs: '40px',
                lg: '100px',
            }
        }}>
            <Container maxWidth="lg">
                <Grid container spacing={3} justifyContent="center">
                    <Grid
                        alignItems="center"
                        textAlign="center"
                        size={{
                            xs: 12,
                            lg: 8
                        }}>
                        <Typography color="primary.main" textTransform="uppercase" fontSize="13px">Blog Page</Typography>
                        <Typography variant="h1" mb={3} lineHeight={1.4} fontWeight={700} sx={{
                            fontSize: {
                                xs: '34px', sm: '48px', lg: '56px'
                            }
                        }}>Latest blog & news</Typography>
                    </Grid>
                </Grid>

            </Container>

        </Box>
    </>);
};

export default Banner;

===== src/components/frontend-pages/contact/banner/index.tsx =====
import { Box, Typography, Container, Grid2 as Grid } from '@mui/material';

const Banner = () => {
  return (<>
    <Box
      bgcolor="primary.light"
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '100px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '200px',
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="center">
          <Grid
            alignItems="center"
            textAlign="center"
            size={{
              xs: 12,
              lg: 8
            }}>
            <Typography color="primary.main" textTransform="uppercase" fontSize="13px">
              Contact us
            </Typography>
            <Typography
              variant="h1"
              mb={3}
              lineHeight={1.4}
              fontWeight={700}
              sx={{
                fontSize: {
                  xs: '34px',
                  sm: '48px',
                  lg: '56px',
                },
              }}
            >
              We'd love to hear from you
            </Typography>
          </Grid>
        </Grid>
      </Container>
    </Box>
    <Box
      sx={{
        mt: {
          lg: '-150px',
        },
      }}
    >
      <Container maxWidth="lg">
        <iframe
          src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3388599.4592369436!2d6.920799949782969!3d33.96223431657389!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x125595448316a4e1%3A0x3a84333aaa019bef!2sTunisia!5e0!3m2!1sen!2sin!4v1726146847742!5m2!1sen!2sin"
          width="100%"
          height="440"
          style={{ border: 0 }}
          allowFullScreen
          loading="lazy"
        ></iframe>
      </Container>
    </Box>
  </>);
};

export default Banner;

===== src/components/frontend-pages/contact/form/Address.tsx =====
import { Box, Typography, Divider } from '@mui/material';
import { styled } from '@mui/material/styles';

import Shape1 from 'src/assets/images/frontend-pages/contact/shape1.png';

const ShapeBg = styled(Box)(() => ({
  position: 'absolute',
  right: 0,
  top: 0,
}));

const Address = () => {
  return (
    <Box bgcolor="primary.main" borderRadius="12px" position="relative">
      <ShapeBg>
        <img src={Shape1} alt="img" width={200} height={250} />
      </ShapeBg>
      <Box p="30px" zIndex={1}>
        <Typography fontSize="20px" fontWeight={700} color="white" mb={2}>
          Reach Out Today
        </Typography>
        <Typography variant="body1" color="white" lineHeight={1.6}>
          Have questions or need assistance? We're just a message away.
        </Typography>

        <Divider sx={{ opacity: 0.3, my: '40px' }} />

        <Typography fontSize="20px" fontWeight={700} color="white" mb={2}>
          Our Location
        </Typography>
        <Typography variant="body1" color="white" lineHeight={1.6}>
          Visit us in person or find our contact details to connect with us directly.
        </Typography>
      </Box>
    </Box>
  );
};

export default Address;

===== src/components/frontend-pages/contact/form/index.tsx =====
import React from 'react';
import { Box, Container, Grid2 as Grid, MenuItem, Button } from '@mui/material';
import CustomFormLabel from '../../../forms/theme-elements/CustomFormLabel';
import CustomTextField from '../../../forms/theme-elements/CustomTextField';
import CustomSelect from '../../../forms/theme-elements/CustomSelect';
import Address from './Address';

const numbers = [
  {
    value: 'one',
    label: 'General Enquiry',
  },
  {
    value: 'two',
    label: 'General Enquiry 2',
  },
];

const Form = () => {
  const [number, setNumber] = React.useState('one');

  const handleChange3 = (event: any) => {
    setNumber(event.target.value);
  };

  return (<>
    <Box
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '60px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '90px',
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="center">
          <Grid
            alignItems="center"
            size={{
              xs: 12,
              lg: 8
            }}>
            <form>
              <Grid container spacing={3} justifyContent="center">
                <Grid
                  alignItems="center"
                  size={{
                    xs: 12,
                    lg: 6
                  }}>
                  <CustomFormLabel htmlFor="fname" sx={{ mt: 0 }}>
                    First Name *
                  </CustomFormLabel>
                  <CustomTextField id="fname" placeholder="Name" fullWidth />
                </Grid>
                <Grid
                  alignItems="center"
                  size={{
                    xs: 12,
                    lg: 6
                  }}>
                  <CustomFormLabel htmlFor="lname" sx={{ mt: 0 }}>
                    Last Name *
                  </CustomFormLabel>
                  <CustomTextField id="lname" placeholder="Last Name" fullWidth />
                </Grid>
                <Grid
                  alignItems="center"
                  size={{
                    xs: 12,
                    lg: 6
                  }}>
                  <CustomFormLabel htmlFor="phone" sx={{ mt: 0 }}>
                    Phone Number *
                  </CustomFormLabel>
                  <CustomTextField id="phone" placeholder="xxx xxx xxxx" fullWidth />
                </Grid>
                <Grid
                  alignItems="center"
                  size={{
                    xs: 12,
                    lg: 6
                  }}>
                  <CustomFormLabel htmlFor="txt-email" sx={{ mt: 0 }}>
                    Email *
                  </CustomFormLabel>
                  <CustomTextField id="txt-email" placeholder="Email address" fullWidth />
                </Grid>
                <Grid alignItems="center" size={12}>
                  <CustomFormLabel htmlFor="txt-enquire" sx={{ mt: 0 }}>
                    Enquire related to *
                  </CustomFormLabel>
                  <CustomSelect
                    fullWidth
                    id="txt-enquire"
                    variant="outlined"
                    value={number}
                    onChange={handleChange3}
                  >
                    {numbers.map((option) => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.label}
                      </MenuItem>
                    ))}
                  </CustomSelect>
                </Grid>
                <Grid alignItems="center" size={12}>
                  <CustomFormLabel htmlFor="txt-message" sx={{ mt: 0 }}>
                    Message
                  </CustomFormLabel>
                  <CustomTextField
                    id="txt-message"
                    multiline
                    rows={4}
                    variant="outlined"
                    placeholder="Write your message here..."
                    fullWidth
                  />
                </Grid>
                <Grid alignItems="center" size={12}>
                  <Button variant="contained" size="large">
                    Submit
                  </Button>
                </Grid>
              </Grid>
            </form>
          </Grid>
          <Grid
            alignItems="center"
            size={{
              xs: 12,
              lg: 4
            }}>
            <Address />
          </Grid>
        </Grid>
      </Container>
    </Box>
  </>);
};

export default Form;

===== src/components/frontend-pages/homepage/banner/Banner.tsx =====
import React from 'react';
import {
  Box,
  Stack,
  Typography,
  AvatarGroup,
  Avatar,
  Container,
  Grid2 as Grid,
  Button,
  useTheme,
} from '@mui/material';
import useMediaQuery from '@mui/material/useMediaQuery';
import Tooltip from '@mui/material/Tooltip';

import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';

// icons
import icon1 from 'src/assets/images/frontend-pages/icons/icon-react.svg';
import icon2 from 'src/assets/images/frontend-pages/icons/icon-mui.svg';
import icon3 from 'src/assets/images/frontend-pages/icons/icon-next.svg';
import icon4 from 'src/assets/images/frontend-pages/icons/icon-ts.svg';
import icon5 from 'src/assets/images/frontend-pages/icons/icon-redux.svg';
import icon6 from 'src/assets/images/frontend-pages/icons/icon-tabler.svg';

import BannerTopLeft from 'src/assets/images/frontend-pages/homepage/banner-top-left.svg';
import BannerBottomPart from 'src/assets/images/frontend-pages/homepage/bottom-part.svg';
import BannerTopRight from 'src/assets/images/frontend-pages/homepage/banner-top-right.svg';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';

import iconPlay from 'src/assets/images/frontend-pages/homepage/icon-play.svg';

const Frameworks = [
  {
    name: 'React',
    icon: icon1,
  },
  {
    name: 'Material Ui',
    icon: icon2,
  },
  {
    name: 'React',
    icon: icon3,
  },
  {
    name: 'Typescript',
    icon: icon4,
  },
  {
    name: 'Redux',
    icon: icon5,
  },
  {
    name: 'Tabler Icon',
    icon: icon6,
  },
];
const Banner = () => {
  const theme = useTheme();
  //   sidebar
  const lgUp = useMediaQuery(theme.breakpoints.up('lg'));

  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    (<Box bgcolor="primary.light" pt={7}>
      <Container
        sx={{
          maxWidth: '1400px !important',
          position: 'relative',
        }}
      >
        <Grid container spacing={3} justifyContent="center" mb={4}>
          {lgUp ? (
            <Grid
              alignItems="end"
              display="flex"
              size={{
                xs: 12,
                lg: 2
              }}>
              <img
                src={BannerTopLeft}
                className="animted-img-2"
                alt="banner"
                width={360}
                height={200}
                style={{
                  borderRadius: '16px',
                  position: 'absolute',
                  left: '24px',
                  boxShadow: theme.shadows[10],
                  height: 'auto',
                  width: 'auto',
                }}
              />
            </Grid>
          ) : null}

          <Grid
            textAlign="center"
            size={{
              xs: 12,
              lg: 7
            }}>
            <Typography
              variant="h1"
              fontWeight={700}
              lineHeight="1.2"
              sx={{
                fontSize: {
                  xs: '40px',
                  sm: '56px',
                },
              }}
            >
              Most powerful &{' '}
              <Typography
                variant="h1"
                sx={{
                  fontSize: {
                    xs: '40px',
                    sm: '56px',
                  },
                }}
                fontWeight={700}
                component="span"
                color="primary.main"
              >
                developer friendly
              </Typography>{' '}
              dashboard
            </Typography>
            <Stack
              my={3}
              direction={{ xs: 'column', sm: 'row' }}
              spacing="20px"
              alignItems="center"
              justifyContent="center"
            >
              <AvatarGroup>
                <Avatar alt="Remy Sharp" src={user1} sx={{ width: 40, height: 40 }} />
                <Avatar alt="Travis Howard" src={user2} sx={{ width: 40, height: 40 }} />
                <Avatar alt="Cindy Baker" src={user3} sx={{ width: 40, height: 40 }} />
              </AvatarGroup>
              <Typography variant="h6" fontWeight={500}>
                52,589+ developers & agencies using our templates
              </Typography>
            </Stack>
            <Stack
              direction={{ xs: 'column', sm: 'row' }}
              alignItems="center"
              spacing={3}
              mb={4}
              justifyContent="center"
            >
              <Button color="primary" size="large" variant="contained" href="/auth/login">
                Log In
              </Button>
              <Button
                variant="text"
                color="inherit"
                onClick={handleClickOpen}
                sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: 2,
                  color: 'text.primary',
                  fontWeight: 500,
                  fontSize: '15px',
                  '&:hover': {
                    color: 'primary.main',
                  },
                }}
              >
                <img src={iconPlay} alt="icon" width={40} height={40} /> See how it works
              </Button>

              <Dialog
                maxWidth="lg"
                open={open}
                onClose={handleClose}
                aria-labelledby="alert-dialog-title"
                aria-describedby="alert-dialog-description"
              >
                <DialogContent>
                  <iframe
                    width="800"
                    height="500"
                    src="https://www.youtube.com/embed/P94DBd1hJkw?si=WLnH9g-KAdDJkUZN"
                    title="YouTube video player"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    referrerPolicy="strict-origin-when-cross-origin"
                    allowFullScreen
                  ></iframe>
                </DialogContent>
                <DialogActions>
                  <Button onClick={handleClose} autoFocus>
                    Close
                  </Button>
                </DialogActions>
              </Dialog>
            </Stack>
            <Stack
              direction="row"
              sx={{ flexWrap: 'wrap' }}
              alignItems="center"
              spacing={3}
              mb={8}
              justifyContent="center"
            >
              {Frameworks.map((fw, i) => (
                <Tooltip title={fw.name} key={i}>
                  <Box
                    width="54px"
                    height="54px"
                    display="flex"
                    sx={{
                      boxShadow: theme.palette.mode === 'dark' ? null : theme.shadows[10],
                      backgroundColor: theme.palette.mode === 'dark' ? '#1f2c4f' : 'white',
                    }}
                    alignItems="center"
                    justifyContent="center"
                    borderRadius="16px"
                  >
                    <img src={fw.icon} alt={fw.icon} width={26} height={26} />
                  </Box>
                </Tooltip>
              ))}
            </Stack>
          </Grid>
          {lgUp ? (
            <Grid
              alignItems="end"
              display="flex"
              size={{
                xs: 12,
                lg: 2
              }}>
              <img
                src={BannerTopRight}
                className="animted-img-2"
                alt="banner"
                width={350}
                height={220}
                style={{
                  borderRadius: '16px',
                  position: 'absolute',
                  right: '24px',
                  boxShadow: theme.shadows[10],
                  height: 'auto',
                  width: 'auto',
                }}
              />
            </Grid>
          ) : null}
        </Grid>

        {lgUp ? (
          <img
            src={BannerBottomPart}
            alt="banner"
            width={500}
            height={300}
            style={{
              width: '100%',
              marginBottom: '-11px',
            }}
          />
        ) : null}
      </Container>
    </Box>)
  );
};

export default Banner;

===== src/components/frontend-pages/homepage/defend-focus/index.tsx =====
import * as React from 'react';
import { Box, Divider, Container } from '@mui/material';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import { styled } from '@mui/material/styles';
import { IconAppWindow, IconArrowRampLeft, IconUserCircle, IconWallet } from '@tabler/icons-react';
import { useTheme } from '@mui/material/styles';
import TabTeamScheduling from './TabTeamScheduling';
import TabPayments from './TabPayments';
import TabEmbedding from './TabEmbedding';
import TabWorkflows from './TabWorkflows';

const COMMON_TAB = [
  {
    value: '1',
    icon: <IconUserCircle width={20} height={20} />,
    label: 'Team Scheduling',
    disabled: false,
  },
  { value: '2', icon: <IconWallet width={20} height={20} />, label: 'Payments', disabled: false },
  {
    value: '3',
    icon: <IconAppWindow width={20} height={20} />,
    label: 'Embedding',
    disabled: true,
  },
  {
    value: '4',
    icon: <IconArrowRampLeft width={20} height={20} />,
    label: 'Workflows',
    disabled: true,
  },
];

const StyledTabPanelItem = styled(TabPanel)(() => ({
  padding: 0,
  marginTop: '85px',
}));

const DefendFocus = () => {
  const theme = useTheme();
  const borderColor = theme.palette.divider;

  const [value, setValue] = React.useState('1');

  const handleChange = (newValue: any) => {
    setValue(newValue);
  };

  const StyledTab = styled(Tab)(() => ({
    fontWeight: 500,
    borderRight: `1px solid ${borderColor}`,
    '& .MuiTab-iconWrapper': {
      marginRight: '12px',
      width: '24px',
      height: '24px',
      strokeWidth: '1.5px',
    },
    '&:last-child': {
      borderRight: 0,
    },
  }));

  return (
    <Box sx={{ boxShadow: (theme) => theme.shadows[10], pb: { xs: 2, lg: 4 } }}>
      <Divider />
      <Container maxWidth="lg">
        <TabContext value={value}>
          <Box sx={{ maxWidth: { xs: 400, sm: '100%' } }}>
            <TabList
              TabIndicatorProps={{
                style: {
                  top: 0,
                },
              }}
              variant="scrollable"
              allowScrollButtonsMobile
              scrollButtons="auto"
              onChange={handleChange}
              aria-label="lab API tabs example"
            >
              {COMMON_TAB.map((tab, index) => (
                <StyledTab
                  key={tab.value}
                  label={tab.label}
                  iconPosition="start"
                  icon={tab.icon}
                  value={String(index + 1)}
                  sx={{
                    fontSize: {
                      xs: '15px',
                      lg: '18px',
                    },
                    flex: {
                      xs: 'none',
                      sm: '1 1 0px',
                    },
                  }}
                />
              ))}
            </TabList>
          </Box>
          <Box mb={5}>
            <StyledTabPanelItem value="1">
              <TabTeamScheduling />
            </StyledTabPanelItem>

            <StyledTabPanelItem value="2">
              <TabPayments />
            </StyledTabPanelItem>

            <StyledTabPanelItem value="3">
              <TabEmbedding />
            </StyledTabPanelItem>

            <StyledTabPanelItem value="4">
              <TabWorkflows />
            </StyledTabPanelItem>
          </Box>
        </TabContext>
      </Container>
    </Box>
  );
};
export default DefendFocus;

===== src/components/frontend-pages/homepage/defend-focus/TabEmbedding.tsx =====
import { Box, Divider, Typography, Grid2 as Grid, Button } from '@mui/material';

import { styled } from '@mui/material/styles';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import { useState } from 'react';

import IconAcc from 'src/assets/images/frontend-pages/homepage/accordian1.jpg';

const StyledAccordian = styled(Accordion)(() => ({
  boxShadow: 'none',
  marginBottom: '0 !important',
  '&.Mui-expanded': {
    margin: '0',
  },
  '& .MuiAccordionSummary-root': {
    padding: 0,
    minHeight: '60px',
  },
  '& .MuiAccordionDetails-root': {
    padding: '0 0 20px',
  },
}));

const TabEmbedding = () => {
  const [expanded, setExpanded] = useState(true);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const handleChange2 = () => {
    setExpanded(!expanded);
  };

  const handleChange3 = () => {
    setExpanded2(!expanded2);
  };

  const handleChange4 = () => {
    setExpanded3(!expanded3);
  };

  return (
    (<Grid container spacing={{ xs: 3, lg: 8 }}>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <img
          src={IconAcc}
          width={500}
          height={500}
          style={{
            width: '100%',
            height: 'auto',
            borderRadius: '8px',
          }}
          alt="img"
        />
      </Grid>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <Typography
          variant="h4"
          sx={{
            fontSize: {
              lg: '40px',
              xs: '35px',
            },
          }}
          fontWeight="700"
          mt={5}
        >
          Defend your focus
        </Typography>
        <Box mt={4}>
          <StyledAccordian expanded={expanded3} onChange={handleChange4}>
            <AccordionSummary
              expandIcon={
                expanded3 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel3-content"
              id="panel3-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Round robin pooling
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded} onChange={handleChange2}>
            <AccordionSummary
              expandIcon={
                expanded ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Combine teammate schedules
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded2} onChange={handleChange3}>
            <AccordionSummary
              expandIcon={
                expanded2 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel2-content"
              id="panel2-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Factor in outside colleagues
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />

          <Box mt={3}>
            <Button variant="contained" color="primary" size="large">
              Learn More
            </Button>
          </Box>
        </Box>
      </Grid>
    </Grid>)
  );
};
export default TabEmbedding;

===== src/components/frontend-pages/homepage/defend-focus/TabPayments.tsx =====
import { Box, Divider, Typography, Grid2 as Grid, Button } from '@mui/material';

import { styled } from '@mui/material/styles';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import { useState } from 'react';

import IconAcc from 'src/assets/images/frontend-pages/homepage/accordian1.jpg';

const StyledAccordian = styled(Accordion)(() => ({
  boxShadow: 'none',
  marginBottom: '0 !important',
  '&.Mui-expanded': {
    margin: '0',
  },
  '& .MuiAccordionSummary-root': {
    padding: 0,
    minHeight: '60px',
  },
  '& .MuiAccordionDetails-root': {
    padding: '0 0 20px',
  },
}));

const TabPayments = () => {
  const [expanded, setExpanded] = useState(true);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const handleChange2 = () => {
    setExpanded(!expanded);
  };

  const handleChange3 = () => {
    setExpanded2(!expanded2);
  };

  const handleChange4 = () => {
    setExpanded3(!expanded3);
  };

  return (
    (<Grid container spacing={{ xs: 3, lg: 8 }}>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <img
          src={IconAcc}
          width={500}
          height={500}
          style={{
            width: '100%',
            height: 'auto', borderRadius: '8px'
          }}
          alt="img"
        />
      </Grid>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <Typography
          variant="h4"
          sx={{
            fontSize: {
              lg: '40px',
              xs: '35px',
            },
          }}
          fontWeight="700"
          mt={5}
        >
          Defend your focus
        </Typography>
        <Box mt={4}>
          <StyledAccordian expanded={expanded} onChange={handleChange2}>
            <AccordionSummary
              expandIcon={
                expanded ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Combine teammate schedules
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded2} onChange={handleChange3}>
            <AccordionSummary
              expandIcon={
                expanded2 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel2-content"
              id="panel2-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Factor in outside colleagues
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded3} onChange={handleChange4}>
            <AccordionSummary
              expandIcon={
                expanded3 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel3-content"
              id="panel3-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Round robin pooling
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <Box mt={3}>
            <Button variant="contained" color="primary" size="large">
              Learn More
            </Button>
          </Box>
        </Box>
      </Grid>
    </Grid>)
  );
};
export default TabPayments;

===== src/components/frontend-pages/homepage/defend-focus/TabTeamScheduling.tsx =====
import { Box, Divider, Typography, Grid2 as Grid, Button } from '@mui/material';

import { styled } from '@mui/material/styles';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import { useState } from 'react';
import IconAcc from 'src/assets/images/frontend-pages/homepage/accordian1.jpg';

const StyledAccordian = styled(Accordion)(() => ({
  boxShadow: 'none',
  marginBottom: '0 !important',
  '&.Mui-expanded': {
    margin: '0',
  },
  '& .MuiAccordionSummary-root': {
    padding: 0,
    minHeight: '60px',
  },
  '& .MuiAccordionDetails-root': {
    padding: '0 0 20px',
  },
}));

const TabTeamScheduling = () => {
  const [expanded, setExpanded] = useState(true);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const handleChange2 = () => {
    setExpanded(!expanded);
  };

  const handleChange3 = () => {
    setExpanded2(!expanded2);
  };

  const handleChange4 = () => {
    setExpanded3(!expanded3);
  };

  return (
    (<Grid container spacing={{ xs: 3, lg: 8 }}>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <img
          src={IconAcc}
          width={500}
          height={500}
          style={{
            width: '100%',
            height: 'auto',
            borderRadius: '8px',
          }}
          alt="img"
        />
      </Grid>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <Typography
          variant="h4"
          sx={{
            fontSize: {
              lg: '40px',
              xs: '35px',
            },
          }}
          fontWeight="700"
          mt={5}
        >
          Defend your focus
        </Typography>
        <Box mt={4}>
          <StyledAccordian expanded={expanded2} onChange={handleChange3}>
            <AccordionSummary
              expandIcon={
                expanded2 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel2-content"
              id="panel2-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Factor in outside colleagues
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded} onChange={handleChange2}>
            <AccordionSummary
              expandIcon={
                expanded ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Combine teammate schedules
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded3} onChange={handleChange4}>
            <AccordionSummary
              expandIcon={
                expanded3 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel3-content"
              id="panel3-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Round robin pooling
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <Box mt={3}>
            <Button variant="contained" color="primary" size="large">
              Learn More
            </Button>
          </Box>
        </Box>
      </Grid>
    </Grid>)
  );
};
export default TabTeamScheduling;

===== src/components/frontend-pages/homepage/defend-focus/TabWorkflows.tsx =====
import { Box, Divider, Typography, Grid2 as Grid, Button } from '@mui/material';

import { styled } from '@mui/material/styles';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import { useState } from 'react';
import IconAcc from 'src/assets/images/frontend-pages/homepage/accordian1.jpg';

const StyledAccordian = styled(Accordion)(() => ({
  boxShadow: 'none',
  marginBottom: '0 !important',
  '&.Mui-expanded': {
    margin: '0',
  },
  '& .MuiAccordionSummary-root': {
    padding: 0,
    minHeight: '60px',
  },
  '& .MuiAccordionDetails-root': {
    padding: '0 0 20px',
  },
}));

const TabWorkflows = () => {
  const [expanded, setExpanded] = useState(true);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const handleChange2 = () => {
    setExpanded(!expanded);
  };

  const handleChange3 = () => {
    setExpanded2(!expanded2);
  };

  const handleChange4 = () => {
    setExpanded3(!expanded3);
  };

  return (
    (<Grid container spacing={{ xs: 3, lg: 8 }}>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <img
          src={IconAcc}
          width={500}
          height={500}
          style={{
            width: '100%',
            height: 'auto',
            borderRadius: '8px',
          }}
          alt="img"
        />
      </Grid>
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <Typography
          variant="h4"
          sx={{
            fontSize: {
              lg: '40px',
              xs: '35px',
            },
          }}
          fontWeight="700"
          mt={5}
        >
          Defend your focus
        </Typography>
        <Box mt={4}>
          <StyledAccordian expanded={expanded2} onChange={handleChange3}>
            <AccordionSummary
              expandIcon={
                expanded2 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel2-content"
              id="panel2-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Factor in outside colleagues
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded} onChange={handleChange2}>
            <AccordionSummary
              expandIcon={
                expanded ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Combine teammate schedules
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <StyledAccordian expanded={expanded3} onChange={handleChange4}>
            <AccordionSummary
              expandIcon={
                expanded3 ? (
                  <IconMinus size="21" stroke="1.5" />
                ) : (
                  <IconPlus size="21" stroke="1.5" />
                )
              }
              aria-controls="panel3-content"
              id="panel3-header"
            >
              <Typography fontSize="17px" fontWeight="600">
                Round robin pooling
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography>
                Factor in availability for required attendees, and skip checking for conflicts for
                optional attendees.
              </Typography>
            </AccordionDetails>
          </StyledAccordian>
          <Divider />
          <Box mt={3}>
            <Button variant="contained" color="primary" size="large">
              Learn More
            </Button>
          </Box>
        </Box>
      </Grid>
    </Grid>)
  );
};
export default TabWorkflows;

===== src/components/frontend-pages/homepage/exceptional-feature/index.tsx =====
import { Box, Grid2 as Grid, Typography, Container } from '@mui/material';
import { styled } from '@mui/material/styles';
import { useTheme } from '@mui/material/styles';

import IconColor from 'src/assets/images/frontend-pages/icons/icon-color.svg';
import IconSidebar from 'src/assets/images/frontend-pages/icons/icon-sidebar.svg';
import IconPages from 'src/assets/images/frontend-pages/icons/icon-pages.svg';
import IconComponents from 'src/assets/images/frontend-pages/icons/icon-components.svg';
import IconFramework from 'src/assets/images/frontend-pages/icons/icon-framework.svg';
import IconIcons from 'src/assets/images/frontend-pages/icons/icon-icons.svg';
import IconResponsive from 'src/assets/images/frontend-pages/icons/icon-responsive.svg';
import IconSass from 'src/assets/images/frontend-pages/icons/icon-sass.svg';
import IconCustomize from 'src/assets/images/frontend-pages/icons/icon-customize.svg';
import IconChart from 'src/assets/images/frontend-pages/icons/icon-chart.svg';
import IconTable from 'src/assets/images/frontend-pages/icons/icon-table.svg';
import IconUpdate from 'src/assets/images/frontend-pages/icons/icon-update.svg';
import IconSupport from 'src/assets/images/frontend-pages/icons/icon-support.svg';

const StyledAnimationFeature = styled(Box)(() => ({
  width: '100%',
  overflowX: 'hidden',
  whiteSpace: 'nowrap',
  boxSizing: 'border-box',
}));

const StyledAnimationContent = styled(Box)(() => ({
  animation: 'marquee 25s linear infinite',
}));

const StyledAnimationContent2 = styled(Box)(() => ({
  animation: 'marquee2 25s linear infinite',
}));

const slide1 = [
  {
    icon: IconColor,
    text: '6 Theme Colors',
  },
  {
    icon: IconSidebar,
    text: 'Dark & Light Sidebar',
  },
  {
    icon: IconPages,
    text: '65+ Page Templates',
  },
  {
    icon: IconComponents,
    text: '50+ UI Components',
  },
  {
    icon: IconColor,
    text: '6 Theme Colors',
  },
  {
    icon: IconSidebar,
    text: 'Dark & Light Sidebar',
  },
  {
    icon: IconPages,
    text: '65+ Page Templates',
  },
  {
    icon: IconComponents,
    text: '50+ UI Components',
  },
  {
    icon: IconColor,
    text: '6 Theme Colors',
  },
  {
    icon: IconSidebar,
    text: 'Dark & Light Sidebar',
  },
  {
    icon: IconPages,
    text: '65+ Page Templates',
  },
  {
    icon: IconComponents,
    text: '50+ UI Components',
  },
];

const slide2 = [
  {
    icon: IconFramework,
    text: 'Material Ui',
  },
  {
    icon: IconIcons,
    text: '3400+ Icon',
  },
  {
    icon: IconResponsive,
    text: 'Fully Responsive',
  },
  {
    icon: IconSass,
    text: 'Sassbase CSS',
  },
  {
    icon: IconFramework,
    text: 'Material Ui',
  },
  {
    icon: IconIcons,
    text: '3400+ Icon',
  },
  {
    icon: IconResponsive,
    text: 'Fully Responsive',
  },
  {
    icon: IconSass,
    text: 'Sassbase CSS',
  },
  {
    icon: IconFramework,
    text: 'Material Ui',
  },
  {
    icon: IconIcons,
    text: '3400+ Icon',
  },
  {
    icon: IconResponsive,
    text: 'Fully Responsive',
  },
  {
    icon: IconSass,
    text: 'Sassbase CSS',
  },
];

const slide3 = [
  {
    icon: IconCustomize,
    text: 'Easy to Customize',
  },
  {
    icon: IconChart,
    text: 'Lots of Chart Options',
  },
  {
    icon: IconTable,
    text: 'Lots of Table Examples',
  },
  {
    icon: IconUpdate,
    text: 'Regular Updates',
  },
  {
    icon: IconSupport,
    text: 'Dedicated Support',
  },
  {
    icon: IconCustomize,
    text: 'Easy to Customize',
  },
  {
    icon: IconChart,
    text: 'Lots of Chart Options',
  },
  {
    icon: IconTable,
    text: 'Lots of Table Examples',
  },
  {
    icon: IconUpdate,
    text: 'Regular Updates',
  },
  {
    icon: IconSupport,
    text: 'Dedicated Support',
  },
  {
    icon: IconCustomize,
    text: 'Easy to Customize',
  },
  {
    icon: IconChart,
    text: 'Lots of Chart Options',
  },
  {
    icon: IconTable,
    text: 'Lots of Table Examples',
  },
  {
    icon: IconUpdate,
    text: 'Regular Updates',
  },
  {
    icon: IconSupport,
    text: 'Dedicated Support',
  },
];

const ExceptionalFeature = () => {
  const theme = useTheme();

  const StyledFeatureBox = styled(Box)(() => ({
    boxShadow: theme.shadows[10],
    backgroundColor: theme.palette.background.default,
    minHeight: '72px',
    width: '315px',
    borderRadius: '16px',
    marginTop: '15px',
    marginBottom: '15px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '10px',
    flexShrink: 0,
  }));

  return (<>
    <Container
      sx={{
        maxWidth: '1400px !important',
      }}
    >
      <Box
        bgcolor="primary.light"
        borderRadius="24px"
        sx={{
          py: {
            xs: '40px',
            lg: '70px',
          },
        }}
      >
        <Container maxWidth="lg">
          <Grid container spacing={3} alignItems="center" justifyContent="center">
            <Grid
              size={{
                xs: 12,
                lg: 7,
                sm: 9
              }}>
              <Typography
                variant="h4"
                mb="55px"
                textAlign="center"
                fontWeight={700}
                fontSize="40px"
                lineHeight="1.2"
                sx={{
                  fontSize: {
                    lg: '40px',
                    xs: '30px',
                  },
                }}
              >
                Enjoy unparalleled features & exceptional flexibility.
              </Typography>
            </Grid>
          </Grid>
        </Container>

        <StyledAnimationFeature>
          <StyledAnimationContent display="flex" gap="30px">
            {slide1.map((slide, i) => (
              <StyledFeatureBox key={i}>
                <img src={slide.icon} alt="color" width={24} height={24} />
                <Typography fontSize="15px" fontWeight={600}>
                  {slide.text}
                </Typography>
              </StyledFeatureBox>
            ))}
          </StyledAnimationContent>
        </StyledAnimationFeature>

        <StyledAnimationFeature>
          <StyledAnimationContent2 display="flex" gap="30px">
            {slide2.map((slide, i) => (
              <StyledFeatureBox key={i}>
                <img src={slide.icon} alt="color" width={24} height={24} />
                <Typography fontSize="15px" fontWeight={600}>
                  {slide.text}
                </Typography>
              </StyledFeatureBox>
            ))}
          </StyledAnimationContent2>
        </StyledAnimationFeature>

        <StyledAnimationFeature>
          <StyledAnimationContent display="flex" gap="30px">
            {slide3.map((slide, i) => (
              <StyledFeatureBox key={i}>
                <img src={slide.icon} alt="color" width={24} height={24} />
                <Typography fontSize="15px" fontWeight={600}>
                  {slide.text}
                </Typography>
              </StyledFeatureBox>
            ))}
          </StyledAnimationContent>
        </StyledAnimationFeature>
      </Box>
    </Container>
  </>);
};

export default ExceptionalFeature;

===== src/components/frontend-pages/homepage/faq/index.tsx =====
import { Box, Typography, Grid2 as Grid, Container, Link } from '@mui/material';

import { styled } from '@mui/material/styles';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import { useTheme } from '@mui/material/styles';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import { useState } from 'react';

const FAQ = () => {
  const theme = useTheme();

  const [expanded, setExpanded] = useState(true);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);
  const [expanded4, setExpanded4] = useState(false);
  const [expanded5, setExpanded5] = useState(false);
  const [expanded6, setExpanded6] = useState(false);

  const StyledAccordian = styled(Accordion)(() => ({
    borderRadius: '8px',
    marginBottom: '16px !important',
    boxShadow: theme.palette.mode == 'light' ? '0px 3px 0px rgba(235, 241, 246, 0.25)' : 'unset',
    border: `1px solid ${theme.palette.divider}`,
    '&:before': {
      display: 'none',
    },
    '&.Mui-expanded': {
      margin: '0',
    },
    '& .MuiAccordionSummary-root': {
      padding: '8px 24px',
      minHeight: '60px',
      fontSize: '18px',
      fontWeight: 500,
    },
    '& .MuiAccordionDetails-root': {
      padding: '0 24px 24px',
    },
  }));

  const handleChange = () => {
    setExpanded(!expanded);
  };

  const handleChange2 = () => {
    setExpanded2(!expanded2);
  };

  const handleChange3 = () => {
    setExpanded3(!expanded3);
  };

  const handleChange4 = () => {
    setExpanded4(!expanded4);
  };

  const handleChange5 = () => {
    setExpanded5(!expanded5);
  };

  const handleChange6 = () => {
    setExpanded6(!expanded6);
  };

  return (
    (<Container
      maxWidth="lg"
      sx={{
        pb: {
          xs: '30px',
          lg: '60px',
        },
      }}
    >
      <Grid container spacing={3} justifyContent="center">
        <Grid
          size={{
            xs: 12,
            lg: 8
          }}>
          <Typography
            variant="h4"
            textAlign="center"
            lineHeight="1.2"
            sx={{
              fontSize: {
                lg: '40px',
                xs: '35px',
              },
            }}
            fontWeight="700"
          >
            Frequently Asked Questions
          </Typography>
          <Box mt={7}>
            <StyledAccordian expanded={expanded} onChange={handleChange}>
              <AccordionSummary
                expandIcon={
                  expanded ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel1-content"
                id="panel1-header"
              >
                What is included with my purchase?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
            <StyledAccordian expanded={expanded2} onChange={handleChange2}>
              <AccordionSummary
                expandIcon={
                  expanded2 ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel2-content"
                id="panel2-header"
              >
                Are there any recurring fees?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
            <StyledAccordian expanded={expanded3} onChange={handleChange3}>
              <AccordionSummary
                expandIcon={
                  expanded3 ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel3-content"
                id="panel3-header"
              >
                Can I use the template on multiple projects?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
            <StyledAccordian expanded={expanded4} onChange={handleChange4}>
              <AccordionSummary
                expandIcon={
                  expanded4 ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel2-content"
                id="panel2-header"
              >
                Can I customize the admin dashboard template to match my brand?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
            <StyledAccordian expanded={expanded5} onChange={handleChange5}>
              <AccordionSummary
                expandIcon={
                  expanded5 ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel2-content"
                id="panel2-header"
              >
                Are there any restrictions on using the template?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
            <StyledAccordian expanded={expanded6} onChange={handleChange6}>
              <AccordionSummary
                expandIcon={
                  expanded6 ? (
                    <IconMinus size="21" stroke="1.5" />
                  ) : (
                    <IconPlus size="21" stroke="1.5" />
                  )
                }
                aria-controls="panel2-content"
                id="panel2-header"
              >
                How can I get support after purchase?
              </AccordionSummary>
              <AccordionDetails>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus
                ex, sit amet blandit leo lobortis eget.
              </AccordionDetails>
            </StyledAccordian>
          </Box>
        </Grid>
      </Grid>
      <Grid container spacing={3} justifyContent="center">
        <Grid
          size={{
            xs: 12,
            lg: 5
          }}>
          <Box
            mt={5}
            borderRadius="8px"
            display="inline-flex"
            justifyContent="center"
            gap="4px"
            alignItems="center"
            fontWeight={500}
            sx={{
              border: `1px dashed ${theme.palette.divider}`,
              padding: '7px 10px',
              cursor: 'pointer',
              '&:hover': {
                borderColor: 'primary.main',
              },
            }}
          >
            <Typography>Still have a question?</Typography>
            <Link
              href="https://discord.com/invite/XujgB8ww4n"
              color="inherit"
              underline="always"
              sx={{
                '&:hover': {
                  color: 'primary.main',
                },
              }}
            >
              Ask on discord{' '}
            </Link>
            <Typography>or</Typography>
            <Link
              href="https://adminmart.com/support/"
              color="inherit"
              underline="always"
              sx={{
                '&:hover': {
                  color: 'primary.main',
                },
              }}
            >
              submit a ticket
            </Link>
            .
          </Box>
        </Grid>
      </Grid>
    </Container>)
  );
};
export default FAQ;

===== src/components/frontend-pages/homepage/features/Features.tsx =====
import { Box, Stack, Typography, Grid2 as Grid, Container } from '@mui/material';
import FeatureTitle from './FeatureTitle';

import icon1 from 'src/assets/images/svgs/icon-briefcase.svg';
import FeatureApp from 'src/assets/images/frontend-pages/homepage/feature-apps.png';
import LogoIcon from 'src/assets/images/logos/logoIcon.svg';
import Screen1 from 'src/assets/images/frontend-pages/homepage/screen1.png';
import IconBubble from 'src/assets/images/svgs/icon-speech-bubble.svg';
import IconFav from 'src/assets/images/svgs/icon-favorites.svg';

const Features = () => {
  return (
    (<Box pt={10} pb={10}>
      <Container maxWidth="lg">
        <FeatureTitle />

        <Grid container spacing={3} mt={3}>
          <Grid
            size={{
              xs: "grow",
              sm: 6,
              lg: "grow"
            }}>
            <Box mb={3} bgcolor="warning.light" borderRadius="24px">
              <Box px={4} py="65px">
                <Stack direction="column" spacing={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={icon1} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    Light & Dark Color Schemes
                  </Typography>
                  <Typography variant="body1">
                    Choose your preferred visual style effortlessly.
                  </Typography>
                </Stack>
              </Box>
            </Box>
            <Box textAlign="center" mb={3} bgcolor="secondary.light" borderRadius="24px">
              <Box px={4} py="50px">
                <Stack direction="column" spacing={2} textAlign="center">
                  <Typography variant="h6" fontWeight={700}>
                    12+ Ready to Use Application Designs
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    Instantly deployable designs for your applications.
                  </Typography>
                </Stack>
              </Box>
              <Box height="70px">
                <img src={FeatureApp} alt="icon1" width={250} height={70} />
              </Box>
            </Box>
          </Grid>
          <Grid
            sx={{
              order: {
                xs: 3,
                lg: 2,
              },
            }}
            size={{
              xs: 12,
              lg: 5
            }}>
            <Box textAlign="center" mb={3} bgcolor="primary.light" borderRadius="24px">
              <Box pt="65px" pb="40px" px={5}>
                <img src={LogoIcon} alt="logo" height="50" width="50" />
                <Typography
                  variant="h2"
                  fontWeight="700"
                  mt={4}
                  sx={{
                    fontSize: {
                      lg: '40px',
                      xs: '35px',
                    },
                  }}
                >
                  New Demos
                </Typography>
                <Typography variant="body1" mt={2}>
                  Brand new demos to help you build the perfect dashboard:{' '}
                  <Typography component="span" fontWeight={600}>
                    Dark and Right-to-Left.
                  </Typography>
                </Typography>
                <Box mt={5} mb={2}>
                  <img
                    src={Screen1}
                    alt="icon1"
                    width={405}
                    height={245}
                    style={{ width: '100%', height: 'auto' }}
                  />
                </Box>
              </Box>
            </Box>
          </Grid>
          <Grid
            sx={{
              order: {
                xs: 2,
                lg: 3,
              },
            }}
            size={{
              xs: "grow",
              sm: 6,
              lg: "grow"
            }}>
            <Box textAlign="center" mb={3} bgcolor="success.light" borderRadius="24px">
              <Box px={4} py="65px">
                <Stack direction="column" spacing={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={IconBubble} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    Code Improvements
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    Benefit from continuous improvements and optimizations.
                  </Typography>
                </Stack>
              </Box>
            </Box>
            <Box textAlign="center" mb={3} bgcolor="error.light" borderRadius="24px">
              <Box px={4} py="65px">
                <Stack direction="column" spacing={2} textAlign="center">
                  <Box textAlign="center">
                    <img src={IconFav} alt="icon1" width={40} height={40} />
                  </Box>
                  <Typography variant="h6" fontWeight={700}>
                    50+ UI Components
                  </Typography>
                  <Typography variant="body1">
                    {' '}
                    A rich collection for seamless user experiences.
                  </Typography>
                </Stack>
              </Box>
            </Box>
          </Grid>
        </Grid>
      </Container>
    </Box>)
  );
};

export default Features;

===== src/components/frontend-pages/homepage/features/FeatureTitle.tsx =====
import { Box, Grid2 as Grid, Typography } from '@mui/material';

const FeatureTitle = () => {
  return (
    (<Grid container spacing={3} justifyContent="center">
      <Grid
        textAlign="center"
        size={{
          xs: 12,
          lg: 6
        }}>
        <Typography variant="body1">
          Introducing Modernize's Light & Dark Skins,{' '}
          <Box fontWeight={500} component="span">
            Exceptional Dashboards
          </Box>
          , and <br />
          Dynamic Pages - Stay Updated on What's New!
        </Typography>
      </Grid>
    </Grid>)
  );
};

export default FeatureTitle;

===== src/components/frontend-pages/homepage/powerful-dozens/carousel.css =====
.dozenscarousel .slick-track {
  display: flex;
  gap: 70px;
}
.dozenscarousel .slick-list {
  max-height: 340px;
}
.dozenscarousel .slick-slide {
  margin-bottom: 20px;
}

.dozenscarousel.slick-slider .slick-list {
  margin: 0 0 0 -15px;
}

.dozenscarousel {
  margin-left: 15px;
}

===== src/components/frontend-pages/homepage/powerful-dozens/DozensCarousel.tsx =====
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import './carousel.css';
import { Box } from '@mui/material';

import Demo1 from 'src/assets/images/landingpage/demos/demo-main.jpg';
import Demo2 from 'src/assets/images/landingpage/demos/demo-dark.jpg';
import Demo3 from 'src/assets/images/landingpage/demos/demo-rtl.jpg';
import Demo4 from 'src/assets/images/landingpage/demos/demo-horizontal.jpg';

import App1 from 'src/assets/images/landingpage/apps/app-chat.jpg';
import App2 from 'src/assets/images/landingpage/apps/app-email.jpg';
import { NavLink } from 'react-router';

const DozensCarousel = () => {
  const settings = {
    dots: false,
    arrows: false,
    infinite: true,
    speed: 4500,
    autoplay: true,
    centerMode: false,
    slidesToShow: 4,
    slidesToScroll: 4,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  return (
    <Slider {...settings} className="dozenscarousel">
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react.adminmart.com/dashboards/modern">
            <img
              src={Demo1}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react-dark.netlify.app/dashboards/ecommerce">
            <img
              src={Demo2}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react-rtl.netlify.app/dashboards/modern">
            <img
              src={Demo3}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react-horizontal.netlify.app/dashboards/modern">
            <img
              src={Demo4}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react.adminmart.com/apps/chats">
            <img
              src={App1}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
      <div>
        <Box
          width={380}
          height={300}
          borderRadius="16px"
          sx={{ boxShadow: (theme) => theme.shadows[10], padding: '0 30px 16px' }}
        >
          <NavLink to="https://modernize-react.adminmart.com/apps/email">
            <img
              src={App2}
              alt="user-img"
              width={380}
              height={300}
              style={{ borderRadius: '16px' }}
            />
          </NavLink>
        </Box>
      </div>
    </Slider>
  );
};

export default DozensCarousel;

===== src/components/frontend-pages/homepage/powerful-dozens/index.tsx =====
import { Box, Grid2 as Grid, Typography, Container } from '@mui/material';
import DozensCarousel from './DozensCarousel';

const features = [
  {
    title: 'High Customizability',
    subtext:
      'Tailor the dashboard to your exact needs. Customize layouts, color schemes, and widgets effortlessly for a personalized user experience.',
  },
  {
    title: 'Powerful Data Analytics',
    subtext:
      'Unlock the true potential of your data with our advanced analytics tools. Gain valuable insights and make data-driven decisions with ease.',
  },
  {
    title: 'Interactive Charts',
    subtext:
      'Visualize complex data sets beautifully with our interactive graphs and charts. Quickly grasp trends and patterns for smarter analysis.',
  },
];

const PowerfulDozens = () => {
  return (<>
    <Container
      sx={{
        maxWidth: '1400px !important',
        mt: {
          xs: '40px',
          lg: '90px',
        },
      }}
    >
      <Box
        bgcolor="primary.light"
        borderRadius="24px"
        sx={{
          py: {
            xs: '40px',
            lg: '70px',
          },
        }}
      >
        <Container maxWidth="lg">
          <Grid container spacing={3} alignItems="center">
            <Grid
              size={{
                xs: 12,
                lg: 6,
                sm: 9
              }}>
              <Typography
                variant="h4"
                mb="55px"
                fontWeight={700}
                fontSize="40px"
                lineHeight="1.3"
                sx={{
                  fontSize: {
                    lg: '40px',
                    xs: '35px',
                  },
                }}
              >
                Discover Powerful Dozens of Purpose-Fit Templates
              </Typography>
            </Grid>
          </Grid>
        </Container>
        <DozensCarousel />
        <Container maxWidth="lg">
          <Grid container spacing={3} mt={5}>
            {features.map((feature, i) => (
              <Grid
                textAlign="center"
                key={i}
                size={{
                  xs: 12,
                  lg: 4,
                  sm: 4
                }}>
                <Typography
                  variant="h4"
                  mb="16px"
                  fontWeight={700}
                  sx={{
                    fontSize: {
                      xs: '17px',
                    },
                  }}
                >
                  {feature.title}
                </Typography>
                <Typography variant="body1" lineHeight="28px">
                  {feature.subtext}
                </Typography>
              </Grid>
            ))}
          </Grid>
        </Container>
      </Box>
    </Container>
  </>);
};

export default PowerfulDozens;

===== src/components/frontend-pages/portfolio/Banner.tsx =====
import { Box, Typography, Container, Grid2 as Grid } from '@mui/material';

const Banner = () => {
  return (<>
    <Box
      bgcolor="primary.light"
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '100px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '100px',
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="center">
          <Grid
            alignItems="center"
            textAlign="center"
            size={{
              xs: 12,
              lg: 8
            }}>
            <Typography color="primary.main" textTransform="uppercase" fontSize="13px">
              Portfolio
            </Typography>
            <Typography
              variant="h1"
              mb={3}
              lineHeight={1.4}
              fontWeight={700}
              sx={{
                fontSize: {
                  xs: '34px',
                  sm: '48px',
                  lg: '56px',
                },
              }}
            >
              Explore Our Latest Works
            </Typography>
          </Grid>
        </Grid>
      </Container>
    </Box>
  </>);
};

export default Banner;

===== src/components/frontend-pages/pricing/Banner.tsx =====
import { Box, Typography, Container, Grid2 as Grid } from '@mui/material';

const Banner = () => {
  return (<>
    <Box
      bgcolor="primary.light"
      sx={{
        paddingTop: {
          xs: '40px',
          lg: '100px',
        },
        paddingBottom: {
          xs: '40px',
          lg: '100px',
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} justifyContent="center">
          <Grid
            alignItems="center"
            textAlign="center"
            size={{
              xs: 12,
              lg: 8
            }}>
            <Typography color="primary.main" textTransform="uppercase" fontSize="13px">
              Pricing Page
            </Typography>
            <Typography
              variant="h1"
              mb={3}
              lineHeight={1.4}
              fontWeight={700}
              sx={{
                fontSize: {
                  xs: '34px',
                  sm: '48px',
                  lg: '56px',
                },
              }}
            >
              Choose Your Plan
            </Typography>
          </Grid>
        </Grid>
      </Container>
    </Box>
  </>);
};

export default Banner;

===== src/components/frontend-pages/shared/c2a/index.tsx =====
import { Box, Grid2 as Grid, Typography, Container, Stack, Button } from '@mui/material';
import useMediaQuery from '@mui/material/useMediaQuery';

import DesignCol from 'src/assets/images/frontend-pages/homepage/design-collection.png';

const C2a = () => {
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const smUp = useMediaQuery((theme: any) => theme.breakpoints.only('sm'));

  return (<>
    <Container
      sx={{
        maxWidth: '1400px !important',
        py: {
          xs: '20px',
          lg: '30px',
        },
      }}
    >
      <Box
        bgcolor="primary.light"
        borderRadius="24px"
        overflow="hidden"
        position="relative"
        sx={{
          py: {
            xs: '40px',
            lg: '70px',
          },
        }}
      >
        <Container maxWidth="lg">
          <Grid container spacing={3} alignItems="center">
            <Grid
              size={{
                xs: 12,
                lg: 6,
                sm: 8
              }}>
              <Typography
                variant="h4"
                mb={3}
                fontWeight={700}
                fontSize="40px"
                lineHeight="1.4"
                sx={{
                  fontSize: {
                    lg: '40px',
                    xs: '30px',
                  },
                }}
              >
                Develop with feature-rich React Dashboard
              </Typography>
              <Stack spacing={{ xs: 1, sm: 2 }} direction="row" flexWrap="wrap" mb={3}>
                <Button variant="contained" size="large" href="/auth/login">
                  Member Login
                </Button>
                <Button variant="outlined" size="large" href="/auth/register">
                  Register as Member
                </Button>
              </Stack>
              <Typography fontSize="14px">
                <Box fontWeight={600} component="span">
                  One-time purchase -
                </Box>{' '}
                no recurring fees.
              </Typography>
            </Grid>
          </Grid>
        </Container>

        {lgUp ? (
          <img
            src={DesignCol}
            alt="design"
            width={900}
            height={365}
            style={{
              position: 'absolute',
              right: 0,
              top: 0,
              width: 'auto',
              height: '100%',
            }}
          />
        ) : null}

        {smUp ? (
          <img
            src={DesignCol}
            alt="design"
            width={900}
            height={365}
            style={{
              position: 'absolute',
              right: '-200px',
              top: 0,
              width: 'auto',
              height: '100%',
            }}
          />
        ) : null}
      </Box>
    </Container>
  </>);
};

export default C2a;

===== src/components/frontend-pages/shared/footer/index.tsx =====
import React from 'react';
import { Box, Grid2 as Grid, Typography, Container, Divider, Stack, Tooltip } from '@mui/material';
import { Link, NavLink } from 'react-router';

import IconFacebook from 'src/assets/images/frontend-pages/icons/icon-facebook.svg';
import IconTwitter from 'src/assets/images/frontend-pages/icons/icon-twitter.svg';
import IconInstagram from 'src/assets/images/frontend-pages/icons/icon-instagram.svg';

import LogoIcon from 'src/assets/images/logos/logoIcon.svg';

const footerLinks = [
  {
    id: 1,
    children: [
      {
        title: true,
        titleText: 'Applications',
      },
      {
        title: false,
        titleText: 'Kanban',
        link: 'https://modernize-react.adminmart.com/apps/kanban',
      },
      {
        title: false,
        titleText: 'Invoice List',
        link: 'https://modernize-react.adminmart.com/apps/invoice/list',
      },
      {
        title: false,
        titleText: 'eCommerce',
        link: 'https://modernize-react.adminmart.com/apps/ecommerce/shop',
      },
      {
        title: false,
        titleText: 'Chat',
        link: 'https://modernize-react.adminmart.com/apps/chats',
      },
      {
        title: false,
        titleText: 'Tickets',
        link: 'https://modernize-react.adminmart.com/apps/tickets',
      },
      {
        title: false,
        titleText: 'Blog',
        link: 'https://modernize-react.adminmart.com/frontend-pages/blog',
      },
    ],
  },
  {
    id: 2,
    children: [
      {
        title: true,
        titleText: 'Forms',
      },
      {
        title: false,
        titleText: 'Form Layout',
        link: 'https://modernize-react.adminmart.com/forms/form-layouts',
      },
      {
        title: false,
        titleText: 'Form Horizontal',
        link: 'https://modernize-react.adminmart.com/forms/form-horizontal',
      },
      {
        title: false,
        titleText: 'Form Wizard',
        link: 'https://modernize-react.adminmart.com/forms/form-wizard',
      },
      {
        title: false,
        titleText: 'Form Validation',
        link: 'https://modernize-react.adminmart.com/forms/form-validation',
      },
      {
        title: false,
        titleText: 'Tiptap Editor',
        link: 'https://modernize-react.adminmart.com/forms/form-tiptap',
      },
    ],
  },
  {
    id: 3,
    children: [
      {
        title: true,
        titleText: 'Tables',
      },
      {
        title: false,
        titleText: 'Basic Table',
        link: 'https://modernize-react.adminmart.com/tables/basic',
      },
      {
        title: false,
        titleText: 'Fixed Header',
        link: 'https://modernize-react.adminmart.com/tables/fixed-header',
      },
      {
        title: false,
        titleText: 'Pagination Table',
        link: 'https://modernize-react.adminmart.com/tables/pagination',
      },
      {
        title: false,
        titleText: 'React Dense Table',
        link: 'https://modernize-react.adminmart.com/react-tables/dense',
      },
      {
        title: false,
        titleText: 'Row Selection Table',
        link: 'https://modernize-react.adminmart.com/react-tables/row-selection',
      },
      {
        title: false,
        titleText: 'Drag n Drop Table',
        link: 'https://modernize-react.adminmart.com/react-tables/drag-drop',
      },
    ],
  },
];

const Footer = () => {
  return (<>
    <Container
      maxWidth="lg"
      sx={{
        pt: {
          xs: '30px',
          lg: '60px',
        },
      }}
    >
      <Grid container spacing={3} justifyContent="space-between" mb={7}>
        {footerLinks.map((footerlink, i) => (
          <Grid
            key={i}
            size={{
              xs: 6,
              sm: 4,
              lg: 2
            }}>
            {footerlink.children.map((child, i) => (
              <React.Fragment key={i}>
                {child.title ? (
                  <Typography fontSize="17px" fontWeight="600" mb="22px">
                    {child.titleText}
                  </Typography>
                ) : (
                  <Link to={`${child.link}`}>
                    <Typography
                      sx={{
                        display: 'block',
                        padding: '10px 0',
                        fontSize: '15px',
                        color: (theme) => theme.palette.text.primary,
                        '&:hover': {
                          color: (theme) => theme.palette.primary.main,
                        },
                      }}
                      component="span"
                    >
                      {child.titleText}
                    </Typography>
                  </Link>
                )}
              </React.Fragment>
            ))}
          </Grid>
        ))}
        <Grid
          size={{
            xs: 6,
            sm: 6,
            lg: 2
          }}>
          <Typography fontSize="17px" fontWeight="600" mb="22px">
            Follow us
          </Typography>

          <Stack direction="row" gap="20px">
            <Tooltip title="Facebook">
              <NavLink to="#">
                <img src={IconFacebook} alt="facebook" width={22} height={22} />
              </NavLink>
            </Tooltip>
            <Tooltip title="Twitter">
              <NavLink to="#">
                <img src={IconTwitter} alt="twitter" width={22} height={22} />
              </NavLink>
            </Tooltip>
            <Tooltip title="Instagram">
              <NavLink to="#">
                <img src={IconInstagram} alt="instagram" width={22} height={22} />
              </NavLink>
            </Tooltip>
          </Stack>
        </Grid>
      </Grid>

      <Divider />

      <Box
        py="40px"
        flexWrap="wrap"
        display="flex"
        justifyContent="space-between"
      >
        <Stack direction="row" gap={1} alignItems="center">
          <img src={LogoIcon} width={20} height={20} alt="logo" />
          <Typography variant="body1" fontSize="15px">
            All rights reserved by Modernize.{' '}
          </Typography>
        </Stack>
        <Typography variant="body1" fontSize="15px">
          Produced by{' '}
          <Typography component={Link} color="primary.main" to="https://adminmart.com/">
            AdminMart
          </Typography>
          .
        </Typography>
      </Box>
    </Container>
  </>);
};

export default Footer;

===== src/components/frontend-pages/shared/header/HeaderAlert.tsx =====
import { useState } from 'react';
import { Box, Stack, Typography, Chip, IconButton } from '@mui/material';
import { styled } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import { IconX } from '@tabler/icons-react';
import NotificationRight from 'src/assets/images/frontend-pages/homepage/notification-right.png';
import NotificationTopRight from 'src/assets/images/frontend-pages/homepage/notification-top-right.png';
import NotificationLeft from 'src/assets/images/frontend-pages/homepage/notification-left.png';

const NotificationBg = styled(Box)(() => ({
  position: 'absolute',
  right: '20%',
  top: 0,
}));

const NotificationBg2 = styled(Box)(() => ({
  position: 'absolute',
  right: 0,
  top: 0,
}));

const NotificationBg3 = styled(Box)(() => ({
  position: 'absolute',
  left: 0,
  bottom: '-5px',
}));

const Header= () => {
  // State to track if the div should be shown or hidden
  const [isVisible, setIsVisible] = useState(true);

  // Function to toggle the visibility
  const handle= () => {
    setIsVisible(false); // Hides the div when the button is clicked
  };

  //   sidebar
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));

  return (
    <>
      {isVisible ? (
        <Box
          bgcolor="primary.main"
          borderRadius={0}
          textAlign="center"
          py="11px"
          position="relative"
        >
          <Stack
            direction={{ xs: 'column', sm: 'row' }}
            spacing="16px"
            justifyContent="center"
            alignItems="center"
          >
            {lgUp ? (
              <Chip
                label="New"
                size="small"
                sx={{
                  backgroundColor: 'rgba(255,255,255,0.15)',
                  color: 'white',
                  borderRadius: '8px',
                }}
              />
            ) : null}

            <Typography
              variant="body1"
              color="white"
              fontWeight={500}
              sx={{
                opacity: '0.8',
              }}
              fontSize="13px"
            >
              Frontend Pages Included
            </Typography>
          </Stack>
          <IconButton
            onClick={handle}
            color="secondary"
            sx={{
              zIndex: 1,
              position: 'absolute',
              right: '6px',
              top: '6px',
            }}
          >
            <IconX size={18} color="white" />
          </IconButton>
          <>
            {lgUp ? (
              <>
                <NotificationBg>
                  <img src={NotificationTopRight} alt="img" width={325} height={30} />
                </NotificationBg>
                <NotificationBg2>
                  <img src={NotificationRight} alt="img" width={200} height={44} />
                </NotificationBg2>
                <NotificationBg3>
                  <img src={NotificationLeft} alt="img" width={325} height={44} />
                </NotificationBg3>
              </>
            ) : null}
          </>
        </Box>
      ) : null}
    </>
  );
};

export default Header;

===== src/components/frontend-pages/shared/header/HpHeader.tsx =====
import React from 'react';
import AppBar from '@mui/material/AppBar';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Drawer from '@mui/material/Drawer';
import IconButton from '@mui/material/IconButton';
import Stack from '@mui/material/Stack';
import Toolbar from '@mui/material/Toolbar';
import useMediaQuery from '@mui/material/useMediaQuery';
import { styled } from '@mui/material/styles';
import Logo from '../../../../layouts/full/shared/logo/Logo';
import Navigations from './Navigations';
import MobileSidebar from './MobileSidebar';
import { IconMenu2 } from '@tabler/icons-react';

const HpHeader = () => {
  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    justifyContent: 'center',
    [theme.breakpoints.up('lg')]: {
      minHeight: '100px',
    },
    backgroundColor: theme.palette.primary.light,
  }));

  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    width: '100%',
    paddingLeft: '0 !important',
    paddingRight: '0 !important',
    color: theme.palette.text.secondary,
    justifyContent: 'space-between',
  }));

  //   sidebar
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const lgDown = useMediaQuery((theme: any) => theme.breakpoints.down('lg'));

  const [open, setOpen] = React.useState(false);

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const toggleDrawer = (newOpen: any) => () => {
    setOpen(newOpen);
  };

  return (
    <AppBarStyled position="sticky" elevation={0}>
      <Container
        sx={{
          maxWidth: '1400px !important',
        }}
      >
        <ToolbarStyled>
          <Logo />
          {lgDown ? (
            <IconButton color="inherit" aria-label="menu" onClick={handleDrawerOpen}>
              <IconMenu2 size="20" />
            </IconButton>
          ) : null}
          {lgUp ? (
            <>
              <Stack spacing={1} direction="row" alignItems="center">
                <Navigations />
              </Stack>
              <Button color="primary" variant="contained" href="/auth/login">
                Log In
              </Button>
            </>
          ) : null}
        </ToolbarStyled>
      </Container>
      <Drawer
        anchor="left"
        open={open}
        variant="temporary"
        onClose={toggleDrawer(false)}
        PaperProps={{
          sx: {
            width: 270,
            border: '0 !important',
            boxShadow: (theme) => theme.shadows[8],
          },
        }}
      >
        <MobileSidebar />
      </Drawer>
    </AppBarStyled>
  );
};

export default HpHeader;

===== src/components/frontend-pages/shared/header/MobileSidebar.tsx =====
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import Logo from '../../../../layouts/full/shared/logo/Logo';
import { NavLinks } from './Navigations';
import { Chip } from '@mui/material';

const MobileSidebar = () => {
  return (
    <>
      <Box px={3}>
        <Logo />
      </Box>
      <Box p={3}>
        <Stack direction="column" spacing={2}>
          {NavLinks.map((navlink, i) => (
            <Button
              color="inherit"
              key={i}
              href={navlink.to}
              sx={{
                justifyContent: 'start',
              }}
            >
              {navlink.title}{' '}
              {navlink.new ? (
                <Chip
                  label="New"
                  size="small"
                  sx={{
                    ml: '6px',
                    borderRadius: '8px',
                    color: 'primary.main',
                    backgroundColor: 'rgba(93, 135, 255, 0.15)',
                  }}
                />
              ) : null}
            </Button>
          ))}

          <Button
            color="inherit"
            href="#"
            sx={{
              justifyContent: 'start',
            }}
          >
            Support
          </Button>
          <Button color="primary" variant="contained" href="/auth/login">
            Get Started
          </Button>
        </Stack>
      </Box>
    </>
  );
};

export default MobileSidebar;

===== src/components/frontend-pages/shared/header/Navigations.tsx =====
import Button from '@mui/material/Button';

import { styled } from '@mui/material/styles';
import { Chip } from '@mui/material';

import { NavLink } from 'react-router';

import { useLocation } from 'react-router';

export const NavLinks = [
  {
    title: 'About Us',
    to: '/frontend-pages/about',
  },
  {
    title: 'Blog',
    to: '/frontend-pages/blog',
  },
  {
    title: 'Portfolio',
    new: true,
    to: '/frontend-pages/portfolio',
  },

  {
    title: 'Dashboard',
    to: '/',
  },
  {
    title: 'Pricing',
    to: '/frontend-pages/pricing',
  },
  {
    title: 'Contact',
    to: '/frontend-pages/contact',
  },
];

const Navigations = () => {
  const StyledButton = styled(Button)(({ theme }) => ({
    fontSize: '15px',
    a: {
      color: theme.palette.text.secondary,
    },

    fontWeight: 500,
    '&.active': {
      backgroundColor: 'rgba(93, 135, 255, 0.15)',
      a: {
        color: theme.palette.primary.main,
      },
    },
  }));

  const location = useLocation();
  const pathname = location.pathname;

  return (
    <>
      {NavLinks.map((navlink, i) => (
        <StyledButton
          color="inherit"
          className={pathname === navlink.to ? 'active' : 'not-active'}
          variant="text"
          key={i}
        >
          <NavLink to={navlink.to}>
            {navlink.title}{' '}
            {navlink.new ? (
              <Chip
                label="New"
                size="small"
                sx={{
                  ml: '6px',
                  borderRadius: '8px',
                  color: 'primary.main',
                  backgroundColor: 'rgba(93, 135, 255, 0.15)',
                }}
              />
            ) : null}
          </NavLink>
        </StyledButton>
      ))}
    </>
  );
};

export default Navigations;

===== src/components/frontend-pages/shared/leadership/carousel.css =====
.leadership-carousel.slick-slider .slick-list {
  margin: 0 -15px;
}

.leadership-carousel {
  margin-left: 15px;
}

===== src/components/frontend-pages/shared/leadership/Contact.tsx =====
import { Box, Stack, Typography, Link, AvatarGroup, Container, Avatar } from '@mui/material';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';

const Contact = () => {
  return (
    <Box
      bgcolor="primary.main"
      borderRadius={0}
      textAlign="center"
      py="14px"
      mt={5}
      position="relative"
    >
      <Container maxWidth="lg">
        <Stack
          direction={{ xs: 'column', sm: 'row' }}
          spacing="16px"
          justifyContent="center"
          alignItems="center"
        >
          <AvatarGroup>
            <Avatar alt="Remy Sharp" src={user1} sx={{ width: 44, height: 44 }} />
            <Avatar alt="Travis Howard" src={user2} sx={{ width: 44, height: 44 }} />
          </AvatarGroup>
          <Typography variant="body1" color="white" fontSize="16px">
            Save valuable time and effort spent searching for a solution.
          </Typography>
          <Link
            href="/"
            underline="always"
            sx={{
              textDecorationColor: 'white',
            }}
          >
            <Typography component="span" fontWeight={600} color="white" fontSize="16px">
              Contact us now
            </Typography>
          </Link>
        </Stack>
      </Container>
    </Box>
  );
};

export default Contact;

===== src/components/frontend-pages/shared/leadership/index.tsx =====
import { Box, Grid2 as Grid, Typography, Container } from '@mui/material';
import 'slick-carousel/slick/slick.css';

import LeaderShipCarousel from './LeaderShipCarousel';
import Contact from './Contact';

const Leadership = () => {
  return (<>
    <Box
      sx={{
        py: {
          xs: 5,
          lg: 10,
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} alignItems="center" mb={6}>
          <Grid
            size={{
              xs: 12,
              lg: 5,
              sm: 8
            }}>
            <Typography
              variant="h4"
              mb={3}
              sx={{
                fontSize: {
                  lg: '40px',
                  xs: '35px',
                },
              }}
            >
              Our leadership
            </Typography>
            <Typography variant="body1" lineHeight="32px">
              Our robust analytics offer rich insights into the information buyers want, informing
              where teams
            </Typography>
          </Grid>
        </Grid>

        <LeaderShipCarousel />
      </Container>
    </Box>
    <Contact />
  </>);
};

export default Leadership;

===== src/components/frontend-pages/shared/leadership/LeaderShipCarousel.tsx =====
import { Box, Typography } from '@mui/material';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import { styled } from '@mui/material/styles';
import { IconArrowLeft, IconArrowRight } from '@tabler/icons-react';
import './carousel.css';
import { useTheme } from '@mui/material/styles';

import user1 from 'src/assets/images/frontend-pages/homepage/user1.jpg';
import user2 from 'src/assets/images/frontend-pages/homepage/user2.jpg';
import user3 from 'src/assets/images/frontend-pages/homepage/user3.jpg';
import user4 from 'src/assets/images/frontend-pages/homepage/user4.jpg';
import user5 from 'src/assets/images/frontend-pages/homepage/user5.jpg';

function SampleNextArrow(props: any) {
  const { className, onClick } = props;
  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      className={className}
      sx={{
        cursor: 'pointer',
        position: 'absolute',
        top: { xs: 'unset ', sm: '-100px' },
        bottom: { xs: '-60px', sm: 'unset' },
        right: 0,
        backgroundColor: (theme) => theme.palette.grey[100],
        width: '48px',
        height: '48px',
        borderRadius: '50%',
      }}
      onClick={onClick}
    >
      <IconArrowRight />
    </Box>
  );
}

function SamplePrevArrow(props: any) {
  const { className, onClick } = props;
  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      className={className}
      sx={{
        cursor: 'pointer',
        position: 'absolute',
        top: { xs: 'unset ', sm: '-100px' },
        bottom: { xs: '-60px', sm: 'unset' },
        right: '60px',
        backgroundColor: (theme) => theme.palette.grey[100],
        width: '48px',
        height: '48px',
        borderRadius: '50%',
      }}
      onClick={onClick}
    >
      <IconArrowLeft />
    </Box>
  );
}

const LeaderShipCarousel = () => {
  const theme = useTheme();

  const slideStyle = {
    padding: '0 30px', // Add padding between slides
  };

  const settings = {
    dots: false,
    infinite: true,
    speed: 500,
    slidesToShow: 4,
    className: 'slider variable-width',
    centerMode: false,
    slidesToScroll: 4,
    nextArrow: <SampleNextArrow />,
    prevArrow: <SamplePrevArrow />,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  const UserBox = styled(Box)(() => ({
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : 'white',
    maxWidth: 'calc(100% - 51px)',
    marginLeft: '15px',
    borderRadius: '8px',
    marginTop: '-30px !important',
    boxShadow: '0px 6px 12px rgba(127, 145, 156, 0.12)',
    marginBottom: '10px',
  }));

  return (
    <Slider {...settings} className="leadership-carousel">
      <div style={slideStyle}>
        <img src={user1} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Alex Martinez
          </Typography>
          <Typography variant="body1">CEO & Co-Founder</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user2} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Jordan Nguyen
          </Typography>
          <Typography variant="body1">CTO & Co-Founder</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user3} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Taylor Roberts
          </Typography>
          <Typography variant="body1">Product Manager</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user4} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox px="10px" py="16px" textAlign="center" position="relative" zIndex="1">
          <Typography variant="h5" mb={1}>
            Morgan Patel
          </Typography>
          <Typography variant="body1">Lead Developer</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user5} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Kiana Collins
          </Typography>
          <Typography variant="body1">Software Developer</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user1} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Alex Martinez
          </Typography>
          <Typography variant="body1">CEO & Co-Founder</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user2} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Jordan Nguyen
          </Typography>
          <Typography variant="body1">CTO & Co-Founder</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user3} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Taylor Roberts
          </Typography>
          <Typography variant="body1">Product Manager</Typography>
        </UserBox>
      </div>
      <div style={slideStyle}>
        <img src={user4} alt="user-img" width={270} height={290} style={{ borderRadius: '16px' }} />
        <UserBox
          bgcolor="white"
          px="10px"
          py="16px"
          textAlign="center"
          position="relative"
          zIndex="1"
        >
          <Typography variant="h5" mb={1}>
            Morgan Patel
          </Typography>
          <Typography variant="body1">Lead Developer</Typography>
        </UserBox>
      </div>
    </Slider>
  );
};

export default LeaderShipCarousel;

===== src/components/frontend-pages/shared/pricing/index.tsx =====
import { Box, Grid2 as Grid, Typography, Container } from '@mui/material';
import PricingCard from './PricingCard';
import PaymentMethods from './PaymentMethods';

const Pricing = () => {
  return (<>
    <Box
      sx={{
        py: {
          xs: 5,
          lg: 11,
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} alignItems="center" justifyContent="center">
          <Grid
            size={{
              xs: 12,
              lg: 7
            }}>
            <Typography
              textAlign="center"
              variant="h4"
              lineHeight={1.4}
              mb={6}
              fontWeight={700}
              sx={{
                fontSize: {
                  lg: '40px',
                  xs: '35px',
                },
              }}
            >
              111,476+ Trusted developers & many tech giants as well
            </Typography>
          </Grid>
        </Grid>

        <PricingCard />

        <PaymentMethods />
      </Container>
    </Box>
  </>);
};

export default Pricing;

===== src/components/frontend-pages/shared/pricing/PaymentMethods.tsx =====
import { Box, Link, Typography, Tooltip } from '@mui/material';

import IconVisa from 'src/assets/images/frontend-pages/payments/icon-visa.svg';
import IconMasterCard from 'src/assets/images/frontend-pages/payments/icon-mastercard.svg';
import IconAmericanExpress from 'src/assets/images/frontend-pages/payments/icon-american-express.svg';
import IconDiscover from 'src/assets/images/frontend-pages/payments/icon-discover.svg';
import IconPaypal from 'src/assets/images/frontend-pages/payments/icon-paypal.svg';
import IcoMasetro from 'src/assets/images/frontend-pages/payments/icon-masetro.svg';
import IconJcb from 'src/assets/images/frontend-pages/payments/icon-jcb.svg';
import IconDiners from 'src/assets/images/frontend-pages/payments/icon-diners.svg';

const PaymentMethods = () => {
  return (
    <>
      <Typography textAlign="center" mt={6} variant="body1">
        Secured payment with PayPal & Razorpay
      </Typography>

      <Box
        display="flex"
        flexWrap="wrap"
        alignItems="center"
        justifyContent="center"
        mt={4}
        gap="56px"
      >
        <Link href="#">
          <Tooltip title="Visa">
            <img src={IconVisa} width={60} height={20} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="Mastercard">
            <img src={IconMasterCard} width={45} height={25} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="American express">
            <img src={IconAmericanExpress} width={80} height={34} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="Discover">
            <img src={IconDiscover} width={95} height={16} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="Paypal">
            <img src={IconPaypal} width={90} height={24} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="Maestro">
            <img src={IcoMasetro} width={45} height={28} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="JCB">
            <img src={IconJcb} width={31} height={24} alt="payment" />
          </Tooltip>
        </Link>
        <Link href="#">
          <Tooltip title="Diners">
            <img src={IconDiners} width={92} height={24} alt="payment" />
          </Tooltip>
        </Link>
      </Box>
    </>
  );
};

export default PaymentMethods;

===== src/components/frontend-pages/shared/pricing/PricingCard.tsx =====
import { Box, Grid2 as Grid, Typography, Chip, CardContent, Divider, Stack, Button } from '@mui/material';
import BlankCard from '../../../shared/BlankCard';

import IconCheck from 'src/assets/images/frontend-pages/icons/icon-check.svg';
import IconClose from 'src/assets/images/frontend-pages/icons/icon-close.svg';

const Licenses = [
  {
    id: 1,
    type: 'Single Use',
    isPopular: false,
    typeText: 'Use for single end product which end users can’t be charged for.',
    price: '49',
    fullSourceCode: true,
    isDoc: true,
    isSass: false,
    isSingleProject: true,
    isSupport: true,
    isUpdate: true,
  },
  {
    id: 2,
    type: 'Multiple Use',
    isPopular: false,
    typeText: 'Use for unlimited end products end users can’t be charged for.',
    price: '89',
    fullSourceCode: true,
    isDoc: true,
    isSass: false,
    isSingleProject: false,
    isSupport: true,
    isUpdate: true,
  },
  {
    id: 3,
    type: 'Extended Use',
    isPopular: true,
    typeText: 'Use for single end product which end users can be charged for.',
    price: '299',
    fullSourceCode: true,
    isDoc: true,
    isSass: true,
    isSingleProject: true,
    isSupport: true,
    isUpdate: true,
  },
  {
    id: 4,
    type: 'Unlimited Use',
    isPopular: false,
    typeText: 'Use in unlimited end products end users can be charged for.',
    price: '499',
    fullSourceCode: true,
    isDoc: true,
    isSass: true,
    isSingleProject: false,
    isSupport: true,
    isUpdate: true,
  },
];

const PricingCard = () => {
  return (<>
    <Grid container spacing={3}>
      {Licenses.map((license, i) => (
        <Grid
          key={i}
          size={{
            xs: 12,
            lg: 3,
            sm: 6
          }}>
          <BlankCard>
            <CardContent sx={{ p: '32px' }}>
              <Box display="flex" alignItems="center" mb={2}>
                <Typography variant="h4" fontSize="20px" fontWeight={600}>
                  {license.type}
                </Typography>
                {license.isPopular ? (
                  <Chip
                    label="Popular"
                    size="small"
                    sx={{
                      ml: '6px',
                      borderRadius: '8px',
                      color: 'primary.main',
                      backgroundColor: 'rgba(93, 135, 255, 0.15)',
                    }}
                  />
                ) : null}
              </Box>

              <Typography fontSize="13px" mb={4}>
                {license.typeText}
              </Typography>
              <Divider />
              <Stack mt={4} direction="row" gap="8px" alignItems="end">
                <Typography variant="h4" fontSize="40px" fontWeight={700}>
                  ${license.price}
                </Typography>
                <Typography variant="body2" fontSize="14px">
                  / one time pay
                </Typography>
              </Stack>
              <Stack my={4} gap="12px">
                <Box display="flex" alignItems="center" gap="8px">
                  {license.fullSourceCode ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconClose} alt="circle" width={20} height={20} />
                  )}
                  <Typography fontSize="14px" fontWeight={500}>
                    Full source code
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap="8px">
                  {license.isDoc ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconClose} alt="circle" width={20} height={20} />
                  )}
                  <Typography fontSize="14px" fontWeight={500}>
                    Documentation
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap="8px">
                  {license.isSass ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconClose} alt="circle" width={20} height={20} />
                  )}
                  <Typography
                    fontSize="14px"
                    sx={{
                      color: `${license.isSass ? 'text.primary' : '#99AABA'}`,
                      fontWeight: `${license.isSass ? '500' : '400'}`,
                    }}
                  >
                    Use in SaaS app
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap="8px">
                  {license.isSingleProject ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  )}
                  <Typography
                    fontSize="14px"
                    whiteSpace="nowrap"
                    gap="2px"
                    fontWeight={500}
                    display="flex"
                  >
                    <Box fontWeight={700} component="span" whiteSpace="nowrap">
                      {' '}
                      {license.isSingleProject ? 'One' : 'Unlimited'}{' '}
                    </Box>
                    Project
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap="8px">
                  {license.isSupport ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconClose} alt="circle" width={20} height={20} />
                  )}
                  <Typography
                    fontSize="14px"
                    whiteSpace="nowrap"
                    gap="2px"
                    fontWeight={500}
                    display="flex"
                  >
                    <Box fontWeight={700} component="span" whiteSpace="nowrap">
                      One Year
                    </Box>{' '}
                    Technical Support
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap="8px">
                  {license.isUpdate ? (
                    <img src={IconCheck} alt="circle" width={20} height={20} />
                  ) : (
                    <img src={IconClose} alt="circle" width={20} height={20} />
                  )}
                  <Typography
                    fontSize="14px"
                    whiteSpace="nowrap"
                    gap="2px"
                    fontWeight={500}
                    display="flex"
                  >
                    <Box fontWeight={700} component="span" whiteSpace="nowrap">
                      One Year
                    </Box>{' '}
                    Free Updates
                  </Typography>
                </Box>
              </Stack>
              <Button fullWidth variant="contained" size="large">
                Purchase Now
              </Button>
            </CardContent>
          </BlankCard>
        </Grid>
      ))}
    </Grid>
  </>);
};

export default PricingCard;

===== src/components/frontend-pages/shared/reviews/ContentArea.tsx =====
import { Typography } from '@mui/material';

import LogoIcon from 'src/assets/images/logos/logoIcon.svg';

const ContentArea = () => {
  return (
    <>
      <Typography
        variant="h4"
        lineHeight={1.4}
        mb={3}
        fontWeight={700}
        sx={{
          fontSize: {
            lg: '40px',
            xs: '35px',
          },
          mr: {
            xs: 0,
            lg: 4,
          },
        }}
      >
        What our clients think{' '}
        <img
          src={LogoIcon}
          alt="logo"
          width={40}
          height={40}
          style={{ margin: '0 8px', verticalAlign: 'middle' }}
        />{' '}
        about us?
      </Typography>
      <Typography variant="body1" lineHeight={1.8}>
        Our users' feedback is a testament to our commitment to quality and user satisfaction. Read
        what they have to say about their journey with us.
      </Typography>
    </>
  );
};

export default ContentArea;

===== src/components/frontend-pages/shared/reviews/index.tsx =====
import { Box, Grid2 as Grid, Container } from '@mui/material';
import ContentArea from './ContentArea';
import ReviewCarousel from './ReviewCarousel';

const Reviews = () => {
  return (<>
    <Box
      sx={{
        py: {
          xs: 5,
          lg: 10,
        },
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} alignItems="center" justifyContent="space-between">
          <Grid
            pr={6}
            size={{
              xs: 12,
              lg: 5,
              sm: 8
            }}>
            <ContentArea />
          </Grid>
          <Grid
            size={{
              xs: 12,
              lg: 6,
              sm: 12
            }}>
            <Grid container spacing={3} justifyContent="center">
              <Grid
                size={{
                  xs: 12,
                  lg: 10
                }}>
                <ReviewCarousel />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Container>
    </Box>
  </>);
};

export default Reviews;

===== src/components/frontend-pages/shared/reviews/ReviewCarousel.tsx =====
import { useState, useRef } from 'react';
import { Avatar, CardContent, Divider, Stack, Typography, Box, Paper } from '@mui/material';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import { IconChevronLeft, IconChevronRight } from '@tabler/icons-react';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';

function SampleNextArrow(props: any) {
  const { className, onClick } = props;
  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      className={className}
      sx={{
        cursor: 'pointer',
        position: 'absolute',
        left: '125px',
        zIndex: 1,
        bottom: '45px',
        right: 0,
        backgroundColor: (theme) => theme.palette.grey[100],
        width: '32px',
        height: '32px',
        borderRadius: '50%',
      }}
      onClick={onClick}
    >
      <IconChevronRight strokeWidth={1.5} size={20} />
    </Box>
  );
}

function SamplePrevArrow(props: any) {
  const { className, onClick } = props;
  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      className={className}
      sx={{
        cursor: 'pointer',
        position: 'absolute',
        left: '48px',
        zIndex: 1,
        bottom: '45px',
        right: '60px',
        backgroundColor: (theme) => theme.palette.grey[100],
        width: '32px',
        height: '32px',
        borderRadius: '50%',
      }}
      onClick={onClick}
    >
      <IconChevronLeft strokeWidth={1.5} size={20} />
    </Box>
  );
}

const Reviews = [
  {
    id: 1,
    img: user1,
    name: 'Jenny Wilson',
    text: 'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recommended!',
  },
  {
    id: 2,
    img: user2,
    name: 'Jenny Wilson',
    text: 'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recommended!',
  },
  {
    id: 3,
    img: user3,
    name: 'Jenny Wilson',
    text: 'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recommended!',
  },
  {
    id: 4,
    img: user4,
    name: 'Jenny Wilson',
    text: 'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recommended!',
  },
  {
    id: 5,
    img: user5,
    name: 'Jenny Wilson',
    text: 'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recommended!',
  },
];

const ReviewCarousel = () => {
  const [, setOldSlide] = useState(0);
  const [activeSlide, setActiveSlide] = useState(1);
  const [, setActiveSlide2] = useState(1);

  let sliderRef = useRef<Slider | null>(null);

  const settings = {
    dots: false,
    fade: true,
    infinite: true,
    speed: 500,

    slidesToShow: 1,
    slidesToScroll: 1,
    nextArrow: <SampleNextArrow />,
    prevArrow: <SamplePrevArrow />,
    beforeChange: (current: any, next: any) => {
      setOldSlide(current);
      setActiveSlide(next);
    },
    afterChange: (current: any) => setActiveSlide2(current),
  };

  return (
    <>
      <Slider
        ref={(slider: Slider | null) => {
          sliderRef.current = slider;
        }}
        {...settings}
      >
        {Reviews.map((review, i) => (
          <div key={i}>
            <Paper variant="outlined" sx={{ borderRadius: '16px' }}>
              <CardContent sx={{ p: '48px !important' }}>
                <Typography variant="h4" lineHeight={1.4} mb={3} fontWeight={600} fontSize="24px">
                  Features avaibility
                </Typography>
                <Stack direction="row" alignItems="center" gap={3} mb={3}>
                  <Avatar src={review.img} alt="user" />
                  <Typography variant="body1" fontWeight={600}>
                    {review.name}
                  </Typography>
                </Stack>
                <Typography variant="body1" lineHeight={1.8} mb={2}>
                  {review.text}
                </Typography>
                <Divider />

                <Typography fontSize="14px" fontWeight={500} ml={5} mt={3}>
                  {' '}
                  {activeSlide} / {Reviews.length}
                </Typography>
              </CardContent>
            </Paper>
          </div>
        ))}
      </Slider>
    </>
  );
};

export default ReviewCarousel;

===== src/components/frontend-pages/shared/scroll-to-top/index.tsx =====
import { useEffect, useState } from 'react';
import { IconArrowUp } from '@tabler/icons-react';
import { Fab } from '@mui/material';

const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);

  // Function to handle scroll to top
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth', // Smooth scrolling
    });
  };

  // Function to handle showing/hiding the button on scroll
  const toggleVisibility = () => {
    if (window.pageYOffset > 300) {
      setIsVisible(true);
    } else {
      setIsVisible(false);
    }
  };

  useEffect(() => {
    window.addEventListener('scroll', toggleVisibility);

    return () => {
      window.removeEventListener('scroll', toggleVisibility);
    };
  }, []);

  return (
    <>
      {' '}
      {isVisible ? (
        <Fab
          color="primary"
          onClick={scrollToTop}
          sx={{
            position: 'fixed',
            right: '30px',
            bottom: '30px',
          }}
        >
          <IconArrowUp size={24} />
        </Fab>
      ) : null}
    </>
  );
};

export default ScrollToTop;

===== src/components/GlobalLoading.tsx =====
// File: src/components/GlobalLoading.tsx
import React, { useState, useEffect } from 'react';
import { Backdrop, CircularProgress, Typography } from '@mui/material';

const GlobalLoading: React.FC = () => {
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const handleLoading = (event: any) => {
      setLoading(event.detail?.loading || false);
    };

    window.addEventListener('apiLoading', handleLoading);
    
    return () => {
      window.removeEventListener('apiLoading', handleLoading);
    };
  }, []);

  if (!loading) return null;

  return (
    <Backdrop
      sx={{
        color: '#fff',
        zIndex: (theme) => theme.zIndex.drawer + 1,
        flexDirection: 'column',
        gap: 2
      }}
      open={loading}
    >
      <CircularProgress color="inherit" />
      <Typography variant="body1">
        جاري التحميل...
      </Typography>
    </Backdrop>
  );
};

export default GlobalLoading;

===== src/components/GlobalPrintHandler.tsx =====
// File: src/components/GlobalPrintHandler.tsx
import React, { useEffect, useCallback } from 'react';
import { useReactToPrint } from 'react-to-print';
import { useThermalPrint } from '../hooks/useThermalPrint';

interface Props {
  children: React.ReactNode;
  thermalPrinterConfig?: {
    enabled: boolean;
    type: 'usb' | 'network';
    networkConfig?: {
      ip: string;
      port: number;
    };
  };
}

const GlobalPrintHandler: React.FC<Props> = ({ 
  children, 
  thermalPrinterConfig 
}) => {
  const printRef = React.useRef<HTMLDivElement>(null);
  const { print: thermalPrint } = useThermalPrint(thermalPrinterConfig);

  // ⭐ تحديث useReactToPrint للإصدار الجديد
  const handleNormalPrint = useReactToPrint({
    contentRef: printRef, // ⭐ استخدام contentRef بدلاً من content
    pageStyle: `
      @page {
        size: A4;
        margin: 0.5in;
      }
      @media print {
        body { -webkit-print-color-adjust: exact; }
        .no-print { display: none !important; }
        .print-only { display: block !important; }
      }
    `
  });

  // دالة الطباعة الحرارية
  const handleThermalPrint = useCallback(async () => {
    if (!thermalPrinterConfig?.enabled) {
      handleNormalPrint();
      return;
    }

    try {
      const content = printRef.current?.innerText || '';
      const result = await thermalPrint(content);
      
      if (!(result as { success: boolean }).success) {
        handleNormalPrint();
      }
    } catch (error) {
      handleNormalPrint();
    }
  }, [thermalPrinterConfig, thermalPrint, handleNormalPrint]);

  // معالج Ctrl+P
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if ((event.ctrlKey || event.metaKey) && event.key === 'p') {
      event.preventDefault();
      
      if (thermalPrinterConfig?.enabled) {
        handleThermalPrint();
      } else {
        handleNormalPrint();
      }
    }
  }, [thermalPrinterConfig, handleThermalPrint, handleNormalPrint]);

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);

  return (
    <div ref={printRef}>
      {children}
    </div>
  );
};

export default GlobalPrintHandler;

===== src/components/landingpage/animation/Animation.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';

// third party
import { useInView } from 'react-intersection-observer';
import { motion, useAnimation } from 'framer-motion';

function AnimateFadeIn({ children }: { children: React.ReactElement }) {
  const controls = useAnimation();
  const [ref, inView] = useInView();

  useEffect(() => {
    if (inView) {
      controls.start('visible');
    }
  }, [controls, inView]);

  return (
    <motion.div
      ref={ref}
      animate={controls}
      initial="hidden"
      transition={{ duration: 0.3 }}
      variants={{
        visible: { opacity: 1, translateY: 0 },
        hidden: { opacity: 0, translateY: 275 },
      }}
    >
      {children}
    </motion.div>
  );
}

export default AnimateFadeIn;

===== src/components/landingpage/banner/Banner.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Container, useMediaQuery, styled, Stack, Theme } from '@mui/material';
import BannerContent from './BannerContent';
import bannerbgImg1 from 'src/assets/images/landingpage/bannerimg1.svg';
import bannerbgImg2 from 'src/assets/images/landingpage/bannerimg2.svg';

const Banner = () => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  const SliderBox = styled(Box)(() => ({
    '@keyframes slideup': {
      '0%': {
        transform: 'translate3d(0, 0, 0)',
      },
      '100% ': {
        transform: 'translate3d(0px, -100%, 0px)',
      },
    },

    animation: 'slideup 35s linear infinite',
  }));

  const SliderBox2 = styled(Box)(() => ({
    '@keyframes slideDown': {
      '0%': {
        transform: 'translate3d(0, -100%, 0)',
      },
      '100% ': {
        transform: 'translate3d(0px, 0, 0px)',
      },
    },

    animation: 'slideDown 35s linear infinite',
  }));

  return (
    (<Box mb={10} sx={{ overflow: 'hidden' }}>
      <Container maxWidth="lg">
        <Grid container spacing={3} alignItems="center">
          <Grid
            size={{
              xs: 12,
              lg: 6,
              sm: 8
            }}>
            <BannerContent />
          </Grid>
          {lgUp ? (
            <Grid
              size={{
                xs: 12,
                lg: 6
              }}>
              <Box
                p={3.2}
                sx={{
                  backgroundColor: (theme) => theme.palette.primary.light,
                  minWidth: '2000px',
                  height: 'calc(100vh - 100px)',
                  maxHeight: '790px',
                }}
              >
                <Stack direction={'row'}>
                  <Box>
                    <SliderBox>
                      <img src={bannerbgImg1} alt="banner" />
                    </SliderBox>
                    <SliderBox>
                      <img src={bannerbgImg1} alt="banner" />
                    </SliderBox>
                  </Box>
                  <Box>
                    <SliderBox2>
                      <img src={bannerbgImg2} alt="banner" />
                    </SliderBox2>
                    <SliderBox2>
                      <img src={bannerbgImg2} alt="banner" />
                    </SliderBox2>
                  </Box>
                </Stack>
              </Box>
            </Grid>
          ) : null}
        </Grid>
      </Container>
    </Box>)
  );
};

export default Banner;

===== src/components/landingpage/banner/BannerContent.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Typography, Box, Button, Stack, styled, useMediaQuery, Theme } from '@mui/material';
import { IconRocket } from '@tabler/icons-react';


// third party

import { motion } from 'framer-motion';

const StyledButton = styled(Button)(() => ({
  padding: '13px 48px',
  fontSize: '16px',
}));

const BannerContent = () => {

  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));
  
  return (
    <Box mt={lgDown ? 8 : 0}>
      <motion.div
        initial={{ opacity: 0, translateY: 550 }}
        animate={{ opacity: 1, translateY: 0 }}
        transition={{
          type: 'spring',
          stiffness: 150,
          damping: 30,
        }}
      >
        <Typography variant="h6" display={'flex'} gap={1} mb={2}>
          <Typography color={'secondary'}>
            <IconRocket size={'21'} />
          </Typography>{' '}
          Kick start your project with
        </Typography>

        <Typography
          variant="h1"
          fontWeight={900}
          sx={{
            fontSize: {
              md: '54px',
            },
            lineHeight: {
              md: '60px',
            },
          }}
        >
          Most powerful &{' '}
          <Typography component={'span'} variant="inherit" color={'primary'}>
            Developer friendly
          </Typography>{' '}
          React dashboard
        </Typography>
      </motion.div>
      <Box pt={4} pb={3}>
        <motion.div
          initial={{ opacity: 0, translateY: 550 }}
          animate={{ opacity: 1, translateY: 0 }}
          transition={{
            type: 'spring',
            stiffness: 150,
            damping: 30,
            delay: 0.2,
          }}
        >
          <Typography variant="h5" fontWeight={300}>
            Modernize comes with light & dark color skins, well designed dashboards, applications
            and pages.
          </Typography>
        </motion.div>
      </Box>
      <motion.div
        initial={{ opacity: 0, translateY: 550 }}
        animate={{ opacity: 1, translateY: 0 }}
        transition={{
          type: 'spring',
          stiffness: 150,
          damping: 30,
          delay: 0.4,
        }}
      >
        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} mt={3}>
          <StyledButton variant="contained" color="primary" href="/auth/login">
            Login
          </StyledButton>

          <StyledButton variant="outlined" href="/dashboards/modern">
            Live Preview
          </StyledButton>
        </Stack>
      </motion.div>
    </Box>
  );
};

export default BannerContent;

===== src/components/landingpage/c2a/C2a.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  CardContent,
  Grid2 as Grid,
  Typography,
  Box,
  styled,
  Button,
  Container,
  Stack,
} from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import AnimationFadeIn from '../animation/Animation';
import bannerbgImg from 'src/assets/images/landingpage/shape/line-bg.svg';

const ImgCard = styled(BlankCard)(() => ({
  backgroundImage: `url(${bannerbgImg})`,
  backgroundRepeat: 'no-repeat',
  backgroundPosition: 'center center',
}));

const StyledButton = styled(Button)(() => ({
  padding: '13px 48px',
  fontSize: '16px',
}));

const StyledButton2 = styled(Button)(({ theme }) => ({
  padding: '13px 48px',
  fontSize: '16px',
  background: theme.palette.background.paper,
}));

const C2a = () => {
  return (
    (<Box
      pt={7}
      sx={{
        pb: {
          xs: '70px',
          lg: '120px',
        },
      }}
    >
      <Container maxWidth="lg">
        <AnimationFadeIn>
          <Grid container justifyContent="center" spacing={3}>
            <Grid
              size={{
                xs: 12,
                sm: 10,
                lg: 6
              }}>
              <ImgCard>
                <CardContent sx={{ py: 5 }}>
                  <Box textAlign="center">
                    <Typography variant="h3" fontWeight={600}>
                      Haven't found an answer to your question?
                    </Typography>
                    <Typography variant="subtitle1" color="textSecondary" mt={1}>
                      Connect with us either on discord or email us
                    </Typography>
                  </Box>
                  <Stack
                    direction={{ xs: 'column', sm: 'row' }}
                    spacing={3}
                    mt={5}
                    justifyContent="center"
                    mb={3}
                  >
                    <StyledButton
                      variant="contained"
                      color="primary"
                      href="https://discord.gg/XujgB8ww4n"
                    >
                      Ask on Discord
                    </StyledButton>
                    <StyledButton2
                      variant="outlined"
                      color="secondary"
                      href="https://adminmart.com/support"
                    >
                      Submit Ticket
                    </StyledButton2>
                  </Stack>
                </CardContent>
              </ImgCard>
            </Grid>
          </Grid>
        </AnimationFadeIn>
      </Container>
    </Box>)
  );
};

export default C2a;

===== src/components/landingpage/c2a/C2a2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, Box, Button, styled, Container, Stack } from '@mui/material';
import c2aImg from 'src/assets/images/landingpage/background/c2a.png';
import GuaranteeCard from './GuaranteeCard';

const StyledButton = styled(Button)(({ theme }) => ({
  padding: '13px 34px',
  fontSize: '16px',
  backgroundColor: theme.palette.background.paper,
  color: theme.palette.primary.main,
  fontWeight: 600,
}));

const StyledButton2 = styled(Button)(({ theme }) => ({
  padding: '13px 34px',
  fontSize: '16px',
  borderColor: theme.palette.background.paper,
  color: theme.palette.background.paper,
  fontWeight: 600,
  '&:hover': {
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.primary.main,
  },
}));

const C2a2 = () => {
  return (
    (<Box>
      <Box
        bgcolor="primary.main"
        sx={{
          pt: '60px',
          pb: '30px',
        }}
      >
        <Container maxWidth="lg">
          <Grid container justifyContent="space-between" spacing={3}>
            <Grid
              size={{
                xs: 12,
                sm: 12,
                lg: 5
              }}>
              <Typography variant="h2" color="background.paper" fontWeight={700} mt={4}>
                Build your app with our highly customizable React based Dashboard
              </Typography>

              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={3} mt={3}>
                <StyledButton variant="contained" color="inherit" href="/auth/login">
                  Login
                </StyledButton>
                <StyledButton2
                  variant="outlined"
                  color="inherit"
                  href="/auth/register"
                >
                  Register
                </StyledButton2>
              </Stack>
            </Grid>
            <Grid
              size={{
                xs: 12,
                lg: 5
              }}>
              <Box
                sx={{
                  textAlign: {
                    xs: 'center',
                    lg: 'right',
                  },
                }}
              >
                <img src={c2aImg} alt="img" width="330" />
              </Box>
            </Grid>
          </Grid>
        </Container>
      </Box>
      <Container maxWidth="lg">
        <GuaranteeCard />
      </Container>
    </Box>)
  );
};

export default C2a2;

===== src/components/landingpage/c2a/GuaranteeCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Typography, Box, Button, styled, CardContent, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import badgeImg from 'src/assets/images/landingpage/shape/badge.svg';
import lineImg from 'src/assets/images/landingpage/shape/line-bg-2.svg';

const ImgCard = styled(BlankCard)(() => ({
  backgroundImage: `url(${lineImg})`,
  backgroundRepeat: 'no-repeat',
  backgroundPosition: 'center center',
  marginTop: '-70px',
}));

const StyledButton = styled(Button)(() => ({
  padding: '13px 34px',
  fontSize: '16px',
}));

const GuaranteeCard = () => {
  return (
    <ImgCard>
      <CardContent>
        <Stack
          direction={{ xs: 'column', sm: 'row' }}
          alignItems="center"
          justifyContent="space-between"
        >
          <Stack direction="row" alignItems="center">
            <Box pl={2}>
              <img src={badgeImg} alt="bagde" />
            </Box>
            <Box pl={3}>
              <Typography variant="h4">100% moneyback guarantee</Typography>
              <Typography variant="subtitle1" color="textSecondary">
                We offer 48 hours moneyback guarantee.
              </Typography>
            </Box>
          </Stack>
          <Stack
            sx={{
              mt: {
                xs: 2,
                sm: 0,
              },
              mr: {
                lg: 2,
              },
              width: {
                xs: '100%',
                sm: 'auto',
              },
            }}
          >
            <StyledButton variant="contained" color="primary" href="#">
              Contact
            </StyledButton>
          </Stack>
        </Stack>
      </CardContent>
    </ImgCard>
  );
};

export default GuaranteeCard;

===== src/components/landingpage/demo-slider/DemoSlider.tsx =====
import {
  Box,
  Container,
  Button,
  styled,
  Typography,
  Grid2 as Grid,
  Avatar,
  Chip,
  useTheme,
} from '@mui/material';

// images
import mainDemo from 'src/assets/images/landingpage/demos/demo-main.jpg';
import darkDemo from 'src/assets/images/landingpage/demos/demo-dark.jpg';
import horizontalDemo from 'src/assets/images/landingpage/demos/demo-horizontal.jpg';
import minisidebarDemo from 'src/assets/images/landingpage/demos/demo-firebase.jpg';
import rtlDemo from 'src/assets/images/landingpage/demos/demo-rtl.jpg';

import app1 from 'src/assets/images/landingpage/apps/app-calendar.jpg';
import app2 from 'src/assets/images/landingpage/apps/app-chat.jpg';
import app3 from 'src/assets/images/landingpage/apps/app-contact.jpg';
import app4 from 'src/assets/images/landingpage/apps/app-email.jpg';
import app5 from 'src/assets/images/landingpage/apps/app-note.jpg';
import app6 from 'src/assets/images/landingpage/apps/app-user-profile.jpg';
import app7 from 'src/assets/images/landingpage/apps/app-blog.jpg';
import app8 from 'src/assets/images/landingpage/apps/app-ticket.jpg';
import app9 from 'src/assets/images/landingpage/apps/app-ecommerce-shop.jpg';
import app10 from 'src/assets/images/landingpage/apps/app-ecommerce-detail.jpg';
import app11 from 'src/assets/images/landingpage/apps/app-ecommerce-checkout.jpg';
import app12 from 'src/assets/images/landingpage/apps/app-ecommerce-list.jpg';
import app13 from 'src/assets/images/landingpage/apps/app-blog-detail.jpg';
import app14 from 'src/assets/images/landingpage/apps/app-kanban.jpg';
import app15 from 'src/assets/images/landingpage/apps/app-invoice.jpg';

import Page1 from 'src/assets/images/landingpage/f-pages/page-homepage.jpg';
import Page2 from 'src/assets/images/landingpage/f-pages/page-about.jpg';
import Page3 from 'src/assets/images/landingpage/f-pages/page-portfolio.jpg';
import Page4 from 'src/assets/images/landingpage/f-pages/page-pricing.jpg';

import DemoTitle from './DemoTitle';

interface DemoTypes {
  link: string;
  img: string;
  title: string;
  hot?: boolean;
}

const demos: DemoTypes[] = [
  {
    link: 'https://modernize-react-main.netlify.app/dashboards/modern',
    img: mainDemo,
    title: 'Main',
  },
  {
    link: 'https://modernize-react-dark.netlify.app/dashboards/ecommerce',
    img: darkDemo,
    title: 'Dark',
  },
  {
    link: 'https://modernize-react-horizontal.netlify.app/dashboards/modern',
    img: horizontalDemo,
    title: 'Horizontal',
  },
  {
    link: 'https://modernize-react-firebase.netlify.app/auth/login',
    img: minisidebarDemo,
    title: 'Firebase',
  },
  {
    link: 'https://modernize-react-rtl.netlify.app/dashboards/modern',
    img: rtlDemo,
    title: 'RTL',
  },
];

const pages: DemoTypes[] = [
  {
    link: 'https://modernize-react.adminmart.com/frontend-pages/homepage',
    img: Page1,
    title: 'Homepage',
  },
  {
    link: 'https://modernize-react.adminmart.com/frontend-pages/about',
    img: Page2,
    title: 'About us',
  },
  {
    link: 'https://modernize-react.adminmart.com/frontend-pages/portfolio',
    img: Page3,
    title: 'Portfolio',
  },
  {
    link: 'https://modernize-react.adminmart.com/frontend-pages/pricing',
    img: Page4,
    title: 'Pricing',
  },
];

const apps: DemoTypes[] = [
  {
    link: 'https://modernize-nextjs.adminmart.com/apps/kanban',
    img: app14,
    hot: true,
    title: 'Kanban App',
  },
  {
    link: 'https://modernize-nextjs.adminmart.com/apps/invoice/list',
    img: app15,
    hot: true,
    title: 'Invoice App',
  },
  {
    link: '/apps/calendar',
    img: app1,
    title: 'Calendar App',
  },
  {
    link: '/apps/chats',
    img: app2,
    title: 'Chat App',
  },
  {
    link: 'apps/contacts',
    img: app3,
    title: 'Contact App',
  },
  {
    link: 'apps/email',
    img: app4,
    title: 'Email App',
  },
  {
    link: '/apps/notes',
    img: app5,
    title: 'Note App',
  },
  {
    link: '/apps/user-profile',
    img: app6,
    title: 'User Profile App',
  },
  {
    link: '/apps/blog/posts',
    img: app7,
    title: 'Blog App',
  },
  {
    link: '/apps/blog/detail/streaming-video-way-before-it-was-cool-go-dark-tomorrow',
    img: app13,
    title: 'Blog Detail App',
  },
  {
    link: '/apps/tickets',
    img: app8,
    title: 'Ticket App',
  },
  {
    link: '/apps/ecommerce/shop',
    img: app9,
    title: 'eCommerce Shop App',
  },
  {
    link: '/apps/ecommerce/detail/1',
    img: app10,
    title: 'eCommerce Detail App',
  },
  {
    link: '/apps/ecommerce/eco-checkout',
    img: app11,
    title: 'eCommerce Checkout App',
  },
  {
    link: '/apps/ecommerce/eco-product-list',
    img: app12,
    title: 'eCommerce List App',
  },
];

const DemoSlider = () => {
  const theme = useTheme();

  const StyledBox = styled(Box)(() => ({
    overflow: 'auto',
    position: 'relative',
    border: `1px solid ${theme.palette.divider}`,
    '.MuiButton-root': {
      display: 'none',
    },
    '&:hover': {
      '.MuiButton-root': {
        display: 'block',
        transform: 'translate(-50%,-50%)',
        position: 'absolute',
        left: '50%',
        right: '50%',
        top: '50%',
        minWidth: '100px',
        zIndex: '9',
      },
      '&:before': {
        content: '""',
        position: 'absolute',
        top: '0',
        left: ' 0',
        width: '100%',
        height: '100%',
        zIndex: '8',
        backgroundColor: 'rgba(55,114,255,.2)',
      },
    },
  }));

  return (
    (<Box
      pb="140px"
      overflow="hidden"
      sx={{
        pt: {
          sm: '60px',
          lg: '0',
        },
      }}
    >
      <Container maxWidth="lg">
        {/* Title */}
        <DemoTitle />

        {/* slider */}
        <Box mt={9}>
          <Grid container spacing={3} justifyContent="center">
            {demos.map((demo, index) => (
              <Grid
                key={index}
                size={{
                  xs: 12,
                  lg: 3
                }}>
                <Box>
                  {/* <Link href={demo.link}> */}
                  <StyledBox>
                    <Avatar
                      src={demo.img}
                      sx={{
                        borderRadius: '8px',
                        width: '100%',
                        height: '100%',
                      }}
                    />
                    <Button
                      variant="contained"
                      color="primary"
                      size="small"
                      href={demo.link}
                      target="_blank"
                    >
                      Live Preview
                    </Button>
                  </StyledBox>
                  {/* </Link> */}
                  <Typography
                    variant="body1"
                    color="textPrimary"
                    textAlign="center"
                    fontWeight={500}
                    mt={2}
                  >
                    {demo.title}
                  </Typography>
                </Box>
              </Grid>
            ))}
          </Grid>

          <Box mb={2} mt={5} textAlign="center">
            <Chip label="Frontend Pages" color="primary" />
          </Box>
          {/* apps */}
          <Box>
            <Grid container mt={2} spacing={3}>
              {pages.map((page, index) => (
                <Grid
                  key={index}
                  size={{
                    xs: 12,
                    lg: 3
                  }}>
                  <Box>
                    <StyledBox>
                      <Avatar
                        src={page.img}
                        sx={{
                          borderRadius: '8px',
                          width: '100%',
                          height: '100%',
                        }}
                      />
                      <Button
                        variant="contained"
                        color="primary"
                        size="small"
                        href={page.link}
                        target="_blank"
                      >
                        Live Preview
                      </Button>
                    </StyledBox>
                    <Typography
                      variant="h6"
                      color="textPrimary"
                      textAlign="center"
                      fontWeight={500}
                      mt={2}
                    >
                      {page.title}{' '}
                      {page.hot ? <Chip label="New" color="error" size="small" /> : null}
                    </Typography>
                  </Box>
                </Grid>
              ))}
            </Grid>
          </Box>

          <Box mb={2} mt={5} textAlign="center">
            <Chip label="Apps" color="primary" />
          </Box>
          <Grid container spacing={3} justifyContent="center">
            {apps.map((demo, index) => (
              <Grid
                key={index}
                size={{
                  xs: 12,
                  lg: 3
                }}>
                <Box>
                  {/* <Link href={demo.link}> */}
                  <StyledBox>
                    <Avatar
                      src={demo.img}
                      sx={{
                        borderRadius: '8px',
                        width: '100%',
                        height: '100%',
                      }}
                    />
                    <Button
                      variant="contained"
                      color="primary"
                      size="small"
                      href={demo.link}
                      target="_blank"
                    >
                      Live Preview
                    </Button>
                  </StyledBox>
                  {/* </Link> */}
                  <Typography
                    variant="body1"
                    color="textPrimary"
                    textAlign="center"
                    fontWeight={500}
                    mt={2}
                  >
                    {demo.title} {demo.hot ? <Chip label="New" color="error" size="small" /> : null}
                  </Typography>
                </Box>
              </Grid>
            ))}
          </Grid>
        </Box>
      </Container>
    </Box>)
  );
};

export default DemoSlider;

===== src/components/landingpage/demo-slider/DemoTitle.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, AvatarGroup, Avatar, Stack } from '@mui/material';
import AnimationFadeIn from '../animation/Animation';

// images
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';

const DemoTitle = () => {
  return (
    (<Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          sm: 10,
          lg: 8
        }}>
        <AnimationFadeIn>
          <>
            <Stack
              direction={{ xs: 'column', sm: 'row' }}
              spacing={1}
              alignItems="center"
              justifyContent="center"
              mb={2}
            >
              <AvatarGroup>
                <Avatar alt="Remy Sharp" src={img1} sx={{ width: 28, height: 28 }} />
                <Avatar alt="Travis Howard" src={img2} sx={{ width: 28, height: 28 }} />
                <Avatar alt="Cindy Baker" src={img3} sx={{ width: 28, height: 28 }} />
              </AvatarGroup>
              <Typography variant="h6">52,589+</Typography>
              <Typography variant="h6" color="textSecondary">
                developers & agencies using our templates
              </Typography>
            </Stack>
            <Typography
              variant="h2"
              fontWeight={700}
              textAlign="center"
              sx={{
                fontSize: {
                  lg: '36px',
                  xs: '25px',
                },
                lineHeight: {
                  lg: '43px',
                  xs: '30px',
                },
              }}
            >
              Production Ready & Developer Friendly Material UI React Admin Template
            </Typography>
          </>
        </AnimationFadeIn>
      </Grid>
    </Grid>)
  );
};

export default DemoTitle;

===== src/components/landingpage/features/Features.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import FeaturesTitle from './FeaturesTitle';
import { Typography, Grid2 as Grid, Container, Box } from '@mui/material';
import {
  IconAdjustments,
  IconArchive,
  IconArrowsShuffle,
  IconBook,
  IconBuildingCarousel,
  IconCalendar,
  IconChartPie,
  IconDatabase,
  IconDiamond,
  IconLanguageKatakana,
  IconLayersIntersect,
  IconMessages,
  IconRefresh,
  IconShieldLock,
  IconTag,
  IconWand,
  IconTable,
  IconPresentation,
} from '@tabler/icons-react';
import AnimationFadeIn from '../animation/Animation';

interface FeaturesType {
  icon: React.ReactElement;
  title: string;
  subtext: string;
}

const featuresData: FeaturesType[] = [
  {
    icon: <IconWand width={40} height={40} strokeWidth={1.5} />,
    title: '6 Theme Colors',
    subtext: 'We have included 6 pre-defined Theme Colors with Elegant Admin.',
  },
  {
    icon: <IconShieldLock width={40} height={40} strokeWidth={1.5} />,
    title: 'JWT + Firebase Auth',
    subtext: 'It is JSON Object is used to securely transfer information over the web.',
  },
  {
    icon: <IconArchive width={40} height={40} strokeWidth={1.5} />,
    title: '65+ Page Templates',
    subtext: 'Yes, we have 5 demos & 65+ Pages per demo to make it easier.',
  },
  {
    icon: <IconAdjustments width={40} height={40} strokeWidth={1.5} />,
    title: '45+ UI Components',
    subtext: 'Almost 45+ UI Components being given with Modernize Admin Pack.',
  },
  {
    icon: <IconPresentation width={40} height={40} strokeWidth={1.5} />,
    title: '4+ Frontend Pages',
    subtext: 'We have added useful frontend pages with Modernize Admin',
  },
  {
    icon: <IconTag width={40} height={40} strokeWidth={1.5} />,
    title: 'Material Ui',
    subtext: 'Its been made with Material Ui and full responsive layout.',
  },
  {
    icon: <IconTable width={40} height={40} strokeWidth={1.5} />,
    title: 'React Table',
    subtext: 'Supercharge your tables or build a datagrid from scratch for TS/JS React.',
  },
  {
    icon: <IconDiamond width={40} height={40} strokeWidth={1.5} />,
    title: '3400+ Font Icons',
    subtext: 'Lots of Icon Fonts are included here in the package of Elegant Admin.',
  },
  {
    icon: <IconDatabase width={40} height={40} strokeWidth={1.5} />,
    title: 'Axios',
    subtext: 'Axios is a promise-based HTTP Client for node.js and the browser.',
  },
  {
    icon: <IconLanguageKatakana width={40} height={40} strokeWidth={1.5} />,
    title: 'i18 React',
    subtext: 'react-i18 is a powerful internationalization framework for React.',
  },
  {
    icon: <IconBuildingCarousel width={40} height={40} strokeWidth={1.5} />,
    title: 'Slick Carousel',
    subtext: 'The Last React Carousel You will Ever Need!',
  },
  {
    icon: <IconArrowsShuffle width={40} height={40} strokeWidth={1.5} />,
    title: 'Easy to Customize',
    subtext: 'Customization will be easy as we understand your pain.',
  },
  {
    icon: <IconChartPie width={40} height={40} strokeWidth={1.5} />,
    title: 'Lots of Chart Options',
    subtext: 'You name it and we have it, Yes lots of variations for Charts.',
  },
  {
    icon: <IconLayersIntersect width={40} height={40} strokeWidth={1.5} />,
    title: 'Lots of Table Examples',
    subtext: 'Data Tables are initial requirement and we added them.',
  },
  {
    icon: <IconRefresh width={40} height={40} strokeWidth={1.5} />,
    title: 'Regular Updates',
    subtext: 'We are constantly updating our pack with new features.',
  },
  {
    icon: <IconBook width={40} height={40} strokeWidth={1.5} />,
    title: 'Detailed Documentation',
    subtext: 'We have made detailed documentation, so it will easy to use.',
  },
  {
    icon: <IconCalendar width={40} height={40} strokeWidth={1.5} />,
    title: 'Calendar Design',
    subtext: 'Calendar is available with our package & in nice design.',
  },
  {
    icon: <IconMessages width={40} height={40} strokeWidth={1.5} />,
    title: 'Dedicated Support',
    subtext: 'We believe in supreme support is key and we offer that.',
  },
];

const Features = () => {
  return (
    (<Box py={6}>
      <Container maxWidth="lg">
        <FeaturesTitle />
        <AnimationFadeIn>
          <Box mt={6}>
            <Grid container spacing={3}>
              {featuresData.map((feature, index) => (
                <Grid
                  textAlign="center"
                  key={index}
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 3
                  }}>
                  <Box color="primary.main">{feature.icon}</Box>
                  <Typography variant="h5" mt={3}>
                    {feature.title}
                  </Typography>
                  <Typography variant="subtitle1" color="textSecondary" mt={1} mb={3}>
                    {feature.subtext}
                  </Typography>
                </Grid>
              ))}
            </Grid>
          </Box>
        </AnimationFadeIn>
      </Container>
    </Box>)
  );
};

export default Features;

===== src/components/landingpage/features/FeaturesTitle.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';


const FeaturesTitle = () => {

    return (
        (<Grid container spacing={3} justifyContent="center">
            <Grid
                size={{
                    xs: 12,
                    sm: 10,
                    lg: 6
                }}>
                <Typography fontSize="16" textTransform="uppercase" color="primary.main" fontWeight={500} textAlign="center" mb={1}>ALMOST COVERED EVERYTHING</Typography>
                <Typography variant='h2' fontWeight={700} textAlign="center" sx={{
                    fontSize: {
                        lg: '36px',
                        xs: '25px'
                    },
                    lineHeight: {
                        lg: '43px',
                        xs: '30px'
                    }
                }}>Other Amazing Features & Flexibility Provided</Typography>
            </Grid>
        </Grid>)
    );
};

export default FeaturesTitle;

===== src/components/landingpage/footer/Footer.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Link, Typography, Container } from '@mui/material';
import logoIcon from 'src/assets/images/logos/logoIcon.svg';

const Footer = () => {
  return (
    (<Container maxWidth="lg">
      <Grid container spacing={3} justifyContent="center" mt={4}>
        <Grid
          textAlign="center"
          size={{
            xs: 12,
            sm: 5,
            lg: 4
          }}>
          <img src={logoIcon} alt="icon" />
          <Typography fontSize="16" color="textSecondary" mt={1} mb={4}>
            All rights reserved by Modernize. Designed & Developed by
            <Link target="_blank" href="https://adminmart.com/">
              <Typography color="textSecondary" component="span" display="inline">
                {' '}
                AdminMart
              </Typography>{' '}
            </Link>
            .
          </Typography>
        </Grid>
      </Grid>
    </Container>)
  );
};

export default Footer;

===== src/components/landingpage/frameworks/Frameworks.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Container, styled, Stack } from '@mui/material';
import FrameworksTitle from './FrameworksTitle';

// images
import sliderImg from 'src/assets/images/landingpage/background/slider-group.png';

const SliderBox = styled(Box)(() => ({
  '@keyframes slide': {
    '0%': {
      transform: 'translate3d(0, 0, 0)',
    },
    '100% ': {
      transform: 'translate3d(-100%, 0, 0)',
    },
  },
  animation: 'slide 45s linear infinite',
}));

const Frameworks = () => {
  return (
    <Box
      bgcolor="action.hover"
      sx={{
        py: {
          xs: '70px',
          lg: '120px',
        },
      }}
    >
      <Container maxWidth="lg">
        {/* Title */}
        <FrameworksTitle />
      </Container>
      <Stack overflow="hidden" mt={6} direction={'row'}>
        <Box>
          <SliderBox>
            <img src={sliderImg} alt="slide" height={'100%'} />
          </SliderBox>
        </Box>
        <Box>
          <SliderBox>
            <img src={sliderImg} alt="slide" height={'100%'} />
          </SliderBox>
        </Box>
      </Stack>
    </Box>
  );
};

export default Frameworks;

===== src/components/landingpage/frameworks/FrameworksTitle.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';


const FrameworksTitle = () => {

    return (
        (<Grid container spacing={3} justifyContent="center">
            <Grid
                size={{
                    xs: 12,
                    sm: 10,
                    lg: 8
                }}>
                <Typography variant='h2' fontWeight={700} textAlign="center" sx={{
                    fontSize: {
                        lg: '36px',
                        xs: '25px'
                    },
                    lineHeight: {
                        lg: '43px',
                        xs: '30px'
                    }
                }}>Increase speed of your development and
                    launch quickly with Modernize</Typography>
            </Grid>
        </Grid>)
    );
};

export default FrameworksTitle;

===== src/components/landingpage/header/DemosDD.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Avatar, Stack, styled, Button } from '@mui/material';
import { NavLink } from 'react-router';

import mainDemo from 'src/assets/images/landingpage/demos/demo-main.jpg';
import darkDemo from 'src/assets/images/landingpage/demos/demo-dark.jpg';
import horizontalDemo from 'src/assets/images/landingpage/demos/demo-horizontal.jpg';
import minisidebarDemo from 'src/assets/images/landingpage/demos/demo-firebase.jpg';
import rtlDemo from 'src/assets/images/landingpage/demos/demo-rtl.jpg';
import app1 from 'src/assets/images/landingpage/apps/app-calendar.jpg';
import app2 from 'src/assets/images/landingpage/apps/app-chat.jpg';
import app3 from 'src/assets/images/landingpage/apps/app-contact.jpg';
import app4 from 'src/assets/images/landingpage/apps/app-email.jpg';
import app5 from 'src/assets/images/landingpage/apps/app-note.jpg';

interface DemoTypes {
  link: string;
  img: string;
  title: string;
}

const demos: DemoTypes[] = [
  {
    link: 'https://modernize-react-main.netlify.app/dashboards/modern',
    img: mainDemo,
    title: 'Main',
  },
  {
    link: 'https://modernize-react-dark.netlify.app/dashboards/ecommerce',
    img: darkDemo,
    title: 'Dark',
  },
  {
    link: 'https://modernize-react-horizontal.netlify.app/dashboards/modern',
    img: horizontalDemo,
    title: 'Horizontal',
  },
  {
    link: 'https://modernize-react-firebase.netlify.app/auth/login',
    img: minisidebarDemo,
    title: 'Firebase',
  },
  {
    link: 'https://modernize-react-rtl.netlify.app/dashboards/modern',
    img: rtlDemo,
    title: 'RTL',
  },
];

const apps: DemoTypes[] = [
  {
    link: '/apps/calendar',
    img: app1,
    title: 'Calendar',
  },
  {
    link: '/apps/chats',
    img: app2,
    title: 'Chat',
  },
  {
    link: 'apps/contacts',
    img: app3,
    title: 'Contact',
  },
  {
    link: 'apps/email',
    img: app4,
    title: 'Email',
  },
  {
    link: '/apps/notes',
    img: app5,
    title: 'Note',
  },
];

const StyledBox = styled(Box)(() => ({
  overflow: 'auto',
  position: 'relative',
  '.MuiButton-root': {
    display: 'none',
  },
  '&:hover': {
    '.MuiButton-root': {
      display: 'block',
      transform: 'translate(-50%,-50%)',
      position: 'absolute',
      left: '50%',
      right: '50%',
      top: '50%',
      minWidth: '100px',
      zIndex: '9',
    },
    '&:before': {
      content: '""',
      position: 'absolute',
      top: '0',
      left: ' 0',
      width: '100%',
      height: '100%',
      zIndex: '8',
      backgroundColor: 'rgba(55,114,255,.2)',
    },
  },
}));

const DemosDD = () => {
  return (
    <>
      <Box p={4}>
        <Typography variant="h5">Different Demos</Typography>
        <Typography variant="subtitle1" color="textSecondary">
          Included with the package
        </Typography>

        <Stack mt={2} spacing={3} direction={{ xs: 'column', lg: 'row' }}>
          {demos.map((demo, index) => (
            <Box key={index}>
              {/* <Link href={demo.link}> */}
              <StyledBox>
                <Avatar
                  src={demo.img}
                  sx={{
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                  }}
                />
                <Button
                  variant="contained"
                  color="primary"
                  size="small"
                  href={demo.link}
                  target="_blank"
                >
                  Live Preview
                </Button>
              </StyledBox>
              {/* </Link> */}
              <Typography
                variant="body1"
                color="textPrimary"
                textAlign="center"
                fontWeight={500}
                mt={2}
              >
                {demo.title}
              </Typography>
            </Box>
          ))}
        </Stack>

        <Typography variant="h5" mt={5}>
          Different Apps
        </Typography>

        <Stack mt={2} spacing={3} mb={2} direction={{ xs: 'column', lg: 'row' }}>
          {apps.map((app, index) => (
            <Box key={index}>
              {/* <Link href={app.link}> */}
              <StyledBox>
                <Avatar
                  src={app.img}
                  sx={{
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                  }}
                />
                <NavLink to={app.link}>
                  <Button variant="contained" color="primary" size="small">
                    Live Preview
                  </Button>
                </NavLink>
                {/* </Link> */}
              </StyledBox>
              <Typography
                variant="body1"
                color="textPrimary"
                textAlign="center"
                fontWeight={500}
                mt={2}
              >
                {app.title}
              </Typography>
            </Box>
          ))}
        </Stack>
      </Box>
    </>
  );
};

export default DemosDD;

===== src/components/landingpage/header/Header.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  AppBar,
  styled,
  Toolbar,
  Container,
  Box,
  Stack,
  useMediaQuery,
  IconButton,
  Drawer,
  Theme,
} from '@mui/material';
import Logo from 'src/layouts/full/shared/logo/Logo';
import Navigations from './Navigations';
import MobileSidebar from './MobileSidebar';
import { IconMenu2 } from '@tabler/icons-react';

const LpHeader = () => {
  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    justifyContent: 'center',
    [theme.breakpoints.up('lg')]: {
      minHeight: '80px',
    },
    backgroundColor: theme.palette.background.default,
  }));

  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    width: '100%',
    paddingLeft: '0 !important',
    paddingRight: '0 !important',
    color: theme.palette.text.secondary,
  }));

  //   sidebar
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));

  const [open, setOpen] = React.useState(false);

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const toggleDrawer = (newOpen: boolean) => () => {
    setOpen(newOpen);
  };

  const [y, setY] = React.useState(window.scrollY);

  const handleNavigation = React.useCallback(
    (e: Event | any) => {
      const window = e.currentTarget;
      setY(window.scrollY);
    },
    [],
  );

  React.useEffect(() => {
    setY(window.scrollY);
    window.addEventListener('scroll', handleNavigation);

    return () => {
      window.removeEventListener('scroll', handleNavigation);
    };
  }, [handleNavigation]);

  return (
    <AppBarStyled position="sticky" elevation={y ? 8 : 0}>
      <Container maxWidth="lg">
        <ToolbarStyled>
          <Logo />
          <Box flexGrow={1} />
          {lgDown ? (
            <IconButton color="inherit" aria-label="menu" onClick={handleDrawerOpen}>
              <IconMenu2 size="20" />
            </IconButton>
          ) : null}
          {lgUp ? (
            <Stack spacing={1} direction="row" alignItems="center">
              <Navigations />
            </Stack>
          ) : null}
        </ToolbarStyled>
      </Container>
      <Drawer
        anchor="left"
        open={open}
        variant="temporary"
        onClose={toggleDrawer(false)}
        PaperProps={{
          sx: {
            width: 270,
            border: '0 !important',
            boxShadow: (theme) => theme.shadows[8],
          },
        }}
      >
        <MobileSidebar />
      </Drawer>
    </AppBarStyled>
  );
};

export default LpHeader;

===== src/components/landingpage/header/MobileSidebar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Button, Box, Collapse, Stack } from '@mui/material';
import { IconChevronDown } from '@tabler/icons-react';
import Logo from "src/layouts/full/shared/logo/Logo"
import DemosDD from './DemosDD';
import AppLinks from 'src/layouts/full/vertical/header/AppLinks';
import QuickLinks from 'src/layouts/full/vertical/header/QuickLinks';

const MobileSidebar = () => {
    const [toggle, setToggle] = useState(false)
    const [toggle2, setToggle2] = useState(false)

    return (
        <>
            <Box px={3}>
                <Logo />
            </Box>
            <Box p={3}>

                <Stack direction="column" spacing={2} >
                    <Button color="inherit"
                        onClick={() => setToggle(!toggle)}
                        endIcon={<IconChevronDown width={20} />}
                        sx={{
                            justifyContent: 'space-between'
                        }}>

                        Demos
                    </Button>
                    {toggle && (
                        <Collapse in={toggle}>
                            <Box m="-21px">
                                <Box ml={1}>
                                    <DemosDD />
                                </Box>
                            </Box>
                        </Collapse>
                    )}

                    <Button color="inherit"
                        onClick={() => setToggle2(!toggle2)}
                        endIcon={<IconChevronDown width={20} />}
                        sx={{
                            justifyContent: 'space-between'
                        }}>Pages</Button>
                    {toggle2 && (
                        <Collapse in={toggle2}>
                            <Box overflow="hidden" ml={1}>
                                <AppLinks />
                                <QuickLinks />
                            </Box>
                        </Collapse>
                    )}
                    <Button color="inherit" href="#" sx={{
                        justifyContent: 'start'
                    }}>Documentation</Button>
                    <Button color="inherit" href="https://adminmart.com/support" sx={{
                        justifyContent: 'start'
                    }}>Support</Button>
                    <Button color="primary" variant="contained" href="#">Login</Button>
                </Stack>
            </Box>
        </>


    );
};

export default MobileSidebar;

===== src/components/landingpage/header/Navigations.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Box, Button, Divider, Grid2 as Grid, styled, Paper } from '@mui/material';
import { IconChevronDown } from '@tabler/icons-react';
import AppLinks from 'src/layouts/full/vertical/header/AppLinks';
import QuickLinks from 'src/layouts/full/vertical/header/QuickLinks';
import DemosDD from './DemosDD';

const Navigations = () => {

    const StyledButton = styled(Button)(({ theme }) => ({
        fontSize: '16px',
        color: theme.palette.text.secondary
    }));

    // demos
    const [open, setOpen] = useState(false);

    const handleOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    // pages

    const [open2, setOpen2] = useState(false);

    const handleOpen2 = () => {
        setOpen2(true);
    };

    const handleClose2 = () => {
        setOpen2(false);
    };



    return (<>
        <StyledButton
            color="inherit"
            variant="text"
            aria-expanded={open ? 'true' : undefined}
            sx={{
                color: open ? 'primary.main' : (theme) => theme.palette.text.secondary,
            }}
            onMouseEnter={handleOpen} onMouseLeave={handleClose}
            endIcon={<IconChevronDown size="15" style={{ marginLeft: '-5px', marginTop: '2px' }} />}
        >
            Demos
        </StyledButton>
        {open && (
            <Paper
                onMouseEnter={handleOpen}
                onMouseLeave={handleClose}
                sx={{
                    position: 'absolute',
                    left: '0',
                    right: '0',
                    top: '55px',
                    maxWidth: '1200px',
                    width: '100%'
                }}
            >
                <DemosDD />
            </Paper>
        )}
        <Box>
            <StyledButton
                color="inherit"
                variant="text"
                onMouseEnter={handleOpen2} onMouseLeave={handleClose2}
                sx={{
                    color: open2 ? 'primary.main' : (theme) => theme.palette.text.secondary,
                }}
                endIcon={<IconChevronDown size="15" style={{ marginLeft: '-5px', marginTop: '2px' }} />}
            >
                Pages
            </StyledButton>
            {open2 && (
                <Paper
                    onMouseEnter={handleOpen2}
                    onMouseLeave={handleClose2}
                    sx={{
                        position: 'absolute',
                        left: '0',
                        right: '0',
                        top: '55px',
                        width: '850px',
                        margin: '0 auto'
                    }}
                >
                    <Grid container>
                        <Grid
                            display="flex"
                            size={{
                                sm: 8
                            }}>
                            <Box p={4} pr={0} pb={3}>
                                <AppLinks />
                            </Box>
                            <Divider orientation="vertical" />
                        </Grid>
                        <Grid
                            size={{
                                sm: 4
                            }}>
                            <Box p={4}>
                                <QuickLinks />
                            </Box>
                        </Grid>
                    </Grid>
                </Paper>
            )}
        </Box>
        <StyledButton color="inherit" variant="text" href="https://demos.adminmart.com/premium/react/modernize-react/docs/index.html">
            Documentation
        </StyledButton>
        <StyledButton color="inherit" variant="text" href="https://adminmart.com/support/">
            Support
        </StyledButton>
        <Button color="primary" target="_blank" variant="contained" href="#">
            Buy Now
        </Button>
    </>);
};

export default Navigations;

===== src/components/landingpage/testimonial/testimonial.css =====
/* .testimonial-slider .slick-slide {
    margin: 0 18px;
} */

.slick-dots li button:before {
    font-size: 10px;
}
.testimonial-slider .slick-list{
    padding:0 0 20px 0;
}
.slick-dots li {
    margin: 0;
}

.slick-dots {
    bottom: -50px
}
===== src/components/landingpage/testimonial/Testimonial.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Avatar, Box, CardContent, Container, Typography, Rating, Stack } from '@mui/material';
import TestimonialTitle from './TestimonialTitle';
import BlankCard from '../../shared/BlankCard';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import AnimationFadeIn from '../animation/Animation';

//Carousel slider for product
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import './testimonial.css';

interface SliderType {
  title: string;
  subtitle: string;
  avatar: string;
  subtext: string;
}

const SliderData: SliderType[] = [
  {
    title: 'Jenny Wilson',
    subtitle: 'Features avaibility',
    avatar: img1,
    subtext:
      'The dashboard template from adminmart has helped me provide a clean and sleek look to my dashboard and made it look exactly the way I wanted it to, mainly without having.',
  },
  {
    title: 'Minshan Cui',
    subtitle: 'Features avaibility',
    avatar: img2,
    subtext:
      'The quality of design is excellent, customizability and flexibility much better than the other products available in the market.I strongly recommend the AdminMart to other.',
  },
  {
    title: 'Eminson Mendoza',
    subtitle: 'Features avaibility',
    avatar: img3,
    subtext:
      'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recomended!',
  },
  {
    title: 'Jenny Wilson',
    subtitle: 'Features avaibility',
    avatar: img1,
    subtext:
      'The dashboard template from adminmart has helped me provide a clean and sleek look to my dashboard and made it look exactly the way I wanted it to, mainly without having.',
  },
  {
    title: 'Minshan Cui',
    subtitle: 'Features avaibility',
    avatar: img2,
    subtext:
      'The quality of design is excellent, customizability and flexibility much better than the other products available in the market.I strongly recommend the AdminMart to other.',
  },
  {
    title: 'Eminson Mendoza',
    subtitle: 'Features avaibility',
    avatar: img3,
    subtext:
      'This template is great, UI-rich and up-to-date. Although it is pretty much complete, I suggest to improve a bit of documentation. Thanks & Highly recomended!',
  },
];

const Testimonial = () => {
  const [value, setValue] = React.useState<number | null>(5);

  const settings = {
    className: 'testimonial-slider',
    dots: true,
    arrows: false,
    infinite: true,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  return (
    <Box pt={14} pb={11}>
      <Container maxWidth="lg">
        <TestimonialTitle />
        <Box mt={5}>
          <AnimationFadeIn>
            <Slider {...settings}>
              {SliderData.map((slider, index) => (
                <Box p="15px" key={index}>
                  <BlankCard>
                    <CardContent>
                      <Stack direction="row">
                        <Avatar src={slider.avatar} alt="user" sx={{ width: 40, height: 40 }} />
                        <Box ml={2}>
                          <Typography variant="h6">{slider.title}</Typography>
                          <Typography color="textSecondary" variant="subtitle1">
                            {slider.subtitle}
                          </Typography>
                        </Box>
                        <Box ml="auto">
                          <Rating
                            size="small"
                            name="simple-controlled"
                            value={value}
                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                            // @ts-ignore
                            onChange={(event, newValue) => {
                              setValue(newValue);
                            }}
                          />
                        </Box>
                      </Stack>
                      <Typography fontSize="15px" color="textSecondary" mt={3}>
                        {slider.subtext}
                      </Typography>
                    </CardContent>
                  </BlankCard>
                </Box>
              ))}
            </Slider>
          </AnimationFadeIn>
        </Box>
      </Container>
    </Box>
  );
};

export default Testimonial;

===== src/components/landingpage/testimonial/TestimonialTitle.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';
import AnimationFadeIn from '../animation/Animation';

const TestimonialTitle = () => {
  return (
    (<Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          sm: 10,
          lg: 8
        }}>
        <AnimationFadeIn>
          <Typography
            variant="h2"
            fontWeight={700}
            textAlign="center"
            sx={{
              fontSize: {
                lg: '36px',
                xs: '25px',
              },
              lineHeight: {
                lg: '43px',
                xs: '30px',
              },
            }}
          >
            Don’t just take our words for it, See what developers like you are saying
          </Typography>
        </AnimationFadeIn>
      </Grid>
    </Grid>)
  );
};

export default TestimonialTitle;

===== src/components/material-ui/accordion/code/BasicCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Accordion,
  AccordionSummary,
  Typography,
  AccordionDetails,
  Divider,
} from "@mui/material";
import { IconChevronDown } from "@tabler/icons-react";

              <Accordion>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel1a-content"
                  id="panel1a-header"
                >
                  <Typography variant="h6">Accordion 1</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Suspendisse malesuada lacus ex, sit amet blandit leo
                    lobortis eget.
                  </Typography>
                </AccordionDetails>
              </Accordion>
<Divider />
<Accordion>
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel2a-content"
        id="panel2a-header"
    >
        <Typography variant="h6">Accordion 2</Typography>
    </AccordionSummary>
    <AccordionDetails>
        <Typography variant="subtitle1" color="textSecondary">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Suspendisse malesuada lacus ex, sit amet blandit leo
        lobortis eget.
        </Typography>
    </AccordionDetails>
    </Accordion>
    <Divider />
    <Accordion disabled>
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel3a-content"
        id="panel3a-header"
    >
        <Typography variant="h6">Disabled Accordion</Typography>
    </AccordionSummary>
    </Accordion>`}
      </CodeDialog>
    </>
  );
};

export default BasicCode;

===== src/components/material-ui/accordion/code/ControlledCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ControlledCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import * as React from 'react';
import {
  Accordion,
  AccordionSummary,
  Typography,
  AccordionDetails,
  Divider,
} from "@mui/material";
import { IconChevronDown } from "@tabler/icons-react";

<Accordion
    expanded={expanded === "panel1"}
    onChange={handleChange("panel1")}
    >
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel1bh-content"
        id="panel1bh-header"
    >
        <Typography variant="h6" sx={{ width: "33%", flexShrink: 0 }}>
        General settings
        </Typography>
        <Typography variant="subtitle2" color="textSecondary">
        I am an accordion
        </Typography>
    </AccordionSummary>
    <AccordionDetails>
        <Typography variant="subtitle1" color="textSecondary">
        Nulla facilisi. Phasellus sollicitudin nulla et quam mattis
        feugiat. Aliquam eget maximus est, id dignissim quam.
        </Typography>
    </AccordionDetails>
    </Accordion>
    <Accordion
    expanded={expanded === "panel2"}
    onChange={handleChange("panel2")}
    >
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel2bh-content"
        id="panel2bh-header"
    >
        <Typography variant="h6" sx={{ width: "33%", flexShrink: 0 }}>
        Users
        </Typography>
        <Typography variant="subtitle2" color="textSecondary">
        You are currently not an owner
        </Typography>
    </AccordionSummary>
    <AccordionDetails>
        <Typography variant="subtitle1" color="textSecondary">
        Donec placerat, lectus sed mattis semper, neque lectus
        feugiat lectus, varius pulvinar diam eros in elit.
        Pellentesque convallis laoreet laoreet.
        </Typography>
    </AccordionDetails>
    </Accordion>
    <Accordion
    expanded={expanded === "panel3"}
    onChange={handleChange("panel3")}
    >
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel3bh-content"
        id="panel3bh-header"
    >
        <Typography variant="h6" sx={{ width: "33%", flexShrink: 0 }}>
        Advanced settings
        </Typography>
        <Typography variant="subtitle2" color="textSecondary">
        Filtering has been entirely disabled for whole web server
        </Typography>
    </AccordionSummary>
    <AccordionDetails>
        <Typography variant="subtitle1" color="textSecondary">
        Nunc vitae orci ultricies, auctor nunc in, volutpat nisl.
        Integer sit amet egestas eros, vitae egestas augue. Duis vel
        est augue.
        </Typography>
    </AccordionDetails>
    </Accordion>
    <Accordion
    expanded={expanded === "panel4"}
    onChange={handleChange("panel4")}
    >
    <AccordionSummary
        expandIcon={<IconChevronDown />}
        aria-controls="panel4bh-content"
        id="panel4bh-header"
    >
        <Typography variant="h6" sx={{ width: "33%", flexShrink: 0 }}>
        Personal data
        </Typography>
    </AccordionSummary>
    <AccordionDetails>
        <Typography variant="subtitle1" color="textSecondary">
        Nunc vitae orci ultricies, auctor nunc in, volutpat nisl.
        Integer sit amet egestas eros, vitae egestas augue. Duis vel
        est augue.
        </Typography>
    </AccordionDetails>
    </Accordion>`}
      </CodeDialog>
    </>
  );
};

export default ControlledCode;

===== src/components/material-ui/alert/code/ActionCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ActionCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Stack,
  Button
} from "@mui/material";

<Stack spacing={1}>
    <variant="filled" severity="warning">
        This is a success alert — check it out!
    </>
    <variant="filled"
        severity="info"
        action={
            <Button color="inherit" size="small">
                UNDO
            </Button>
        }
    >
        This is a success alert — check it out!
    </>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default ActionCode;

===== src/components/material-ui/alert/code/DescriptionCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DescriptionCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { StackTitle } from "@mui/material";

<Stack spacing={1}>
    <variant="filled" severity="error">
        <Title>Error</Title>
        This is an error alert — <strong>check it out!</strong>
    </>
    <variant="filled" severity="warning">
        <Title>Warning</Title>
        This is a warning alert — <strong>check it out!</strong>
    </>
    <variant="filled" severity="info">
        <Title>Info</Title>
        This is an info alert — <strong>check it out!</strong>
    </>
    <variant="filled" severity="success">
        <Title>Success</Title>
        This is a success alert — <strong>check it out!</strong>
    </>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default DescriptionCode;

===== src/components/material-ui/alert/code/FilledCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FilledCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Stack
} from "@mui/material";

<Stack spacing={1}>
    <variant="filled" severity="error">
        This is an error alert — check it out!
    </>
    <variant="filled" severity="warning">
        This is a warning alert — check it out!
    </>
    <variant="filled" severity="info">
        This is an info alert — check it out!
    </>
    <variant="filled" severity="success">
        This is a success alert — check it out!
    </>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default FilledCode;

===== src/components/material-ui/alert/code/OutlinedCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OutlinedCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Stack
} from "@mui/material";

<Stack spacing={1}>
    <variant="outlined" severity="error">
        This is an error alert — check it out!
    </>
    <variant="outlined" severity="warning">
        This is a warning alert — check it out!
    </>
    <variant="outlined" severity="info">
        This is an info alert — check it out!
    </>
    <variant="outlined" severity="success">
        This is a success alert — check it out!
    </>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default OutlinedCode;

===== src/components/material-ui/alert/code/TransitionCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TransitionCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import * as React from 'react';
import {
  Stack,
  Button,
  IconButton,
  Collapse
} from "@mui/material";

<Stack spacing={1}>
    <Collapse in={open}>
        <variant="filled"
            severity="info"
            sx={{ mb: 1 }}
            action={
                <IconButton
                    aria-label="close"
                    color="inherit"
                    size="small"
                    onClick={() => {
                        setOpen(false);
                    }}
                >
                    <IconX width={20} />
                </IconButton>
            }
        >
            Close me!
        </>
    </Collapse>
</Stack>
<Button
    disabled={open}
    variant="contained"
    onClick={() => {
        setOpen(true);
    }}
>
    Re-open
</Button>`}
      </CodeDialog>
    </>
  );
};

export default TransitionCode;

===== src/components/material-ui/avatar/code/GroupedCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const GroupedCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, AvatarGroup, Stack } from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';


<Stack direction="row" spacing={1} justifyContent="center">
    <AvatarGroup max={4}>
        <Avatar alt="Remy Sharp" src={User1} />
        <Avatar alt="Travis Howard" src={User2} />
        <Avatar alt="Cindy Baker" src={User3} />
    </AvatarGroup>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default GroupedCode;

===== src/components/material-ui/avatar/code/GroupedSizeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const GroupedSizeCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, AvatarGroup, Stack} from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';


<Stack direction="row" spacing={1} justifyContent="center">
    <AvatarGroup max={4}>
        <Avatar alt="Remy Sharp" sx={{ width: 56, height: 56 }} src={User1} />
        <Avatar alt="Travis Howard" sx={{ width: 56, height: 56 }} src={User2} />
        <Avatar alt="Cindy Baker" sx={{ width: 56, height: 56 }} src={User3} />
    </AvatarGroup>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default GroupedSizeCode;

===== src/components/material-ui/avatar/code/IconAvatarsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconAvatarsCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, Stack } from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';

<Stack direction="row" spacing={1} justifyContent="center">
    <Avatar sx={{ bgcolor: 'primary.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'secondary.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'error.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'warning.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'success.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default IconAvatarsCode;

===== src/components/material-ui/avatar/code/ImageAvatarsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ImageAvatarsCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import  React from 'react';
import { Avatar, Stack } from '@mui/material';

<Stack direction="row" spacing={1} justifyContent="center">
              <Avatar alt="Remy Sharp" src={User1} />
              <Avatar alt="Travis Howard" src={User2} />
              <Avatar alt="Cindy Baker" src={User3} />
            </Stack>`}
      </CodeDialog>
    </>
  );
};

export default ImageAvatarsCode;

===== src/components/material-ui/avatar/code/LetterAvatarsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const LetterAvatarsCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, Stack } from '@mui/material';

<Stack direction="row" spacing={1} justifyContent="center">
              <Avatar sx={{ bgcolor: 'primary.main' }}>A</Avatar>
              <Avatar sx={{ bgcolor: 'secondary.main' }}>B</Avatar>
              <Avatar sx={{ bgcolor: 'error.main' }}>C</Avatar>
              <Avatar sx={{ bgcolor: 'warning.main' }}>D</Avatar>
              <Avatar sx={{ bgcolor: 'success.main' }}>E</Avatar>
            </Stack>
`}
      </CodeDialog>
    </>
  );
};

export default LetterAvatarsCode;

===== src/components/material-ui/avatar/code/SizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, Stack } from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';


<Stack direction="row" spacing={1} justifyContent="center">
    <Avatar alt="Remy Sharp" src={User1} sx={{ width: 24, height: 24 }} />
    <Avatar alt="Remy Sharp" src={User2} sx={{ width: 32, height: 32 }} />
    <Avatar alt="Remy Sharp" src={User3} />
    <Avatar alt="Remy Sharp" src={User4} sx={{ width: 50, height: 50 }} />
    <Avatar alt="Remy Sharp" src={User5} sx={{ width: 60, height: 60 }} />
    <Avatar alt="Remy Sharp" src={User6} sx={{ width: 65, height: 65 }} />
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default SizesCode;

===== src/components/material-ui/avatar/code/VariantCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const VariantCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, Stack } from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';

<Stack direction="row" spacing={1} justifyContent="center">
    <Avatar sx={{ bgcolor: 'primary.main' }}>
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'primary.main' }} variant="square">
        <IconMoodSmile width={24} />
    </Avatar>
    <Avatar sx={{ bgcolor: 'primary.main' }} variant="rounded">
        <IconMoodSmile width={24} />
    </Avatar>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default VariantCode;

===== src/components/material-ui/avatar/code/WithBadgeCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const WithBadgeCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, AvatarGroup, Stack } from '@mui/material';
import { IconMoodSmile } from '@tabler/icons-react';


<Stack direction="row" spacing={1} justifyContent="center">
    <AvatarGroup>
        <Badge
            overlap="circular"
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
            badgeContent={
                <Avatar sx={{ width: 22, height: 22 }} alt="Remy Sharp" src={User1} />
            }
        >
            <Avatar alt="Travis Howard" src={User2} />
        </Badge>
    </AvatarGroup>
    <Badge
        overlap="circular"
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        variant="dot"
        color="success"
    >
        <Avatar alt="Remy Sharp" src={User3} />
    </Badge>
    <Badge
        overlap="circular"
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        variant="dot"
        color="warning"
    >
        <Avatar alt="Remy Sharp" src={User4} />
    </Badge>
    <Badge
        overlap="circular"
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        variant="dot"
        color="error"
    >
        <Avatar alt="Remy Sharp" src={User5} />
    </Badge>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default WithBadgeCode;

===== src/components/material-ui/chip/code/CustomIconCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CustomIconCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Avatar, 
Chip, 
 }  from '@mui/material';
import { 
IconCheck, 
IconChecks } from '@tabler/icons-react';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip
        label="Custom Icon" color="primary" avatar={<Avatar >M</Avatar>}
        onDelete={handleDelete}
        deleteIcon={<IconCheck width={20} />}
    />
    <Chip
        label="Custom Icon" color="secondary" avatar={<Avatar >S</Avatar>}
        onDelete={handleDelete}
        deleteIcon={<IconChecks width={20} />}
    />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default CustomIconCode;

===== src/components/material-ui/chip/code/CustomOutlinedIcon.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const CustomOutlinedIcon = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Avatar, 
Chip, 
 }  from '@mui/material';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip
        label="Custom Icon" color="primary" avatar={<Avatar >M</Avatar>}
        onDelete={handleDelete}
        deleteIcon={<IconCheck width={20} />}
    />
    <Chip
        label="Custom Icon" color="secondary" avatar={<Avatar >S</Avatar>}
        onDelete={handleDelete}
        deleteIcon={<IconChecks width={20} />}
    />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default CustomOutlinedIcon;

===== src/components/material-ui/chip/code/DisabledCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const DisabledCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Avatar, 
Chip, 
}  from '@mui/material';
import { IconMoodHappy } from '@tabler/icons-react';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip
        label="Custom Icon" disabled avatar={<Avatar >M</Avatar>}
        onDelete={handleDelete}
    />
    <Chip
        label="Custom Icon" color="primary" disabled avatar={<Avatar >S</Avatar>}
        onDelete={handleDelete}
    />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default DisabledCode;

===== src/components/material-ui/chip/code/FilledCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FilledCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { Avatar, Chip}  from '@mui/material';
import { IconMoodHappy } from '@tabler/icons-react';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip avatar={<Avatar>M</Avatar>} label="Default Filled" />
    <Chip avatar={<Avatar>M</Avatar>} label="Default Deletable" onDelete={handleDelete} />
    <Chip avatar={<Avatar alt="Natacha" src={User1} />} label="Primary Filled" color="primary" />
    <Chip avatar={<Avatar alt="Natacha" src={User1} />} label="Primary Deletable" color="primary" onDelete={handleDelete} />
    <Chip icon={<IconMoodHappy />} label="Secondary Filled" color="secondary" />
    <Chip icon={<IconMoodHappy />} label="Secondary Deletable" color="secondary" onDelete={handleDelete} />
    <Chip avatar={<Avatar alt="Natacha" src={User2} />} label="Default Filled" color="success" />
    <Chip avatar={<Avatar alt="Natacha" src={User2} />} label="Default Deletable" color="success" onDelete={handleDelete} />
    <Chip icon={<IconMoodHappy />} label="Default Filled" color="warning" />
    <Chip icon={<IconMoodHappy />} label="Default Deletable" color="warning" onDelete={handleDelete} />
    <Chip avatar={<Avatar alt="Natacha" src={User3} />} label="Default Filled" color="error" />
    <Chip avatar={<Avatar alt="Natacha" src={User3} />} label="Default Deletable" color="error" onDelete={handleDelete} />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default FilledCode;

===== src/components/material-ui/chip/code/OutlinedCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const OutlinedCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Avatar, 
Chip, 
 }  from '@mui/material';
import { IconMoodHappy } from '@tabler/icons-react';

import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip variant="outlined" avatar={<Avatar>M</Avatar>} label="Default Filled" />
    <Chip variant="outlined" avatar={<Avatar>M</Avatar>} label="Default Deletable" onDelete={handleDelete} />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User1} />} label="Default Filled" color="primary" />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User1} />} label="Default Deletable" color="primary" onDelete={handleDelete} />
    <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Filled" color="secondary" />
    <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Deletable" color="secondary" onDelete={handleDelete} />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User2} />} label="Default Filled" color="success" />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User2} />} label="Default Deletable" color="success" onDelete={handleDelete} />
    <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Filled" color="warning" />
    <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Deletable" color="warning" onDelete={handleDelete} />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User3} />} label="Default Filled" color="error" />
    <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User3} />} label="Default Deletable" color="error" onDelete={handleDelete} />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default OutlinedCode;

===== src/components/material-ui/chip/code/SizesCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SizesCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Avatar, 
Chip, 
}  from '@mui/material';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Chip label="Small" size="small" color="primary" />
    <Chip label="Normal" color="primary" />
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default SizesCode;

===== src/components/material-ui/dialog/AlertDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material';

const AlertDialog = () => {
    const [open, setOpen] = React.useState(false);

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };


    return (
        <>
            <Button variant="contained" color="secondary" fullWidth onClick={handleClickOpen}>
                Open Alert Dialog
            </Button>
            <Dialog
                open={open}
                onClose={handleClose}
                aria-labelledby="alert-dialog-title"
                aria-describedby="alert-dialog-description"
            >
                <DialogTitle id="alert-dialog-title">
                    {"Use Google's location service?"}
                </DialogTitle>
                <DialogContent>
                    <DialogContentText id="alert-dialog-description">
                        Let Google help apps determine location. This means sending anonymous
                        location data to Google, even when no apps are running.
                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button color="error" onClick={handleClose}>Disagree</Button>
                    <Button onClick={handleClose} autoFocus>
                        Agree
                    </Button>
                </DialogActions>
            </Dialog>
        </>
    );
}

export default AlertDialog;

===== src/components/material-ui/dialog/code/AlertCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const AlertCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Button, 
Dialog, 
DialogTitle, 
DialogContent, 
DialogContentText, 
DialogActions,
} from '@mui/material';

const [open, setOpen] = React.useState(false);

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};


return (
    <>
        <Button variant="contained" color="secondary" fullWidth onClick={handleClickOpen}>
            Open Alert Dialog
        </Button>
        <Dialog
            open={open}
            onClose={handleClose}
            aria-labelledby="alert-dialog-title"
            aria-describedby="alert-dialog-description"
        >
            <DialogTitle id="alert-dialog-title">
                {"Use Google's location service?"}
            </DialogTitle>
            <DialogContent>
                <DialogContentText id="alert-dialog-description">
                    Let Google help apps determine location. This means sending anonymous
                    location data to Google, even when no apps are running.
                </DialogContentText>
            </DialogContent>
            <DialogActions>
                <Button color="error" onClick={handleClose}>Disagree</Button>
                <Button onClick={handleClose} autoFocus>
                    Agree
                </Button>
            </DialogActions>
        </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default AlertCode;

===== src/components/material-ui/dialog/code/FormCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FormCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
Button, 
Dialog, 
DialogTitle, 
DialogContent, 
DialogContentText, 
DialogActions, 
Box 
} from '@mui/material';

import CustomTextField from "../../forms/theme-elements/CustomTextField";

const [open, setOpen] = React.useState(false);

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};


return (
    <>
        <Button variant="contained" color="warning" fullWidth onClick={handleClickOpen}>
            Open Form Dialog
        </Button>
        <Dialog open={open} onClose={handleClose}>
            <DialogTitle>Subscribe</DialogTitle>
            <DialogContent>
                <DialogContentText>
                    To subscribe to this website, please enter your email address here. We
                    will send updates occasionally.
                </DialogContentText>
                <Box mt={2}>
                    <CustomTextField
                        autoFocus
                        margin="dense"
                        id="name"
                        label="Email Address"
                        type="email"
                        fullWidth
                    />
                </Box>
            </DialogContent>
            <DialogActions>
                <Button color="error" onClick={handleClose}>Cancel</Button>
                <Button onClick={handleClose}>Subscribe</Button>
            </DialogActions>
        </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default FormCode;

===== src/components/material-ui/dialog/code/FullScreenCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FullScreenCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import {
  Button,
  Dialog,
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  List,
  ListItem,
  ListItemText,
  Divider,
  ListItemButton,
} from '@mui/material';
import Slide from '@mui/material/Slide';
import { IconX } from '@tabler/icons-react';
import { TransitionProps } from '@mui/material/transitions';

const Transition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const [open, setOpen] = React.useState(false);

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};


return (
    <>
      <Button variant="contained" color="error" fullWidth onClick={handleClickOpen}>
        Open Fullscreen Dialog
      </Button>
      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>
        <AppBar sx={{ position: 'relative' }}>
          <Toolbar>
            <IconButton edge="start" color="inherit" onClick={handleClose} aria-label="close">
              <IconX width={24} height={24} />
            </IconButton>
            <Typography ml={2} flex={1} variant="h6" component="div">
              Sound
            </Typography>
            <Button autoFocus color="inherit" onClick={handleClose}>
              Save
            </Button>
          </Toolbar>
        </AppBar>
        <List>
          <ListItemButton>
            <ListItemText primary="Phone ringtone" secondary="Titania" />
          </ListItemButton>
          <Divider />
          <ListItemButton>
            <ListItemText primary="Default notification ringtone" secondary="Tethys" />
          </ListItemButton>
        </List>
      </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default FullScreenCode;

===== src/components/material-ui/dialog/code/MaxWidthCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const MaxWidthCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Box,
  FormControl,
  InputLabel,
  MenuItem,
  FormControlLabel,
} from '@mui/material';

import CustomSelect from '../../forms/theme-elements/CustomSelect';
import CustomSwitch from '../../forms/theme-elements/CustomSwitch';
import { DialogProps } from '@mui/material/Dialog';

const [open, setOpen] = React.useState(false);
const [fullWidth, setFullWidth] = React.useState(true);
const [maxWidth, setMaxWidth] = React.useState<DialogProps['maxWidth']>('sm');

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};

const handleMaxWidthChange = (event: any) => {
    setMaxWidth(event.target.value);
};

const handleFullWidthChange = (event: any) => {
    setFullWidth(event.target.checked);
};


return (
    <>
      <Button variant="contained" color="primary" fullWidth onClick={handleClickOpen}>
        Open Maxwidth Dialog
      </Button>
      <Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>
        <DialogTitle>Optional sizes</DialogTitle>
        <DialogContent>
          <DialogContentText>
            You can set my maximum width and whether to adapt or not.
          </DialogContentText>
          <Box
            noValidate
            component="form"
            sx={{
              display: 'flex',
              flexDirection: 'column',
              m: 'auto',
              width: 'fit-content',
            }}
          >
            <FormControl sx={{ mt: 2, minWidth: 120 }}>
              <InputLabel htmlFor="max-width">maxWidth</InputLabel>
              <CustomSelect
                autoFocus
                value={maxWidth}
                onChange={handleMaxWidthChange}
                label="maxWidth"
                inputProps={{
                  name: 'max-width',
                  id: 'max-width',
                }}
              >
                <MenuItem>false</MenuItem>
                <MenuItem value="xs">xs</MenuItem>
                <MenuItem value="sm">sm</MenuItem>
                <MenuItem value="md">md</MenuItem>
                <MenuItem value="lg">lg</MenuItem>
                <MenuItem value="xl">xl</MenuItem>
              </CustomSelect>
            </FormControl>
            <FormControlLabel
              sx={{ mt: 1 }}
              control={<CustomSwitch checked={fullWidth} onChange={handleFullWidthChange} />}
              label="Full width"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button color="error" variant="contained" onClick={handleClose}>
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default MaxWidthCode;

===== src/components/material-ui/dialog/code/ResponsiveFullscreenCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ResponsiveFullscreenCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
} from '@mui/material';
import useMediaQuery from '@mui/material/useMediaQuery';
import { useTheme } from '@mui/material/styles';

const [open, setOpen] = React.useState(false);
const theme = useTheme();
const fullScreen = useMediaQuery(theme.breakpoints.down('md'));

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};

return (
    <>
      <Button variant="contained" color="warning" fullWidth onClick={handleClickOpen}>
        Open Responsive Dialog
      </Button>
      <Dialog
        fullScreen={fullScreen}
        open={open}
        onClose={handleClose}
        aria-labelledby="responsive-dialog-title"
      >
        <DialogTitle id="responsive-dialog-title">{"Use Google's location service?"}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Let Google help apps determine location. This means sending anonymous location data to
            Google, even when no apps are running.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button autoFocus onClick={handleClose}>
            Disagree
          </Button>
          <Button onClick={handleClose} autoFocus>
            Agree
          </Button>
        </DialogActions>
      </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default ResponsiveFullscreenCode;

===== src/components/material-ui/dialog/code/ScrollingContentCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ScrollingContentCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Stack,
  DialogProps,
} from '@mui/material';

const [open, setOpen] = React.useState(false);
const [scroll, setScroll] = React.useState<DialogProps['scroll']>('paper');

const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {
   setOpen(true);
   setScroll(scrollType);
};

const handleClose = () => {
   setOpen(false);
};

const descriptionElementRef = React.useRef<HTMLElement>(null);
React.useEffect(() => {
    if (open) {
      const { current: descriptionElement } = descriptionElementRef;
      if (descriptionElement !== null) {
        descriptionElement.focus();
      }
    }
}, [open]);

return (
    <>
      <Stack spacing={2}>
        <Button variant="contained" color="success" onClick={handleClickOpen('paper')}>
          Scroll with Paper
        </Button>
        <Button variant="contained" color="secondary" onClick={handleClickOpen('body')}>
          Scroll with Body
        </Button>
      </Stack>
      <Dialog
        open={open}
        onClose={handleClose}
        scroll={scroll}
        aria-labelledby="scroll-dialog-title"
        aria-describedby="scroll-dialog-description"
      >
        <DialogTitle id="scroll-dialog-title">Subscribe</DialogTitle>
        <DialogContent dividers={scroll === 'paper'}>
          <DialogContentText
            id="scroll-dialog-description"
            ref={descriptionElementRef}
            tabIndex={-1}
          >
            {[...new Array(50)]
              .map(
                () => 'Cras mattis consectetur purus sit amet fermentum.
                Cras justo odio, dapibus ac facilisis in, egestas eget quam.
                Morbi leo risus, porta ac consectetur ac, vestibulum at eros.
                Praesent commodo cursus magna, vel scelerisque nisl consectetur et.',
              )
              .join('\n')}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button color="error" onClick={handleClose}>
            Cancel
          </Button>
          <Button onClick={handleClose}>Subscribe</Button>
        </DialogActions>
      </Dialog>
    </>
  );`}
      </CodeDialog>
    </>
  );
};

export default ScrollingContentCode;

===== src/components/material-ui/dialog/code/SimpleCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SimpleDialogCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Typography,
  Button,
  Dialog,
  DialogTitle,
  List,
  ListItem,
  ListItemAvatar,
  Avatar,
  ListItemText,
  ListItemButton,
} from '@mui/material';
import { IconUser, IconPlus } from '@tabler/icons-react';

const emails = ['JohnDeo@gmail.com', 'SmithRocky@gmail.com'];

const [open, setOpen] = React.useState(false);
const [selectedValue, setSelectedValue] = React.useState(emails[1]);

const handleClickOpen = () => {
  setOpen(true);
};

const handleClose = (value: string) => {
  setOpen(false);
  setSelectedValue(value);
};

return (
  <>
    <Button variant="contained" color="primary" fullWidth onClick={handleClickOpen}>
      Open Simple Dialog
    </Button>
    <Typography variant="subtitle1" component="div" mb={1} textAlign="center">
      Selected: {selectedValue}
    </Typography>
    <Dialog onClose={() => handleClose(selectedValue)} open={open}>
      <DialogTitle>Set backup account</DialogTitle>
      <List sx={{ pt: 0 }}>
        {emails.map((email) => (
          <ListItemButton onClick={() => handleClose(email)} key={email}>
            <ListItemAvatar>
              <Avatar sx={{ bgcolor: 'primary.light', color: 'primary.main' }}>
                <IconUser width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary={email} />
          </ListItemButton>
        ))}

        <ListItem autoFocus button onClick={() => handleClose('addAccount')}>
          <ListItemAvatar>
            <Avatar>
              <IconPlus width={20} height={20} />
            </Avatar>
          </ListItemAvatar>
          <ListItemText primary="Add account" />
        </ListItem>
      </List>
    </Dialog>
  </>
);`}
      </CodeDialog>
    </>
  );
};

export default SimpleDialogCode;

===== src/components/material-ui/dialog/code/TransitionCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TransitionCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
} from '@mui/material';
import Slide from '@mui/material/Slide';
import { TransitionProps } from '@mui/material/transitions';

const Transition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const [open, setOpen] = React.useState(false);

const handleClickOpen = () => {
    setOpen(true);
};

const handleClose = () => {
    setOpen(false);
};


return (
    <>
      <Button variant="contained" color="success" fullWidth onClick={handleClickOpen}>
        Open Transition Dialog
      </Button>
      <Dialog
        open={open}
        TransitionComponent={Transition}
        keepMounted
        onClose={handleClose}
        aria-describedby="alert-dialog-slide-description"
      >
        <DialogTitle>{"Use Google's location service?"}</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-slide-description">
            Let Google help apps determine location. This means sending anonymous location data to
            Google, even when no apps are running.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button color="error" onClick={handleClose}>
            Disagree
          </Button>
          <Button onClick={handleClose}>Agree</Button>
        </DialogActions>
      </Dialog>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default TransitionCode;

===== src/components/material-ui/dialog/FormDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Box } from '@mui/material';

import CustomTextField from "../../forms/theme-elements/CustomTextField";

const FormDialog = () => {
    const [open, setOpen] = React.useState(false);

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    return (
        <>
            <Button variant="contained" color="warning" fullWidth onClick={handleClickOpen}>
                Open Form Dialog
            </Button>
            <Dialog open={open} onClose={handleClose}>
                <DialogTitle>Subscribe</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        To subscribe to this website, please enter your email address here. We
                        will send updates occasionally.
                    </DialogContentText>
                    <Box mt={2}>
                        <CustomTextField
                            autoFocus
                            margin="dense"
                            id="name"
                            label="Email Address"
                            type="email"
                            fullWidth
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button color="error" onClick={handleClose}>Cancel</Button>
                    <Button onClick={handleClose}>Subscribe</Button>
                </DialogActions>
            </Dialog>
        </>
    );
}

export default FormDialog;

===== src/components/material-ui/dialog/FullscreenDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Button,
  Dialog,
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  List,
  ListItemText,
  Divider,
  ListItemButton,
} from '@mui/material';
import Slide from '@mui/material/Slide';
import { IconX } from '@tabler/icons-react';
import { TransitionProps } from '@mui/material/transitions';

const Transition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const FullscreenDialog = () => {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Button variant="contained" color="error" fullWidth onClick={handleClickOpen}>
        Open Fullscreen Dialog
      </Button>
      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>
        <AppBar sx={{ position: 'relative' }}>
          <Toolbar>
            <IconButton edge="start" color="inherit" onClick={handleClose} aria-label="close">
              <IconX width={24} height={24} />
            </IconButton>
            <Typography ml={2} flex={1} variant="h6" component="div">
              Sound
            </Typography>
            <Button autoFocus color="inherit" onClick={handleClose}>
              Save
            </Button>
          </Toolbar>
        </AppBar>

        <List>
          <ListItemButton>
            <ListItemText primary="Phone ringtone" secondary="Titania" />
          </ListItemButton>
          <Divider />
          <ListItemButton>
            <ListItemText primary="Default notification ringtone" secondary="Tethys" />
          </ListItemButton>
        </List>
      </Dialog>
    </>
  );
};

export default FullscreenDialog;

===== src/components/material-ui/dialog/MaxWidthDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Box,
  FormControl,
  InputLabel,
  MenuItem,
  FormControlLabel,
} from '@mui/material';

import CustomSelect from '../../forms/theme-elements/CustomSelect';
import CustomSwitch from '../../forms/theme-elements/CustomSwitch';
import { DialogProps } from '@mui/material/Dialog';

const MaxWidthDialog = () => {
  const [open, setOpen] = React.useState(false);
  const [fullWidth, setFullWidth] = React.useState(true);
  const [maxWidth, setMaxWidth] = React.useState<DialogProps['maxWidth']>('sm');

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleMaxWidthChange = (event: any) => {
    setMaxWidth(event.target.value);
  };

  const handleFullWidthChange = (event: any) => {
    setFullWidth(event.target.checked);
  };

  return (
    <>
      <Button variant="contained" color="primary" fullWidth onClick={handleClickOpen}>
        Open Maxwidth Dialog
      </Button>
      <Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>
        <DialogTitle>Optional sizes</DialogTitle>
        <DialogContent>
          <DialogContentText>
            You can set my maximum width and whether to adapt or not.
          </DialogContentText>
          <Box
            noValidate
            component="form"
            sx={{
              display: 'flex',
              flexDirection: 'column',
              m: 'auto',
              width: 'fit-content',
            }}
          >
            <FormControl sx={{ mt: 2, minWidth: 120 }}>
              <InputLabel htmlFor="max-width">maxWidth</InputLabel>
              <CustomSelect
                autoFocus
                value={maxWidth}
                onChange={handleMaxWidthChange}
                label="maxWidth"
                inputProps={{
                  name: 'max-width',
                  id: 'max-width',
                }}
              >
                <MenuItem>false</MenuItem>
                <MenuItem value="xs">xs</MenuItem>
                <MenuItem value="sm">sm</MenuItem>
                <MenuItem value="md">md</MenuItem>
                <MenuItem value="lg">lg</MenuItem>
                <MenuItem value="xl">xl</MenuItem>
              </CustomSelect>
            </FormControl>
            <FormControlLabel
              sx={{ mt: 1 }}
              control={<CustomSwitch checked={fullWidth} onChange={handleFullWidthChange} />}
              label="Full width"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button color="error" variant="contained" onClick={handleClose}>
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default MaxWidthDialog;

===== src/components/material-ui/dialog/ResponsiveDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
} from '@mui/material';
import useMediaQuery from '@mui/material/useMediaQuery';
import { useTheme } from '@mui/material/styles';

const ResponsiveDialog = () => {
  const [open, setOpen] = React.useState(false);
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Button variant="contained" color="warning" fullWidth onClick={handleClickOpen}>
        Open Responsive Dialog
      </Button>
      <Dialog
        fullScreen={fullScreen}
        open={open}
        onClose={handleClose}
        aria-labelledby="responsive-dialog-title"
      >
        <DialogTitle id="responsive-dialog-title">{"Use Google's location service?"}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Let Google help apps determine location. This means sending anonymous location data to
            Google, even when no apps are running.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button autoFocus onClick={handleClose}>
            Disagree
          </Button>
          <Button onClick={handleClose} autoFocus>
            Agree
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ResponsiveDialog;

===== src/components/material-ui/dialog/ScrollContentDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Stack,
  DialogProps,
} from '@mui/material';

const ScrollContentDialog = () => {
  const [open, setOpen] = React.useState(false);
  const [scroll, setScroll] = React.useState<DialogProps['scroll']>('paper');

  const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {
    setOpen(true);
    setScroll(scrollType);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const descriptionElementRef = React.useRef<HTMLElement>(null);
  React.useEffect(() => {
    if (open) {
      const { current: descriptionElement } = descriptionElementRef;
      if (descriptionElement !== null) {
        descriptionElement.focus();
      }
    }
  }, [open]);

  return (
    <>
      <Stack spacing={2}>
        <Button variant="contained" color="success" onClick={handleClickOpen('paper')}>
          Scroll with Paper
        </Button>
        <Button variant="contained" color="secondary" onClick={handleClickOpen('body')}>
          Scroll with Body
        </Button>
      </Stack>
      <Dialog
        open={open}
        onClose={handleClose}
        scroll={scroll}
        aria-labelledby="scroll-dialog-title"
        aria-describedby="scroll-dialog-description"
      >
        <DialogTitle id="scroll-dialog-title">Subscribe</DialogTitle>
        <DialogContent dividers={scroll === 'paper'}>
          <DialogContentText
            id="scroll-dialog-description"
            ref={descriptionElementRef}
            tabIndex={-1}
          >
            {[...new Array(50)]
              .map(
                () => `Cras mattis consectetur purus sit amet fermentum.
Cras justo odio, dapibus ac facilisis in, egestas eget quam.
Morbi leo risus, porta ac consectetur ac, vestibulum at eros.
Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`,
              )
              .join('\n')}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button color="error" onClick={handleClose}>
            Cancel
          </Button>
          <Button onClick={handleClose}>Subscribe</Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ScrollContentDialog;

===== src/components/material-ui/dialog/SimpleDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Typography,
  Button,
  Dialog,
  DialogTitle,
  List,

  ListItemAvatar,
  Avatar,
  ListItemText,
  ListItemButton,
} from '@mui/material';

import { IconUser, IconPlus } from '@tabler/icons-react';

const emails = ['JohnDeo@gmail.com', 'SmithRocky@gmail.com'];

const SimpleDialog = () => {
  const [open, setOpen] = React.useState(false);
  const [selectedValue, setSelectedValue] = React.useState(emails[1]);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = (value: string) => {
    setOpen(false);
    setSelectedValue(value);
  };

  return (
    <>
      <Button variant="contained" color="primary" fullWidth onClick={handleClickOpen}>
        Open Simple Dialog
      </Button>
      <Typography variant="subtitle1" component="div" mb={1} textAlign="center">
        Selected: {selectedValue}
      </Typography>
      <Dialog onClose={() => handleClose(selectedValue)} open={open}>
        <DialogTitle>Set backup account</DialogTitle>
        <List sx={{ pt: 0 }}>
          {emails.map((email) => (
            <ListItemButton onClick={() => handleClose(email)} key={email}>
              <ListItemAvatar>
                <Avatar sx={{ bgcolor: 'primary.light', color: 'primary.main' }}>
                  <IconUser width={20} height={20} />
                </Avatar>
              </ListItemAvatar>
              <ListItemText primary={email} />
            </ListItemButton>
          ))}


          <ListItemButton autoFocus onClick={() => handleClose('addAccount')}>
            <ListItemAvatar>
              <Avatar>
                <IconPlus width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Add account" />
          </ListItemButton>
        </List>
      </Dialog>
    </>
  );
};

export default SimpleDialog;

===== src/components/material-ui/dialog/TransitionDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
} from '@mui/material';
import Slide from '@mui/material/Slide';
import { TransitionProps } from '@mui/material/transitions';

const Transition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const TransitionDialog = () => {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Button variant="contained" color="success" fullWidth onClick={handleClickOpen}>
        Open Transition Dialog
      </Button>
      <Dialog
        open={open}
        TransitionComponent={Transition}
        keepMounted
        onClose={handleClose}
        aria-describedby="alert-dialog-slide-description"
      >
        <DialogTitle>{"Use Google's location service?"}</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-slide-description">
            Let Google help apps determine location. This means sending anonymous location data to
            Google, even when no apps are running.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button color="error" onClick={handleClose}>
            Disagree
          </Button>
          <Button onClick={handleClose}>Agree</Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default TransitionDialog;

===== src/components/material-ui/lists/code/ControlsListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ControlsListCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  IconButton,
  Checkbox,
  Card
} from '@mui/material';

import { IconMessage } from '@tabler/icons-react';

const [checked, setChecked] = React.useState([0]);

const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
};

<Card>
    <List>
        {[0, 1, 2, 3].map((value) => {
            const labelId = 'checkbox-list-label-{value}';

            return (
                <ListItem
                    key={value}
                    secondaryAction={
                        <IconButton edge="end" aria-label="comments">
                            <IconMessage width={20} height={20} />
                        </IconButton>
                    }
                    disablePadding
                >
                    <ListItemButton role={undefined} onClick={handleToggle(value)} dense>
                        <ListItemIcon>
                            <Checkbox
                                checked={checked.indexOf(value) !== -1}
                                tabIndex={-1}
                                disableRipple
                                inputProps={{ 'aria-labelledby': labelId }}
                                edge="start"
                            />
                        </ListItemIcon>
                        <ListItemText id={labelId} primary={'Line item {value + 1}'} />
                    </ListItemButton>
                </ListItem>
            );
        })}
    </List>
</Card > `}
      </CodeDialog>
    </>
  );
};

export default ControlsListCode;

===== src/components/material-ui/lists/code/FolderListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FolderListCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { 
List, 
ListItem, 
ListItemText, 
ListItemAvatar, 
Avatar,
Card
} from '@mui/material';

import { 
IconPhoto, 
IconBriefcase, 
IconBeach 
} from '@tabler/icons-react';

<Card>
    <List>
        <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconPhoto width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Photos" secondary="Jan 9, 2014" />
        </ListItem>
        <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconBriefcase width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Work" secondary="Jan 7, 2014" />
        </ListItem>
        <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconBeach width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Vacation" secondary="July 20, 2014" />
        </ListItem>
    </List>
</Card>`}
      </CodeDialog>
    </>
  );
};

export default FolderListCode;

===== src/components/material-ui/lists/code/NestedListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const NestedListCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import {
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ListSubheader,
  Collapse,
  Card
} from '@mui/material';

import {
  IconInbox,
  IconMailOpened,
  IconSend,
  IconChevronDown,
  IconChevronUp,
  IconStar,
} from '@tabler/icons-react';

const [open, setOpen] = React.useState(true);

const handleClick = () => {
    setOpen(!open);
};

<Card>
    <List
    component="nav"
    aria-labelledby="nested-list-subheader"
    subheader={
        <ListSubheader component="div" id="nested-list-subheader">
              Nested List Items
        </ListSubheader>
          }
    >
        <ListItemButton>
            <ListItemIcon>
              <IconSend width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Sent mail" />
        </ListItemButton>
        <ListItemButton>
            <ListItemIcon>
              <IconMailOpened width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Drafts" />
        </ListItemButton>
        <ListItemButton onClick={handleClick}>
            <ListItemIcon>
              <IconInbox width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Inbox" />
            {open ? <IconChevronUp /> : <IconChevronDown />}
        </ListItemButton>
        <Collapse in={open} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              <ListItemButton sx={{ pl: 4 }}>
                <ListItemIcon>
                  <IconStar width={20} height={20} />
                </ListItemIcon>
                <ListItemText primary="Starred" />
              </ListItemButton>
            </List>
        </Collapse>
    </List>
</Card>`}
      </CodeDialog>
    </>
  );
};

export default NestedListCode;

===== src/components/material-ui/lists/code/SelectedListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SelectedListCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { 
List, 
ListItemText, 
ListItemButton, 
Divider, 
ListItemIcon,
Card
} from '@mui/material';

import { 
IconInbox, 
IconMailOpened 
} from '@tabler/icons-react';

const [selectedIndex, setSelectedIndex] = React.useState(1);

const handleListItemClick = (
    event: React.MouseEvent<HTMLDivElement, MouseEvent>,
    index: number,
) => {
    setSelectedIndex(index);
};

<Card>
    <List component="nav" aria-label="main mailbox folders">
        <ListItemButton
            selected={selectedIndex === 0}
            onClick={(event) => handleListItemClick(event, 0)}
        >
            <ListItemIcon>
              <IconInbox width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Inbox" />
        </ListItemButton>
        <ListItemButton
            selected={selectedIndex === 1}
            onClick={(event) => handleListItemClick(event, 1)}
        >
            <ListItemIcon>
              <IconMailOpened width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Drafts" />
        </ListItemButton>
    </List>
    <Divider />
    <List component="nav" aria-label="secondary mailbox folder">
        <ListItemButton
            selected={selectedIndex === 2}
            onClick={(event) => handleListItemClick(event, 2)}
        >
            <ListItemText primary="Trash" />
        </ListItemButton>
        <ListItemButton
            selected={selectedIndex === 3}
            onClick={(event) => handleListItemClick(event, 3)}
        >
            <ListItemText primary="Spam" />
        </ListItemButton>
    </List>
</Card>`}
      </CodeDialog>
    </>
  );
};

export default SelectedListCode;

===== src/components/material-ui/lists/code/SimpleListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SimpleListCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Divider,
  Card
} from '@mui/material';

import { IconInbox, IconMailOpened } from '@tabler/icons-react';

<Card>
    <List>
        <ListItem disablePadding>
            <ListItemButton>
                <ListItemIcon>
                    <IconInbox width={20} height={20} />
                </ListItemIcon>
                <ListItemText primary="Inbox" />
            </ListItemButton>
            </ListItem>
            <ListItem disablePadding>
            <ListItemButton>
                <ListItemIcon>
                    <IconMailOpened width={20} height={20} />
                </ListItemIcon>
                <ListItemText primary="Drafts" />
            </ListItemButton>
        </ListItem>
    </List>
    <Divider />
    <List>
        <ListItem disablePadding>
            <ListItemButton>
              <ListItemText primary="Trash" />
            </ListItemButton>
        </ListItem>
        <ListItem disablePadding>
            <ListItemButton component="a" href="#simple-list">
              <ListItemText primary="Spam" />
            </ListItemButton>
        </ListItem>
    </List>
</Card>`}
      </CodeDialog>
    </>
  );
};

export default SimpleListCode;

===== src/components/material-ui/lists/code/SwitchListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SwitchListCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { 
  List, 
  ListItem, 
  ListItemIcon, 
  ListItemText, 
  ListSubheader,
  Card
} from '@mui/material';

import { 
  IconWifi, 
  IconBluetooth 
} from '@tabler/icons-react';

import CustomSwitch from '../../forms/theme-elements/CustomSwitch';

const [checked, setChecked] = React.useState(['wifi']);

const handleToggle = (value: string) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
};

<Card>
    <List subheader={<ListSubheader>Settings</ListSubheader>}>
        <ListItem>
            <ListItemIcon>
              <IconWifi width={20} height={20} />
            </ListItemIcon>
            <ListItemText id="switch-list-label-wifi" primary="Wi-Fi" />
            <CustomSwitch
              edge="end"
              onChange={handleToggle('wifi')}
              checked={checked.indexOf('wifi') !== -1}
              inputProps={{
                'aria-labelledby': 'switch-list-label-wifi',
              }}
            />
        </ListItem>
        <ListItem>
            <ListItemIcon>
              <IconBluetooth width={20} height={20} />
            </ListItemIcon>
            <ListItemText id="switch-list-label-bluetooth" primary="Bluetooth" />
            <CustomSwitch
              edge="end"
              onChange={handleToggle('bluetooth')}
              checked={checked.indexOf('bluetooth') !== -1}
              inputProps={{
                'aria-labelledby': 'switch-list-label-bluetooth',
              }}
            />
        </ListItem>
    </List>
</Card>`}
      </CodeDialog>
    </>
  );
};

export default SwitchListCode;

===== src/components/material-ui/lists/ControlsList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  
  IconButton,
  Checkbox,
} from '@mui/material';

import { IconMessage } from '@tabler/icons-react';
import BlankCard from '../../shared/BlankCard';

const ControlsList = () => {
  const [checked, setChecked] = React.useState([0]);

  const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  return (
    <>
      <BlankCard>
        <List>
          {[0, 1, 2, 3].map((value) => {
            const labelId = `checkbox-list-label-${value}`;

            return (
              <ListItem
                key={value}
                secondaryAction={
                  <IconButton edge="end" aria-label="comments">
                    <IconMessage width={20} height={20} />
                  </IconButton>
                }
                disablePadding
              >
                <ListItemButton role={undefined} onClick={handleToggle(value)} dense>
                  <ListItemIcon>
                    <Checkbox
                      checked={checked.indexOf(value) !== -1}
                      tabIndex={-1}
                      disableRipple
                      inputProps={{ 'aria-labelledby': labelId }}
                      edge="start"
                    />
                  </ListItemIcon>
                  <ListItemText id={labelId} primary={`Line item ${value + 1}`} />
                </ListItemButton>
              </ListItem>
            );
          })}
        </List>
      </BlankCard>
    </>
  );
};

export default ControlsList;

===== src/components/material-ui/lists/FolderList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@mui/material';
import BlankCard from '../../shared/BlankCard';

import { IconPhoto, IconBriefcase, IconBeach } from '@tabler/icons-react';

const FolderList = () => {
  return (
    <>
      <BlankCard>
        <List>
          <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconPhoto width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Photos" secondary="Jan 9, 2014" />
          </ListItem>
          <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconBriefcase width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Work" secondary="Jan 7, 2014" />
          </ListItem>
          <ListItem>
            <ListItemAvatar>
              <Avatar>
                <IconBeach width={20} height={20} />
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary="Vacation" secondary="July 20, 2014" />
          </ListItem>
        </List>
      </BlankCard>
    </>
  );
};

export default FolderList;

===== src/components/material-ui/lists/NestedList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ListSubheader,
  Collapse,
} from '@mui/material';
import BlankCard from '../../shared/BlankCard';

import {
  IconInbox,
  IconMailOpened,
  IconSend,
  IconChevronDown,
  IconChevronUp,
  IconStar,
} from '@tabler/icons-react';

const NestedList = () => {
  const [open, setOpen] = React.useState(true);

  const handleClick = () => {
    setOpen(!open);
  };

  return (
    <>
      <BlankCard>
        <List
          component="nav"
          aria-labelledby="nested-list-subheader"
          subheader={
            <ListSubheader component="div" id="nested-list-subheader">
              Nested List Items
            </ListSubheader>
          }
        >
          <ListItemButton>
            <ListItemIcon>
              <IconSend width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Sent mail" />
          </ListItemButton>
          <ListItemButton>
            <ListItemIcon>
              <IconMailOpened width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Drafts" />
          </ListItemButton>
          <ListItemButton onClick={handleClick}>
            <ListItemIcon>
              <IconInbox width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Inbox" />
            {open ? <IconChevronUp /> : <IconChevronDown />}
          </ListItemButton>
          <Collapse in={open} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              <ListItemButton sx={{ pl: 4 }}>
                <ListItemIcon>
                  <IconStar width={20} height={20} />
                </ListItemIcon>
                <ListItemText primary="Starred" />
              </ListItemButton>
            </List>
          </Collapse>
        </List>
      </BlankCard>
    </>
  );
};

export default NestedList;

===== src/components/material-ui/lists/SelectedList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { List, ListItemText, ListItemButton, Divider, ListItemIcon } from '@mui/material';
import BlankCard from '../../shared/BlankCard';

import { IconInbox, IconMailOpened } from '@tabler/icons-react';

const SelectedList = () => {
  const [selectedIndex, setSelectedIndex] = React.useState(1);

  const handleListItemClick = (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    event: React.MouseEvent<HTMLDivElement, MouseEvent>,
    index: number,
  ) => {
    setSelectedIndex(index);
  };

  return (
    <>
      <BlankCard>
        <List component="nav" aria-label="main mailbox folders">
          <ListItemButton
            selected={selectedIndex === 0}
            onClick={(event) => handleListItemClick(event, 0)}
          >
            <ListItemIcon>
              <IconInbox width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Inbox" />
          </ListItemButton>
          <ListItemButton
            selected={selectedIndex === 1}
            onClick={(event) => handleListItemClick(event, 1)}
          >
            <ListItemIcon>
              <IconMailOpened width={20} height={20} />
            </ListItemIcon>
            <ListItemText primary="Drafts" />
          </ListItemButton>
        </List>
        <Divider />
        <List component="nav" aria-label="secondary mailbox folder">
          <ListItemButton
            selected={selectedIndex === 2}
            onClick={(event) => handleListItemClick(event, 2)}
          >
            <ListItemText primary="Trash" />
          </ListItemButton>
          <ListItemButton
            selected={selectedIndex === 3}
            onClick={(event) => handleListItemClick(event, 3)}
          >
            <ListItemText primary="Spam" />
          </ListItemButton>
        </List>
      </BlankCard>
    </>
  );
};

export default SelectedList;

===== src/components/material-ui/lists/SimpleList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import BlankCard from '../../shared/BlankCard';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Divider
} from '@mui/material';

import { IconInbox, IconMailOpened } from '@tabler/icons-react';

const SimpleList = () => {
  return (
    <>
      <BlankCard>
        <List>
          <ListItem disablePadding>
            <ListItemButton>
              <ListItemIcon>
                <IconInbox width={20} height={20} />
              </ListItemIcon>
              <ListItemText primary="Inbox" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton>
              <ListItemIcon>
                <IconMailOpened width={20} height={20} />
              </ListItemIcon>
              <ListItemText primary="Drafts" />
            </ListItemButton>
          </ListItem>
        </List>
        <Divider />
        <List>
          <ListItem disablePadding>
            <ListItemButton>
              <ListItemText primary="Trash" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton component="a" href="#simple-list">
              <ListItemText primary="Spam" />
            </ListItemButton>
          </ListItem>
        </List>
      </BlankCard>
    </>
  );
};

export default SimpleList;

===== src/components/material-ui/lists/SwitchList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { List, ListItem, ListItemIcon, ListItemText, ListSubheader } from '@mui/material';
import BlankCard from '../../shared/BlankCard';

import { IconWifi, IconBluetooth } from '@tabler/icons-react';

import CustomSwitch from '../../forms/theme-elements/CustomSwitch';

const SwitchList = () => {
  const [checked, setChecked] = React.useState(['wifi']);

  const handleToggle = (value: string) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  return (
    <>
      <BlankCard>
        <List subheader={<ListSubheader>Settings</ListSubheader>}>
          <ListItem>
            <ListItemIcon>
              <IconWifi width={20} height={20} />
            </ListItemIcon>
            <ListItemText id="switch-list-label-wifi" primary="Wi-Fi" />
            <CustomSwitch
              edge="end"
              onChange={handleToggle('wifi')}
              checked={checked.indexOf('wifi') !== -1}
              inputProps={{
                'aria-labelledby': 'switch-list-label-wifi',
              }}
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <IconBluetooth width={20} height={20} />
            </ListItemIcon>
            <ListItemText id="switch-list-label-bluetooth" primary="Bluetooth" />
            <CustomSwitch
              edge="end"
              onChange={handleToggle('bluetooth')}
              checked={checked.indexOf('bluetooth') !== -1}
              inputProps={{
                'aria-labelledby': 'switch-list-label-bluetooth',
              }}
            />
          </ListItem>
        </List>
      </BlankCard>
    </>
  );
};

export default SwitchList;

===== src/components/material-ui/popover/ClickPopover.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Popover, Typography, Button, Box } from '@mui/material';

const ClickPopover = () => {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event: any) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);
  const id = open ? 'simple-popover' : undefined;

  return (
    <>
      <Button aria-describedby={id} variant="contained" onClick={handleClick}>
        Open Popover
      </Button>
      <Popover
        id={id}
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
      >
        <Box p={2}>
          <Typography variant="h6" mb={1}>
            Basic Popover
          </Typography>
          <Typography color="textSecondary">
            The component is built on top of the Modal component.
          </Typography>
        </Box>
      </Popover>
    </>
  );
};
export default ClickPopover;

===== src/components/material-ui/popover/code/ClickPopoverCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ClickPopoverCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
    Popover, 
    Typography, 
    Button, 
    Box 
} from '@mui/material';


const [anchorEl, setAnchorEl] = React.useState(null);

const handleClick = (event: any) => {
    setAnchorEl(event.currentTarget);
};

const handleClose = () => {
    setAnchorEl(null);
};

const open = Boolean(anchorEl);
const id = open ? 'simple-popover' : undefined;

return (
    <>
        <Button aria-describedby={id} variant="contained" onClick={handleClick}>
            Open Popover
        </Button>
        <Popover
            id={id}
            open={open}
            anchorEl={anchorEl}
            onClose={handleClose}
            anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'left',
        }}
        >
            <Box p={2}>
                <Typography variant="h6" mb={1}>
                    Basic Popover
                </Typography>
                <Typography color="textSecondary">
                    The component is built on top of the Modal component.
                </Typography>
            </Box>
        </Popover>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default ClickPopoverCode;

===== src/components/material-ui/popover/code/HoverPopoverCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const HoverPopoverCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { 
  Popover, 
  Box, 
  Typography 
} from '@mui/material';


const [anchorEl, setAnchorEl] = React.useState(null);
a
const handlePopoverOpen = (event: any) => {
    setAnchorEl(event.currentTarget);
};

const handlePopoverClose = () => {
    setAnchorEl(null);
};

const open = Boolean(anchorEl);

return (
    <>
        <Typography
            aria-owns={open ? 'mouse-over-popover' : undefined}
            aria-haspopup="true"
            onMouseEnter={handlePopoverOpen}
            onMouseLeave={handlePopoverClose}
        >
            Hover with a Popover.
        </Typography>
        <Popover
            id="mouse-over-popover"
            sx={{
                pointerEvents: 'none',
            }}
            open={open}
            anchorEl={anchorEl}
            anchorOrigin={{
                vertical: 'bottom',
                horizontal: 'left',
            }}
            transformOrigin={{
                vertical: 'top',
                horizontal: 'left',
            }}
            onClose={handlePopoverClose}
            disableRestoreFocus
        >
            <Box p={2}>
                <Typography variant="h6" mb={1}>
                    Hover Popover
                </Typography>
                <Typography color="textSecondary">
                    The component is built on top of the Modal component.
                </Typography>
            </Box>
      </Popover>
    </>
);`}
      </CodeDialog>
    </>
  );
};

export default HoverPopoverCode;

===== src/components/material-ui/popover/HoverPopover.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Popover, Box, Typography } from '@mui/material';

const HoverPopover = () => {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handlePopoverOpen = (event: any) => {
    setAnchorEl(event.currentTarget);
  };

  const handlePopoverClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);

  return (
    <>
      <Typography
        aria-owns={open ? 'mouse-over-popover' : undefined}
        aria-haspopup="true"
        onMouseEnter={handlePopoverOpen}
        onMouseLeave={handlePopoverClose}
      >
        Hover with a Popover.
      </Typography>
      <Popover
        id="mouse-over-popover"
        sx={{
          pointerEvents: 'none',
        }}
        open={open}
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        onClose={handlePopoverClose}
        disableRestoreFocus
      >
        <Box p={2}>
          <Typography variant="h6" mb={1}>
            Hover Popover
          </Typography>
          <Typography color="textSecondary">
            The component is built on top of the Modal component.
          </Typography>
        </Box>
      </Popover>
    </>
  );
};
export default HoverPopover;

===== src/components/material-ui/tabs/code/IconBottomCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const IconBottomCode = () => {
    return (
        <>
            <CodeDialog>
                {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
        {COMMON_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="bottom" value={tab.value} disabled={tab.disabled} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>`}
            </CodeDialog>
        </>
    );
};

export default IconBottomCode;

===== src/components/material-ui/tabs/code/IconCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
        {COMMON_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} value={tab.value} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>
`}
      </CodeDialog>
    </>
  );
};

export default IconCode;

===== src/components/material-ui/tabs/code/IconLeftCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconLeftCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
        {COMMON_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="start" value={tab.value} disabled={tab.disabled} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>`}
      </CodeDialog>
    </>
  );
};

export default IconLeftCode;

===== src/components/material-ui/tabs/code/IconRightCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconRightCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
        {COMMON_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="end" value={tab.value} disabled={tab.disabled} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>`}
      </CodeDialog>
    </>
  );
};

export default IconRightCode;

===== src/components/material-ui/tabs/code/IconWithLabelCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconWithLabelCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
        {COMMON_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} label={tab.label} value={tab.value} disabled={tab.disabled} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>`}
      </CodeDialog>
    </>
  );
};

export default IconWithLabelCode;

===== src/components/material-ui/tabs/code/ScrollableCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconBottomCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const SCROLLABLE_TAB = [
  { value: '1', icon: <IconUser width={20} height={20} />, label: 'Item 1' },
  { value: '2', icon: <IconUser width={20} height={20} />, label: 'Item 2' },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item 3' },
  { value: '4', icon: <IconUser width={20} height={20} />, label: 'Item 4' },
  { value: '5', icon: <IconUser width={20} height={20} />, label: 'Item 5' },
  { value: '6', icon: <IconUser width={20} height={20} />, label: 'Item 6' },
  { value: '7', icon: <IconUser width={20} height={20} />, label: 'Item 7' }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Tabs value={value} onChange={handleChange} aria-label="icon tabs example" variant="scrollable" scrollButtons="auto">
        {SCROLLABLE_TAB.map((tab) => (
            <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="top" value={tab.value} />
        ))}
    </Tabs>
    <Box bgcolor="grey.200" mt={2}>
        {SCROLLABLE_TAB.map((panel) => (
            <TabPanel key={panel.value} value={panel.value} >
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>`}
      </CodeDialog>
    </>
  );
};

export default IconBottomCode;

===== src/components/material-ui/tabs/code/TextCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

const COMMON_TAB = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Box>
        <TabList onChange={handleChange} aria-label="lab API tabs example">
            {COMMON_TAB.map((tab, index) => (
                <Tab key={tab.value} label={tab.label} value={String(index + 1)} />
            ))}
        </TabList>
    </Box>
    <Divider />
    <Box bgcolor="grey.200" mt={2}>
        {COMMON_TAB.map((panel, index) => (
            <TabPanel key={panel.value} value={String(index + 1)}>
                {panel.label}
            </TabPanel>
        ))}
    </Box>
</TabContext>
`}
      </CodeDialog>
    </>
  );
};

export default TextCode;

===== src/components/material-ui/tabs/code/VerticalCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const IconBottomCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import {Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const SCROLLABLE_TAB = [
  { value: '1', icon: <IconUser width={20} height={20} />, label: 'Item 1' },
  { value: '2', icon: <IconUser width={20} height={20} />, label: 'Item 2' },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item 3' },
  { value: '4', icon: <IconUser width={20} height={20} />, label: 'Item 4' },
  { value: '5', icon: <IconUser width={20} height={20} />, label: 'Item 5' },
  { value: '6', icon: <IconUser width={20} height={20} />, label: 'Item 6' },
  { value: '7', icon: <IconUser width={20} height={20} />, label: 'Item 7' }
];

const [value, setValue] = React.useState('1');

const handleChange = (event: React.SyntheticEvent, newValue: string) => {
  setValue(newValue);
};

<TabContext value={value}>
    <Box width="100%" gap={2} display="flex" flexGrow={1}
    sx={{ height: 224 }}
    >
        <Tabs value={value} orientation="vertical" onChange={handleChange} variant="scrollable" scrollButtons="auto">
            {SCROLLABLE_TAB.map((tab) => (
                <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="top" value={tab.value} />
            ))}
        </Tabs>
        <Box bgcolor="grey.200" width="100%">
            {SCROLLABLE_TAB.map((panel) => (
                <TabPanel key={panel.value} value={panel.value} >
                    {panel.label}
                </TabPanel>
            ))}
        </Box>
    </Box>
</TabContext>`}
      </CodeDialog>
    </>
  );
};

export default IconBottomCode;

===== src/components/material-ui/tooltip/code/ArrowTooltipCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ArrowTooltipCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { styled } from '@mui/material/styles';
import { IconButton, Button, Stack, Fab, Box } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';

import { IconPlus } from '@tabler/icons-react';

<Box textAlign="center">
    <Tooltip title="Delete" arrow>
        <Fab color="secondary">
            <IconPlus width={20} height={20} />
        </Fab>
    </Tooltip>
</Box>
`}
      </CodeDialog>
    </>
  );
};

export default ArrowTooltipCode;

===== src/components/material-ui/tooltip/code/PositionsTooltipCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const PositionsTooltipCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { styled } from '@mui/material/styles';
import { Button } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';
import InlineItemCard from "@/app/components/shared/InlineItemCard";

<InlineItemCard>
    <Tooltip title="Top Start" placement="top-start">
        <Button variant="outlined" color="primary">Top Start</Button>
    </Tooltip>
    <Tooltip title="Top" placement="top">
        <Button variant="outlined" color="secondary">Top</Button>
    </Tooltip>
    <Tooltip title="Top End" placement="top-end">
        <Button variant="outlined" color="warning">Top End</Button>
    </Tooltip>
    <Tooltip title="Left Start" placement="left-start">
        <Button variant="outlined" color="success">Left Start</Button>
    </Tooltip>
    <Tooltip title="Left" placement="left">
        <Button variant="outlined" color="error">Left</Button>
    </Tooltip>
    <Tooltip title="Left End" placement="left-end">
        <Button variant="outlined" color="primary">Left End</Button>
    </Tooltip>
    <Tooltip title="Right Start" placement="right-start">
        <Button variant="outlined" color="secondary">Right Start</Button>
    </Tooltip>
    <Tooltip title="Right" placement="right">
        <Button variant="outlined" color="warning">Right</Button>
    </Tooltip>
    <Tooltip title="Right End" placement="right-end">
        <Button variant="outlined" color="success">Right End</Button>
    </Tooltip>
    <Tooltip title="Bottom Start" placement="bottom-start">
        <Button variant="outlined" color="error">Bottom Start</Button>
    </Tooltip>
    <Tooltip title="Bottom" placement="bottom">
        <Button variant="outlined" color="primary">Bottom</Button>
    </Tooltip>
    <Tooltip title="Bottom End" placement="bottom-end">
        <Button variant="outlined" color="secondary">Bottom End</Button>
    </Tooltip>
</InlineItemCard>`}
      </CodeDialog>
    </>
  );
};

export default PositionsTooltipCode;

===== src/components/material-ui/tooltip/code/SimpleTooltipCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SimpleTooltipCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { styled } from '@mui/material/styles';
import { IconButton, Button, Stack, Fab, Box } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';

import { IconPlus, IconTrash } from '@tabler/icons-react';

<Stack direction="row" spacing={2} alignItems="center">
    <Tooltip title="Delete">
        <IconButton>
            <IconTrash width={20} height={20} />
        </IconButton>
    </Tooltip>
    <Tooltip title="Add">
        <Button variant="outlined" color="primary">
            Button
        </Button>
    </Tooltip>
    <Tooltip title="Delete">
        <IconButton color="error">
            <IconTrash width={20} height={20} />
        </IconButton>
    </Tooltip>
    <Tooltip title="Add">
        <Fab color="secondary">
            <IconPlus width={20} height={20} />
        </Fab>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default SimpleTooltipCode;

===== src/components/material-ui/tooltip/code/TransitionsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TransitionsCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { styled } from '@mui/material/styles';
import { IconButton, Button, Stack, Fab, Box } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';
import Fade from '@mui/material/Fade';
import Zoom from '@mui/material/Zoom';

<Stack spacing={1} direction="row">
    <Tooltip title="Add">
        <Button variant="outlined" color="primary">Grow</Button>
    </Tooltip>
    <Tooltip
        TransitionComponent={Fade}
        TransitionProps={{ timeout: 600 }}
        title="Add"
    >
        <Button variant="outlined" color="secondary">Fade</Button>
    </Tooltip>
    <Tooltip TransitionComponent={Zoom} title="Add">
        <Button variant="outlined" color="warning">Zoom</Button>
    </Tooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default TransitionsCode;

===== src/components/material-ui/tooltip/code/VariableWidthCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const VariableWidthCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { styled } from '@mui/material/styles';
import { IconButton, Button, Stack, Fab, Box } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';

const CustomWidthTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} classes={{ popper: className }} />
))({
  ['& .{tooltipClasses.tooltip}']: {
    maxWidth: 500,
  },
});

const NoMaxWidthTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} classes={{ popper: className }} />
))({
  ['& .{tooltipClasses.tooltip}']: {
    maxWidth: 'none',
  },
});

const longText = '
Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus.
Praesent non nunc mollis, fermentum neque at, semper arcu.
Nullam eget est sed sem iaculis gravida eget vitae justo.
';

import { IconPlus, IconTrash } from '@tabler/icons-react';

<Stack spacing={1} direction="row">
    <Tooltip title={longText}>
        <Button variant="outlined">Default Width [300px]</Button>
    </Tooltip>
    <CustomWidthTooltip title={longText}>
        <Button color="secondary" variant="outlined">Custom Width [500px]</Button>
    </CustomWidthTooltip>
    <NoMaxWidthTooltip title={longText}>
        <Button color="warning" variant="outlined">No wrapping</Button>
    </NoMaxWidthTooltip>
</Stack>`}
      </CodeDialog>
    </>
  );
};

export default VariableWidthCode;

===== src/components/material-ui/transfer-list/BasicTransferList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Grid2 as Grid, List, ListItem, ListItemIcon, ListItemText, Button, Paper, ListItemButton } from '@mui/material';

import {
  IconChevronRight,
  IconChevronLeft,
  IconChevronsLeft,
  IconChevronsRight,
} from '@tabler/icons-react';

import CustomCheckbox from '../../forms/theme-elements/CustomCheckbox';

function not(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) === -1);
}

function intersection(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) !== -1);
}

const BasicTransferList = () => {
  const [checked, setChecked] = React.useState<readonly number[]>([]);
  const [left, setLeft] = React.useState<readonly number[]>([0, 1, 2, 3]);
  const [right, setRight] = React.useState<readonly number[]>([4, 5, 6, 7]);

  const leftChecked = intersection(checked, left);
  const rightChecked = intersection(checked, right);

  const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  const handleAllRight = () => {
    setRight(right.concat(left));
    setLeft([]);
  };

  const handleCheckedRight = () => {
    setRight(right.concat(leftChecked));
    setLeft(not(left, leftChecked));
    setChecked(not(checked, leftChecked));
  };

  const handleCheckedLeft = () => {
    setLeft(left.concat(rightChecked));
    setRight(not(right, rightChecked));
    setChecked(not(checked, rightChecked));
  };

  const handleAllLeft = () => {
    setLeft(left.concat(right));
    setRight([]);
  };
  const theme = useTheme();
  const borderColor = theme.palette.divider;

  const customList = (items: readonly number[]) => (
    <Paper
      variant="outlined"
      sx={{ width: 200, height: 230, overflow: 'auto', border: `1px solid ${borderColor}` }}
    >
      <List dense component="div" role="list">
        {items.map((value) => {
          const labelId = `transfer-list-item-${value}-label`;

          return (
            <ListItemButton key={value} role="listitem" onClick={handleToggle(value)}>
              <ListItemIcon>
                <CustomCheckbox
                  tabIndex={-1}
                  disableRipple
                  checked={checked.indexOf(value) !== -1}
                  inputProps={{
                    'aria-labelledby': labelId,
                  }}
                />
              </ListItemIcon>
              <ListItemText id={labelId} primary={`List item ${value + 1}`} />
            </ListItemButton>
          );
        })}
        <ListItem />
      </List>
    </Paper>
  );

  return (
    (<Grid container spacing={2} justifyContent="center" alignItems="center">
      <Grid>{customList(left)}</Grid>
      <Grid>
        <Grid container direction="column" alignItems="center">
          <Button
            sx={{ my: 0.5 }}
            variant="outlined"
            size="small"
            onClick={handleAllRight}
            disabled={left.length === 0}
            aria-label="move all right"
          >
            <IconChevronsRight width={20} height={20} />
          </Button>
          <Button
            sx={{ my: 0.5 }}
            variant="outlined"
            size="small"
            onClick={handleCheckedRight}
            disabled={leftChecked.length === 0}
            aria-label="move selected right"
          >
            <IconChevronRight width={20} height={20} />
          </Button>
          <Button
            sx={{ my: 0.5 }}
            variant="outlined"
            size="small"
            onClick={handleCheckedLeft}
            disabled={rightChecked.length === 0}
            aria-label="move selected left"
          >
            <IconChevronLeft width={20} height={20} />
          </Button>
          <Button
            sx={{ my: 0.5 }}
            variant="outlined"
            size="small"
            onClick={handleAllLeft}
            disabled={right.length === 0}
            aria-label="move all left"
          >
            <IconChevronsLeft width={20} height={20} />
          </Button>
        </Grid>
      </Grid>
      <Grid>{customList(right)}</Grid>
    </Grid>)
  );
};
export default BasicTransferList;

===== src/components/material-ui/transfer-list/code/BasicTransferListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicTransferListCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Grid2 as Grid, List, ListItem, ListItemIcon, ListItemText, Button, Paper, ListItemButton } from '@mui/material';

import {
  IconChevronRight,
  IconChevronLeft,
  IconChevronsLeft,
  IconChevronsRight,
} from '@tabler/icons-react';

import CustomCheckbox from '../../forms/theme-elements/CustomCheckbox';

function not(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) === -1);
}

function intersection(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) !== -1);
}

const BasicTransferList = () => {
const [checked, setChecked] = React.useState<readonly number[]>([]);
const [left, setLeft] = React.useState<readonly number[]>([0, 1, 2, 3]);
const [right, setRight] = React.useState<readonly number[]>([4, 5, 6, 7]);

const leftChecked = intersection(checked, left);
const rightChecked = intersection(checked, right);

const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
};

const handleAllRight = () => {
    setRight(right.concat(left));
    setLeft([]);
};

const handleCheckedRight = () => {
    setRight(right.concat(leftChecked));
    setLeft(not(left, leftChecked));
    setChecked(not(checked, leftChecked));
};

const handleCheckedLeft = () => {
    setLeft(left.concat(rightChecked));
    setRight(not(right, rightChecked));
    setChecked(not(checked, rightChecked));
};

const handleAllLeft = () => {
    setLeft(left.concat(right));
    setRight([]);
};
const theme = useTheme();
const borderColor = theme.palette.divider;

const customList = (items: readonly number[]) => (
    <Paper
      variant="outlined"
      sx={{ width: 200, height: 230, overflow: 'auto', border: '1px solid {borderColor}' }}
    >
        <List dense component="div" role="list">
            {items.map((value) => {
                const labelId = 'transfer-list-item-{value}-label';


                return (
                    <ListItem key={value} role="listitem" button onClick={handleToggle(value)}>
                        <ListItemIcon>
                                <CustomCheckbox
                                    tabIndex={-1}
                                    disableRipple
                                    checked={checked.indexOf(value) !== -1}
                                    inputProps={{
                                        'aria-labelledby': labelId,
                                    }}
                        />
                        </ListItemIcon>
                        <ListItemText id={labelId} primary={'List item {value + 1}'} />
                    </ListItem>
                );
            })}
        </List>
    </Paper>
);

return (
    <Grid container spacing={2} justifyContent="center" alignItems="center">
        <Grid item>{customList(left)}</Grid>
            <Grid item>
                <Grid container direction="column" alignItems="center">
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleAllRight}
                        disabled={left.length === 0}
                        aria-label="move all right"
                    >
                        <IconChevronsRight width={20} height={20} />
                    </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleCheckedRight}
                        disabled={leftChecked.length === 0}
                        aria-label="move selected right"
                    >
                        <IconChevronRight width={20} height={20} />
                   </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleCheckedLeft}
                        disabled={rightChecked.length === 0}
                        aria-label="move selected left"
                    >
                        <IconChevronLeft width={20} height={20} />
                    </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleAllLeft}
                        disabled={right.length === 0}
                        aria-label="move all left"
                    >
                        <IconChevronsLeft width={20} height={20} />
                    </Button>
                </Grid>
            </Grid>
        <Grid item>{customList(right)}</Grid>
    </Grid>
    );
};`}
      </CodeDialog>
    </>
  );
};

export default BasicTransferListCode;

===== src/components/material-ui/transfer-list/code/EnhancedTransferListCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const EnhancedTransferListCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import React from 'react';
import { useTheme } from '@mui/material/styles';
import {
  Grid2 as Grid,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Button,
  Divider,
  CardHeader,
  Stack,
  Paper,,
  ListItemButton,
} from '@mui/material';

import { IconChevronRight, IconChevronLeft } from '@tabler/icons-react';

import CustomCheckbox from '../../forms/theme-elements/CustomCheckbox';

function not(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) === -1);
}

function intersection(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) !== -1);
}

function union(a: readonly number[], b: readonly number[]) {
  return [...a, ...not(b, a)];
}

const EnhancedTransferList = () => {
  const [checked, setChecked] = React.useState<readonly number[]>([]);
  const [left, setLeft] = React.useState<readonly number[]>([0, 1, 2, 3]);
  const [right, setRight] = React.useState<readonly number[]>([4, 5, 6, 7]);

  const leftChecked = intersection(checked, left);
  const rightChecked = intersection(checked, right);

  const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  const numberOfChecked = (items: readonly number[]) => intersection(checked, items).length;

  const handleToggleAll = (items: readonly number[]) => () => {
    if (numberOfChecked(items) === items.length) {
      setChecked(not(checked, items));
    } else {
      setChecked(union(checked, items));
    }
  };

  const handleCheckedRight = () => {
    setRight(right.concat(leftChecked));
    setLeft(not(left, leftChecked));
    setChecked(not(checked, leftChecked));
  };

  const handleCheckedLeft = () => {
    setLeft(left.concat(rightChecked));
    setRight(not(right, rightChecked));
    setChecked(not(checked, rightChecked));
  };

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  const customList = (title: React.ReactNode, items: readonly number[]) => (
    <Paper variant="outlined" sx={{ border: '1px solid {borderColor}' }}>
      <CardHeader
        sx={{ px: 2 }}
        avatar={
          <CustomCheckbox
            onClick={handleToggleAll(items)}
            checked={numberOfChecked(items) === items.length && items.length !== 0}
            indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}
            disabled={items.length === 0}
            inputProps={{
              'aria-label': 'all items selected',
            }}
          />
        }
        title={title}
        subheader={'{numberOfChecked(items)}/{items.length} selected'}
      />
      <Divider />
      <List
        sx={{
          width: 200,
          height: 230,
          overflow: 'auto',
        }}
        dense
        component="div"
        role="list"
      >
        {items.map((value) => {
          const labelId = 'transfer-list-all-item-{value}-label';

          return (
            <ListItem key={value} role="listitem" button onClick={handleToggle(value)}>
              <ListItemIcon>
                <CustomCheckbox
                  checked={checked.indexOf(value) !== -1}
                  tabIndex={-1}
                  disableRipple
                  inputProps={{
                    'aria-labelledby': labelId,
                  }}
                />
              </ListItemIcon>
              <ListItemText id={labelId} primary={'List item {value + 1}'} />
            </ListItem>
          );
        })}
        <ListItem />
      </List>
    </Paper>
  );

  return (
    <Grid container spacing={2} justifyContent="center" alignItems="center">
      <Grid item>{customList('Choices', left)}</Grid>
      <Grid item>
        <Stack spacing={1}>
          <Button
            variant="outlined"
            size="small"
            onClick={handleCheckedRight}
            disabled={leftChecked.length === 0}
            aria-label="move selected right"
          >
            <IconChevronRight width={20} height={20} />
          </Button>
          <Button
            variant="outlined"
            size="small"
            onClick={handleCheckedLeft}
            disabled={rightChecked.length === 0}
            aria-label="move selected left"
          >
            <IconChevronLeft width={20} height={20} />
          </Button>
        </Stack>
      </Grid>
      <Grid item>{customList('Chosen', right)}</Grid>
    </Grid>
  );
};`}
      </CodeDialog>
    </>
  );
};

export default EnhancedTransferListCode;

===== src/components/material-ui/transfer-list/EnhancedTransferList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import {
  Grid2 as Grid,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Button,
  Divider,
  CardHeader,
  Stack,
  Paper,
  ListItemButton,
} from '@mui/material';

import { IconChevronRight, IconChevronLeft } from '@tabler/icons-react';

import CustomCheckbox from '../../forms/theme-elements/CustomCheckbox';

function not(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) === -1);
}

function intersection(a: readonly number[], b: readonly number[]) {
  return a.filter((value) => b.indexOf(value) !== -1);
}

function union(a: readonly number[], b: readonly number[]) {
  return [...a, ...not(b, a)];
}

const EnhancedTransferList = () => {
  const [checked, setChecked] = React.useState<readonly number[]>([]);
  const [left, setLeft] = React.useState<readonly number[]>([0, 1, 2, 3]);
  const [right, setRight] = React.useState<readonly number[]>([4, 5, 6, 7]);

  const leftChecked = intersection(checked, left);
  const rightChecked = intersection(checked, right);

  const handleToggle = (value: number) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  const numberOfChecked = (items: readonly number[]) => intersection(checked, items).length;

  const handleToggleAll = (items: readonly number[]) => () => {
    if (numberOfChecked(items) === items.length) {
      setChecked(not(checked, items));
    } else {
      setChecked(union(checked, items));
    }
  };

  const handleCheckedRight = () => {
    setRight(right.concat(leftChecked));
    setLeft(not(left, leftChecked));
    setChecked(not(checked, leftChecked));
  };

  const handleCheckedLeft = () => {
    setLeft(left.concat(rightChecked));
    setRight(not(right, rightChecked));
    setChecked(not(checked, rightChecked));
  };

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  const customList = (title: React.ReactNode, items: readonly number[]) => (
    <Paper variant="outlined" sx={{ border: `1px solid ${borderColor}` }}>
      <CardHeader
        sx={{ px: 2 }}
        avatar={
          <CustomCheckbox
            onClick={handleToggleAll(items)}
            checked={numberOfChecked(items) === items.length && items.length !== 0}
            indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}
            disabled={items.length === 0}
            inputProps={{
              'aria-label': 'all items selected',
            }}
          />
        }
        title={title}
        subheader={`${numberOfChecked(items)}/${items.length} selected`}
      />
      <Divider />
      <List
        sx={{
          width: 200,
          height: 230,
          overflow: 'auto',
        }}
        dense
        component="div"
        role="list"
      >
        {items.map((value) => {
          const labelId = `transfer-list-all-item-${value}-label`;

          return (
            <ListItemButton key={value} role="listitem" onClick={handleToggle(value)}>
              <ListItemIcon>
                <CustomCheckbox
                  checked={checked.indexOf(value) !== -1}
                  tabIndex={-1}
                  disableRipple
                  inputProps={{
                    'aria-labelledby': labelId,
                  }}
                />
              </ListItemIcon>
              <ListItemText id={labelId} primary={`List item ${value + 1}`} />
            </ListItemButton>
          );
        })}
        <ListItem />
      </List>
    </Paper>
  );

  return (
    (<Grid container spacing={2} justifyContent="center" alignItems="center">
      <Grid>{customList('Choices', left)}</Grid>
      <Grid>
        <Stack spacing={1}>
          <Button
            variant="outlined"
            size="small"
            onClick={handleCheckedRight}
            disabled={leftChecked.length === 0}
            aria-label="move selected right"
          >
            <IconChevronRight width={20} height={20} />
          </Button>
          <Button
            variant="outlined"
            size="small"
            onClick={handleCheckedLeft}
            disabled={rightChecked.length === 0}
            aria-label="move selected left"
          >
            <IconChevronLeft width={20} height={20} />
          </Button>
        </Stack>
      </Grid>
      <Grid>{customList('Chosen', right)}</Grid>
    </Grid>)
  );
};
export default EnhancedTransferList;

===== src/components/material-ui/typography/code/Heading1Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading1Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h1">h1. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading1Code;

===== src/components/material-ui/typography/code/Heading2Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading2Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h2">h2. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading2Code;

===== src/components/material-ui/typography/code/Heading3Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading3Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h3">h3. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading3Code;

===== src/components/material-ui/typography/code/Heading4Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading4Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h4">h4. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading4Code;

===== src/components/material-ui/typography/code/Heading5Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading5Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h5">h5. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading5Code;

===== src/components/material-ui/typography/code/Heading6Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Heading6Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="h6">h6. Heading</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Heading6Code;

===== src/components/material-ui/typography/code/Subtitle1Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Subtitle1Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="subtitle1">
    subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
    tenetur
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Subtitle1Code;

===== src/components/material-ui/typography/code/Subtitle2Code.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Subtitle2Code = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="subtitle2">
    subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
    tenetur
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default Subtitle2Code;

===== src/components/material-ui/typography/code/TextErrorCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const TextErrorCode = () => {
    return (
        <>
            <CodeDialog>
                {`

import { Typography } from '@mui/material';

<Typography variant="body1" sx={{ color: (theme) => theme.palette.error.main }}>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
            </CodeDialog>
        </>
    );
};

export default TextErrorCode;
===== src/components/material-ui/typography/code/TextInfoCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextInfoCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="body1" sx={{ color: (theme) => theme.palette.info.main }}>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default TextInfoCode;

===== src/components/material-ui/typography/code/TextPrimaryCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const TextPrimaryCode = () => {
    return (
        <>
            <CodeDialog>
                {`

import { Typography } from '@mui/material';

<Typography variant="body1" sx={{ color: (theme) => theme.palette.primary.main }}>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
            </CodeDialog>
        </>
    );
};

export default TextPrimaryCode;
===== src/components/material-ui/typography/code/TextSecondaryCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";
const TextSecondaryCode = () => {
    return (
        <>
            <CodeDialog>
                {`

import { Typography } from '@mui/material';

<Typography variant="body1" color="textSecondary">
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
            </CodeDialog>
        </>
    );
};

export default TextSecondaryCode;
===== src/components/material-ui/typography/code/TextSuccessCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextErrorCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="body1" sx={{ color: (theme) => theme.palette.success.main }}>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default TextErrorCode;

===== src/components/material-ui/typography/code/TextWarningCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const TextWarningCode = () => {
  return (
    <>
      <CodeDialog>
        {`

import { Typography } from '@mui/material';

<Typography variant="body1" sx={{ color: (theme) => theme.palette.warning.main }}>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
</Typography>`}
      </CodeDialog>
    </>
  );
};

export default TextWarningCode;

===== src/components/muicharts/barcharts/BarChartStackedBySignChart.tsx =====

"use client";

import { BarChart } from "@mui/x-charts/BarChart";
import { useTheme } from "@mui/material";
import ParentCard from 'src/components/shared/ParentCard';

import BarChartStackedBySignCode from "../code/barchartcode/BarChartStackedBySignCode";

function BarChartStackedBySignChart() {
  const pData = [2400, 1398, -9800, 3908, 4800, -3800, 4300];
  const uData = [4000, -3000, -2000, 2780, -1890, 2390, 3490];

  const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;


  return (
    <ParentCard
      title="StackedBySign Chart"
      codeModel={<BarChartStackedBySignCode />}
    >

      <BarChart
        borderRadius={6}
        height={300}
        series={[
          {
            data: pData,
            label: "Page Views",
            id: "pvId",
            stack: "stack1",
            color: primary,
          },
          {
            data: uData,
            label: " Visitors",
            id: "uvId",
            stack: "stack1",
            color: secondary,
          },
        ]}
        xAxis={[{
          data: xLabels, scaleType: "band",
          categoryGapRatio: 0.8,
          barGapRatio: 0.8
        } as any]}

      />
    </ParentCard>
  );
}

export default BarChartStackedBySignChart;

===== src/components/muicharts/barcharts/BiaxialBarChart.tsx =====
"use client";

import { BarChart } from "@mui/x-charts/BarChart";
import { useTheme } from "@mui/material";
import ParentCard from 'src/components/shared/ParentCard';
import BiaxialBarCode from "../code/barchartcode/BiaxialBarCode";


function BiaxialBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = [
        "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
    ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;

    return (
        <ParentCard title="Biaxial Chart" codeModel={<BiaxialBarCode />}>
            <BarChart
                borderRadius={6}
                height={300}
                series={[
                    {
                        data: pData,
                        label: "Page Views",
                        id: "pvId",
                        color: primary,
                        yAxisId: "leftAxisId",
                    },
                    {
                        data: uData,
                        label: "Visitors",
                        id: "uvId",
                        color: secondary,
                        yAxisId: "rightAxisId",
                    },
                ]}
                xAxis={[{
                    data: xLabels, scaleType: "band", categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
                yAxis={[{ id: "leftAxisId" }, { id: "rightAxisId" },

                ]}
                rightAxis="rightAxisId"

            />
        </ParentCard>
    );
}

export default BiaxialBarChart;

===== src/components/muicharts/barcharts/MixedBarChart.tsx =====
'use client'
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import MixedBarCode from '../code/barchartcode/MixedBarCode';

function MixedBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const amtData = [2400, 2210, 2290, 2000, 2181, 2500, 2100];

    const xLabels = [
        "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
    ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const success = theme.palette.success.main;

    return (
        <ParentCard title="Mixed Chart" codeModel={<MixedBarCode />}>
            <BarChart
                borderRadius={6}
                height={300}
                series={[
                    { data: pData, label: 'Page Views', stack: 'stack1', color: primary },
                    { data: amtData, label: ' Visitors', color: success },
                    { data: uData, label: 'Revenue ', stack: 'stack1', color: secondary },
                ]}
                xAxis={[{
                    data: xLabels, scaleType: 'band', categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />
        </ParentCard>

    )
}

export default MixedBarChart

===== src/components/muicharts/barcharts/PositiveAndNegativeBarChart.tsx =====
'use client'

import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import PositiveAndNegativeBarCode from '../code/barchartcode/PositiveAndNegativeBarCode'

function PositiveAndNegativeBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, -9800, 3908, 4800, -3800, 4300];

    const xLabels = [
        "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
    ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const success = theme.palette.success.main;

    return (
        <ParentCard title="Positive And Negative Chart" codeModel={<PositiveAndNegativeBarCode />}>

            <BarChart
                height={300}
                borderRadius={6}
                series={[
                    {
                        data: pData,
                        label: 'Page Views',
                        color: primary
                    },
                    {
                        data: uData,
                        label: ' Visitors',
                        color: success
                    },
                ]}
                xAxis={[
                    {
                        data: xLabels,
                        scaleType: 'band',
                        categoryGapRatio: 0.8,
                        barGapRatio: 0.8
                    } as any,
                ]}
                yAxis={[{
                    max: 10000,


                }]}
            />
        </ParentCard>
    )
}

export default PositiveAndNegativeBarChart

===== src/components/muicharts/barcharts/SimpleBarChart.tsx =====
'use client'

import { BarChart } from '@mui/x-charts/BarChart';
import ParentCard from 'src/components/shared/ParentCard';
import SimpleBarCode from '../code/barchartcode/SimpleBarCode'
import { useTheme } from '@mui/material';


export default function SimpleBarChart() {

    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];

    const xLabels = [
        "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
    ];


    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;

    return (
        <ParentCard title="Simple Chart" codeModel={<SimpleBarCode />}>
            <BarChart
                height={300}
                borderRadius={6}
                series={[
                    { data: pData, label: 'Page Views', id: 'pId', color: primary },
                    { data: uData, label: ' Visitors', id: 'uId', color: secondary },

                ]}

                xAxis={[{
                    data: xLabels, scaleType: 'band',
                    categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />
        </ParentCard>
    );
}
===== src/components/muicharts/barcharts/StackedBarChart.tsx =====
'use client'

import { useTheme } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import { BarChart } from '@mui/x-charts/BarChart';
import StackedBarCode from '../code/barchartcode/StackedBarCode';


function StackedBarChart() {

    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = [
        "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
    ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;


    return (
        <ParentCard title="Stacked Chart" codeModel={<StackedBarCode />}>
            <BarChart
                height={300}
                borderRadius={6}
                series={[
                    { data: pData, label: 'Page Views', id: 'pvId', stack: 'total', color: primary },
                    { data: uData, label: 'Visitors', id: 'uvId', stack: 'total', color: secondary },
                ]}
                xAxis={[{
                    data: xLabels, scaleType: 'band', categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />

        </ParentCard>
    )
}

export default StackedBarChart;

===== src/components/muicharts/barcharts/TinyBarChart.tsx =====
"use client";

import { BarPlot, ChartContainer } from "@mui/x-charts";
import { useTheme } from "@mui/material/styles";
import ParentCard from 'src/components/shared/ParentCard';
import TinyBarCode from "../code/barchartcode/TinyBarCode";

const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
const xLabels = [
  "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
];

const TinyBarChart = () => {
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  return (
    <ParentCard title="Tiny Chart" codeModel={<TinyBarCode />}>

      <ChartContainer
        width={500}
        height={300}
        series={[
          {
            data: uData,
            label: "uv",
            type: "bar",
            color: primary,


          },
        ]}
        xAxis={[{
          data: xLabels, scaleType: "band",
          categoryGapRatio: 0.8,
          barGapRatio: 0.8,
        } as any]}
      >
        <BarPlot borderRadius={6} />
      </ChartContainer>

    </ParentCard>
  );
};

export default TinyBarChart;



===== src/components/muicharts/code/areachartscode/AreaChartConnectNullsCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function AreaChartConnectNullsCode() {
    return (
        <CodeDialog>
            {`
'use client'
import * as React from 'react';
import Stack from '@mui/material/Stack';
import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'AreaChartConnectNulls ',
},
]; 

export default function AreaChartConnectNulls() {
    const data = [4000, 3000, 2000, null, 1890, 2390, 3490];
     const xData = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
 
    return (

            <Stack sx={{ width: '100%' }}>
                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    series={[{ data, showMark: false, area: true, color: primary }]}
                    height={200}
                    margin={{ top: 10, bottom: 20 }}
                />
                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    series={[{ data, showMark: false, area: true, connectNulls: true, color: primary}]}
                    height={200}
                    margin={{ top: 10, bottom: 20 }}
                />
            </Stack>
    );
}
      `}
        </CodeDialog>
    )
}

export default AreaChartConnectNullsCode

===== src/components/muicharts/code/areachartscode/AreaChartFillByValueCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";


export default function AreaChartFillByValueCode() {
    return (
        <CodeDialog>
            {`
'use client'
import * as React from 'react';
import { green, red } from '@mui/material/colors';
import Stack from '@mui/material/Stack';
import { useYScale, useDrawingArea } from '@mui/x-charts/hooks';
import { LineChart, areaElementClasses } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'AreaChartFillByValue ',
},
]; 



function ColorSwich({ threshold, color1, color2, id }) {

    const { top, height, bottom } = useDrawingArea();
    const svgHeight = top + bottom + height;

   const scale = useYScale(); // You can provide the axis Id if you have multiple ones
    const y0 = scale(threshold); // The coordinate of of the origine
    const off = y0 !== undefined ? y0 / svgHeight : 0;

    return (
        <defs>
            <linearGradient
                id={id}
                x1="0"
                x2="0"
                y1="0"
                y2={\`\${svgHeight}px\`}
                gradientUnits="userSpaceOnUse" 
            >
            <stop offset={off} stopColor={color1} stopOpacity={1} />
            <stop offset={off} stopColor={color2} stopOpacity={1} />
        </linearGradient>
        </defs >
    );
}

export default function AreaChartFillByValue() {
    const data = [4000, 3000, -1000, 500, -2100, -250, 3490];
    const xData = ["January", "February", "March", "April", "May", "June", "July"];


    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const amtDatacolor = theme.palette.error.main;

    return (


        <Stack direction="column" width="100%" spacing={1}>
            <LineChart
                xAxis={[{ data: xData, scaleType: 'point' }]}
                yAxis={[{ min: -3000, max: 4000 }]}
                series={[{ data, showMark: false, area: true }]}
                height={200}
                margin={{ top: 20, bottom: 30, left: 75 }}
             sx={{
                    [\`& .\${areaElementClasses.root}\`]: { // Dynamic class name
                        fill: 'url(#swich-color-id-1)',
                    },
                }}
            >

                <ColorSwich
                    color1={primary}
                    color2={amtDatacolor}
                    threshold={0}
                    id="swich-color-id-1"
                />
                <rect x={0} y={0} width={5} height="100%" fill="url(#swich-color-id-1)" />
            </LineChart>

            <LineChart
                xAxis={[{ data: xData, scaleType: 'point' }]}
                yAxis={[{ min: -3000, max: 4000 }]}
                series={[{ data, showMark: false, area: true }]}
                height={200}
                margin={{ top: 20, bottom: 30, left: 75 }}
                sx={{
                    [\`& .\${areaElementClasses.root}\`]: {
                fill: 'url(#swich-color-id-2)',
                    },
                }}
            >
            <ColorPalette id="swich-color-id-2" />

            <rect x={0} y={0} width={5} height="100%" fill="url(#swich-color-id-2)" />
        </LineChart>
        </Stack >

    );
}

function ColorPalette({ id }) {
    const { top, height, bottom } = useDrawingArea();
    const svgHeight = top + bottom + height;

    const scale = useYScale() // You can provide the axis Id if you have multiple ones

    return (
        <defs>
            <linearGradient
                id={id}
                x1="0"
                x2="0"
                y1="0"
                y2={\`\${svgHeight}px\`}
                gradientUnits="userSpaceOnUse" // Use the SVG coordinate instead of the component ones.
            >
                <stop
                    offset={scale(5000) / svgHeight}
                   stopColor={green[400]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(4000) / svgHeight}
                    stopColor={green[400]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(4000) / svgHeight}
                    stopColor={green[300]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(3000) / svgHeight}
                    stopColor={green[300]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(3000) / svgHeight}
                    stopColor={green[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(2000) / svgHeight}
                    stopColor={green[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(2000) / svgHeight}
                    stopColor={green[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(1000) / svgHeight}
                    stopColor={green[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(1000) / svgHeight}
                    stopColor={green[50]}
                    stopOpacity={1}
                />
                <stop offset={scale(0) / svgHeight} stopColor={green[50]} stopOpacity={1} />
                <stop offset={scale(0) / svgHeight} stopColor={red[100]} stopOpacity={1} />
                <stop
                    offset={scale(-1000) / svgHeight}
                    stopColor={red[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(-1000) / svgHeight}
                    stopColor={red[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(-2000) / svgHeight}
                    stopColor={red[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={scale(-3000) / svgHeight}
                    stopColor={red[300]}
                    stopOpacity={1}
                />
            </linearGradient>
        </defs>
    );
}

`}
        </CodeDialog>
    )
}

===== src/components/muicharts/code/areachartscode/PercentAreaCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function PercentAreaCode() {
    return (
        <CodeDialog>
            {`

"use client";
import * as React from 'react';
import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'PercentAreaChart ',
},
]; 
const time = [
    new Date(2015, 1, 0),
    new Date(2015, 2, 0),
    new Date(2015, 3, 0),
    new Date(2015, 4, 0),
    new Date(2015, 5, 0),
    new Date(2015, 6, 0),
    new Date(2015, 7, 0),
];
const a = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
const b = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
const c = [2400, 2210, 2290, 2000, 2181, 2500, 2100];

const getPercents = (array) =>
    array.map((v, index) => (100 * v) / (a[index] + b[index] + c[index]));

export default function PercentAreaChart() {

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const amtDatacolor = theme.palette.error.main;

    return (

            <LineChart
            
                height={300}
                series={[
                    {
                        data: getPercents(a),
                        type: 'line',
                        label: 'Revenue',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: primary
                    },
                    {
                        data: getPercents(b),
                        type: 'line',
                        label: 'Profits',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: secondary
                    },
                    {
                        data: getPercents(c),
                        type: 'line',
                        label: 'Expenses',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: amtDatacolor
                    },
                ]}
                xAxis={[
                    {
                        scaleType: 'time',
                        data: time,
                        min: time[0].getTime(),
                        max: time[time.length - 1].getTime(),

                    },
                ]}
            />
    );
}
`}
        </CodeDialog>
    )
}

export default PercentAreaCode

===== src/components/muicharts/code/areachartscode/SimpleAreaCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";
function SimpleAreaCode() {
  return (
    <CodeDialog>
      {`

"use client";

import { useTheme } from "@mui/material";
import { LineChart, lineElementClasses } from '@mui/x-charts/LineChart';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'SimpleAreaChart ',
},
]; 
export default function SimpleAreaChart() {
  const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;

    return (

            <LineChart
            
                height={300}
                series={[{ data: monthlyProfits, label: 'Profits', area: true, showMark: false, color: primary }]}

                xAxis={[{ scaleType: 'point', data: xLabels }]}
                sx={{
                    [\`& \.\${lineElementClasses.root}\`]: {
                     display: 'none',
                    },
                }}
            />
     
    );
}
`}
    </CodeDialog>
  )
}

export default SimpleAreaCode

===== src/components/muicharts/code/areachartscode/StackedAreaCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function StackedAreaCode() {
  return (
    <CodeDialog>
      {`

"use client";
import * as React from 'react';
import { LineChart, lineElementClasses } from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'StackedAreaChart ',
},
]; 

export default function StackedAreaChart() {
      const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const monthlyExpenses = [2400, 2210, 0, 2000, 2181, 2500, 2100];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const expDatacolor = theme.palette.error.main;

    return (

            <LineChart
                
                height={300}
                 series={[
                    { data: monthlyRevenue, label: 'Revenue', area: true, stack: 'total', showMark: false, color: primary },
                    { data: monthlyProfits, label: 'Profits', area: true, stack: 'total', showMark: false, color: secondary },
                    {
                        data: monthlyExpenses,
                        label: 'Expenses',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: expDatacolor
                    },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
                sx={{
                    [\`& .\${lineElementClasses.root}\`]: {
                display: 'none',
                    },
                }}
            />
      
    );
}
`}
    </CodeDialog>
  )
}

export default StackedAreaCode

===== src/components/muicharts/code/areachartscode/TinyAreaCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function TinyAreaCode() {
    return (
        <CodeDialog>
            {`

"use client";
import * as React from 'react';
import { ChartContainer } from '@mui/x-charts/ChartContainer';
import { AreaPlot } from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'TinyAreaChart ',
},
]; 

export default function TinyAreaChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const xLabels = [
        ' A',
        ' B',
        ' C',
        ' D',
        ' E',
        ' F',
        ' G',
    ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    return (
     

            <ChartContainer
                width={800}
                height={300}
                series={[
                    {
                        data: uData,
                        type: 'line',
                        label: 'uv',
                        area: true,
                        stack: 'total',
                        color: primary
                    },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
            >
                <AreaPlot />
            </ChartContainer>
    
    );
}

`}
        </CodeDialog>
    )
}

export default TinyAreaCode

===== src/components/muicharts/code/barchartcode/BarChartStackedBySignCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BarChartStackedBySignCode() {
  return (
    <CodeDialog>
      {`
  
'use client'

import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';


const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BarChartStackedBySignChart ',
},
]; 


function BarChartStackedBySignChart() {
  const pData = [2400, 1398, -9800, 3908, 4800, -3800, 4300];
  const uData = [4000, -3000, -2000, 2780, -1890, 2390, 3490];

  const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  return (
   
      <BarChart
      borderRadius={6}
        height={300}
        series={[
          { data: pData, label: 'Page Views', id: 'pvId', stack: 'stack1', color: primary },
          { data: uData, label: 'Visitors', id: 'uvId', stack: 'stack1', color: secondary },
        ]}
        xAxis={[{
          data: xLabels, scaleType: "band",
          categoryGapRatio: 0.8,
          barGapRatio: 0.8
        } as any]}
      />
 
  )
}

export default BarChartStackedBySignChart

`}
    </CodeDialog>
  );
}

export default BarChartStackedBySignCode;

===== src/components/muicharts/code/barchartcode/BiaxialBarCode.tsx =====
import CodeDialog from "src/components/shared/CodeDialog";



function BiaxialBarCode() {
    return (
        <CodeDialog>
            {`
  
'use client'
;
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BiaxialBarChart ',
},
]; 
function BiaxialBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];

     const xLabels = [
      "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;

    return (
            <BarChart
              borderRadius={6}
                height={300}
                series={[
                    {
                        data: pData,
                        label: "Page Views",
                        id: "pvId",
                        color: primary,

                        yAxisId: "leftAxisId",
                    },
                    {
                        data: uData,
                        label: "Visitors",
                        id: "uvId",
                        color: secondary,

                        yAxisId: "rightAxisId",
                    },
                ]}
               xAxis={[{
                    data: xLabels, scaleType: "band", categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
                yAxis={[{ id: "leftAxisId" }, { id: "rightAxisId" }]}
                rightAxis="rightAxisId"
            />
    );
}

export default BiaxialBarChart;

`}
        </CodeDialog>
    )
}

export default BiaxialBarCode

===== src/components/muicharts/code/barchartcode/MixedBarCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function MixedBarCode() {
  return (
    <CodeDialog>
      {`
    
'use client'
;
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'MixedBarChart ',
},
]; 
function MixedBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const amtData = [2400, 2210, 2290, 2000, 2181, 2500, 2100];

    const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const light = theme.palette.success.main;

    return (
            <BarChart
               borderRadius={6}
                height={300}
                series={[
                    { data: pData, label: 'Page Views', stack: 'stack1', color: primary },
                    { data: amtData, label: ' Visitors', color: success },
                    { data: uData, label: 'Revenue ', stack: 'stack1', color: secondary },
                ]}
              xAxis={[{
                    data: xLabels, scaleType: 'band', categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />

    )
}

export default MixedBarChart
`}
    </CodeDialog>
  )
}

export default MixedBarCode

===== src/components/muicharts/code/barchartcode/PositiveAndNegativeBarCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function PositiveAndNegativeBarCode() {
  return (
    <CodeDialog>
      {`
            
'use client'
;
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';

   const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'PositiveAndNegativeBarChart ',
  },
]; 


function PositiveAndNegativeBarChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, -9800, 3908, 4800, -3800, 4300];

      const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const success = theme.palette.success.main;

    return (

            <BarChart
              
                height={300}
                borderRadius={6}
                series={[
                    {
                        data: pData,
                        label: 'Page Views',
                        color: primary
                    },
                    {
                        data: uData,
                        label: ' Visitors',
                        color: success
                    },
                ]}
               xAxis={[
                    {
                        data: xLabels,
                        scaleType: 'band',
                        categoryGapRatio: 0.8,
                        barGapRatio: 0.8
                    } as any,
                ]}
                yAxis={[{ max: 10000 }]}
            />
    )
}

export default PositiveAndNegativeBarChart

`}
    </CodeDialog>
  )
}

export default PositiveAndNegativeBarCode

===== src/components/muicharts/code/barchartcode/SimpleBarCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function SimpleBarCode() {
  return (
    <CodeDialog>
      {`
            
'use client'
import * as React from 'react';
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from '@mui/material';

   const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'SimpleBarChart ',
  },
]; 

export default function SimpleBarChart() {

    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
      const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;

    return (
      
            <BarChart
                height={300}
                borderRadius={6}
                series={[
                    { data: pData, label: 'Page Views', id: 'pvId', color: primary },
                    { data: uData, label: ' Visitors', id: 'uvId', color: secondary },
                ]}
              xAxis={[{
                    data: xLabels, scaleType: 'band',
                    categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />
   
    );
}
`}
    </CodeDialog>
  );
}

export default SimpleBarCode;

===== src/components/muicharts/code/barchartcode/StackedBarCode.tsx =====

import CodeDialog from 'src/components/shared/CodeDialog'

function StackedBarCode() {
  return (
    <CodeDialog>
      {`
"use client"

import React from "react";
import { BarChart } from '@mui/x-charts/BarChart';
import { useTheme } from "@mui/material/styles";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'StackedBarChart ',
},
];

function StackedBarChart() {

    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
      const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;

    return (
      
            <BarChart
                height={300}
                borderRadius={6}
                series={[
                    { data: pData, label: 'Page Views', id: 'pvId', stack: 'total', color: primary },
                    { data: uData, label: 'Visitors', id: 'uvId', stack: 'total', color: secondary },
                ]}
                  xAxis={[{
                    data: xLabels, scaleType: 'band', categoryGapRatio: 0.8,
                    barGapRatio: 0.8
                } as any]}
            />
    
    )
}

export default StackedBarChart;
`}
    </CodeDialog>
  )
}

export default StackedBarCode

===== src/components/muicharts/code/barchartcode/TinyBarCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function TinyBarCode() {
  return (
    <CodeDialog>
      {`
     "use client"

    import React from "react";
    import { BarPlot, ChartContainer } from "@mui/x-charts";
    import { useTheme } from "@mui/material/styles";

   const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'TinyBarChart ',
  },
];

const TinyBarChart = () => {
    
    const theme = useTheme();
    const primary = theme.palette.primary.main;

    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
      const xLabels = [
    "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6", "Week 7"
  ];

    return (
    
            <ChartContainer
                width={500}
                height={300}
                series={[{
                    data: uData,
                    label: 'uv',
                    type: 'bar',
                    color: primary
                }]}
                xAxis={[{
                data: xLabels, scaleType: "band",
                categoryGapRatio: 0.8,
                barGapRatio: 0.8,
        } as any]}
            >
            <BarPlot borderRadius={6} />
            </ChartContainer>
       
    );
};

export default TinyBarChart;
    `}
    </CodeDialog>
  )
}

export default TinyBarCode

===== src/components/muicharts/code/gaugechartscode/ArcDesignCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function ArcDesignCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { Gauge, gaugeClasses } from '@mui/x-charts/Gauge';
   
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ArcDesignChart ',
},
]; 
const settings = {
    width: 200,
    height: 200,
    value: 60,
};

export default function ArcDesignChart() {
    return (
       

            <Gauge
                {...settings}
                cornerRadius="50%"
                sx={(theme) => ({
                    [\`& \.\${gaugeClasses.valueText}\`]: {
                fontSize: 40,
                    },
            [\`& \.\${gaugeClasses.valueArc}\`]: {
                 fill: theme.palette.primary,
                    },
            [\`& \.\${gaugeClasses.referenceArc}\`]: {
                fill: theme.palette.text.disabled,
                    },
                })}
            />
  
    );
}


`}
        </CodeDialog>
    );
}

export default ArcDesignCode;

===== src/components/muicharts/code/gaugechartscode/BasicGaugesCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BasicGaugesCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Stack from '@mui/material/Stack';
import { Gauge } from '@mui/x-charts/Gauge';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicGaugesChart ',
},
]; 

export default function BasicGaugesChart() {
    return (

            <Stack direction={{ xs: 'column', md: 'row' }} spacing={{ xs: 1, md: 3 }}>
                <Gauge width={200} height={200} value={60} />
                <Gauge width={200} height={200} value={60} startAngle={-90} endAngle={90} />
            </Stack>
    );
}


`}
        </CodeDialog>
    )
}

export default BasicGaugesCode
===== src/components/muicharts/code/gaugechartscode/GaugePointerCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function GaugePointerCode() {
    return (
        <CodeDialog>
            {`

import {
    GaugeContainer,
    GaugeValueArc,
    GaugeReferenceArc,
    useGaugeState,
} from '@mui/x-charts/Gauge';



const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'GaugePointerChart ',
},
]; 



function GaugePointer() {
    const { valueAngle, outerRadius, cx, cy } = useGaugeState();

    if (valueAngle === null) {
        // No value to display
        return null;
    }

    const target = {
        x: cx + outerRadius * Math.sin(valueAngle),
        y: cy - outerRadius * Math.cos(valueAngle),
    };
    return (
        <g>
            <circle cx={cx} cy={cy} r={5} fill="red" />
            <path
                d={\`M \${cx} \${cy} L \${target.x} \${target.y}\`}
            stroke="red"
            strokeWidth={3}
            />
        </g>
    );
}

export default function GaugePointerChart() {
    return (

        <GaugeContainer
            width={200}
            height={200}
            startAngle={-110}
            endAngle={110}
            value={30}
        >
            <GaugeReferenceArc />
            <GaugeValueArc />
            <GaugePointer />
        </GaugeContainer>
    );
}
`}
        </CodeDialog>
    )
}

export default GaugePointerCode
===== src/components/muicharts/code/linechartscode/BiaxialLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BiaxialLineCode() {
  return (
    <CodeDialog>
      {`
  
"use client";
import * as React from 'react';
import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BiaxialLineChart ',
},
]; 
export default function BiaxialLineChart() {
    
    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];


    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
            <LineChart
                
                height={300}
               series={[
                    { data: monthlyRevenue, label: "Revenue", yAxisId: "leftAxisId", color: primary },
                    {
                        data: monthlyProfits,
                        label: "Profits",
                        yAxisId: "rightAxisId",
                        color: secondary,
                    },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
                yAxis={[{ id: 'leftAxisId' }, { id: 'rightAxisId' }]}
                rightAxis="rightAxisId"
            />
    );
}
`}
    </CodeDialog>
  )
}

export default BiaxialLineCode

===== src/components/muicharts/code/linechartscode/DashedLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";
import { markElementClasses } from '@mui/x-charts'

function DashedLineCode() {
    return (
        <CodeDialog>
            {`
    
'use client'
import * as React from 'react';
import {
    LineChart,
    lineElementClasses,
    markElementClasses,
} from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'DashedLineChart ',
},
]; export default function DashedLineChart() {
   
    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
            <LineChart
                
                height={300}
               series={[
                    { data: monthlyRevenue, label: "Revenue", id: "pvId", color: primary },
                    { data: monthlyProfits, label: "Profits", id: "uvId", color: secondary },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
               sx={\`
                \${\`& .\${lineElementClasses.root}, .\${markElementClasses.root}\`}: {
                    strokeWidth: 1,
                },
                \`.MuiLineElement-series-pvId\`: {
                    strokeDasharray: '5 5',
                },
                \`.MuiLineElement-series-uvId\`: {
                    strokeDasharray: '3 4 5 2',
                },
                \${\`& .\${markElementClasses.root}:not(.${markElementClasses.highlighted})\`}: {
                    fill: '#fff',
                },
                \${\`& .\${markElementClasses.highlighted}\`}: {
                    stroke: 'none',
                },
            \`}
            />
      );
}
  `}
        </CodeDialog>
    )
}

export default DashedLineCode

===== src/components/muicharts/code/linechartscode/LineChartWithReferenceLinesCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function LineChartWithReferenceLinesCode() {
  return (
    <CodeDialog>
      {`
    
"use client";
import * as React from "react";
import { ChartContainer } from "@mui/x-charts/ChartContainer";
import { ChartsReferenceLine } from "@mui/x-charts/ChartsReferenceLine";
import { LinePlot, MarkPlot } from "@mui/x-charts/LineChart";
import { ChartsXAxis } from "@mui/x-charts/ChartsXAxis";
import { ChartsYAxis } from "@mui/x-charts/ChartsYAxis";
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'LineChartWithReferenceLines ',
},
]; 
export default function LineChartWithReferenceLines() {
  const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];

    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];


  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const Linecolor = theme.palette.warning.main;

  return (
   
      <ChartContainer
        width={800}
        height={300}
        series={[
                    { data: monthlyRevenue, label: "Revenue", type: "line", color: primary },
                    { data: monthlyProfits, label: "Profits", type: "line", color: secondary },
                ]}
        xAxis={[{ scaleType: "point", data: xLabels }]}
      >
        <LinePlot />
        <MarkPlot />
        <ChartsReferenceLine
         x="March"
         label="Max Profits"
          lineStyle={{ stroke: Linecolor }}
        />
        <ChartsReferenceLine
          y={9800}
          label="Max"
          lineStyle={{ stroke: Linecolor }}
        />
        <ChartsXAxis />
        <ChartsYAxis />
      </ChartContainer>
 
  );
}


`}
    </CodeDialog>
  )
}

export default LineChartWithReferenceLinesCode

===== src/components/muicharts/code/linechartscode/LinewithforecastCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function LinewithforecastCode() {
  return (
    <CodeDialog>
      {`
'use client'
import * as React from 'react';
import { LineChart, AnimatedLine, AnimatedLineProps } from '@mui/x-charts/LineChart';
import { useChartId, useDrawingArea, useXScale } from '@mui/x-charts/hooks';

import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from "@mui/material";
import LinewithforecastCode from '../../code/linechartscode/LinewithforecastCode';
import { SxProps, Theme } from '@mui/system';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'LinewithforecastChart ',
  },
]; 

interface CustomAnimatedLineProps extends AnimatedLineProps {
    limit?: number;
    sxBefore?: SxProps<Theme>;
    sxAfter?: SxProps<Theme>;
}

function CustomAnimatedLine(props) {
  const { limit, sxBefore, sxAfter, ...other } = props;
  const { top, bottom, height, left, width } = useDrawingArea();
  const scale = useXScale();
  const chartId = useChartId();

  if (limit === undefined) {
    return <AnimatedLine {...other} />;
  }

  const limitPosition = scale(limit); // Convert value to x coordinate.

  if (limitPosition === undefined) {
    return <AnimatedLine {...other} />;
  }

  const clipIdLeft = \`\${chartId}-\${props.ownerState.id}-line-limit-\${limit}-1\`;
  const clipIdRight = \`\${chartId}-\${props.ownerState.id}-line-limit-\${limit}-2\`;

  return (
    <React.Fragment>
      {/* Clip to show the line before the limit */}
      <clipPath id={clipIdLeft}>
        <rect
          x={left}
          y={0}
          width={limitPosition - left}
          height={top + height + bottom}
        />
      </clipPath>
      {/* Clip to show the line after the limit */}
      <clipPath id={clipIdRight}>
        <rect
          x={limitPosition}
          y={0}
          width={left + width - limitPosition}
          height={top + height + bottom}
        />
      </clipPath>
      <g clipPath={\`url(#\${clipIdLeft})\`}>
        <AnimatedLine {...other} sx={sxBefore} />
      </g>
      <g clipPath={\`url(#\${clipIdRight})\`}>
        <AnimatedLine {...other} sx={sxAfter} />
      </g>
    </React.Fragment>
  );
}

export default function LinewithforecastChart() {
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  return (
    <LineChart
      series={[
        {
          type: 'line',
          data: [1, 2, 3, 4, 1, 2, 3, 4, 5],
          valueFormatter: (v, i) => \`\${v}\${i.dataIndex > 5 ? ' (estimated)' : ''}\`,
          color: primary,
        },
      ]}
      xAxis={[{ data: [0, 1, 2, 3, 4, 5, 6, 7, 8] }]}
      height={200}
      width={400}
      slots={{ line: CustomAnimatedLine }}
      slotProps={{ line: { limit: 5, sxAfter: { strokeDasharray: '10 5' } } as any }}
    />
  );
}
`}
    </CodeDialog>
  )
}

export default LinewithforecastCode

===== src/components/muicharts/code/linechartscode/SimpleLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function SimpleLineCode() {
  return (
    <CodeDialog>
      {`
            
'use client'

import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";

   const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'SimpleLineChart ',
  },
]; 
function SimpleLineChart() {
  
    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];


    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
       

            <LineChart
                
                height={300}
                  series={[
                    { data: monthlyRevenue, label: 'Revenue', color: primary },
                    { data: monthlyProfits, label: 'Profits', color: secondary },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
            />
       
    )
}

export default SimpleLineChart
`}
    </CodeDialog>
  )
}

export default SimpleLineCode

===== src/components/muicharts/code/linechartscode/TinyLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function TinyLineChart() {
    return (
        <CodeDialog>
            {`
'use client';
;
import { useTheme } from '@mui/material';
import { ChartContainer, LinePlot, MarkPlot } from '@mui/x-charts';

const BCrumb = [
    { to: '/', title: 'Home' },
    { title: 'TinyLineChart' },
];

function TinyLineChart() {
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = [
        'Page A',
        'Page B',
        'Page C',
        'Page D',
        'Page E',
        'Page F',
        'Page G',
    ];

    const theme = useTheme();
    const primary = theme.palette.primary.main;

    return (
        <ChartContainer
                width={800}
                height={300}
                series={[{ type: 'line', data: pData, color: primary }]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
                disableAxisListener
            >
                <LinePlot />
                <MarkPlot />
            </ChartContainer>
    );
}

export default TinyLineChart;
`}
        </CodeDialog>
    )
}

export default TinyLineChart

===== src/components/muicharts/code/piechartcode/BasicPieCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BasicPieCode() {
  return (
    <CodeDialog>
      {`
'use client'
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicPieChart ',
},
]; 


export default function BasicPieChart() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const Datacolor = theme.palette.error.main;
    return (
     

            <PieChart
                series={[
                    {
                        data: [
                            { id: 0, value: 10, label: 'series A', color: primary },
                            { id: 1, value: 15, label: 'series B', color: secondary },
                            { id: 2, value: 20, label: 'series C', color: Datacolor },
                        ],
                    },

                ]}
               
                height={300}
            />
     
    );
}
  `}
    </CodeDialog>
  )
}

export default BasicPieCode

===== src/components/muicharts/code/piechartcode/OnSeriesItemClickCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function OnSeriesItemClickCode() {
  return (
    <CodeDialog>
      {`
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import Typography from '@mui/material/Typography';
import Stack from '@mui/material/Stack';
      
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'OnSeriesItemClickChart ',
},
]; 

const items = [
  { value: 10, label: 'Series A ( no Id )', color: '#CCDA4E' },
  { id: 'id_B', value: 15, label: 'Series B', color: '#0074BA' },
  { id: 'id_C', value: 20, label: 'Series C', color: '#01C0C8' },
];

const formatObject = (obj: null) => {
    if (obj === null) {
        return '  undefined';
    }
    return JSON.stringify(obj, null, 2)
        .split('\n')
        .map((l) =>   {l})
        .join('\n');
};
      export default function OnSeriesItemClickChart() {
  const [identifier, setIdentifier] = React.useState(null);
      const [id, setId] = React.useState(undefined);

        const handleClick = (event: any, itemIdentifier: any, item: any) => {
        setId(item.id);
        setIdentifier(itemIdentifier);
    };


      return (
   

        <Stack
          direction={{ xs: 'column', md: 'row' }}
          alignItems={{ xs: 'flex-start', md: 'center' }}
          justifyContent="space-between"
          sx={{ width: '100%' }}
        >
          <Typography
            component="pre"
            sx={{ maxWidth: { xs: '100%', md: '50%', flexShrink: 1 }, overflow: 'auto' }}
          >
            {\`item id: \${id ?? 'undefined'}

                 item identifier:
                 \${formatObject(identifier)}\`}
          </Typography>

          <PieChart
            series={[
              {
                data: items,
              },
            ]}
            onItemClick={handleClick}
            width={400}
            height={200}
            margin={{ right: 200 }}
          />
        </Stack>
 
      );
}


      `}
    </CodeDialog>
  )
}

export default OnSeriesItemClickCode

===== src/components/muicharts/code/piechartcode/PieChartWithCenterLabelCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function PieChartWithCenterLabelCode() {
  return (
    <CodeDialog>
      {`
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import { useDrawingArea } from '@mui/x-charts/hooks';
import { styled } from '@mui/material/styles';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'PieChartWithCenterLabelChart ',
},
]; 


const data = [
  { value: 5, label: 'A', color: '#5D87FF' },
  { value: 10, label: 'B', color: '#0074BA' },
  { value: 15, label: 'C', color: '#01C0C8' },
  { value: 20, label: 'D', color: '#CCDA4E' },
];

const size = {
  width: 400,
  height: 200,
};

const StyledText = styled('text')(({ theme }) => ({
    fill: theme.palette.text.primary,
    textAnchor: 'middle',
    dominantBaseline: 'central',
    fontSize: 20,
}));

function PieCenterLabel({ children }: any) {
    const { width, height, left, top } = useDrawingArea();
    return (
        <StyledText x={left + width / 2} y={top + height / 2}>
            {children}
        </StyledText>
    );
}

export default function PieChartWithCenterLabelChart() {
  return (
   

          <PieChart series={[{ data, innerRadius: 80 }]} {...size}>
              <PieCenterLabel>Center label</PieCenterLabel>
          </PieChart>

  );
}


            `}
    </CodeDialog>
  )
}

export default PieChartWithCenterLabelCode

===== src/components/muicharts/code/piechartcode/PieChartWithCustomizedLabelCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function PieChartWithCustomizedLabelCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { PieChart, pieArcLabelClasses } from '@mui/x-charts/PieChart';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'PieChartWithCustomizedLabel ',
},
]; 

const data = [
    { label: 'Group A', value: 400, color: '#5D87FF' },
    { label: 'Group B', value: 300, color: '#0074BA' },
    { label: 'Group C', value: 300, color: '#01C0C8' },
    { label: 'Group D', value: 200, color: '#CCDA4E' },
];

const sizing = {
    margin: { right: 5 },
    width: 200,
    height: 200,
    legend: { hidden: true },
};
const TOTAL = data.map((item) => item.value).reduce((a, b) => a + b, 0);

const getArcLabel = (params: { value: number; }) => {
    const percent = params.value / TOTAL;
    return {(percent * 100).toFixed(0)}%;
};

            export default function PieChartWithCustomizedLabel() {
    return (
      
                <PieChart
                    series={[
                        {
                            outerRadius: 80,
                            data,
                            arcLabel: getArcLabel,
                        },
                    ]}
                    sx={{
                        [\`& \.\${pieArcLabelClasses.root}\`]: {
                            fill: 'white',
                            fontSize: 14,
                        },
                    }}
                    {...sizing}
                />
      
            );
}
            `}
        </CodeDialog>
    )
}

export default PieChartWithCustomizedLabelCode

===== src/components/muicharts/code/piechartcode/PieChartWithPaddingAngleCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function PieChartWithPaddingAngleCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Stack from '@mui/material/Stack';
import { PieChart } from '@mui/x-charts/PieChart';
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'PieChartWithPaddingAngleChart ',
},
]; 


const data = [
    { label: 'Group A', value: 400, color: "#5D87FF" },
    { label: 'Group B', value: 300, color: "#FA896B" },
    { label: 'Group C', value: 300, color: "#FFCD56" },
    { label: 'Group D', value: 200, color: "#95CFD5" },
];

export default function PieChartWithPaddingAngleChart() {
    return (
     

            <Stack direction="row">
                <PieChart
                    series={[
                        {
                            paddingAngle: 5,
                            innerRadius: 60,
                            outerRadius: 80,
                            data,
                        },
                    ]}
                    margin={{ right: 5 }}
                    width={200}
                    height={200}
                    legend={{ hidden: true }}
                />
                <PieChart
                    series={[
                        {
                            startAngle: -90,
                            endAngle: 90,
                            paddingAngle: 5,
                            innerRadius: 60,
                            outerRadius: 80,
                            data,

                        },
                    ]}
                    margin={{ right: 5 }}
                    width={200}
                    height={200}
                    slotProps={{
                        legend: { hidden: true },
                    }}
                />
            </Stack>
    
    );
}

            `}
        </CodeDialog>
    )
}

export default PieChartWithPaddingAngleCode
===== src/components/muicharts/code/piechartcode/StraightAnglePieCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function StraightAnglePieCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
  
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'StraightAnglePieChart ',
},
]; 
    const data = [
        { label: 'Group A', value: 400, color: "#5D87FF" },
        { label: 'Group B', value: 300, color: "#0074BA" },
        { label: 'Group C', value: 300, color: "#01C0C8" },
        { label: 'Group D', value: 200, color: "#CCDA4E" },
        { label: 'Group E', value: 278, color: "#FB9678" },
        { label: 'Group F', value: 189, color: "#47D7BC" },
    ];
    
    export default function StraightAnglePieChart() {
    
            return (
            <PieChart
                series={[
                    {
                        startAngle: -90,
                        endAngle: 90,
                        data,
                    },
                ]}
                height={300}
            />
   
  )
}
  `}

        </CodeDialog>
    )
}
export default StraightAnglePieCode

===== src/components/muicharts/code/piechartcode/TwoLevelPieCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function TwoLevelPieCode() {
  return (
    <CodeDialog>
      {`
import React from "react";
import ParentCard from 'src/components/shared/ParentCard';
import TwoLevelPieCode from "../code/piechartcode/TwoLevelPieCode";
import { PieChart } from "@mui/x-charts/PieChart";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'TwoLevelPieChart ',
},
]; 


function TwoLevelPieChart() {
    const data1 = [
      { label: "Group A", value: 400, color: "#5D87FF" },
      { label: "Group B", value: 300, color: "#0074BA" },
      { label: "Group C", value: 300, color: "#763EBD" },
      { label: "Group D", value: 200, color: "#0A7EA4" },
    ];
    const data2 = [
      { label: "A1", value: 100, color: "#01C0C8" },
      { label: "A2", value: 300, color: "#FA896B" },
      { label: "B1", value: 100, color: "#01C0C8" },
      { label: "B2", value: 80, color: "#0074BA" },
      { label: "B3", value: 40, color: "#49BEFF" },
      { label: "B4", value: 30, color: "#47D7BC" },
      { label: "B5", value: 50, color: "#FFCD56" },
      { label: "C1", value: 100, color: "#95CFD5" },
      { label: "C2", value: 200, color: "#CCDA4E" },
      { label: "D1", value: 150, color: "#0A7EA4" },
      { label: "D2", value: 50, color: "#FB9678" },
    ];
  
    return (
      
        <PieChart
          series={[
            {
              innerRadius: 0,
              outerRadius: 80,
              data: data1,
            },
            {
              innerRadius: 100,
              outerRadius: 120,
              data: data2,
            },
          ]}
          width={400}
          height={300}
          slotProps={{
            legend: { hidden: true },
          }}
        />
      
    );
  }
  
  export default TwoLevelPieChart;
  
`}
    </CodeDialog>
  )
}

export default TwoLevelPieCode

===== src/components/muicharts/code/piechartcode/TwoSimplePieCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function TwoSimplePieCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'TwoSimplePieChart ',
},
]; 

const data1 = [
    { label: 'Group A', value: 400, color: "#5D87FF" },
    { label: 'Group B', value: 300, color: "#0074BA" },
    { label: 'Group C', value: 300, color: "#763EBD" },
    { label: 'Group D', value: 200, color: "#0A7EA4" },
    { label: 'Group E', value: 278, color: "#01C0C8" },
    { label: 'Group F', value: 189, color: "#FA896B" },
];

const data2 = [
    { label: 'Group A', value: 2400, color: "#01C0C8" },
    { label: 'Group B', value: 4567, color: "#0074BA" },
    { label: 'Group C', value: 1398, color: "#49BEFF" },
    { label: 'Group D', value: 9800, color: "#47D7BC" },
    { label: 'Group E', value: 3908, color: "#FFCD56" },
    { label: 'Group F', value: 4800, color: "#95CFD5" },
];


export default function TwoSimplePieChart() {
    return (
      

            <PieChart
                series={[
                  {
                        outerRadius: 80,
                        data: data1,
                        cx: 100,
                        cy: 200,
                    },
                    {
                        data: data2,
                        cx: 300,
                        cy: 100,
                        innerRadius: 40,
                        outerRadius: 80,
                    },
                ]}
                height={300}
                slotProps={{
                    legend: { hidden: true },
                }}
            />
    
    );
}
         `}
        </CodeDialog>
    )
}

export default TwoSimplePieCode
===== src/components/muicharts/code/scatterchartscode/BasicScatterCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BasicScatterCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { ScatterChart } from '@mui/x-charts/ScatterChart';
import { useTheme } from "@mui/material";


const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicScatterChart ',
},
]; 

const data = [
    {
        id: 'data-0',
        x1: 329.39,
        x2: 391.29,
        y1: 443.28,
        y2: 153.9,
    },
    {
        id: 'data-1',
        x1: 96.94,
        x2: 139.6,
        y1: 110.5,
        y2: 217.8,
    },
    {
        id: 'data-2',
        x1: 336.35,
        x2: 282.34,
        y1: 175.23,
        y2: 286.32,
    },
    {
        id: 'data-3',
        x1: 159.44,
        x2: 384.85,
        y1: 195.97,
        y2: 325.12,
    },
    {
        id: 'data-4',
        x1: 188.86,
        x2: 182.27,
        y1: 351.77,
        y2: 144.58,
    },
    {
        id: 'data-5',
        x1: 143.86,
        x2: 360.22,
        y1: 43.253,
        y2: 146.51,
    },
    {
        id: 'data-6',
        x1: 202.02,
        x2: 209.5,
        y1: 376.34,
        y2: 309.69,
    },
    {
        id: 'data-7',
        x1: 384.41,
        x2: 258.93,
        y1: 31.514,
        y2: 236.38,
    },
    {
        id: 'data-8',
        x1: 256.76,
        x2: 70.571,
        y1: 231.31,
        y2: 440.72,
    },
    {
        id: 'data-9',
        x1: 143.79,
        x2: 419.02,
        y1: 108.04,
        y2: 20.29,
    },
    {
        id: 'data-10',
        x1: 103.48,
        x2: 15.886,
        y1: 321.77,
        y2: 484.17,
    },
    {
        id: 'data-11',
        x1: 272.39,
        x2: 189.03,
        y1: 120.18,
        y2: 54.962,
    },
    {
        id: 'data-12',
        x1: 23.57,
        x2: 456.4,
        y1: 366.2,
        y2: 418.5,
    },
    {
        id: 'data-13',
        x1: 219.73,
        x2: 235.96,
        y1: 451.45,
        y2: 181.32,
    },
    {
        id: 'data-14',
        x1: 54.99,
        x2: 434.5,
        y1: 294.8,
        y2: 440.9,
    },
    {
        id: 'data-15',
        x1: 134.13,
        x2: 383.8,
        y1: 121.83,
        y2: 273.52,
    },
    {
        id: 'data-16',
        x1: 12.7,
        x2: 270.8,
        y1: 287.7,
        y2: 346.7,
    },
    {
        id: 'data-17',
        x1: 176.51,
        x2: 119.17,
        y1: 134.06,
        y2: 74.528,
    },
    {
        id: 'data-18',
        x1: 65.05,
        x2: 78.93,
        y1: 104.5,
        y2: 150.9,
    },
    {
        id: 'data-19',
        x1: 162.25,
        x2: 63.707,
        y1: 413.07,
        y2: 26.483,
    },
    {
        id: 'data-20',
        x1: 68.88,
        x2: 150.8,
        y1: 74.68,
        y2: 333.2,
    },
    {
        id: 'data-21',
        x1: 95.29,
        x2: 329.1,
        y1: 360.6,
        y2: 422.0,
    },
    {
        id: 'data-22',
        x1: 390.62,
        x2: 10.01,
        y1: 330.72,
        y2: 488.06,
    },
];

export default function BasicScatterChart() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
     

            <ScatterChart
                
                height={300}
                series={[
                    {
                        label: 'Series A',
                        data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })),
                        color: primary
                    },
                    {
                        label: 'Series B',
                        data: data.map((v) => ({ x: v.x1, y: v.y2, id: v.id })),
                        color: secondary
                    },
                ]}
            />
       
    );
}

`}
        </CodeDialog>
    )
}

export default BasicScatterCode

===== src/components/muicharts/code/scatterchartscode/ScatterClickNoSnapCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function ScatterClickNoSnapCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import UndoOutlinedIcon from '@mui/icons-material/UndoOutlined';
import { ScatterChart } from '@mui/x-charts/ScatterChart';
import { Light as SyntaxHighlighter } from "react-syntax-highlighter";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ScatterClickNoSnapChart ',
},
]; 





export default function ScatterClickNoSnapChart() {

    const theme = useTheme();
    const primaryColor = theme.palette.primary.main;
    const secondaryColor = theme.palette.secondary.main;

    const scatterChartsParams = {

        series: [
            {
                id: 'series-1',
                type: 'scatter',
                data: [
                    { x: 6.5e-2, y: -1.3, id: 0 },
                    { x: -2.1, y: -7.0e-1, id: 1 },
                    { x: -7.6e-1, y: -6.7e-1, id: 2 },
                    { x: -1.5e-2, y: -2.0e-1, id: 3 },
                    { x: -1.4, y: -9.9e-1, id: 4 },
                    { x: -1.1, y: -1.5, id: 5 },
                    { x: -7.0e-1, y: -2.7e-1, id: 6 },
                    { x: -5.1e-1, y: -8.8e-1, id: 7 },
                    { x: -4.0e-3, y: -1.4, id: 8 },
                    { x: -1.3, y: -2.2, id: 9 },
                ],
                label: 'A',
                highlightScope: {
                    highlight: 'item',
                },
                color: primaryColor,
            },
            {
                id: 'series-2',
                type: 'scatter',
                data: [
                    { x: 1.8, y: -1.7e-2, id: 0 },
                    { x: 7.1e-1, y: 2.6e-1, id: 1 },
                    { x: -1.2, y: 9.8e-1, id: 2 },
                    { x: 2.0, y: -2.0e-1, id: 3 },
                    { x: 9.4e-1, y: -2.7e-1, id: 4 },
                    { x: -4.8e-1, y: -1.6e-1, id: 5 },
                    { x: -1.5, y: 1.1, id: 6 },
                    { x: 1.3, y: 3.4e-1, id: 7 },
                    { x: -4.2e-1, y: 1.0e-1, id: 8 },
                    { x: 5.4e-2, y: 4.0e-1, id: 9 },
                ],
                label: 'B',
                highlightScope: {
                    highlight: 'item',
                },
                color: secondaryColor,
            },
        ] as any[],
        height: 400,
    };
    const [data, setData] = React.useState();

    const { axis, item, ...other } = data ?? {};
    const dataDisplayed = data && {
        ...(item
            ? {
                item: {
                    dataIndex: item.dataIndex,
                    series: {
                        id: item.series.id,
                        toReplace: '',
                    },
                },
            }
            : undefined),
        ...(axis ? { axis } : undefined),
        ...other,
    };

  const formattedCode = dataDisplayed
        ? JSON.stringify(dataDisplayed, null, 1).replace(
            '"toReplace": ""',
            '// ... (entire series definition)' // Replace part of the code
        )
        : '// The data will appear here';

    return (

            <Stack
                direction={{ xs: 'column', md: 'row' }}
                spacing={{ xs: 0, md: 4 }}
                sx={{ width: '100%' }}
            >
                <Box sx={{ flexGrow: 1 }}>
                    <ScatterChart
                        series={scatterChartsParams.series}
                        height={scatterChartsParams.height}
                        onItemClick={(event: any, d: any) => setData(d)}
                    />
                </Box>
                <Stack direction="column" sx={{ width: { xs: '100%', md: '40%' } }}>
                    <Box
                        sx={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                        }}
                    >
                        <Typography>Click on the chart</Typography>
                        <IconButton
                            aria-label="reset"
                            size="small"
                            onClick={() => {
                                setData(null);
                            }}
                        >
                            <UndoOutlinedIcon fontSize="small" />
                        </IconButton>
                    </Box>
                     <SyntaxHighlighter language="json" style={docco}>
                        {formattedCode}
                    </SyntaxHighlighter>
                </Stack>
            </Stack>
    
    );
}


            `}
        </CodeDialog>
    )
}

export default ScatterClickNoSnapCode
===== src/components/muicharts/code/scatterchartscode/ScatterDatasetCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function ScatterDatasetCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import { ScatterChart } from '@mui/x-charts/ScatterChart';
import { axisClasses } from '@mui/x-charts/ChartsAxis';
import { useTheme } from "@mui/material";
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ScatterDataset ',
},
]; 

const dataset = [
    {
        version: 'data-0',
        a1: 329.39,
        a2: 391.29,
        b1: 443.28,
        b2: 153.9,
    },
    {
        version: 'data-1',
        a1: 96.94,
        a2: 139.6,
        b1: 110.5,
        b2: 217.8,
    },
    {
        version: 'data-2',
        a1: 336.35,
        a2: 282.34,
        b1: 175.23,
        b2: 286.32,
    },
    {
        version: 'data-3',
        a1: 159.44,
        a2: 384.85,
        b1: 195.97,
        b2: 325.12,
    },
    {
        version: 'data-4',
        a1: 188.86,
        a2: 182.27,
        b1: 351.77,
        b2: 144.58,
    },
    {
        version: 'data-5',
        a1: 143.86,
        a2: 360.22,
        b1: 43.253,
        b2: 146.51,
    },
    {
        version: 'data-6',
        a1: 202.02,
        a2: 209.5,
        b1: 376.34,
        b2: 309.69,
    },
    {
        version: 'data-7',
        a1: 384.41,
        a2: 258.93,
        b1: 31.514,
        b2: 236.38,
    },
    {
        version: 'data-8',
        a1: 256.76,
        a2: 70.571,
        b1: 231.31,
        b2: 440.72,
    },
    {
        version: 'data-9',
        a1: 143.79,
        a2: 419.02,
        b1: 108.04,
        b2: 20.29,
    },
];

const chartSetting = {
   
    sx: {
        [\`.\${axisClasses.left} .\${axisClasses.label}\`]: {
                transform: 'translate(-20px, 0)',
        },
    },
            
            height: 300,
};

export default function ScatterDataset() {
    const theme = useTheme();
            const primary = theme.palette.primary.main;
            const secondary = theme.palette.secondary.main;
            return (

            <ScatterChart
                dataset={dataset}
                series={[
                    { datasetKeys: { id: 'version', x: 'a1', y: 'a2' }, label: 'Series A', color: primary },
                    { datasetKeys: { id: 'version', x: 'b1', y: 'b2' }, label: 'Series B', color: secondary },
                ]}
                {...chartSetting}
            />

            );
}

            `}
        </CodeDialog>
    )
}

export default ScatterDatasetCode

===== src/components/muicharts/code/scatterchartscode/VoronoiInteractionCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function VoronoiInteractionCode() {
  return (
    <CodeDialog>
      {`
import * as React from 'react';
import Stack from '@mui/material/Stack';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Typography from '@mui/material/Typography';
import Slider from '@mui/material/Slider';
import { ScatterChart } from '@mui/x-charts/ScatterChart';
import { useTheme } from "@mui/material";

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'VoronoiInteractionChart ',
},
]; 

const data = [
    { x1: 529.39, y1: 643.28, x2: 191.29, y2: -46.1, id: 'data-0' },
    { x1: 296.94, y1: 310.5, x2: -60.4, y2: 17.8, id: 'data-1' },
    { x1: 536.35, y1: 375.23, x2: 82.34, y2: 86.32, id: 'data-2' },
    { x1: 359.44, y1: 395.97, x2: 184.85, y2: 125.12, id: 'data-3' },
    { x1: 388.86, y1: 551.77, x2: -17.73, y2: -55.42, id: 'data-4' },
    { x1: 343.86, y1: 243.25, x2: 160.22, y2: -53.49, id: 'data-5' },
    { x1: 402.02, y1: 576.34, x2: 9.5, y2: 109.69, id: 'data-6' },
    { x1: 584.41, y1: 231.51, x2: 58.93, y2: 36.38, id: 'data-7' },
    { x1: 456.76, y1: 431.31, x2: -129.43, y2: 240.72, id: 'data-8' },
    { x1: 343.79, y1: 308.04, x2: 219.02, y2: -179.71, id: 'data-9' },
    { x1: 303.48, y1: 521.77, x2: -184.11, y2: 284.17, id: 'data-10' },
    { x1: 472.39, y1: 320.18, x2: -10.97, y2: -145.04, id: 'data-11' },
    { x1: 223.57, y1: 566.2, x2: 256.4, y2: 218.5, id: 'data-12' },
    { x1: 419.73, y1: 651.45, x2: 35.96, y2: -18.68, id: 'data-13' },
    { x1: 254.99, y1: 494.8, x2: 234.5, y2: 240.9, id: 'data-14' },
    { x1: 334.13, y1: 321.83, x2: 183.8, y2: 73.52, id: 'data-15' },
    { x1: 212.7, y1: 487.7, x2: 70.8, y2: 146.7, id: 'data-16' },
    { x1: 376.51, y1: 334.06, x2: -80.83, y2: -125.47, id: 'data-17' },
    { x1: 265.05, y1: 304.5, x2: -121.07, y2: -49.1, id: 'data-18' },
    { x1: 362.25, y1: 613.07, x2: -136.29, y2: -173.52, id: 'data-19' },
    { x1: 268.88, y1: 274.68, x2: -49.2, y2: 133.2, id: 'data-20' },
    { x1: 295.29, y1: 560.6, x2: 129.1, y2: 222, id: 'data-21' },
    { x1: 590.62, y1: 530.72, x2: -189.99, y2: 288.06, id: 'data-22' },
  ];
  
  export default function VoronoiInteractionChart() {
    const [voronoiMaxRadius, setVoronoiMaxRadius] = React.useState(25);
    const [disableVoronoi, setDisableVoronoi] = React.useState(false);
    const [undefinedRadius, setUndefinedRadius] = React.useState(true);
  
    const handleMaxRadiusChange = (event: any, newValue: any) => {
    if (typeof newValue !== 'number') {
      return;
    }
    setVoronoiMaxRadius(newValue);
  };
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
  
    return (
     
  
        <Stack direction="column" sx={{ width: '100%' }}>
          <ScatterChart
            height={300}
            disableVoronoi={disableVoronoi}
            voronoiMaxRadius={undefinedRadius ? undefined : voronoiMaxRadius}
            dataset={data}
            series={[
              {
                label: 'Series A',
                data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })),
                color: primary
              },
              {
                label: 'Series B',
                data: data.map((v) => ({ x: v.x2, y: v.y2, id: v.id })),
                color: secondary
              },
            ]}
          />
          <div>
            <Typography id="max-radius-value" gutterBottom>
              max radius
            </Typography>
            <Slider
              value={voronoiMaxRadius}
              onChange={handleMaxRadiusChange}
              valueLabelDisplay="auto"
              min={1}
              max={100}
              aria-labelledby="max-radius-value"
              disabled={disableVoronoi || undefinedRadius}
            />
          </div>
          <Stack direction="row">
            <FormControlLabel
              checked={disableVoronoi}
              control={
                <Checkbox
                  onChange={(event) => setDisableVoronoi(event.target.checked)}
                />
              }
              label="disableVoronoi"
              labelPlacement="end"
            />
            <FormControlLabel
              checked={undefinedRadius}
              control={
                <Checkbox
                  onChange={(event) => setUndefinedRadius(event.target.checked)}
                />
              }
              label="undefined radius"
              labelPlacement="end"
            />
          </Stack>
        </Stack>
  
    );
  }

            `}
    </CodeDialog>
  )
}

export default VoronoiInteractionCode

===== src/components/muicharts/code/sparklinecode/AreaSparkLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function AreaSparkLineCode() {
  return (
    <CodeDialog>
      {`

    import * as React from 'react';
    import Stack from '@mui/material/Stack';
    import Box from '@mui/material/Box';
    import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
    import { useTheme } from '@mui/material';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'AreaSparkLineChart ',
},
]; 

export default function AreaSparkLineChart() {
        const theme = useTheme();
        const primary = theme.palette.primary.main;
        return (
                <Stack direction="row" sx={{ width: '100%' }}>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart data={[3, -10, -2, 5, 7, -2, 4, 6]} height={100} area colors={[primary]} />
                    </Box>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart
                            data={[3, -10, -2, 5, 7, -2, 4, 6]}
                            height={100}
                            curve="natural"
                            colors={[primary]}
                            area
                        />
                    </Box>
                </Stack>
          
        );
    }
`}
    </CodeDialog>
  )
}

export default AreaSparkLineCode

===== src/components/muicharts/code/sparklinecode/BasicSparkLineCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BasicSparkLineCode() {
  return (
    <CodeDialog>
      {`

import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import { useTheme } from '@mui/material';
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicSparkLine ',
},
]; 

 function BasicSparkLine() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;


    return (

            <Stack direction="row" sx={{ width: '100%' }}>
                <Box sx={{ flexGrow: 1 }}>
                    <SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} height={100} colors={[primary]} />
                </Box>
                <Box sx={{ flexGrow: 1 }}>
                    <SparkLineChart
                        plotType="bar"
                        data={[1, 4, 2, 5, 7, 2, 4, 6]}
                        height={100}
                        colors={[primary]}
                    />
                </Box>
            </Stack>
    )
}

export default BasicSparkLine
    

`}
    </CodeDialog>
  )
}

export default BasicSparkLineCode

===== src/components/muicharts/code/sparklinecode/BasicSparkLineCustomizationCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";

function BasicSparkLineCustomizationCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import FormControlLabel from '@mui/material/FormControlLabel';
import Switch from '@mui/material/Switch';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import { useTheme } from '@mui/material';

 const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicSparkLineCustomizationChart ',
},
]; 


export default function BasicSparkLineCustomizationChart() {
    const [showHighlight, setShowHighlight] = React.useState(true);
    const [showTooltip, setShowTooltip] = React.useState(true);

    const theme = useTheme();
    const primary = theme.palette.primary.main;

    const handleHighlightChange = (event: { target: { checked: boolean | ((prevState: boolean) => boolean); }; }) => {
        setShowHighlight(event.target.checked);
    };

    const handleTooltipChange = (event: { target: { checked: boolean | ((prevState: boolean) => boolean); }; }) => {
        setShowTooltip(event.target.checked);
    };

    return (

            <Stack direction="column" sx={{ width: '100%' }}>
                <Stack direction="row">
                    <FormControlLabel
                        value="end"
                        control={
                            <Switch
                                color="primary"
                                checked={showHighlight}
                                onChange={handleHighlightChange}

                            />
                        }
                        label="showHighlight"
                        labelPlacement="end"
                    />
                    <FormControlLabel
                        value="end"
                        control={
                            <Switch
                                color="primary"
                                checked={showTooltip}
                                onChange={handleTooltipChange}
                            />
                        }
                        label="showTooltip"
                        labelPlacement="end"
                    />
                </Stack>
                <Stack direction="row" sx={{ width: '100%' }}>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart
                            data={[1, 4, 2, 5, 7, 2, 4, 6]}
                            height={100}
                            showHighlight={showHighlight}
                            showTooltip={showTooltip}
                            colors={[primary]}
                        />
                    </Box>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart
                            plotType="bar"
                            data={[1, 4, 2, 5, 7, 2, 4, 6]}
                            height={100}
                            showHighlight={showHighlight}
                            showTooltip={showTooltip}
                            colors={[primary]}
                        />
                    </Box>
                </Stack>
            </Stack>

    );
}
            `}
        </CodeDialog>
    )
}

export default BasicSparkLineCustomizationCode

===== src/components/muicharts/gaugecharts/ArcDesignChart.tsx =====
'use client'

import { Gauge, gaugeClasses } from '@mui/x-charts/Gauge';
import ParentCard from 'src/components/shared/ParentCard';
import ArcDesignCode from '../code/gaugechartscode/ArcDesignCode';

const settings = {
    width: 200,
    height: 200,
    value: 60,
};

export default function ArcDesignChart() {
    return (
        <ParentCard title="ArcDesign Chart" codeModel={<ArcDesignCode />}>

            <Gauge
                {...settings}
                cornerRadius="50%"
                sx={(theme) => ({
                    [`& .${gaugeClasses.valueText}`]: {
                        fontSize: 40,
                    },
                    [`& .${gaugeClasses.valueArc}`]: {

                        fill: theme.palette.primary,
                    },
                    [`& .${gaugeClasses.referenceArc}`]: {
                        fill: theme.palette.text.disabled,
                    },
                })}
            />
        </ParentCard>
    );
}

===== src/components/muicharts/gaugecharts/BasicGaugesChart.tsx =====
'use client'

import Stack from '@mui/material/Stack';
import { Gauge } from '@mui/x-charts/Gauge';
import ParentCard from 'src/components/shared/ParentCard';
import BasicGaugesCode from '../code/gaugechartscode/BasicGaugesCode';

export default function BasicGaugesChart() {
    return (
        <ParentCard title="Basic Chart" codeModel={<BasicGaugesCode />}>

            <Stack direction={{ xs: 'column', md: 'row' }} spacing={{ xs: 1, md: 3 }}>
                <Gauge width={200} height={200} value={60} />
                <Gauge width={200} height={200} value={60} startAngle={-90} endAngle={90} />
            </Stack>
        </ParentCard>
    );
}

===== src/components/muicharts/gaugecharts/GaugePointerChart.tsx =====
'use client'

import {
    GaugeContainer,
    GaugeValueArc,
    GaugeReferenceArc,
    useGaugeState,
} from '@mui/x-charts/Gauge';
import ParentCard from 'src/components/shared/ParentCard';
import GaugePointerCode from '../code/gaugechartscode/GaugePointerCode';




function GaugePointer() {
    const { valueAngle, outerRadius, cx, cy } = useGaugeState();

    if (valueAngle === null) {
        // No value to display
        return null;
    }

    const target = {
        x: cx + outerRadius * Math.sin(valueAngle),
        y: cy - outerRadius * Math.cos(valueAngle),
    };
    return (
        <g>
            <circle cx={cx} cy={cy} r={5} fill="red" />
            <path
                d={`M ${cx} ${cy} L ${target.x} ${target.y}`}
                stroke="red"
                strokeWidth={3}
            />
        </g>
    );
}

export default function GaugePointerChart() {
    return (

        <ParentCard title="GaugePointer  Chart" codeModel={<GaugePointerCode />}>
            <GaugeContainer
                width={200}
                height={200}
                startAngle={-110}
                endAngle={110}
                value={30}
            >
                <GaugeReferenceArc />
                <GaugeValueArc />
                <GaugePointer />
            </GaugeContainer>
        </ParentCard>
    );
}
===== src/components/muicharts/linescharts/areacharts/AreaChartConnectNullsChart.tsx =====
'use client'

import Stack from '@mui/material/Stack';
import { LineChart } from '@mui/x-charts/LineChart';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';
import AreaChartConnectNullsCode from '../../code/areachartscode/AreaChartConnectNullsCode';



export default function AreaChartConnectNulls() {
    const data = [4000, 3000, 2000, null, 1890, 2390, 3490];
    const xData = ["January", "February", "March", "April", "May", "June", "July"];
    const theme = useTheme();
    const primary = theme.palette.primary.main;

    return (
        <ParentCard title="ConnectNulls Chart" codeModel={<AreaChartConnectNullsCode />}>

            <Stack sx={{ width: '100%' }}>
                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    series={[{ data, showMark: false, area: true, color: primary }]}
                    height={200}
                    margin={{ top: 10, bottom: 20 }}
                />
                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    series={[{ data, showMark: false, area: true, connectNulls: true, color: primary }]}
                    height={200}
                    margin={{ top: 10, bottom: 20 }}
                />
            </Stack>
        </ParentCard>
    );
}
===== src/components/muicharts/linescharts/areacharts/AreaChartFillByValueChart.tsx =====
'use client'

import { green, red } from '@mui/material/colors';
import Stack from '@mui/material/Stack';
import { useYScale, useDrawingArea } from '@mui/x-charts/hooks';
import { LineChart, areaElementClasses } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import AreaChartFillByValueCode from '../../code/areachartscode/AreaChartFillByValueCode';




function ColorSwich({ threshold, color1, color2, id }: any) {

    const { top, height, bottom } = useDrawingArea();
    const svgHeight = top + bottom + height;

    const scale = useYScale(); // You can provide the axis Id if you have multiple ones
    const y0 = scale(threshold); // The coordinate of of the origine
    const off = y0 !== undefined ? y0 / svgHeight : 0;

    return (
        <defs>
            <linearGradient
                id={id}
                x1="0"
                x2="0"
                y1="0"
                y2={`${svgHeight}px`}
                gradientUnits="userSpaceOnUse" // Use the SVG coordinate instead of the component ones.
            >
                <stop offset={off} stopColor={color1} stopOpacity={1} />
                <stop offset={off} stopColor={color2} stopOpacity={1} />
            </linearGradient>
        </defs>
    );
}

export default function AreaChartFillByValue() {
    const data = [4000, 3000, -1000, 500, -2100, -250, 3490];
    const xData = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const amtDatacolor = theme.palette.error.main;

    return (
        <ParentCard title=" FillByValue Chart" codeModel={<AreaChartFillByValueCode />}>

            <Stack direction="column" width="100%" spacing={1}>
                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    yAxis={[{ min: -3000, max: 4000 }]}
                    series={[{ data, showMark: false, area: true }]}
                    height={200}
                    margin={{ top: 20, bottom: 30, left: 75 }}
                    sx={{
                        [`& .${areaElementClasses.root}`]: {
                            fill: 'url(#swich-color-id-1)',
                        },
                    }}
                >
                    <ColorSwich
                        color1={primary}
                        color2={amtDatacolor}
                        threshold={0}
                        id="swich-color-id-1"
                    />
                    <rect x={0} y={0} width={5} height="100%" fill="url(#swich-color-id-1)" />
                </LineChart>

                <LineChart
                    xAxis={[{ data: xData, scaleType: 'point' }]}
                    yAxis={[{ min: -3000, max: 4000 }]}
                    series={[{ data, showMark: false, area: true }]}
                    height={200}
                    margin={{ top: 20, bottom: 30, left: 75 }}
                    sx={{
                        [`& .${areaElementClasses.root}`]: {
                            fill: 'url(#swich-color-id-2)',
                        },
                    }}
                >
                    <ColorPalette id="swich-color-id-2" />

                    <rect x={0} y={0} width={5} height="100%" fill="url(#swich-color-id-2)" />
                </LineChart>
            </Stack>
        </ParentCard>
    );
}

function ColorPalette({ id }: any) {
    const { top, height, bottom } = useDrawingArea();
    const svgHeight = top + bottom + height;

    const scale = useYScale();

    // Function to safely get the scale value
    const safeScale = (value: number) => {
        const scaledValue = scale(value);
        return scaledValue !== undefined ? scaledValue : 0;
    };

    return (
        <defs>
            <linearGradient
                id={id}
                x1="0"
                x2="0"
                y1="0"
                y2={`${svgHeight}px`}
                gradientUnits="userSpaceOnUse" // Use the SVG coordinate instead of the component ones.
            >
                <stop

                    offset={safeScale(5000) / svgHeight}
                    stopColor={green[400]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(4000) / svgHeight}
                    stopColor={green[400]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(4000) / svgHeight}
                    stopColor={green[300]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(3000) / svgHeight}
                    stopColor={green[300]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(3000) / svgHeight}
                    stopColor={green[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(2000) / svgHeight}
                    stopColor={green[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(2000) / svgHeight}
                    stopColor={green[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(1000) / svgHeight}
                    stopColor={green[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(1000) / svgHeight}
                    stopColor={green[50]}
                    stopOpacity={1}
                />
                <stop offset={safeScale(0) / svgHeight} stopColor={green[50]} stopOpacity={1} />
                <stop offset={safeScale(0) / svgHeight} stopColor={red[100]} stopOpacity={1} />
                <stop
                    offset={safeScale(-1000) / svgHeight}
                    stopColor={red[100]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(-1000) / svgHeight}
                    stopColor={red[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(-2000) / svgHeight}
                    stopColor={red[200]}
                    stopOpacity={1}
                />
                <stop
                    offset={safeScale(-3000) / svgHeight}
                    stopColor={red[300]}
                    stopOpacity={1}
                />
            </linearGradient>
        </defs>
    );
}

===== src/components/muicharts/linescharts/areacharts/PercentAreaChart.tsx =====
"use client";

import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import PercentAreaCode from '../../code/areachartscode/PercentAreaCode';


const time = [
    new Date(2015, 1, 0),
    new Date(2015, 2, 0),
    new Date(2015, 3, 0),
    new Date(2015, 4, 0),
    new Date(2015, 5, 0),
    new Date(2015, 6, 0),
    new Date(2015, 7, 0),
];
const a = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
const b = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
const c = [2400, 2210, 2290, 2000, 2181, 2500, 2100];

const getPercents = (array: any[]) =>
    array.map((v, index) => (100 * v) / (a[index] + b[index] + c[index]));

export default function PercentAreaChart() {

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const amtDatacolor = theme.palette.error.main;

    return (
        <ParentCard title="Percent Chart" codeModel={<PercentAreaCode />}>

            <LineChart

                height={300}
                series={[
                    {
                        data: getPercents(a),
                        type: 'line',
                        label: 'Revenue',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: primary
                    },
                    {
                        data: getPercents(b),
                        type: 'line',
                        label: 'Profits',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: secondary
                    },
                    {
                        data: getPercents(c),
                        type: 'line',
                        label: 'Expenses',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: amtDatacolor
                    },
                ]}
                xAxis={[
                    {
                        scaleType: 'time',
                        data: time,
                        min: time[0].getTime(),
                        max: time[time.length - 1].getTime(),

                    },
                ]}
            />
        </ParentCard>
    );
}


===== src/components/muicharts/linescharts/areacharts/SimpleAreaChart.tsx =====
'use client'

import SimpleAreaCode from '../../code/areachartscode/SimpleAreaCode'
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material'
import { LineChart, lineElementClasses } from '@mui/x-charts/LineChart'

export default function SimpleAreaChart() {
  const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490]
  const xLabels = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
  ]

  const theme = useTheme()
  const primary = theme.palette.primary.main

  return (
    <ParentCard title='Simple AreaChart' codeModel={<SimpleAreaCode />}>
      <LineChart
        height={300}
        series={[
          {
            data: monthlyProfits,
            label: 'Profits',
            area: true,
            showMark: false,
            color: primary,
          },
        ]}
        xAxis={[{ scaleType: 'point', data: xLabels }]}
        sx={{
          [`& .${lineElementClasses.root}`]: {
            display: 'none',
          },
        }}
      />
    </ParentCard>
  )
}

===== src/components/muicharts/linescharts/areacharts/StackedAreaChart.tsx =====
"use client";


import { LineChart, lineElementClasses } from '@mui/x-charts/LineChart';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from "@mui/material";
import StackedAreaCode from '../../code/areachartscode/StackedAreaCode';


export default function StackedAreaChart() {
    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const monthlyExpenses = [2400, 2210, 0, 2000, 2181, 2500, 2100];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const expDatacolor = theme.palette.error.main;

    return (
        <ParentCard title="Stacked Chart" codeModel={<StackedAreaCode />}>

            <LineChart

                height={300}
                series={[
                    { data: monthlyRevenue, label: 'Revenue', area: true, stack: 'total', showMark: false, color: primary },
                    { data: monthlyProfits, label: 'Profits', area: true, stack: 'total', showMark: false, color: secondary },
                    {
                        data: monthlyExpenses,
                        label: 'Expenses',
                        area: true,
                        stack: 'total',
                        showMark: false,
                        color: expDatacolor
                    },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
                sx={{
                    [`& .${lineElementClasses.root}`]: {
                        display: 'none',
                    },
                }}
            />
        </ParentCard>
    );
}

===== src/components/muicharts/linescharts/areacharts/TinyAreaChart.tsx =====
"use client";

import { ChartContainer } from '@mui/x-charts/ChartContainer';
import { AreaPlot } from '@mui/x-charts/LineChart';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';
import TinyAreaCode from '../../code/areachartscode/TinyAreaCode';


export default function TinyAreaChart() {
    const uData = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const xLabels = [
        ' A',
        ' B',
        ' C',
        ' D',
        ' E',
        ' F',
        ' G',
    ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    return (
        <ParentCard title="Tiny Chart" codeModel={<TinyAreaCode />}>

            <ChartContainer
                width={800}
                height={300}
                series={[
                    {
                        data: uData,
                        type: 'line',
                        label: 'uv',
                        area: true,
                        stack: 'total',
                        color: primary
                    },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
            >
                <AreaPlot />
            </ChartContainer>
        </ParentCard>
    );
}

===== src/components/muicharts/linescharts/linechart/BiaxialLineChart.tsx =====
"use client";

import { LineChart } from "@mui/x-charts/LineChart";
import BiaxialLineCode from "../../code/linechartscode/BiaxialLineCode";
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from "@mui/material";

export default function BiaxialLineChart() {

    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
        <ParentCard title="Biaxial Chart" codeModel={<BiaxialLineCode />}>
            <LineChart
                height={300}
                series={[
                    { data: monthlyRevenue, label: "Revenue", yAxisId: "leftAxisId", color: primary },
                    {
                        data: monthlyProfits,
                        label: "Profits",
                        yAxisId: "rightAxisId",
                        color: secondary,
                    },
                ]}
                xAxis={[{ scaleType: "point", data: xLabels }]}
                yAxis={[{ id: "leftAxisId" }, { id: "rightAxisId" }]}
                rightAxis="rightAxisId"
            />
        </ParentCard>
    );
}

===== src/components/muicharts/linescharts/linechart/DashedLineChart.tsx =====
"use client";


import {
    LineChart,
    lineElementClasses,
    markElementClasses,
} from "@mui/x-charts/LineChart";
import { useTheme } from "@mui/material";
import ParentCard from "../../../shared/ParentCard";
import DashedLineCode from "../../code/linechartscode/DashedLineCode";

export default function DashedLineChart() {

    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
        <ParentCard title="Dashed Chart" codeModel={<DashedLineCode />}>
            <LineChart
                height={300}
                series={[
                    { data: monthlyRevenue, label: "Revenue", id: "pvId", color: primary },
                    { data: monthlyProfits, label: "Profits", id: "uvId", color: secondary },
                ]}
                xAxis={[{ scaleType: "point", data: xLabels }]}
                sx={{
                    [`.${lineElementClasses.root}, .${markElementClasses.root}`]: {
                        strokeWidth: 1,
                    },
                    ".MuiLineElement-series-pvId": {
                        strokeDasharray: "5 5",
                    },
                    ".MuiLineElement-series-uvId": {
                        strokeDasharray: "3 4 5 2",
                    },
                    [`.${markElementClasses.root}:not(.${markElementClasses.highlighted})`]:
                    {
                        fill: "#fff",
                    },
                    [`& .${markElementClasses.highlighted}`]: {
                        stroke: "none",
                    },
                }}
            />
        </ParentCard>
    );
}

===== src/components/muicharts/linescharts/linechart/LineChartWithReferenceLinesChart.tsx =====
"use client";
import { ChartContainer } from "@mui/x-charts/ChartContainer";
import { ChartsReferenceLine } from "@mui/x-charts/ChartsReferenceLine";
import { LinePlot, MarkPlot } from "@mui/x-charts/LineChart";
import { ChartsXAxis } from "@mui/x-charts/ChartsXAxis";
import { ChartsYAxis } from "@mui/x-charts/ChartsYAxis";
import ParentCard from "../../../shared/ParentCard";
import LineChartWithReferenceLinesCode from "../../code/linechartscode/LineChartWithReferenceLinesCode";
import { useTheme } from "@mui/material";

export default function LineChartWithReferenceLines() {
    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];

    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];

    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const Linecolor = theme.palette.warning.main;

    return (
        <ParentCard
            title="ReferenceLine Chart"
            codeModel={<LineChartWithReferenceLinesCode />}
        >
            <ChartContainer
                width={800}
                height={300}
                series={[
                    { data: monthlyRevenue, label: "Revenue", type: "line", color: primary },
                    { data: monthlyProfits, label: "Profits", type: "line", color: secondary },
                ]}
                xAxis={[{ scaleType: "point", data: xLabels }]}
            >
                <LinePlot />
                <MarkPlot />
                <ChartsReferenceLine
                    x="March"
                    label="Max Profits"
                    lineStyle={{ stroke: Linecolor }}
                />
                <ChartsReferenceLine
                    y={9800}
                    label="Max"
                    lineStyle={{ stroke: Linecolor }}
                />
                <ChartsXAxis />
                <ChartsYAxis />
            </ChartContainer>
        </ParentCard>
    );
}

===== src/components/muicharts/linescharts/linechart/LinewithforecastChart.tsx =====


'use client'
import React from 'react'
import { LineChart, AnimatedLine, AnimatedLineProps } from '@mui/x-charts/LineChart';
import { useChartId, useDrawingArea, useXScale } from '@mui/x-charts/hooks';

import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from "@mui/material";
import LinewithforecastCode from '../../code/linechartscode/LinewithforecastCode';
import { SxProps, Theme } from '@mui/system';

interface CustomAnimatedLineProps extends AnimatedLineProps {
    sx?: SxProps<Theme>;
    limit?: number;
    sxBefore?: SxProps<Theme>;
    sxAfter?: SxProps<Theme>;
}


function CustomAnimatedLine(props: CustomAnimatedLineProps) {
    const { limit, sxBefore, sxAfter, ...other } = props;
    const { top, bottom, height, left, width } = useDrawingArea();
    const scale = useXScale();
    const chartId = useChartId();

    if (limit === undefined) {
        return <AnimatedLine {...other} />;
    }

    const limitPosition = scale(limit); // Convert value to x coordinate.

    if (limitPosition === undefined) {
        return <AnimatedLine {...other} />;
    }

    const clipIdleft = `${chartId}-${props.ownerState.id}-line-limit-${limit}-1`;
    const clipIdRight = `${chartId}-${props.ownerState.id}-line-limit-${limit}-2`;
    return (
        <React.Fragment>
            {/* Clip to show the line before the limit */}
            <clipPath id={clipIdleft}>
                <rect
                    x={left}
                    y={0}
                    width={limitPosition - left}
                    height={top + height + bottom}
                />
            </clipPath>
            {/* Clip to show the line after the limit */}
            <clipPath id={clipIdRight}>
                <rect
                    x={limitPosition}
                    y={0}
                    width={left + width - limitPosition}
                    height={top + height + bottom}
                />
            </clipPath>
            <g clipPath={`url(#${clipIdleft})`}>
                <AnimatedLine {...other} style={sxBefore as React.CSSProperties} />
            </g>
            <g clipPath={`url(#${clipIdRight})`}>
                <AnimatedLine {...other} style={sxAfter as React.CSSProperties} />
            </g>
        </React.Fragment>
    );
}

export default function LinewithforecastChart() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;

    return (
        <ParentCard title="Forecast Chart" codeModel={<LinewithforecastCode />}>
            <LineChart
                series={[
                    {
                        type: 'line',
                        data: [1, 2, 3, 4, 1, 2, 3, 4, 5],
                        valueFormatter: (v, i) => `${v}${i.dataIndex > 5 ? ' (estimated)' : ''}`,
                        color: primary
                    },
                ]}
                xAxis={[{ data: [0, 1, 2, 3, 4, 5, 6, 7, 8] }]}
                height={200}
                slots={{ line: CustomAnimatedLine }}
                slotProps={{ line: { limit: 5, sxAfter: { strokeDasharray: '10 5' } } as any }}
            />
        </ParentCard>
    );
}
===== src/components/muicharts/linescharts/linechart/SimpleLineChart.tsx =====
'use client'

import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from "@mui/material";
import ParentCard from "../../../shared/ParentCard";
import SimpleLineCode from '../../code/linechartscode/SimpleLineCode';

function SimpleLineChart() {




    const monthlyProfits = [4000, 3000, 2000, 2780, 1890, 2390, 3490];
    const monthlyRevenue = [2400, 1398, 9800, 3908, 4800, 3800, 4300];

    const xLabels = ["January", "February", "March", "April", "May", "June", "July"];


    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
        <ParentCard title="Simple Chart" codeModel={<SimpleLineCode />}>

            <LineChart
                height={300}
                series={[
                    { data: monthlyRevenue, label: 'Revenue', color: primary },
                    { data: monthlyProfits, label: 'Profits', color: secondary },
                ]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
            />
        </ParentCard>
    )
}

export default SimpleLineChart

===== src/components/muicharts/linescharts/linechart/TinyLineChart.tsx =====
'use client'

import { useTheme } from "@mui/material";
import ParentCard from "../../../shared/ParentCard";
import { ChartContainer } from '@mui/x-charts/ChartContainer';
import {
    LinePlot,
    MarkPlot,
} from '@mui/x-charts/LineChart';
import TinyLineCode from '../../code/linechartscode/TinyLineCode';

function TinyLineChart() {
    const pData = [2400, 1398, 9800, 3908, 4800, 3800, 4300];
    const xLabels = [
        'Page A',
        'Page B',
        'Page C',
        'Page D',
        'Page E',
        'Page F',
        'Page G',
    ];
    const theme = useTheme();
    const primary = theme.palette.primary.main;

    return (
        <ParentCard title="Tiny Chart" codeModel={<TinyLineCode />}>

            <ChartContainer
                width={800}
                height={300}
                series={[{ type: 'line', data: pData, color: primary }]}
                xAxis={[{ scaleType: 'point', data: xLabels }]}
                disableAxisListener
            >
                <LinePlot />
                <MarkPlot />
            </ChartContainer>
        </ParentCard>
    )
}

export default TinyLineChart

===== src/components/muicharts/piecharts/BasicPieChart.tsx =====
'use client'

import { PieChart } from '@mui/x-charts/PieChart';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';
import BasicPieCode from '../code/piechartcode/BasicPieCode';


export default function BasicPieChart() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    const Datacolor = theme.palette.error.main;
    return (
        <ParentCard title="Basic Chart" codeModel={<BasicPieCode />}>

            <PieChart
                series={[
                    {
                        data: [
                            { id: 0, value: 10, label: 'series A', color: primary },
                            { id: 1, value: 15, label: 'series B', color: secondary },
                            { id: 2, value: 20, label: 'series C', color: Datacolor },
                        ],
                    },

                ]}
                height={300}
            />
        </ParentCard>
    );
}
===== src/components/muicharts/piecharts/OnSeriesItemClickChart.tsx =====
'use client'
import React from 'react';

import { PieChart } from '@mui/x-charts/PieChart';

import Typography from '@mui/material/Typography';
import Stack from '@mui/material/Stack';
import OnSeriesItemClickCode from '../code/piechartcode/OnSeriesItemClickCode';
import ParentCard from 'src/components/shared/ParentCard';

const items = [
    { value: 10, label: 'Series A ( no Id )', color: '#CCDA4E' },
    { id: 'id_B', value: 15, label: 'Series B', color: '#0074BA' },
    { id: 'id_C', value: 20, label: 'Series C', color: '#01C0C8' },
];

const formatObject = (obj: null) => {
    if (obj === null) {
        return '  undefined';
    }
    return JSON.stringify(obj, null, 2)
        .split('\n')
        .map((l) => `  ${l}`)
        .join('\n');
};
export default function OnSeriesItemClickChart() {
    const [identifier, setIdentifier] = React.useState(null);
    const [id, setId] = React.useState(undefined);


    const handleClick = (_event: any, itemIdentifier: any, item: any) => {
        setId(item.id);
        setIdentifier(itemIdentifier);
    };

    return (
        <ParentCard title="OnSeriesItemClick Chart" codeModel={<OnSeriesItemClickCode />}>

            <Stack
                direction={{ xs: 'column', md: 'row' }}
                alignItems={{ xs: 'flex-start', md: 'center' }}
                justifyContent="space-between"
                sx={{ width: '100%' }}
            >
                <Typography
                    component="pre"
                    sx={{ maxWidth: { xs: '100%', md: '50%', flexShrink: 1 }, overflow: 'auto' }}
                >
                    {`item id: ${id ?? 'undefined'}

                   item identifier:
                   ${formatObject(identifier)}`}
                </Typography>

                <PieChart
                    series={[
                        {
                            data: items,
                        },
                    ]}
                    onItemClick={handleClick}
                    width={400}
                    height={200}
                    margin={{ right: 200 }}
                />
            </Stack>
        </ParentCard>
    );
}

===== src/components/muicharts/piecharts/PieChartWithCenterLabelChart.tsx =====
'use client'

import { PieChart } from '@mui/x-charts/PieChart';
import { useDrawingArea } from '@mui/x-charts/hooks';
import { styled } from '@mui/material/styles';
import ParentCard from 'src/components/shared/ParentCard';
import PieChartWithCenterLabelCode from '../code/piechartcode/PieChartWithCenterLabelCode';

const data = [
    { value: 5, label: 'A', color: '#5D87FF' },
    { value: 10, label: 'B', color: '#0074BA' },
    { value: 15, label: 'C', color: '#01C0C8' },
    { value: 20, label: 'D', color: '#CCDA4E' },
];

const size = {
    width: 400,
    height: 200,
};

const StyledText = styled('text')(({ theme }) => ({
    fill: theme.palette.text.primary,
    textAnchor: 'middle',
    dominantBaseline: 'central',
    fontSize: 20,
}));

function PieCenterLabel({ children }: any) {
    const { width, height, left, top } = useDrawingArea();
    return (
        <StyledText x={left + width / 2} y={top + height / 2}>
            {children}
        </StyledText>
    );
}

export default function PieChartWithCenterLabelChart() {
    return (
        <ParentCard title="CenterLabel Chart" codeModel={<PieChartWithCenterLabelCode />}>

            <PieChart series={[{ data, innerRadius: 80 }]} {...size}>
                <PieCenterLabel>Center label</PieCenterLabel>
            </PieChart>
        </ParentCard>
    );
}

===== src/components/muicharts/piecharts/PieChartWithCustomizedLabel.tsx =====
'use client'

import { PieChart, pieArcLabelClasses } from '@mui/x-charts/PieChart';
import ParentCard from 'src/components/shared/ParentCard';
import PieChartWithCustomizedLabelCode from '../code/piechartcode/PieChartWithCustomizedLabelCode'

const data = [
    { label: 'Group A', value: 400, color: '#5D87FF' },
    { label: 'Group B', value: 300, color: '#0074BA' },
    { label: 'Group C', value: 300, color: '#01C0C8' },
    { label: 'Group D', value: 200, color: '#CCDA4E' },
];

const sizing = {
    margin: { right: 5 },
    width: 200,
    height: 200,
    legend: { hidden: true },
};
const TOTAL = data.map((item) => item.value).reduce((a, b) => a + b, 0);

const getArcLabel = (params: { value: number; }) => {
    const percent = params.value / TOTAL;
    return `${(percent * 100).toFixed(0)}%`;
};

export default function PieChartWithCustomizedLabel() {
    return (
        <ParentCard title="CustomizedLabel Chart" codeModel={<PieChartWithCustomizedLabelCode />}>
            <PieChart
                series={[
                    {
                        outerRadius: 80,
                        data,
                        arcLabel: getArcLabel,
                    },
                ]}
                sx={{
                    [`& .${pieArcLabelClasses.root}`]: {
                        fill: 'white',
                        fontSize: 14,
                    },
                }}
                {...sizing}
            />
        </ParentCard>
    );
}
===== src/components/muicharts/piecharts/PieChartWithPaddingAngleChart.tsx =====
'use client'

import Stack from '@mui/material/Stack';
import { PieChart } from '@mui/x-charts/PieChart';
import ParentCard from 'src/components/shared/ParentCard';
import PieChartWithPaddingAngleCode from '../code/piechartcode/PieChartWithPaddingAngleCode';


const data = [
    { label: 'Group A', value: 400, color: "#5D87FF" },
    { label: 'Group B', value: 300, color: "#FA896B" },
    { label: 'Group C', value: 300, color: "#FFCD56" },
    { label: 'Group D', value: 200, color: "#95CFD5" },
];

export default function PieChartWithPaddingAngleChart() {
    return (
        <ParentCard title="PaddingAngle Chart" codeModel={<PieChartWithPaddingAngleCode />}>

            <Stack direction="row">
                <PieChart
                    series={[
                        {
                            paddingAngle: 5,
                            innerRadius: 60,
                            outerRadius: 80,
                            data,
                        },
                    ]}
                    margin={{ right: 5 }}
                    width={200}
                    height={200}
                    legend={{ hidden: true }}
                />
                <PieChart
                    series={[
                        {
                            startAngle: -90,
                            endAngle: 90,
                            paddingAngle: 5,
                            innerRadius: 60,
                            outerRadius: 80,
                            data,

                        },
                    ]}
                    margin={{ right: 5 }}
                    width={200}
                    height={200}
                    slotProps={{
                        legend: { hidden: true },
                    }}
                />
            </Stack>
        </ParentCard>
    );
}

===== src/components/muicharts/piecharts/StraightAnglePieChart.tsx =====
'use client'

import { PieChart } from '@mui/x-charts/PieChart';
import ParentCard from 'src/components/shared/ParentCard';
import StraightAnglePieCode from '../code/piechartcode/StraightAnglePieCode';


export default function StraightAnglePieChart() {

    const data = [
        { label: 'Group A', value: 400, color: "#5D87FF" },
        { label: 'Group B', value: 300, color: "#0074BA" },
        { label: 'Group C', value: 300, color: "#01C0C8" },
        { label: 'Group D', value: 200, color: "#CCDA4E" },
        { label: 'Group E', value: 278, color: "#FB9678" },
        { label: 'Group F', value: 189, color: "#49BEFF" },
    ];


    return (
        <ParentCard title="StraightAngle Chart" codeModel={<StraightAnglePieCode />}>
            <PieChart
                series={[
                    {
                        startAngle: -90,
                        endAngle: 90,
                        data,
                    },
                ]}
                height={300}
            />
        </ParentCard>
    );
}

===== src/components/muicharts/piecharts/TwoLevelPieChart.tsx =====
'use client'

import ParentCard from 'src/components/shared/ParentCard';
import TwoLevelPieCode from "../code/piechartcode/TwoLevelPieCode";
import { PieChart } from "@mui/x-charts/PieChart";

function TwoLevelPieChart() {
  const data1 = [
    { label: "Group A", value: 400, color: "#5D87FF" },
    { label: "Group B", value: 300, color: "#0074BA" },
    { label: "Group C", value: 300, color: "#763EBD" },
    { label: "Group D", value: 200, color: "#0A7EA4" },
  ];
  const data2 = [
    { label: "A1", value: 100, color: "#01C0C8" },
    { label: "A2", value: 300, color: "#FA896B" },
    { label: "B1", value: 100, color: "#01C0C8" },
    { label: "B2", value: 80, color: "#0074BA" },
    { label: "B3", value: 40, color: "#49BEFF" },
    { label: "B4", value: 30, color: "#47D7BC" },
    { label: "B5", value: 50, color: "#FFCD56" },
    { label: "C1", value: 100, color: "#95CFD5" },
    { label: "C2", value: 200, color: "#CCDA4E" },
    { label: "D1", value: 150, color: "#0A7EA4" },
    { label: "D2", value: 50, color: "#FB9678" },
  ];

  return (
    <ParentCard title="TwoLevel Chart" codeModel={<TwoLevelPieCode />}>
      <PieChart
        series={[
          {
            innerRadius: 0,
            outerRadius: 80,
            data: data1,
          },
          {
            innerRadius: 100,
            outerRadius: 120,
            data: data2,
          },
        ]}
        width={400}
        height={300}
        slotProps={{
          legend: { hidden: true },
        }}
      />
    </ParentCard>
  );
}

export default TwoLevelPieChart;

===== src/components/muicharts/piecharts/TwoSimplePieChart.tsx =====
'use client'

import { PieChart } from '@mui/x-charts/PieChart';
import ParentCard from 'src/components/shared/ParentCard';
import TwoSimplePieCode from '../code/piechartcode/TwoSimplePieCode';

const data1 = [
    { label: 'Group A', value: 400, color: "#5D87FF" },
    { label: 'Group B', value: 300, color: "#0074BA" },
    { label: 'Group C', value: 300, color: "#763EBD" },
    { label: 'Group D', value: 200, color: "#0A7EA4" },
    { label: 'Group E', value: 278, color: "#01C0C8" },
    { label: 'Group F', value: 189, color: "#FA896B" },
];

const data2 = [
    { label: 'Group A', value: 2400, color: "#01C0C8" },
    { label: 'Group B', value: 4567, color: "#0074BA" },
    { label: 'Group C', value: 1398, color: "#49BEFF" },
    { label: 'Group D', value: 9800, color: "#47D7BC" },
    { label: 'Group E', value: 3908, color: "#FFCD56" },
    { label: 'Group F', value: 4800, color: "#95CFD5" },
];

export default function TwoSimplePieChart() {
    return (
        <ParentCard title="TwoSimple Chart" codeModel={<TwoSimplePieCode />}>

            <PieChart
                series={[
                    {
                        outerRadius: 80,
                        data: data1,
                        cx: 100,
                        cy: 200,
                    },
                    {
                        data: data2,
                        cx: 300,
                        cy: 100,
                        innerRadius: 40,
                        outerRadius: 80,
                    },
                ]}
                height={300}
                slotProps={{
                    legend: { hidden: true },
                }}
            />
        </ParentCard>
    );
}


===== src/components/muicharts/scattercharts/BasicScatterChart.tsx =====
'use client'

import { ScatterChart } from '@mui/x-charts/ScatterChart';
import BasicScatterCode from '../code/scatterchartscode/BasicScatterCode'
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from "@mui/material";

const data = [
    {
        id: 'data-0',
        x1: 329.39,
        x2: 391.29,
        y1: 443.28,
        y2: 153.9,
    },
    {
        id: 'data-1',
        x1: 96.94,
        x2: 139.6,
        y1: 110.5,
        y2: 217.8,
    },
    {
        id: 'data-2',
        x1: 336.35,
        x2: 282.34,
        y1: 175.23,
        y2: 286.32,
    },
    {
        id: 'data-3',
        x1: 159.44,
        x2: 384.85,
        y1: 195.97,
        y2: 325.12,
    },
    {
        id: 'data-4',
        x1: 188.86,
        x2: 182.27,
        y1: 351.77,
        y2: 144.58,
    },
    {
        id: 'data-5',
        x1: 143.86,
        x2: 360.22,
        y1: 43.253,
        y2: 146.51,
    },
    {
        id: 'data-6',
        x1: 202.02,
        x2: 209.5,
        y1: 376.34,
        y2: 309.69,
    },
    {
        id: 'data-7',
        x1: 384.41,
        x2: 258.93,
        y1: 31.514,
        y2: 236.38,
    },
    {
        id: 'data-8',
        x1: 256.76,
        x2: 70.571,
        y1: 231.31,
        y2: 440.72,
    },
    {
        id: 'data-9',
        x1: 143.79,
        x2: 419.02,
        y1: 108.04,
        y2: 20.29,
    },
    {
        id: 'data-10',
        x1: 103.48,
        x2: 15.886,
        y1: 321.77,
        y2: 484.17,
    },
    {
        id: 'data-11',
        x1: 272.39,
        x2: 189.03,
        y1: 120.18,
        y2: 54.962,
    },
    {
        id: 'data-12',
        x1: 23.57,
        x2: 456.4,
        y1: 366.2,
        y2: 418.5,
    },
    {
        id: 'data-13',
        x1: 219.73,
        x2: 235.96,
        y1: 451.45,
        y2: 181.32,
    },
    {
        id: 'data-14',
        x1: 54.99,
        x2: 434.5,
        y1: 294.8,
        y2: 440.9,
    },
    {
        id: 'data-15',
        x1: 134.13,
        x2: 383.8,
        y1: 121.83,
        y2: 273.52,
    },
    {
        id: 'data-16',
        x1: 12.7,
        x2: 270.8,
        y1: 287.7,
        y2: 346.7,
    },
    {
        id: 'data-17',
        x1: 176.51,
        x2: 119.17,
        y1: 134.06,
        y2: 74.528,
    },
    {
        id: 'data-18',
        x1: 65.05,
        x2: 78.93,
        y1: 104.5,
        y2: 150.9,
    },
    {
        id: 'data-19',
        x1: 162.25,
        x2: 63.707,
        y1: 413.07,
        y2: 26.483,
    },
    {
        id: 'data-20',
        x1: 68.88,
        x2: 150.8,
        y1: 74.68,
        y2: 333.2,
    },
    {
        id: 'data-21',
        x1: 95.29,
        x2: 329.1,
        y1: 360.6,
        y2: 422.0,
    },
    {
        id: 'data-22',
        x1: 390.62,
        x2: 10.01,
        y1: 330.72,
        y2: 488.06,
    },
];

export default function BasicScatterChart() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
        <ParentCard title="Basic Chart" codeModel={<BasicScatterCode />}>

            <ScatterChart
                height={300}
                series={[
                    {
                        label: 'Series A',
                        data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })),
                        color: primary
                    },
                    {
                        label: 'Series B',
                        data: data.map((v) => ({ x: v.x1, y: v.y2, id: v.id })),
                        color: secondary
                    },
                ]}
            />
        </ParentCard>
    );
}
===== src/components/muicharts/scattercharts/ScatterClickNoSnapChart.tsx =====

'use client'
import * as React from 'react';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import UndoOutlinedIcon from '@mui/icons-material/UndoOutlined';
import { ScatterChart } from '@mui/x-charts/ScatterChart';

import { Light as SyntaxHighlighter } from "react-syntax-highlighter";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';
import ScatterClickNoSnapCode from '../code/scatterchartscode/ScatterClickNoSnapCode';


export default function ScatterClickNoSnapChart() {

    const theme = useTheme();
    const primaryColor = theme.palette.primary.main;
    const secondaryColor = theme.palette.secondary.main;

    const scatterChartsParams = {

        series: [
            {
                id: 'series-1',
                type: 'scatter',
                data: [
                    { x: 6.5e-2, y: -1.3, id: 0 },
                    { x: -2.1, y: -7.0e-1, id: 1 },
                    { x: -7.6e-1, y: -6.7e-1, id: 2 },
                    { x: -1.5e-2, y: -2.0e-1, id: 3 },
                    { x: -1.4, y: -9.9e-1, id: 4 },
                    { x: -1.1, y: -1.5, id: 5 },
                    { x: -7.0e-1, y: -2.7e-1, id: 6 },
                    { x: -5.1e-1, y: -8.8e-1, id: 7 },
                    { x: -4.0e-3, y: -1.4, id: 8 },
                    { x: -1.3, y: -2.2, id: 9 },
                ],
                label: 'A',
                highlightScope: {
                    highlight: 'item',
                },
                color: primaryColor,
            },
            {
                id: 'series-2',
                type: 'scatter',
                data: [
                    { x: 1.8, y: -1.7e-2, id: 0 },
                    { x: 7.1e-1, y: 2.6e-1, id: 1 },
                    { x: -1.2, y: 9.8e-1, id: 2 },
                    { x: 2.0, y: -2.0e-1, id: 3 },
                    { x: 9.4e-1, y: -2.7e-1, id: 4 },
                    { x: -4.8e-1, y: -1.6e-1, id: 5 },
                    { x: -1.5, y: 1.1, id: 6 },
                    { x: 1.3, y: 3.4e-1, id: 7 },
                    { x: -4.2e-1, y: 1.0e-1, id: 8 },
                    { x: 5.4e-2, y: 4.0e-1, id: 9 },
                ],
                label: 'B',
                highlightScope: {
                    highlight: 'item',

                },
                color: secondaryColor,
            },
        ] as any[],
        height: 400,
    };
    const [data, setData] = React.useState<any>();

    const { axis, item, ...other }: any = data ?? {};
    const dataDisplayed = data && {
        ...(item
            ? {
                item: {
                    dataIndex: item.dataIndex,
                    series: {
                        id: item.series.id,
                        toReplace: '',
                    },
                },
            }
            : undefined),
        ...(axis ? { axis } : undefined),
        ...other,
    };


    const formattedCode = dataDisplayed
        ? JSON.stringify(dataDisplayed, null, 1).replace(
            '"toReplace": ""',
            '// ... (entire series definition)' // Replace part of the code
        )
        : '// The data will appear here';


    return (
        <ParentCard title="ClickNoSnap Chart" codeModel={<ScatterClickNoSnapCode />}>

            <Stack
                direction={{ xs: 'column', md: 'row' }}
                spacing={{ xs: 0, md: 4 }}
                sx={{ width: '100%' }}
            >
                <Box sx={{ flexGrow: 1 }}>
                    <ScatterChart
                        series={scatterChartsParams.series}
                        height={scatterChartsParams.height}
                        onItemClick={(_event: any, d: any) => setData(d)}
                    />
                </Box>
                <Stack direction="column" sx={{ width: { xs: '100%', md: '40%' } }}>
                    <Box
                        sx={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                        }}
                    >
                        <Typography>Click on the chart</Typography>
                        <IconButton
                            aria-label="reset"
                            size="small"
                            onClick={() => {
                                setData(null);
                            }}
                        >
                            <UndoOutlinedIcon fontSize="small" />
                        </IconButton>
                    </Box>
                    <SyntaxHighlighter language="json" style={docco}>
                        {formattedCode}
                    </SyntaxHighlighter>

                </Stack>
            </Stack>
        </ParentCard>
    );
}

===== src/components/muicharts/scattercharts/ScatterDatasetChart.tsx =====
'use client'

import { ScatterChart } from '@mui/x-charts/ScatterChart';
import { axisClasses } from '@mui/x-charts/ChartsAxis';
import { useTheme } from "@mui/material";
import ParentCard from 'src/components/shared/ParentCard';
import ScatterDatasetCode from '../code/scatterchartscode/ScatterDatasetCode';

const dataset = [
    {
        version: 'data-0',
        a1: 329.39,
        a2: 391.29,
        b1: 443.28,
        b2: 153.9,
    },
    {
        version: 'data-1',
        a1: 96.94,
        a2: 139.6,
        b1: 110.5,
        b2: 217.8,
    },
    {
        version: 'data-2',
        a1: 336.35,
        a2: 282.34,
        b1: 175.23,
        b2: 286.32,
    },
    {
        version: 'data-3',
        a1: 159.44,
        a2: 384.85,
        b1: 195.97,
        b2: 325.12,
    },
    {
        version: 'data-4',
        a1: 188.86,
        a2: 182.27,
        b1: 351.77,
        b2: 144.58,
    },
    {
        version: 'data-5',
        a1: 143.86,
        a2: 360.22,
        b1: 43.253,
        b2: 146.51,
    },
    {
        version: 'data-6',
        a1: 202.02,
        a2: 209.5,
        b1: 376.34,
        b2: 309.69,
    },
    {
        version: 'data-7',
        a1: 384.41,
        a2: 258.93,
        b1: 31.514,
        b2: 236.38,
    },
    {
        version: 'data-8',
        a1: 256.76,
        a2: 70.571,
        b1: 231.31,
        b2: 440.72,
    },
    {
        version: 'data-9',
        a1: 143.79,
        a2: 419.02,
        b1: 108.04,
        b2: 20.29,
    },
];

const chartSetting = {

    sx: {
        [`.${axisClasses.left} .${axisClasses.label}`]: {
            transform: 'translate(-20px, 0)',
        },
    },

    height: 300,
};

export default function ScatterDataset() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;
    const secondary = theme.palette.secondary.main;
    return (
        <ParentCard title="Scatter Dataset" codeModel={<ScatterDatasetCode />}>
            <ScatterChart
                dataset={dataset}
                series={[
                    { datasetKeys: { id: 'version', x: 'a1', y: 'a2' }, label: 'Series A', color: primary },
                    { datasetKeys: { id: 'version', x: 'b1', y: 'b2' }, label: 'Series B', color: secondary },
                ]}
                {...chartSetting}
            />
        </ParentCard>
    );
}





===== src/components/muicharts/scattercharts/VoronoiInteractionChart.tsx =====
'use client'
import * as React from 'react';
import Stack from '@mui/material/Stack';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Typography from '@mui/material/Typography';
import Slider from '@mui/material/Slider';
import { ScatterChart } from '@mui/x-charts/ScatterChart';
import ParentCard from 'src/components/shared/ParentCard';
import VoronoiInteractionCode from '../code/scatterchartscode/VoronoiInteractionCode';
import { useTheme } from "@mui/material";

const data = [
  { x1: 529.39, y1: 643.28, x2: 191.29, y2: -46.1, id: 'data-0' },
  { x1: 296.94, y1: 310.5, x2: -60.4, y2: 17.8, id: 'data-1' },
  { x1: 536.35, y1: 375.23, x2: 82.34, y2: 86.32, id: 'data-2' },
  { x1: 359.44, y1: 395.97, x2: 184.85, y2: 125.12, id: 'data-3' },
  { x1: 388.86, y1: 551.77, x2: -17.73, y2: -55.42, id: 'data-4' },
  { x1: 343.86, y1: 243.25, x2: 160.22, y2: -53.49, id: 'data-5' },
  { x1: 402.02, y1: 576.34, x2: 9.5, y2: 109.69, id: 'data-6' },
  { x1: 584.41, y1: 231.51, x2: 58.93, y2: 36.38, id: 'data-7' },
  { x1: 456.76, y1: 431.31, x2: -129.43, y2: 240.72, id: 'data-8' },
  { x1: 343.79, y1: 308.04, x2: 219.02, y2: -179.71, id: 'data-9' },
  { x1: 303.48, y1: 521.77, x2: -184.11, y2: 284.17, id: 'data-10' },
  { x1: 472.39, y1: 320.18, x2: -10.97, y2: -145.04, id: 'data-11' },
  { x1: 223.57, y1: 566.2, x2: 256.4, y2: 218.5, id: 'data-12' },
  { x1: 419.73, y1: 651.45, x2: 35.96, y2: -18.68, id: 'data-13' },
  { x1: 254.99, y1: 494.8, x2: 234.5, y2: 240.9, id: 'data-14' },
  { x1: 334.13, y1: 321.83, x2: 183.8, y2: 73.52, id: 'data-15' },
  { x1: 212.7, y1: 487.7, x2: 70.8, y2: 146.7, id: 'data-16' },
  { x1: 376.51, y1: 334.06, x2: -80.83, y2: -125.47, id: 'data-17' },
  { x1: 265.05, y1: 304.5, x2: -121.07, y2: -49.1, id: 'data-18' },
  { x1: 362.25, y1: 613.07, x2: -136.29, y2: -173.52, id: 'data-19' },
  { x1: 268.88, y1: 274.68, x2: -49.2, y2: 133.2, id: 'data-20' },
  { x1: 295.29, y1: 560.6, x2: 129.1, y2: 222, id: 'data-21' },
  { x1: 590.62, y1: 530.72, x2: -189.99, y2: 288.06, id: 'data-22' },
];

export default function VoronoiInteractionChart() {
  const [voronoiMaxRadius, setVoronoiMaxRadius] = React.useState(25);
  const [disableVoronoi, setDisableVoronoi] = React.useState(false);
  const [undefinedRadius, setUndefinedRadius] = React.useState(true);

  const handleMaxRadiusChange = (_event: any, newValue: any) => {
    if (typeof newValue !== 'number') {
      return;
    }
    setVoronoiMaxRadius(newValue);
  };
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  return (
    <ParentCard title="VoronoiInteraction Chart" codeModel={<VoronoiInteractionCode />}>

      <Stack direction="column" sx={{ width: '100%' }}>
        <ScatterChart
          height={300}
          disableVoronoi={disableVoronoi}
          voronoiMaxRadius={undefinedRadius ? undefined : voronoiMaxRadius}
          dataset={data}
          series={[
            {
              label: 'Series A',
              data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })),
              color: primary
            },
            {
              label: 'Series B',
              data: data.map((v) => ({ x: v.x2, y: v.y2, id: v.id })),
              color: secondary
            },
          ]}
        />
        <div>
          <Typography id="max-radius-value" gutterBottom>
            max radius
          </Typography>
          <Slider
            value={voronoiMaxRadius}
            onChange={handleMaxRadiusChange}
            valueLabelDisplay="auto"
            min={1}
            max={100}
            aria-labelledby="max-radius-value"
            disabled={disableVoronoi || undefinedRadius}
          />
        </div>
        <Stack direction="row">
          <FormControlLabel
            checked={disableVoronoi}
            control={
              <Checkbox
                onChange={(event) => setDisableVoronoi(event.target.checked)}
              />
            }
            label="disableVoronoi"
            labelPlacement="end"
          />
          <FormControlLabel
            checked={undefinedRadius}
            control={
              <Checkbox
                onChange={(event) => setUndefinedRadius(event.target.checked)}
              />
            }
            label="undefined radius"
            labelPlacement="end"
          />
        </Stack>
      </Stack>
    </ParentCard>
  );
}
===== src/components/muicharts/sparklinecharts/AreaSparkLineChart.tsx =====
'use client'

import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import AreaSparkLineCode from '../code/sparklinecode/AreaSparkLineCode';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';

export default function AreaSparkLineChart() {
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  return (



    <ParentCard title="AreaSparkLine Chart" codeModel={<AreaSparkLineCode />}>

      <Stack direction="row" sx={{ width: '100%' }}>
        <Box sx={{ flexGrow: 1 }}>
          <SparkLineChart data={[3, -10, -2, 5, 7, -2, 4, 6]} height={100} area colors={[primary]} />
        </Box>
        <Box sx={{ flexGrow: 1 }}>
          <SparkLineChart
            data={[3, -10, -2, 5, 7, -2, 4, 6]}
            height={100}
            curve="natural"
            colors={[primary]}
            area
          />
        </Box>
      </Stack>
    </ParentCard>
  );
}
===== src/components/muicharts/sparklinecharts/BasicSparkLine.tsx =====
'use client'

import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import BasicSparkLineCode from '../code/sparklinecode/BasicSparkLineCode';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';



function BasicSparkLine() {
    const theme = useTheme();
    const primary = theme.palette.primary.main;


    return (
        <ParentCard title="Basic Chart" codeModel={<BasicSparkLineCode />}>

            <Stack direction="row" sx={{ width: '100%' }}>
                <Box sx={{ flexGrow: 1 }}>
                    <SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} height={100} colors={[primary]} />
                </Box>
                <Box sx={{ flexGrow: 1 }}>
                    <SparkLineChart
                        plotType="bar"
                        data={[1, 4, 2, 5, 7, 2, 4, 6]}
                        height={100}
                        colors={[primary]}
                    />
                </Box>
            </Stack>
        </ParentCard>
    )
}

export default BasicSparkLine
===== src/components/muicharts/sparklinecharts/BasicSparkLineCustomizationChart.tsx =====

'use client'
import * as React from 'react';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import FormControlLabel from '@mui/material/FormControlLabel';
import Switch from '@mui/material/Switch';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import ParentCard from 'src/components/shared/ParentCard';
import { useTheme } from '@mui/material';
import BasicSparkLineCustomizationCode from '../code/sparklinecode/BasicSparkLineCustomizationCode';

export default function BasicSparkLineCustomizationChart() {
    const [showHighlight, setShowHighlight] = React.useState(true);
    const [showTooltip, setShowTooltip] = React.useState(true);

    const theme = useTheme();
    const primary = theme.palette.primary.main;

    const handleHighlightChange = (event: { target: { checked: boolean | ((prevState: boolean) => boolean); }; }) => {
        setShowHighlight(event.target.checked);
    };

    const handleTooltipChange = (event: { target: { checked: boolean | ((prevState: boolean) => boolean); }; }) => {
        setShowTooltip(event.target.checked);
    };

    return (
        <ParentCard title=" Customization Chart" codeModel={<BasicSparkLineCustomizationCode />}>

            <Stack direction="column" sx={{ width: '100%' }}>
                <Stack direction="row">
                    <FormControlLabel
                        value="end"
                        control={
                            <Switch
                                color="primary"
                                checked={showHighlight}
                                onChange={handleHighlightChange}

                            />
                        }
                        label="showHighlight"
                        labelPlacement="end"
                    />
                    <FormControlLabel
                        value="end"
                        control={
                            <Switch
                                color="primary"
                                checked={showTooltip}
                                onChange={handleTooltipChange}
                            />
                        }
                        label="showTooltip"
                        labelPlacement="end"
                    />
                </Stack>
                <Stack direction="row" sx={{ width: '100%' }}>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart
                            data={[1, 4, 2, 5, 7, 2, 4, 6]}
                            height={100}
                            showHighlight={showHighlight}
                            showTooltip={showTooltip}
                            colors={[primary]}
                        />
                    </Box>
                    <Box sx={{ flexGrow: 1 }}>
                        <SparkLineChart
                            plotType="bar"
                            data={[1, 4, 2, 5, 7, 2, 4, 6]}
                            height={100}
                            showHighlight={showHighlight}
                            showTooltip={showTooltip}
                            colors={[primary]}
                        />
                    </Box>
                </Stack>
            </Stack>
        </ParentCard>
    );
}
===== src/components/muitrees/code/simpletreecode/ApiMethodFocusItemCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function ApiMethodFocusItemCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';
import { useTreeViewApiRef } from '@mui/x-tree-view/hooks/useTreeViewApiRef';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ApiMethodFocusItem ',
},
];
 
export default function ApiMethodFocusItem() {
    const apiRef = useTreeViewApiRef();
    const handleButtonClick = (event: React.SyntheticEvent<Element, Event>) => {
        apiRef.current?.focusItem(event, 'pickers');
    };

    return (
     
            <Stack spacing={2}>
                <div>
                    <Button onClick={handleButtonClick}>Focus pickers item</Button>
                </div>
                <Box sx={{ minHeight: 352, minWidth: 250 }}>
                    <SimpleTreeView apiRef={apiRef}>
                        <TreeItem itemId="grid" label="Data Grid">
                            <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                            <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                            <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                        </TreeItem>
                        <TreeItem itemId="pickers" label="Date and Time Pickers">
                            <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                            <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                        </TreeItem>
                        <TreeItem itemId="charts" label="Charts">
                            <TreeItem itemId="charts-community" label="@mui/x-charts" />
                        </TreeItem>
                        <TreeItem itemId="tree-view" label="Tree View">
                            <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                        </TreeItem>
                    </SimpleTreeView>
                </Box>
            </Stack>
 
    );
}

            `}
        </CodeDialog>
    )
}

export default ApiMethodFocusItemCode

===== src/components/muitrees/code/simpletreecode/ApiMethodSetItemExpansionCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function ApiMethodSetItemExpansionCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';
import { useTreeViewApiRef } from '@mui/x-tree-view/hooks';
            
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ApiMethodSetItemExpansion ',
},
]; 

export default function ApiMethodSetItemExpansion() {
    const apiRef = useTreeViewApiRef();

     const handleExpandClick = (event: React.SyntheticEvent<Element, Event>) => {
        if (apiRef.current) {
            apiRef.current.setItemExpansion(event, 'grid', true);
        }
    };

    const handleCollapseClick = (event: React.SyntheticEvent<Element, Event>) => {
        if (apiRef.current) {
            apiRef.current.setItemExpansion(event, 'grid', false);
        }
    };

    return (
            <Stack spacing={2}>
                <Stack spacing={2} direction="row">
                    <Button onClick={handleExpandClick}>Expand Data Grid</Button>
                    <Button onClick={handleCollapseClick}>Collapse Data Grid</Button>
                </Stack>
                <Box sx={{ minHeight: 352, minWidth: 250 }}>
                    <SimpleTreeView apiRef={apiRef}>
                        <TreeItem itemId="grid" label="Data Grid">
                            <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                            <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                            <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                        </TreeItem>
                        <TreeItem itemId="pickers" label="Date and Time Pickers">
                            <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                            <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                        </TreeItem>
                        <TreeItem itemId="charts" label="Charts">
                            <TreeItem itemId="charts-community" label="@mui/x-charts" />
                        </TreeItem>
                        <TreeItem itemId="tree-view" label="Tree View">
                            <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                        </TreeItem>
                    </SimpleTreeView>
                </Box>
            </Stack>
 
    );
}


`}
        </CodeDialog>
    )
}

export default ApiMethodSetItemExpansionCode

===== src/components/muitrees/code/simpletreecode/BasicCustomIconsCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function BasicCustomIconsCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import AddBoxIcon from '@mui/icons-material/AddBox';
import IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox';
import SvgIcon, { SvgIconOwnProps } from '@mui/material/SvgIcon';
import { styled } from '@mui/material/styles';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem, treeItemClasses } from '@mui/x-tree-view/TreeItem';
 const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicCustomIcons ',
},
]; 


const CustomTreeItem = styled(TreeItem)({
    [\`\& .\${treeItemClasses.iconContainer}\`]: {
                '& .close': {
                opacity: 0.3,
        },
    },
});

            function CloseSquare(props: React.JSX.IntrinsicAttributes & { component: React.ElementType<any, keyof React.JSX.IntrinsicElements>; } & SvgIconOwnProps & CommonProps & Omit<any, "children" | "style" | "className" | "classes" | "color" | "fontSize" | "shapeRendering" | "sx" | "viewBox" | "htmlColor" | "inheritViewBox" | "titleAccess">) {
    return (
            <SvgIcon
                className="close"
                fontSize="inherit"
                style={{ width: 14, height: 14 }}
                {...props}
            >
                {/* tslint:disable-next-line: max-line-length */}
                <path d="M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z" />
            </SvgIcon>
            );
}

            export default function BasicCustomIcons() {
    return (

            <Box sx={{ minHeight: 352, minWidth: 250 }}>
                <SimpleTreeView
                    defaultExpandedItems={['grid']}
                    slots={{
                        expandIcon: AddBoxIcon,
                        collapseIcon: IndeterminateCheckBoxIcon,
                        endIcon: CloseSquare,
                    }}
                >
                    <CustomTreeItem itemId="grid" label="Data Grid">
                        <CustomTreeItem itemId="grid-community" label="@mui/x-data-grid" />
                        <CustomTreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                        <CustomTreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                    </CustomTreeItem>
                    <CustomTreeItem itemId="pickers" label="Date and Time Pickers">
                        <CustomTreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                        <CustomTreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                    </CustomTreeItem>
                    <CustomTreeItem itemId="charts" label="Charts">
                        <CustomTreeItem itemId="charts-community" label="@mui/x-charts" />
                    </CustomTreeItem>
                    <CustomTreeItem itemId="tree-view" label="Tree View">
                        <CustomTreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                    </CustomTreeItem>
                </SimpleTreeView>
            </Box>

            );
}


            `}
        </CodeDialog>
    )
}

export default BasicCustomIconsCode

===== src/components/muitrees/code/simpletreecode/BasicSimpleTreeViewCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function BasicSimpleTreeViewCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';
const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'BasicSimpleTreeView ',
},
]; 


export default function BasicSimpleTreeView() {
    return (

        <Box sx={{ minHeight: 352, minWidth: 250 }}>
                <SimpleTreeView>
                    <TreeItem itemId="grid" label="Data Grid">
                        <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                        <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                        <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                    </TreeItem>
                    <TreeItem itemId="pickers" label="Date and Time Pickers">
                        <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                        <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                    </TreeItem>
                    <TreeItem itemId="charts" label="Charts">
                        <TreeItem itemId="charts-community" label="@mui/x-charts" />
                    </TreeItem>
                    <TreeItem itemId="tree-view" label="Tree View">
                        <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                    </TreeItem>
                </SimpleTreeView>
       
        </Box>

    );
}

            `}
        </CodeDialog>
    )
}

export default BasicSimpleTreeViewCode

===== src/components/muitrees/code/simpletreecode/CheckboxSelectionCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function CheckboxSelectionCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'CheckboxSelection ',
},
]; 

export default function CheckboxSelection() {
    return (
            <Box sx={{ minHeight: 352, minWidth: 290 }}>
                <SimpleTreeView checkboxSelection>
                    <TreeItem itemId="grid" label="Data Grid">
                        <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                        <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                        <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                    </TreeItem>
                    <TreeItem itemId="pickers" label="Date and Time Pickers">
                        <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                        <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                    </TreeItem>
                    <TreeItem itemId="charts" label="Charts">
                        <TreeItem itemId="charts-community" label="@mui/x-charts" />
                    </TreeItem>
                    <TreeItem itemId="tree-view" label="Tree View">
                        <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                    </TreeItem>
                </SimpleTreeView>
            </Box>
    );
}


                `}
        </CodeDialog>
    )
}

export default CheckboxSelectionCode

===== src/components/muitrees/code/simpletreecode/ControlledExpansionTreeCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function ControlledExpansionTreeCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ControlledExpansionTree ',
},
]; 


function ControlledExpansionTree() {
    const [expandedItems, setExpandedItems] = React.useState<any>([]);

    const handleExpandedItemsChange = (event: any, itemIds: any) => {
        setExpandedItems(itemIds);
    };

    const handleExpandClick = () => {
        setExpandedItems((oldExpanded: string | any[]) =>
            oldExpanded.length === 0
                ? [
                    'grid',
                    'grid-community',
                    'grid-pro',
                    'grid-premium',
                    'pickers',
                    'pickers-community',
                    'pickers-pro',
                    'charts',
                    'charts-community',
                    'tree-view',
                    'tree-view-community',
                ]
                : [],
        );
    };
    return (
            <Stack spacing={2}>
                <div>
                    <Button onClick={handleExpandClick}>
                        {expandedItems.length === 0 ? 'Expand all' : 'Collapse all'}
                    </Button>
                </div>
                <Box sx={{ minHeight: 352, minWidth: 250 }}>
                    <SimpleTreeView
                        expandedItems={expandedItems}
                        onExpandedItemsChange={handleExpandedItemsChange}
                    >
                        <TreeItem itemId="grid" label="Data Grid">
                            <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                            <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                            <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                        </TreeItem>
                        <TreeItem itemId="pickers" label="Date and Time Pickers">
                            <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                            <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                        </TreeItem>
                        <TreeItem itemId="charts" label="Charts">
                            <TreeItem itemId="charts-community" label="@mui/x-charts" />
                        </TreeItem>
                        <TreeItem itemId="tree-view" label="Tree View">
                            <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                        </TreeItem>
                    </SimpleTreeView>
                </Box>
            </Stack>
     
    )
}

export default ControlledExpansionTree
              `}
        </CodeDialog>
    )
}

export default ControlledExpansionTreeCode

===== src/components/muitrees/code/simpletreecode/ControlledSelectionCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function ControlledSelectionCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';
import Button from '@mui/material/Button';

 const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'ControlledSelectiontree ',
},
]; 


function ControlledSelectiontree() {
    const [selectedItems, setSelectedItems] = React.useState<any>([]);

    const handleSelectedItemsChange = (event: any, ids: any) => {
        setSelectedItems(ids);
    };

    const handleSelectClick = () => {
        setSelectedItems((oldSelected: string | any[]) =>
            oldSelected.length === 0
                ? [
                    'grid',
                    'grid-community',
                    'grid-pro',
                    'grid-premium',
                    'pickers',
                    'pickers-community',
                    'pickers-pro',
                    'charts',
                    'charts-community',
                    'tree-view',
                    'tree-view-community',
                ]
                : [],
        );
    };

    return (
       

            <Stack spacing={2}>
                <div>
                    <Button onClick={handleSelectClick}>
                        {selectedItems.length === 0 ? 'Select all' : 'Unselect all'}
                    </Button>
                </div>
                <Box sx={{ minHeight: 352, minWidth: 250 }}>
                    <SimpleTreeView
                        selectedItems={selectedItems}
                        onSelectedItemsChange={handleSelectedItemsChange}
                        multiSelect
                    >
                        <TreeItem itemId="grid" label="Data Grid">
                            <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                            <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                            <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                        </TreeItem>
                        <TreeItem itemId="pickers" label="Date and Time Pickers">
                            <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                            <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                        </TreeItem>
                        <TreeItem itemId="charts" label="Charts">
                            <TreeItem itemId="charts-community" label="@mui/x-charts" />
                        </TreeItem>
                        <TreeItem itemId="tree-view" label="Tree View">
                            <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                        </TreeItem>
                    </SimpleTreeView>
                </Box>
            </Stack>
   
    )
}

export default ControlledSelectiontree
            
            `}
        </CodeDialog>
    )
}

export default ControlledSelectionCode

===== src/components/muitrees/code/simpletreecode/CustomTreeItemCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function CustomTreeItemCode() {
  return (
    <CodeDialog>
      {`
import * as React from 'react';
import { styled } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Avatar from '@mui/material/Avatar';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { useTreeItem2, UseTreeItem2Parameters } from '@mui/x-tree-view/useTreeItem2';
import {
  TreeItem2Content,
  TreeItem2IconContainer,
  TreeItem2GroupTransition,
  TreeItem2Label,
  TreeItem2Root,
  TreeItem2Checkbox,
} from '@mui/x-tree-view/TreeItem2';
import { TreeItem2Icon } from '@mui/x-tree-view/TreeItem2Icon';
import { TreeItem2Provider } from '@mui/x-tree-view/TreeItem2Provider';
            
 const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'CustomTreeItemView ',
},
]; 


const CustomTreeItemContent = styled(TreeItem2Content)(({ theme }) => ({
    padding: theme.spacing(0.5, 1),
  }));
  
  
  
  const CustomTreeItem = React.forwardRef(function CustomTreeItem(props: any, ref) {
  const { id, itemId, label, disabled, children, ...other } = props;
  
    const {
      getRootProps,
      getContentProps,
      getIconContainerProps,
      getCheckboxProps,
      getLabelProps,
      getGroupTransitionProps,
      status,
    } = useTreeItem2({ id, itemId, children, label, disabled, rootRef: ref });
  
    return (
      <TreeItem2Provider itemId={itemId}>
        <TreeItem2Root {...getRootProps(other)}>
          <CustomTreeItemContent {...getContentProps()}>
            <TreeItem2IconContainer {...getIconContainerProps()}>
              <TreeItem2Icon status={status} />
            </TreeItem2IconContainer>
            <TreeItem2Checkbox {...getCheckboxProps()} />
            <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>
              <Avatar
                sx={(theme) => ({
                  background: theme.palette.primary.main,
                  width: 24,
                  height: 24,
                  fontSize: '0.8rem',
                })}
              >
                {(label )[0]}
              </Avatar>
              <TreeItem2Label {...getLabelProps()} />
            </Box>
          </CustomTreeItemContent>
          {children && <TreeItem2GroupTransition {...getGroupTransitionProps()} />}
        </TreeItem2Root>
      </TreeItem2Provider>
    );
  });
  
  export default function CustomTreeItemView() {
    return (
    
  
        <Box sx={{ minHeight: 200, minWidth: 250 }}>
          <SimpleTreeView defaultExpandedItems={['3']}>
            <CustomTreeItem itemId="1" label="Amelia Hart">
              <CustomTreeItem itemId="2" label="Jane Fisher" />
            </CustomTreeItem>
            <CustomTreeItem itemId="3" label="Bailey Monroe">
              <CustomTreeItem itemId="4" label="Freddie Reed" />
              <CustomTreeItem itemId="5" label="Georgia Johnson">
                <CustomTreeItem itemId="6" label="Samantha Malone" />
              </CustomTreeItem>
            </CustomTreeItem>
          </SimpleTreeView>
        </Box>
   
    );
  }
                 `}
    </CodeDialog>
  )
}

export default CustomTreeItemCode

===== src/components/muitrees/code/simpletreecode/MultiSelectTreeViewCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function MultiSelectTreeViewCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';

 const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'MultiSelectTreeView ',
},
]; 

function MultiSelectTreeView() {
    return (
       
            <Box sx={{ minHeight: 352, minWidth: 250 }}>
                <SimpleTreeView multiSelect>
                    <TreeItem itemId="grid" label="Data Grid">
                        <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                        <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                        <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                    </TreeItem>
                    <TreeItem itemId="pickers" label="Date and Time Pickers">
                        <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                        <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                    </TreeItem>
                    <TreeItem itemId="charts" label="Charts">
                        <TreeItem itemId="charts-community" label="@mui/x-charts" />
                    </TreeItem>
                    <TreeItem itemId="tree-view" label="Tree View">
                        <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                    </TreeItem>
                </SimpleTreeView>
            </Box>
     
    )
}

export default MultiSelectTreeView

              `}
        </CodeDialog>
    )
}

export default MultiSelectTreeViewCode

===== src/components/muitrees/code/simpletreecode/TrackitemclicksTreeCode.tsx =====

import CodeDialog from "src/components/shared/CodeDialog";


function TrackitemclicksTreeCode() {
    return (
        <CodeDialog>
            {`
import * as React from 'react';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';

const BCrumb = [
{
to: '/',
title: 'Home',
},
{
title: 'TrackitemclicksTree ',
},
]; 

function TrackitemclicksTree() {
    const [lastClickedItem, setLastClickedItem] = React.useState<any>(null);
    return (
       
            <Stack spacing={2}>
                <Typography>
                    {lastClickedItem == null
                        ? 'No item click recorded'
                        : \`Last clicked item: \${lastClickedItem}\`}
                </Typography>
                <Box sx={{ minHeight: 352, minWidth: 300 }}>
                    <SimpleTreeView onItemClick={(event, itemId) => setLastClickedItem(itemId)}>
                        <TreeItem itemId="grid" label="Data Grid">
                            <TreeItem itemId="grid-community" label="@mui/x-data-grid" />
                            <TreeItem itemId="grid-pro" label="@mui/x-data-grid-pro" />
                            <TreeItem itemId="grid-premium" label="@mui/x-data-grid-premium" />
                        </TreeItem>
                        <TreeItem itemId="pickers" label="Date and Time Pickers">
                            <TreeItem itemId="pickers-community" label="@mui/x-date-pickers" />
                            <TreeItem itemId="pickers-pro" label="@mui/x-date-pickers-pro" />
                        </TreeItem>
                        <TreeItem itemId="charts" label="Charts">
                            <TreeItem itemId="charts-community" label="@mui/x-charts" />
                        </TreeItem>
                        <TreeItem itemId="tree-view" label="Tree View">
                            <TreeItem itemId="tree-view-community" label="@mui/x-tree-view" />
                        </TreeItem>
                    </SimpleTreeView>
                </Box>
            </Stack >
     
    );
}

export default TrackitemclicksTree
    `}
        </CodeDialog>
    )
}

export default TrackitemclicksTreeCode

===== src/components/pages/account-setting/AccountTab.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Grid2 as Grid, Typography, MenuItem, Box, Avatar, Button, Stack } from '@mui/material';

// components
import BlankCard from '../../shared/BlankCard';
import CustomTextField from '../../forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../forms/theme-elements/CustomFormLabel';
import CustomSelect from '../../forms/theme-elements/CustomSelect';

// images
import user1 from 'src/assets/images/profile/user-1.jpg';

interface locationType {
  value: string;
  label: string;
}

// locations
const locations: locationType[] = [
  {
    value: 'us',
    label: 'United States',
  },
  {
    value: 'uk',
    label: 'United Kingdom',
  },
  {
    value: 'india',
    label: 'India',
  },
  {
    value: 'russia',
    label: 'Russia',
  },
];

// currency
const currencies: locationType[] = [
  {
    value: 'us',
    label: 'US Dollar ($)',
  },
  {
    value: 'uk',
    label: 'United Kingdom (Pound)',
  },
  {
    value: 'india',
    label: 'India (INR)',
  },
  {
    value: 'russia',
    label: 'Russia (Ruble)',
  },
];

const AccountTab = () => {
  const [location, setLocation] = React.useState('india');

  const handleChange1 = (event: React.ChangeEvent<HTMLInputElement>) => {
    setLocation(event.target.value);
  };

  //   currency
  const [currency, setCurrency] = React.useState('india');

  const handleChange2 = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCurrency(event.target.value);
  };

  return (
    (<Grid container spacing={3}>
      {/* Change Profile */}
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h5" mb={1}>
              Change Profile
            </Typography>
            <Typography color="textSecondary" mb={3}>Change your profile picture from here</Typography>
            <Box textAlign="center" display="flex" justifyContent="center">
              <Box>
                <Avatar
                  src={user1}
                  alt={user1}
                  sx={{ width: 120, height: 120, margin: '0 auto' }}
                />
                <Stack direction="row" justifyContent="center" spacing={2} my={3}>
                  <Button variant="contained" color="primary" component="label">
                    Upload
                    <input hidden accept="image/*" multiple type="file" />
                  </Button>
                  <Button variant="outlined" color="error">
                    Reset
                  </Button>
                </Stack>
                <Typography variant="subtitle1" color="textSecondary" mb={4}>
                  Allowed JPG, GIF or PNG. Max size of 800K
                </Typography>
              </Box>
            </Box>
          </CardContent>
        </BlankCard>
      </Grid>
      {/*  Change Password */}
      <Grid
        size={{
          xs: 12,
          lg: 6
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h5" mb={1}>
              Change Password
            </Typography>
            <Typography color="textSecondary" mb={3}>To change your password please confirm here</Typography>
            <form>
              <CustomFormLabel
                sx={{
                  mt: 0,
                }}
                htmlFor="text-cpwd"
              >
                Current Password
              </CustomFormLabel>
              <CustomTextField
                id="text-cpwd"
                value="MathewAnderson"
                variant="outlined"
                fullWidth
                type="password"
              />
              {/* 2 */}
              <CustomFormLabel htmlFor="text-npwd">New Password</CustomFormLabel>
              <CustomTextField
                id="text-npwd"
                value="MathewAnderson"
                variant="outlined"
                fullWidth
                type="password"
              />
              {/* 3 */}
              <CustomFormLabel htmlFor="text-conpwd">Confirm Password</CustomFormLabel>
              <CustomTextField
                id="text-conpwd"
                value="MathewAnderson"
                variant="outlined"
                fullWidth
                type="password"
              />
            </form>
          </CardContent>
        </BlankCard>
      </Grid>
      {/* Edit Details */}
      <Grid size={12}>
        <BlankCard>
          <CardContent>
            <Typography variant="h5" mb={1}>
              Personal Details
            </Typography>
            <Typography color="textSecondary" mb={3}>To change your personal detail , edit and save from here</Typography>
            <form>
              <Grid container spacing={3}>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-name"
                  >
                    Your Name
                  </CustomFormLabel>
                  <CustomTextField
                    id="text-name"
                    value="Mathew Anderson"
                    variant="outlined"
                    fullWidth
                  />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  {/* 2 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-store-name"
                  >
                    Store Name
                  </CustomFormLabel>
                  <CustomTextField
                    id="text-store-name"
                    value="Maxima Studio"
                    variant="outlined"
                    fullWidth
                  />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  {/* 3 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-location"
                  >
                    Location
                  </CustomFormLabel>
                  <CustomSelect
                    fullWidth
                    id="text-location"
                    variant="outlined"
                    value={location}
                    onChange={handleChange1}
                  >
                    {locations.map((option) => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.label}
                      </MenuItem>
                    ))}
                  </CustomSelect>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  {/* 4 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-currency"
                  >
                    Currency
                  </CustomFormLabel>
                  <CustomSelect
                    fullWidth
                    id="text-currency"
                    variant="outlined"
                    value={currency}
                    onChange={handleChange2}
                  >
                    {currencies.map((option) => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.label}
                      </MenuItem>
                    ))}
                  </CustomSelect>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  {/* 5 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-email"
                  >
                    Email
                  </CustomFormLabel>
                  <CustomTextField
                    id="text-email"
                    value="info@modernize.com"
                    variant="outlined"
                    fullWidth
                  />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 6
                  }}>
                  {/* 6 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-phone"
                  >
                    Phone
                  </CustomFormLabel>
                  <CustomTextField
                    id="text-phone"
                    value="+91 12345 65478"
                    variant="outlined"
                    fullWidth
                  />
                </Grid>
                <Grid size={12}>
                  {/* 7 */}
                  <CustomFormLabel
                    sx={{
                      mt: 0,
                    }}
                    htmlFor="text-address"
                  >
                    Address
                  </CustomFormLabel>
                  <CustomTextField
                    id="text-address"
                    value="814 Howard Street, 120065, India"
                    variant="outlined"
                    fullWidth
                  />
                </Grid>
              </Grid>
            </form>
          </CardContent>
        </BlankCard>
        <Stack direction="row" spacing={2} sx={{ justifyContent: 'end' }} mt={3}>
          <Button size="large" variant="contained" color="primary">
            Save
          </Button>
          <Button size="large" variant="text" color="error">
            Cancel
          </Button>
        </Stack>
      </Grid>
    </Grid>)
  );
};

export default AccountTab;

===== src/components/pages/account-setting/BillsTab.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Avatar,
  Box,
  CardContent,
  Grid2 as Grid,
  IconButton,
  Typography,
  Tooltip,
  Button,
  Stack
} from '@mui/material';

// components
import BlankCard from '../../shared/BlankCard';
import CustomTextField from '../../forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../forms/theme-elements/CustomFormLabel';
import { IconCirclePlus, IconCreditCard, IconPackage, IconPencilMinus } from '@tabler/icons-react';

const BillsTab = () => {
  return (<>
    <Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Billing Information
            </Typography>

            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-bname">
                  Business Name*
                </CustomFormLabel>
                <CustomTextField
                  id="text-bname"
                  value="Visitor Analytics"
                  variant="outlined"
                  fullWidth
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-bsector">
                  Business Sector*
                </CustomFormLabel>
                <CustomTextField
                  id="text-bsector"
                  value="Arts, Media & Entertainment"
                  variant="outlined"
                  fullWidth
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-baddress">
                  Business Address*
                </CustomFormLabel>
                <CustomTextField id="text-baddress" value="" variant="outlined" fullWidth />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-bcy">
                  Country*
                </CustomFormLabel>
                <CustomTextField id="text-bcy" value="Romania" variant="outlined" fullWidth />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-fname">
                  First Name*
                </CustomFormLabel>
                <CustomTextField id="text-fname" value="" variant="outlined" fullWidth />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <CustomFormLabel sx={{ mt: 0 }} htmlFor="text-lname">
                  Last Name*
                </CustomFormLabel>
                <CustomTextField id="text-lname" value="" variant="outlined" fullWidth />
              </Grid>
            </Grid>
          </CardContent>
        </BlankCard>
      </Grid>

      {/* 2 */}
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" display="flex" mb={2}>
              Current Plan :
              <Typography variant="h4" component="div" ml="2px" color="success.main">
                Executive
              </Typography>
            </Typography>
            <Typography color="textSecondary">
              Thanks for being a premium member and supporting our development.
            </Typography>

            {/* list 1 */}
            <Stack direction="row" spacing={2} mt={4} mb={2}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconPackage size="22" />
              </Avatar>
              <Box>
                <Typography variant="subtitle1" color="textSecondary">
                  Current Plan
                </Typography>
                <Typography variant="h6" mb={1}>
                  750.000 Monthly Visits
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Tooltip title="Add">
                  <IconButton>
                    <IconCirclePlus size="22" />
                  </IconButton>
                </Tooltip>
              </Box>
            </Stack>

            <Stack direction="row" spacing={2}>
              <Button variant="contained" color="primary">
                Change Plan
              </Button>
              <Button variant="outlined" color="error">
                Reset Plan
              </Button>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>

      {/* 3 */}
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Payment Method
            </Typography>
            <Typography color="textSecondary">On 26 December, 2023</Typography>
            {/* list 1 */}
            <Stack direction="row" spacing={2} mt={4}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconCreditCard size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Visa
                </Typography>
                <Typography variant="subtitle1" fontWeight={600}>
                  *****2102
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Tooltip title="Edit">
                  <IconButton>
                    <IconPencilMinus size="22" />
                  </IconButton>
                </Tooltip>
              </Box>
            </Stack>
            <Typography color="textSecondary" my={1}>
              If you updated your payment method, it will only be dislpayed here after your next
              billing cycle.
            </Typography>
            <Button variant="outlined" color="error">
              Cancel Subscription
            </Button>
          </CardContent>
        </BlankCard>
      </Grid>
    </Grid>
    <Stack direction="row" spacing={2} sx={{ justifyContent: 'end' }} mt={3}>
      <Button size="large" variant="contained" color="primary">
        Save
      </Button>
      <Button size="large" variant="text" color="error">
        Cancel
      </Button>
    </Stack>
  </>);
};

export default BillsTab;

===== src/components/pages/account-setting/NotificationTab.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Avatar, Box, CardContent, Grid2 as Grid, IconButton, Typography, Tooltip, Button, Stack } from '@mui/material';

// components
import BlankCard from '../../shared/BlankCard';
import CustomTextField from '../../forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../forms/theme-elements/CustomFormLabel';
import CustomSwitch from '../../forms/theme-elements/CustomSwitch';
import {
  IconArticle,
  IconCheckbox,
  IconClock,
  IconDownload,
  IconMail,
  IconPlayerPause,
  IconTruckDelivery,
} from '@tabler/icons-react';

const NotificationTab = () => {
  return (<>
    <Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Notification Preferences
            </Typography>
            <Typography color="textSecondary">
              Select the notificaitons ou would like to receive via email. Please note that you
              cannot opt out of receving service messages, such as payment, security or legal
              notifications.
            </Typography>

            <CustomFormLabel htmlFor="text-email">Email Address*</CustomFormLabel>
            <CustomTextField id="text-email" variant="outlined" fullWidth />
            <Typography color="textSecondary">Required for notificaitons.</Typography>

            {/* list 1 */}
            <Stack direction="row" spacing={2} mt={4}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconArticle size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Our newsletter
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  We'll always let you know about important changes
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch />
              </Box>
            </Stack>

            {/* list 2 */}
            <Stack direction="row" spacing={2} mt={3}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconCheckbox size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Order Confirmation
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  You will be notified when customer order any product
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch checked />
              </Box>
            </Stack>

            {/* list 3 */}
            <Stack direction="row" spacing={2} mt={3}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconClock size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Order Status Changed
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  You will be notified when customer make changes to the order
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch checked />
              </Box>
            </Stack>

            {/* list 4 */}
            <Stack direction="row" spacing={2} mt={3}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconTruckDelivery size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Order Delivered
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  You will be notified once the order is delivered
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch />
              </Box>
            </Stack>

            {/* list 5 */}
            <Stack direction="row" spacing={2} mt={3}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconMail size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Email Notification
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  Turn on email notificaiton to get updates through email
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch checked />
              </Box>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>

      {/* 2 */}
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Date & Time
            </Typography>
            <Typography color="textSecondary">
              Time zones and calendar display settings.
            </Typography>

            {/* list 1 */}
            <Stack direction="row" spacing={2} mt={4}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconClock size="22" />
              </Avatar>
              <Box>
                <Typography variant="subtitle1" color="textSecondary">
                  Time zone
                </Typography>
                <Typography variant="h6" mb={1}>
                  (UTC + 02:00) Athens, Bucharet
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Tooltip title="Download">
                  <IconButton>
                    <IconDownload size="22" />
                  </IconButton>
                </Tooltip>
              </Box>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>

      {/* 3 */}
      <Grid
        size={{
          xs: 12,
          lg: 9
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Ignore Tracking
            </Typography>

            {/* list 1 */}
            <Stack direction="row" spacing={2} mt={4}>
              <Avatar
                variant="rounded"
                sx={{ bgcolor: 'grey.100', color: 'grey.500', width: 48, height: 48 }}
              >
                <IconPlayerPause size="22" />
              </Avatar>
              <Box>
                <Typography variant="h6" mb={1}>
                  Ignore Browser Tracking
                </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  Browser Cookie
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <CustomSwitch />
              </Box>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>
    </Grid>
    <Stack direction="row" spacing={2} sx={{ justifyContent: 'end' }} mt={3}>
      <Button size="large" variant="contained" color="primary">
        Save
      </Button>
      <Button size="large" variant="text" color="error">
        Cancel
      </Button>
    </Stack>
  </>);
};

export default NotificationTab;

===== src/components/pages/account-setting/SecurityTab.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Avatar,
  Box,
  CardContent,
  Grid2 as Grid,
  IconButton,
  Typography,
  Button,
  Divider,
  Stack
} from '@mui/material';

// components
import BlankCard from '../../shared/BlankCard';
import { IconDeviceLaptop, IconDeviceMobile, IconDotsVertical } from '@tabler/icons-react';

const SecurityTab = () => {
  return (<>
    <Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          lg: 8
        }}>
        <BlankCard>
          <CardContent>
            <Typography variant="h4" mb={2}>
              Two-factor Authentication
            </Typography>
            <Stack direction="row" justifyContent="space-between" alignItems="center" mb={4}>
              <Typography variant="subtitle1" color="textSecondary">
                Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis sapiente sunt
                earum officiis laboriosam ut.
              </Typography>
              <Button variant="contained" color="primary">
                Enable
              </Button>
            </Stack>

            <Divider />

            {/* list 1 */}
            <Stack direction="row" spacing={2} py={2} alignItems="center">
              <Box>
                <Typography variant="h6">Authentication App</Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  Google auth app
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Button variant="text" color="primary">
                  Setup
                </Button>
              </Box>
            </Stack>
            <Divider />
            {/* list 2 */}
            <Stack direction="row" spacing={2} py={2} alignItems="center">
              <Box>
                <Typography variant="h6">Another e-mail</Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  E-mail to send verification link
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Button variant="text" color="primary">
                  Setup
                </Button>
              </Box>
            </Stack>
            <Divider />
            {/* list 3 */}
            <Stack direction="row" spacing={2} py={2} alignItems="center">
              <Box>
                <Typography variant="h6">SMS Recovery</Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  Your phone number or something
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <Button variant="text" color="primary">
                  Setup
                </Button>
              </Box>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>
      <Grid
        size={{
          xs: 12,
          lg: 4
        }}>
        <BlankCard>
          <CardContent>
            <Avatar
              variant="rounded"
              sx={{ bgcolor: 'primary.light', color: 'primary.main', width: 48, height: 48 }}
            >
              <IconDeviceLaptop size="26" />
            </Avatar>

            <Typography variant="h5" mt={2}>
              Devices
            </Typography>
            <Typography color="textSecondary" mt={1} mb={2}>
              Lorem ipsum dolor sit amet consectetur adipisicing elit Rem.
            </Typography>
            <Button variant="contained" color="primary">
              Sign out from all devices
            </Button>

            {/* list 1 */}
            <Stack direction="row" spacing={2} py={2} mt={3} alignItems="center">
              <IconDeviceMobile size="26" />

              <Box>
                <Typography variant="h6">iPhone 14</Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  London UK, Oct 23 at 1:15 AM
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <IconButton>
                  <IconDotsVertical size="22" />
                </IconButton>
              </Box>
            </Stack>
            <Divider />
            {/* list 2 */}
            <Stack direction="row" spacing={2} py={2} alignItems="center">
              <IconDeviceLaptop size="26" />

              <Box>
                <Typography variant="h6">Macbook Air </Typography>
                <Typography variant="subtitle1" color="textSecondary">
                  Gujarat India, Oct 24 at 3:15 AM
                </Typography>
              </Box>
              <Box sx={{ ml: 'auto !important' }}>
                <IconButton>
                  <IconDotsVertical size="22" />
                </IconButton>
              </Box>
            </Stack>
            <Stack>
              <Button variant="text" color="primary">
                Need Help ?
              </Button>
            </Stack>
          </CardContent>
        </BlankCard>
      </Grid>
    </Grid>
    <Stack direction="row" spacing={2} sx={{ justifyContent: 'end' }} mt={3}>
      <Button size="large" variant="contained" color="primary">
        Save
      </Button>
      <Button size="large" variant="text" color="error">
        Cancel
      </Button>
    </Stack>
  </>);
};

export default SecurityTab;

===== src/components/pages/faq/Questions.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, Accordion, AccordionSummary, AccordionDetails, Divider, Box } from '@mui/material';
import { IconChevronDown } from '@tabler/icons-react';

const Questions = () => {
  return (
    (<Box>
      <Grid container spacing={3} justifyContent="center">
        <Grid
          size={{
            xs: 12,
            lg: 8
          }}>
          <Typography variant="h3" textAlign="center" mb={1}>Frequently asked questions</Typography>
          <Typography variant="h6" fontWeight={400} color="textSecondary" textAlign="center" mb={4}>Get to know more about ready-to-use admin dashboard templates</Typography>
          <Accordion elevation={9}>
            <AccordionSummary
              expandIcon={<IconChevronDown />}
              aria-controls="panel1a-content"
              id="panel1a-header"
            >
              <Typography variant="h6" px={2} py={1}>What is an Admin Dashboard?</Typography>
            </AccordionSummary>
            <Divider />
            <AccordionDetails>
              <Typography variant="subtitle1" pt={1} px={2} color="textSecondary">
                Admin Dashboard is the backend interface of a website or an application that helps
                to manage the website's overall content and settings. It is widely used by the site
                owners to keep track of their website, make changes to their content, and more.
              </Typography>
            </AccordionDetails>
          </Accordion>
          <Accordion elevation={9}>
            <AccordionSummary
              expandIcon={<IconChevronDown />}
              aria-controls="panel2a-content"
              id="panel2a-header"
            >
              <Typography variant="h6" px={2} py={1}>What should an admin dashboard template include?</Typography>
            </AccordionSummary>
            <Divider />
            <AccordionDetails>
              <Typography variant="subtitle1" pt={1} px={2} color="textSecondary">
                Admin dashboard template should include user & SEO friendly design with a variety of
                components and application designs to help create your own web application with
                ease. This could include customization options, technical support and about 6 months
                of future updates.
              </Typography>
            </AccordionDetails>
          </Accordion>
          <Accordion elevation={9}>
            <AccordionSummary
              expandIcon={<IconChevronDown />}
              aria-controls="panel3a-content"
              id="panel3a-header"
            >
              <Typography variant="h6" px={2} py={1}>Why should I buy admin templates from AdminMart?</Typography>
            </AccordionSummary>
            <Divider />
            <AccordionDetails>
              <Typography variant="subtitle1" pt={1} px={2} color="textSecondary">
                Adminmart offers high-quality templates that are easy to use and fully customizable.
                With over 101,801 happy customers & trusted by 10,000+ Companies. AdminMart is
                recognized as the leading online source for buying admin templates.
              </Typography>
            </AccordionDetails>
          </Accordion>
          <Accordion elevation={9}>
            <AccordionSummary
              expandIcon={<IconChevronDown />}
              aria-controls="panel4a-content"
              id="panel4a-header"
            >
              <Typography variant="h6" px={2} py={1}>Do Adminmart offers a money back guarantee?</Typography>
            </AccordionSummary>
            <Divider />
            <AccordionDetails>
              <Typography variant="subtitle1" pt={1} px={2} color="textSecondary">
                There is no money back guarantee in most companies, but if you are unhappy with our
                product, Adminmart gives you a 100% money back guarantee.
              </Typography>
            </AccordionDetails>
          </Accordion>
        </Grid>
      </Grid>
    </Box>)
  );
};

export default Questions;

===== src/components/pages/faq/StillQuestions.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, AvatarGroup, Avatar, Stack, Button, Box } from '@mui/material';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';

const StillQuestions = () => {
  return (
    (<Grid container spacing={3} justifyContent="center">
      <Grid
        size={{
          xs: 12,
          lg: 10
        }}>
        <Box bgcolor="primary.light" p={5} mt={7}>
          <Stack>
            <AvatarGroup sx={{ flexDirection: 'row', justifyContent: 'center' }}>
              <Avatar alt="Remy Sharp" src={user1} />
              <Avatar alt="Travis Howard" src={user2} />
              <Avatar alt="Cindy Baker" src={user3} />
            </AvatarGroup>
          </Stack>

          <Typography variant="h3" textAlign="center" mt={3} mb={1}>
            Still have questions
          </Typography>
          <Typography variant="h6" fontWeight={400} lineHeight="23px" color="textSecondary" textAlign="center">
            Can't find the answer your're looking for ? Please chat to our friendly team.
          </Typography>
          <Box textAlign="center" mt={3}>
            <Button variant="contained" color="primary">
              Chat with us
            </Button>
          </Box>
        </Box>
      </Grid>
    </Grid>)
  );
};

export default StillQuestions;

===== src/components/PermissionGuard.tsx =====
// File: src/components/PermissionGuard.tsx
import React from 'react';
import { usePermissions } from 'src/hooks/usePermissions';

interface Props {
  children: React.ReactNode;
  pageId: number;
  permission: string;
  fallback?: React.ReactNode;
}

const PermissionGuard: React.FC<Props> = ({ 
  children, 
  pageId, 
  permission, 
  fallback = null 
}) => {
  const { hasPermission, loading } = usePermissions();

  if (loading) {
    return <>{fallback}</>;
  }

  if (!hasPermission(pageId, permission)) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
};

export default PermissionGuard;

===== src/components/ProtectedRoute.tsx =====
// File: src/components/ProtectedRoute.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { Box, CircularProgress, Typography } from '@mui/material';
import { useAuth } from 'src/contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredPage?: string;
  requiredModule?: number;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredPage,
  requiredModule 
}) => {
  const { isAuthenticated, isLoading, selectedBranch, branches, hasPageAccess, canAccessModule } = useAuth();
  const location = useLocation();

  // إذا كان النظام يحمل، أظهر loading
  if (isLoading) {
    return (
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          gap: 2
        }}
      >
        <CircularProgress size={40} />
        <Typography variant="body1">جاري التحميل...</Typography>
      </Box>
    );
  }

  // إذا لم يكن مسجل دخول، اذهب للـ login
  if (!isAuthenticated) {
    return <Navigate to="/auth/login" state={{ from: location }} replace />;
  }

  // إذا كان مسجل دخول ولكن لا يوجد فرع محدد ولديه فروع متعددة
  if (isAuthenticated && !selectedBranch && branches.length > 1) {
    return <Navigate to="/auth/branch-selection" replace />;
  }

  // إذا كان مسجل دخول ولكن لا يوجد فروع
  if (isAuthenticated && branches.length === 0) {
    return <Navigate to="/auth/no-branches" replace />;
  }

  // التحقق من صلاحية الصفحة
  if (requiredPage && !hasPageAccess(requiredPage)) {
    return <Navigate to="/unauthorized" replace />;
  }

  // التحقق من صلاحية الوحدة
  if (requiredModule && !canAccessModule(requiredModule)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

===== src/components/react-tables/basic/page.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  AvatarGroup, Grid2 as Grid
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';

import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from '@tanstack/react-table';


const basics = basicsTableData;


const columnHelper = createColumnHelper<EnTableType>();

const columns = [
  columnHelper.accessor('imgsrc', {
    header: () => 'Users',
    cell: info => (
      <Stack direction="row" spacing={2}>
        <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 40, height: 40 }} />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.row.original.name}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),
  columnHelper.accessor('pname', {
    header: () => 'Project Name',
    cell: info => (
      <Typography color="textSecondary" variant="h6" fontWeight={400}>
        {info.row.original.pname}
      </Typography>
    ),
  }),
  columnHelper.accessor('teams', {
    header: () => 'Team',
    cell: info => (
      <Stack direction="row">
        <AvatarGroup max={4}>
          {info.getValue().map((team) => (
            <Avatar
              key={team.id}
              sx={{
                bgcolor: team.color,
                width: 35,
                height: 35,
              }}
            >
              {team.text}
            </Avatar>
          ))}
        </AvatarGroup>
      </Stack>
    ),
  }),
  columnHelper.accessor('status', {
    header: () => 'Status',
    cell: info => (
      <Chip
        sx={{
          bgcolor:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.light
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.light
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.light
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.light
                    : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.main
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.main
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.main
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.main
                    : (theme) => theme.palette.secondary.main,
          borderRadius: '8px',
        }}
        size="small"
        label={info.getValue()}
      />
    ),
  }),
  columnHelper.accessor('budget', {
    header: () => 'Budget',
    cell: info => (
      <Typography variant="h6">
        ${info.row.original.budget}
      </Typography>
    ),
  }),
];

const ReactBasicTable = () => {
  const [data, _setData] = React.useState<any>(() => [...basics]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  const handleDownload = () => {
    const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
    const rows = data.map((item: { name: any; pname: any; teams: any[]; status: any; budget: any; }) => [

      item.name,
      item.pname,
      item.teams.map(team => team.text).join(", "),
      item.status,
      item.budget,
    ]);

    const csvContent = [
      headers.join(","),
      ...rows.map((e: any[]) => e.join(","))
    ].join("\n");

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", "table-data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DownloadCard title="Basic Table" onDownload={handleDownload}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <TableContainer>
              <Table
                sx={{
                  whiteSpace: 'nowrap',
                }}
              >
                <TableHead>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableCell key={header.id}>
                          <Typography variant="h6">
                            {header.isPlaceholder
                              ? null
                              : flexRender(header.column.columnDef.header, header.getContext())}
                          </Typography>
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableHead>
                <TableBody>
                  {table.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Grid>
      </Grid>
    </DownloadCard>)
  );
};

export default ReactBasicTable;

===== src/components/react-tables/column-visiblity/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Avatar,
    Typography,
    TableHead,
    Chip,
    Box,
    AvatarGroup, Grid2 as Grid,
    FormControlLabel,
    Divider
} from '@mui/material';
import { Stack } from '@mui/system';

import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';
import {
    createColumnHelper,
    flexRender,
    getCoreRowModel,
    useReactTable,
} from '@tanstack/react-table';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';

const basics = basicsTableData;

const columnHelper = createColumnHelper<EnTableType>();


const defaultColumns = [
    columnHelper.accessor('imgsrc', {
        header: () => 'Users',
        cell: info => (
            <Stack direction="row" spacing={2}>
                <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 40, height: 40 }} />
                <Box>
                    <Typography variant="h6" fontWeight="600">
                        {info.row.original.name}
                    </Typography>
                    <Typography color="textSecondary" variant="subtitle2">
                        {info.row.original.post}
                    </Typography>
                </Box>
            </Stack>
        ),
    }),
    columnHelper.accessor('pname', {
        header: () => 'Project Name',
        cell: info => (
            <Typography color="textSecondary" variant="h6" fontWeight={400}>
                {info.row.original.pname}
            </Typography>
        ),
    }),
    columnHelper.accessor('teams', {
        header: () => 'Team',
        cell: info => (
            <Stack direction="row">
                <AvatarGroup max={4}>
                    {info.getValue().map((team) => (
                        <Avatar
                            key={team.id}
                            sx={{
                                bgcolor: team.color,
                                width: 35,
                                height: 35,
                            }}
                        >
                            {team.text}
                        </Avatar>
                    ))}
                </AvatarGroup>
            </Stack>
        ),
    }),
    columnHelper.accessor('status', {
        header: () => 'Status',
        cell: info => (
            <Chip
                sx={{
                    bgcolor:
                        info.getValue() === 'Active'
                            ? (theme) => theme.palette.success.light
                            : info.getValue() === 'Pending'
                                ? (theme) => theme.palette.warning.light
                                : info.getValue() === 'Completed'
                                    ? (theme) => theme.palette.primary.light
                                    : info.getValue() === 'Cancel'
                                        ? (theme) => theme.palette.error.light
                                        : (theme) => theme.palette.secondary.light,
                    color:
                        info.getValue() === 'Active'
                            ? (theme) => theme.palette.success.main
                            : info.getValue() === 'Pending'
                                ? (theme) => theme.palette.warning.main
                                : info.getValue() === 'Completed'
                                    ? (theme) => theme.palette.primary.main
                                    : info.getValue() === 'Cancel'
                                        ? (theme) => theme.palette.error.main
                                        : (theme) => theme.palette.secondary.main,
                    borderRadius: '8px',
                }}
                size="small"
                label={info.getValue()}
            />
        ),
    }),
    columnHelper.accessor('budget', {
        header: () => 'Budget',
        cell: info => (
            <Typography variant="h6">
                ${info.row.original.budget}k
            </Typography>
        ),
    }),
];

const ReactColumnVisibilityTable = () => {
    const [data, _setData] = React.useState<any>(() => [...basics]);

    const [columns] = React.useState(() => [
        ...defaultColumns,
    ])
    const [columnVisibility, setColumnVisibility] = React.useState({})


    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
        state: {
            columnVisibility,
        },
        onColumnVisibilityChange: setColumnVisibility,
    });

    const handleDownload = () => {
        const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
        const rows = data.map((item: { name: any; pname: any; teams: any[]; status: any; budget: any; }) => [

            item.name,
            item.pname,
            item.teams.map(team => team.text).join(", "),
            item.status,
            item.budget,
        ]);

        const csvContent = [
            headers.join(","),
            ...rows.map((e: any[]) => e.join(","))
        ].join("\n");

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        (<DownloadCard title="Column Visibility Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <Stack px={3} py={2} direction={{ xs: 'column', sm: 'row' }}
                            spacing={{ xs: 1, sm: 2, md: 4 }}>
                            <div className="px-1 border-b border-black">
                                <FormControlLabel label="Toggle All" control={
                                    <CustomCheckbox
                                        {...{
                                            type: 'checkbox',
                                            checked: table.getIsAllColumnsVisible(),
                                            onChange: table.getToggleAllColumnsVisibilityHandler(),
                                        }}
                                    />
                                } />
                            </div>
                            {table.getAllLeafColumns().map(column => {
                                return (
                                    <div key={column.id} className="px-1">
                                        <FormControlLabel control={<CustomCheckbox
                                            {...{
                                                type: 'checkbox',
                                                checked: column.getIsVisible(),
                                                onChange: column.getToggleVisibilityHandler(),
                                            }}
                                        />} label={column.id} />
                                    </div>
                                )
                            })}
                        </Stack>
                        <Divider />

                        <TableContainer>
                            <Table
                                sx={{
                                    whiteSpace: 'nowrap',
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    {table.getRowModel().rows.map((row) => (
                                        <TableRow key={row.id}>
                                            {row.getVisibleCells().map((cell) => (
                                                <TableCell key={cell.id}>
                                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};

export default ReactColumnVisibilityTable;

===== src/components/react-tables/dense/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Avatar,
    Typography,
    TableHead,
    Chip,
    Box,
    Grid2 as Grid,
    Button,
    Divider
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { IconCircle, IconClock } from '@tabler/icons-react';
import {
    useReactTable,
    getCoreRowModel,
    flexRender,
    createColumnHelper,
} from '@tanstack/react-table';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';


export interface EnTableType {
    avatar: string;
    cname: string;
    tag?: string;
    email: string;
    teams: {
        name: string;
        bgcolor: string;
    }[];
    status: string;
}

const rows: EnTableType[] = [
    {
        status: 'active',
        avatar: img1,
        tag: 'rhye',
        cname: 'Olivia Rhye',
        email: 'olivia@ui.com',
        teams: [
            { name: 'Design', bgcolor: 'primary.main' },
            { name: 'Product', bgcolor: 'secondary.main' },
        ],
    },
    {
        status: 'offline',
        avatar: img2,
        tag: 'steele',
        cname: 'Barbara Steele',
        email: 'steele@ui.com',
        teams: [
            { name: 'Product', bgcolor: 'secondary.main' },
            { name: 'Operations', bgcolor: 'error.main' },
        ],
    },
    {
        status: 'active',
        avatar: img3,
        tag: 'gordon',
        cname: 'Leonard Gordon',
        email: 'olivia@ui.com',
        teams: [
            { name: 'Finance', bgcolor: 'primary.main' },
            { name: 'Customer Success', bgcolor: 'success.main' },
        ],
    },
    {
        status: 'offline',
        avatar: img4,
        tag: 'pope',
        cname: 'Evelyn Pope',
        email: 'steele@ui.com',
        teams: [
            { name: 'Operations', bgcolor: 'error.main' },
            { name: 'Design', bgcolor: 'primary.main' },
        ],
    },
    {
        status: 'active',
        avatar: img5,
        tag: 'garza',
        cname: 'Tommy Garza',
        email: 'olivia@ui.com',
        teams: [{ name: 'Product', bgcolor: 'secondary.main' }],
    },
    {
        status: 'active',
        avatar: img4,
        tag: 'vasquez',
        cname: 'Isabel Vasquez',
        email: 'steele@ui.com',
        teams: [{ name: 'Customer Success', bgcolor: 'success.main' }],
    },
];

const columnHelper = createColumnHelper<EnTableType>();

const columns = [
    columnHelper.accessor('avatar', {
        header: () => 'Customer',
        cell: info => (
            <Stack direction="row" spacing={2}>
                <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 42, height: 42 }} />
                <Box>
                    <Typography variant="h6">{info.row.original.cname}</Typography>
                    <Typography variant="subtitle1" color="textSecondary">
                        @{info.row.original.tag}
                    </Typography>
                </Box>
            </Stack>
        ),
    }),
    columnHelper.accessor('status', {
        header: () => 'Status',
        cell: info => (
            <Chip
                label={info.getValue()}
                size="small"
                icon={
                    info.getValue() === 'active' ? <IconCircle width={14} /> : <IconClock width={14} />
                }
                sx={{
                    backgroundColor:
                        info.getValue() === 'active'
                            ? (theme) => theme.palette.success.light
                            : (theme) => theme.palette.grey[100],
                    color:
                        info.getValue() === 'active'
                            ? (theme) => theme.palette.success.main
                            : (theme) => theme.palette.grey[500],
                    '.MuiChip-icon': {
                        color: 'inherit !important',
                    },
                }}
            />
        ),
    }),
    columnHelper.accessor('email', {
        header: () => 'Email Address',
        cell: info => (
            <Typography variant="subtitle1" color="textSecondary">
                {info.getValue()}
            </Typography>
        ),
    }),
    columnHelper.accessor('teams', {
        header: () => 'Teams',
        cell: info => (
            <Box>
                {info.getValue().map((team, index) => (
                    <Chip
                        label={team.name}
                        sx={{ backgroundColor: team.bgcolor, color: 'white', fontSize: '11px', mr: 1 }}
                        key={index}
                        size="small"
                    />
                ))}
            </Box>
        ),
    }),
];

const ReactDenseTable = () => {
    const [data] = React.useState<EnTableType[]>(rows);
    const [density, setDensity] = React.useState<'sm' | 'md' | 'lg'>('md');

    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
    });

    const handleToggleDensity = () => {
        setDensity(prevDensity => {
            if (prevDensity === 'lg') return 'md';
            if (prevDensity === 'md') return 'sm';
            return 'lg';
        });
    };

    const handleDownload = () => {
        const headers = ["Customer", "Status", "Email Address", "Teams"];
        const rows = data.map(item => [
            item.cname,
            item.status,
            item.email,
            item.teams.map(team => team.name).join(", "),
        ]);

        const csvContent = [
            headers.join(","),
            ...rows.map(e => e.join(","))
        ].join("\n");

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        (<DownloadCard title="Dense Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <Box p={3}>
                            <Button
                                onClick={handleToggleDensity}
                                variant="contained"
                            >
                                Toggle Density
                            </Button>
                        </Box>
                        <Divider />
                        <TableContainer>
                            <Table
                                sx={{
                                    whiteSpace: 'nowrap',
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id} sx={{
                                                    padding:
                                                        density === 'sm'
                                                            ? '4px'
                                                            : density === 'md'
                                                                ? '8px'
                                                                : '16px',
                                                    transition: 'padding 0.2s',
                                                }}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    {table.getRowModel().rows.map((row) => (
                                        <TableRow key={row.id}>
                                            {row.getVisibleCells().map((cell) => (
                                                <TableCell key={cell.id} sx={{
                                                    padding:
                                                        density === 'sm'
                                                            ? '4px'
                                                            : density === 'md'
                                                                ? '8px'
                                                                : '16px',
                                                    transition: 'padding 0.2s',
                                                }}>
                                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};
export default ReactDenseTable;

===== src/components/react-tables/drag-drop/Columndragdrop.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  AvatarGroup,
  Grid2 as Grid,
  IconButton,
} from '@mui/material';
import { Stack } from '@mui/system';
import {
  DndContext,
  KeyboardSensor,
  MouseSensor,
  TouchSensor,
  closestCenter,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import { SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';
import { CSS } from '@dnd-kit/utilities';
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { IconGripHorizontal } from '@tabler/icons-react';

const basics = basicsTableData;

const columnHelper = createColumnHelper<EnTableType>();

const columns = [
  columnHelper.accessor('imgsrc', {
    id: 'imgsrc',
    header: () => 'Users',
    cell: (info) => (
      <Stack direction="row" spacing={2}>
        <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 40, height: 40 }} />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.row.original.name}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),
  columnHelper.accessor('pname', {
    id: 'pname',
    header: () => 'Project Name',
    cell: (info) => (
      <Typography color="textSecondary" variant="h6" fontWeight={400}>
        {info.row.original.pname}
      </Typography>
    ),
  }),
  columnHelper.accessor('teams', {
    id: 'teams',
    header: () => 'Team',
    cell: (info) => (
      <Stack direction="row">
        <AvatarGroup max={4}>
          {info.getValue().map((team) => (
            <Avatar
              key={team.id}
              sx={{
                bgcolor: team.color,
                width: 35,
                height: 35,
              }}
            >
              {team.text}
            </Avatar>
          ))}
        </AvatarGroup>
      </Stack>
    ),
  }),
  columnHelper.accessor('status', {
    id: 'status',
    header: () => 'Status',
    cell: (info) => (
      <Chip
        sx={{
          bgcolor:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.light
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.light
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.light
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.light
                    : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.main
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.main
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.main
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.main
                    : (theme) => theme.palette.secondary.main,
          borderRadius: '8px',
        }}
        size="small"
        label={info.getValue()}
      />
    ),
  }),
  columnHelper.accessor('budget', {
    id: 'budget',
    header: () => 'Budget',
    cell: (info) => <Typography variant="h6">${info.row.original.budget}</Typography>,
  }),
];

const arrayMove = (array: any, from: any, to: any) => {
  const item = array[from];
  const newArray = array.slice();
  newArray.splice(from, 1);
  newArray.splice(to, 0, item);
  return newArray;
};
const DraggableTableHeader = ({ header }: any) => {
  const { attributes, isDragging, listeners, setNodeRef, transform } = useSortable({
    id: header.id,
  });

  const style: any = {
    opacity: isDragging ? 0.8 : 1,
    position: 'relative',
    transform: CSS.Translate.toString(transform),
    transition: 'width transform 0.2s ease-in-out',
    whiteSpace: 'nowrap',
    width: header.column.getSize(),
    zIndex: isDragging ? 1 : 0,
    textAlign: 'left',
    padding: '0 16px',
  };

  return (
    <th ref={setNodeRef} style={style} {...attributes} {...listeners}>
      {header.isPlaceholder
        ? null
        : flexRender(header.column.columnDef.header, header.getContext())}
      <IconButton size="small" {...attributes} {...listeners}>
        <IconGripHorizontal size={18} />
      </IconButton>
    </th>
  );
};
const DragAlongCell = ({ cell }: any) => {
  const { isDragging, setNodeRef, transform } = useSortable({
    id: cell.column.id,
  });

  const style: any = {
    opacity: isDragging ? 0.8 : 1,
    position: 'relative',
    transform: CSS.Translate.toString(transform),
    transition: 'width transform 0.2s ease-in-out',
    width: cell.column.getSize(),
    zIndex: isDragging ? 1 : 0,

  };

  return (
    <TableCell style={style} ref={setNodeRef} className="whitespace-nowrap py-3 px-4">
      {flexRender(cell.column.columnDef.cell, cell.getContext())}
    </TableCell>
  );
};

const Columndragdrop = () => {
  const [data, _setData] = React.useState<any>(() => [...basics]);
  const [columnOrder, setColumnOrder] = React.useState<any>(columns.map((c) => c.id));

  const table = useReactTable({
    data,
    columns,
    state: {
      columnOrder,
    },
    onColumnOrderChange: setColumnOrder,
    getCoreRowModel: getCoreRowModel(),
    debugColumns: true,
    debugTable: true,
    debugHeaders: true,
  });

  const handleDragEnd = (event: { active: any; over: any }) => {
    const { active, over } = event;
    if (active && over && active.id !== over.id) {
      setColumnOrder((columnOrder: string | any[]) => {
        const oldIndex = columnOrder.indexOf(active.id);
        const newIndex = columnOrder.indexOf(over.id);
        return arrayMove(columnOrder, oldIndex, newIndex);
      });
    }
  };

  const sensors = useSensors(
    useSensor(MouseSensor, {}),
    useSensor(TouchSensor, {}),
    useSensor(KeyboardSensor, {}),
  );

  const handleDownload = () => {
    const headers = ['Users', 'Project Name', 'Team', 'Status', 'Budget'];
    const rows = data.map(
      (item: { name: any; pname: any; teams: any[]; status: any; budget: any }) => [
        item.name,
        item.pname,
        item.teams.map((team) => team.text).join(', '),
        item.status,
        item.budget,
      ],
    );

    const csvContent = [headers.join(','), ...rows.map((e: any[]) => e.join(','))].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'table-data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd} sensors={sensors}>
      <DownloadCard title="Column drag & drop Table" onDownload={handleDownload}>
        <Grid container spacing={3}>
          <Grid size={12}>
            <Box>
              <TableContainer>
                <Table
                  sx={{
                    whiteSpace: 'nowrap',
                  }}
                >
                  <TableHead>
                    {table.getHeaderGroups().map((headerGroup) => (
                      <TableRow key={headerGroup.id}>
                        <SortableContext
                          items={columnOrder}
                          strategy={horizontalListSortingStrategy}
                        >
                          {headerGroup.headers.map((header) => (
                            <DraggableTableHeader key={header.id} header={header} />
                          ))}
                        </SortableContext>
                      </TableRow>
                    ))}
                  </TableHead>
                  <TableBody>
                    {table.getRowModel().rows.map((row) => (
                      <TableRow key={row.id}>
                        {row.getVisibleCells().map((cell) => (
                          <SortableContext
                            key={cell.id}
                            items={columnOrder}
                            strategy={horizontalListSortingStrategy}
                          >
                            <DragAlongCell key={cell.id} cell={cell} />
                          </SortableContext>
                        ))}
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          </Grid>
        </Grid>
      </DownloadCard>
    </DndContext>)
  );
};

export default Columndragdrop;

===== src/components/react-tables/drag-drop/page.tsx =====

import Rowdragdrop from './Rowdragdrop';
import Columndragdrop from './Columndragdrop';
import Grid from '@mui/material/Grid2';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Drag & Drop React Table',
  },
];

function page() {
  return (
    (<PageContainer title="Drag & drop Table" description="this is Drag & Drop Table">
      <Breadcrumb title="Drag & Drop Table" items={BCrumb} />
      <Grid container spacing={3}>
        <Grid sx={{ padding: 2 }} size={12}>
          <Rowdragdrop />
        </Grid>
        <Grid sx={{ padding: 2 }} size={12}>
          <Columndragdrop />
        </Grid>
      </Grid>
    </PageContainer>)
  );
}
export default page;

===== src/components/react-tables/drag-drop/Rowdragdrop.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  AvatarGroup,
  Grid2 as Grid,
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';
import {
  DndContext,
  MouseSensor,
  TouchSensor,
  KeyboardSensor,
  closestCenter,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
  arrayMove,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { IconGripVertical } from '@tabler/icons-react';

const basics = basicsTableData;

const columnHelper = createColumnHelper<EnTableType>();

const columns = [
  columnHelper.accessor('dragHandle', {
    cell: () => (
      <span>
        <IconGripVertical size={18} />
      </span>
    ),
    header: () => <span></span>,
  }),

  columnHelper.accessor('imgsrc', {
    header: () => 'Users',
    cell: (info) => (
      <Stack direction="row" spacing={2}>
        <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 40, height: 40 }} />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.row.original.name}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),
  columnHelper.accessor('pname', {
    header: () => 'Project Name',
    cell: (info) => (
      <Typography color="textSecondary" variant="h6" fontWeight={400}>
        {info.row.original.pname}
      </Typography>
    ),
  }),
  columnHelper.accessor('teams', {
    header: () => 'Team',
    cell: (info) => (
      <Stack direction="row">
        <AvatarGroup max={4}>
          {info.getValue().map((team) => (
            <Avatar
              key={team.id}
              sx={{
                bgcolor: team.color,
                width: 35,
                height: 35,
              }}
            >
              {team.text}
            </Avatar>
          ))}
        </AvatarGroup>
      </Stack>
    ),
  }),
  columnHelper.accessor('status', {
    header: () => 'Status',
    cell: (info) => (
      <Chip
        sx={{
          bgcolor:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.light
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.light
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.light
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.light
                    : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() === 'Active'
              ? (theme) => theme.palette.success.main
              : info.getValue() === 'Pending'
                ? (theme) => theme.palette.warning.main
                : info.getValue() === 'Completed'
                  ? (theme) => theme.palette.primary.main
                  : info.getValue() === 'Cancel'
                    ? (theme) => theme.palette.error.main
                    : (theme) => theme.palette.secondary.main,
          borderRadius: '8px',
        }}
        size="small"
        label={info.getValue()}
      />
    ),
  }),
  columnHelper.accessor('budget', {
    header: () => 'Budget',
    cell: (info) => <Typography variant="h6">${info.row.original.budget}k</Typography>,
  }),
];

const DraggableRow = ({ row }: any) => {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({
    id: row.original.id,
  });

  const style: any = {
    transform: CSS.Translate.toString(transform),
    transition,
    cursor: 'move',
  };

  return (
    <TableRow ref={setNodeRef} style={style} {...attributes} {...listeners}>
      {row.getVisibleCells().map((cell: any) => (
        <TableCell key={cell.id}>
          {flexRender(cell.column.columnDef.cell, cell.getContext())}
        </TableCell>
      ))}
    </TableRow>
  );
};

const Rowdragdrop = () => {
  const [data, _setData] = React.useState<any>(() => [...basics]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });
  const handleDragEnd = (event: { active: any; over: any }) => {
    const { active, over } = event;
    if (active.id !== over?.id) {
      _setData((prevData: any[]) => {
        const oldIndex = prevData.findIndex((item) => item.id === active.id);
        const newIndex = prevData.findIndex((item) => item.id === over?.id);
        return arrayMove(prevData, oldIndex, newIndex);
      });
    }
  };

  const sensors = useSensors(
    useSensor(MouseSensor),
    useSensor(TouchSensor),
    useSensor(KeyboardSensor),
  );

  const handleDownload = () => {
    const headers = ['Users', 'Project Name', 'Team', 'Status', 'Budget'];
    const rows = data.map(
      (item: { name: any; pname: any; teams: any[]; status: any; budget: any }) => [
        item.name,
        item.pname,
        item.teams.map((team: { text: any }) => team.text).join(', '),
        item.status,
        item.budget,
      ],
    );

    const csvContent = [headers.join(','), ...rows.map((e: any[]) => e.join(','))].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'table-data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DndContext onDragEnd={handleDragEnd} sensors={sensors} collisionDetection={closestCenter}>
      <DownloadCard title="Row Drag & Drop Table" onDownload={handleDownload}>
        <Grid container spacing={3}>
          <Grid size={12}>
            <Box>
              <TableContainer>
                <Table
                  sx={{
                    whiteSpace: 'nowrap',
                  }}
                >
                  <TableHead>
                    {table.getHeaderGroups().map((headerGroup) => (
                      <TableRow key={headerGroup.id}>
                        {headerGroup.headers.map((header) => (
                          <TableCell key={header.id}>
                            <Typography variant="h6">
                              {header.isPlaceholder
                                ? null
                                : flexRender(header.column.columnDef.header, header.getContext())}
                            </Typography>
                          </TableCell>
                        ))}
                      </TableRow>
                    ))}
                  </TableHead>
                  <TableBody>
                    <SortableContext
                      items={data.map((row: { id: any }) => row.id)}
                      strategy={verticalListSortingStrategy}
                    >
                      {table.getRowModel().rows.map((row) => (
                        <DraggableRow key={row.id} row={row} />
                      ))}
                    </SortableContext>
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          </Grid>
        </Grid>
      </DownloadCard>
    </DndContext>)
  );
};
export default Rowdragdrop;

===== src/components/react-tables/editable/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Avatar,
    Typography,
    TableHead,
    Chip,
    Box,
    Grid2 as Grid, MenuItem,
    Button,
    Divider,
    IconButton,
    TextField,
    Select
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import EditIcon from '@mui/icons-material/Edit';
import CheckIcon from '@mui/icons-material/Check';
import CloseIcon from '@mui/icons-material/Close';

import {
    flexRender,
    getCoreRowModel,
    useReactTable,
    createColumnHelper
} from '@tanstack/react-table'
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';


export interface EditableDataType {
    id?: number;
    status?: string;
    avatar?: string;
    name?: string;
    project?: string;
    percent?: number;
    edit?: any;
}

export const basicsTableData: EditableDataType[] = [
    {
        id: 1,
        status: 'active',
        avatar: img1,
        name: 'Olivia Rhye',
        project: 'Xtreme admin',
        percent: 60,

    },
    {
        id: 2,
        status: 'cancel',
        avatar: img2,
        name: 'Barbara Steele',
        project: 'Adminpro admin',
        percent: 30,

    },
    {
        id: 3,
        status: 'pending',
        avatar: img3,
        name: 'Isabel Vasquez',
        project: 'Modernize admin',
        percent: 32,

    },
    {
        id: 4,
        status: 'active',
        avatar: img4,
        name: 'Olivia Rhye',
        project: 'Xtreme admin',
        percent: 60,

    },
    {
        id: 5,
        status: 'cancel',
        avatar: img5,
        name: 'Barbara Steele',
        project: 'Adminpro admin',
        percent: 30,

    },
    {
        id: 6,
        status: 'active',
        avatar: img6,
        name: 'Leonard Gordon',
        project: 'Monster admin',
        percent: 45,

    },
    {
        id: 7,
        status: 'pending',
        avatar: img4,
        name: 'Evelyn Pope',
        project: 'Materialpro admin',
        percent: 37,

    },
    {
        id: 8,
        status: 'active',
        avatar: img6,
        name: 'Leonard Gordon',
        project: 'Monster admin',
        percent: 45,

    },
    {
        id: 9,
        status: 'pending',
        avatar: img5,
        name: 'Evelyn Pope',
        project: 'Materialpro admin',
        percent: 37,
    },
    {
        id: 10,
        status: 'cancel',
        avatar: img1,
        name: 'Tommy Garza',
        project: 'Elegant admin',
        percent: 87,
    },

];

const statusOptions = [
    { value: "active", label: "Active" },
    { value: "cancel", label: "Cancel" },
    { value: "pending", label: "Pending" },
];

const columnHelper = createColumnHelper<EditableDataType>();

const columns = [

    columnHelper.accessor('name', {
        header: () => 'User',
        cell: info => (
            <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar src={info.row.original.avatar} alt={info.row.original.avatar} sx={{ width: 42, height: 42 }} />
                <Box>
                    <Typography variant="h6">{info.getValue()}</Typography>
                </Box>
            </Stack>
        ),
    }),
    columnHelper.accessor('project', {
        header: () => 'Project Name',
        cell: info => (
            <Typography variant="subtitle1" color="textSecondary">
                {info.getValue()}
            </Typography>
        ),
    }),

    columnHelper.accessor('status', {
        header: () => 'Status',
        meta: {
            filterVariant: 'select',
        },
        cell: info => (
            <Chip
                sx={{
                    bgcolor:
                        info.getValue() === 'active'
                            ? (theme) => theme.palette.success.light
                            : info.getValue() === 'pending'
                                ? (theme) => theme.palette.warning.light
                                : info.getValue() === 'completed'
                                    ? (theme) => theme.palette.primary.light
                                    : info.getValue() === 'cancel'
                                        ? (theme) => theme.palette.error.light
                                        : (theme) => theme.palette.secondary.light,
                    color:
                        info.getValue() === 'active'
                            ? (theme) => theme.palette.success.main
                            : info.getValue() === 'pending'
                                ? (theme) => theme.palette.warning.main
                                : info.getValue() === 'completed'
                                    ? (theme) => theme.palette.primary.main
                                    : info.getValue() === 'cancel'
                                        ? (theme) => theme.palette.error.main
                                        : (theme) => theme.palette.secondary.main,
                    borderRadius: '8px',
                }}
                label={info.getValue()}
            />
        ),
    }),
    columnHelper.accessor('edit', {
        header: () => 'edit',
        cell: ({ row }) => (
            <Button
                onClick={() => row.getToggleExpandedHandler()}
            >
                <EditIcon />
            </Button>
        ),
    }),
];

const EditableTable = () => {
    const [data, _setData] = React.useState(() => [...basicsTableData]);
    const [editRowId, setEditRowId] = React.useState<any>(null);
    const [editedData, setEditedData] = React.useState<any>(null);


    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
    });

    //edit 
    const handleEdit = (row: any) => {
        setEditRowId(row.id);
        setEditedData({ ...row });
    };

    const handleSave = () => {
        if (editedData) {
            _setData(
                data.map((item) => (item.id === editedData.id ? editedData : item))
            );
            setEditRowId(null);
            setEditedData(null);
        }
    };

    const handleChange = (e: (Event & { target: { value: any; name: string; }; }) | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, field: string) => {
        if (editedData) {
            setEditedData({
                ...editedData,
                [field]: e.target.value,
            });
        }
    };

    const handleDownload = () => {
        const headers = ["Users", "Project Name", "Status", "percent"];
        const rows = data.map(item => [
            item.name,
            item.project,
            item.status,
            item.percent,
        ]);

        const csvContent = [
            headers.join(","),
            ...rows.map(e => e.join(","))
        ].join("\n");

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    return (
        (<DownloadCard title="Editable Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <TableContainer>
                            <Table
                                sx={{
                                    whiteSpace: 'nowrap',
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    {table.getRowModel().rows.map((row) => (
                                        <TableRow key={row.id}>
                                            {row.getVisibleCells().map((cell) => (
                                                <TableCell key={cell.id}>
                                                    {cell.column.id === "edit" ? (
                                                        editRowId === row.original.id ? (
                                                            <>
                                                                <IconButton onClick={handleSave} color="primary">
                                                                    <CheckIcon />
                                                                </IconButton>
                                                                <IconButton onClick={() => setEditRowId(null)} color="error">
                                                                    <CloseIcon />
                                                                </IconButton>
                                                            </>
                                                        ) : (
                                                            <IconButton onClick={() => handleEdit(row.original)} color="primary">
                                                                <EditIcon />
                                                            </IconButton>
                                                        )
                                                    ) : editRowId === row.original.id ? (
                                                        cell.column.id === "status" ? (
                                                            <Select
                                                                value={editedData?.status || ""}
                                                                onChange={(e) => handleChange(e, "status")}
                                                                variant="outlined"
                                                                fullWidth
                                                            >
                                                                {statusOptions.map((option) => (
                                                                    <MenuItem key={option.value} value={option.value}>
                                                                        {option.label}
                                                                    </MenuItem>
                                                                ))}
                                                            </Select>
                                                        ) : (
                                                            <TextField
                                                                variant="outlined"
                                                                value={editedData?.[cell.column.id] || ""}
                                                                onChange={(e) =>
                                                                    handleChange(
                                                                        e,
                                                                        cell.column.id
                                                                    )
                                                                }
                                                                fullWidth
                                                            />
                                                        )
                                                    ) : (
                                                        flexRender(cell.column.columnDef.cell, cell.getContext())
                                                    )}
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                        <Divider />
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};
export default EditableTable;


===== src/components/react-tables/empty/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Typography,
    TableHead,
    Box,
    Grid2 as Grid,
    FormLabel
} from '@mui/material';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';

import DownloadCard from 'src/components/shared/DownloadCard';

import {
    createColumnHelper,
    flexRender,
    getCoreRowModel,
    useReactTable,
} from '@tanstack/react-table';
import { TableType } from 'src/components/tables/tableData';
import EmptyImage from 'src/assets/images/svgs/no-data.webp';

const columnHelper = createColumnHelper<TableType>();

const columns = [
    columnHelper.accessor('imgsrc', {
        header: () => 'Users'
    }),
    columnHelper.accessor('name', {
        header: () => ' Name',
    }),
    columnHelper.accessor('post', {
        header: () => 'Post',
    }),
    columnHelper.accessor('pname', {
        header: () => 'Project Name',
    }),
    columnHelper.accessor('teams', {
        header: () => 'Teams',
    }),
    columnHelper.accessor('status', {
        header: () => 'Status',
    }),
    columnHelper.accessor('budget', {
        header: () => 'Budget',
    }),
];

const EmptyTable = () => {
    const [data, _setData] = React.useState(() => []);

    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
    });

    const handleDownload = () => {
        const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
        const rows = data.map((item: { name: any; pname: any; teams: any[]; status: any; budget: any; }) => [

            item.name,
            item.pname,
            item.teams.map(team => team.text).join(", "),
            item.status,
            item.budget,
        ]);

        const csvContent = [
            headers.join(","),
            ...rows.map((e: any[]) => e.join(","))
        ].join("\n");

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        (<DownloadCard title="Empty Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <CustomTextField
                            type="text"
                            placeholder="search 0 records..."
                            sx={{
                                marginLeft: "10px",
                                marginTop: "13px"
                            }}
                        />
                        <TableContainer>
                            <Table
                                sx={{
                                    whiteSpace: 'nowrap',
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : (
                                                                <>
                                                                    <FormLabel
                                                                        sx={{
                                                                            marginBottom: "7px",
                                                                            display: "block"
                                                                        }}
                                                                    >{flexRender(header.column.columnDef.header, header.getContext())}</FormLabel>
                                                                    <CustomTextField
                                                                        type="text"
                                                                        placeholder={`Search ${header.id}`}
                                                                    />
                                                                </>
                                                            )}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    <TableRow>
                                        <TableCell colSpan={columns.length}>
                                            <Box sx={{
                                                display: 'flex',
                                                alignItems: 'center',
                                                justifyContent: 'center',
                                                height: '200px',
                                            }}>
                                                <img
                                                    src={EmptyImage}
                                                    alt="No data"
                                                    style={{
                                                        maxWidth: '100%',
                                                        maxHeight: '100%',
                                                    }}
                                                />
                                            </Box>
                                        </TableCell>
                                    </TableRow>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};

export default EmptyTable;

===== src/components/react-tables/expanding/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Avatar,
    Typography,
    TableHead,
    Chip,
    Box,
    AvatarGroup, Grid2 as Grid
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';
import {
    createColumnHelper,
    flexRender,
    getCoreRowModel,
    useReactTable,
} from '@tanstack/react-table';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';



const basics = basicsTableData;


const columnHelper = createColumnHelper<EnTableType>();

const columns = [
    columnHelper.accessor("actions", {
        cell: ({ row }) => (
            <span onClick={() => row.toggleExpanded()}>
                {row.getIsExpanded() ? (
                    <KeyboardArrowDownIcon sx={{ cursor: "pointer" }} />
                ) : (
                    <KeyboardArrowRightIcon sx={{ cursor: "pointer" }} />
                )}
            </span>
        ),
        header: () => <span></span>,
    }),
    columnHelper.accessor("imgsrc", {
        header: () => "Users",
        cell: (info) => (
            <Stack direction="row" spacing={2}>
                <Avatar
                    src={info.getValue()}
                    alt={info.getValue()}
                    sx={{ width: 40, height: 40 }}
                />
                <Box>
                    <Typography variant="h6" fontWeight="600">
                        {info.row.original.name}
                    </Typography>
                    <Typography color="textSecondary" variant="subtitle2">
                        {info.row.original.post}
                    </Typography>
                </Box>
            </Stack>
        ),
    }),
    columnHelper.accessor("pname", {
        header: () => "Project Name",
        cell: (info) => (
            <Typography color="textSecondary" variant="h6" fontWeight={400}>
                {info.row.original.pname}
            </Typography>
        ),
    }),
    columnHelper.accessor("teams", {
        header: () => "Team",
        cell: (info) => (
            <Stack direction="row">
                <AvatarGroup max={4}>
                    {info.getValue().map((team) => (
                        <Avatar
                            key={team.id}
                            sx={{
                                bgcolor: team.color,
                                width: 35,
                                height: 35,
                            }}
                        >
                            {team.text}
                        </Avatar>
                    ))}
                </AvatarGroup>
            </Stack>
        ),
    }),
    columnHelper.accessor("status", {
        header: () => "Status",
        cell: (info) => (
            <Chip
                sx={{
                    bgcolor:
                        info.getValue() === "Active"
                            ? (theme) => theme.palette.success.light
                            : info.getValue() === "Pending"
                                ? (theme) => theme.palette.warning.light
                                : info.getValue() === "Completed"
                                    ? (theme) => theme.palette.primary.light
                                    : info.getValue() === "Cancel"
                                        ? (theme) => theme.palette.error.light
                                        : (theme) => theme.palette.secondary.light,
                    color:
                        info.getValue() === "Active"
                            ? (theme) => theme.palette.success.main
                            : info.getValue() === "Pending"
                                ? (theme) => theme.palette.warning.main
                                : info.getValue() === "Completed"
                                    ? (theme) => theme.palette.primary.main
                                    : info.getValue() === "Cancel"
                                        ? (theme) => theme.palette.error.main
                                        : (theme) => theme.palette.secondary.main,
                    borderRadius: "8px",
                }}
                size="small"
                label={info.getValue()}
            />
        ),
    }),
    columnHelper.accessor("budget", {
        header: () => "Budget",
        cell: (info) => (
            <Typography variant="h6">${info.row.original.budget}</Typography>
        ),
    }),
];

const TableExpanding = () => {
    const [data, _setData] = React.useState<any>(() => [...basics]);

    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
    });

    const handleDownload = () => {
        const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
        const rows = data.map(
            (item: {
                name: any;
                pname: any;
                teams: any[];
                status: any;
                budget: any;
            }) => [
                    item.name,
                    item.pname,
                    item.teams.map((team) => team.text).join(", "),
                    item.status,
                    item.budget,
                ]
        );

        const csvContent = [
            headers.join(","),
            ...rows.map((e: any[]) => e.join(",")),
        ].join("\n");

        const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        (<DownloadCard title="Expanding Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <TableContainer>
                            <Table
                                sx={{
                                    whiteSpace: "nowrap",
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(
                                                                header.column.columnDef.header,
                                                                header.getContext()
                                                            )}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    {table.getRowModel().rows.map((row) => (
                                        <React.Fragment key={row.id}>
                                            <TableRow>
                                                {row.getVisibleCells().map((cell) => (
                                                    <TableCell key={cell.id}>
                                                        {flexRender(
                                                            cell.column.columnDef.cell,
                                                            cell.getContext()
                                                        )}
                                                    </TableCell>
                                                ))}
                                            </TableRow>
                                            {row.getIsExpanded() ? (
                                                <TableRow>
                                                    <TableCell colSpan={columns.length}>
                                                        <Box sx={{ p: 2 }}>
                                                            <Typography variant="h6" sx={{ fontWeight: "600" }}>
                                                                Details:
                                                            </Typography>
                                                            <Box sx={{ mt: 1 }}>
                                                                <Typography variant="body1">Avatar:</Typography>
                                                                <Avatar src={row.original.imgsrc} alt="Avatar" />
                                                            </Box>
                                                            <Box sx={{ mt: 1 }}>
                                                                <Typography variant="body1">Name: {row.original.name}</Typography>
                                                                <Typography variant="body1">Post: {row.original.post}</Typography>
                                                                <Typography variant="body1">Project Name: {row.original.pname}</Typography>
                                                                <Typography variant="body1">Status: </Typography>
                                                                <Chip
                                                                    sx={{
                                                                        bgcolor:
                                                                            row.original.status === 'Active'
                                                                                ? (theme) => theme.palette.success.light
                                                                                : row.original.status === 'Pending'
                                                                                    ? (theme) => theme.palette.warning.light
                                                                                    : row.original.status === 'Completed'
                                                                                        ? (theme) => theme.palette.primary.light
                                                                                        : row.original.status === 'Cancel'
                                                                                            ? (theme) => theme.palette.error.light
                                                                                            : (theme) => theme.palette.secondary.light,
                                                                        color:
                                                                            row.original.status === 'Active'
                                                                                ? (theme) => theme.palette.success.main
                                                                                : row.original.status === 'Pending'
                                                                                    ? (theme) => theme.palette.warning.main
                                                                                    : row.original.status === 'Completed'
                                                                                        ? (theme) => theme.palette.primary.main
                                                                                        : row.original.status === 'Cancel'
                                                                                            ? (theme) => theme.palette.error.main
                                                                                            : (theme) => theme.palette.secondary.main,
                                                                        borderRadius: '8px',
                                                                    }}
                                                                    label={row.original.status}
                                                                />
                                                            </Box>
                                                            <Box sx={{ mt: 1 }}>
                                                                <Typography variant="body1">Teams:</Typography>
                                                                <AvatarGroup max={4}>
                                                                    {row.original.teams.map((team) => (
                                                                        <Avatar
                                                                            key={team.id
                                                                            }
                                                                            sx={{
                                                                                bgcolor: team.color,
                                                                                width: 35,
                                                                                height: 35,
                                                                            }}
                                                                        >
                                                                            {team.text}
                                                                        </Avatar>
                                                                    ))}
                                                                </AvatarGroup>
                                                            </Box>
                                                            <Box sx={{ mt: 1 }}>
                                                                <Typography variant="body1">Budget: ${row.original.budget}</Typography>
                                                            </Box>
                                                        </Box>
                                                    </TableCell>
                                                </TableRow>
                                            ) : null}
                                        </React.Fragment>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};
export default TableExpanding;

===== src/components/react-tables/filter/FilterTableData.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';

export interface BasicsTableDataType {
  id: string;
  invoiceno: string;
  imgsrc: string;
  name: string;
  post: string;
  pname: string;
  status: string;
  progress: number;
}

export const basicsTableData: BasicsTableDataType[] = [
  {
    id: '1',
    invoiceno: '3066',
    imgsrc: img1,
    name: 'Sunil Joshi',
    post: 'Web Designer',
    pname: 'Elite Admin',
    status: 'Paid',
    progress: 60,
  },
  {
    id: '2',
    invoiceno: '3067',
    imgsrc: img2,
    name: 'Andrew McDownland',
    post: 'Project Manager',
    pname: 'Real Homes WP Theme',
    status: 'Cancelled',
    progress: 30,
  },
  {
    id: '3',
    invoiceno: '3068',
    imgsrc:img3,
    name: 'Christopher Jamil',
    post: 'Project Manager',
    pname: 'MedicalPro WP Theme',
    status: 'Refunded',
    progress: 45,
  },
  {
    id: '4',
    invoiceno: '3069',
    imgsrc: img4,
    name: 'Nirav Joshi',
    post: 'Frontend Engineer',
    pname: 'Hosting Press HTML',
    status: 'Paid',
    progress: 15,
  },
  {
    id: '5',
    invoiceno: '3070',
    imgsrc: img5,
    name: 'Micheal Doe',
    post: 'Content Writer',
    pname: 'Helping Hands WP Theme',
    status: 'Cancel',
    progress: 20,
  },
  {
    id: '6',
    invoiceno: '3071',
    imgsrc:img1,
    name: 'Sunil Joshi',
    post: 'Web Designer',
    pname: 'Elite Admin',
    status: 'Paid',
    progress: 65,
  },
  {
    id: '7',
    invoiceno: '3072',
    imgsrc:img2,
    name: 'Andrew McDownland',
    post: 'Project Manager',
    pname: 'Real Homes WP Theme',
    status: 'Cancelled',
    progress: 45,
  },
  {
    id: '8',
    invoiceno: '3073',
    imgsrc: img3,
    name: 'Christopher Jamil',
    post: 'Project Manager',
    pname: 'MedicalPro WP Theme',
    status: 'Refunded',
    progress: 54,
  },
  {
    id: '9',
    invoiceno: '3074',
    imgsrc: img4,
    name: 'Nirav Joshi',
    post: 'Frontend Engineer',
    pname: 'Hosting Press HTML',
    status: 'Paid',
    progress: 86,
  },
  {
    id: '10',
    invoiceno: '3075',
    imgsrc: img5,
    name: 'Sunil Joshi',
    post: 'Web Designer',
    pname: 'Elite Admin',
    status: 'Paid',
    progress: 23,
  },
  {
    id: '11',
    invoiceno: '3076',
    imgsrc: img2,
    name: 'Micheal Doe',
    post: 'Content Writer',
    pname: 'Helping Hands WP Theme',
    status: 'Cancel',
    progress: 20,
  },
  {
    id: '12',
    invoiceno: '3077',
    imgsrc: img1,
    name: 'Nirav Joshi',
    post: 'Frontend Engineer',
    pname: 'Hosting Press HTML',
    status: 'Paid',
    progress: 29,
  },
  {
    id: '13',
    invoiceno: '3078',
    imgsrc: img2,
    name: 'Andrew McDownland',
    post: 'Project Manager',
    pname: 'Real Homes WP Theme',
    status: 'Cancelled',
    progress: 78,
  },
  {
    id: '14',
    invoiceno: '3079',
    imgsrc:img3,
    name: 'Christopher Jamil',
    post: 'Project Manager',
    pname: 'MedicalPro WP Theme',
    status: 'Refunded',
    progress: 61,
  },
  {
    id: '15',
    invoiceno: '3080',
    imgsrc: img4,
    name: 'Micheal Doe',
    post: 'Content Writer',
    pname: 'Helping Hands WP Theme',
    status: 'Cancel',
    progress: 89,
  },
];

===== src/components/react-tables/filter/page.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  Grid2 as Grid,
  MenuItem,
  Button,
  Divider,
  IconButton,
  LinearProgress,
  TextFieldProps,
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, BasicsTableDataType } from './FilterTableData';

import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  createColumnHelper,
} from '@tanstack/react-table';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import {
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
  IconArrowBackUp,
  IconCheck,
  IconX,
} from '@tabler/icons-react';

const basics = basicsTableData;

const columnHelper = createColumnHelper<BasicsTableDataType>();

const columns = [
  columnHelper.accessor('invoiceno', {
    header: () => 'Invoice',
    cell: (info) => (
      <Typography variant="subtitle1" color="textPrimary" fontWeight={600}>
        INV- {info.getValue()}
      </Typography>
    ),
  }),
  columnHelper.accessor('status', {
    header: () => 'Status',
    meta: {
      filterVariant: 'select',
    },
    cell: (info) => (
      <Chip
        label={info.getValue()}
        icon={
          info.getValue() == 'Paid' ? (
            <IconCheck width={16} />
          ) : info.getValue() == 'Cancelled' ? (
            <IconX width={16} />
          ) : (
            <IconArrowBackUp width={16} />
          )
        }
        sx={{
          backgroundColor:
            info.getValue() == 'Paid'
              ? (theme) => theme.palette.primary.light
              : info.getValue() == 'Cancelled'
                ? (theme) => theme.palette.error.light
                : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() == 'Paid'
              ? (theme) => theme.palette.primary.main
              : info.getValue() == 'Cancelled'
                ? (theme) => theme.palette.error.main
                : (theme) => theme.palette.secondary.main,
          '.MuiChip-icon': {
            color: 'inherit !important',
          },
        }}
      />
    ),
  }),
  columnHelper.accessor('name', {
    header: () => 'Customer',
    cell: (info) => (
      <Stack direction="row" spacing={2}>
        <Avatar
          src={info.row.original.imgsrc}
          alt={info.row.original.imgsrc}
          sx={{ width: 40, height: 40 }}
        />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.getValue()}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),

  columnHelper.accessor('progress', {
    header: () => 'Progress',
    cell: (info) => (
      <Stack direction="row" alignItems="center" spacing={2}>
        <Box width="50%">
          <LinearProgress variant="determinate" value={info.getValue()} color="primary" />
        </Box>
        <Typography variant="subtitle2" color="textSecondary">
          {info.getValue()}%
        </Typography>
      </Stack>
    ),
  }),
];

function Filter({ column }: any) {
  const columnFilterValue = column.getFilterValue();
  const { filterVariant } = column.columnDef.meta || {};

  return filterVariant === 'select' ? (
    <CustomSelect
      onChange={(e: { target: { value: any } }) => column.setFilterValue(e.target.value)}
      value={columnFilterValue ? columnFilterValue.toString() : ''}
    >
      {/* See faceted column filters example for dynamic select options */}
      <MenuItem value="">All</MenuItem>
      <MenuItem value="Paid">Paid</MenuItem>
      <MenuItem value="Cancelled">Cancelled</MenuItem>
      <MenuItem value="Refunded">Refunded</MenuItem>
    </CustomSelect>
  ) : (
    (<DebouncedInput
      onChange={(value: any) => column.setFilterValue(value)}
      placeholder={`Search...`}
      type="text"
      value={columnFilterValue || ''}
    />)
    // See faceted column filters example for datalist search suggestions
  );
}

interface DebouncedInputProps extends Omit<TextFieldProps, 'onChange' | 'value'> {
  value: string;
  onChange: (value: string) => void;
  debounce?: number;
}

const DebouncedInput: React.FC<DebouncedInputProps> = ({
  value: initialValue,
  onChange,
  debounce = 500,
  ...props
}) => {
  const [value, setValue] = React.useState<string>(initialValue);

  React.useEffect(() => {
    setValue(initialValue);
  }, [initialValue]);

  React.useEffect(() => {
    const timeout = setTimeout(() => {
      onChange(value);
    }, debounce);

    return () => clearTimeout(timeout);
  }, [value, debounce, onChange]);

  // Proper typing for the event handler
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value);
  };

  return (
    <CustomTextField
      {...props}
      value={value}
      onChange={handleChange} // Use the properly typed event handler
    />
  );
};

const ReactFilterTable = () => {
  const [data, _setData] = React.useState(() => [...basics]);
  const [columnFilters, setColumnFilters] = React.useState<any>([]);
  const rerender = React.useReducer(() => ({}), {})[1];

  const table = useReactTable({
    data,
    columns,
    filterFns: {},
    state: {
      columnFilters,
    },
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(), //client side filtering
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    debugTable: true,
    debugHeaders: true,
    debugColumns: false,
  });

  const handleDownload = () => {
    const headers = ['Invoice', 'Status', 'Customer', 'Progress'];
    const rows = data.map((item) => [item.invoiceno, item.status, item.name, item.progress]);

    const csvContent = [headers.join(','), ...rows.map((e) => e.join(','))].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'table-data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DownloadCard title="Filter Table" onDownload={handleDownload}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <TableContainer>
              <Table
                sx={{
                  whiteSpace: 'nowrap',
                }}
              >
                <TableHead>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableCell key={header.id}>
                          <Typography
                            variant="h6"
                            mb={1}
                            {...{
                              className: header.column.getCanSort()
                                ? 'cursor-pointer select-none'
                                : '',
                              onClick: header.column.getToggleSortingHandler(),
                            }}
                          >
                            {header.isPlaceholder
                              ? null
                              : flexRender(header.column.columnDef.header, header.getContext())}
                          </Typography>
                          {header.column.getCanFilter() ? (
                            <div>
                              <Filter column={header.column} />
                            </div>
                          ) : null}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableHead>
                <TableBody>
                  {table.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <Divider />
            <Stack
              gap={1}
              p={3}
              alignItems="center"
              direction={{ xs: 'column', sm: 'row' }}
              justifyContent="space-between"
            >
              <Box display="flex" alignItems="center" gap={1}>
                <Button variant="contained" color="primary" onClick={() => rerender()}>
                  Force Rerender
                </Button>
                <Typography variant="body1">
                  {table.getPrePaginationRowModel().rows.length} Rows
                </Typography>
              </Box>
              <Box
                sx={{
                  display: {
                    xs: 'block',
                    sm: 'flex',
                  },
                }}
                alignItems="center"
                gap={1}
              >
                <Stack direction="row" alignItems="center" gap={1}>
                  <Typography variant="body1">Page</Typography>
                  <Typography variant="body1" fontWeight={600}>
                    {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
                  </Typography>
                </Stack>
                <Stack direction="row" alignItems="center" gap={1}>
                  | Go to page:
                  <CustomTextField
                    type="number"
                    min="1"
                    max={table.getPageCount()}
                    defaultValue={table.getState().pagination.pageIndex + 1}
                    onChange={(e: { target: { value: any } }) => {
                      const page = e.target.value ? Number(e.target.value) - 1 : 0;
                      table.setPageIndex(page);
                    }}
                  />
                </Stack>
                <CustomSelect
                  value={table.getState().pagination.pageSize}
                  onChange={(e: { target: { value: any } }) => {
                    table.setPageSize(Number(e.target.value));
                  }}
                >
                  {[10, 15, 20, 25].map((pageSize) => (
                    <MenuItem key={pageSize} value={pageSize}>
                      {pageSize}
                    </MenuItem>
                  ))}
                </CustomSelect>

                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(0)}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronsLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.previousPage()}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.nextPage()}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronRight />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronsRight />
                </IconButton>
              </Box>
            </Stack>
          </Box>
        </Grid>
      </Grid>
    </DownloadCard>)
  );
};

export default ReactFilterTable;

===== src/components/react-tables/pagination/page.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  Grid2 as Grid,
  MenuItem,
  Button,
  Divider,
  IconButton,
  AvatarGroup,
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, PaginationDataType } from './PaginationData';

import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  createColumnHelper,
} from '@tanstack/react-table';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import {
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
} from '@tabler/icons-react';

const basics = basicsTableData;

const columnHelper = createColumnHelper<PaginationDataType>();

const columns = [
  columnHelper.accessor('name', {
    header: () => 'User',
    cell: (info) => (
      <Stack direction="row" alignItems="center" spacing={2}>
        <Avatar
          src={info.row.original.avatar}
          alt={info.row.original.avatar}
          sx={{ width: 42, height: 42 }}
        />
        <Box>
          <Typography variant="h6">{info.getValue()}</Typography>
        </Box>
      </Stack>
    ),
  }),
  columnHelper.accessor('project', {
    header: () => 'Project Name',
    cell: (info) => (
      <Typography variant="subtitle1" color="textSecondary">
        {info.getValue()}
      </Typography>
    ),
  }),
  columnHelper.accessor('users', {
    header: () => 'Users',
    cell: (info) => (
      <AvatarGroup sx={{ justifyContent: 'start' }}>
        {info.getValue().map((user, i) => (
          <Avatar src={user.img} alt={user.img} key={i} sx={{ width: 35, height: 35 }} />
        ))}
      </AvatarGroup>
    ),
  }),
  columnHelper.accessor('status', {
    header: () => 'Status',
    meta: {
      filterVariant: 'select',
    },
    cell: (info) => (
      <Chip
        sx={{
          bgcolor:
            info.getValue() === 'active'
              ? (theme) => theme.palette.success.light
              : info.getValue() === 'pending'
                ? (theme) => theme.palette.warning.light
                : info.getValue() === 'completed'
                  ? (theme) => theme.palette.primary.light
                  : info.getValue() === 'cancel'
                    ? (theme) => theme.palette.error.light
                    : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() === 'active'
              ? (theme) => theme.palette.success.main
              : info.getValue() === 'pending'
                ? (theme) => theme.palette.warning.main
                : info.getValue() === 'completed'
                  ? (theme) => theme.palette.primary.main
                  : info.getValue() === 'cancel'
                    ? (theme) => theme.palette.error.main
                    : (theme) => theme.palette.secondary.main,
          borderRadius: '8px',
        }}
        label={info.getValue()}
      />
    ),
  }),
];

const ReactPaginationTable = () => {
  const [data, _setData] = React.useState(() => [...basics]);
  const [columnFilters, setColumnFilters] = React.useState<any>([]);
  const rerender = React.useReducer(() => ({}), {})[1];

  const table = useReactTable({
    data,
    columns,
    filterFns: {},
    state: {
      columnFilters,
    },
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(), //client side filtering
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    debugTable: true,
    debugHeaders: true,
    debugColumns: false,
  });

  const handleDownload = () => {
    const headers = ['avatar', 'name', 'project', 'percent', 'status', 'users'];
    const rows = data.map((item) => [
      item.name,
      item.project,
      item.percent,
      item.status,
      item.avatar,
      item.users.map((user) => user.img).join(','),
    ]);

    const csvContent = [headers.join(','), ...rows.map((e) => e.join(','))].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'table-data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DownloadCard title="Pagination Table" onDownload={handleDownload}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <TableContainer>
              <Table
                sx={{
                  whiteSpace: 'nowrap',
                }}
              >
                <TableHead>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableCell key={header.id}>
                          <Typography
                            variant="h6"
                            mb={1}
                            className={
                              header.column.getCanSort() ? 'cursor-pointer select-none' : ''
                            }
                            onClick={header.column.getToggleSortingHandler()}
                          >
                            {header.isPlaceholder
                              ? null
                              : flexRender(header.column.columnDef.header, header.getContext())}
                            {(() => {
                              const sortState = header.column.getIsSorted();
                              if (sortState === 'asc') return ' 🔼';
                              if (sortState === 'desc') return ' 🔽';
                              return null;
                            })()}
                          </Typography>
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableHead>
                <TableBody>
                  {table.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <Divider />
            <Stack
              gap={1}
              p={3}
              alignItems="center"
              direction={{ xs: 'column', sm: 'row' }}
              justifyContent="space-between"
            >
              <Box display="flex" alignItems="center" gap={1}>
                <Button variant="contained" color="primary" onClick={() => rerender()}>
                  Force Rerender
                </Button>
                <Typography variant="body1">
                  {table.getPrePaginationRowModel().rows.length} Rows
                </Typography>
              </Box>
              <Box
                sx={{
                  display: {
                    xs: 'block',
                    sm: 'flex',
                  },
                }}
                alignItems="center"
                gap={1}
              >
                <Stack direction="row" alignItems="center" gap={1}>
                  <Typography variant="body1">Page</Typography>
                  <Typography variant="body1" fontWeight={600}>
                    {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
                  </Typography>
                </Stack>
                <Stack direction="row" alignItems="center" gap={1}>
                  | Go to page:
                  <CustomTextField
                    type="number"
                    min="1"
                    max={table.getPageCount()}
                    defaultValue={table.getState().pagination.pageIndex + 1}
                    onChange={(e: { target: { value: any } }) => {
                      const page = e.target.value ? Number(e.target.value) - 1 : 0;
                      table.setPageIndex(page);
                    }}
                  />
                </Stack>
                <CustomSelect
                  value={table.getState().pagination.pageSize}
                  onChange={(e: { target: { value: any } }) => {
                    table.setPageSize(Number(e.target.value));
                  }}
                >
                  {[10, 15, 20, 25].map((pageSize) => (
                    <MenuItem key={pageSize} value={pageSize}>
                      {pageSize}
                    </MenuItem>
                  ))}
                </CustomSelect>

                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(0)}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronsLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.previousPage()}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.nextPage()}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronRight />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronsRight />
                </IconButton>
              </Box>
            </Stack>
          </Box>
        </Grid>
      </Grid>
    </DownloadCard>)
  );
};

export default ReactPaginationTable;

===== src/components/react-tables/pagination/PaginationData.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';

export interface PaginationDataType {
  status?: string;
  avatar?: string;
  name?: string;
  project?: string;
  percent?: number;
  users:{
     img:string;
  }[];
}

export const basicsTableData: PaginationDataType[] = [
  {
    status: 'active',
    avatar: img1,
    name: 'Olivia Rhye',
    project: 'Xtreme admin',
    percent: 60,
    users: [{ img: img1 }, { img: img2}],
  },
  {
    status: 'cancel',
    avatar: img2,
    name: 'Barbara Steele',
    project: 'Adminpro admin',
    percent: 30,
    users: [
      { img: img1},
      { img: img2 },
      { img: img3 },
    ],
  },
  {
    status: 'pending',
    avatar: img5,
    name: 'Isabel Vasquez',
    project: 'Modernize admin',
    percent: 32,
    users: [{ img: img2 }, { img: img4 }],
  },
  {
    status: 'active',
    avatar: img1,
    name: 'Olivia Rhye',
    project: 'Xtreme admin',
    percent: 60,
    users: [{ img: img1 }, { img: img2 }],
  },
  {
    status: 'cancel',
    avatar: img2,
    name: 'Barbara Steele',
    project: 'Adminpro admin',
    percent: 30,
    users: [
      { img: img1 },
      { img: img2},
      { img: img3 },
    ],
  },
  {
    status: 'active',
    avatar: img3,
    name: 'Leonard Gordon',
    project: 'Monster admin',
    percent: 45,
    users: [{ img: img3 }, { img: img2}],
  },
  {
    status: 'pending',
    avatar:img4,
    name: 'Evelyn Pope',
    project: 'Materialpro admin',
    percent: 37,
    users: [
      { img: img1 },
      { img: img2},
      { img: img5 },
    ],
  },
  {
    status: 'active',
    avatar: img3,
    name: 'Leonard Gordon',
    project: 'Monster admin',
    percent: 45,
    users: [{ img: img3 }, { img: img2}],
  },
  {
    status: 'pending',
    avatar:img4,
    name: 'Evelyn Pope',
    project: 'Materialpro admin',
    percent: 37,
    users: [
      { img: img1 },
      { img: img2},
      { img: img5 },
    ],
  },
  {
    status: 'cancel',
    avatar: img5,
    name: 'Tommy Garza',
    project: 'Elegant admin',
    percent: 87,
    users: [{ img: img5 }, { img: img6 }],
  },
  {
    status: 'pending',
    avatar: img6,
    name: 'Isabel Vasquez',
    project: 'Modernize admin',
    percent: 32,
    users: [{ img: img2}, { img:img4 }],
  },
  {
    status: 'active',
    avatar: img1,
    name: 'Olivia Rhye',
    project: 'Xtreme admin',
    percent: 60,
    users: [{ img: img1 }, { img: img2}],
  },
  {
    status: 'cancel',
    avatar: img2,
    name: 'Barbara Steele',
    project: 'Adminpro admin',
    percent: 30,
    users: [
      { img: img1 },
      { img: img2},
      { img: img3 },
    ],
  },
  {
    status: 'active',
    avatar: img3,
    name: 'Leonard Gordon',
    project: 'Monster admin',
    percent: 45,
    users: [{ img: img3 }, { img: img2}],
  },
  {
    status: 'pending',
    avatar: img4,
    name: 'Evelyn Pope',
    project: 'Materialpro admin',
    percent: 37,
    users: [
      { img: img1 },
      { img: img2},
      { img: img5 },
    ],
  },
  {
    status: 'cancel',
    avatar: img5,
    name: 'Tommy Garza',
    project: 'Elegant admin',
    percent: 87,
    users: [{ img: img5 }, { img: img6 }],
  },
  {
    status: 'pending',
    avatar: img6,
    name: 'Isabel Vasquez',
    project: 'Modernize admin',
    percent: 32,
    users: [{ img: img2}, { img: img4 }],
  },
];

===== src/components/react-tables/row-selection/page.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  AvatarGroup,
  Grid2 as Grid,
  CheckboxProps,
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from '@tanstack/react-table';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';

const basics = basicsTableData;

interface IndeterminateCheckboxProps extends Omit<CheckboxProps, 'ref'> {
  indeterminate?: boolean;
}

const IndeterminateCheckbox: React.FC<IndeterminateCheckboxProps> = ({
  indeterminate,
  className = '',
  ...rest
}) => {
  const ref = React.useRef<HTMLButtonElement>(null);

  React.useEffect(() => {
    if (ref.current && typeof indeterminate === 'boolean') {
      (ref.current as any).indeterminate = !rest.checked && indeterminate;
    }
  }, [indeterminate, rest.checked]);

  return <CustomCheckbox ref={ref} className={className + ' cursor-pointer'} {...rest} />;
};

const columnHelper = createColumnHelper<EnTableType>();

const columns = [
  columnHelper.accessor("checkboxes", {
    header: ({ table }) => (
      <IndeterminateCheckbox
        {...{
          checked: table.getIsAllRowsSelected(),
          indeterminate: table.getIsSomeRowsSelected(),
          onChange: table.getToggleAllRowsSelectedHandler(),
        }}
      />
    ),
    cell: ({ row }) => (
      <div className="px-1">
        <IndeterminateCheckbox
          {...{
            checked: row.getIsSelected(),
            disabled: !row.getCanSelect(),
            indeterminate: row.getIsSomeSelected(),
            onChange: row.getToggleSelectedHandler(),
          }}
        />
      </div>
    ),
  }),

  columnHelper.accessor("imgsrc", {
    header: () => "Users",
    cell: (info) => (
      <Stack direction="row" spacing={2}>
        <Avatar
          src={info.getValue()}
          alt={info.getValue()}
          sx={{ width: 40, height: 40 }}
        />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.row.original.name}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),
  columnHelper.accessor("pname", {
    header: () => "Project Name",
    cell: (info) => (
      <Typography color="textSecondary" variant="h6" fontWeight={400}>
        {info.row.original.pname}
      </Typography>
    ),
  }),
  columnHelper.accessor("teams", {
    header: () => "Team",
    cell: (info) => (
      <Stack direction="row">
        <AvatarGroup max={4}>
          {info.getValue().map((team) => (
            <Avatar
              key={team.id}
              sx={{
                bgcolor: team.color,
                width: 35,
                height: 35,
              }}
            >
              {team.text}
            </Avatar>
          ))}
        </AvatarGroup>
      </Stack>
    ),
  }),
  columnHelper.accessor("status", {
    header: () => "Status",
    cell: (info) => (
      <Chip
        sx={{
          bgcolor:
            info.getValue() === "Active"
              ? (theme) => theme.palette.success.light
              : info.getValue() === "Pending"
                ? (theme) => theme.palette.warning.light
                : info.getValue() === "Completed"
                  ? (theme) => theme.palette.primary.light
                  : info.getValue() === "Cancel"
                    ? (theme) => theme.palette.error.light
                    : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() === "Active"
              ? (theme) => theme.palette.success.main
              : info.getValue() === "Pending"
                ? (theme) => theme.palette.warning.main
                : info.getValue() === "Completed"
                  ? (theme) => theme.palette.primary.main
                  : info.getValue() === "Cancel"
                    ? (theme) => theme.palette.error.main
                    : (theme) => theme.palette.secondary.main,
          borderRadius: "8px",
        }}
        size="small"
        label={info.getValue()}
      />
    ),
  }),
  columnHelper.accessor("budget", {
    header: () => "Budget",
    cell: (info) => (
      <Typography variant="h6">${info.row.original.budget}k</Typography>
    ),
  }),
];

const TableRowSelection = () => {
  const [data, _setData] = React.useState<any>(() => [...basics]);

  const [rowSelection, setRowSelection] = React.useState({});

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    state: {
      rowSelection,
    },
  });

  const handleDownload = () => {
    const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
    const rows = data.map(
      (item: {
        name: any;
        pname: any;
        teams: any[];
        status: any;
        budget: any;
      }) => [
          item.name,
          item.pname,
          item.teams.map((team) => team.text).join(", "),
          item.status,
          item.budget,
        ]
    );

    const csvContent = [
      headers.join(","),
      ...rows.map((e: any[]) => e.join(",")),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", "table-data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DownloadCard title="Row Selection Table" onDownload={handleDownload}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <TableContainer>
              <Table
                sx={{
                  whiteSpace: "nowrap",
                }}
              >
                <TableHead>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableCell key={header.id}>
                          <Typography variant="h6">
                            {header.isPlaceholder
                              ? null
                              : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                              )}
                          </Typography>
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableHead>
                <TableBody>
                  {table.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Grid>
      </Grid>
    </DownloadCard>)
  );
};

export default TableRowSelection;

===== src/components/react-tables/sorting/page.tsx =====

import * as React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  Grid2 as Grid,
  MenuItem,
  Button,
  Divider,
  IconButton,
  LinearProgress,
} from '@mui/material';
import { Stack } from '@mui/system';
import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, BasicsTableDataType } from '../filter/FilterTableData';

import {
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  createColumnHelper,
} from '@tanstack/react-table';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import {
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
  IconArrowBackUp,
  IconCheck,
  IconX,
} from '@tabler/icons-react';

const basics = basicsTableData;

const columnHelper = createColumnHelper<BasicsTableDataType>();

const columns = [
  columnHelper.accessor('invoiceno', {
    header: () => 'Invoice',
    cell: (info) => (
      <Typography variant="subtitle1" color="textPrimary" fontWeight={600}>
        INV- {info.getValue()}
      </Typography>
    ),
  }),
  columnHelper.accessor('status', {
    header: () => 'Status',
    meta: {
      filterVariant: 'select',
    },
    cell: (info) => (
      <Chip
        label={info.getValue()}
        icon={
          info.getValue() == 'Paid' ? (
            <IconCheck width={16} />
          ) : info.getValue() == 'Cancelled' ? (
            <IconX width={16} />
          ) : (
            <IconArrowBackUp width={16} />
          )
        }
        sx={{
          backgroundColor:
            info.getValue() == 'Paid'
              ? (theme) => theme.palette.primary.light
              : info.getValue() == 'Cancelled'
                ? (theme) => theme.palette.error.light
                : (theme) => theme.palette.secondary.light,
          color:
            info.getValue() == 'Paid'
              ? (theme) => theme.palette.primary.main
              : info.getValue() == 'Cancelled'
                ? (theme) => theme.palette.error.main
                : (theme) => theme.palette.secondary.main,
          '.MuiChip-icon': {
            color: 'inherit !important',
          },
        }}
      />
    ),
  }),
  columnHelper.accessor('name', {
    header: () => 'Customer',
    cell: (info) => (
      <Stack direction="row" spacing={2}>
        <Avatar
          src={info.row.original.imgsrc}
          alt={info.row.original.imgsrc}
          sx={{ width: 40, height: 40 }}
        />
        <Box>
          <Typography variant="h6" fontWeight="600">
            {info.getValue()}
          </Typography>
          <Typography color="textSecondary" variant="subtitle2">
            {info.row.original.post}
          </Typography>
        </Box>
      </Stack>
    ),
  }),

  columnHelper.accessor('progress', {
    header: () => 'Progress',
    cell: (info) => (
      <Stack direction="row" alignItems="center" spacing={2}>
        <Box width="50%">
          <LinearProgress variant="determinate" value={info.getValue()} color="primary" />
        </Box>
        <Typography variant="subtitle2" color="textSecondary">
          {info.getValue()}%
        </Typography>
      </Stack>
    ),
  }),
];

const ReactSortingTable = () => {
  const [data, _setData] = React.useState(() => [...basics]);
  const [columnFilters, setColumnFilters] = React.useState<any>([]);
  const rerender = React.useReducer(() => ({}), {})[1];

  const table = useReactTable({
    data,
    columns,
    filterFns: {},
    state: {
      columnFilters,
    },
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(), //client side filtering
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    debugTable: true,
    debugHeaders: true,
    debugColumns: false,
  });

  const handleDownload = () => {
    const headers = ['Invoice', 'Status', 'Customer', 'Progress'];
    const rows = data.map((item) => [item.invoiceno, item.status, item.name, item.progress]);

    const csvContent = [headers.join(','), ...rows.map((e) => e.join(','))].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'table-data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    (<DownloadCard title="Sorting Table" onDownload={handleDownload}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <TableContainer>
              <Table
                sx={{
                  whiteSpace: 'nowrap',
                }}
              >
                <TableHead>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableCell key={header.id}>
                          <Typography
                            variant="h6"
                            mb={1}
                            className={
                              header.column.getCanSort() ? 'cursor-pointer select-none' : ''
                            }
                            onClick={header.column.getToggleSortingHandler()}
                          >
                            {header.isPlaceholder
                              ? null
                              : flexRender(header.column.columnDef.header, header.getContext())}
                            {(() => {
                              const sortState = header.column.getIsSorted();
                              if (sortState === 'asc') return ' 🔼';
                              if (sortState === 'desc') return ' 🔽';
                              return null;
                            })()}
                          </Typography>
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableHead>
                <TableBody>
                  {table.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(cell.column.columnDef.cell, cell.getContext())}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <Divider />
            <Stack
              gap={1}
              p={3}
              alignItems="center"
              direction={{ xs: 'column', sm: 'row' }}
              justifyContent="space-between"
            >
              <Box display="flex" alignItems="center" gap={1}>
                <Button variant="contained" color="primary" onClick={() => rerender()}>
                  Force Rerender
                </Button>
                <Typography variant="body1">
                  {table.getPrePaginationRowModel().rows.length} Rows
                </Typography>
              </Box>
              <Box
                sx={{
                  display: {
                    xs: 'block',
                    sm: 'flex',
                  },
                }}
                alignItems="center"
                gap={1}
              >
                <Stack direction="row" alignItems="center" gap={1}>
                  <Typography variant="body1">Page</Typography>
                  <Typography variant="body1" fontWeight={600}>
                    {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
                  </Typography>
                </Stack>
                <Stack direction="row" alignItems="center" gap={1}>
                  | Go to page:
                  <CustomTextField
                    type="number"
                    min="1"
                    max={table.getPageCount()}
                    defaultValue={table.getState().pagination.pageIndex + 1}
                    onChange={(e: { target: { value: any } }) => {
                      const page = e.target.value ? Number(e.target.value) - 1 : 0;
                      table.setPageIndex(page);
                    }}
                  />
                </Stack>
                <CustomSelect
                  value={table.getState().pagination.pageSize}
                  onChange={(e: { target: { value: any } }) => {
                    table.setPageSize(Number(e.target.value));
                  }}
                >
                  {[10, 15, 20, 25].map((pageSize) => (
                    <MenuItem key={pageSize} value={pageSize}>
                      {pageSize}
                    </MenuItem>
                  ))}
                </CustomSelect>

                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(0)}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronsLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.previousPage()}
                  disabled={!table.getCanPreviousPage()}
                >
                  <IconChevronLeft />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.nextPage()}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronRight />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                  disabled={!table.getCanNextPage()}
                >
                  <IconChevronsRight />
                </IconButton>
              </Box>
            </Stack>
          </Box>
        </Grid>
      </Grid>
    </DownloadCard>)
  );
};

export default ReactSortingTable;

===== src/components/react-tables/sticky/page.tsx =====

import * as React from 'react';
import {
    TableContainer,
    Table,
    TableRow,
    TableCell,
    TableBody,
    Avatar,
    Typography,
    TableHead,
    Chip,
    Box,
    AvatarGroup, Grid2 as Grid
} from '@mui/material';
import { Stack } from '@mui/system';

import DownloadCard from 'src/components/shared/DownloadCard';
import { basicsTableData, EnTableType } from 'src/components/tables/tableData';

import {
    createColumnHelper,
    flexRender,
    getCoreRowModel,
    useReactTable,
} from '@tanstack/react-table';

const basics = basicsTableData;


const columnHelper = createColumnHelper<EnTableType>();

const columns = [
    columnHelper.accessor('imgsrc', {
        header: () => 'Users',
        cell: info => (
            <Stack direction="row" spacing={2}>
                <Avatar src={info.getValue()} alt={info.getValue()} sx={{ width: 40, height: 40 }} />
                <Box>
                    <Typography variant="h6" fontWeight="600">
                        {info.row.original.name}
                    </Typography>
                    <Typography color="textSecondary" variant="subtitle2">
                        {info.row.original.post}
                    </Typography>
                </Box>
            </Stack>
        ),
    }),
    columnHelper.accessor('pname', {
        header: () => 'Project Name',
        cell: info => (
            <Typography color="textSecondary" variant="h6" fontWeight={400}>
                {info.row.original.pname}
            </Typography>
        ),
    }),
    columnHelper.accessor('teams', {
        header: () => 'Team',
        cell: info => (
            <Stack direction="row">
                <AvatarGroup max={4}>
                    {info.getValue().map((team) => (
                        <Avatar
                            key={team.id}
                            sx={{
                                bgcolor: team.color,
                                width: 35,
                                height: 35,
                            }}
                        >
                            {team.text}
                        </Avatar>
                    ))}
                </AvatarGroup>
            </Stack>
        ),
    }),
    columnHelper.accessor('status', {
        header: () => 'Status',
        cell: info => (
            <Chip
                sx={{
                    bgcolor:
                        info.getValue() === 'Active'
                            ? (theme) => theme.palette.success.light
                            : info.getValue() === 'Pending'
                                ? (theme) => theme.palette.warning.light
                                : info.getValue() === 'Completed'
                                    ? (theme) => theme.palette.primary.light
                                    : info.getValue() === 'Cancel'
                                        ? (theme) => theme.palette.error.light
                                        : (theme) => theme.palette.secondary.light,
                    color:
                        info.getValue() === 'Active'
                            ? (theme) => theme.palette.success.main
                            : info.getValue() === 'Pending'
                                ? (theme) => theme.palette.warning.main
                                : info.getValue() === 'Completed'
                                    ? (theme) => theme.palette.primary.main
                                    : info.getValue() === 'Cancel'
                                        ? (theme) => theme.palette.error.main
                                        : (theme) => theme.palette.secondary.main,
                    borderRadius: '8px',
                }}
                size="small"
                label={info.getValue()}
            />
        ),
    }),
    columnHelper.accessor('budget', {
        header: () => 'Budget',
        cell: info => (
            <Typography variant="h6">
                ${info.row.original.budget}k
            </Typography>
        ),
    }),
];

const StickyTable = () => {
    const [data, _setData] = React.useState<any>(() => [...basics]);

    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
    });

    const handleDownload = () => {
        const headers = ["Users", "Project Name", "Team", "Status", "Budget"];
        const rows = data.map((item: { name: any; pname: any; teams: any[]; status: any; budget: any; }) => [

            item.name,
            item.pname,
            item.teams.map(team => team.text).join(", "),
            item.status,
            item.budget,
        ]);

        const csvContent = [
            headers.join(","),
            ...rows.map((e: any[]) => e.join(","))
        ].join("\n");

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "table-data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        (<DownloadCard title="Sticky Table" onDownload={handleDownload}>
            <Grid container spacing={3}>
                <Grid size={12}>
                    <Box>
                        <TableContainer
                            sx={{
                                maxHeight: '350px',
                                overflowY: 'auto',
                            }}
                        >
                            <Table
                                sx={{
                                    whiteSpace: 'nowrap',
                                }}
                            >
                                <TableHead>
                                    {table.getHeaderGroups().map((headerGroup) => (
                                        <TableRow key={headerGroup.id}>
                                            {headerGroup.headers.map((header) => (
                                                <TableCell key={header.id}>
                                                    <Typography variant="h6">
                                                        {header.isPlaceholder
                                                            ? null
                                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                                    </Typography>
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableHead>
                                <TableBody>
                                    {table.getRowModel().rows.map((row) => (
                                        <TableRow key={row.id}>
                                            {row.getVisibleCells().map((cell) => (
                                                <TableCell key={cell.id}>
                                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    </Box>
                </Grid>
            </Grid>
        </DownloadCard>)
    );
};

export default StickyTable;

===== src/components/shared/AppCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  children: any | any[]
};

const AppCard = ({ children }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  return (
    <Card
      sx={{ display: 'flex', p: 0 }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {children}
    </Card>
  );
};

export default AppCard;

===== src/components/shared/BaseCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card, CardHeader, CardContent, Divider } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title: string;
  children: any | any[]
};

const BaseCard = ({ title, children }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  return (
    <Card
      sx={{ padding: 0 }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader title={title} />
      <Divider />
      <CardContent>{children}</CardContent>
    </Card>
  );
};

export default BaseCard;

===== src/components/shared/BlankCard.tsx =====
import { Card } from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { AppState, useSelector } from 'src/store/Store';

type Props = {
  className?: string;
  children: any | any[]
  sx?: any;
};

const BlankCard = ({ children, className, sx }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ p: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none', position: 'relative', sx }}
      className={className}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {children}
    </Card>
  );
};

export default BlankCard;

===== src/components/shared/ChildCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card, CardHeader, CardContent, Divider } from '@mui/material';

type Props = {
  title?: string;
  children: any | any[]
  codeModel?: any | any[]
};

const ChildCard = ({ title, children, codeModel }: Props) => (
  <Card sx={{ padding: 0, borderColor: (theme: any) => theme.palette.divider }} variant="outlined">
    {title ? (
      <>
        <CardHeader title={title} action={codeModel} />
        <Divider />{' '}
      </>
    ) : (
      ''
    )}

    <CardContent>{children}</CardContent>
  </Card>
);

export default ChildCard;

===== src/components/shared/CodeDialog.tsx =====
import React from "react";
import { IconCode, IconX } from "@tabler/icons-react";
import SyntaxHighlighter from "react-syntax-highlighter";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

import Dialog from "@mui/material/Dialog";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import Tooltip from "@mui/material/Tooltip";
import IconButton from "@mui/material/IconButton";
import Box from "@mui/material/Box";

const CodeDialog = ({ children }: any) => {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };
  return (
    <div>
      <Tooltip title="View Code" placement="top">
        <IconButton color="inherit" onClick={handleClickOpen}>
          <IconCode size="18" />
        </IconButton>
      </Tooltip>
      <Dialog
        open={open}
        sx={{
          ".MuiPaper-root" : {
            minWidth: "700px"
          }
        }}
        onClose={handleClose} 
      >
        <DialogTitle>
          <Box
            display="flex"
            alignItems="center"
            justifyContent="space-between"
          >
            Sample Code
            <IconButton aria-label="close" onClick={handleClose}>
              <IconX />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent className="code-dialog">
          <SyntaxHighlighter language="typescript" style={docco}>
            {children}
          </SyntaxHighlighter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CodeDialog;

===== src/components/shared/DashboardCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Stack, Box } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title?: string;
  subtitle?: string;
  action?: any;
  footer?: any;
  cardheading?: string | any;
  headtitle?: string | any;
  headsubtitle?: string | any;
  children?: any;
  middlecontent?: string | any;
};

const DashboardCard = ({
  title,
  subtitle,
  children,
  action,
  footer,
  cardheading,
  headtitle,
  headsubtitle,
  middlecontent,
}: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {cardheading ? (
        <CardContent>
          <Typography variant="h5">{headtitle}</Typography>
          <Typography variant="subtitle2" color="textSecondary">
            {headsubtitle}
          </Typography>
        </CardContent>
      ) : (
        <CardContent sx={{ p: "30px" }}>
          {title ? (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems={'center'}
              mb={3}
            >
              <Box>
                {title ? <Typography variant="h5">{title}</Typography> : ''}

                {subtitle ? (
                  <Typography variant="subtitle2" color="textSecondary">
                    {subtitle}
                  </Typography>
                ) : (
                  ''
                )}
              </Box>
              {action}
            </Stack>
          ) : null}

          {children}
        </CardContent>
      )}

      {middlecontent}
      {footer}
    </Card>
  );
};

export default DashboardCard;

===== src/components/shared/DashboardWidgetCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Box, Stack } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';
import { IconGridDots } from '@tabler/icons-react';

type Props = {
  title: string;
  subtitle: string;
  dataLabel1: string;
  dataItem1: string;
  dataLabel2: string;
  dataItem2: string;
  children: any;
};

const DashboardWidgetCard = ({
  title,
  subtitle,
  children,
  dataLabel1,
  dataItem1,
  dataLabel2,
  dataItem2,
}: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardContent sx={{ p: '30px' }}>
        {title ? (
          <Box>
            {title ? <Typography variant="h5">{title}</Typography> : ''}

            {subtitle ? (
              <Typography variant="subtitle2" color="textSecondary">
                {subtitle}
              </Typography>
            ) : (
              ''
            )}
          </Box>
        ) : null}

        {children}

        <Stack direction="row" spacing={2} justifyContent="space-between" mt={2}>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="primary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" color="textSecondary">
                {dataLabel1}
              </Typography>
              <Typography variant="h6" fontWeight="600">
                {dataItem1}
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="grey.200"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="grey.400"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" color="textSecondary">
                {dataLabel2}
              </Typography>
              <Typography variant="h6" fontWeight="600">
                {dataItem2}
              </Typography>
            </Box>
          </Stack>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default DashboardWidgetCard;

===== src/components/shared/DownloadCard.tsx =====
import { useTheme } from '@mui/material/styles';
import { Card, CardHeader, Tooltip, Divider, IconButton } from '@mui/material';
import { useSelector } from 'react-redux';
import { IconDownload } from '@tabler/icons-react';

const DownloadCard = ({ title, children, onDownload }: any) => {
  const customizer = useSelector((state: any) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader
        sx={{
          padding: '16px',
        }}
        title={title}
        action={
          <Tooltip title="Download" placement="left">
            <IconButton onClick={onDownload}>
              <IconDownload />
            </IconButton>
          </Tooltip>
        }
      />
      <Divider />
      {children}
    </Card>
  );
};

export default DownloadCard;

===== src/components/shared/InlineItemCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Box } from '@mui/material';

type Props = {
  children: any | any[];
};

const InlineItemCard = ({ children }: Props) => (
  <Box
    sx={{
      display: {
        xs: 'flex',
        sm: 'inline-block',
      },
      flexDirection: {
        xs: 'column',
        sm: 'unset',
      },
      '.MuiChip-root, .MuiButton-root': {
        m: '5px',
      },
    }}
  >
    {children}
  </Box>
);

export default InlineItemCard;

===== src/components/shared/ParentCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardHeader, CardContent, Divider, Box } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title: string;
  footer?: string | any;
  codeModel?: any | any[]
  children: any;
};

const ParentCard = ({ title, children, footer, codeModel }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader title={title} action={codeModel} />
      <Divider />

      <CardContent>{children}</CardContent>
      {footer ? (
        <>
          <Divider />
          <Box p={3}>{footer}</Box>
        </>
      ) : (
        ''
      )}
    </Card>
  );
};

export default ParentCard;

===== src/components/shared/ScrollToTop.tsx =====
import { useEffect, ReactElement } from 'react';
import { useLocation } from 'react-router';

export default function ScrollToTop({ children }: { children: ReactElement | null }) {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    });
  }, [pathname]);

  return children || null;
}

===== src/components/shared/ThreeColumn.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Button, Box, Drawer, useMediaQuery, Paper, Theme } from '@mui/material';


const drawerWidth = 240;
const secdrawerWidth = 320;

type Props = {
  middleChild: any | string;
  leftChild: any | string;
  rightChild: any;
};

const ThreeColumn = ({ leftChild, middleChild, rightChild }: Props) => {
  const [isLeftSidebarOpen, setLeftSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setRightSidebarOpen] = useState(false);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const mdUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('md'));

  return (
    <Paper sx={{ display: 'flex', p: 0 }} variant="outlined">
      {/* ------------------------------------------- */}
      {/* Left Part */}
      {/* ------------------------------------------- */}

      <Drawer
        open={isLeftSidebarOpen}
        onClose={() => setLeftSidebarOpen(false)}
        sx={{
          width: drawerWidth,
          [`& .MuiDrawer-paper`]: { width: drawerWidth, position: 'relative' },
          flexShrink: 0,
        }}
        variant={lgUp ? 'permanent' : 'temporary'}
      >
        {leftChild}
      </Drawer>
      {/* ------------------------------------------- */}
      {/* Middle part */}
      {/* ------------------------------------------- */}
      <Box
        sx={{
          minWidth: secdrawerWidth,
          width: { xs: '100%', md: secdrawerWidth, lg: secdrawerWidth },
          flexShrink: 0,
        }}
      >
        {middleChild}
      </Box>
      {/* ------------------------------------------- */}
      {/* Right part */}
      {/* ------------------------------------------- */}
      <Drawer
        anchor="right"
        open={isRightSidebarOpen}
        onClose={() => setRightSidebarOpen(false)}
        sx={{
          flexShrink: 0,
          width: drawerWidth,
          flex: mdUp ? 'auto' : '',
          [`& .MuiDrawer-paper`]: { width: '100%', position: 'relative' },
        }}
        variant={mdUp ? 'permanent' : 'temporary'}
      >
        {/* back btn Part */}
        {mdUp ? (
          ''
        ) : (
          <Box sx={{ p: 3 }}>
            <Button
              variant="outlined"
              color="primary"
              size="small"
              onClick={() => setRightSidebarOpen(false)}
              sx={{ mb: 3, display: { xs: 'block', md: 'none', lg: 'none' } }}
            >
              Back{' '}
            </Button>
          </Box>
        )}
        {rightChild}
      </Drawer>
    </Paper>
  );
};

export default ThreeColumn;

===== src/components/tables/code/BasicTableCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const BasicTableCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  Chip,
  LinearProgress,
  Menu,
  MenuItem,
  IconButton,
  ListItemIcon,
  Box, Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';
import {
  IconArrowBackUp,
  IconCheck,
  IconDotsVertical,
  IconEdit,
  IconPlus,
  IconTrash,
  IconX,
} from '@tabler/icons-react';


interface rowsType {
  no: number;
  status: string;
  avatar: string;
  cname: string;
  email: string;
  percent: number;
}

const rows: rowsType[] = [
  {
    no: 3066,
    status: 'paid',
    avatar: img1,
    cname: 'Olivia Rhye',
    email: 'olivia@ui.com',
    percent: 60,
  },
  {
    no: 3067,
    status: 'cancelled',
    avatar: img2,
    cname: 'Barbara Steele',
    email: 'steele@ui.com',
    percent: 30,
  },
  {
    no: 3068,
    status: 'paid',
    avatar: img3,
    cname: 'Leonard Gordon',
    email: 'olivia@ui.com',
    percent: 45,
  },
  {
    no: 3069,
    status: 'refunded',
    avatar: img4,
    cname: 'Evelyn Pope',
    email: 'steele@ui.com',
    percent: 37,
  },
  {
    no: 3070,
    status: 'cancelled',
    avatar: img5,
    cname: 'Tommy Garza',
    email: 'olivia@ui.com',
    percent: 87,
  },
  {
    no: 3071,
    status: 'refunded',
    avatar: img6,
    cname: 'Isabel Vasquez',
    email: 'steele@ui.com',
    percent: 32,
  },
];

const Table1 = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <BlankCard>
      <TableContainer>
        <Table aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Invoice</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Customer</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Progress</Typography>
              </TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.no} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                <TableCell scope="row">
                  <Typography variant="subtitle1" color="textPrimary" fontWeight={600}>
                    INV-{row.no}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Chip
                    label={row.status}
                    icon={
                      row.status == 'paid' ? (
                        <IconCheck width={16} />
                      ) : row.status == 'cancelled' ? (
                        <IconX width={16} />
                      ) : (
                        <IconArrowBackUp width={16} />
                      )
                    }
                    sx={{
                      backgroundColor:
                        row.status == 'paid'
                          ? (theme) => theme.palette.primary.light
                          : row.status == 'cancelled'
                          ? (theme) => theme.palette.error.light
                          : (theme) => theme.palette.secondary.light,
                      color:
                        row.status == 'paid'
                          ? (theme) => theme.palette.primary.main
                          : row.status == 'cancelled'
                          ? (theme) => theme.palette.error.main
                          : (theme) => theme.palette.secondary.main,
                      '.MuiChip-icon': {
                        color: 'inherit !important',
                      },
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar src={row.avatar} alt={row.avatar} sx={{ width: 42, height: 42 }} />
                    <Box>
                      <Typography variant="h6">{row.cname}</Typography>
                      <Typography variant="subtitle1" color="textSecondary">
                        {row.email}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Stack direction="row" alignItems="center" spacing={2}>
                    <Box width="100%">
                      <LinearProgress variant="determinate" value={row.percent} color="primary" />
                    </Box>
                    <Typography variant="subtitle2" color="textSecondary">
                      {row.percent}%
                    </Typography>
                  </Stack>
                </TableCell>
                <TableCell>
                  <IconButton
                    id="basic-button"
                    aria-controls={open ? 'basic-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? 'true' : undefined}
                    onClick={handleClick}
                  >
                    <IconDotsVertical width={18} />
                  </IconButton>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'basic-button',
                    }}
                  >
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconPlus width={18} />
                      </ListItemIcon>
                      Add
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconEdit width={18} />
                      </ListItemIcon>
                      Edit
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconTrash width={18} />
                      </ListItemIcon>
                      Delete
                    </MenuItem>
                  </Menu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table1;

`}
      </CodeDialog>
    </>
  );
};

export default BasicTableCode;

===== src/components/tables/Table1.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  Chip,
  LinearProgress,
  Menu,
  MenuItem,
  IconButton,
  ListItemIcon,
  Box, Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';
import {
  IconArrowBackUp,
  IconCheck,
  IconDotsVertical,
  IconEdit,
  IconPlus,
  IconTrash,
  IconX,
} from '@tabler/icons-react';


interface rowsType {
  no: number;
  status: string;
  avatar: string;
  cname: string;
  email: string;
  percent: number;
}

const rows: rowsType[] = [
  {
    no: 3066,
    status: 'paid',
    avatar: img1,
    cname: 'Olivia Rhye',
    email: 'olivia@ui.com',
    percent: 60,
  },
  {
    no: 3067,
    status: 'cancelled',
    avatar: img2,
    cname: 'Barbara Steele',
    email: 'steele@ui.com',
    percent: 30,
  },
  {
    no: 3068,
    status: 'paid',
    avatar: img3,
    cname: 'Leonard Gordon',
    email: 'olivia@ui.com',
    percent: 45,
  },
  {
    no: 3069,
    status: 'refunded',
    avatar: img4,
    cname: 'Evelyn Pope',
    email: 'steele@ui.com',
    percent: 37,
  },
  {
    no: 3070,
    status: 'cancelled',
    avatar: img5,
    cname: 'Tommy Garza',
    email: 'olivia@ui.com',
    percent: 87,
  },
  {
    no: 3071,
    status: 'refunded',
    avatar: img6,
    cname: 'Isabel Vasquez',
    email: 'steele@ui.com',
    percent: 32,
  },
];

const Table1 = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <BlankCard>
      <TableContainer>
        <Table aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Invoice</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Customer</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Progress</Typography>
              </TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.no} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                <TableCell scope="row">
                  <Typography variant="subtitle1" color="textPrimary" fontWeight={600}>
                    INV-{row.no}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Chip
                    label={row.status}
                    icon={
                      row.status == 'paid' ? (
                        <IconCheck width={16} />
                      ) : row.status == 'cancelled' ? (
                        <IconX width={16} />
                      ) : (
                        <IconArrowBackUp width={16} />
                      )
                    }
                    sx={{
                      backgroundColor:
                        row.status == 'paid'
                          ? (theme) => theme.palette.primary.light
                          : row.status == 'cancelled'
                          ? (theme) => theme.palette.error.light
                          : (theme) => theme.palette.secondary.light,
                      color:
                        row.status == 'paid'
                          ? (theme) => theme.palette.primary.main
                          : row.status == 'cancelled'
                          ? (theme) => theme.palette.error.main
                          : (theme) => theme.palette.secondary.main,
                      '.MuiChip-icon': {
                        color: 'inherit !important',
                      },
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar src={row.avatar} alt={row.avatar} sx={{ width: 42, height: 42 }} />
                    <Box>
                      <Typography variant="h6">{row.cname}</Typography>
                      <Typography variant="subtitle1" color="textSecondary">
                        {row.email}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Stack direction="row" alignItems="center" spacing={2}>
                    <Box width="100%">
                      <LinearProgress variant="determinate" value={row.percent} color="primary" />
                    </Box>
                    <Typography variant="subtitle2" color="textSecondary">
                      {row.percent}%
                    </Typography>
                  </Stack>
                </TableCell>
                <TableCell>
                  <IconButton
                    id="basic-button"
                    aria-controls={open ? 'basic-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? 'true' : undefined}
                    onClick={handleClick}
                  >
                    <IconDotsVertical width={18} />
                  </IconButton>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'basic-button',
                    }}
                  >
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconPlus width={18} />
                      </ListItemIcon>
                      Add
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconEdit width={18} />
                      </ListItemIcon>
                      Edit
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconTrash width={18} />
                      </ListItemIcon>
                      Delete
                    </MenuItem>
                  </Menu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table1;

===== src/components/tables/Table2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  Chip,
  Menu,
  MenuItem,
  IconButton,
  ListItemIcon,
  AvatarGroup,
  Box, Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';
import { IconDotsVertical, IconEdit, IconPlus, IconTrash } from '@tabler/icons-react';

interface rowsType {
  status: string;
  avatar: string;
  name: string;
  project: string;
  percent: number;
  users: Array<{ img: string }>;
}

const rows:rowsType[] = [
  {
    status: 'active',
    avatar: img1,
    name: 'Olivia Rhye',
    project: 'Xtreme admin',
    percent: 60,
    users: [{ img: img1 }, { img: img2 }],
  },
  {
    status: 'cancel',
    avatar: img2,
    name: 'Barbara Steele',
    project: 'Adminpro admin',
    percent: 30,
    users: [{ img: img1 }, { img: img2 }, { img: img3 }],
  },
  {
    status: 'active',
    avatar: img3,
    name: 'Leonard Gordon',
    project: 'Monster admin',
    percent: 45,
    users: [{ img: img3 }, { img: img2 }],
  },
  {
    status: 'pending',
    avatar: img4,
    name: 'Evelyn Pope',
    project: 'Materialpro admin',
    percent: 37,
    users: [{ img: img1 }, { img: img2 }, { img: img5 }],
  },
  {
    status: 'cancel',
    avatar: img5,
    name: 'Tommy Garza',
    project: 'Elegant admin',
    percent: 87,
    users: [{ img: img5 }, { img: img6 }],
  },
  {
    status: 'pending',
    avatar: img6,
    name: 'Isabel Vasquez',
    project: 'Modernize admin',
    percent: 32,
    users: [{ img: img2 }, { img: img4 }],
  },
];

const Table2 = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <BlankCard>
      <TableContainer>
        <Table aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">User</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Project Name</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Users</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                <TableCell>
                  <Stack direction="row" alignItems="center" spacing={2}>
                    <Avatar src={row.avatar} alt={row.avatar} sx={{ width: 42, height: 42 }} />
                    <Box>
                      <Typography variant="h6">{row.name}</Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell scope="row">
                  <Typography variant="subtitle1" color="textSecondary">
                    {row.project}
                  </Typography>
                </TableCell>
                <TableCell>
                  <AvatarGroup sx={{ justifyContent: 'start' }}>
                    {row.users.map((user, i) => (
                      <Avatar
                        src={user.img}
                        alt={user.img}
                        key={i}
                        sx={{ width: 35, height: 35 }}
                      />
                    ))}
                  </AvatarGroup>
                </TableCell>
                <TableCell>
                  <Chip
                    label={row.status}
                    sx={{
                      backgroundColor:
                        row.status == 'active'
                          ? (theme) => theme.palette.primary.light
                          : row.status == 'cancel'
                            ? (theme) => theme.palette.error.light
                            : (theme) => theme.palette.success.light,
                      color:
                        row.status == 'active'
                          ? (theme) => theme.palette.primary.main
                          : row.status == 'cancel'
                            ? (theme) => theme.palette.error.main
                            : (theme) => theme.palette.success.main,
                    }}
                  />
                </TableCell>

                <TableCell>
                  <IconButton
                    id="basic-button"
                    aria-controls={open ? 'basic-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? 'true' : undefined}
                    onClick={handleClick}
                  >
                    <IconDotsVertical width={18} />
                  </IconButton>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'basic-button',
                    }}
                  >
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconPlus width={18} />
                      </ListItemIcon>
                      Add
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconEdit width={18} />
                      </ListItemIcon>
                      Edit
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconTrash width={18} />
                      </ListItemIcon>
                      Delete
                    </MenuItem>
                  </Menu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table2;

===== src/components/tables/Table3.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  Chip,
  Menu,
  MenuItem,
  IconButton,
  ListItemIcon,
  Box, Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import img6 from 'src/assets/images/profile/user-6.jpg';
import { IconCircle, IconClock, IconDots, IconEdit, IconPlus, IconTrash } from '@tabler/icons-react';

interface rowsType {
  status: string;
  avatar: string;
  tag: string;
  cname: string;
  email: string;
  teams: Array<{ name: string; bgcolor: string }>;
}

const rows: rowsType[] = [
  {
    status: 'active',
    avatar: img1,
    tag: 'rhye',
    cname: 'Olivia Rhye',
    email: 'olivia@ui.com',
    teams: [
      { name: 'Design', bgcolor: 'primary.main' },
      { name: 'Product', bgcolor: 'secondary.main' },
    ],
  },
  {
    status: 'offline',
    avatar: img2,
    tag: 'steele',
    cname: 'Barbara Steele',
    email: 'steele@ui.com',
    teams: [
      { name: 'Product', bgcolor: 'secondary.main' },
      { name: 'Operations', bgcolor: 'error.main' },
    ],
  },
  {
    status: 'active',
    avatar: img3,
    tag: 'gordon',
    cname: 'Leonard Gordon',
    email: 'olivia@ui.com',
    teams: [
      { name: 'Finance', bgcolor: 'primary.main' },
      { name: 'Customer Success', bgcolor: 'success.main' },
    ],
  },
  {
    status: 'offline',
    avatar: img4,
    tag: 'pope',
    cname: 'Evelyn Pope',
    email: 'steele@ui.com',
    teams: [
      { name: 'Operations', bgcolor: 'error.main' },
      { name: 'Design', bgcolor: 'primary.main' },
    ],
  },
  {
    status: 'active',
    avatar: img5,
    tag: 'garza',
    cname: 'Tommy Garza',
    email: 'olivia@ui.com',
    teams: [{ name: 'Product', bgcolor: 'secondary.main' }],
  },
  {
    status: 'active',
    avatar: img6,
    tag: 'vasquez',
    cname: 'Isabel Vasquez',
    email: 'steele@ui.com',
    teams: [{ name: 'Customer Success', bgcolor: 'success.main' }],
  },
];

const Table3 = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <BlankCard>
      <TableContainer>
        <Table aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Customer</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Email Address</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Teams</Typography>
              </TableCell>

              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.cname} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar src={row.avatar} alt={row.avatar} sx={{ width: 42, height: 42 }} />
                    <Box>
                      <Typography variant="h6">{row.cname}</Typography>
                      <Typography variant="subtitle1" color="textSecondary">
                        @{row.tag}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Chip
                    label={row.status}
                    size="small"
                    icon={
                      row.status == 'active' ? <IconCircle width={14} /> : <IconClock width={14} />
                    }
                    sx={{
                      backgroundColor:
                        row.status == 'active'
                          ? (theme) => theme.palette.success.light
                          : (theme) => theme.palette.grey[100],
                      color:
                        row.status == 'active'
                          ? (theme) => theme.palette.success.main
                          : (theme) => theme.palette.grey[500],
                      '.MuiChip-icon': {
                        color: 'inherit !important',
                      },
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle1" color="textSecondary">
                    {row.email}
                  </Typography>
                </TableCell>
                <TableCell scope="row">
                  <Stack direction="row" spacing={1}>
                    {row.teams.map((team, i) => (
                      <Chip
                        label={team.name}
                        sx={{ backgroundColor: team.bgcolor, color: 'white', fontSize: '11px' }}
                        key={i}
                        size="small"
                      />
                    ))}
                  </Stack>
                </TableCell>
                <TableCell>
                  <IconButton
                    id="basic-button"
                    aria-controls={open ? 'basic-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? 'true' : undefined}
                    onClick={handleClick}
                  >
                    <IconDots width={18} />
                  </IconButton>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'basic-button',
                    }}
                  >
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconPlus width={18} />
                      </ListItemIcon>
                      Add
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconEdit width={18} />
                      </ListItemIcon>
                      Edit
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconTrash width={18} />
                      </ListItemIcon>
                      Delete
                    </MenuItem>
                  </Menu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table3;

===== src/components/tables/Table4.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  Chip,
  Menu,
  MenuItem,
  IconButton,
  ListItemIcon,
  TableHead,
  Box, Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import img1 from 'src/assets/images/blog/blog-img1.jpg';
import img2 from 'src/assets/images/blog/blog-img2.jpg';
import img3 from 'src/assets/images/blog/blog-img3.jpg';
import img4 from 'src/assets/images/blog/blog-img4.jpg';
import img5 from 'src/assets/images/blog/blog-img5.jpg';
import { IconDots, IconEdit, IconPlus, IconTrash } from '@tabler/icons-react';

interface Team {
  name: string;
  bgcolor: string;
  textcolor: string;
}

interface rowType {
  status: 'active' | 'offline';
  avatar: string;
  users: string;
  title: string;
  subtitle: string;
  teams: Team[];
}

const rows: rowType[] = [
  {
    status: 'active',
    avatar: img1,
    users: '4300',
    title: 'Top Authors',
    subtitle: 'Successful Fellas',
    teams: [
      { name: 'Angular', bgcolor: 'error.light', textcolor: 'error.main' },
      { name: 'PHP', bgcolor: 'primary.light', textcolor: 'primary.main' },
    ],
  },
  {
    status: 'offline',
    avatar: img2,
    users: '1200',
    title: 'Popular Authors',
    subtitle: 'Most Successful',
    teams: [{ name: 'Bootstrap', bgcolor: 'primary.light', textcolor: 'primary.main' }],
  },
  {
    status: 'active',
    avatar: img3,
    users: '2000',
    title: 'New Users',
    subtitle: 'Awesome Users',
    teams: [
      { name: 'Reactjs', bgcolor: 'success.light', textcolor: 'success.main' },
      { name: 'Angular', bgcolor: 'error.light', textcolor: 'error.main' },
    ],
  },
  {
    status: 'offline',
    avatar: img4,
    users: '1500',
    title: 'Active Customers',
    subtitle: 'Best Customers',
    teams: [{ name: 'Bootstrap', bgcolor: 'primary.light', textcolor: 'primary.main' }],
  },
  {
    status: 'active',
    avatar: img5,
    users: '9500',
    title: 'Bestseller Theme',
    subtitle: 'Amazing Templates',
    teams: [
      { name: 'Angular', bgcolor: 'error.light', textcolor: 'error.main' },
      { name: 'Reactjs', bgcolor: 'success.light', textcolor: 'success.main' },
    ],
  },
];

const Table4 = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <BlankCard>
      <TableContainer>
        <Table aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Authors</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Courses</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Users</Typography>
              </TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.title} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar
                      src={row.avatar}
                      alt={row.avatar}
                      variant="rounded"
                      sx={{ width: 42, height: 42 }}
                    />
                    <Box>
                      <Typography variant="subtitle1" fontWeight={600}>
                        {row.title}
                      </Typography>
                      <Typography variant="subtitle2" color="textSecondary">
                        {row.subtitle}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Stack direction="row" spacing={1}>
                    {row.teams.map((team, i) => (
                      <Chip
                        label={team.name}
                        sx={{
                          backgroundColor: team.bgcolor,
                          color: team.textcolor,
                          fontSize: '11px',
                        }}
                        key={i}
                        size="small"
                      />
                    ))}
                  </Stack>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle1" color="textSecondary">
                    {row.users} Users
                  </Typography>
                </TableCell>
                <TableCell>
                  <IconButton
                    id="basic-button"
                    aria-controls={open ? 'basic-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? 'true' : undefined}
                    onClick={handleClick}
                  >
                    <IconDots width={18} />
                  </IconButton>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'basic-button',
                    }}
                  >
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconPlus width={18} />
                      </ListItemIcon>
                      Add
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconEdit width={18} />
                      </ListItemIcon>
                      Edit
                    </MenuItem>
                    <MenuItem onClick={handleClose}>
                      <ListItemIcon>
                        <IconTrash width={18} />
                      </ListItemIcon>
                      Delete
                    </MenuItem>
                  </Menu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table4;

===== src/components/tables/Table5.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  TableContainer,
  Table,
  TableRow,
  TableCell,
  TableBody,
  Avatar,
  Typography,
  TableHead,
  Chip,
  Box,
  AvatarGroup,
  Stack
} from '@mui/material';
import BlankCard from '../shared/BlankCard';
import { basicsTableData, TableType } from './tableData';

const basics: TableType[] = basicsTableData;

const Table5 = () => {
  return (
    <BlankCard>
      <TableContainer>
        <Table
          aria-label="simple table"
          sx={{
            whiteSpace: 'nowrap',
          }}
        >
          <TableHead>
            <TableRow>
              <TableCell>
                <Typography variant="h6">Users</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Project Name</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Team</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Status</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="h6">Budget</Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {basics.map((basic) => (
              <TableRow key={basic.id}>
                <TableCell>
                  <Stack direction="row" spacing={2}>
                    <Avatar src={basic.imgsrc} alt={basic.imgsrc} sx={{ width: 35 }} />
                    <Box>
                      <Typography variant="h6" fontWeight="600">
                        {basic.name}
                      </Typography>
                      <Typography color="textSecondary" variant="subtitle2">
                        {basic.post}
                      </Typography>
                    </Box>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Typography color="textSecondary" variant="h6" fontWeight={400}>
                    {basic.pname}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Stack direction="row">
                    <AvatarGroup max={4}>
                      {basic.teams?.map((team) => (
                        <Avatar
                          key={team.id}
                          sx={{
                            bgcolor: team.color,
                            width: 35,
                            height: 35,
                          }}
                        >
                          {team.text}
                        </Avatar>
                      ))}
                    </AvatarGroup>
                  </Stack>
                </TableCell>
                <TableCell>
                  {/* <Chip chipcolor={basic.status == 'Active' ? 'success' : basic.status == 'Pending' ? 'warning' : basic.status == 'Completed' ? 'primary' : basic.status == 'Cancel' ? 'error' : 'secondary'} */}
                  <Chip
                    sx={{
                      bgcolor:
                        basic.status === 'Active'
                          ? (theme) => theme.palette.success.light
                          : basic.status === 'Pending'
                          ? (theme) => theme.palette.warning.light
                          : basic.status === 'Completed'
                          ? (theme) => theme.palette.primary.light
                          : basic.status === 'Cancel'
                          ? (theme) => theme.palette.error.light
                          : (theme) => theme.palette.secondary.light,
                      color:
                        basic.status === 'Active'
                          ? (theme) => theme.palette.success.main
                          : basic.status === 'Pending'
                          ? (theme) => theme.palette.warning.main
                          : basic.status === 'Completed'
                          ? (theme) => theme.palette.primary.main
                          : basic.status === 'Cancel'
                          ? (theme) => theme.palette.error.main
                          : (theme) => theme.palette.secondary.main,
                      borderRadius: '8px',
                    }}
                    size="small"
                    label={basic.status}
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="h6">${basic.budget}k</Typography>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </BlankCard>
  );
};

export default Table5;

===== src/components/tables/tableData.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';

export interface TableType {
  id?: string;
  imgsrc?: string;
  name?: string;
  post?: string;
  pname?: string;
  teams?: any[];
  status?: string;
  budget?: string;
}

export interface EnTableType {
  id: string;
  imgsrc: string;
  name: string;
  email: string;
  pname: string;
  teams: {
    id: string;
    color: string;
    text: string;
  }[];
  status: string;
  weeks: string;
  budget: string;
  post?: string;
  dragHandle?: any;
  actions?: any;
  checkboxes?: any;
}

const basicsTableData: TableType[] = [
  {
    id: '1',
    imgsrc: img1,
    name: 'Sunil Joshi',
    post: 'Web Designer',
    pname: 'Elite Admin',
    teams: [
      {
        id: '1.1',
        color: 'secondary.main',
        text: 'S',
      },
      {
        id: '1.2',
        color: 'error.main',
        text: 'D',
      },
    ],
    status: 'Active',
    budget: '3.9',
  },
  {
    id: '2',
    imgsrc: img2,
    name: 'Andrew McDownland',
    post: 'Project Manager',
    pname: 'Real Homes WP Theme',
    teams: [
      {
        id: '2.1',
        color: 'primary.main',
        text: 'A',
      },
      {
        id: '2.2',
        color: 'warning.main',
        text: 'X',
      },
      {
        id: '2.3',
        color: 'secondary.main',
        text: 'N',
      },
    ],
    status: 'Pending',
    budget: '24.5',
  },
  {
    id: '3',
    imgsrc: img3,
    name: 'Christopher Jamil',
    post: 'Project Manager',
    pname: 'MedicalPro WP Theme',
    teams: [
      {
        id: '3.1',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Completed',
    budget: '12.8',
  },
  {
    id: '4',
    imgsrc: img4,
    name: 'Mathew Anderson',
    post: 'Frontend Engineer',
    pname: 'Hosting Press HTML',
    teams: [
      {
        id: '4.1',
        color: 'primary.main',
        text: 'Y',
      },
      {
        id: '4.2',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Active',
    budget: '2.4',
  },
  {
    id: '5',
    imgsrc: img5,
    name: 'Micheal Doe',
    post: 'Content Writer',
    pname: 'Helping Hands WP Theme',
    teams: [
      {
        id: '5.1',
        color: 'secondary.main',
        text: 'S',
      },
    ],
    status: 'Cancel',
    budget: '9.3',
  },
];

const EnhancedTableData: EnTableType[] = [
  {
    id: '1',
    imgsrc: img1,
    name: 'Sunil Joshi',
    email: 'sunil@gmail.com',
    pname: 'Elite Admin',
    teams: [
      {
        id: '1.1',
        color: 'secondary.main',
        text: 'S',
      },
      {
        id: '1.2',
        color: 'error.main',
        text: 'D',
      },
    ],
    status: 'Active',
    weeks: '11',
    budget: '3.9',
  },
  {
    id: '2',
    imgsrc: img2,
    name: 'Andrew McDownland',
    email: 'andrew@gmail.com',
    pname: 'Real Homes WP Theme',
    teams: [
      {
        id: '2.1',
        color: 'primary.main',
        text: 'A',
      },
      {
        id: '2.2',
        color: 'warning.main',
        text: 'X',
      },
      {
        id: '2.3',
        color: 'secondary.main',
        text: 'N',
      },
    ],
    status: 'Pending',
    weeks: '19',
    budget: '24.5',
  },
  {
    id: '3',
    imgsrc: img3,
    name: 'Christopher Jamil',
    email: 'jamil@gmail.com',
    pname: 'MedicalPro WP Theme',
    teams: [
      {
        id: '3.1',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Completed',
    weeks: '30',
    budget: '12.8',
  },
  {
    id: '4',
    imgsrc: img4,
    name: 'Mathew Anderson',
    email: 'nirav@gmail.com',
    pname: 'Hosting Press HTML',
    teams: [
      {
        id: '4.1',
        color: 'primary.main',
        text: 'Y',
      },
      {
        id: '4.2',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Active',
    weeks: '40',
    budget: '2.4',
  },
  {
    id: '5',
    imgsrc: img5,
    name: 'Micheal Doe',
    email: 'micheal@gmail.com',
    pname: 'Helping Hands WP Theme',
    teams: [
      {
        id: '5.1',
        color: 'secondary.main',
        text: 'S',
      },
    ],
    status: 'Cancel',
    weeks: '1',
    budget: '9.3',
  },
  {
    id: '6',
    imgsrc: img4,
    name: 'Mathew Anderson',
    email: 'nirav@gmail.com',
    pname: 'Hosting Press HTML',
    teams: [
      {
        id: '6.1',
        color: 'primary.main',
        text: 'Y',
      },
      {
        id: '6.2',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Active',
    weeks: '16',
    budget: '2.4',
  },
  {
    id: '7',
    imgsrc: img1,
    name: 'Sunil Joshi',
    email: 'sunil@gmail.com',
    pname: 'Elite Admin',
    teams: [
      {
        id: '7.1',
        color: 'secondary.main',
        text: 'S',
      },
      {
        id: '7.2',
        color: 'error.main',
        text: 'D',
      },
    ],
    status: 'Active',
    weeks: '12',
    budget: '3.9',
  },
  {
    id: '8',
    imgsrc: img2,
    name: 'Andrew McDownland',
    email: 'andrew@gmail.com',
    pname: 'Real Homes WP Theme',
    teams: [
      {
        id: '8.1',
        color: 'primary.main',
        text: 'A',
      },
      {
        id: '8.2',
        color: 'warning.main',
        text: 'X',
      },
      {
        id: '8.3',
        color: 'secondary.main',
        text: 'N',
      },
    ],
    status: 'Pending',
    weeks: '14',
    budget: '24.5',
  },
  {
    id: '9',
    imgsrc: img3,
    name: 'Christopher Jamil',
    email: 'jamil@gmail.com',
    pname: 'MedicalPro WP Theme',
    teams: [
      {
        id: '9.1',
        color: 'error.main',
        text: 'X',
      },
    ],
    status: 'Completed',
    weeks: '12',
    budget: '12.8',
  },

  {
    id: '10',
    imgsrc: img5,
    name: 'Micheal Doe',
    email: 'micheal@gmail.com',
    pname: 'Helping Hands WP Theme',
    teams: [
      {
        id: '10.1',
        color: 'secondary.main',
        text: 'S',
      },
    ],
    status: 'Cancel',
    weeks: '9',
    budget: '9.3',
  },
];
export { basicsTableData, EnhancedTableData };

===== src/components/widgets/banners/Banner1.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Card, CardContent, Typography, Button, Box, Grid2 as Grid } from '@mui/material';
import trackBg from 'src/assets/images/backgrounds/login-bg.svg';
import ParentCard from '../../shared/ParentCard';

import Transection from './code/TransectionCode';

const Banner1 = () => {
  return (
    (<ParentCard title='Transection' codeModel={<Transection />}>
      <Card
        elevation={0}
        sx={{
          backgroundColor: (theme) => theme.palette.secondary.light,
          py: 0,
          overflow: 'hidden',
          position: 'relative',
        }}
      >
        <CardContent sx={{ p: '30px' }}>
          <Grid container spacing={3} justifyContent="space-between">
            <Grid
              display="flex"
              alignItems="center"
              size={{
                sm: 6
              }}>
              <Box
                sx={{
                  textAlign: {
                    xs: 'center',
                    sm: 'left',
                  },
                }}
              >
                <Typography variant="h5">Track your every Transaction Easily</Typography>
                <Typography variant="subtitle1" color="textSecondary" my={2}>
                  Track and record your every income and expence easily to control your balance
                </Typography>
                <Button variant="contained" color="secondary">
                  Download
                </Button>
              </Box>
            </Grid>
            <Grid
              size={{
                sm: 4
              }}>
              <Box mb="-90px">
                <img src={trackBg} alt={trackBg} />
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </ParentCard>)
  );
};

export default Banner1;

===== src/components/widgets/banners/Banner2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import starBg from 'src/assets/images/backgrounds/gold.png';
import ParentCard from '../../shared/ParentCard';

import NotificationCode from './code/NotificationCode';

const Banner2 = () => {
  return (
    <ParentCard title='Notification' codeModel={<NotificationCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="subtitle1" textAlign="center" mb={2} textTransform="uppercase" color="textSecondary">
          Level Up
        </Typography>
        <Box textAlign="center">
          <img src={starBg} alt="star" width={150} />

          <Typography variant="h5">You reach all Notifications</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>Congratulations,<br/> Tap to continue next task.</Typography>

          <Button color="primary" variant="contained" size="large">
            Yes, Got it!
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner2;

===== src/components/widgets/banners/Banner3.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Avatar, Badge, Box, Stack } from '@mui/material';
import userBg from 'src/assets/images/profile/user-1.jpg';
import ParentCard from '../../shared/ParentCard';

import FriendCardCode from './code/FriendCardCode';

const Banner3 = () => {
  return (
    <ParentCard title='Friend Card' codeModel={<FriendCardCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5" textAlign="center" mb={3}>
          Mutual Friend Revealed
        </Typography>
        <Box textAlign="center">
          <Badge badgeContent={1} color="error" overlap="circular">
            <Avatar src={userBg} alt="userBg" sx={{ width: 140, height: 140 }} />
          </Badge>

          <Typography variant="h5" mt={3}>
            Tommoie Henderson
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Accept the request and <br/> type a message
          </Typography>

          <Stack direction="row" spacing={2} justifyContent="center">
            <Button color="primary" variant="contained" size="large">
              Accept
            </Button>
            <Button color="error" variant="outlined" size="large">
              Remove
            </Button>
          </Stack>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner3;

===== src/components/widgets/banners/Banner4.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import oopsBg from 'src/assets/images/backgrounds/maintenance.svg';
import ParentCard from 'src/components/shared/ParentCard';

import ErrorBannerCode from './code/ErrorBannerCode';

const Banner4 = () => {
  return (
    <ParentCard title='Error' codeModel={<ErrorBannerCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={oopsBg} alt="star" width={200} />

          <Typography variant="h5" mt={3}>
            Oops something went wrong!
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Trying again to bypasses these
            <br /> temporary error.
          </Typography>

          <Button color="error" variant="contained" size="large">
            Retry
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner4;

===== src/components/widgets/banners/Banner5.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import shopBg from 'src/assets/images/products/empty-shopping-cart.svg';
import ParentCard from '../../shared/ParentCard';

import EmptyCartCode from './code/EmptyCartCode';

const Banner5 = () => {
  return (
    <ParentCard title='Empty Cart' codeModel={<EmptyCartCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={shopBg} alt="star" width={200} />

          <Typography variant="h5" mt={3}>
            Oop, Your cart is empty!
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Get back to shopping and get
            <br /> rewards from it.
          </Typography>

          <Button color="primary" variant="contained" size="large">
            Go for shopping!
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner5;

===== src/components/widgets/banners/code/EmptyCartCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const EmptyCartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner5 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={"/images/products/empty-shopping-cart.svg"} width={200} />

          <Typography variant="h5" mt={3}>Oop, Your cart is empty!</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Get back to shopping and get<br /> rewards from it.
          </Typography>

          <Button color="primary" variant="contained" size="large">
            Go for shopping!
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner5;

`}
      </CodeDialog>
    </>
  );
};

export default EmptyCartCode;

===== src/components/widgets/banners/code/ErrorBannerCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ErrorBannerCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner4 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={"/images/backgrounds/maintenance2.svg"} alt="star" width={200} />

          <Typography variant="h5" mt={3}>Oops something went wrong!</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Trying again to bypasses these<br /> temporary error.
          </Typography>

          <Button color="error" variant="contained" size="large">
            Retry
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner4;
`}
      </CodeDialog>
    </>
  );
};

export default ErrorBannerCode;

===== src/components/widgets/banners/code/FriendCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FriendCard = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Avatar, Badge, Card } from '@mui/material';
import { Box, Stack } from '@mui/system';

const Banner3 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5" textAlign="center" mb={3}>
          Mutual Friend Revealed
        </Typography>
        <Box textAlign="center">
          <Badge badgeContent={1} color="error" overlap="circular">
            <Avatar src={"/images/profile/user-3.jpg"} alt="userBg" sx={{ width: 140, height: 140 }} />
          </Badge>

          <Typography variant="h5" mt={3}>
            Tommoie Henderson
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Accept the request and <br/> type a message
          </Typography>

          <Stack direction="row" spacing={2} justifyContent="center">
            <Button color="primary" variant="contained" size="large">
              Accept
            </Button>
            <Button color="error" variant="outlined" size="large">
              Remove
            </Button>
          </Stack>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner3;
`}
      </CodeDialog>
    </>
  );
};

export default FriendCard;

===== src/components/widgets/banners/code/NotificationCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const NotificationCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner2 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="subtitle1" textAlign="center" mb={2} textTransform="uppercase" color="textSecondary">
          Level Up
        </Typography>
        <Box textAlign="center">
          <img src={"/images/backgrounds/gold.png"} alt="star" width={150} />

          <Typography variant="h5">You reach all Notifications</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>Congratulations,<br/> Tap to continue next task.</Typography>

          <Button color="primary" variant="contained" size="large">
            Yes, Got it!
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner2;
`}
      </CodeDialog>
    </>
  );
};

export default NotificationCode;

===== src/components/widgets/banners/code/TransectionCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const Transection = () => {
  return (
    <>
      <CodeDialog>
        {`
import { Card, CardContent, Typography, Button, Box, Grid2 as Grid } from '@mui/material';

const Banner1 = () => {
  return (
    <Card
      elevation={0}
      sx={{
        backgroundColor: (theme) => theme.palette.secondary.light,
        py: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <CardContent sx={{ p: '30px' }}>
        <Grid container spacing={3} justifyContent="space-between">
          <Grid
              display="flex"
              alignItems="center"
              size={{
                sm: 6
              }}>
            <Box
              sx={{
                textAlign: {
                  xs: 'center',
                  sm: 'left',
                },
              }}
            >
              <Typography variant="h5">Track your every Transaction Easily</Typography>
              <Typography variant="subtitle1" color="textSecondary" my={2}>
                Track and record your every income and expence easily to control your balance
              </Typography>
              <Button variant="contained" color="secondary">
                Download
              </Button>
            </Box>
          </Grid>
          <Grid
              size={{
                sm: 4
              }}>
            <Box mb="-90px">
              <img src={"/images/backgrounds/track-bg.png"} alt={"trackBg"} />
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default Banner1;
`}
      </CodeDialog>
    </>
  );
};

export default Transection;

===== src/components/widgets/cards/code/ComplexCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ComplexCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import {
  CardContent,
  Typography,
  Avatar,
  Grid2 as Grid,
  Card
  CardMedia,
  Stack,
  Tooltip,
  Chip,
  Box,
} from '@mui/material';
import { IconMessage2, IconEye, IconPoint } from '@tabler/icons-react';

const complexCard = [
  {
    avatar: "/images/profile/user-4.jpg",
    coveravatar: "/images/blog/blog-img1.jpg",
    title: 'As yen tumbles, gadget-loving Japan goes for secondhand iPhones',
    category: 'Social',
    name: 'Georgeanna Ramero',
    view: '9,125',
    comments: '3',
    time: 'Mon, Dec 19',
  },
  {
    avatar: "/images/profile/user-5.jpg",
    coveravatar: "/images/blog/blog-img2.jpg",
    title: 'Intel loses bid to revive antitrust case against patent foe Fortress',
    category: 'Gadget',
    name: 'Georgeanna Ramero',
    view: '4,150',
    comments: '38',
    time: 'Sun, Dec 18',
  },
  {
    avatar: "/images/profile/user-3.jpg",
    coveravatar: "/images/blog/blog-img3.jpg",
    title: 'COVID outbreak deepens as more lockdowns loom in China',
    category: 'Health',
    name: 'Georgeanna Ramero',
    view: '9,480',
    comments: '12',
    time: 'Sat, Dec 17',
  },
];

const ComplexCard = () => {
  return (
      <Grid container spacing={3}>
        {complexCard.map((author, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card>
              <>
                <Typography component={Link} href="/">
                  <CardMedia
                    component="img"
                    height="240"
                    image={author.coveravatar}
                    alt="green iguana"
                  />
                </Typography>
                <CardContent>
                  <Stack direction="row" sx={{ marginTop: '-45px' }}>
                    <Tooltip title={author.name} placement="top">
                      <Avatar aria-label="recipe" src={author.avatar}></Avatar>
                    </Tooltip>
                    <Chip
                      sx={{ marginLeft: 'auto', marginTop: '-21px', backgroundColor: 'white' }}
                      label="2 min Read"
                      size="small"
                    ></Chip>
                  </Stack>
                  <Chip label={author.category} size="small" sx={{ marginTop: 2 }}></Chip>
                  <Box my={3}>
                    <Typography
                      gutterBottom
                      variant="h5"
                      color="inherit"
                      sx={{ textDecoration: 'none' }}
                      component={Link}
                      to="/"
                    >
                      {author.title}
                    </Typography>
                  </Box>
                  <Stack direction="row" gap={3} alignItems="center">
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconEye size="18" /> {author.view}
                    </Stack>
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconMessage2 size="18" /> {author.comments}
                    </Stack>

                    <Stack direction="row" ml="auto" alignItems="center">
                      <IconPoint size="16" />
                      <small>{author.time}</small>
                    </Stack>
                  </Stack>
                </CardContent>
              </>
            </Card>
          </Grid>
        ))}
      </Grid>
  );
};

export default ComplexCard;
`}
      </CodeDialog>
    </>
  );
};

export default ComplexCardCode;

===== src/components/widgets/cards/code/EcommerceCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const EcommerceCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import { CardContent, Typography, Grid2 as Grid, Rating, Tooltip, Fab, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconBasket } from '@tabler/icons-react';
import Image from 'next/image';

const ecoCard = [
  {
    title: 'Boat Headphone',
    subheader: 'September 14, 2023',
    photo: "/images/products/s4.jpg",
    salesPrice: 375,
    price: 285,
    rating: 4,
  },
  {
    title: 'MacBook Air Pro',
    subheader: 'September 14, 2023',
    photo: "/images/products/s5.jpg",
    salesPrice: 650,
    price: 900,
    rating: 5,
  },
  {
    title: 'Red Valvet Dress',
    subheader: 'September 14, 2023',
    photo: "/images/products/s7.jpg",
    salesPrice: 150,
    price: 200,
    rating: 3,
  },
  {
    title: 'Cute Soft Teddybear',
    subheader: 'September 14, 2023',
    photo: "/images/products/s11.jpg",
    salesPrice: 285,
    price: 345,
    rating: 2,
  },
];

const EcommerceCard = () => {
  return (
    <Grid container spacing={3}>
      {ecoCard.map((product, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4,
              lg: 3
            }}>
          <Card>
            <Typography component={Link} href="/">
              <Image src={product.photo} alt="img" width={250} height={268} style={{width: '100%'}} />
            </Typography>
            <Tooltip title="Add To Cart">
              <Fab
                size="small"
                color="primary"
                sx={{ bottom: '75px', right: '15px', position: 'absolute' }}
              >
                <IconBasket size="16" />
              </Fab>
            </Tooltip>
            <CardContent sx={{ p: 3, pt: 2 }}>
              <Typography variant="h6">{product.title}</Typography>
              <Stack direction="row" alignItems="center" justifyContent="space-between" mt={1}>
                <Stack direction="row" alignItems="center">
                  <Typography variant="h6">{product.price}</Typography>
                  <Typography color="textSecondary" ml={1} sx={{ textDecoration: 'line-through' }}>
                    {product.salesPrice}
                  </Typography>
                </Stack>
                <Rating name="read-only" size="small" value={product.rating} readOnly />
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default EcommerceCard;

`}
      </CodeDialog>
    </>
  );
};

export default EcommerceCardCode;

===== src/components/widgets/cards/code/FollowerCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FollowerCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Avatar, Box, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconMapPin } from '@tabler/icons-react';

const followerCard = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: "/images/profile/user-4.jpg",
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: "/images/profile/user-2.jpg",
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: "/images/profile/user-3.jpg",
  },
];

const FollowerCard = () => {
  return (
    <Grid container spacing={3}>
      {followerCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
          <Card>
            <CardContent>
              <Stack direction="row" spacing={2} alignItems="center" justifyContent="space-between">
                <Stack direction="row" spacing={2}>
                  <Avatar src={card.avatar} alt={card.avatar} />
                  <Box>
                    <Typography variant="h6">{card.title}</Typography>
                    <Typography
                      variant="subtitle1"
                      color="textSecondary"
                      display="flex"
                      alignItems="center"
                      gap="3px"
                    >
                      <IconMapPin width={18} /> {card.location}
                    </Typography>
                  </Box>
                </Stack>
                <Button variant="contained" color="primary">
                  Follow
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default FollowerCard;
`}
      </CodeDialog>
    </>
  );
};

export default FollowerCardCode;

===== src/components/widgets/cards/code/FriendCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const FriendCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Box, AvatarGroup, Avatar, Card } from '@mui/material';
import { Stack } from '@mui/system';

const followerCard = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: "/images/profile/user-5.jpg",
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: "/images/profile/user-2.jpg",
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: "/images/profile/user-3.jpg",
  },
  {
    title: 'Lora Powers',
    location: 'Nepal',
    avatar: "/images/profile/user-2.jpg",
  },
];

const FriendCard = () => {
  return (
    <Grid container spacing={3}>
      {followerCard.map((card, index) => (
        <Grid item xs={12} sm={6} lg={3} key={index}>
          <Card>
            <CardContent>
              <Avatar src={card.avatar} sx={{ height: 80, width: 80 }}></Avatar>
              <Stack direction="row" spacing={2} mt={3}>
                <Box>
                  <Typography variant="h6" mb={1}>
                    {card.title}
                  </Typography>
                  <Stack direction="row" spacing={2} alignItems="center">
                    <AvatarGroup>
                      <Avatar sx={{ height: 28, width: 28 }} alt="Remy Sharp" src={"/images/profile/user-4.jpg"} />
                      <Avatar sx={{ height: 28, width: 28 }} alt="Travis Howard" src={"/images/profile/user-2.jpg"} />
                      <Avatar sx={{ height: 28, width: 28 }} alt="Cindy Baker" src={"/images/profile/user-3.jpg"} />
                    </AvatarGroup>
                    <Typography variant="subtitle2" color="textSecondary">
                      3 mutual friends
                    </Typography>
                  </Stack>
                </Box>
              </Stack>
              <Stack spacing={2} mt={3}>
                <Button size="large" variant="text" color="primary">
                  Add Friend
                </Button>
                <Button size="large" variant="text" color="secondary">
                  Remove
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default FriendCard;
`}
      </CodeDialog>
    </>
  );
};

export default FriendCardCode;

===== src/components/widgets/cards/code/GiftCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const GiftCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, CardMedia, IconButton, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconGift } from '@tabler/icons-react';

const giftCard = [
  {
    title: 'Andrew Grant',
    avatar: "/images/products/s1.jpg",
  },
  {
    title: 'Leo Pratt',
    avatar: "/images/products/s2.jpg",
  },
];

const GiftCard = () => {
  return (
    <Grid container spacing={3}>
      {giftCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6
            }}>
          <Card>
            <CardContent>
              <Stack direction="row" alignItems="center" justifyContent="space-between" spacing={2}>
                <Typography variant="h6" mb={1}>
                  {card.title}
                </Typography>

                <IconButton color="secondary">
                  <IconGift width={20} />
                </IconButton>
              </Stack>
              <CardMedia component="img" image={card.avatar} sx={{ height: 160, borderRadius: 2 }} />

              <Stack spacing={2} mt={3}>
                <Button size="large" variant="contained" color="primary">
                  Gift to Friend ($50.00)
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default GiftCard;
`}
      </CodeDialog>
    </>
  );
};

export default GiftCardCode;

===== src/components/widgets/cards/code/MusicCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const MusicCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Card, CardMedia, Box, IconButton, Stack, Skeleton } from '@mui/material';
import { IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';

const musicCard = [
  {
    title: 'Uptown Funk',
    subheader: 'Jon Bon Jovi',
    img: "/images/blog/blog-img5.jpg",
  },
  {
    title: 'Blank Space',
    subheader: 'Madonna',
    img: "/images/blog/blog-img4.jpg",
  },
  {
    title: 'Lean On',
    subheader: 'Jennifer Lopez',
    img: "/images/blog/blog-img3.jpg",
  },
];

const MusicCard = () => {
  return (
    <Grid container spacing={3}>
        {musicCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card sx={{ display: 'flex', p: 0 }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flex: '1 0 auto' }}>
                  <Typography component="div" variant="h5">
                    {card.title}
                  </Typography>
                  <Typography variant="subtitle1" color="text.secondary" component="div">
                    {card.subheader}
                  </Typography>
                </CardContent>
                <Stack direction="row" spacing={2} px={2} pb={3}>
                  <IconButton aria-label="previous">
                    <IconPlayerSkipBack width="20" />
                  </IconButton>
                  <IconButton aria-label="play/pause" color="error">
                    <IconPlayerPlay width="20" />
                  </IconButton>
                  <IconButton aria-label="next">
                    <IconPlayerSkipForward width="20" />
                  </IconButton>
                </Stack>
              </Box>
              {isLoading ? (
                <Skeleton variant="rectangular" animation="wave" width="100%" height={180}></Skeleton>
              ) : (
                <CardMedia
                  component="img"
                  sx={{ width: '100%', height: 180 }}
                  image={card.img}
                  alt="Live from space album cover"
                />
              )}
            </Card>
          </Grid>
        ))}
      </Grid>
  );
};

export default MusicCard;
`}
      </CodeDialog>
    </>
  );
};

export default MusicCardCode;

===== src/components/widgets/cards/code/ProfileCardCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const ProfileCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, IconButton, Divider, Avatar, Box, Card } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { Stack } from '@mui/system';
import {
  IconBrandFacebook,
  IconBrandGithub,
  IconBrandInstagram,
  IconBrandTwitter,
} from '@tabler/icons-react';

const SocialIcons = [
  {
    name: 'Facebook',
    icon: <IconBrandFacebook size="18" color="#1877F2" />,
  },
  {
    name: 'Instagram',
    icon: <IconBrandInstagram size="18" color="#D7336D" />,
  },
  {
    name: 'Github',
    icon: <IconBrandGithub size="18" color="#006097" />,
  },
  {
    name: 'Twitter',
    icon: <IconBrandTwitter size="18" color="#1C9CEA" />,
  },
];

const profileCard = [
  {
    name: 'Andrew Grant',
    role: 'Technology Director',
    avatar: "/images/profile/user-3.jpg",
  },
  {
    name: 'Leo Pratt',
    role: 'Telecom Analyst',
    avatar: "/images/profile/user-4.jpg",
  },
  {
    name: 'Charles Nunez',
    role: 'Environmental Specialist',
    avatar: "/images/profile/user-5.jpg",
  },
];

const ProfileCard = () => {
  const theme = useTheme();

  return (
    <Grid container spacing={3}>
      {profileCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
          <Card>
            <CardContent>
              <Stack direction={'column'} gap={2} alignItems="center">
                <Avatar alt="Remy Sharp" src={card.avatar} sx={{ width: '80px', height: '80px' }} />
                <Box textAlign={'center'}>
                  <Typography variant="h5">{card.name}</Typography>
                  <Typography variant="caption">{card.role}</Typography>
                </Box>
              </Stack>
            </CardContent>
            <Divider />
            <Box
              p={2}
              py={1}
              textAlign={'center'}
              sx={{
                backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.05)' : 'grey.100',
              }}
            >
              {SocialIcons.map((sicon) => {
                return <IconButton key={sicon.name}>{sicon.icon}</IconButton>;
              })}
            </Box>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default ProfileCard;
`}
      </CodeDialog>
    </>
  );
};

export default ProfileCardCode;

===== src/components/widgets/cards/code/SettingsCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const SettingsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Avatar, Divider, Button, Card } from '@mui/material';
import { Box, Stack } from '@mui/system';
import { IconMessage, IconVolume } from '@tabler/icons-react';
import { styled } from '@mui/material/styles';
import { Slider } from '@mui/material';
import { Switch } from '@mui/material';

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

const CustomSwitch = styled((props: any) => <Switch {...props} />)(({ theme }) => ({
  '&.MuiSwitch-root': {
    width: '68px',
    height: '49px',
  },
  '&  .MuiButtonBase-root': {
    top: '6px',
    left: '6px',
  },
  '&  .MuiButtonBase-root.Mui-checked .MuiSwitch-thumb': {
    backgroundColor: 'primary.main',
  },
  '& .MuiSwitch-thumb': {
    width: '18px',
    height: '18px',
    borderRadius: '6px',
  },

  '& .MuiSwitch-track': {
    backgroundColor: theme.palette.grey[200],
    opacity: 1,
    borderRadius: '5px',
  },
  '& .MuiSwitch-switchBase': {
    '&.Mui-checked': {
      '& + .MuiSwitch-track': {
        backgroundColor: 'primary',
        opacity: 0.18,
      },
    },
  },
}));

const Settings = () => {
  const [value3, setValue3] = React.useState(45);
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    <Card>
      <CardContent sx={{p: "30px"}}>
        <Typography variant="h5">Settings</Typography>
        <Stack spacing={2} mt={3}>
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'primary.main', width: 48, height: 48 }}>
              <IconVolume width={22} />
            </Avatar>
            <Box width="100%">
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Typography variant="h6">Sound</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  45%
                </Typography>
              </Box>
              <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            </Box>
          </Stack>
          <Divider />
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'secondary.main', width: 48, height: 48 }}>
              <IconMessage width={22} />
            </Avatar>
            <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
              <Box>
                <Typography variant="h6" mb={1}>Chat</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  Turn on chat during call
                </Typography>
              </Box>
              <Box>
                <CustomSwitch />
              </Box>
            </Box>
          </Stack>
          <Divider />
        </Stack>
        <Stack direction="row" justifyContent="end" spacing={2} mt={2}>
            <Button variant="outlined" color="error">Cancel</Button>
            <Button variant="contained" color="primary">Save</Button>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default Settings;
`}
      </CodeDialog>
    </>
  );
};

export default SettingsCode;

===== src/components/widgets/cards/code/UpcomingActivityCode.tsx =====
import CodeDialog from 'src/components/shared/CodeDialog';
const UpcomingActivityCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import { IconDatabase, IconMail, IconMapPin, IconPhone, IconScreenShare } from '@tabler/icons-react';


const UpcomingActivity = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const success = theme.palette.success.main;
  const successlight = theme.palette.success.light;

  const stats = [
    {
      title: 'Trip to singapore',
      subtitle: 'working on',
      time: 5,
      color: primary,
      lightcolor: primarylight,
      icon: <IconMapPin width={20} />,
    },
    {
      title: 'Archived Data',
      subtitle: 'working on',
      time: 10,
      color: secondary,
      lightcolor: secondarylight,
      icon: <IconDatabase width={20} />,
    },
    {
      title: 'Meeting with client',
      subtitle: 'pending',
      time: 15,
      color: warning,
      lightcolor: warninglight,
      icon: <IconPhone width={20} />,
    },
    {
      title: 'Screening Task Team',
      subtitle: 'working on',
      time: 20,
      color: error,
      lightcolor: errorlight,
      icon: <IconScreenShare width={20} />,
    },
    {
      title: 'Send envelope to John',
      subtitle: 'done',
      time: 20,
      color: success,
      lightcolor: successlight,
      icon: <IconMail width={20} />,
    },
  ];

  return (
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={3}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                  {stat.icon}
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>

              <Typography variant="subtitle2" color="textSecondary">
                {stat.time} mins
              </Typography>
            </Stack>
          ))}
        </Stack>
      </>
  );
};

export default UpcomingActivity;
`}
      </CodeDialog>
    </>
  );
};

export default UpcomingActivityCode;

===== src/components/widgets/cards/ComplexCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import {
  CardContent,
  Typography,
  Avatar,
  Grid2 as Grid,
  CardMedia,
  Stack,
  Tooltip,
  Chip,
  Box,
  Skeleton
} from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import { IconMessage2, IconEye, IconPoint } from '@tabler/icons-react';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import img1 from 'src/assets/images/blog/blog-img1.jpg';
import img2 from 'src/assets/images/blog/blog-img2.jpg';
import img3 from 'src/assets/images/blog/blog-img3.jpg';

import ComplexCardCode from './code/ComplexCardCode';
import BlankCard from '../../shared/BlankCard';

interface cardType {
  avatar: string;
  coveravatar: string;
  title: string;
  category: string;
  name: string;
  view: string;
  comments: string;
  time: string;
}

const complexCard: cardType[] = [
  {
    avatar: user1,
    coveravatar: img1,
    title: 'As yen tumbles, gadget-loving Japan goes for secondhand iPhones',
    category: 'Social',
    name: 'Georgeanna Ramero',
    view: '9,125',
    comments: '3',
    time: 'Mon, Dec 19',
  },
  {
    avatar: user2,
    coveravatar: img2,
    title: 'Intel loses bid to revive antitrust case against patent foe Fortress',
    category: 'Gadget',
    name: 'Georgeanna Ramero',
    view: '4,150',
    comments: '38',
    time: 'Sun, Dec 18',
  },
  {
    avatar: user3,
    coveravatar: img3,
    title: 'COVID outbreak deepens as more lockdowns loom in China',
    category: 'Health',
    name: 'Georgeanna Ramero',
    view: '9,480',
    comments: '12',
    time: 'Sat, Dec 17',
  },
];

const ComplexCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Complex Card' codeModel={<ComplexCardCode />} >
      <Grid container spacing={3}>
        {complexCard.map((author, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard className="hoverCard">
              <>
                <Typography component={Link} to="/">
                  {isLoading ? (
                    <Skeleton variant="rectangular" animation="wave" width="100%" height={240}></Skeleton>
                  ) : (
                    <CardMedia
                      component="img"
                      height="240"
                      image={author.coveravatar}
                      alt="green iguana"
                    />
                  )}
                </Typography>
                <CardContent>
                  <Stack direction="row" sx={{ marginTop: '-45px' }}>
                    <Tooltip title={author.name} placement="top">
                      <Avatar aria-label="recipe" src={author.avatar}></Avatar>
                    </Tooltip>
                    <Chip
                      sx={{ marginLeft: 'auto', marginTop: '-21px', backgroundColor: (theme) => theme.palette.mode === 'dark' ? theme.palette.background.default : 'white', }}
                      label="2 min Read"
                      size="small"
                    ></Chip>
                  </Stack>
                  <Chip label={author.category} size="small" sx={{ marginTop: 2 }}></Chip>
                  <Box my={3}>
                    <Typography
                      gutterBottom
                      variant="h5"
                      color="inherit"
                      sx={{ textDecoration: 'none' }}
                      component={Link}
                      to="/"
                    >
                      {author.title}
                    </Typography>
                  </Box>
                  <Stack direction="row" gap={3} alignItems="center">
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconEye size="18" /> {author.view}
                    </Stack>
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconMessage2 size="18" /> {author.comments}
                    </Stack>

                    <Stack direction="row" ml="auto" alignItems="center">
                      <IconPoint size="16" />
                      <small>{author.time}</small>
                    </Stack>
                  </Stack>
                </CardContent>
              </>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default ComplexCard;

===== src/components/widgets/cards/EcommerceCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import { CardContent, Typography, Grid2 as Grid, Rating, Tooltip, Fab, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/products/s4.jpg';
import img2 from 'src/assets/images/products/s5.jpg';
import img3 from 'src/assets/images/products/s7.jpg';
import img4 from 'src/assets/images/products/s11.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';
import { IconBasket } from '@tabler/icons-react';

import EcommerceCardCode from './code/EcommerceCardCode';

interface ecocardType {
  title: string;
  subheader: string;
  photo: string;
  salesPrice: number;
  price: number;
  rating: number;
}

const ecoCard: ecocardType[] = [
  {
    title: 'Boat Headphone',
    subheader: 'September 14, 2023',
    photo: img1,
    salesPrice: 375,
    price: 285,
    rating: 4,
  },
  {
    title: 'MacBook Air Pro',
    subheader: 'September 14, 2023',
    photo: img2,
    salesPrice: 650,
    price: 900,
    rating: 5,
  },
  {
    title: 'Red Valvet Dress',
    subheader: 'September 14, 2023',
    photo: img3,
    salesPrice: 150,
    price: 200,
    rating: 3,
  },
  {
    title: 'Cute Soft Teddybear',
    subheader: 'September 14, 2023',
    photo: img4,
    salesPrice: 285,
    price: 345,
    rating: 2,
  },
];

const EcommerceCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Ecommerce Card' codeModel={<EcommerceCardCode />}>
      <Grid container spacing={3}>
        {ecoCard.map((product, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4,
              lg: 3
            }}>
            <BlankCard>
              <Typography component={Link} to="/">
                {isLoading ? (
                  <Skeleton variant="rectangular" animation="wave" width="100%" height={270}></Skeleton>
                ) : (
                  <img src={product.photo} alt="img" width="100%" />
                )}
              </Typography>
              <Tooltip title="Add To Cart">
                <Fab
                  size="small"
                  color="primary"
                  sx={{ bottom: '75px', right: '15px', position: 'absolute' }}
                >
                  <IconBasket size="16" />
                </Fab>
              </Tooltip>
              <CardContent sx={{ p: 3, pt: 2 }}>
                <Typography variant="h6">{product.title}</Typography>
                <Stack direction="row" alignItems="center" justifyContent="space-between" mt={1}>
                  <Stack direction="row" alignItems="center">
                    <Typography variant="h6">${product.price}</Typography>
                    <Typography color="textSecondary" ml={1} sx={{ textDecoration: 'line-through' }}>
                      ${product.salesPrice}
                    </Typography>
                  </Stack>
                  <Rating name="read-only" size="small" value={product.rating} readOnly />
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default EcommerceCard;

===== src/components/widgets/cards/FollowerCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Avatar, Box, Stack } from '@mui/material';
import { IconMapPin } from '@tabler/icons-react';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from 'src/components/shared/ParentCard';

import FollowerCardCode from './code/FollowerCardCode';

interface Follower {
  title: string;
  location: string;
  avatar: string;
}

const followerCard: Follower[] = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: img2,
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: img3,
  },
];

const FollowerCard = () => {
  return (
    (<ParentCard title='Follower Card' codeModel={<FollowerCardCode />}>
      <Grid container spacing={3}>
        {followerCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction="row" spacing={2} alignItems="center" justifyContent="space-between">
                  <Stack direction="row" spacing={2}>
                    <Avatar src={card.avatar} alt={card.avatar} />
                    <Box>
                      <Typography variant="h6">{card.title}</Typography>
                      <Typography
                        variant="subtitle1"
                        color="textSecondary"
                        display="flex"
                        alignItems="center"
                        gap="3px"
                      >
                        <IconMapPin width={18} /> {card.location}
                      </Typography>
                    </Box>
                  </Stack>
                  <Button variant="contained" color="primary">
                    Follow
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default FollowerCard;

===== src/components/widgets/cards/FriendCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Box, AvatarGroup, Avatar, Stack } from '@mui/material';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';
import FriendCardCode from './code/FriendCardCode';

interface Follower {
  title: string;
  location: string;
  avatar: string;
}

const followerCard: Follower[] = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: img2,
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: img3,
  },
  {
    title: 'Lora Powers',
    location: 'Nepal',
    avatar: img4,
  },
];

const FriendCard = () => {
  return (
    (<ParentCard title='Friend Card' codeModel={<FriendCardCode />}>
      <Grid container spacing={3}>
        {followerCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <BlankCard>
              <CardContent>
                <Avatar src={card.avatar} sx={{ height: 80, width: 80 }}></Avatar>
                <Stack direction="row" spacing={2} mt={3}>
                  <Box>
                    <Typography variant="h6" mb={1}>
                      {card.title}
                    </Typography>
                    <Stack direction="row" spacing={2} alignItems="center">
                      <AvatarGroup>
                        <Avatar sx={{ height: 28, width: 28 }} alt="Remy Sharp" src={img1} />
                        <Avatar sx={{ height: 28, width: 28 }} alt="Travis Howard" src={img2} />
                        <Avatar sx={{ height: 28, width: 28 }} alt="Cindy Baker" src={img3} />
                      </AvatarGroup>
                      <Typography variant="subtitle2" color="textSecondary">
                        3 mutual friends
                      </Typography>
                    </Stack>
                  </Box>
                </Stack>
                <Stack spacing={2} mt={3}>
                  <Button size="large" variant="text" color="primary">
                    Add Friend
                  </Button>
                  <Button size="large" variant="text" color="secondary">
                    Remove
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default FriendCard;

===== src/components/widgets/cards/GiftCard.tsx =====
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, CardMedia, IconButton, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/products/s1.jpg';
import img2 from 'src/assets/images/products/s2.jpg';
import BlankCard from '../../shared/BlankCard';
import { IconGift } from '@tabler/icons-react';

import ParentCard from '../../shared/ParentCard';

import GiftCardCode from './code/GiftCardCode';

interface giftType {
  title: string;
  avatar: string;
}

const giftCard: giftType[] = [
  {
    title: 'Andrew Grant',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    avatar: img2,
  },
];

const GiftCard = () => {

  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Gift Card' codeModel={<GiftCardCode />}>
      <Grid container spacing={3}>
        {giftCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction="row" alignItems="center" justifyContent="space-between" spacing={2}>
                  <Typography variant="h6" mb={1}>
                    {card.title}
                  </Typography>

                  <IconButton color="secondary">
                    <IconGift width={20} />
                  </IconButton>
                </Stack>
                {isLoading ? (
                  <Skeleton variant="rectangular" animation="wave" width="100%" height={160}></Skeleton>
                ) : (
                  <CardMedia component="img" image={card.avatar} sx={{ height: 160, borderRadius: 2 }} />
                )}
                <Stack spacing={2} mt={3}>
                  <Button size="large" variant="contained" color="primary">
                    Gift to Friend ($50.00)
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default GiftCard;

===== src/components/widgets/cards/MusicCard.tsx =====
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Card, CardMedia, Box, IconButton, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/blog/blog-img5.jpg';
import img2 from 'src/assets/images/blog/blog-img4.jpg';
import img3 from 'src/assets/images/blog/blog-img3.jpg';
import { IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';
import ParentCard from '../../shared/ParentCard';

import MusicCardCode from './code/MusicCardCode';

interface musiccardType {
  title: string;
  subheader: string;
  img: string;
}


const musicCard: musiccardType[] = [
  {
    title: 'Uptown Funk',
    subheader: 'Jon Bon Jovi',
    img: img1,
  },
  {
    title: 'Blank Space',
    subheader: 'Madonna',
    img: img2,
  },
  {
    title: 'Lean On',
    subheader: 'Jennifer Lopez',
    img: img3,
  },
];

const MusicCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Music Card' codeModel={<MusicCardCode />}>
      <Grid container spacing={3}>
        {musicCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card sx={{ display: 'flex', p: 0 }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flex: '1 0 auto' }}>
                  <Typography component="div" variant="h5">
                    {card.title}
                  </Typography>
                  <Typography variant="subtitle1" color="text.secondary" component="div">
                    {card.subheader}
                  </Typography>
                </CardContent>
                <Stack direction="row" spacing={2} px={2} pb={3}>
                  <IconButton aria-label="previous">
                    <IconPlayerSkipBack width="20" />
                  </IconButton>
                  <IconButton aria-label="play/pause" color="error">
                    <IconPlayerPlay width="20" />
                  </IconButton>
                  <IconButton aria-label="next">
                    <IconPlayerSkipForward width="20" />
                  </IconButton>
                </Stack>
              </Box>
              {isLoading ? (
                <Skeleton variant="rectangular" animation="wave" width="100%" height={180}></Skeleton>
              ) : (
                <CardMedia
                  component="img"
                  sx={{ width: '100%', height: 180 }}
                  image={card.img}
                  alt="Live from space album cover"
                />
              )}
            </Card>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default MusicCard;

===== src/components/widgets/cards/ProfileCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, IconButton, Divider, Avatar, Box, Stack, Skeleton } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import {
  IconBrandFacebook,
  IconBrandGithub,
  IconBrandInstagram,
  IconBrandTwitter,
} from '@tabler/icons-react';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';

import ProfileCardCode from './code/ProfileCardCode';

interface SocialIcon {
  name: string;
  icon: any;
}

interface ProfileCard {
  name: string;
  role: string;
  avatar: string;
}

const SocialIcons: SocialIcon[] = [
  {
    name: 'Facebook',
    icon: <IconBrandFacebook size="18" color="#1877F2" />,
  },
  {
    name: 'Instagram',
    icon: <IconBrandInstagram size="18" color="#D7336D" />,
  },
  {
    name: 'Github',
    icon: <IconBrandGithub size="18" color="#006097" />,
  },
  {
    name: 'Twitter',
    icon: <IconBrandTwitter size="18" color="#1C9CEA" />,
  },
];

const profileCard: ProfileCard[] = [
  {
    name: 'Andrew Grant',
    role: 'Technology Director',
    avatar: img1,
  },
  {
    name: 'Leo Pratt',
    role: 'Telecom Analyst',
    avatar: img2,
  },
  {
    name: 'Charles Nunez',
    role: 'Environmental Specialist',
    avatar: img3,
  },
];

const ProfileCard = () => {

  const theme = useTheme();
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);


  return (
    (<ParentCard title='Profile Card' codeModel={<ProfileCardCode />}>
      <Grid container spacing={3}>
        {profileCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction={'column'} gap={2} alignItems="center">
                  {isLoading ? (
                    <Skeleton variant="rectangular" animation="wave" width="100%" height={160}></Skeleton>
                  ) : (
                    <Avatar alt="Remy Sharp" src={card.avatar} sx={{ width: '80px', height: '80px' }} />
                  )}
                  <Box textAlign={'center'}>
                    <Typography variant="h5">{card.name}</Typography>
                    <Typography variant="caption">{card.role}</Typography>
                  </Box>
                </Stack>
              </CardContent>
              <Divider />
              <Box
                p={2}
                py={1}
                textAlign={'center'}
                sx={{
                  backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.05)' : 'grey.100',
                }}
              >
                {SocialIcons.map((sicon) => {
                  return <IconButton key={sicon.name}>{sicon.icon}</IconButton>;
                })}
              </Box>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default ProfileCard;

===== src/components/widgets/cards/Settings.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Avatar, Divider, Button, Box, Stack } from '@mui/material';
import ParentCard from '../../shared/ParentCard';
import { IconMessage, IconVolume } from '@tabler/icons-react';

import CustomSlider from '../../forms/theme-elements/CustomSlider';
import CustomSwitch from '../../forms/theme-elements/CustomSwitch';

import SettingsCode from './code/SettingsCode';

const Settings = () => {
  const [value3, setValue3] = React.useState(45);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    <ParentCard title='Settings' codeModel={<SettingsCode />}>
      <CardContent sx={{ p: "30px" }}>
        <Typography variant="h5">Settings</Typography>
        <Stack spacing={2} mt={3}>
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'primary.main', width: 48, height: 48 }}>
              <IconVolume width={22} />
            </Avatar>
            <Box width="100%">
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Typography variant="h6">Sound</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  45%
                </Typography>
              </Box>
              <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            </Box>
          </Stack>
          <Divider />
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'secondary.main', width: 48, height: 48 }}>
              <IconMessage width={22} />
            </Avatar>
            <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
              <Box>
                <Typography variant="h6" mb={1}>Chat</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  Turn on chat during call
                </Typography>
              </Box>
              <Box>
                <CustomSwitch />
              </Box>
            </Box>
          </Stack>
          <Divider />
        </Stack>
        <Stack direction="row" justifyContent="end" spacing={2} mt={2}>
          <Button variant="outlined" color="error">Cancel</Button>
          <Button variant="contained" color="primary">Save</Button>
        </Stack>
      </CardContent>
    </ParentCard>
  );
};

export default Settings;

===== src/components/widgets/cards/UpcomingActivity.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import ParentCard from '../../shared/ParentCard';
import { IconDatabase, IconMail, IconMapPin, IconPhone, IconScreenShare } from '@tabler/icons-react';

import UpcomingActivityCode from './code/UpcomingActivityCode';

const UpcomingActivity = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const success = theme.palette.success.main;
  const successlight = theme.palette.success.light;

  interface statType {
    title: string;
    subtitle: string;
    time: number;
    color: string;
    lightcolor: string;
    icon: any;
  }

  const stats: statType[] = [
    {
      title: 'Trip to singapore',
      subtitle: 'working on',
      time: 5,
      color: primary,
      lightcolor: primarylight,
      icon: <IconMapPin width={20} />,
    },
    {
      title: 'Archived Data',
      subtitle: 'working on',
      time: 10,
      color: secondary,
      lightcolor: secondarylight,
      icon: <IconDatabase width={20} />,
    },
    {
      title: 'Meeting with client',
      subtitle: 'pending',
      time: 15,
      color: warning,
      lightcolor: warninglight,
      icon: <IconPhone width={20} />,
    },
    {
      title: 'Screening Task Team',
      subtitle: 'working on',
      time: 20,
      color: error,
      lightcolor: errorlight,
      icon: <IconScreenShare width={20} />,
    },
    {
      title: 'Send envelope to John',
      subtitle: 'done',
      time: 20,
      color: success,
      lightcolor: successlight,
      icon: <IconMail width={20} />,
    },
  ];

  return (
    <ParentCard title="Upcoming Activity" codeModel={<UpcomingActivityCode />}>
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={3}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                  {stat.icon}
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>

              <Typography variant="subtitle2" color="textSecondary">
                {stat.time} mins
              </Typography>
            </Stack>
          ))}
        </Stack>
      </>
    </ParentCard>
  );
};

export default UpcomingActivity;

===== src/components/widgets/charts/CurrentValue.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Button, CardContent, Grid2 as Grid, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';


const CurrentValue = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const textColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : '#2A3547';

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 200,
      stacked: true,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary, primary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [2.5, 3.7, 3.2, 2.6, 1.9, 2.5],
    },
    {
      name: '',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9, -2.8],
    },
  ];

  //   chart 2
  const optionscolumn2chart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 200,
      stacked: true,
      sparkline: {
        enabled: true,
      },
    },
    colors: [secondary, secondary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumn2chart = [
    {
      name: '',
      data: [2.5, 3.7, 3.2, 2.6, 1.9, 2.5],
    },
    {
      name: '',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9, -2.8],
    },
  ];

  //   chart 3
  const optionscolumn3chart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 220,
    },
    labels: ['Income', 'Current', 'Expance'],
    colors: [primary, primarylight, secondary],
    plotOptions: {
      pie: {
        startAngle: 0,
        endAngle: 360,
        donut: {
          size: '89%',
          background: 'transparent',

          labels: {
            show: true,
            name: {
              show: true,
              offsetY: 7,
            },
            value: {
              show: false,
            },
            total: {
              show: true,
              color: textColor,
              fontSize: '20px',
              fontWeight: '600',
              label: '$98,260',
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumn3chart = [55, 55, 55];

  return (
    (<BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="h5">Current Value</Typography>
          <Stack spacing={1} direction="row">
            <Button color="primary" variant="contained">
              Buy
            </Button>
            <Button color="primary" variant="outlined">
              Sell
            </Button>
          </Stack>
        </Stack>

        <Grid container spacing={3} mt={2}>
          {/* 1 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumnchart}
                    series={seriescolumnchart}
                    type="bar"
                    height="200px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Income
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$25,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +1.25%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
          {/* 2 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumn2chart}
                    series={seriescolumn2chart}
                    type="bar"
                    height="200px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Expance
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$12,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +4.25%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
          {/* 3 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumn3chart}
                    series={seriescolumn3chart}
                    type="donut"
                    height="220px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Current Year
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$98,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +2.5%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
        </Grid>
      </CardContent>
    </BlankCard>)
  );
};

export default CurrentValue;

===== src/components/widgets/charts/Earned.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';

const Earned = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],

    stroke: {
      curve: 'straight',
      width: 2,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    xaxis: {
      axisBorder: {
        show: true,
      },
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 3, 1, 2, 8, 1, 5, 1],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">2,545</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="subtitle2" color="textSecondary">
            Earned
          </Typography>
          <Typography variant="subtitle2" color="success.main">
            +1.20%
          </Typography>
        </Stack>
      </CardContent>
      <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="90px" />
    </BlankCard>
  );
};

export default Earned;

===== src/components/widgets/charts/Followers.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';


const Followers = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],

    stroke: {
      curve: 'straight',
      width: 2,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    xaxis: {
      axisBorder: {
        show: true,
      },
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 150, 110, 240, 200, 200, 300, 200],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">2,545</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="subtitle2" color="textSecondary">
            Followers
          </Typography>
          <Typography variant="subtitle2" color="success.main">
            +1.20%
          </Typography>
        </Stack>
      </CardContent>
      <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="90px" />
    </BlankCard>
  );
};

export default Followers;

===== src/components/widgets/charts/MostVisited.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, MenuItem, Stack, Box } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import CustomSelect from '../../forms/theme-elements/CustomSelect';
import { Props } from 'react-apexcharts';

const MostVisited = () => {
  // for select
  const [month, setMonth] = React.useState('1');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMonth(event.target.value);
  };

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 250,
      stacked: true,
    },
    colors: [primary, secondary],
    plotOptions: {
      bar: {
        borderRadius: [6],
        horizontal: false,
        barHeight: '60%',
        columnWidth: '40%',
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    yaxis: {
      tickAmount: 4,
    },
    xaxis: {
      categories: ['01', '02', '03', '04', '05', '06'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: 'San Francisco',
      data: [44, 55, 41, 67, 22, 43],
    },
    {
      name: 'Diego',
      data: [13, 23, 20, 8, 13, 27],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Stack direction="row" justifyContent="space-between">
          <Typography variant="h5">Most Visited</Typography>
          <CustomSelect
            labelId="month-dd"
            id="month-dd"
            size="small"
            value={month}
            onChange={handleChange}
          >
            <MenuItem value={1}>March 2023</MenuItem>
            <MenuItem value={2}>April 2023</MenuItem>
            <MenuItem value={3}>May 2023</MenuItem>
          </CustomSelect>
        </Stack>

        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="250px" />

        <Stack direction="row" spacing={2} justifyContent="center">
          <Box display="flex" alignItems="center" gap={1}>
            <Box
              sx={{
                width: '8px',
                height: '8px',
                backgroundColor: 'primary.main',
                borderRadius: '100%',
              }}
            ></Box>
            <Typography variant="subtitle2" color="textSecondary">
              San Francisco
            </Typography>
          </Box>
          <Box display="flex" alignItems="center" gap={1}>
            <Box
              sx={{
                width: '8px',
                height: '8px',
                backgroundColor: 'secondary.main',
                borderRadius: '100%',
              }}
            ></Box>
            <Typography variant="subtitle2" color="textSecondary">
              Diego
            </Typography>
          </Box>
        </Stack>
      </CardContent>
    </BlankCard>
  );
};

export default MostVisited;

===== src/components/widgets/charts/PageImpressions.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Avatar, Grid2 as Grid, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { IconArrowDownRight } from '@tabler/icons-react';
import { Props } from 'react-apexcharts';

const PageImpressions = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 100,
      sparkline: {
        enabled: true,
      },
    },
    colors: [secondarylight, secondarylight, secondary, secondarylight, secondarylight, secondarylight],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '50%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    xaxis: {
      labels: {
        show: false,
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10],
    },
  ];

  return (
    (<BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5">Page Impressions</Typography>

        <Grid container spacing={3}>
          <Grid size={5}>

            <Typography variant="h4" mt={3} fontWeight={600}>$456,120</Typography>
            <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
              (Change Yesterday)
            </Typography>
            <Stack direction="row" spacing={1} mt={1} alignItems="center">
              <Avatar sx={{ bgcolor: 'error.light', width: 20, height: 20 }}>
                <IconArrowDownRight width={16} color="#FA896B" />
              </Avatar>
              <Typography variant="subtitle2" color="textSecondary">
                +9%
              </Typography>
            </Stack>
          </Grid>
          <Grid size={7}>
            <Chart
              options={optionscolumnchart}
              series={seriescolumnchart}
              type="bar"
              height="100px"
            />
          </Grid>
        </Grid>
      </CardContent>
    </BlankCard>)
  );
};

export default PageImpressions;

===== src/components/widgets/charts/Views.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';

const Views = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 80,
      sparkline: {
        enabled: true,
      },
    },
    colors: [
      secondarylight,
      secondarylight,
      secondary,
      secondarylight,
      secondarylight,
      secondarylight,
      secondarylight,
      secondarylight,
    ],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '50%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    xaxis: {
      categories: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],
      labels: {
        show: false,
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10, 18, 20],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">15,480</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between" mb={2}>
          <Typography variant="subtitle2" color="textSecondary">
            Views
          </Typography>
          <Typography variant="subtitle2" color="error.main">
            -4.150%
          </Typography>
        </Stack>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="80px" />
      </CardContent>
    </BlankCard>
  );
};

export default Views;

===== src/config/env.ts =====
// File: src/config/env.ts
export const config = {
  apiBaseUrl: import.meta.env.VITE_API_BASE_URL || 'https://horexapi.watsorder.com',
  appName: import.meta.env.VITE_APP_NAME || 'POS System',
  appVersion: import.meta.env.VITE_APP_VERSION || '1.0.0',
  isDevelopment: import.meta.env.DEV,
  isProduction: import.meta.env.PROD
};

===== src/config/pagePermissions.ts =====
// File: src/configs/pagePermissions.ts
export const PAGE_PERMISSIONS = {
  // System Admin
  USERS: { pageId: 8, pageName: 'UserManagement', moduleId: 4 },
  COMPANY: { pageId: 9, pageName: 'CompanySettings', moduleId: 4 },
  PERMISSIONS: { pageId: 10, pageName: 'Permissions', moduleId: 4 },
  
  // Inventory
  PRODUCTS: { pageId: 11, pageName: 'Products', moduleId: 3 },
  GROUPS: { pageId: 12, pageName: 'Groups', moduleId: 3 },
  UNITS: { pageId: 13, pageName: 'Units', moduleId: 3 },
  WAREHOUSES: { pageId: 14, pageName: 'Warehouses', moduleId: 3 },
  INVENTORY_ADJUSTMENTS: { pageId: 7, pageName: 'InventoryAdjustment', moduleId: 3 },
  
  // Purchases
  PURCHASE_ORDERS: { pageId: 1, pageName: 'Purchase Order', moduleId: 2 },
  PURCHASES: { pageId: 2, pageName: 'Purchase', moduleId: 2 },
  SUPPLIERS: { pageId: 15, pageName: 'Suppliers', moduleId: 2 },
  
  // POS
  POS_SCREENS: { pageId: 16, pageName: 'PosScreens', moduleId: 1 },
  PAYMENT_METHODS: { pageId: 17, pageName: 'PaymentMethods', moduleId: 1 },
  POS_PRODUCTS: { pageId: 21, pageName: 'PosProducts', moduleId: 1 },
 ADDITION_PRODUCTS: {pageId:22, pageName:'AddisionProducts', moduleId: 1 },
  // Accounting
  ACCOUNTS: { pageId: 18, pageName: 'Accounts', moduleId: 5 },
  SAFES: { pageId: 19, pageName: 'Safes', moduleId: 5 },
  
  // Reports
  REPORTS: { pageId: 20, pageName: 'Reports', moduleId: 6 },
  
  // Sales
  SALES: { pageId: 4, pageName: 'Sale', moduleId: 1 },
  SALE_RETURNS: { pageId: 5, pageName: 'SaleReturn', moduleId: 1 },
} as const;

===== src/context/InvoiceContext/index.tsx =====
'use client'
import React, { createContext, useEffect, useState } from 'react';
import { InvoiceList } from 'src/types/apps/invoice';

import axios from '../../utils/axios';

interface InvoiceContextType {
    invoices: InvoiceList[];
    loading: boolean;
    error: Error | null;
    deleteEmail: () => {},
    addInvoice: (newInvoice: InvoiceList) => void;
    updateInvoice: (updatedInvoice: InvoiceList) => void;
}

export const InvoiceContext = createContext<InvoiceContextType | any>(undefined);

export const InvoiceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [invoices, setInvoices] = useState<InvoiceList[]>([]);
    const [loading, setLoading] = useState(true);
    const [error] = useState<Error | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get('/api/data/invoicedata');
                setInvoices(response.data);
                setLoading(false);
            } catch (error) {
                //                setLoading(false);
            }
        };

        fetchData();
    }, []);

    // Function to delete an invoice
    const deleteInvoice = async (id: number) => {
        try {

            await axios.delete('/api/data/invoicedata/deleteinvoice', { data: { invoiceId: id } });
            setInvoices((prevInvoices) => prevInvoices.filter((invoice) => invoice.id !== id));
        } catch (error) {
            }
    };

    const addInvoice = async (newInvoice: InvoiceList) => {
        try {
            const response = await axios.post('/api/data/invoicedata/addinvoice', newInvoice);
            const addedInvoice = response.data;
            setInvoices((prevInvoices) => [...prevInvoices, addedInvoice]);
        } catch (error) {
            }
    };

    //  Function to update an invoice
    const updateInvoice = async (updatedInvoice: InvoiceList) => {
        try {
            const response = await axios.put('/api/data/invoicedata/updateinvoice', updatedInvoice);
            const updated = response.data;
            setInvoices((prevInvoices) =>
                prevInvoices.map((invoice) => (invoice.id === updated.id ? updated : invoice))
            );
        } catch (error) {
            }
    };

    return (
        <InvoiceContext.Provider value={{ invoices, loading, error, deleteInvoice, addInvoice, updateInvoice }}>
            {children}
        </InvoiceContext.Provider>
    );
};

===== src/context/kanbancontext/index.tsx =====

import React, { createContext, useState, useEffect, ReactNode } from 'react';
import axios from '../../utils/axios';

import { TodoCategory } from 'src/types/apps/kanban';

interface KanbanDataContextProps {
    children: ReactNode;
}

interface KanbanContextType {
    todoCategories: TodoCategory[];
    addCategory: (categoryName: string) => Promise<void>;
    deleteCategory: (categoryId: string) => Promise<void>;
    clearAllTasks: (categoryId: string) => Promise<void>;
    deleteTodo: (taskId: number) => Promise<void>;
    setError: (errorMessage: string | null) => void;
    moveTask: (
        taskId: number,
        sourceCategoryId: string,
        destinationCategoryId: string,
        sourceIndex: number,
        destinationIndex: number
    ) => void;
}

export const KanbanDataContext = createContext<KanbanContextType>({} as KanbanContextType);

export const KanbanDataContextProvider: React.FC<KanbanDataContextProps> = ({ children }) => {
    const [todoCategories, setTodoCategories] = useState<TodoCategory[]>([]);
    const [, setError] = useState<string | null>(null);

    // Fetch todo data from the API
    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get<TodoCategory[]>('/api/TodoData');
                setTodoCategories(response.data);            } catch (error: any) {
                handleError(error.message);
            }
        };
        fetchData();
    }, []);

    const moveTask = (_taskId: any, sourceCategoryId: any, destinationCategoryId: any, sourceIndex: number, destinationIndex: number) => {

        setTodoCategories((prevCategories) => {
            // Find the source and destination categories
            const sourceCategoryIndex = prevCategories.findIndex(cat => cat.id.toString() === sourceCategoryId);
            const destinationCategoryIndex = prevCategories.findIndex(cat => cat.id.toString() === destinationCategoryId);

            if (sourceCategoryIndex === -1 || destinationCategoryIndex === -1) {
                return prevCategories; // Return previous state if categories are not found
            }
            // Clone the source and destination categories
            const updatedCategories = [...prevCategories];
            const sourceCategory = { ...updatedCategories[sourceCategoryIndex] };
            const destinationCategory = { ...updatedCategories[destinationCategoryIndex] };

            // Remove the task from the source category
            const taskToMove = sourceCategory.child.splice(sourceIndex, 1)[0];

            // Insert the task into the destination category at the specified index
            destinationCategory.child.splice(destinationIndex, 0, taskToMove);

            // Update the categories in the state
            updatedCategories[sourceCategoryIndex] = sourceCategory;
            updatedCategories[destinationCategoryIndex] = destinationCategory;

            return updatedCategories;
        });
    };

    const handleError = (errorMessage: string) => {    };

    const deleteCategory = async (categoryId: string) => {
        try {
            const response = await axios.delete<TodoCategory[]>(`/api/TodoData?id=${categoryId}`);
            setTodoCategories(response.data);        } catch (error: any) {
            handleError(error.message);
        }
    };

    const clearAllTasks = async (categoryId: string) => {
        try {
            const response = await axios.delete<TodoCategory[]>(`/api/TodoData/clearTasks?id=${categoryId}`);
            setTodoCategories(response.data);        } catch (error: any) {
            handleError(error.message);
        }
    };

    const addCategory = async (categoryName: string) => {
        try {
            const response = await axios.post<TodoCategory>('/api/TodoData/addCategory', { categoryName });
            setTodoCategories((prevCategories) => [...prevCategories, response.data]);        } catch (error: any) {
            handleError(error.message);
        }
    };

    const deleteTodo = async (taskId: number) => {
        try {
            const response = await axios.delete<TodoCategory[]>(`/api/TodoData/deleteTask?id=${taskId}`);
            setTodoCategories(response.data);
        } catch (error: any) {
            handleError(error.message);
        }
    };

    return (
        <KanbanDataContext.Provider value={{ todoCategories, addCategory, deleteCategory, clearAllTasks, deleteTodo, setError, moveTask }}>
            {children}
        </KanbanDataContext.Provider>
    );
};


===== src/contexts/AuthContext.tsx =====
// File: src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { setAuthHeaders, clearAuthHeaders, isAuthenticated } from 'src/utils/axios';
import { login as loginApi, LoginResponse, Branch, User, UserPage } from 'src/utils/api/authApi';
import { useTranslation } from 'react-i18next';
import { useGlobalErrorHandler } from '../hooks/useGlobalErrorHandler';

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  token: string | null;
  branches: Branch[];
  selectedBranch: Branch | null;
  userPages: UserPage[];
  login: (phoneNo: string, password: string, tenantId: string, onSuccess?: (branches: Branch[], selectedBranch?: Branch) => void) => Promise<void>;
  logout: () => void;
  selectBranch: (branch: Branch) => void;
  hasPageAccess: (pageName: string) => boolean;
  canAccessModule: (moduleId: number) => boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticatedState, setIsAuthenticatedState] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [selectedBranch, setSelectedBranch] = useState<Branch | null>(null);
  const [userPages, setUserPages] = useState<UserPage[]>([]);
  const { t } = useTranslation();
  useGlobalErrorHandler();

  // تحميل البيانات من localStorage عند بدء التطبيق
  useEffect(() => {
    const initAuth = async () => {
      try {
        if (isAuthenticated()) {
          const savedToken = localStorage.getItem('auth_token');
          const savedUser = localStorage.getItem('user_data');
          const savedBranch = localStorage.getItem('selected_branch');
          const savedBranches = localStorage.getItem('user_branches');

          if (savedToken && savedUser && savedBranch) {
            const userData = JSON.parse(savedUser);
            const branchData = JSON.parse(savedBranch);
            const branchesData = savedBranches ? JSON.parse(savedBranches) : [];

            setToken(savedToken);
            setUser(userData);
            setSelectedBranch(branchData);
            setBranches(branchesData);
            
            // تأكد من تحديث headers
            const savedTenantId = localStorage.getItem('tenant_id');
            setAuthHeaders(savedToken, branchData.refCompanyId, branchData.id, savedTenantId || '');
            
            // ⭐ تحديث حالة المصادقة فوراً
            setIsAuthenticatedState(true);
            
            // تحميل صفحات المستخدم في الخلفية
            loadUserPages();
          }
        }
      } catch (error) {
        logout();
      } finally {
        setIsLoading(false);
      }
    };

    initAuth();
  }, []);

  // تحميل صفحات المستخدم مع retry mechanism
  const loadUserPages = async (retries = 3) => {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const { getUserPages } = await import('src/utils/api/authApi');
        const pages = await getUserPages();
        
        setUserPages(pages);
        return;
        
      } catch (error) {
        if (attempt < retries) {
          // انتظار متزايد بين المحاولات
          await new Promise(resolve => setTimeout(resolve, attempt * 500));
        } else {
          }
      }
    }
  };

  // تسجيل الدخول مع redirect فوري

const login = async (phoneNo: string, password: string, tenantId: string, onSuccess?: (branches: Branch[], selectedBranch?: Branch) => void) => {
  try {
    setIsLoading(true);
    const response: LoginResponse = await loginApi(phoneNo, password, tenantId); // ⭐ تمرير tenantId
    const branches = response.branches?.data || [];
    if (branches.length === 0) {
      throw new Error(t('auth.errors.noBranches'));
    }

    // حفظ البيانات
    setToken(response.token);
    setBranches(branches);
    
    const userData: User = {
      id: 'a4fd8ce5-d4db-4d44-bbb9-5c797b0fbf7b',
      userName: 'Mahmoud Afify',
      email: '',
      phoneNo: phoneNo
    };
    setUser(userData);

    // حفظ في localStorage
    localStorage.setItem('auth_token', response.token);
    localStorage.setItem('user_data', JSON.stringify(userData));
    localStorage.setItem('user_branches', JSON.stringify(branches));

    // إذا كان فرع واحد، اختره تلقائياً
    if (branches.length === 1) {
      const selectedBranch = branches[0];
      
      setSelectedBranch(selectedBranch);
      setAuthHeaders(response.token, selectedBranch.refCompanyId, selectedBranch.id, tenantId); // ⭐ تمرير tenantId
      localStorage.setItem('selected_branch', JSON.stringify(selectedBranch));
      setIsAuthenticatedState(true);
      
      if (onSuccess) {
        onSuccess(branches, selectedBranch);
      }
      
      setTimeout(() => loadUserPages(), 200);
      
    } else {
      const firstBranch = branches[0];
      setAuthHeaders(response.token, firstBranch.refCompanyId, firstBranch.id, tenantId); // ⭐ تمرير tenantId
      
      setIsAuthenticatedState(true);
      
      if (onSuccess) {
        onSuccess(branches);
      }
      
      setTimeout(() => loadUserPages(), 200);
    }
    
  } catch (error) {
    throw error;
  } finally {
    setIsLoading(false);
  }
};
  // دالة داخلية لاختيار الفرع
  const selectBranchInternal = async (branch: Branch, isFromLogin = false) => {
    try {
      setSelectedBranch(branch);
      
      // تحديث headers في axios
      if (token) {
        const savedTenantId = localStorage.getItem('tenant_id') || '';
        setAuthHeaders(token, branch.refCompanyId, branch.id, savedTenantId);
      }
      
      // حفظ الفرع المختار
      localStorage.setItem('selected_branch', JSON.stringify(branch));
      
      // ⭐ تحديث حالة المصادقة فوراً
      setIsAuthenticatedState(true);
      
      // تحميل الصفحات في الخلفية
      setTimeout(() => loadUserPages(), 200);
      
    } catch (error) {
      if (!isFromLogin) {
        throw error;
      }
    }
  };

  // اختيار فرع (للاستخدام الخارجي)
  const selectBranch = (branch: Branch) => {
    return selectBranchInternal(branch, false);
  };

  // تسجيل الخروج
  const logout = () => {
    setIsAuthenticatedState(false);
    setUser(null);
    setToken(null);
    setBranches([]);
    setSelectedBranch(null);
    setUserPages([]);
    
    // مسح البيانات من axios و localStorage
    clearAuthHeaders();
  };

  // التحقق من صلاحية الوصول لصفحة
  const hasPageAccess = (pageName: string): boolean => {
    return userPages.some(page => page.pageName === pageName && page.hasAccess);
  };

  // التحقق من صلاحية الوصول لوحدة
  const canAccessModule = (moduleId: number): boolean => {
    return userPages.some(page => page.module === moduleId && page.hasAccess);
  };

  const value: AuthContextType = {
    isAuthenticated: isAuthenticatedState,
    isLoading,
    user,
    token,
    branches,
    selectedBranch,
    userPages,
    login,
    logout,
    selectBranch,
    hasPageAccess,
    canAccessModule
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

===== src/contexts/ErrorContext.tsx =====
// File: src/contexts/ErrorContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Snackbar, Alert, AlertTitle } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface ApiError {
  errorCode: number;
  errorMessage: string;
}


interface ErrorContextType {
  showError: (error: string | ApiError | ApiError[]) => void;
  showSuccess: (message: string) => void;
  showWarning: (message: string) => void;
  showInfo: (message: string) => void;
}

const ErrorContext = createContext<ErrorContextType | undefined>(undefined);

interface Props {
  children: ReactNode;
}

export const ErrorProvider: React.FC<Props> = ({ children }) => {
  const { t } = useTranslation();
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    title: '',
    severity: 'error' as 'error' | 'success' | 'warning' | 'info'
  });

  const showError = (error: string | ApiError | ApiError[]) => {
    let message = '';
    let title = t('errors.title');

    if (typeof error === 'string') {
      message = error;
    } else if (Array.isArray(error)) {
      // Multiple errors
      if (error.length === 1) {
        message = error[0].errorMessage;
        title = getErrorTitle(error[0].errorCode);
      } else {
        message = error.map(e => e.errorMessage).join('\n');
        title = t('errors.multipleErrors');
      }
    } else {
      // Single error object
      message = error.errorMessage;
      title = getErrorTitle(error.errorCode);
    }

    setSnackbar({
      open: true,
      message,
      title,
      severity: 'error'
    });
  };

  const showSuccess = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('success.title'),
      severity: 'success'
    });
  };

  const showWarning = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('warning.title'),
      severity: 'warning'
    });
  };

  const showInfo = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('info.title'),
      severity: 'info'
    });
  };

  const getErrorTitle = (errorCode: number): string => {
    switch (errorCode) {
      case 400:
        return t('errors.validationError');
      case 401:
        return t('errors.unauthorized');
      case 403:
        return t('errors.forbidden');
      case 404:
        return t('errors.notFound');
      case 409:
        return t('errors.conflict');
      case 500:
        return t('errors.serverError');
      default:
        return t('errors.title');
    }
  };

  const handleClose = (_event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  return (
    <ErrorContext.Provider value={{ showError, showSuccess, showWarning, showInfo }}>
      {children}
      
      <Snackbar
        open={snackbar.open}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity={snackbar.severity}
          variant="filled"
          sx={{ 
            width: '100%', 
            color: 'white',
            whiteSpace: 'pre-line' // للسماح بعرض أخطاء متعددة في أسطر منفصلة
          }}
        >
          <AlertTitle>{snackbar.title}</AlertTitle>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </ErrorContext.Provider>
  );
};

export const useError = (): ErrorContextType => {
  const context = useContext(ErrorContext);
  if (!context) {
    throw new Error('useError must be used within an ErrorProvider');
  }
  return context;
};

===== src/contexts/POSContext.tsx =====
// File: src/contexts/POSContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { PosScreen, getAll as getAllScreens } from 'src/utils/api/pagesApi/posScreensApi';
import { Product, getAll as getAllProducts } from 'src/utils/api/pagesApi/productsApi';

interface POSContextType {
  screens: PosScreen[];
  products: Product[];
  selectedScreen: PosScreen | null;
  selectedScreenPath: PosScreen[];
  loading: boolean;
  error: string | null;
  setSelectedScreen: (screen: PosScreen | null) => void;
  navigateToScreen: (screen: PosScreen) => void;
  navigateBack: () => void;
  getProductsByScreen: (screenId: string) => Product[];
  refreshData: () => Promise<void>;
}

const POSContext = createContext<POSContextType | undefined>(undefined);

interface POSProviderProps {
  children: ReactNode;
}

export const POSProvider: React.FC<POSProviderProps> = ({ children }) => {
  const [screens, setScreens] = useState<PosScreen[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedScreen, setSelectedScreen] = useState<PosScreen | null>(null);
  const [selectedScreenPath, setSelectedScreenPath] = useState<PosScreen[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // تحميل البيانات الأولية
  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [screensData, productsData] = await Promise.all([
        getAllScreens(),
        getAllProducts(1, 1000) // جلب عدد كبير من المنتجات
      ]);
      
      setScreens(screensData);
      setProducts(productsData.data);
      
      // اختيار أول screen كافتراضي
      if (screensData.length > 0) {
        setSelectedScreen(screensData[0]);
        setSelectedScreenPath([screensData[0]]);
      }
    } catch (err: any) {
      setError(err.message || 'حدث خطأ في تحميل البيانات');
      console.error('Error loading POS data:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  // التنقل إلى screen معين
  const navigateToScreen = (screen: PosScreen) => {
    setSelectedScreen(screen);
    
    // إذا كان الـ screen له children، أضفه للمسار
    if (screen.children && screen.children.length > 0) {
      setSelectedScreenPath(prev => [...prev, screen]);
    } else {
      // إذا لم يكن له children، استبدل آخر عنصر في المسار
      setSelectedScreenPath(prev => {
        const newPath = [...prev];
        newPath[newPath.length - 1] = screen;
        return newPath;
      });
    }
  };

  // العودة للخلف في المسار
  const navigateBack = () => {
    if (selectedScreenPath.length > 1) {
      const newPath = selectedScreenPath.slice(0, -1);
      setSelectedScreenPath(newPath);
      setSelectedScreen(newPath[newPath.length - 1]);
    }
  };

  // الحصول على المنتجات الخاصة بـ screen معين
  const getProductsByScreen = (screenId: string): Product[] => {
    return products.filter(product => 
      product.posScreenId === screenId && 
      product.isActive &&
      product.productType === 1 // منتجات POS فقط
    );
  };

  const refreshData = async () => {
    await loadData();
  };

  const value: POSContextType = {
    screens,
    products,
    selectedScreen,
    selectedScreenPath,
    loading,
    error,
    setSelectedScreen,
    navigateToScreen,
    navigateBack,
    getProductsByScreen,
    refreshData
  };

  return (
    <POSContext.Provider value={value}>
      {children}
    </POSContext.Provider>
  );
};

export const usePOS = (): POSContextType => {
  const context = useContext(POSContext);
  if (!context) {
    throw new Error('usePOS must be used within a POSProvider');
  }
  return context;
};

===== src/contexts/ProductCopyPasteContext.tsx =====
// File: src/contexts/ProductCopyPasteContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface ProductCopyData {
  // بيانات المنتج الأساسية
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  expirationDays: number;
  
  // بيانات الأسعار (بدون الأسماء والأسعار)
  priceTemplates: Array<{
    unitId: string;
    unitFactor: number;
    barcode: string; // سيكون فارغ عند اللصق
    productComponents: Array<{
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
  }>;
}

interface ProductCopyPasteContextType {
  copiedData: ProductCopyData | null;
  copyProduct: (data: ProductCopyData) => void;
  pasteProduct: () => ProductCopyData | null;
  clearCopiedData: () => void;
  hasCopiedData: boolean;
}

const ProductCopyPasteContext = createContext<ProductCopyPasteContextType | undefined>(undefined);

export const ProductCopyPasteProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [copiedData, setCopiedData] = useState<ProductCopyData | null>(null);

  const copyProduct = (data: ProductCopyData) => {
    setCopiedData(data);
    // حفظ في localStorage للاحتفاظ بالبيانات حتى لو تم إعادة تحميل الصفحة
    localStorage.setItem('productCopyData', JSON.stringify(data));
  };

  const pasteProduct = (): ProductCopyData | null => {
    if (copiedData) return copiedData;
    
    // محاولة استرداد من localStorage
    const savedData = localStorage.getItem('productCopyData');
    if (savedData) {
      try {
        const parsed = JSON.parse(savedData);
        setCopiedData(parsed);
        return parsed;
      } catch (error) {
        }
    }
    
    return null;
  };

  const clearCopiedData = () => {
    setCopiedData(null);
    localStorage.removeItem('productCopyData');
  };

  const hasCopiedData = copiedData !== null || localStorage.getItem('productCopyData') !== null;

  return (
    <ProductCopyPasteContext.Provider value={{
      copiedData,
      copyProduct,
      pasteProduct,
      clearCopiedData,
      hasCopiedData
    }}>
      {children}
    </ProductCopyPasteContext.Provider>
  );
};

export const useProductCopyPaste = () => {
  const context = useContext(ProductCopyPasteContext);
  if (context === undefined) {
    throw new Error('useProductCopyPaste must be used within a ProductCopyPasteProvider');
  }
  return context;
};

===== src/hoc/withPermissions.tsx =====
// File: src/hoc/withPermissions.tsx
import React from 'react';
import { useAuth } from 'src/contexts/AuthContext';
import { usePermissions } from 'src/hooks/usePermissions';
import UnauthorizedPage from 'src/Pages/errors/UnauthorizedPage';
import { Box, CircularProgress, Typography } from '@mui/material';

interface PermissionConfig {
  pageName?: string;
  pageId?: number;
  moduleId?: number;
  requiredPermissions?: string[];
}

// ⭐ حل مضمون: غير هذا لـ false لما تخلص development
const BYPASS_PERMISSIONS = true;

const withPermissions = <P extends object>(
  WrappedComponent: React.ComponentType<P>,
  config: PermissionConfig
) => {
  const PermissionWrapper: React.FC<P> = (props) => {
    const { hasPageAccess, canAccessModule, isLoading: authLoading } = useAuth();
    const { hasPermission, loading: permLoading } = usePermissions();

    // ⭐ إذا BYPASS_PERMISSIONS = true، اعطي كل الصلاحيات
    if (BYPASS_PERMISSIONS) {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };

      return <WrappedComponent {...props} {...allPermissions} />;
    }

    // Loading state
    if (authLoading || permLoading) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '50vh',
            gap: 2
          }}
        >
          <CircularProgress />
          <Typography>جاري التحقق من الصلاحيات...</Typography>
        </Box>
      );
    }

    // التحقق من صلاحية الصفحة
    if (config.pageName && !hasPageAccess(config.pageName)) {
      return <UnauthorizedPage />;
    }

    // التحقق من صلاحية الوحدة
    if (config.moduleId && !canAccessModule(config.moduleId)) {
      return <UnauthorizedPage />;
    }

    // التحقق من صلاحيات محددة
    if (config.pageId && config.requiredPermissions) {
      const hasAllPermissions = config.requiredPermissions.every(permission =>
        hasPermission(config.pageId!, permission)
      );
      
      if (!hasAllPermissions) {
        return <UnauthorizedPage />;
      }
    }

    // إضافة الصلاحيات كـ props للمكون
    const permissionProps = {
      canAdd: config.pageId ? hasPermission(config.pageId, 'Add') : true,
      canEdit: config.pageId ? hasPermission(config.pageId, 'Edit') : true,
      canDelete: config.pageId ? hasPermission(config.pageId, 'Delete') : true,
      canExport: config.pageId ? hasPermission(config.pageId, 'Export') : true,
      canImport: config.pageId ? hasPermission(config.pageId, 'Import') : true,
      canView: config.pageId ? hasPermission(config.pageId, 'View') : true,
    };

    return <WrappedComponent {...props} {...permissionProps} />;
  };

  PermissionWrapper.displayName = `withPermissions(${WrappedComponent.displayName || WrappedComponent.name})`;
  
  return PermissionWrapper;
};

export default withPermissions;

===== src/hooks/useCopyPaste.ts =====
// File: src/hooks/useCopyPaste.ts
import { useState, useCallback } from 'react';

interface CopyPasteOptions {
  storageKey: string;
  onCopySuccess?: (data: any) => void;
  onPasteSuccess?: (data: any) => void;
  onError?: (error: string) => void;
}

export const useCopyPaste = <T = any>(options: CopyPasteOptions) => {
  const { storageKey, onCopySuccess, onPasteSuccess, onError } = options;
  
  const [copiedData, setCopiedData] = useState<T | null>(() => {
    try {
      const saved = localStorage.getItem(storageKey);
      return saved ? JSON.parse(saved) : null;
    } catch {
      return null;
    }
  });

  const copyData = useCallback((data: T) => {
    try {
      setCopiedData(data);
      localStorage.setItem(storageKey, JSON.stringify(data));
      onCopySuccess?.(data);
    } catch (error) {
      onError?.('فشل في نسخ البيانات');
    }
  }, [storageKey, onCopySuccess, onError]);

  const pasteData = useCallback((): T | null => {
    try {
      if (copiedData) {
        onPasteSuccess?.(copiedData);
        return copiedData;
      }
      
      const saved = localStorage.getItem(storageKey);
      if (saved) {
        const parsed = JSON.parse(saved);
        setCopiedData(parsed);
        onPasteSuccess?.(parsed);
        return parsed;
      }
      
      onError?.('لا توجد بيانات منسوخة');
      return null;
    } catch (error) {
      onError?.('فشل في لصق البيانات');
      return null;
    }
  }, [copiedData, storageKey, onPasteSuccess, onError]);

  const clearData = useCallback(() => {
    setCopiedData(null);
    localStorage.removeItem(storageKey);
  }, [storageKey]);

  const hasCopiedData = copiedData !== null;

  return {
    copiedData,
    copyData,
    pasteData,
    clearData,
    hasCopiedData
  };
};

===== src/hooks/useGlobalErrorHandler.ts =====
// File: src/hooks/useGlobalErrorHandler.ts
import { useEffect } from 'react';
import { useError } from '../contexts/ErrorContext';
import { setGlobalErrorHandler, setGlobalSuccessHandler } from '../utils/axios';

export const useGlobalErrorHandler = () => {
  const { showError, showSuccess } = useError();

  useEffect(() => {
    // ربط Global Error Handler مع axios
    setGlobalErrorHandler(showError);
    setGlobalSuccessHandler(showSuccess);

    // تنظيف عند إلغاء التحميل
    return () => {
      setGlobalErrorHandler(() => {});
      setGlobalSuccessHandler(() => {});
    };
  }, [showError, showSuccess]);
};

===== src/hooks/usePermissions.ts =====
// File: src/hooks/usePermissions.ts
import { useState, useEffect } from 'react';
import { useAuth } from 'src/contexts/AuthContext';
import { getUserPagePermission, PagePermission } from 'src/utils/api/authApi';

interface UsePermissionsReturn {
  permissions: { [pageId: number]: PagePermission[] };
  loading: boolean;
  hasPermission: (pageId: number, permissionName: string) => boolean;
  canView: (pageId: number) => boolean;
  canAdd: (pageId: number) => boolean;
  canEdit: (pageId: number) => boolean;
  canDelete: (pageId: number) => boolean;
  canExport: (pageId: number) => boolean;
  canImport: (pageId: number) => boolean;
}

export const usePermissions = (): UsePermissionsReturn => {
  const { userPages } = useAuth();
  const [permissions, setPermissions] = useState<{ [pageId: number]: PagePermission[] }>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadPermissions = async () => {
      try {
        setLoading(true);
        const permissionsData: { [pageId: number]: PagePermission[] } = {};
        
        for (const page of userPages) {
          if (page.hasAccess) {
            try {
              const pagePermissions = await getUserPagePermission(page.pageId);
              permissionsData[page.pageId] = pagePermissions;
            } catch (error) {
              permissionsData[page.pageId] = [];
            }
          }
        }
        
        setPermissions(permissionsData);
      } catch (error) {
        } finally {
        setLoading(false);
      }
    };

    if (userPages.length > 0) {
      loadPermissions();
    } else {
      setLoading(false);
    }
  }, [userPages]);

  // التحقق من صلاحية معينة
  const hasPermission = (pageId: number, permissionName: string): boolean => {
    const pagePermissions = permissions[pageId];
    if (!pagePermissions) return false;
    
    const permission = pagePermissions.find(p => p.permissionName === permissionName);
    return permission?.hasPermission || false;
  };

  // صلاحيات شائعة
  const canView = (pageId: number) => hasPermission(pageId, 'View');
  const canAdd = (pageId: number) => hasPermission(pageId, 'Add');
  const canEdit = (pageId: number) => hasPermission(pageId, 'Edit');
  const canDelete = (pageId: number) => hasPermission(pageId, 'Delete');
  const canExport = (pageId: number) => hasPermission(pageId, 'Export');
  const canImport = (pageId: number) => hasPermission(pageId, 'Import');

  return {
    permissions,
    loading,
    hasPermission,
    canView,
    canAdd,
    canEdit,
    canDelete,
    canExport,
    canImport
  };
};

===== src/hooks/useThermalPrint.ts =====
// File: src/hooks/useThermalPrint.ts
import { useCallback } from 'react';

interface ThermalPrintOptions {
  printerType?: 'usb' | 'network';
  networkConfig?: {
    ip: string;
    port: number;
  };
}

export const useThermalPrint = (options: ThermalPrintOptions = {}) => {
  
  // دالة الطباعة عبر الشبكة مباشرة
  const printViaNetwork = useCallback(async (content: string) => {
    try {
      if (!options.networkConfig) {
        throw new Error('إعدادات الشبكة غير محددة');
      }

      const { ip, port } = options.networkConfig;
      
      // إرسال مباشر للطابعة عبر الشبكة
      const escPosData = convertToESCPOS(content);
      
      // استخدام WebSocket للاتصال المباشر
      const ws = new WebSocket(`ws://${ip}:${port}`);
      
      return new Promise((resolve) => {
        ws.onopen = () => {
          ws.send(escPosData);
          ws.close();
          resolve({ success: true });
        };
        
        ws.onerror = () => {
          // محاولة عبر HTTP إذا فشل WebSocket
          fetch(`http://${ip}:${port}/print`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/octet-stream' },
            body: escPosData
          }).then(() => {
            resolve({ success: true });
          }).catch(() => {
            resolve({ success: false, error: 'فشل الاتصال بالطابعة' });
          });
        };
      });
      
    } catch (error) {
      return { success: false, error: error && typeof error === 'object' && 'message' in error ? (error as any).message : String(error) };
    }
  }, [options.networkConfig]);

  // دالة الطباعة عبر USB مع حفظ البورت
  const printViaUSB = useCallback(async (content: string) => {
    try {
      if (!('serial' in navigator)) {
        throw new Error('Web Serial API غير مدعوم');
      }

      // التحقق من البورت المحفوظ
      const savedPortInfo = localStorage.getItem('thermal_usb_port');
      let port;

      if (savedPortInfo) {
        // محاولة استخدام البورت المحفوظ
        try {
          const ports = await (navigator as any).serial.getPorts();
          port = ports.find((p: any) => p.getInfo().usbVendorId && p.getInfo().usbProductId);
        } catch (e) {
          }
      }

      // إذا لم يوجد بورت محفوظ أو فشل، اطلب واحد جديد
      if (!port) {
        port = await (navigator as any).serial.requestPort();
        // حفظ معلومات البورت
        const portInfo = port.getInfo();
        localStorage.setItem('thermal_usb_port', JSON.stringify(portInfo));
      }

      await port.open({ baudRate: 9600 });
      
      const writer = port.writable?.getWriter();
      if (writer) {
        const escPosData = convertToESCPOS(content);
        await writer.write(escPosData);
        writer.releaseLock();
      }

      await port.close();
      return { success: true };
      
    } catch (error) {
      return { success: false, error: error && typeof error === 'object' && 'message' in error ? (error as any).message : String(error) };
    }
  }, []);

  // تحويل النص إلى ESC/POS commands
  const convertToESCPOS = (content: string): Uint8Array => {
    const encoder = new TextEncoder();
    const commands = [];
    
    // ESC/POS initialization
    commands.push(0x1B, 0x40); // Initialize
    commands.push(0x1B, 0x61, 0x01); // Center align
    commands.push(0x1B, 0x21, 0x08); // Double height
    
    // Content
    const contentBytes = encoder.encode(content);
    commands.push(...Array.from(contentBytes));
    
    // Cut paper
    commands.push(0x1D, 0x56, 0x41, 0x10);
    
    return new Uint8Array(commands);
  };

  // الدالة الرئيسية للطباعة
  const print = useCallback(async (content: string) => {
    const printerType = options.printerType || 'usb';
    
    if (printerType === 'network') {
      return await printViaNetwork(content);
    } else {
      return await printViaUSB(content);
    }
  }, [options.printerType, printViaNetwork, printViaUSB]);

  return { print };
};

===== src/index.css =====
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}



/* ===== Print Styles ===== */
@media print {
  /* إخفاء العناصر غير المرغوب فيها */
  .no-print,
  header,
  nav,
  .sidebar,
  .toolbar,
  .actions,
  button,
  .MuiButton-root,
  .MuiIconButton-root,
  .MuiAppBar-root,
  .MuiDrawer-root,
  .MuiFab-root {
    display: none !important;
  }
  
  /* إظهار العناصر المخصصة للطباعة */
  .print-only {
    display: block !important;
  }
  
  /* تحسين عرض الجداول */
  .MuiDataGrid-root {
    box-shadow: none !important;
    border: 1px solid #ddd !important;
  }
  
  .MuiDataGrid-cell {
    border-right: 1px solid #ddd !important;
  }
  
  .MuiDataGrid-columnHeaders {
    background-color: #f5f5f5 !important;
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
  }
  
  /* تحسين عرض الكاردز */
  .MuiCard-root {
    box-shadow: none !important;
    border: 1px solid #ddd !important;
    margin-bottom: 10px !important;
  }
  
  /* تحسين النصوص */
  body {
    font-size: 12pt !important;
    line-height: 1.4 !important;
    color: black !important;
    background: white !important;
  }
  
  h1, h2, h3, h4, h5, h6 {
    color: black !important;
    page-break-after: avoid !important;
  }
  
  /* منع تقسيم العناصر */
  .MuiTableRow-root,
  .MuiCard-root,
  .print-keep-together {
    page-break-inside: avoid !important;
  }
  
  /* إعدادات الصفحة */
  @page {
    margin: 1cm;
    size: A4;
  }
  
  /* تحسين المساحات */
  .MuiContainer-root {
    max-width: none !important;
    padding: 0 !important;
    margin: 0 !important;
  }
}

/* ===== Thermal Print Preparation ===== */
.thermal-print-ready {
  font-family: 'Courier New', monospace !important;
  font-size: 12px !important;
  line-height: 1.2 !important;
  max-width: 300px !important;
}


/* منع double scrollbar */
.MuiDialog-paper {
  overflow-y: auto !important;
}

.MuiDialogContent-root {
  overflow-y: visible !important;
  overflow-x: hidden !important;
}

/* إخفاء scrollbar مع الاحتفاظ بالوظيفة */
.MuiDialog-paper::-webkit-scrollbar {
  width: 8px;
}

.MuiDialog-paper::-webkit-scrollbar-track {
  background: transparent;
}

.MuiDialog-paper::-webkit-scrollbar-thumb {
  background: rgba(0,0,0,0.2);
  border-radius: 4px;
}

.MuiDialog-paper::-webkit-scrollbar-thumb:hover {
  background: rgba(0,0,0,0.3);
}

/* للموبايل */
@media (max-width: 768px) {
  .MuiDialog-paper {
    margin: 0 !important;
    max-height: 100vh !important;
    height: 100vh !important;
    border-radius: 0 !important;
  }
}
===== src/layouts/blank/BlankLayout.tsx =====
import { Outlet } from "react-router";
import LoadingBar from '../../LoadingBar';

const BlankLayout = () => (
  <>
    <LoadingBar />
    <Outlet />
  </>
);

export default BlankLayout;

===== src/layouts/full/FullLayout.tsx =====
import { FC } from 'react';
import { styled, Container, Box, useTheme } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { Outlet } from 'react-router';
import { AppState } from 'src/store/Store';
import Header from './vertical/header/Header';
import Sidebar from './vertical/sidebar/Sidebar';
import Customizer from './shared/customizer/Customizer';
import Navigation from '../full/horizontal/navbar/Navigation';
import HorizontalHeader from '../full/horizontal/header/Header';
import ScrollToTop from '../../components/shared/ScrollToTop';
import LoadingBar from '../../LoadingBar';

const MainWrapper = styled('div')(() => ({
  display: 'flex',
  minHeight: '100vh',
  width: '100%',
}));

const PageWrapper = styled('div')(() => ({
  display: 'flex',
  flexGrow: 1,
  paddingBottom: '60px',
  flexDirection: 'column',
  zIndex: 1,
  width: '100%',
  backgroundColor: 'transparent',
}));

const FullLayout: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();

  return (
    <>
      <LoadingBar />
      <MainWrapper className={customizer.activeMode === 'dark' ? 'darkbg mainwrapper' : 'mainwrapper'}>

        {/* ------------------------------------------- */}
        {/* Sidebar */}
        {/* ------------------------------------------- */}
        {customizer.isHorizontal ? '' : <Sidebar />}
        {/* ------------------------------------------- */}
        {/* Main Wrapper */}
        {/* ------------------------------------------- */}
        <PageWrapper
          className="page-wrapper"
          sx={{
            ...(customizer.isCollapse && {
              [theme.breakpoints.up('lg')]: { ml: `${customizer.MiniSidebarWidth}px` },
            }),
          }}
        >
          {/* ------------------------------------------- */}
          {/* Header */}
          {/* ------------------------------------------- */}
          {customizer.isHorizontal ? <HorizontalHeader /> : <Header />}
          {/* PageContent */}
          {customizer.isHorizontal ? <Navigation /> : ''}
          <Container
            sx={{
              pt: '30px',
              maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
            }}
          >
            {/* ------------------------------------------- */}
            {/* PageContent */}
            {/* ------------------------------------------- */}

            <Box sx={{ minHeight: 'calc(100vh - 170px)' }}>
              <ScrollToTop>
                <Outlet />
              </ScrollToTop>
            </Box>

            {/* ------------------------------------------- */}
            {/* End Page */}
            {/* ------------------------------------------- */}
          </Container>
          <Customizer />
        </PageWrapper>
      </MainWrapper>
    </>

  );
};

export default FullLayout;

===== src/layouts/full/horizontal/header/Header.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import {
  IconButton,
  Box,
  AppBar,
  useMediaQuery,
  Toolbar,
  styled,
  Stack,
  Theme,
} from '@mui/material';

import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar, setDarkMode } from 'src/store/customizer/CustomizerSlice';
import { IconMenu2, IconMoon, IconSun } from '@tabler/icons-react';
import Notifications from 'src/layouts/full/vertical/header/Notification';
import Cart from 'src/layouts/full/vertical/header/Cart';
import Profile from 'src/layouts/full/vertical/header/Profile';
import Search from 'src/layouts/full/vertical/header/Search';
import Language from 'src/layouts/full/vertical/header/Language';
import Logo from 'src/layouts/full/shared/logo/Logo';
import { AppState } from 'src/store/Store';

const Header = () => {
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',

    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    margin: '0 auto',
    width: '100%',
    color: `${theme.palette.text.secondary} !important`,
  }));

  return (
    <AppBarStyled position="sticky" color="default" elevation={8}>
      <ToolbarStyled
        sx={{
          maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
        }}
      >
        <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box>
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        {lgDown ? (
          <IconButton
            color="inherit"
            aria-label="menu"
            onClick={() => dispatch(toggleMobileSidebar())}
          >
            <IconMenu2 />
          </IconButton>
        ) : (
          ''
        )}
        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        {lgUp ? (
          <>
          </>
        ) : null}
        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>
          <Notifications />

          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;

===== src/layouts/full/horizontal/navbar/Menudata.ts =====
/* --------------------------------------------------------------------------
 * Sidebar Menu Configuration
 * --------------------------------------------------------------------------
 * Match the visual hierarchy shown in the reference screenshots (Inventory →
 * Reports) while preserving the first two Admin Dashboard links.  All strings
 * are provided as i18n keys (eg. "sidebar.inventory") so that `react-i18next`
 * can supply Arabic ↔︎ English translations at runtime.
 * --------------------------------------------------------------------------*/

import { uniqueId } from 'lodash';
import {
  IconPackage,
  IconLayoutGridAdd,
  IconAdjustments,
  IconStack3,
  IconBuildingWarehouse,
  IconTruck,
  IconUsers,

} from '@tabler/icons-react';

interface MenuItem {
  id: string;
  title?: string;
  // i18n translation key; if omitted, `title` is treated as the key itself
  tKey?: string;
  icon?: any;
  href?: string;
  navlabel?: boolean;
  subheader?: string; // i18n key for section heading
  children?: MenuItem[];
  chip?: string;
  chipColor?: string;
  variant?: string;
  external?: boolean;
  disabled?: boolean;
}


const SidebarConfig: MenuItem[] = [

  /* ---------------------------------------------------------------------- */
  /*  Inventory                                                             */
  /* ---------------------------------------------------------------------- */
  {  title: 'sidebar.inventory', id: uniqueId() ,    icon: IconBuildingWarehouse,
           href: '/inventory/warehouses'
, children: [

{    id: uniqueId(),
    title: 'sidebar.data',
    icon: IconLayoutGridAdd,
    href: '/inventory/data',
children: [
  {
    id: uniqueId(),
    title: 'sidebar.warehouses',
    icon: IconBuildingWarehouse,
    href: '/inventory/warehouses'
  },
  {
    id: uniqueId(),
    title: 'sidebar.units',
    icon: IconAdjustments,
    href: '/inventory/units'
  },
    {
    id: uniqueId(),
    title: 'groups.title',
    icon: IconLayoutGridAdd,
    href: '/inventory/groups'
  },
  {
    id: uniqueId(),
    title: 'sidebar.products',
    icon: IconPackage,
    href: '/inventory/products'
  },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.createProduct',
  //   icon: IconLayoutGridAdd,
  //   href: '/inventory/products/create'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.expiredProducts',
  //   icon: IconClock,
  //   href: '/inventory/products/expired'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.lowStocks',
  //   icon: IconTrendingDown,
  //   href: '/inventory/products/low-stock'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.category',
  //   icon: IconCategory,
  //   href: '/inventory/category'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.subCategory',
  //   icon: IconHierarchy2,
  //   href: '/inventory/sub-category'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.brands',
  //   icon: IconTrademark,
  //   href: '/inventory/brands'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.units',
  //   icon: IconRuler,
  //   href: '/inventory/units'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.variantAttributes',
  //   icon: IconAdjustments,
  //   href: '/inventory/variants'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.warranties',
  //   icon: IconCertificate,
  //   href: '/inventory/warranties'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.printBarcode',
  //   icon: IconBarcode,
  //   href: '/inventory/barcode'
  // },
  // {
  //   id: uniqueId(),
  //   title: 'sidebar.printQrCode',
  //   icon: IconQrcode,
  //   href: '/inventory/qrcode'
  // }
]
  },
  {
    id: uniqueId(),
    title: 'sidebar.transactions',
    icon: IconStack3,
    href: '/inventory/Transactions'
    
  },
  {
    id: uniqueId(),
    title: 'sidebar.reports',
    icon: IconAdjustments,
    href: '/inventory/reports'
, children: [
      {
        id: uniqueId(),
        title: 'sidebar.productBalance',
        icon: IconPackage,
        href: '/reports/product-balance'
      },
    ]
  }
] },


  {  title: 'sidebar.purchases', id: uniqueId() ,    icon: IconTruck,
           href: '/purchases/purchases'
, children: [

{    id: uniqueId(),
    title: 'sidebar.data',
    icon: IconLayoutGridAdd,
    href: '/purchases/data',
children: [
  {
    id: uniqueId(),
    title: 'sidebar.suppliers',
    icon: IconUsers,
    href: '/purchases/suppliers'
  },


]
  },
  {
    id: uniqueId(),
    title: 'sidebar.transactions',
    icon: IconStack3,
    href: '/inventory/Transactions',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.purchaseOrders',
        icon: IconLayoutGridAdd,
        href: '/purchases/purchase-orders'
      },
      {
        id: uniqueId(),
        title: 'sidebar.purchases',
        icon: IconLayoutGridAdd,
        href: '/purchases/purchases'
      }]
  },
  {
    id: uniqueId(),
    title: 'sidebar.reports',
    icon: IconAdjustments,
    href: '/inventory/reports'
  }
] },

];

export default SidebarConfig;
===== src/layouts/full/horizontal/navbar/NavCollapse/NavCollapse.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { useLocation } from 'react-router';

// mui imports
import { ListItemIcon, styled, ListItemText, Box, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';

// custom imports
import NavItem from '../NavItem/NavItem';

// plugins
import { IconChevronDown } from '@tabler/icons-react';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: any;
}

// FC Component For Dropdown Menu
const NavCollapse = ({ menu, level, pathWithoutLastPart, pathDirect, hideMenu }: NavCollapseProps) => {
  const Icon = menu.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const [open, setOpen] = React.useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);
  const menuIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  React.useEffect(() => {
    setOpen(false);
    menu.children.forEach((item: any) => {
      if (item.href === pathname) {
        setOpen(true);
      }
    });
  }, [pathname, menu.children]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    width: 'auto',
    padding: '5px 10px',
    position: 'relative',
    flexGrow: 'unset',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    whiteSpace: 'nowrap',
    color: open || pathname.includes(menu.href) || level < 1 ? 'white' : theme.palette.text.secondary,
    backgroundColor: open || pathname.includes(menu.href) ? theme.palette.primary.main : '',

    '&:hover': {
      backgroundColor:
        open || pathname.includes(menu.href)
          ? theme.palette.primary.main
          : theme.palette.primary.light,
    },
    '&:hover > .SubNav': { display: 'block' },
  }));

  const ListSubMenu = styled((props: any) => <Box {...props} />)(() => ({
    display: 'none',
    position: 'absolute',
    top: level > 1 ? `0px` : '35px',
    left: level > 1 ? `${level + 228}px` : '0px',
    padding: '10px',
    width: '250px',
    color: theme.palette.text.primary,
    boxShadow: theme.shadows[8],
    backgroundColor: theme.palette.background.paper,
  }));

  const listItemProps: {
    component: string;
  } = {
    component: 'li',
  };

  // If Menu has Children
  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={undefined} />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={function (): void {
            throw new Error('Function not implemented.');
          }} />
      );
    }
  });

  return (
    <React.Fragment key={menu.id}>
      <ListItemStyled
        {...listItemProps}
        selected={pathWithoutLastPart === menu.href}
        className={open ? 'selected' : ''}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {menuIcon}
        </ListItemIcon>
        <ListItemText color="inherit" sx={{ mr: 'auto' }}>
          {menu.title}
        </ListItemText>
        <IconChevronDown size="1rem" />
        <ListSubMenu component={'ul'} className="SubNav">
          {submenus}
        </ListSubMenu>
      </ListItemStyled>
    </React.Fragment>
  );
};

export default NavCollapse;

===== src/layouts/full/horizontal/navbar/Navigation.tsx =====
import { useMediaQuery, Box, Drawer, Container, Theme } from '@mui/material';
import NavListing from './NavListing/NavListing';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import SidebarItems from '../../vertical/sidebar/SidebarItems';
import { AppState } from 'src/store/Store';

const Navigation = () => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  if (lgUp) {
    return (
      <Box sx={{ borderBottom: '1px solid rgba(0,0,0,0.05)' }} py={2}>
        {/* ------------------------------------------- */}
        {/* Sidebar for desktop */}
        {/* ------------------------------------------- */}
        <Container
          sx={{
            maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
          }}
        >
          <NavListing />
        </Container>
      </Box>
    );
  }

  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
        },
      }}
    >
      {/* ------------------------------------------- */}
      {/* Logo */}
      {/* ------------------------------------------- */}
      <Box px={2}>
        <Logo />
      </Box>
      {/* ------------------------------------------- */}
      {/* Sidebar For Mobile */}
      {/* ------------------------------------------- */}
      <SidebarItems />
    </Drawer>
  );
};

export default Navigation;

===== src/layouts/full/horizontal/navbar/NavItem/NavItem.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { NavLink } from 'react-router';

// mui imports
import { ListItemIcon, List, styled, ListItemText, useTheme, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
};

interface ItemType {
  item: NavGroup;
  onClick: React.MouseEventHandler<HTMLElement>;
  hideMenu: any;
  level?: number | any;
  pathDirect: string;
}

const NavItem = ({ item, level, pathDirect, onClick }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item.icon;
  const theme = useTheme();
  const itemIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  const ListItemStyled2 = styled(ListItemButton)(() => ({
    padding: '5px 10px',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    marginBottom: level > 1 ? '3px' : '0px',
    color:
      level > 1 && pathDirect === item.href ? `${theme.palette.primary.main}!important` : theme.palette.text.secondary,

    '&:hover': {
      backgroundColor: theme.palette.primary.light,
    },
    '&.Mui-selected': {
      color: level > 1 ? theme.palette.primary.main : 'white!important',
      backgroundColor: level > 1 ? 'transparent' : theme.palette.primary.main,
      '&:hover': {
        backgroundColor: level > 1 ? '' : theme.palette.primary.main,
        color: 'white',
      },
    },
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item.id}>
      <ListItemStyled2
        {...listItemProps}
        disabled={item.disabled}
        selected={pathDirect === item.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {itemIcon}
        </ListItemIcon>
        <ListItemText>{item.title}</ListItemText>
      </ListItemStyled2>
    </List>
  );
};


export default NavItem;

===== src/layouts/full/horizontal/navbar/NavListing/NavListing.tsx =====
// File: src/layouts/sidebar/NavListing/NavListing.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Menudata from '../Menudata';
import { useLocation } from 'react-router';
import { Box, List, Theme, useMediaQuery } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { useTranslation } from 'react-i18next';
import NavItem from '../NavItem/NavItem';
import NavCollapse from '../NavCollapse/NavCollapse';
import { AppState } from 'src/store/Store';

const NavListing = () => {
  const { t } = useTranslation();
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const hideMenu = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';

  // دالة لترجمة عناصر القائمة
  const translateMenuItems = (items: any[]): any[] => {
    return items.map(item => ({
      ...item,
      title: t(item.title), // ترجمة العنوان
      children: item.children ? translateMenuItems(item.children) : undefined
    }));
  };

  const translatedMenuData = translateMenuItems(Menudata);

  return (
    <Box>
      <List sx={{ p: 0, display: 'flex', gap: '3px', zIndex: '100' }}>
        {translatedMenuData.map((item) => {
          if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id} 
                onClick={undefined}              
              />
            );
          } else {
            return (
              <NavItem 
                item={item} 
                key={item.id} 
                pathDirect={pathDirect} 
                hideMenu={hideMenu} 
                onClick={function (): void {
                  throw new Error('Function not implemented.');
                }} 
              />
            );
          }
        })}
      </List>
    </Box>
  );
};

export default NavListing;

===== src/layouts/full/shared/breadcrumb/Breadcrumb.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, Box, Breadcrumbs, Link, Theme } from '@mui/material';
import { NavLink } from 'react-router';

import breadcrumbImg from 'src/assets/images/breadcrumb/ChatBc.png';
import { IconCircle } from '@tabler/icons-react';

interface BreadCrumbType {
  subtitle?: string;
  items?: any[];
  title: string;
  children?: any;
}

const Breadcrumb = ({ subtitle, items, title, children }: BreadCrumbType) => (
  <Grid
    container
    sx={{
      backgroundColor: 'primary.light',
      borderRadius: (theme: Theme) => theme.shape.borderRadius / 4,
      p: '30px 25px 20px',
      marginBottom: '30px',
      position: 'relative',
      overflow: 'hidden',
    }}
  >
    <Grid
      mb={1}
      size={{
        xs: 12,
        sm: 6,
        lg: 8
      }}>
      <Typography variant="h4">{title}</Typography>
      <Typography color="textSecondary" variant="h6" fontWeight={400} mt={0.8} mb={0}>
        {subtitle}
      </Typography>
      <Breadcrumbs
        separator={
          <IconCircle
            size="5"
            fill="textSecondary"
            fillOpacity={'0.6'}
            style={{ margin: '0 5px' }}
          />
        }
        sx={{ alignItems: 'center', mt: items ? '10px' : '' }}
        aria-label="breadcrumb"
      >
        {items
          ? items.map((item) => (
            <div key={item.title}>
              {item.to ? (
                <Link underline="none" color="inherit" component={NavLink} to={item.to}>
                  {item.title}
                </Link>
              ) : (
                <Typography color="textPrimary">{item.title}</Typography>
              )}
            </div>
          ))
          : ''}
      </Breadcrumbs>
    </Grid>
    <Grid
      display="flex"
      alignItems="flex-end"
      size={{
        xs: 12,
        sm: 6,
        lg: 4
      }}>
      <Box
        sx={{
          display: { xs: 'none', md: 'block', lg: 'flex' },
          alignItems: 'center',
          justifyContent: 'flex-end',
          width: '100%',
        }}
      >
        {children ? (
          <Box sx={{ top: '0px', position: 'absolute' }}>{children}</Box>
        ) : (
          <>
            <Box sx={{ top: '0px', position: 'absolute' }}>
              <img src={breadcrumbImg} alt={breadcrumbImg} width={'165px'} />
            </Box>
          </>
        )}
      </Box>
    </Grid>
  </Grid>
);

export default Breadcrumb;

===== src/layouts/full/shared/customizer/Customizer.tsx =====
import { FC, useState } from 'react';
import {
  Fab,
  Drawer,
  Grid2 as Grid,
  Slider,
  Divider,
  styled,
  IconButton,
  Typography,
  Tooltip,
  Stack,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import Box, { BoxProps } from '@mui/material/Box';
import { IconX, IconSettings, IconCheck } from '@tabler/icons-react';
import {
  setTheme,
  setDir,
  setDarkMode,
  toggleLayout,
  toggleSidebar,
  toggleHorizontal,
  setBorderRadius,
  setCardShadow,
} from 'src/store/customizer/CustomizerSlice';
import { AppState } from 'src/store/Store';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import WbSunnyTwoToneIcon from '@mui/icons-material/WbSunnyTwoTone';
import DarkModeTwoToneIcon from '@mui/icons-material/DarkModeTwoTone';
import SwipeLeftAltTwoToneIcon from '@mui/icons-material/SwipeLeftAltTwoTone';
import SwipeRightAltTwoToneIcon from '@mui/icons-material/SwipeRightAltTwoTone';
import AspectRatioTwoToneIcon from '@mui/icons-material/AspectRatioTwoTone';
import CallToActionTwoToneIcon from '@mui/icons-material/CallToActionTwoTone';
import ViewSidebarTwoToneIcon from '@mui/icons-material/ViewSidebarTwoTone';
import WebAssetTwoToneIcon from '@mui/icons-material/WebAssetTwoTone';
import { ViewComfyTwoTone, PaddingTwoTone, BorderOuter } from '@mui/icons-material';

const SidebarWidth = '320px';
interface colors {
  id: number;
  bgColor: string;
  disp?: string;
}
const Customizer: FC = () => {
  const [showDrawer, setShowDrawer] = useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);

  const dispatch = useDispatch();

  const StyledBox = styled(Box)<BoxProps>(({ theme }) => ({
    boxShadow: theme.shadows[8],
    padding: '20px',
    cursor: 'pointer',
    justifyContent: 'center',
    display: 'flex',
    transition: '0.1s ease-in',
    border: '1px solid rgba(145, 158, 171, 0.12)',
    '&:hover': {
      transform: 'scale(1.05)',
    },
  }));

  const thColors: colors[] = [
    {
      id: 1,
      bgColor: '#5D87FF',
      disp: 'BLUE_THEME',
    },
    {
      id: 2,
      bgColor: '#0074BA',
      disp: 'AQUA_THEME',
    },
    {
      id: 3,
      bgColor: '#763EBD',
      disp: 'PURPLE_THEME',
    },
    {
      id: 4,
      bgColor: '#0A7EA4',
      disp: 'GREEN_THEME',
    },
    {
      id: 5,
      bgColor: '#01C0C8',
      disp: 'CYAN_THEME',
    },
    {
      id: 6,
      bgColor: '#FA896B',
      disp: 'ORANGE_THEME',
    },
  ];

  return (
    (<div>
      {/* ------------------------------------------- */}
      {/* --Floating Button to open customizer ------ */}
      {/* ------------------------------------------- */}
      <Tooltip title="Settings">
        <Fab
          color="primary"
          aria-label="settings"
          sx={{ position: 'fixed', right: '25px', bottom: '15px' }}
          onClick={() => setShowDrawer(true)}
        >
          <IconSettings stroke={1.5} />
        </Fab>
      </Tooltip>
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{
          sx: {
            width: SidebarWidth,
          },
        }}
      >
        {/* ------------------------------------------- */}
        {/* ------------ Customizer Sidebar ------------- */}
        {/* ------------------------------------------- */}
        <Scrollbar sx={{ height: 'calc(100vh - 5px)' }}>
          <Box p={2} display="flex" justifyContent={'space-between'} alignItems="center">
            <Typography variant="h4">Settings</Typography>

            <IconButton color="inherit" onClick={() => setShowDrawer(false)}>
              <IconX size="1rem" />
            </IconButton>
          </Box>
          <Divider />
          <Box p={3}>
            {/* ------------------------------------------- */}
            {/* ------------ Dark light theme setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDarkMode('light'))} display="flex" gap={1}>
                <WbSunnyTwoToneIcon
                  color={customizer.activeMode === 'light' ? 'primary' : 'inherit'}
                />
                Light
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDarkMode('dark'))} display="flex" gap={1}>
                <DarkModeTwoToneIcon
                  color={customizer.activeMode === 'dark' ? 'primary' : 'inherit'}
                />
                Dark
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ RTL theme setting -------------*/}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Direction
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDir('ltr'))} display="flex" gap={1}>
                <SwipeLeftAltTwoToneIcon
                  color={customizer.activeDir === 'ltr' ? 'primary' : 'inherit'}
                />{' '}
                LTR
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDir('rtl'))} display="flex" gap={1}>
                <SwipeRightAltTwoToneIcon
                  color={customizer.activeDir === 'rtl' ? 'primary' : 'inherit'}
                />{' '}
                RTL
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Colors
            </Typography>
            <Grid container spacing={2}>
              {thColors.map((thcolor) => (
                <Grid key={thcolor.id} size={4}>
                  <StyledBox onClick={() => dispatch(setTheme(thcolor.disp))}>
                    <Tooltip title={`${thcolor.disp}`} placement="top">
                      <Box
                        sx={{
                          backgroundColor: thcolor.bgColor,
                          width: '25px',
                          height: '25px',
                          borderRadius: '60px',
                          alignItems: 'center',
                          justifyContent: 'center',
                          display: 'flex',
                          color: 'white',
                        }}
                        aria-label={`${thcolor.bgColor}`}
                      >
                        {customizer.activeTheme === thcolor.disp ? <IconCheck width={13} /> : ''}
                      </Box>
                    </Tooltip>
                  </StyledBox>
                </Grid>
              ))}
            </Grid>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Horizontal / Vertical ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Layout Type
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleHorizontal(false))} display="flex" gap={1}>
                <ViewComfyTwoTone
                  color={customizer.isHorizontal === false ? 'primary' : 'inherit'}
                />
                Vertical
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleHorizontal(true))} display="flex" gap={1}>
                <PaddingTwoTone color={customizer.isHorizontal === true ? 'primary' : 'inherit'} />
                Horizontal
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Boxed / Full ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Container Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleLayout('boxed'))} display="flex" gap={1}>
                <CallToActionTwoToneIcon
                  color={customizer.isLayout === 'boxed' ? 'primary' : 'inherit'}
                />
                Boxed
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleLayout('full'))} display="flex" gap={1}>
                <AspectRatioTwoToneIcon
                  color={customizer.isLayout === 'full' ? 'primary' : 'inherit'}
                />
                Full
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Sidebar Color setting ------------- */}
            {/* ------------------------------------------- */}

            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            {customizer.isHorizontal ? (
              ''
            ) : (
              <>
                <Typography variant="h6" gutterBottom>
                  Sidebar Type
                </Typography>
                <Stack direction={'row'} gap={2} my={2}>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <WebAssetTwoToneIcon color={!customizer.isCollapse ? 'primary' : 'inherit'} />
                    Full
                  </StyledBox>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <ViewSidebarTwoToneIcon color={customizer.isCollapse ? 'primary' : 'inherit'} />
                    mini
                  </StyledBox>
                </Stack>
              </>
            )}
            <Box pt={4} />
            <Typography variant="h6" gutterBottom>
              Card With
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setCardShadow(false))} display="flex" gap={1}>
                <BorderOuter color={!customizer.isCardShadow ? 'primary' : 'inherit'} />
                Border
              </StyledBox>
              <StyledBox onClick={() => dispatch(setCardShadow(true))} display="flex" gap={1}>
                <CallToActionTwoToneIcon color={customizer.isCardShadow ? 'primary' : 'inherit'} />
                Shadow
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Border Radius
            </Typography>

            <Slider
              size="small"
              value={customizer.borderRadius}
              aria-label="Small"
              min={4}
              max={24}
              onChange={(event: any) => dispatch(setBorderRadius(event.target.value))}
              valueLabelDisplay="auto"
            />
          </Box>
        </Scrollbar>
      </Drawer>
    </div>)
  );
};

export default Customizer;

===== src/layouts/full/shared/customizer/RTL.tsx =====
// File: src/layouts/full/shared/customizer/RTL.tsx
import React, { useEffect, useMemo } from 'react';
import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
import rtlPlugin from 'stylis-plugin-rtl';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

interface RTLType {
  children: React.ReactNode;
}

// إنشاء cache مرة واحدة فقط
const rtlCache = createCache({
  key: 'muirtl',
  prepend: true,
  stylisPlugins: [rtlPlugin],
});

const ltrCache = createCache({
  key: 'muiltr',
  prepend: true,
});

const RTL = (props: RTLType) => {
  const { children } = props;
  const customizer = useSelector((state: AppState) => state.customizer);
  const direction = customizer.activeDir;

  // استخدام useMemo لتجنب إعادة إنشاء cache
  const cache = useMemo(() => {
    return direction === 'rtl' ? rtlCache : ltrCache;
  }, [direction]);

  useEffect(() => {
    document.dir = direction;
    document.documentElement.dir = direction;
    
    // إضافة/إزالة class للـ body
    document.body.classList.remove('rtl', 'ltr');
    document.body.classList.add(direction);
  }, [direction]);

  return <CacheProvider value={cache}>{children}</CacheProvider>;
};

export default RTL;

===== src/layouts/full/shared/customizer/typings.d.ts =====
declare module "stylis-plugin-rtl" {
  const noTypesYet: any;
  export default noTypesYet;
}

===== src/layouts/full/shared/loadable/Loadable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';

// project imports
import Spinner from 'src/views/spinner/Spinner';

// ===========================|| LOADABLE - LAZY LOADING ||=========================== //

const Loadable = (Component: any) => (props: any) =>
  (
    <Suspense fallback={<Spinner />}>
      <Component {...props} />
    </Suspense>
  );

export default Loadable;

===== src/layouts/full/shared/logo/Logo.tsx =====
import { FC } from 'react';
import { useSelector } from 'src/store/Store';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDark } from 'src/assets/images/logos/dark-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDarkRTL } from 'src/assets/images/logos/dark-rtl-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLight } from 'src/assets/images/logos/light-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLightRTL } from 'src/assets/images/logos/light-logo-rtl.svg';
import { styled } from '@mui/material';
import { AppState } from 'src/store/Store';

const Logo: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const LinkStyled = styled(Link)(() => ({
    height: customizer.TopbarHeight,
    width: customizer.isCollapse ? '40px' : '180px',
    overflow: 'hidden',
    display: 'block',
  }));

  if (customizer.activeDir === 'ltr') {
    return (
      <LinkStyled
        to="/"
        style={{
          display: 'flex',
          alignItems: 'center',
        }}
      >
        {customizer.activeMode === 'dark' ? (
          <LogoLight />
        ) : (
          <LogoDark />
        )}
      </LinkStyled>
    );
  }

  return (
    <LinkStyled
      to="/"
      style={{
        display: 'flex',
        alignItems: 'center',
      }}
    >
      {customizer.activeMode === 'dark' ? (
        <LogoDarkRTL />
      ) : (
        <LogoLightRTL />
      )}
    </LinkStyled>
  );
};

export default Logo;

===== src/layouts/full/shared/welcome/Welcome.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { Snackbar, Alert, AlertTitle } from '@mui/material';

const Welcome = () => {
  const [open, setOpen] = React.useState(false);

  const handleClick = () => {
    setOpen(true);
  };

  const handleClose = (reason: any) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpen(false);
  };
  React.useEffect(() => {
    // Update the document title using the browser API
    const timer = setTimeout(() => {
      handleClick();
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  return (
    <React.Fragment>
      <Snackbar
        open={open}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity="info"
          variant="filled"
          sx={{ width: '100%', color: 'white' }}
        >
          <AlertTitle>Welcome To Horex ERP</AlertTitle>
          Easy to Manage your Inventory!!!
        </Alert>
      </Snackbar>
    </React.Fragment>
  );
};

export default Welcome;

===== src/layouts/full/vertical/header/AppLinks.tsx =====
import { Avatar, Box, Typography, Grid2 as Grid, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const AppLinks = () => {
  return (
    (<Grid container spacing={3} mb={4}>
      {dropdownData.appsLink.map((links, index) => (
        <Grid
          key={index}
          size={{
            lg: 6
          }}>
          <Link to={links.href} className="hover-text-primary">
            <Stack direction="row" spacing={2}>
              <Box
                minWidth="45px"
                height="45px"
                bgcolor="grey.100"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Avatar
                  src={links.avatar}
                  alt={links.avatar}
                  sx={{
                    width: 24,
                    height: 24,
                    borderRadius: 0,
                  }}
                />
              </Box>
              <Box>
                <Typography
                  variant="subtitle2"
                  fontWeight={600}
                  color="textPrimary"
                  noWrap
                  className="text-hover"
                  sx={{
                    width: '240px',
                  }}
                >
                  {links.title}
                </Typography>
                <Typography
                  color="textSecondary"
                  variant="subtitle2"
                  fontSize="12px"
                  sx={{
                    width: '240px',
                  }}
                  noWrap
                >
                  {links.subtext}
                </Typography>
              </Box>
            </Stack>
          </Link>
        </Grid>
      ))}
    </Grid>)
  );
};

export default AppLinks;

===== src/layouts/full/vertical/header/Cart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { sum } from 'lodash';
import { IconShoppingCart, IconX } from '@tabler/icons-react';
import { Box, Typography, Badge, Drawer, IconButton, Button, Stack } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { Link } from 'react-router';
import CartItems from './CartItem';
import { AppState } from 'src/store/Store';

const Cart = () => {
  // Get Products
  const Cartproduct = useSelector((state: AppState) => state.ecommerceReducer.cart);
  const bcount = Cartproduct.length > 0 ? Cartproduct.length : '0';

  const checkout = useSelector((state: AppState) => state.ecommerceReducer.cart);
  const total = sum(checkout.map((product: any) => product.price * product.qty));

  const [showDrawer, setShowDrawer] = useState(false);
  const handleDrawerClose = () => {
    setShowDrawer(false);
  };

  const cartContent = (
    <Box>
      {/* ------------------------------------------- */}
      {/* Cart Content */}
      {/* ------------------------------------------- */}
      <Box>
        <CartItems />
      </Box>
    </Box>
  );

  return (
    <Box>
      <IconButton
        size="large"
        color="inherit"
        onClick={() => setShowDrawer(true)}
        sx={{
          color: 'text.secondary',
          ...(showDrawer && {
            color: 'primary.main',
          }),
        }}
      >
        <Badge color="error" badgeContent={bcount}>
          <IconShoppingCart size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Cart Sidebar */}
      {/* ------------------------------------------- */}
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{ sx: { maxWidth: '500px' } }}
      >
        <Box display="flex" alignItems="center" p={3} pb={0} justifyContent="space-between">
          <Typography variant="h5" fontWeight={600}>
            Shopping Cart
          </Typography>
          <Box>
            <IconButton
              color="inherit"
              sx={{
                color: (theme) => theme.palette.grey.A200,
              }}
              onClick={handleDrawerClose}
            >
              <IconX size="1rem" />
            </IconButton>
          </Box>
        </Box>

        {/* component */}
        {cartContent}
        {/* ------------------------------------------- */}
        {/* Checkout  */}
        {/* ------------------------------------------- */}
        <Box px={3} mt={2}>
          {Cartproduct.length > 0 ? (
            <>
              <Stack direction="row" justifyContent="space-between" mb={3}>
                <Typography variant="subtitle2" fontWeight={400}>
                  Total
                </Typography>
                <Typography variant="subtitle2" fontWeight={600}>
                  ${total}
                </Typography>
              </Stack>
              <Button
                fullWidth
                component={Link}
                to="/apps/ecommerce/eco-checkout"
                variant="contained"
                color="primary"
              >
                Checkout
              </Button>
            </>
          ) : (
            ''
          )}
        </Box>
      </Drawer>
    </Box>
  );
};

export default Cart;

===== src/layouts/full/vertical/header/CartItem.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Avatar, Stack, ButtonGroup, Button } from '@mui/material';
import { Link } from 'react-router';
import { IconMinus, IconPlus } from '@tabler/icons-react';
import { useSelector, useDispatch } from 'src/store/Store';
import emptyCart from 'src/assets/images/products/empty-shopping-cart.svg';
import { increment, decrement } from 'src/store/apps/eCommerce/ECommerceSlice';
import { AppState } from 'src/store/Store';

const CartItems = () => {
  const dispatch = useDispatch();

  // Get Products
  const Cartproduct = useSelector((state: AppState) => state.ecommerceReducer.cart);

  const Increase = (productId: string) => {
    dispatch(increment(productId));
  };

  const Decrease = (productId: string) => {
    dispatch(decrement(productId));
  };

  return (
    <Box px={3}>
      {Cartproduct.length > 0 ? (
        <>
          {Cartproduct.map((product: any, index: number) => (
            <Box key={product.id + index * index}>
              <Stack direction="row" spacing={2} py={3}>
                <Avatar
                  src={product.photo}
                  alt={product.photo}
                  sx={{
                    borderRadius: '10px',
                    height: '75px',
                    width: '95px',
                  }}
                />
                <Box>
                  <Typography variant="subtitle2" color="textPrimary" fontWeight={600}>
                    {product.title}
                  </Typography>{' '}
                  <Typography color="textSecondary" fontSize="12px">
                    {' '}
                    {product.category}
                  </Typography>
                  <Stack direction="row" alignItems="center" spacing={2} mt="5px">
                    <Typography variant="subtitle2" fontWeight="500">
                      ${product.price * product.qty}
                    </Typography>
                    <ButtonGroup size="small" aria-label="small button group">
                      <Button
                        color="success"
                        className="btn-xs"
                        variant="text"
                        onClick={() => Decrease(product.id)}
                        disabled={product.qty < 2}
                      >
                        <IconMinus stroke={1.5} size="0.8rem" />
                      </Button>
                      <Button
                        color="inherit"
                        sx={{ bgcolor: 'transparent', color: 'text.secondary' }}
                        variant="text"
                      >
                        {product.qty}
                      </Button>
                      <Button
                        color="success"
                        className="btn-xs"
                        variant="text"
                        onClick={() => Increase(product.id)}
                      >
                        <IconPlus stroke={1.5} size="0.8rem" />
                      </Button>
                    </ButtonGroup>
                  </Stack>
                </Box>
              </Stack>
            </Box>
          ))}
        </>
      ) : (
        <Box textAlign="center" mb={3}>
          <img src={emptyCart} alt="cart" width="200px" />
          <Typography variant="h5" mb={2}>
            Cart is Empty
          </Typography>
          <Button component={Link} to="/apps/ecommerce/shop" variant="contained">
            Go back to Shopping
          </Button>
        </Box>
      )}
    </Box>
  );
};

export default CartItems;

===== src/layouts/full/vertical/header/data.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';

import icon1 from 'src/assets/images/svgs/icon-account.svg'
import icon2 from 'src/assets/images/svgs/icon-inbox.svg'
import icon3 from 'src/assets/images/svgs/icon-tasks.svg'

import ddIcon1 from 'src/assets/images/svgs/icon-dd-chat.svg'
import ddIcon2 from 'src/assets/images/svgs/icon-dd-cart.svg'
import ddIcon3 from 'src/assets/images/svgs/icon-dd-invoice.svg'
import ddIcon4 from 'src/assets/images/svgs/icon-dd-date.svg'
import ddIcon5 from 'src/assets/images/svgs/icon-dd-mobile.svg'
import ddIcon6 from 'src/assets/images/svgs/icon-dd-lifebuoy.svg'
import ddIcon7 from 'src/assets/images/svgs/icon-dd-message-box.svg'
import ddIcon8 from 'src/assets/images/svgs/icon-dd-application.svg'

// Notifications dropdown

interface notificationType {
  avatar: string;
  title: string;
  subtitle: string;
}

const notifications: notificationType[] = [
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
  },
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
  },
];

//
// Messages dropdown
//
interface messageType {
  avatar: string;
  title: string;
  subtitle: string;
  time: string;
  status: string;
}
const messages: messageType[] = [
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
    time: '1 hours ago',
    status: 'success',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
    time: '1 day ago',
    status: 'warning',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
    time: '2 days ago',
    status: 'success',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
    time: '1 week ago',
    status: 'danger',
  },
];

//
// Profile dropdown
//
interface ProfileType {
  href: string;
  title: string;
  subtitle: string;
  icon: any;
}
const profile: ProfileType[] = [
  {
    href: '/user-profile',
    title: 'My Profile',
    subtitle: 'Account Settings',
    icon: icon1,
  },
  {
    href: '/apps/email',
    title: 'My Inbox',
    subtitle: 'Messages & Emails',
    icon: icon2,
  },
  {
    href: '/apps/notes',
    title: 'My Tasks',
    subtitle: 'To-do and Daily Tasks',
    icon: icon3,
  },
];

// apps dropdown

interface appsLinkType {
  href: string;
  title : string;
  subtext: string;
  avatar: string;
}

const appsLink:appsLinkType[] = [
  {
    href: '/apps/chats',
    title: 'Chat Application',
    subtext: 'New messages arrived',
    avatar: ddIcon1
  },
  {
    href: '/apps/ecommerce/shop',
    title: 'eCommerce App',
    subtext: 'New stock available',
    avatar: ddIcon2
  },
  {
    href: '/apps/notes',
    title: 'Notes App',
    subtext: 'To-do and Daily tasks',
    avatar: ddIcon3
  },
  {
    href: '/apps/calendar',
    title: 'Calendar App',
    subtext: 'Get dates',
    avatar: ddIcon4
  },
  {
    href: '/apps/contacts',
    title: 'Contact Application',
    subtext: '2 Unsaved Contacts',
    avatar: ddIcon5
  },
  {
    href: '/apps/tickets',
    title: 'Tickets App',
    subtext: 'Submit tickets',
    avatar: ddIcon6
  },
  {
    href: '/apps/email',
    title: 'Email App',
    subtext: 'Get new emails',
    avatar: ddIcon7
  },
  {
    href: '/apps/blog/posts',
    title: 'Blog App',
    subtext: 'added new blog',
    avatar: ddIcon8
  },
]


interface LinkType {
  href: string;
  title: string;
}

const pageLinks:LinkType[] = [
  {
    href: '/pricing',
    title: 'Pricing Page'
  },
  {
    href: '/auth/login',
    title: 'Authentication Design'
  },
  {
    href: '/auth/register',
    title: 'Register Now'
  },
  {
    href: '/404',
    title: '404 Error Page'
  },
  {
    href: '/auth/login',
    title: 'Login Page'
  },
  {
    href: '/user-profile',
    title: 'User Application'
  },
  {
    href: '/apps/blog/posts',
    title: 'Blog Design'
  },
  {
    href: '/apps/ecommerce/eco-checkout',
    title: 'Shopping Cart'
  },
]

export { notifications, messages, profile, pageLinks, appsLink };

===== src/layouts/full/vertical/header/Header.tsx =====
// File: src/layouts/full/vertical/header/Header.tsx
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import * as React from 'react';
import {
  IconButton,
  Box,
  AppBar,
  useMediaQuery,
  Toolbar,
  styled,
  Stack,
  Theme,
} from '@mui/material';
import { Link } from 'react-router-dom'; // ⭐ إضافة Link

import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar, setDarkMode } from 'src/store/customizer/CustomizerSlice';
import { IconMenu2, IconMoon, IconSun, IconHttpPost } from '@tabler/icons-react'; // ⭐ إضافة IconShoppingCart
import Notifications from 'src/layouts/full/vertical/header/Notification';
import Cart from 'src/layouts/full/vertical/header/Cart';
import Profile from 'src/layouts/full/vertical/header/Profile';
import Search from 'src/layouts/full/vertical/header/Search';
import Language from 'src/layouts/full/vertical/header/Language';
import PrintButton from 'src/layouts/full/vertical/header/PrintButton';
// import Logo from 'src/layouts/full/shared/logo/Logo';
import BranchSelector from 'src/components/BranchSelector';
import { useAuth } from 'src/contexts/AuthContext';
import { AppState } from 'src/store/Store';

const Header = () => {
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const { selectedBranch } = useAuth();

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',

    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    margin: '0 auto',
    width: '100%',
    color: `${theme.palette.text.secondary} !important`,
  }));

  return (
    <AppBarStyled position="sticky" color="default" elevation={8}>
      <ToolbarStyled
        sx={{
          maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
        }}
      >
        {/* <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box> */}
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        {lgDown ? (
          <IconButton
            color="inherit"
            aria-label="menu"
            onClick={() => dispatch(toggleMobileSidebar())}
          >
            <IconMenu2 />
          </IconButton>
        ) : (
          ''
        )}
        
        {/* ------------------------------------------- */}
        {/* Branch Selector */}
        {/* ------------------------------------------- */}
        {selectedBranch && lgUp && (
          <Box sx={{ ml: 2 }}>
            <BranchSelector />
          </Box>
        )}
        
        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        {lgUp ? (
          <>
          </>
        ) : null}
        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          {/* Branch Selector for Mobile */}
          {selectedBranch && lgDown && (
            <BranchSelector />
          )}
          
          {/* ⭐ إضافة أيقونة المبيعات */}
          <IconButton
            color="inherit"
            component={Link}
            to="/pos/sales"
            aria-label="Sales"
            title="المبيعات"
            size="large"
            sx={{
              '&:hover': {
                backgroundColor: 'action.hover'
              }
            }}
          >
            <IconHttpPost size="30" stroke="1.5" />
          </IconButton>
          
          {/* ⭐ إضافة زرار الطباعة */}
          <PrintButton />
          
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>
          <Notifications />

          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;

===== src/layouts/full/vertical/header/Language.tsx =====
// File: src/layouts/full/header/Language.tsx
import React, { useCallback } from 'react';
import { Avatar, IconButton, Menu, MenuItem, Typography, Stack } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { setLanguage, setDir } from 'src/store/customizer/CustomizerSlice';
import FlagEn from 'src/assets/images/flag/icon-flag-en.svg';
import FlagEg from 'src/assets/images/flag/icon-flag-eg.svg';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';
import Cookies from 'js-cookie';

const Languages = [
  {
    flagname: 'English (UK)',
    icon: FlagEn,
    value: 'en',
    direction: 'ltr',
  },
  {
    flagname: 'عربي (Egypt)',
    icon: FlagEg,
    value: 'ar',
    direction: 'rtl',
  },
];

const Language = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const dispatch = useDispatch();
  const open = Boolean(anchorEl);
  const customizer = useSelector((state: AppState) => state.customizer);
  const currentLang = Languages.find((_lang) => _lang.value === customizer.isLanguage) || Languages[0];
  const { i18n } = useTranslation();

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // تحسين دالة تغيير اللغة
  const handleLanguageChange = useCallback((language: string) => {
    const selectedLang = Languages.find(l => l.value === language);
    if (selectedLang && customizer.isLanguage !== language) {
      // تطبيق التغييرات بشكل متزامن
      requestAnimationFrame(() => {
        dispatch(setLanguage(language));
        dispatch(setDir(selectedLang.direction));
        i18n.changeLanguage(language);
        
        document.documentElement.dir = selectedLang.direction;
        document.documentElement.lang = language;
        
        // تحديث body class
        document.body.classList.remove('rtl', 'ltr');
        document.body.classList.add(selectedLang.direction);
        
        // حفظ في الكوكيز
        Cookies.set('language', language, { expires: 365 });
        Cookies.set('direction', selectedLang.direction, { expires: 365 });
      });
    }
    
    handleClose();
  }, [dispatch, i18n, customizer.isLanguage]);

  return (
    <>
      <IconButton
        aria-label="language"
        onClick={handleClick}
        className="no-flip" // منع انقلاب الأيقونة
      >
        <Avatar src={currentLang.icon} alt={currentLang.value} sx={{ width: 20, height: 20 }} />
      </IconButton>
      <Menu
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        sx={{
          '& .MuiMenu-paper': {
            width: '200px',
          },
        }}
      >
        {Languages.map((option, index) => (
          <MenuItem
            key={index}
            sx={{ py: 2, px: 3 }}
            onClick={() => handleLanguageChange(option.value)}
          >
            <Stack direction="row" spacing={1} alignItems="center">
              <Avatar 
                src={option.icon} 
                alt={option.icon} 
                sx={{ width: 20, height: 20 }} 
                className="no-flip"
              />
              <Typography>{option.flagname}</Typography>
              <Typography variant="caption" color="text.secondary">
                ({option.direction.toUpperCase()})
              </Typography>
            </Stack>
          </MenuItem>
        ))}
      </Menu>
    </>
  );
};

export default Language;

===== src/layouts/full/vertical/header/Message.tsx =====
import { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Divider,
  Button,
  Stack
} from '@mui/material';
import * as dropdownData from './data';

import { IconChecks, IconClock, IconMessageDots } from '@tabler/icons-react';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const Message = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : '',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconMessageDots size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '385px',
          },
        }}
      >
        <Stack direction="row" p={2} justifyContent="space-between" alignItems="center">
          <Box>
            <Typography variant="h5">Messages</Typography>
            <Typography variant="subtitle2" color="textSecondary">
              You have 3 unread messages
            </Typography>
          </Box>
          <IconChecks width={20} height={20} />
        </Stack>
        <Divider />
        {dropdownData.messages.map((message) => (
          <Box key={message.title}>
            <MenuItem sx={{ py: 2 }}>
              <Stack direction="row" spacing={2}>
                <Avatar
                  src={message.avatar}
                  alt={message.avatar}
                  sx={{
                    width: 45,
                    height: 45,
                  }}
                />
                <Box>
                  <Typography
                    variant="h6"
                    noWrap
                    sx={{
                      width: '240px',
                    }}
                  >
                    {message.title}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle1"
                    fontWeight={400}
                    sx={{
                      width: '240px',
                    }}
                    noWrap
                  >
                    {message.subtitle}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle2"
                    display="flex"
                    alignItems="center"
                    gap={1}
                  >
                    <IconClock width={16} height={16} />
                    {message.time}
                  </Typography>
                </Box>
              </Stack>
            </MenuItem>
            <Divider
              style={{
                marginTop: 0,
                marginBottom: 0,
              }}
            />
          </Box>
        ))}
        <Box p={2} pb={1}>
          <Button variant="contained" color="primary" fullWidth>
            See all messages
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Message;

===== src/layouts/full/vertical/header/MobileRightSidebar.tsx =====
// // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// // @ts-ignore
// import React, { useState } from 'react';
// import {
//   IconApps,
//   IconCalendarEvent,
//   IconChevronDown,
//   IconChevronUp,
//   IconGridDots,
//   IconMail,
//   IconMessages,
// } from '@tabler/icons-react';
// import {
//   Box,
//   Typography,
//   Drawer,
//   IconButton,
//   List,
//   ListItemButton,
//   ListItemIcon,
//   ListItemText,
//   Collapse,
// } from '@mui/material';

// import { Link } from 'react-router';
// import AppLinks from './AppLinks';
// import QuickLinks from './QuickLinks';

// const MobileRightSidebar = () => {
//   const [showDrawer, setShowDrawer] = useState(false);

//   const [open, setOpen] = React.useState(true);

//   const handleClick = () => {
//     setOpen(!open);
//   };

//   const cartContent = (
//     <Box>
//       {/* ------------------------------------------- */}
//       {/* Apps Content */}
//       {/* ------------------------------------------- */}
//       <Box px={1}>
//         <List
//           sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}
//           component="nav"
//           aria-labelledby="nested-list-subheader"
//         >
//           <ListItemButton component={Link} to="/apps/chats">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconMessages size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Chats
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton component={Link} to="/apps/calendar">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconCalendarEvent size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Calendar
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton component={Link} to="/apps/email">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconMail size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Email
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton onClick={handleClick}>
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconApps size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Apps
//               </Typography>
//             </ListItemText>
//             {open ? (
//               <IconChevronDown size="21" stroke="1.5" />
//             ) : (
//               <IconChevronUp size="21" stroke="1.5" />
//             )}
//           </ListItemButton>
//           <Collapse in={open} timeout="auto" unmountOnExit>
//             <Box px={4} pt={3} overflow="hidden">
//               <AppLinks />
//             </Box>
//           </Collapse>
//         </List>
//       </Box>

//       <Box px={3} mt={3}>
//         <QuickLinks />
//       </Box>
//     </Box>
//   );

//   return (
//     <Box>
//       <IconButton
//         size="large"
//         color="inherit"
//         onClick={() => setShowDrawer(true)}
//         sx={{
//           ...(showDrawer && {
//             color: 'primary.main',
//           }),
//         }}
//       >
//         <IconGridDots size="21" stroke="1.5" />
//       </IconButton>
//       {/* ------------------------------------------- */}
//       {/* Cart Sidebar */}
//       {/* ------------------------------------------- */}
//       <Drawer
//         anchor="right"
//         open={showDrawer}
//         onClose={() => setShowDrawer(false)}
//         PaperProps={{ sx: { width: '300px' } }}
//       >
//         <Box p={3} pb={0}>
//           <Typography variant="h5" fontWeight={600}>
//             Navigation
//           </Typography>
//         </Box>

//         {/* component */}
//         {cartContent}
//       </Drawer>
//     </Box>
//   );
// };

// export default MobileRightSidebar;

===== src/layouts/full/vertical/header/Navigation.tsx =====
// import { useState } from 'react';
// import { Box, Menu, Typography, Button, Divider, Grid2 as Grid } from '@mui/material';
// import { Link } from 'react-router';
// import { IconChevronDown, IconHelp } from '@tabler/icons-react';
// import AppLinks from './AppLinks';
// import QuickLinks from './QuickLinks';
// // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// // @ts-ignore
// import React from 'react';

// const AppDD = () => {
//   const [anchorEl2, setAnchorEl2] = useState(null);

//   const handleClick2 = (event: any) => {
//     setAnchorEl2(event.currentTarget);
//   };

//   const handleClose2 = () => {
//     setAnchorEl2(null);
//   };

//   return (<>
//     <Box>
//       <Button
//         aria-label="show 11 new notifications"
//         color="inherit"
//         variant="text"
//         aria-controls="msgs-menu"
//         aria-haspopup="true"
//         sx={{
//           bgcolor: anchorEl2 ? 'primary.light' : '',
//           color: anchorEl2 ? 'primary.main' : (theme) => theme.palette.text.secondary,
//         }}
//         onClick={handleClick2}
//         endIcon={<IconChevronDown size="15" style={{ marginLeft: '-5px', marginTop: '2px' }} />}
//       >
//         Apps
//       </Button>
//       {/* ------------------------------------------- */}
//       {/* Message Dropdown */}
//       {/* ------------------------------------------- */}
//       <Menu
//         id="msgs-menu"
//         anchorEl={anchorEl2}
//         keepMounted
//         open={Boolean(anchorEl2)}
//         onClose={handleClose2}
//         anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}
//         transformOrigin={{ horizontal: 'left', vertical: 'top' }}
//         sx={{
//           '& .MuiMenu-paper': {
//             width: '850px',
//           },
//           '& .MuiMenu-paper ul': {
//             p: 0,
//           },
//         }}
//       >
//         <Grid container>
//           <Grid
//             display="flex"
//             size={{
//               sm: 8
//             }}>
//             <Box p={4} pr={0} pb={3}>
//               <AppLinks />
//               <Divider />
//               <Box
//                 sx={{
//                   display: {
//                     xs: 'none',
//                     sm: 'flex',
//                   },
//                 }}
//                 alignItems="center"
//                 justifyContent="space-between"
//                 pt={2}
//                 pr={4}
//               >
//                 <Link to="/faq">
//                   <Typography
//                     variant="subtitle2"
//                     fontWeight="600"
//                     color="textPrimary"
//                     display="flex"
//                     alignItems="center"
//                     gap="4px"
//                   >
//                     <IconHelp width={24} />
//                     Frequently Asked Questions
//                   </Typography>
//                 </Link>
//                 <Button variant="contained" color="primary">
//                   Check
//                 </Button>
//               </Box>
//             </Box>
//             <Divider orientation="vertical" />
//           </Grid>
//           <Grid
//             size={{
//               sm: 4
//             }}>
//             <Box p={4}>
//               <QuickLinks />
//             </Box>
//           </Grid>
//         </Grid>
//       </Menu>
//     </Box>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/chats" component={Link}>
//       Chat
//     </Button>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/calendar" component={Link}>
//       Calendar
//     </Button>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/email" component={Link}>
//       Email
//     </Button>
//   </>);
// };

// export default AppDD;

===== src/layouts/full/vertical/header/Notification.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Button,
  Chip,
  Stack
} from '@mui/material';
import * as dropdownData from './data';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';

import { IconBellRinging } from '@tabler/icons-react';
import { Link } from 'react-router';

const Notifications = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : 'text.secondary',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconBellRinging size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '360px',
          },
        }}
      >
        <Stack direction="row" py={2} px={4} justifyContent="space-between" alignItems="center">
          <Typography variant="h6">Notifications</Typography>
          <Chip label="5 new" color="primary" size="small" />
        </Stack>
        <Scrollbar sx={{ height: '385px' }}>
          {dropdownData.notifications.map((notification, index) => (
            <Box key={index}>
              <MenuItem sx={{ py: 2, px: 4 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar
                    src={notification.avatar}
                    alt={notification.avatar}
                    sx={{
                      width: 48,
                      height: 48,
                    }}
                  />
                  <Box>
                    <Typography
                      variant="subtitle2"
                      color="textPrimary"
                      fontWeight={600}
                      noWrap
                      sx={{
                        width: '240px',
                      }}
                    >
                      {notification.title}
                    </Typography>
                    <Typography
                      color="textSecondary"
                      variant="subtitle2"
                      sx={{
                        width: '240px',
                      }}
                      noWrap
                    >
                      {notification.subtitle}
                    </Typography>
                  </Box>
                </Stack>
              </MenuItem>
            </Box>
          ))}
        </Scrollbar>
        <Box p={3} pb={1}>
          <Button to="/apps/email" variant="outlined" component={Link} color="primary" fullWidth>
            See all Notifications
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Notifications;

===== src/layouts/full/vertical/header/PrintButton.tsx =====
// File: src/layouts/full/vertical/header/PrintButton.tsx
import React from 'react';
import {
  IconButton, Tooltip, Snackbar, Alert, Menu, MenuItem,
  ListItemIcon, ListItemText, Divider, Dialog, DialogTitle,
  DialogContent, DialogActions, Button, Switch, FormControlLabel,
  TextField, FormControl, InputLabel, Select, Grid, Box, Typography
} from '@mui/material';
import { 
  IconPrinter, IconSettings, IconUsb, IconNetwork, IconFileText,
  IconTestPipe, IconDeviceFloppy 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useThermalPrint } from 'src/hooks/useThermalPrint';

const PrintButton: React.FC = () => {
  const { t } = useTranslation();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [snackbar, setSnackbar] = React.useState({ 
    open: false, 
    message: '', 
    severity: 'success' as 'success' | 'error' | 'warning' 
  });
  const [settingsOpen, setSettingsOpen] = React.useState(false);
  
  // إعدادات الطباعة من localStorage
  const [thermalConfig, setThermalConfig] = React.useState({
    enabled: localStorage.getItem('thermal_printer_enabled') !== 'false',
    type: (localStorage.getItem('thermal_printer_type') as 'usb' | 'network') || 'usb',
    networkConfig: {
      ip: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
      port: Number(localStorage.getItem('thermal_printer_port')) || 9100
    }
  });

  const { print: thermalPrint } = useThermalPrint({
    printerType: thermalConfig.type,
    networkConfig: thermalConfig.networkConfig
  });

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // دالة استخراج المحتوى
  const getPageContent = () => {
    const selectors = [
      '[data-printable]',
      '.MuiContainer-root',
      '.MuiDataGrid-root',
      'main'
    ];

    for (const selector of selectors) {
      const element = document.querySelector(selector);
      if (element) return element;
    }
    return document.body;
  };

  // تنسيق المحتوى للطباعة الحرارية
  const formatContentForThermal = (element: Element) => {
    const textContent = element.textContent || '';
    const lines = textContent.split('\n').filter(line => line.trim());
    
    const formatted = [
      '='.repeat(32),
      '        طباعة من النظام',
      '='.repeat(32),
      `التاريخ: ${new Date().toLocaleDateString('ar-EG')}`,
      `الوقت: ${new Date().toLocaleTimeString('ar-EG')}`,
      '-'.repeat(32),
      ...lines.map(line => line.length > 32 ? line.substring(0, 32) : line),
      '-'.repeat(32),
      '    شكراً لاستخدام النظام',
      '='.repeat(32)
    ];
    
    return formatted.join('\n');
  };

  // دالة الطباعة العادية
  const handleNormalPrint = () => {
    window.print();
    handleClose();
    setSnackbar({
      open: true,
      message: t('header.print.normalPrintStarted'),
      severity: 'success'
    });
  };

  // دالة الطباعة الحرارية
  const handleThermalPrint = async () => {
    try {
      const content = getPageContent();
      const formattedContent = formatContentForThermal(content);
      
      const result = await thermalPrint(formattedContent);

      if (typeof result === 'object' && result !== null && 'success' in result && typeof (result as any).success === 'boolean') {
        if ((result as { success: boolean }).success) {
          setSnackbar({
            open: true,
            message: t('header.print.printSuccess'),
            severity: 'success'
          });
        } else {
          setSnackbar({
            open: true,
            message: t('header.print.thermalFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('header.print.printError'),
        severity: 'error'
      });
    }
    handleClose();
  };

  // دالة اختبار الطباعة
  const handleTestPrint = async () => {
    const testContent = `
=================================
        اختبار الطباعة
=================================
التاريخ: ${new Date().toLocaleDateString('ar-EG')}
الوقت: ${new Date().toLocaleTimeString('ar-EG')}

نوع الطابعة: ${thermalConfig.type.toUpperCase()}
${thermalConfig.type === 'network' ? 
  `IP: ${thermalConfig.networkConfig.ip}:${thermalConfig.networkConfig.port}` : 
  'USB Connection'
}

اختبار الطباعة الحرارية
Test Print for Thermal Printer

=================================
      اختبار ناجح ✓
=================================
    `;

    try {
      const result = await thermalPrint(testContent);
      
      if (typeof result === 'object' && result !== null && 'success' in result && typeof (result as any).success === 'boolean') {
        if ((result as { success: boolean }).success) {
          setSnackbar({
            open: true,
            message: t('header.print.testSuccess'),
            severity: 'success'
          });
        } else {
          setSnackbar({
            open: true,
            message: t('header.print.testFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('header.print.testError'),
        severity: 'error'
      });
    }
    handleClose();
  };

  // حفظ الإعدادات
  const saveSettings = () => {
    localStorage.setItem('thermal_printer_enabled', thermalConfig.enabled.toString());
    localStorage.setItem('thermal_printer_type', thermalConfig.type);
    localStorage.setItem('thermal_printer_ip', thermalConfig.networkConfig.ip);
    localStorage.setItem('thermal_printer_port', thermalConfig.networkConfig.port.toString());
    
    setSettingsOpen(false);
    setSnackbar({
      open: true,
      message: t('header.print.settingsSaved'),
      severity: 'success'
    });
  };

  // تحديث الإعدادات
  const updateConfig = (key: string, value: any) => {
    if (key.includes('.')) {
      const [parent, child] = key.split('.');
      setThermalConfig(prev => ({
        ...prev,
        [parent]: {
          ...(prev as any)[parent],
          [child]: value
        }
      }));
    } else {
      setThermalConfig(prev => ({
        ...prev,
        [key]: value
      }));
    }
  };

  return (
    <>
      <Tooltip title={t('header.print.tooltip')}>
        <IconButton
          size="large"
          aria-label="print-menu"
          color="inherit"
          onClick={handleClick}
        >
          <IconPrinter size="21" stroke="1.5" />
        </IconButton>
      </Tooltip>

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        PaperProps={{
          elevation: 3,
          sx: {
            minWidth: 220,
            mt: 1
          }
        }}
      >
        {/* طباعة عادية */}
        <MenuItem onClick={handleNormalPrint}>
          <ListItemIcon>
            <IconFileText size={20} />
          </ListItemIcon>
          <ListItemText 
            primary={t('header.print.normal')}
            secondary={t('header.print.normalDesc')}
          />
        </MenuItem>

        {/* طباعة حرارية */}
        {thermalConfig.enabled && (
          <MenuItem onClick={handleThermalPrint}>
            <ListItemIcon>
              {thermalConfig.type === 'usb' ? <IconUsb size={20} /> : <IconNetwork size={20} />}
            </ListItemIcon>
            <ListItemText 
              primary={t('header.print.thermal')}
              secondary={`${thermalConfig.type.toUpperCase()} ${t('header.print.printer')}`}
            />
          </MenuItem>
        )}

        <Divider />

        {/* اختبار الطباعة */}
        {thermalConfig.enabled && (
          <MenuItem onClick={handleTestPrint}>
            <ListItemIcon>
              <IconTestPipe size={20} />
            </ListItemIcon>
            <ListItemText 
              primary={t('header.print.test')}
              secondary={t('header.print.testDesc')}
            />
          </MenuItem>
        )}

        {/* إعدادات الطباعة */}
        <MenuItem onClick={() => {
          setSettingsOpen(true);
          handleClose();
        }}>
          <ListItemIcon>
            <IconSettings size={20} />
          </ListItemIcon>
          <ListItemText 
            primary={t('header.print.settings')}
            secondary={t('header.print.configureOptions')}
          />
        </MenuItem>
      </Menu>

      {/* نافذة الإعدادات */}
      <Dialog open={settingsOpen} onClose={() => setSettingsOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>{t('header.print.printerSettings')}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            {/* تفعيل الطباعة الحرارية */}
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={thermalConfig.enabled}
                    onChange={(e) => updateConfig('enabled', e.target.checked)}
                  />
                }
                label={t('header.print.enableThermal')}
              />
            </Grid>

            {thermalConfig.enabled && (
              <>
                {/* نوع الطابعة */}
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel>{t('header.print.printerType')}</InputLabel>
                    <Select
                      value={thermalConfig.type}
                      onChange={(e) => updateConfig('type', e.target.value)}
                      label={t('header.print.printerType')}
                    >
                      <MenuItem value="usb">
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconUsb size={16} />
                          USB Printer
                        </Box>
                      </MenuItem>
                      <MenuItem value="network">
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconNetwork size={16} />
                          Network Printer
                        </Box>
                      </MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                {/* إعدادات الشبكة */}
                {thermalConfig.type === 'network' && (
                  <>
                    <Grid item xs={12} md={8}>
                      <TextField
                        fullWidth
                        label={t('header.print.ipAddress')}
                        value={thermalConfig.networkConfig.ip}
                        onChange={(e) => updateConfig('networkConfig.ip', e.target.value)}
                        placeholder="192.168.1.100"
                      />
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <TextField
                        fullWidth
                        label={t('header.print.port')}
                        type="number"
                        value={thermalConfig.networkConfig.port}
                        onChange={(e) => updateConfig('networkConfig.port', Number(e.target.value))}
                        placeholder="9100"
                      />
                    </Grid>
                  </>
                )}

                {/* معلومات */}
                <Grid item xs={12}>
                  <Box sx={{ p: 2, backgroundColor: 'info.light', borderRadius: 1 }}>
                    <Typography variant="body2" color="info.dark">
                      {t('header.print.settingsInfo')}
                    </Typography>
                  </Box>
                </Grid>
              </>
            )}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSettingsOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button 
            variant="contained" 
            onClick={saveSettings}
            startIcon={<IconDeviceFloppy />}
          >
            {t('common.save')}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default PrintButton;

===== src/layouts/full/vertical/header/Profile.tsx =====
// File: src/layouts/full/vertical/header/Profile.tsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  Avatar,
  Box,
  Menu,
  IconButton,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Typography,
  Divider} from '@mui/material';
import { IconListCheck, IconMail, IconUser, IconSettings, IconLogout, IconBuilding } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';

const Profile = () => {
  const { t } = useTranslation();
  const [anchorEl2, setAnchorEl2] = useState(null);
  const { user, logout, selectedBranch } = useAuth();
  const navigate = useNavigate();

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  const handleLogout = () => {
    logout();
    navigate('/auth/login');
    handleClose2();
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          ...(typeof anchorEl2 === 'object' && {
            color: 'primary.main',
          }),
        }}
        onClick={handleClick2}
      >
        <Avatar
          src="/images/profile/user-1.jpg"
          alt="image"
          sx={{
            width: 35,
            height: 35,
          }}
        />
      </IconButton>
      
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '280px',
            p: 2,
          },
        }}
      >
        {/* User Info */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6">{user?.userName || t('profile.user')}</Typography>
          <Typography
            color="textSecondary"
            variant="caption"
            fontSize="12px"
            fontWeight="400"
          >
            {user?.phoneNo || ''}
          </Typography>
          {selectedBranch && (
            <Typography
              color="textSecondary"
              variant="caption"
              fontSize="11px"
              fontWeight="400"
              display="block"
            >
              {selectedBranch.name} - {selectedBranch.company.name}
            </Typography>
          )}
        </Box>

        <Divider />

        {/* Menu Items */}
        <MenuItem component={Link} to="/users" onClick={handleClose2}>
          <ListItemIcon>
            <IconUser width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.userManagement')}</ListItemText>
        </MenuItem>

        <MenuItem component={Link} to="/company" onClick={handleClose2}>
          <ListItemIcon>
            <IconBuilding width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.companySettings')}</ListItemText>
        </MenuItem>

        <MenuItem component={Link} to="/permissions" onClick={handleClose2}>
          <ListItemIcon>
            <IconSettings width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.permissions')}</ListItemText>
        </MenuItem>

        <MenuItem>
          <ListItemIcon>
            <IconMail width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.inbox')}</ListItemText>
        </MenuItem>

        <MenuItem>
          <ListItemIcon>
            <IconListCheck width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.taskList')}</ListItemText>
        </MenuItem>

        <Divider />

        <MenuItem onClick={handleLogout}>
          <ListItemIcon>
            <IconLogout width={20} />
          </ListItemIcon>
          <ListItemText>{t('auth.logout')}</ListItemText>
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default Profile;

===== src/layouts/full/vertical/header/QuickLinks.tsx =====
import { Typography, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';

const QuickLinks = () => {
  return (
    <>
      <Typography variant="h5">Quick Links</Typography>
      <Stack spacing={2} mt={2}>
        {dropdownData.pageLinks.map((pagelink, index) => (
          <Link to={pagelink.href} key={index} className="hover-text-primary">
            <Typography
              variant="subtitle2"
              color="textPrimary"
              className="text-hover"
              fontWeight={600}
            >
              {pagelink.title}
            </Typography>
          </Link>
        ))}
      </Stack>
    </>
  );
};

export default QuickLinks;

===== src/layouts/full/vertical/header/Search.tsx =====
import { useState } from 'react';
import {
  IconButton,
  Dialog,
  DialogContent,
  Stack,
  Divider,
  Box,
  List,
  ListItemText,
  Typography,
  TextField,
  ListItemButton,
} from '@mui/material';
import { IconSearch, IconX } from '@tabler/icons-react';
import Menuitems from '../sidebar/MenuItems';
import { Link } from 'react-router';

interface menuType {
  title: string;
  id: string;
  subheader: string;
  children: menuType[];
  href: string;
}

const Search = () => {
  // drawer top
  const [showDrawer2, setShowDrawer2] = useState(false);
  const [search, setSerach] = useState('');

  const handleDrawerClose2 = () => {
    setShowDrawer2(false);
  };

  const filterRoutes = (rotr: any, cSearch: string) => {
    if (rotr.length > 1)
      return rotr.filter((t: any) =>
        t.title ? t.href.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()) : '',
      );

    return rotr;
  };
  const searchData = filterRoutes(Menuitems, search);

  return (
    <>
      <IconButton
        aria-label="show 4 new mails"
        color="inherit"
        aria-controls="search-menu"
        aria-haspopup="true"
        onClick={() => setShowDrawer2(true)}
        size="large"
      >
        <IconSearch size="16" />
      </IconButton>
      <Dialog
        open={showDrawer2}
        onClose={() => setShowDrawer2(false)}
        fullWidth
        maxWidth={'sm'}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        PaperProps={{ sx: { position: 'fixed', top: 30, m: 0 } }}
      >
        <DialogContent className="testdialog">
          <Stack direction="row" spacing={2} alignItems="center">
            <TextField
              id="tb-search"
              placeholder="Search here"
              fullWidth
              onChange={(e) => setSerach(e.target.value)}
              inputProps={{ 'aria-label': 'Search here' }}
            />
            <IconButton size="small" onClick={handleDrawerClose2}>
              <IconX size="18" />
            </IconButton>
          </Stack>
        </DialogContent>
        <Divider />
        <Box p={2} sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          <Typography variant="h5" p={1}>
            Quick Page Links
          </Typography>
          <Box>
            <List component="nav">
              {searchData.map((menu: menuType) => {
                return (
                  <Box key={menu.title ? menu.id : menu.subheader}>
                    {menu.title && !menu.children ? (
                      <ListItemButton sx={{ py: 0.5, px: 1 }} to={menu?.href} component={Link}>
                        <ListItemText
                          primary={menu.title}
                          secondary={menu?.href}
                          sx={{ my: 0, py: 0.5 }}
                        />
                      </ListItemButton>
                    ) : (
                      ''
                    )}
                    {menu.children ? (
                      <>
                        {menu.children.map((child: menuType) => {
                          return (
                            <ListItemButton
                              sx={{ py: 0.5, px: 1 }}
                              to={child.href}
                              component={Link}
                              key={child.title ? child.id : menu.subheader}
                            >
                              <ListItemText
                                primary={child.title}
                                secondary={child.href}
                                sx={{ my: 0, py: 0.5 }}
                              />
                            </ListItemButton>
                          );
                        })}
                      </>
                    ) : (
                      ''
                    )}
                  </Box>
                );
              })}
            </List>
          </Box>
        </Box>
      </Dialog>
    </>
  );
};

export default Search;

===== src/layouts/full/vertical/sidebar/MenuItems.ts =====
/* --------------------------------------------------------------------------
 * Sidebar Menu Configuration
 * --------------------------------------------------------------------------
 * Match the visual hierarchy shown in the reference screenshots (Inventory →
 * Reports) while preserving the first two Admin Dashboard links.  All strings
 * are provided as i18n keys (eg. "sidebar.inventory") so that `react-i18next`
 * can supply Arabic ↔︎ English translations at runtime.
 * --------------------------------------------------------------------------*/

import { uniqueId } from 'lodash';
import {
  IconPackage,
  IconBuildingWarehouse,
  IconTruck,
  IconUsers,
  IconDots,
  IconBuilding,
  IconSettings,
  IconShield,
  IconWallet,
  IconPigMoney,
  IconDeviceDesktop,
  IconCreditCard,
  IconRuler,
  IconTags,
  IconChartBar,
  IconFileText,
  IconShoppingCart,
  IconClipboardList,
  IconComponents,
  IconMapPin,
  IconTable,
  IconUserCheck
} from '@tabler/icons-react';

interface MenuItem {
  id: string;
  title?: string;
  // i18n translation key; if omitted, `title` is treated as the key itself
  tKey?: string;
  icon?: any;
  href?: string;
  navlabel?: boolean;
  subheader?: string; // i18n key for section heading
  children?: MenuItem[];
  chip?: string;
  chipColor?: string;
  variant?: string;
  external?: boolean;
  disabled?: boolean;
}

const SidebarConfig: MenuItem[] = [

  /* ---------------------------------------------------------------------- */
  /*  System Administration                                                 */
  /* ---------------------------------------------------------------------- */
  {
    title: 'sidebar.systemAdmin',
    id: uniqueId(),
    icon: IconSettings,
    href: '/admin',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.userManagement',
        icon: IconUsers,
        href: '/users'
      },
      {
        id: uniqueId(),
        title: 'sidebar.companySettings',
        icon: IconBuilding,
        href: '/company'
      },
      {
        id: uniqueId(),
        title: 'sidebar.permissions',
        icon: IconShield,
        href: '/permissions'
      }
    ]
  },

  /* ---------------------------------------------------------------------- */
  /*  Inventory                                                             */
  /* ---------------------------------------------------------------------- */
  {
    title: 'sidebar.inventory',
    id: uniqueId(),
    icon: IconBuildingWarehouse,
    href: '/inventory/warehouses',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.data',
        icon: IconDots,
        href: '/inventory/data',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.warehouses',
            icon: IconBuildingWarehouse,
            href: '/inventory/warehouses'
          },
          {
            id: uniqueId(),
            title: 'sidebar.units',
            icon: IconRuler,
            href: '/inventory/units'
          },
          {
            id: uniqueId(),
            title: 'groups.title',
            icon: IconTags,
            href: '/inventory/groups'
          },
          {
            id: uniqueId(),
            title: 'sidebar.products',
            icon: IconPackage,
            href: '/inventory/products'
          }
        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.transactions',
        icon: IconDots,
        href: '/inventory/transactions',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.inventoryadjustments',
            icon: IconClipboardList,
            href: '/inventory/inventory-adjustments'
          }
        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.reports',
        icon: IconDots,
        href: '/inventory/reports',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.productBalance',
            icon: IconChartBar,
            href: '/reports/product-balance'
          }
        ]
      }
    ]
  },

  /* ---------------------------------------------------------------------- */
  /*  Purchases                                                             */
  /* ---------------------------------------------------------------------- */
  {
    title: 'sidebar.purchases',
    id: uniqueId(),
    icon: IconTruck,
    href: '/purchases/purchases',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.data',
        icon: IconDots,
        href: '/purchases/data',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.suppliers',
            icon: IconUsers,
            href: '/purchases/suppliers'
          }
        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.transactions',
        icon: IconDots,
        href: '/purchases/transactions',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.purchaseOrders',
            icon: IconFileText,
            href: '/purchases/purchase-orders'
          },
          {
            id: uniqueId(),
            title: 'sidebar.purchases',
            icon: IconShoppingCart,
            href: '/purchases/purchases'
          }
        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.reports',
        icon: IconDots,
        href: '/purchases/reports'
      }
    ]
  },

  /* ---------------------------------------------------------------------- */
  /*  Accounting                                                            */
  /* ---------------------------------------------------------------------- */
  {
    title: 'sidebar.accounting',
    id: uniqueId(),
    icon: IconWallet,
    href: '/accounting',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.data',
        icon: IconDots,
        href: '/accounting/data',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.accounts',
            icon: IconWallet,
            href: '/accounting/accounts'
          },
          {
            id: uniqueId(),
            title: 'sidebar.safes',
            icon: IconPigMoney,
            href: '/accounting/safes'
          }
        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.transactions',
        icon: IconDots,
        href: '/accounting/transactions'
      },
      {
        id: uniqueId(),
        title: 'sidebar.reports',
        icon: IconDots,
        href: '/accounting/reports'
      }
    ]
  },

  /* ---------------------------------------------------------------------- */
  /*  POS System                                                            */
  /* ---------------------------------------------------------------------- */
  {
    title: 'sidebar.pos',
    id: uniqueId(),
    icon: IconDeviceDesktop,
    href: '/pos',
    children: [
      {
        id: uniqueId(),
        title: 'sidebar.data',
        icon: IconDots,
        href: '/pos/data',
        children: [
          {
            id: uniqueId(),
            title: 'sidebar.paymentMethods',
            icon: IconCreditCard,
            href: '/pos/payment-methods'
          },
          {
            id: uniqueId(),
            title: 'sidebar.screens',
            icon: IconDeviceDesktop,
            href: '/pos/screens'
          },
          {
            id: uniqueId(),
            title: 'sidebar.posProducts',
            icon: IconPackage,
            href: '/pos/products'
          },
          {
            id: uniqueId(),
            title: 'sidebar.additionProducts',
            icon: IconComponents,
            href: '/addition/products'
          },
          {
            id: uniqueId(),
            title: 'sidebar.deliveryAgents',
            icon: IconTruck,
            href: '/pos/delivery/agents'
          },
                    {
            id: uniqueId(),
            title: 'sidebar.deliveryZones',
            icon: IconMapPin,
            href: '/pos/delivery/zones'
          },
          {
  id: uniqueId(),
  title: 'sidebar.tableSections',
  icon: IconTable, // أو IconLayoutGrid
  href: '/pos/table-sections'
},
{
  id: uniqueId(),
  title: 'sidebar.hallCaptains',
  icon: IconUserCheck, // أو IconChefHat
  href: '/pos/hall-captains'
},
{
  id: uniqueId(),
  title: 'sidebar.customers',
  icon: IconUsers,
  href: '/pos/customers'
},
{
  id: uniqueId(),
  title: 'sidebar.offers',
  icon: IconTags,
  href: '/pos/offers'
},
{
  id: uniqueId(),
  title: 'sidebar.deliveryCompanies',
  icon: IconTruck,
  href: '/pos/delivery/companies'
},

        ]
      },
      {
        id: uniqueId(),
        title: 'sidebar.transactions',
        icon: IconDots,
        href: '/pos/transactions'
      },
      {
        id: uniqueId(),
        title: 'sidebar.reports',
        icon: IconDots,
        href: '/pos/reports'
      }
    ]
  }
];

export default SidebarConfig;

===== src/layouts/full/vertical/sidebar/module-name.d.ts =====
declare module 'stylis-plugin-rtl';

===== src/layouts/full/vertical/sidebar/NavCollapse/index.tsx =====
// File: src/layouts/full/vertical/sidebar/NavCollapse/NavCollapse.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useState } from 'react';
import { useSelector } from 'src/store/Store';
import { useLocation } from 'react-router';
import {
  ListItemIcon,
  ListItemButton,
  Collapse,
  styled,
  ListItemText,
  useTheme,
  Box,
} from '@mui/material';
import NavItem from '../NavItem';
import { IconChevronDown, IconChevronUp, IconDots } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
}

const NavCollapse = ({
  menu,
  level,
  pathWithoutLastPart,
  pathDirect,
  hideMenu,
  onClick
}: NavCollapseProps) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = menu?.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const { t } = useTranslation();
  
  const [open, setOpen] = useState(() => {
    return menu?.children?.some((item: any) => {
      if (item.children) {
        return item.children.some((child: any) => pathname.includes(child.href));
      }
      return pathname.includes(item.href);
    }) || false;
  });

  // تحديد الأيقونة حسب المستوى
  const getMenuIcon = () => {
    if (level === 1) {
      // المستوى الأول - الأيقونة العادية
      return <Icon stroke={1.5} size="1.1rem" />;
    } else {
      // تحديد ما إذا كان هذا العنصر له أطفال أم لا
      const hasChildren = menu?.children && menu.children.length > 0;
      const isLastLevel = !hasChildren || !menu.children.some((child: any) => child.children);
      
      if (isLastLevel) {
        // المستوى الأخير - أيقونة عادية
        return <Icon stroke={1.5} size="1rem" />;
      } else {
        // المستوى الأوسط - 3 نقاط
        return <IconDots size="1rem" />;
      }
    }
  };

  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setOpen(!open);
  };

  React.useEffect(() => {
    const shouldBeOpen = menu?.children?.some((item: any) => {
      if (item.children) {
        return item.children.some((child: any) => pathname === child.href);
      }
      return pathname === item.href;
    });

    if (shouldBeOpen && !open) {
      setOpen(true);
    }
  }, [pathname, menu.children, open]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    marginBottom: '1px',
    padding: '4px 8px',
    paddingLeft: hideMenu 
      ? '8px' 
      : level === 1 
        ? '8px'
        : level === 2 
          ? '24px'
          : `${level * 16}px`,
    backgroundColor: open && level < 2 ? theme.palette.primary.main : '',
    whiteSpace: 'nowrap',
    minHeight: '32px',
    '&:hover': {
      backgroundColor: pathname.includes(menu.href) || open
        ? theme.palette.primary.main
        : theme.palette.primary.light,
      color: pathname.includes(menu.href) || open ? 'white' : theme.palette.primary.main,
    },
    color:
      open && level < 2
        ? 'white'
        : level > 1 && open
          ? theme.palette.primary.main
          : theme.palette.text.secondary,
    borderRadius: `${customizer.borderRadius}px`,
    ...(level > 1 && {
      borderLeft: `2px solid ${theme.palette.divider}`,
      marginLeft: '8px',
    }),
  }));

  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item?.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
        />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
        />
      );
    }
  });

  return (
    <>
      <ListItemStyled
        onClick={handleClick}
        selected={pathWithoutLastPart === menu.href}
        key={menu?.id}
      >
        <ListItemIcon
          sx={{
            minWidth: level === 1 ? '28px' : '20px',
            p: '2px 0',
            color: 'inherit',
          }}
        >
          {getMenuIcon()}
        </ListItemIcon>
        <ListItemText 
          color="inherit"
          sx={{
            '& .MuiListItemText-primary': {
              fontSize: level === 1 ? '0.875rem' : '0.8rem',
              lineHeight: 1.2,
              fontWeight: level === 1 ? 500 : 400,
            }
          }}
        >
          {hideMenu ? '' : <>{t(`${menu.title}`)}</>}
        </ListItemText>
        
        {level === 1 && (
          <Box sx={{ ml: 1 }}>
            {!open ? 
              <IconChevronDown size="0.9rem" /> : 
              <IconChevronUp size="0.9rem" />
            }
          </Box>
        )}
        
        {level > 1 && (
          <Box sx={{ ml: 1 }}>
            {!open ? 
              <IconChevronDown size="0.7rem" /> : 
              <IconChevronUp size="0.7rem" />
            }
          </Box>
        )}
      </ListItemStyled>
      
      <Collapse in={open} timeout="auto" unmountOnExit>
        <Box sx={{ 
          ...(level > 1 && {
            backgroundColor: theme.palette.action.hover,
            borderRadius: `0 ${customizer.borderRadius}px ${customizer.borderRadius}px 0`,
            margin: '0 4px',
          })
        }}>
          {submenus}
        </Box>
      </Collapse>
    </>
  );
};

export default NavCollapse;

===== src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx =====
// File: src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx
import React from 'react';
import { ListSubheader, styled, Theme } from '@mui/material';
import { IconDots } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface NavGroupProps {
  item: {
    navlabel?: boolean;
    subheader?: string;
  };
  hideMenu: boolean | string;
}

const ListSubheaderStyle = styled(ListSubheader)(({ theme }: { theme: Theme }) => ({
  ...theme.typography.overline,
  fontWeight: 700,
  marginTop: theme.spacing(1.5), // تقليل من 3 إلى 1.5
  marginBottom: 0,
  color: theme.palette.text.primary,
  lineHeight: '20px', // تقليل من 26px إلى 20px
  padding: '2px 8px', // تقليل من 3px 12px إلى 2px 8px
  fontSize: '0.75rem', // تصغير حجم الخط
}));

const NavGroup: React.FC<NavGroupProps> = ({ item, hideMenu }) => {
  const { t } = useTranslation();

  return (
    <ListSubheaderStyle sx={{ ml: hideMenu ? 0 : '-8px' }} disableSticky>
      {hideMenu ? <IconDots size={12} /> : t(item.subheader ?? '')}
    </ListSubheaderStyle>
  );
};

export default NavGroup;

===== src/layouts/full/vertical/sidebar/NavItem/index.tsx =====
// File: src/layouts/full/vertical/sidebar/NavItem/NavItem.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { NavLink } from 'react-router';
import {
  ListItemIcon,
  List,
  styled,
  ListItemText,
  Chip,
  useTheme,
  Typography,
  ListItemButton,
} from '@mui/material';
import { useSelector } from 'src/store/Store';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
  onClick?: React.MouseEvent<HTMLButtonElement, MouseEvent>;
};

interface ItemType {
  item: NavGroup;
  hideMenu?: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
  level?: number | any;
  pathDirect: string;
}

const NavItem = ({ item, level, pathDirect, hideMenu, onClick }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item?.icon;
  const theme = useTheme();
  const { t } = useTranslation();
  
  // تحديد الأيقونة حسب المستوى
  const getItemIcon = () => {
    if (level === 1) {
      // المستوى الأول - الأيقونة العادية
      return <Icon stroke={1.5} size="1.1rem" />;
    } else {
      // للمستويات الفرعية، نحتاج لتحديد ما إذا كان هذا المستوى الأخير
      // إذا كان level > 2، فهو مستوى أوسط، استخدم النقاط
      // إذا كان level === 2 أو الأخير، استخدم الأيقونة
      
      // بشكل عام، العناصر في NavItem هي عناصر نهائية (ليس لها أطفال)
      // لذا سنستخدم الأيقونة العادية
      return <Icon stroke={1.5} size="1rem" />;
    }
  };

  const ListItemStyled = styled(ListItemButton)(() => ({
    whiteSpace: 'nowrap',
    marginBottom: '1px',
    padding: '4px 8px',
    borderRadius: `${customizer.borderRadius}px`,
    backgroundColor: level > 1 ? 'transparent !important' : 'inherit',
    color:
      level > 1 && pathDirect === item?.href
        ? `${theme.palette.primary.main}!important`
        : theme.palette.text.secondary,
    paddingLeft: hideMenu 
      ? '8px' 
      : level === 1 
        ? '8px'
        : level === 2 
          ? '24px'
          : level === 3
            ? '40px'
            : `${level * 16}px`,
    minHeight: level === 1 ? '32px' : '28px',
    '&:hover': {
      backgroundColor: theme.palette.primary.light,
      color: theme.palette.primary.main,
    },
    '&.Mui-selected': {
      color: 'white',
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.main,
        color: 'white',
      },
    },
    ...(level > 1 && {
      borderLeft: `2px solid ${theme.palette.divider}`,
      marginLeft: '8px',
    }),
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item?.id && item.title}>
      <ListItemStyled
        {...listItemProps}
        disabled={item?.disabled}
        selected={pathDirect === item?.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: level === 1 ? '28px' : '20px',
            p: '2px 0',
            color:
              level > 1 && pathDirect === item?.href
                ? `${theme.palette.primary.main}!important`
                : 'inherit',
          }}
        >
          {getItemIcon()}
        </ListItemIcon>
        <ListItemText
          sx={{
            '& .MuiListItemText-primary': {
              fontSize: level === 1 ? '0.875rem' : '0.8rem',
              lineHeight: 1.2,
              fontWeight: level === 1 ? 500 : 400,
            }
          }}
        >
          {hideMenu ? '' : <>{t(`${item?.title}`)}</>}
          <br />
          {item?.subtitle ? (
            <Typography variant="caption" sx={{ lineHeight: 1.1 }}>
              {hideMenu ? '' : item?.subtitle}
            </Typography>
          ) : (
            ''
          )}
        </ListItemText>

        {!item?.chip || hideMenu ? null : (
          <Chip
            color={item?.chipColor}
            variant={item?.variant ? item?.variant : 'filled'}
            size="small"
            label={item?.chip}
            sx={{ height: '18px', fontSize: '0.7rem' }}
          />
        )}
      </ListItemStyled>
    </List>
  );
};

export default NavItem;

===== src/layouts/full/vertical/sidebar/Sidebar.tsx =====
import { useMediaQuery, Box, Drawer, useTheme } from '@mui/material';
import SidebarItems from './SidebarItems';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { hoverSidebar, toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
// import { Profile } from './SidebarProfile/Profile';
import { AppState } from 'src/store/Store';

const Sidebar = () => {
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();
  const theme = useTheme();
  const toggleWidth =
    customizer.isCollapse && !customizer.isSidebarHover
      ? customizer.MiniSidebarWidth
      : customizer.SidebarWidth;

  const onHoverEnter = () => {
    if (customizer.isCollapse) {
      dispatch(hoverSidebar(true));
    }
  };

  const onHoverLeave = () => {
    dispatch(hoverSidebar(false));
  };

  if (lgUp) {
    return (
      <Box
        sx={{
          width: toggleWidth,
          flexShrink: 0,
          ...(customizer.isCollapse && {
            position: 'absolute',
          }),
        }}
      >
        {/* ------------------------------------------- */}
        {/* Sidebar for desktop */}
        {/* ------------------------------------------- */}
        <Drawer
          anchor="left"
          open
          onMouseEnter={onHoverEnter}
          onMouseLeave={onHoverLeave}
          variant="permanent"
          PaperProps={{
            sx: {
              transition: theme.transitions.create('width', {
                duration: theme.transitions.duration.shortest,
              }),
              width: toggleWidth,
              boxSizing: 'border-box',
            },
          }}
        >
          {/* ------------------------------------------- */}
          {/* Sidebar Box */}
          {/* ------------------------------------------- */}
          <Box
            sx={{
              height: '100%',
            }}
          >
            {/* ------------------------------------------- */}
            {/* Logo */}
            {/* ------------------------------------------- */}
            <Box px={2}>
              <Logo />
            </Box>
            <Scrollbar sx={{ height: 'auto' }}>
              {/* ------------------------------------------- */}
              {/* Sidebar Items */}
              {/* ------------------------------------------- */}
              <SidebarItems />
            </Scrollbar>
            {/* <Profile /> */}
          </Box>
        </Drawer>
      </Box>
    );
  }

  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,

          // backgroundColor:
          //   customizer.activeMode === 'dark'
          //     ? customizer.darkBackground900
          //     : customizer.activeSidebarBg,
          // color: customizer.activeSidebarBg === '#ffffff' ? '' : 'white',
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
        },
      }}
    >
      {/* ------------------------------------------- */}
      {/* Logo */}
      {/* ------------------------------------------- */}
      <Box px={2}>
        <Logo />
      </Box>
      {/* ------------------------------------------- */}
      {/* Sidebar For Mobile */}
      {/* ------------------------------------------- */}
      <SidebarItems />
    </Drawer>
  );
};

export default Sidebar;

===== src/layouts/full/vertical/sidebar/SidebarItems.tsx =====
// File: src/layouts/full/vertical/sidebar/SidebarItems.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Menuitems from './MenuItems';
import { useLocation } from 'react-router';
import { Box, List, useMediaQuery } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import NavItem from './NavItem';
import NavCollapse from './NavCollapse';
import NavGroup from './NavGroup/NavGroup';
import { AppState } from 'src/store/Store';

const SidebarItems = () => {
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const hideMenu: any = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';
  const dispatch = useDispatch();

  return (
    <Box sx={{ px: 2 }}> {/* تقليل من px: 3 إلى px: 2 */}
      <List 
        sx={{ 
          pt: 0,
          '& .MuiListItem-root': {
            py: 0, // إزالة المسافات العمودية الافتراضية
          }
        }} 
        className="sidebarNav"
        dense // إضافة dense لتقليل المسافات
      >
        {Menuitems.map((item) => {
          if (item.subheader) {
            return <NavGroup item={item} hideMenu={hideMenu} key={item.subheader} />;
          } else if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id}
                onClick={() => dispatch(toggleMobileSidebar())}
              />
            );
          } else {
            return (
              <NavItem 
                item={item} 
                key={item.id} 
                pathDirect={pathDirect} 
                hideMenu={hideMenu}
                level={1}
                onClick={() => dispatch(toggleMobileSidebar())} 
              />
            );
          }
        })}
      </List>
    </Box>
  );
};

export default SidebarItems;

===== src/layouts/full/vertical/sidebar/SidebarProfile/Profile.tsx =====
import React from 'react';
import {
  Box,
  Avatar,
  Typography,
  IconButton,
  Tooltip,
  useMediaQuery
} from '@mui/material';
import { IconPower } from '@tabler/icons-react';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';
import img1 from 'src/assets/images/profile/user-1.jpg';
import { clearAuth } from 'src/utils/auth';
import { useNavigate } from 'react-router-dom';

export const Profile: React.FC = () => {
  /* --------- collapse logic --------- */
  const { isCollapse, isSidebarHover } = useSelector(
    (s: AppState) => s.customizer
  );
  const lgUp = useMediaQuery((t: any) => t.breakpoints.up('lg'));
  const hideMenu = lgUp ? isCollapse && !isSidebarHover : false;

  const navigate = useNavigate();
  const logout = () => {
    clearAuth();
    navigate('/auth/login', { replace: true });
  };

  if (hideMenu) return null;

  return (
    <Box display="flex" alignItems="center" gap={2} sx={{ m: 3, p: 2, bgcolor: 'secondary.light' }}>
      <Avatar src={img1} alt="user" />
      <Box>
        <Typography variant="h6">Mathew</Typography>
        <Typography variant="caption">Designer</Typography>
      </Box>
      <Box sx={{ ml: 'auto' }}>
        <Tooltip title="Logout">
          <IconButton color="primary" onClick={logout} size="small">
            <IconPower size={20} />
          </IconButton>
        </Tooltip>
      </Box>
    </Box>
  );
};

export default Profile;

===== src/LoadingBar.tsx =====
import { useState, useEffect } from 'react';
import TopLoadingBar from 'react-top-loading-bar';
import { useLocation } from 'react-router';


function LoadingBar() {
    const [progress, setProgress] = useState(0);
    const location = useLocation(); // page navigation.

    const startLoading = () => {
        setProgress(10); // Start loading
    };

    const finishLoading = () => {
        setProgress(100); // Complete loading
        setTimeout(() => setProgress(0), 10); // Reset progress after completion
    };

    // Trigger loading when route changes
    useEffect(() => {
        startLoading();
        setTimeout(() => {
            finishLoading(); // Complete the loader after 2 seconds (or after data load)
        }, 2000); // 2-second delay 
    }, [location]); // trigger whenever the route changes

    return (
        <TopLoadingBar
            color="#5D87FF"
            height={3}
            progress={progress}
        />
    );
}

export default LoadingBar;




===== src/main.tsx =====
// File: src/main.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';
import { Provider } from 'react-redux';
import ReactDOM from 'react-dom/client';
import App from './App';
import { store } from './store/Store';
import Spinner from './views/spinner/Spinner';
import ErrorBoundary from './components/ErrorBoundary';
import './utils/i18n';
import './_mockApis';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <ErrorBoundary>
    <Provider store={store}>
      <Suspense fallback={<Spinner />}>
        <App />
      </Suspense>
    </Provider>
  </ErrorBoundary>
);

===== src/Pages/accounts/AccountsPage.tsx =====
// File: src/pages/accounts/AccountsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery,
  Snackbar, Alert, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import AccountsTable from './components/AccountsTable';
import AccountsCards from './components/mobile/AccountsCards';
import AccountForm from './components/AccountForm';
import MobileAccountsFilter, { AccountsFilterState } from './components/mobile/MobileAccountsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/accountsApi';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}


const AccountsPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [accounts, setAccounts] = React.useState<Account[]>([]);
  const [query, setQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Account;
  }>({ open: false, mode: 'add', current: undefined });

  const canAdd = props.canAdd ?? true; // Default to true if not provided

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<AccountsFilterState>({
    searchQuery: '',
    accountType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchAccounts = async () => {
    try {
      const accountsData = await apiSrv.getAll();
      setAccounts(accountsData);
    } catch (e: any) {
      setErr(e?.message || t('accounts.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchAccounts();
      }
      catch (e: any) { 
        setErr(e?.message || t('accounts.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? accounts.filter(a => 
      a.name.toLowerCase().includes(query.toLowerCase()) ||
      a.typeName.toLowerCase().includes(query.toLowerCase()) ||
      a.accountNumber.toLowerCase().includes(query.toLowerCase())
    ) : accounts,
    [accounts, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...accounts];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(account => 
        account.name.toLowerCase().includes(searchLower) ||
        account.typeName.toLowerCase().includes(searchLower) ||
        account.accountNumber.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع الحساب
    if (mobileFilters.accountType) {
      result = result.filter(account => account.typeName === mobileFilters.accountType);
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(account => account.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [accounts, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.accountType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      console.log('Adding account:', data);
      await apiSrv.add(data);
      await fetchAccounts();
    } catch (e: any) {
      console.error('Add error:', e);
      const msg = e?.errors?.AccountName?.[0] || e?.message || t('accounts.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      console.log('Updating account:', data);
      await apiSrv.update(data);
      await fetchAccounts();
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.errors?.AccountName?.[0] || e?.message || t('accounts.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('accounts.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <AccountsCards
                accounts={filtered}
                onEdit={(a) => setDialog({ open: true, mode: 'edit', current: a })}
                loading={loading}
              />
            )
          : (
              <AccountsTable
                rows={filtered}
                onEdit={(a) => setDialog({ open: true, mode: 'edit', current: a })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileAccountsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={accounts.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <AccountForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>

      {loading && <div>Loading…</div>}
    </Container>
  );
};

export default AccountsPage;

===== src/Pages/accounts/components/AccountForm.tsx =====
// File: src/pages/accounts/components/AccountForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  Switch,
  FormControlLabel,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Account;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const AccountForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const { control, handleSubmit, reset, formState: { errors } } = useForm({
    defaultValues: {
      name: '',
      safeOrAccountType: 2,
      typeName: '',
      accountNumber: '',
      collectionFeePercent: 0,
      isActive: true
    }
  });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        safeOrAccountType: initialValues.safeOrAccountType,
        typeName: initialValues.typeName,
        accountNumber: initialValues.accountNumber,
        collectionFeePercent: initialValues.collectionFeePercent,
        isActive: initialValues.isActive
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        safeOrAccountType: 2,
        typeName: '',
        accountNumber: '',
        collectionFeePercent: 0,
        isActive: true
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          safeOrAccountType: 2,
          typeName: '',
          accountNumber: '',
          collectionFeePercent: 0,
          isActive: true
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="sm" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('accounts.add') : t('accounts.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('accounts.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="typeName"
            control={control}
            rules={{ required: t('accounts.validation.typeRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.type')}
                fullWidth
                error={!!errors.typeName}
                helperText={errors.typeName?.message}
                disabled={isSubmitting}
                placeholder={t('accounts.typePlaceholder')}
              />
            )}
          />

          <Controller
            name="accountNumber"
            control={control}
            rules={{ required: t('accounts.validation.accountNumberRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.accountNumber')}
                fullWidth
                error={!!errors.accountNumber}
                helperText={errors.accountNumber?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="collectionFeePercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.collectionFeePercent')}
                type="number"
                fullWidth
                inputProps={{ step: 0.01, min: 0, max: 100 }}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="isActive"
            control={control}
            render={({ field }) => (
              <FormControlLabel
                control={
                  <Switch
                    checked={field.value}
                    onChange={field.onChange}
                    disabled={isSubmitting}
                  />
                }
                label={t('accounts.isActive')}
              />
            )}
          />
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default AccountForm;

===== src/Pages/accounts/components/AccountsTable.tsx =====
// File: src/pages/accounts/components/AccountsTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  rows: Account[];
  onEdit: (account: Account) => void;
}

const AccountsTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<Account>[] = [
    { field: 'name', headerName: t('accounts.name'), flex: 1, minWidth: 180 },
    { 
      field: 'typeName', 
      headerName: t('accounts.type'), 
      flex: 0.8,
      renderCell: ({ value }) => (
        <Chip 
          label={t(`accounts.types.${value.toLowerCase()}`)} 
          color="primary" 
          variant="outlined" 
          size="small" 
        />
      )
    },
    { 
      field: 'accountNumber', 
      headerName: t('accounts.accountNumber'), 
      flex: 1,
      renderCell: ({ value }) => (
        <span style={{ fontFamily: 'monospace' }}>{value}</span>
      )
    },
    { 
      field: 'collectionFeePercent', 
      headerName: t('accounts.collectionFeePercent'), 
      flex: 0.8,
      renderCell: ({ value }) => `${value}%`
    },
    { 
      field: 'isActive', 
      headerName: t('accounts.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('accounts.active') : t('accounts.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default AccountsTable;

===== src/Pages/accounts/components/ActionsBar.tsx =====
// File: src/pages/accounts/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('accounts.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('accounts.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/accounts/components/mobile/AccountsCards.tsx =====
// File: src/pages/accounts/components/mobile/AccountsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Account } from 'src/utils/api/pagesApi/accountsApi';
import { useTranslation } from 'react-i18next';

interface Props {
  accounts: Account[];
  onEdit: (account: Account) => void;
  loading: boolean;
}

const AccountsCards: React.FC<Props> = ({ accounts, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (accounts.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('accounts.noAccounts')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {accounts.map((account) => (
        <Grid item xs={12} sm={6} md={4} key={account.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {account.name}
                  </Typography>
                  
                  <Box>
                    <Chip
                      label={t(`accounts.types.${account.typeName.toLowerCase()}`)}
                      color="primary"
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ 
                      fontSize: { xs: '0.75rem', sm: '0.875rem' },
                      fontFamily: 'monospace'
                    }}
                  >
                    {t('accounts.accountNumber')}: {account.accountNumber}
                  </Typography>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('accounts.collectionFeePercent')}: {account.collectionFeePercent}%
                  </Typography>
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={account.isActive ? t('accounts.active') : t('accounts.inactive')}
                      color={account.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(account)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default AccountsCards;

===== src/Pages/accounts/components/mobile/MobileAccountsFilter.tsx =====
// File: src/pages/accounts/components/mobile/MobileAccountsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface AccountsFilterState {
  searchQuery: string;
  accountType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: AccountsFilterState;
  onFiltersChange: (filters: AccountsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileAccountsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<AccountsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const accountTypeOptions = [
    { value: '', label: t('common.all') },
    { value: 'Bank', label: t('accounts.types.bank') },
    { value: 'Wallet', label: t('accounts.types.wallet') },
    { value: 'Visa', label: t('accounts.types.visa') },
    { value: 'InstaPay', label: t('accounts.types.instapay') },
    { value: 'StaffAccount', label: t('accounts.types.staffAccount') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('accounts.active') },
    { value: 'false', label: t('accounts.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('accounts.name') },
    { value: 'typeName', label: t('accounts.type') },
    { value: 'accountNumber', label: t('accounts.accountNumber') },
    { value: 'collectionFeePercent', label: t('accounts.collectionFeePercent') },
    { value: 'isActive', label: t('accounts.status') }
  ];

  const handleLocalChange = (field: keyof AccountsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: AccountsFilterState = {
      searchQuery: '',
      accountType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.accountType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('accounts.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('accounts.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('accounts.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('accounts.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('accounts.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('accounts.filter.filters')}</Typography>
            {(localFilters.accountType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.accountType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.type')}</InputLabel>
              <Select
                value={localFilters.accountType}
                label={t('accounts.type')}
                onChange={(e) => handleLocalChange('accountType', e.target.value)}
              >
                {accountTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('accounts.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('accounts.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('accounts.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('accounts.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('accounts.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('accounts.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('accounts.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('accounts.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileAccountsFilter;

===== src/Pages/accounts/components/PageHeader.tsx =====
// File: src/pages/accounts/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { accountsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  exportData: Account[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...accountsImportExportConfig,
    onExport: () => exportData.map(account => ({
      name: account.name,
      typeName: account.typeName,
      accountNumber: account.accountNumber,
      collectionFeePercent: account.collectionFeePercent,
      isActive: account.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('accounts.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/auth/BranchSelectionPage.tsx =====
// File: src/pages/auth/BranchSelectionPage.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Grid, 
  Box, 
  Card, 
  Stack, 
  Typography, 
  Button,
  Chip,
  Divider,
  Alert
} from '@mui/material';
import { IconBuilding, IconMapPin, IconPhone, IconLogout } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

const BranchSelectionPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { branches, selectBranch, logout, user, isLoading } = useAuth();
  const [selectedBranchId, setSelectedBranchId] = React.useState<string | null>(null);

  const handleBranchSelect = async (branch: Branch) => {
    try {
      setSelectedBranchId(branch.id);
      await selectBranch(branch);
      setTimeout(() => {
        navigate('/dashboard', { replace: true });
      }, 100);
    } catch (error) {
      console.error('Error selecting branch:', error);
      setSelectedBranchId(null);
    }
  };

  const handleLogout = () => {
    logout();
    navigate('/auth/login', { replace: true });
  };

  if (branches.length === 0) {
    return (
      <PageContainer title={t('auth.branchSelection.title')} description={t('auth.branchSelection.description')}>
        <Box sx={{ 
          position: 'relative', 
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute', 
            inset: 0, 
            opacity: 0.3 
          }
        }}>
          <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
            <Grid item xs={12} sm={8} md={6} lg={5} display="flex" alignItems="center">
              <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
                <Box textAlign="center" mb={3}>
                  <Logo />
                </Box>

                <Alert severity="warning" sx={{ mb: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    {t('auth.branchSelection.noBranches')}
                  </Typography>
                  <Typography variant="body2">
                    {t('auth.branchSelection.noBranchesMessage')}
                  </Typography>
                </Alert>

                <Button
                  variant="contained"
                  color="error"
                  fullWidth
                  onClick={handleLogout}
                  startIcon={<IconLogout />}
                >
                  {t('auth.logout')}
                </Button>
              </Card>
            </Grid>
          </Grid>
        </Box>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('auth.branchSelection.title')} description={t('auth.branchSelection.description')}>
      <Box sx={{ 
        position: 'relative', 
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute', 
          inset: 0, 
          opacity: 0.3 
        }
      }}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={10} md={8} lg={6} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={3}>
                <Logo />
              </Box>

              <Typography variant="h4" textAlign="center" mb={1}>
                {t('auth.branchSelection.selectBranch')}
              </Typography>
              
              <Typography variant="body1" textAlign="center" color="text.secondary" mb={4}>
                {t('auth.branchSelection.welcomeMessage', { userName: user?.userName })}
              </Typography>

              <Stack spacing={2}>
                {branches.map((branch) => (
                  <Card 
                    key={branch.id}
                    variant="outlined"
                    sx={{ 
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: 4,
                        borderColor: 'primary.main'
                      },
                      ...(selectedBranchId === branch.id && {
                        opacity: 0.7,
                        pointerEvents: 'none'
                      })
                    }}
                    onClick={() => handleBranchSelect(branch)}
                  >
                    <Box sx={{ p: 3 }}>
                      <Stack direction="row" alignItems="center" spacing={2} mb={2}>
                        <IconBuilding size={24} color="primary" />
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="h6">
                            {branch.name}
                          </Typography>
                        </Box>
                        <Chip 
                          label={branch.company.name} 
                          size="small" 
                          color="primary" 
                          variant="outlined"
                        />
                      </Stack>

                      <Stack spacing={1} sx={{ mb: 2 }}>
                        {branch.address && (
                          <Stack direction="row" alignItems="center" spacing={1}>
                            <IconMapPin size={16} />
                            <Typography variant="body2" color="text.secondary">
                              {branch.address}
                            </Typography>
                          </Stack>
                        )}

                        {branch.phone && (
                          <Stack direction="row" alignItems="center" spacing={1}>
                            <IconPhone size={16} />
                            <Typography variant="body2" color="text.secondary">
                              {branch.phone}
                            </Typography>
                          </Stack>
                        )}
                      </Stack>

                      <Button
                        fullWidth
                        variant="contained"
                        disabled={selectedBranchId === branch.id || isLoading}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleBranchSelect(branch);
                        }}
                      >
                        {selectedBranchId === branch.id ? t('auth.branchSelection.selecting') : t('auth.branchSelection.selectThisBranch')}
                      </Button>
                    </Box>
                  </Card>
                ))}
              </Stack>

              <Divider sx={{ my: 3 }} />

              <Button
                variant="outlined"
                color="error"
                fullWidth
                onClick={handleLogout}
                startIcon={<IconLogout />}
              >
                {t('auth.logout')}
              </Button>
            </Card>
          </Grid>
        </Grid>
      </Box>
    </PageContainer>
  );
};

export default BranchSelectionPage;

===== src/Pages/auth/components/AuthLogin.tsx =====
// File: src/pages/auth/components/AuthLogin.tsx
import React from 'react';
import { 
  Box, 
  Stack, 
  Button, 
  Typography, 
  FormGroup, 
  FormControlLabel,
  CircularProgress,
  InputAdornment,
  IconButton
} from '@mui/material';
import { IconEye, IconEyeOff, IconPhone, IconLock, IconBuilding } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import { Link } from 'react-router-dom';

interface Props {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  subtext?: React.ReactNode;
  onSubmit: (phone: string, password: string, tenantId: string) => void; // ⭐ إضافة tenantId
  isLoading?: boolean;
}

const AuthLogin: React.FC<Props> = ({ 
  subtitle, 
  subtext, 
  onSubmit, 
  isLoading = false 
}) => {
  const { t } = useTranslation();
  const [tenantId, setTenantId] = React.useState(''); // ⭐ إضافة tenantId state
  const [phone, setPhone] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [showPassword, setShowPassword] = React.useState(false);
  const [rememberMe, setRememberMe] = React.useState(false);

  React.useEffect(() => {
    const savedPhone = localStorage.getItem('remembered_phone');
    const savedTenantId = localStorage.getItem('remembered_tenant'); // ⭐ إضافة حفظ TenantId
    const savedRemember = localStorage.getItem('remember_me') === 'true';
    
    if (savedRemember && savedPhone) {
      setPhone(savedPhone);
      setRememberMe(true);
    }
    
    if (savedRemember && savedTenantId) {
      setTenantId(savedTenantId);
    }
  }, []);

  const handle = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (rememberMe) {
      localStorage.setItem('remembered_phone', phone);
      localStorage.setItem('remembered_tenant', tenantId); // ⭐ حفظ TenantId
      localStorage.setItem('remember_me', 'true');
    } else {
      localStorage.removeItem('remembered_phone');
      localStorage.removeItem('remembered_tenant'); // ⭐ مسح TenantId
      localStorage.removeItem('remember_me');
    }
    
    onSubmit(phone, password, tenantId); // ⭐ تمرير tenantId
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <>
      {subtext}

      <form onSubmit={handle}>
        <Stack spacing={2}>
          {/* ⭐ إضافة حقل TenantId */}
          <Box>
            <CustomFormLabel htmlFor="tenantId">{t('auth.login.tenantId')}</CustomFormLabel>
            <CustomTextField 
              id="tenantId" 
              fullWidth 
              value={tenantId} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setTenantId(e.target.value)}
              placeholder={t('auth.login.tenantPlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconBuilding size={20} />
                  </InputAdornment>
                )
              }}
            />
          </Box>

          <Box>
            <CustomFormLabel htmlFor="phone">{t('auth.login.phoneNumber')}</CustomFormLabel>
            <CustomTextField 
              id="phone" 
              fullWidth 
              value={phone} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPhone(e.target.value)}
              placeholder={t('auth.login.phonePlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconPhone size={20} />
                  </InputAdornment>
                )
              }}
            />
          </Box>
          
          <Box>
            <CustomFormLabel htmlFor="password">{t('auth.login.password')}</CustomFormLabel>
            <CustomTextField 
              id="password" 
              type={showPassword ? 'text' : 'password'}
              fullWidth 
              value={password} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPassword(e.target.value)}
              placeholder={t('auth.login.passwordPlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconLock size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={togglePasswordVisibility}
                      edge="end"
                      disabled={isLoading}
                    >
                      {showPassword ? <IconEyeOff size={20} /> : <IconEye size={20} />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
          </Box>

          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <FormGroup>
              <FormControlLabel 
                control={
                  <CustomCheckbox 
                    checked={rememberMe}
                    onChange={(e) => setRememberMe(e.target.checked)}
                    disabled={isLoading}
                  />
                } 
                label={t('auth.login.rememberMe')}
              />
            </FormGroup>
            <Typography 
              component={Link} 
              to="/auth/forgot-password" 
              sx={{ 
                color: 'primary.main', 
                textDecoration: 'none',
                '&:hover': {
                  textDecoration: 'underline'
                }
              }}
            >
              {t('auth.login.forgotPassword')}
            </Typography>
          </Stack>

          <Button 
            variant="contained" 
            type="submit" 
            fullWidth
            disabled={isLoading || !tenantId.trim() || !phone.trim() || !password.trim()} // ⭐ إضافة tenantId للتحقق
            sx={{ 
              py: 1.5,
              fontSize: '1rem'
            }}
          >
            {isLoading ? (
              <Stack direction="row" alignItems="center" spacing={1}>
                <CircularProgress size={20} color="inherit" />
                <Typography>{t('auth.login.signingIn')}</Typography>
              </Stack>
            ) : (
              t('auth.login.signIn')
            )}
          </Button>
        </Stack>
      </form>

      {subtitle}
    </>
  );
};

export default AuthLogin;

===== src/Pages/auth/LoginPage.tsx =====
// File: src/Pages/auth/LoginPage.tsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Grid, Box, Card, Stack, Typography, Snackbar, Alert } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from './components/AuthLogin';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

const LoginPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { login, isLoading } = useAuth();
  const [msg, setMsg] = React.useState('');

  // ⭐ تحديث handleLogin لاستقبال tenantId
  const handleLogin = async (phone: string, password: string, tenantId: string) => {
    try {
      await login(phone, password, tenantId, (branches: Branch[], selectedBranch?: Branch) => {
        console.log('🚀 Login success callback triggered');
        console.log('- branches.length:', branches.length);
        console.log('- selectedBranch:', selectedBranch);
        
        if (branches.length === 1 && selectedBranch) {
          console.log('➡️ Redirecting to dashboard (single branch)');
          navigate('/dashboard', { replace: true });
        } else if (branches.length > 1) {
          console.log('➡️ Redirecting to branch selection (multiple branches)');
          navigate('/auth/branch-selection', { replace: true });
        } else {
          console.log('➡️ Redirecting to no branches page');
          navigate('/auth/no-branches', { replace: true });
        }
      });
      
    } catch (err: any) {
      console.error('❌ Login failed:', err);
      setMsg(err?.message || t('auth.login.failed'));
    }
  };

  return (
    <PageContainer title={t('auth.login.title')} description={t('auth.login.description')}>
      <Box sx={{ 
        position: 'relative', 
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute', 
          inset: 0, 
          opacity: 0.3 
        }
      }}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={8} md={5} lg={4} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={2}>
                <Logo />
              </Box>

              <AuthLogin
                onSubmit={handleLogin}
                isLoading={isLoading}
                subtitle={
                  <Stack direction="row" spacing={1} justifyContent="center" mt={3}>
                    <Typography color="textSecondary" variant="h6">
                      {t('auth.login.newUser')}
                    </Typography>
                    <Typography component={Link} to="/auth/register" sx={{ color: 'primary.main' }}>
                      {t('auth.login.createAccount')}
                    </Typography>
                  </Stack>
                }
              />
            </Card>
          </Grid>
        </Grid>
      </Box>

      <Snackbar open={!!msg} autoHideDuration={4000} onClose={() => setMsg('')}>
        <Alert severity="error" onClose={() => setMsg('')}>
          {msg}
        </Alert>
      </Snackbar>
    </PageContainer>
  );
};

export default LoginPage;

===== src/Pages/auth/RegisterPage.tsx =====
// File: src/pages/auth/RegisterPage.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from 'src/contexts/AuthContext';
import UsersManagementPage from 'src/Pages/users/UsersManagementPage';

const RegisterPage: React.FC = () => {
  const { hasPageAccess } = useAuth();

  // التحقق من صلاحية إضافة مستخدمين
  if (!hasPageAccess('UserManagement')) {
    return <Navigate to="/unauthorized" replace />;
  }

  // إعادة توجيه لصفحة إدارة المستخدمين
  return <UsersManagementPage />;
};

export default RegisterPage;

===== src/Pages/company/CompanySettingsPage.tsx =====
// File: src/pages/company/CompanySettingsPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Stack,
  Alert,
  Snackbar,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconBuilding,
  IconMapPin,
  IconPhone,
  IconMail,
  IconEdit,
  IconGavel,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const CompanySettingsPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { selectedBranch, branches } = useAuth();
  
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(false);
  const [allBranches, setAllBranches] = useState<Branch[]>([]);
  const [editingBranch, setEditingBranch] = useState<Branch | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const [companyForm, setCompanyForm] = useState({
    name: '',
    address: '',
    phone: '',
    email: ''
  });

  const [branchForm, setBranchForm] = useState({
    name: '',
    address: '',
    phone: ''
  });

  // تحميل بيانات الشركة والفروع
  useEffect(() => {
    if (selectedBranch?.company) {
      setCompanyForm({
        name: selectedBranch.company.name || '',
        address: selectedBranch.company.address || '',
        phone: selectedBranch.company.phone || '',
        email: selectedBranch.company.email || ''
      });
    }
    
    setAllBranches(branches);
  }, [selectedBranch, branches]);

  // تحديث بيانات الشركة
  const handleCompanyUpdate = async () => {
    try {
      setLoading(true);
      console.log('Updating company:', companyForm);
      
      setSnackbar({
        open: true,
        message: t('company.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('company.errors.updateFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // فتح dialog لتعديل الفرع
  const handleEditBranch = (branch: Branch) => {
    setEditingBranch(branch);
    setBranchForm({
      name: branch.name,
      address: branch.address || '',
      phone: branch.phone || ''
    });
    setDialogOpen(true);
  };

  // تحديث بيانات الفرع
  const handleBranchUpdate = async () => {
    try {
      setLoading(true);
      console.log('Updating branch:', editingBranch?.id, branchForm);
      
      setSnackbar({
        open: true,
        message: t('company.messages.branchUpdateSuccess'),
        severity: 'success'
      });
      setDialogOpen(false);
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('company.errors.branchUpdateFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('company.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary">
          {t('company.description')}
        </Typography>
      </Box>

      {/* Tabs */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={tabValue} 
            onChange={(_, newValue) => setTabValue(newValue)}
            variant={isMobile ? "scrollable" : "standard"}
            scrollButtons="auto"
          >
            <Tab 
              label={t('company.tabs.companyInfo')}
              icon={<IconBuilding size={20} />}
              iconPosition="start"
            />
            <Tab 
              label={t('company.tabs.branchManagement')}
              icon={<IconMapPin size={20} />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* Tab 1: Company Settings */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <Stack spacing={3}>
                <TextField
                  label={t('company.form.companyName')}
                  value={companyForm.name}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, name: e.target.value }))}
                  fullWidth
                  InputProps={{
                    startAdornment: <IconBuilding size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyAddress')}
                  value={companyForm.address}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, address: e.target.value }))}
                  fullWidth
                  multiline
                  rows={2}
                  InputProps={{
                    startAdornment: <IconMapPin size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyPhone')}
                  value={companyForm.phone}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, phone: e.target.value }))}
                  fullWidth
                  InputProps={{
                    startAdornment: <IconPhone size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyEmail')}
                  value={companyForm.email}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, email: e.target.value }))}
                  fullWidth
                  type="email"
                  InputProps={{
                    startAdornment: <IconMail size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <Button
                  variant="contained"
                  startIcon={<IconGavel />}
                  onClick={handleCompanyUpdate}
                  disabled={loading}
                  sx={{ alignSelf: 'flex-start' }}
                >
                  {t('common.saveChanges')}
                </Button>
              </Stack>
            </Grid>

            <Grid item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {t('company.info.currentCompanyInfo')}
                  </Typography>
                  
                  <Stack spacing={2}>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.companyName')}
                      </Typography>
                      <Typography variant="body2">
                        {selectedBranch?.company.name || t('common.notSpecified')}
                      </Typography>
                    </Box>

                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.branchCount')}
                      </Typography>
                      <Typography variant="body2">
                        {t('company.info.branchCountValue', { count: branches.length })}
                      </Typography>
                    </Box>

                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.currentBranch')}
                      </Typography>
                      <Typography variant="body2">
                        {selectedBranch?.name || t('common.notSpecified')}
                      </Typography>
                    </Box>
                  </Stack>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 2: Branches Management */}
        <TabPanel value={tabValue} index={1}>
          <Box sx={{ mb: 2 }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center">
              <Typography variant="h6">
                {t('company.branches.title', { count: allBranches.length })}
              </Typography>
              <Button
                variant="outlined"
                startIcon={<IconRefresh />}
                onClick={() => setAllBranches(branches)}
                size="small"
              >
                {t('common.refresh')}
              </Button>
            </Stack>
          </Box>

          {isMobile ? (
            // Mobile View - Cards
            <Stack spacing={2}>
              {allBranches.map((branch) => (
                <Card key={branch.id} variant="outlined">
                  <CardContent>
                    <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="h6" gutterBottom>
                          {branch.name}
                        </Typography>
                        
                        <Stack spacing={1}>
                          {branch.address && (
                            <Stack direction="row" alignItems="center" spacing={1}>
                              <IconMapPin size={16} />
                              <Typography variant="body2">{branch.address}</Typography>
                            </Stack>
                          )}
                          
                          {branch.phone && (
                            <Stack direction="row" alignItems="center" spacing={1}>
                              <IconPhone size={16} />
                              <Typography variant="body2">{branch.phone}</Typography>
                            </Stack>
                          )}

                          <Chip
                            label={branch.id === selectedBranch?.id ? t('company.branches.currentBranch') : t('company.branches.otherBranch')}
                            size="small"
                            color={branch.id === selectedBranch?.id ? 'primary' : 'default'}
                            variant="outlined"
                          />
                        </Stack>
                      </Box>
                      
                      <IconButton
                        size="small"
                        onClick={() => handleEditBranch(branch)}
                        color="primary"
                      >
                        <IconEdit size={16} />
                      </IconButton>
                    </Stack>
                  </CardContent>
                </Card>
              ))}
            </Stack>
          ) : (
            // Desktop View - Table
            <TableContainer component={Paper} variant="outlined">
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>{t('company.table.branchName')}</TableCell>
                    <TableCell>{t('company.table.address')}</TableCell>
                    <TableCell>{t('company.table.phone')}</TableCell>
                    <TableCell>{t('company.table.status')}</TableCell>
                    <TableCell>{t('company.table.actions')}</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {allBranches.map((branch) => (
                    <TableRow key={branch.id}>
                      <TableCell>
                        <Stack direction="row" alignItems="center" spacing={1}>
                          <IconBuilding size={20} />
                          <Typography>{branch.name}</Typography>
                        </Stack>
                      </TableCell>
                      <TableCell>{branch.address || t('common.notSpecified')}</TableCell>
                      <TableCell>{branch.phone || t('common.notSpecified')}</TableCell>
                      <TableCell>
                        <Chip
                          label={branch.id === selectedBranch?.id ? t('company.branches.currentBranch') : t('company.branches.otherBranch')}
                          size="small"
                          color={branch.id === selectedBranch?.id ? 'primary' : 'default'}
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton
                          size="small"
                          onClick={() => handleEditBranch(branch)}
                          color="primary"
                        >
                          <IconEdit size={16} />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </TabPanel>
      </Card>

      {/* Edit Branch Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {t('company.dialog.editBranch')}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={2} sx={{ mt: 1 }}>
            <TextField
              label={t('company.form.branchName')}
              value={branchForm.name}
              onChange={(e) => setBranchForm(prev => ({ ...prev, name: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('company.form.branchAddress')}
              value={branchForm.address}
              onChange={(e) => setBranchForm(prev => ({ ...prev, address: e.target.value }))}
              fullWidth
              multiline
              rows={2}
            />
            
            <TextField
              label={t('company.form.branchPhone')}
              value={branchForm.phone}
              onChange={(e) => setBranchForm(prev => ({ ...prev, phone: e.target.value }))}
              fullWidth
            />
          </Stack>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button onClick={handleBranchUpdate} variant="contained" disabled={loading}>
            {t('common.saveChanges')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default CompanySettingsPage;

===== src/Pages/components/configs/importExportConfigs.ts =====
// File: src/configs/importExportConfigs.
import { ImportExportConfig } from '../ImportExportManager';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import * as posScreensApi from 'src/utils/api/pagesApi/posScreensApi';
import { register } from 'src/utils/api/authApi';

/* ───── Groups Configuration ───── */
export const groupsImportExportConfig: ImportExportConfig = {
  moduleName: 'Groups',
  moduleNameEn: 'Groups',
  fileName: 'groups',
  title: 'groups.title', // استخدام key بدلاً من النص
  titleEn: 'groups.title',
  columns: [
    {
      field: 'name',
      headerName: 'groups.name',
      headerNameEn: 'groups.name',
      type: 'string',
      required: true,
      example: 'مشروبات',
      exampleEn: 'Beverages',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المجموعة يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم المجموعة طويل جداً';
        return null;
      }
    },
    {
      field: 'parentName',
      headerName: 'groups.parentGroup',
      headerNameEn: 'groups.parentGroup',
      type: 'string',
      required: false,
      example: 'مشروبات ساخنة',
      exampleEn: 'Hot Beverages',
      validate: (value) => {
        if (value && value.length > 100) return 'اسم المجموعة الأب طويل جداً';
        return null;
      }
    },
    {
      field: 'backgroundColor',
      headerName: 'groups.backgroundColor',
      headerNameEn: 'groups.backgroundColor',
      type: 'string',
      required: false,
      example: '#FF5733',
      exampleEn: '#FF5733',
      validate: (value) => {
        if (value && !/^#[0-9A-F]{6}$/i.test(value)) return 'لون غير صحيح (استخدم #RRGGBB)';
        return null;
      }
    },
    {
      field: 'fontColor',
      headerName: 'groups.fontColor',
      headerNameEn: 'groups.fontColor',
      type: 'string',
      required: false,
      example: '#FFFFFF',
      exampleEn: '#FFFFFF',
      validate: (value) => {
        if (value && !/^#[0-9A-F]{6}$/i.test(value)) return 'لون غير صحيح (استخدم #RRGGBB)';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        const item = data[i];
        
        let parentId = null;
        if (item.parentName) {
          const allGroups = await groupsApi.getAll();
          const parentGroup = allGroups.find(g => g.name === item.parentName);
          if (parentGroup) {
            parentId = parentGroup.id;
          } else {
            results.errors.push(`الصف ${i + 1}: المجموعة الأب "${item.parentName}" غير موجودة`);
            continue;
          }
        }
        
        await groupsApi.add({
          name: item.name,
          parentId: parentId ?? undefined,
          backgroundColor: item.backgroundColor || '#2196F3',
          fontColor: item.fontColor || '#FFFFFF'
        });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 1000
};

/* ───── Units Configuration ───── */
export const unitsImportExportConfig: ImportExportConfig = {
  moduleName: 'Units',
  moduleNameEn: 'Units',
  fileName: 'units',
  title: 'units.title',
  titleEn: 'units.title',
  columns: [
    {
      field: 'name',
      headerName: 'units.name',
      headerNameEn: 'units.name',
      type: 'string',
      required: true,
      example: 'كيلو',
      exampleEn: 'Kilogram',
      validate: (value) => {
        if (!value || value.length < 1) return 'اسم الوحدة مطلوب';
        if (value.length > 50) return 'اسم الوحدة طويل جداً';
        return null;
      }
    },
    {
      field: 'code',
      headerName: 'units.code',
      headerNameEn: 'units.code',
      type: 'number',
      required: false,
      example: '1',
      exampleEn: '1',
      validate: (value) => {
        if (value && (value < 0 || value > 9999)) return 'كود الوحدة يجب أن يكون بين 0 و 9999';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        const item = data[i];
        
        await unitsApi.add({
          name: item.name
        });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Products Configuration ───── */
export const productsImportExportConfig: ImportExportConfig = {
  moduleName: 'Products',
  moduleNameEn: 'Products',
  fileName: 'products',
  title: 'products.title',
  titleEn: 'products.title',
  columns: [
    {
      field: 'productName',
      headerName: 'products.name',
      headerNameEn: 'products.name',
      type: 'string',
      required: true,
      example: 'قهوة تركية',
      exampleEn: 'Turkish Coffee',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المنتج يجب أن يكون أكثر من حرفين';
        if (value.length > 200) return 'اسم المنتج طويل جداً';
        return null;
      }
    },
    {
      field: 'groupName',
      headerName: 'products.group',
      headerNameEn: 'products.group',
      type: 'string',
      required: true,
      example: 'مشروبات ساخنة',
      exampleEn: 'Hot Beverages',
      validate: (value) => {
        if (!value) return 'اسم المجموعة مطلوب';
        return null;
      }
    },
    {
      field: 'productType',
      headerName: 'products.type',
      headerNameEn: 'products.type',
      type: 'string',
      required: true,
      example: 'POS',
      exampleEn: 'POS',
      validate: (value) => {
        if (!['POS', 'Material'].includes(value)) return 'نوع المنتج يجب أن يكون POS أو Material';
        return null;
      }
    },
    {
      field: 'description',
      headerName: 'products.description',
      headerNameEn: 'products.description',
      type: 'string',
      required: false,
      example: 'قهوة تركية أصلية',
      exampleEn: 'Original Turkish Coffee'
    },
    {
      field: 'reorderLevel',
      headerName: 'products.reorderLevel',
      headerNameEn: 'products.reorderLevel',
      type: 'number',
      required: false,
      example: '10',
      exampleEn: '10',
      validate: (value) => {
        if (value && value < 0) return 'مستوى إعادة الطلب لا يمكن أن يكون سالب';
        return null;
      }
    },
    {
      field: 'cost',
      headerName: 'products.cost',
      headerNameEn: 'products.cost',
      type: 'number',
      required: false,
      example: '15.50',
      exampleEn: '15.50',
      validate: (value) => {
        if (value && value < 0) return 'التكلفة لا يمكن أن تكون سالبة';
        return null;
      }
    },
    {
      field: 'expirationDays',
      headerName: 'products.expirationDays',
      headerNameEn: 'products.expirationDays',
      type: 'number',
      required: false,
      example: '180',
      exampleEn: '180',
      validate: (value) => {
        if (value && (value < 1 || value > 3650)) return 'أيام انتهاء الصلاحية يجب أن تكون بين 1 و 3650';
        return null;
      }
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    const allGroups = await groupsApi.getAll();
    
    for (let i = 0; i < data.length; i++) {
      try {
        const item = data[i];
        
        const group = allGroups.find(g => g.name === item.groupName);
        if (!group) {
          results.errors.push(`الصف ${i + 1}: المجموعة "${item.groupName}" غير موجودة`);
          continue;
        }
        
        await productsApi.add({
          productName: item.productName,
          groupId: group.id,
          productType: item.productType === 'POS' ? 1 : 2,
          description: item.description || '',
          reorderLevel: item.reorderLevel || 0,
          cost: item.cost || 0,
          lastPurePrice: 0,
          expirationDays: item.expirationDays || 180,
          productPrices: [],
          isActive: false
        });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 2000
};

/* ───── POS Screens Configuration ───── */
export const posScreensImportExportConfig: ImportExportConfig = {
  moduleName: 'PosScreens',
  moduleNameEn: 'POS Screens',
  fileName: 'pos_screens',
  title: 'posScreens.title',
  titleEn: 'posScreens.title',
  columns: [
    {
      field: 'screenName',
      headerName: 'posScreens.name',
      headerNameEn: 'posScreens.name',
      type: 'string',
      required: true,
      example: 'المشروبات الساخنة',
      exampleEn: 'Hot Beverages',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم الشاشة يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم الشاشة طويل جداً';
        return null;
      }
    },
    {
      field: 'parentScreenName',
      headerName: 'posScreens.parentScreen',
      headerNameEn: 'posScreens.parentScreen',
      type: 'string',
      required: false,
      example: 'المشروبات',
      exampleEn: 'Beverages'
    },
    {
      field: 'displayOrder',
      headerName: 'posScreens.displayOrder',
      headerNameEn: 'posScreens.displayOrder',
      type: 'number',
      required: false,
      example: '1',
      exampleEn: '1',
      validate: (value) => {
        if (value && (value < 1 || value > 999)) return 'ترتيب العرض يجب أن يكون بين 1 و 999';
        return null;
      }
    },
    {
      field: 'colorHex',
      headerName: 'posScreens.color',
      headerNameEn: 'posScreens.color',
      type: 'string',
      required: false,
      example: '#FF5733',
      exampleEn: '#FF5733',
      validate: (value) => {
        if (value && !/^#[0-9A-F]{6}$/i.test(value)) return 'لون غير صحيح (استخدم #RRGGBB)';
        return null;
      }
    },
    {
      field: 'icon',
      headerName: 'posScreens.icon',
      headerNameEn: 'posScreens.icon',
      type: 'string',
      required: false,
      example: '☕',
      exampleEn: '☕'
    },
    {
      field: 'isVisible',
      headerName: 'posScreens.visibility',
      headerNameEn: 'posScreens.visibility',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    const allScreens = await posScreensApi.getAll();
    const flatScreens = flattenScreens(allScreens);
    
    for (let i = 0; i < data.length; i++) {
      try {
        const item = data[i];
        
        let parentId = null;
        if (item.parentScreenName) {
          const parentScreen = flatScreens.find(s => s.name === item.parentScreenName);
          if (parentScreen) {
            parentId = parentScreen.id;
          } else {
            results.errors.push(`الصف ${i + 1}: الشاشة الأب "${item.parentScreenName}" غير موجودة`);
            continue;
          }
        }
        
        await posScreensApi.add({
          screenName: item.screenName,
          ParentScreenId: parentId,
          isVisible: item.isVisible !== false,
          displayOrder: item.displayOrder || 1,
          colorHex: item.colorHex || '#2196F3',
          icon: item.icon || '📱'
        });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Suppliers Configuration ───── */
export const suppliersImportExportConfig: ImportExportConfig = {
  moduleName: 'Suppliers',
  moduleNameEn: 'Suppliers',
  fileName: 'suppliers',
  title: 'suppliers.title',
  titleEn: 'suppliers.title',
  columns: [
    {
      field: 'name',
      headerName: 'suppliers.name',
      headerNameEn: 'suppliers.name',
      type: 'string',
      required: true,
      example: 'شركة التوريدات المتقدمة',
      exampleEn: 'Advanced Supply Company',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المورد يجب أن يكون أكثر من حرفين';
        if (value.length > 200) return 'اسم المورد طويل جداً';
        return null;
      }
    },
    {
      field: 'phone',
      headerName: 'suppliers.phone',
      headerNameEn: 'suppliers.phone',
      type: 'string',
      required: false,
      example: '01234567890',
      exampleEn: '+1234567890',
      validate: (value) => {
        if (value && !/^[0-9+\-\s()]+$/.test(value)) return 'رقم هاتف غير صحيح';
        return null;
      }
    },
    {
      field: 'address',
      headerName: 'suppliers.address',
      headerNameEn: 'suppliers.address',
      type: 'string',
      required: false,
      example: 'القاهرة - مصر الجديدة',
      exampleEn: 'Cairo - Heliopolis'
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        // Implementation here
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 1000
};

/* ───── Warehouses Configuration ───── */
export const warehousesImportExportConfig: ImportExportConfig = {
  moduleName: 'Warehouses',
  moduleNameEn: 'Warehouses',
  fileName: 'warehouses',
  title: 'warehouses.title',
  titleEn: 'warehouses.title',
  columns: [
    {
      field: 'name',
      headerName: 'warehouses.name',
      headerNameEn: 'warehouses.name',
      type: 'string',
      required: true,
      example: 'مخزن الفرع الرئيسي',
      exampleEn: 'Main Branch Warehouse',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المخزن يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم المخزن طويل جداً';
        return null;
      }
    },
    {
      field: 'address',
      headerName: 'warehouses.address',
      headerNameEn: 'warehouses.address',
      type: 'string',
      required: false,
      example: 'القاهرة - مدينة نصر',
      exampleEn: 'Cairo - Nasr City'
    },
    {
      field: 'phone',
      headerName: 'warehouses.phone',
      headerNameEn: 'warehouses.phone',
      type: 'string',
      required: false,
      example: '01234567890',
      exampleEn: '+1234567890',
      validate: (value) => {
        if (value && !/^[0-9+\-\s()]+$/.test(value)) return 'رقم هاتف غير صحيح';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        // Implementation here
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Accounts Configuration ───── */
export const accountsImportExportConfig: ImportExportConfig = {
  moduleName: 'Accounts',
  moduleNameEn: 'Accounts',
  fileName: 'accounts',
  title: 'accounts.title',
  titleEn: 'accounts.title',
  columns: [
    {
      field: 'name',
      headerName: 'accounts.name',
      headerNameEn: 'accounts.name',
      type: 'string',
      required: true,
      example: 'حساب البنك الأهلي',
      exampleEn: 'National Bank Account',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم الحساب يجب أن يكون أكثر من حرفين';
        if (value.length > 200) return 'اسم الحساب طويل جداً';
        return null;
      }
    },
    {
      field: 'type',
      headerName: 'accounts.type',
      headerNameEn: 'accounts.type',
      type: 'string',
      required: false,
      example: 'بنك',
      exampleEn: 'Bank'
    },
    {
      field: 'accountNumber',
      headerName: 'accounts.accountNumber',
      headerNameEn: 'accounts.accountNumber',
      type: 'string',
      required: false,
      example: '123456789',
      exampleEn: '123456789',
      validate: (value) => {
        if (value && value.length > 50) return 'رقم الحساب طويل جداً';
        return null;
      }
    },
    {
      field: 'collectionFeePercent',
      headerName: 'accounts.collectionFeePercent',
      headerNameEn: 'accounts.collectionFeePercent',
      type: 'number',
      required: false,
      example: '2.5',
      exampleEn: '2.5',
      validate: (value) => {
        if (value && (value < 0 || value > 100)) return 'نسبة رسوم التحصيل يجب أن تكون بين 0 و 100';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        // Implementation here
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Safes Configuration ───── */
export const safesImportExportConfig: ImportExportConfig = {
  moduleName: 'Safes',
  moduleNameEn: 'Safes',
  fileName: 'safes',
  title: 'safes.title',
  titleEn: 'safes.title',
  columns: [
    {
      field: 'name',
      headerName: 'safes.name',
      headerNameEn: 'safes.name',
      type: 'string',
      required: true,
      example: 'خزينة الفرع الرئيسي',
      exampleEn: 'Main Branch Safe',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم الخزينة يجب أن يكون أكثر من حرفين';
        if (value.length > 200) return 'اسم الخزينة طويل جداً';
        return null;
      }
    },
    {
      field: 'type',
      headerName: 'safes.type',
      headerNameEn: 'safes.type',
      type: 'string',
      required: false,
      example: 'خزينة رئيسية',
      exampleEn: 'Main Safe'
    },
    {
      field: 'accountNumber',
      headerName: 'safes.accountNumber',
      headerNameEn: 'safes.accountNumber',
      type: 'string',
      required: false,
      example: '123456789',
      exampleEn: '123456789'
    },
    {
      field: 'collectionFeePercent',
      headerName: 'safes.collectionFeePercent',
      headerNameEn: 'safes.collectionFeePercent',
      type: 'number',
      required: false,
      example: '1.5',
      exampleEn: '1.5',
      validate: (value) => {
        if (value && (value < 0 || value > 100)) return 'نسبة رسوم التحصيل يجب أن تكون بين 0 و 100';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        // Implementation here
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── POS Payment Methods Configuration ───── */
export const posPaymentMethodsImportExportConfig: ImportExportConfig = {
  moduleName: 'PosPaymentMethods',
  moduleNameEn: 'POS Payment Methods',
  fileName: 'pos_payment_methods',
  title: 'posPaymentMethods.title',
  titleEn: 'posPaymentMethods.title',
  columns: [
    {
      field: 'name',
      headerName: 'posPaymentMethods.name',
      headerNameEn: 'posPaymentMethods.name',
      type: 'string',
      required: true,
      example: 'كاش',
      exampleEn: 'Cash',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم طريقة الدفع يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم طريقة الدفع طويل جداً';
        return null;
      }
    },
    {
      field: 'safeOrAccountName',
      headerName: 'posPaymentMethods.safeOrAccount',
      headerNameEn: 'posPaymentMethods.safeOrAccount',
      type: 'string',
      required: false,
      example: 'خزينة الفرع الرئيسي',
      exampleEn: 'Main Branch Safe'
    },
    {
      field: 'isActive',
      headerName: 'status.active',
      headerNameEn: 'status.active',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        // Implementation here
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 200
};

// Helper function
const flattenScreens = (screens: any[]): any[] => {
  const result: any[] = [];
  
  const flatten = (screens: any[]) => {
    screens.forEach(screen => {
      result.push(screen);
      if (screen.children && screen.children.length > 0) {
        flatten(screen.children);
      }
    });
  };
  
  flatten(screens);
  return result;
};


/* ───── Inventory Adjustments Configuration ───── */
export const inventoryAdjustmentsImportExportConfig: ImportExportConfig = {
  moduleName: 'InventoryAdjustments',
  moduleNameEn: 'Inventory Adjustments',
  fileName: 'inventory_adjustments',
  title: 'adjustments.list.title',
  titleEn: 'adjustments.list.title',
  columns: [
    {
      field: 'warehouseName',
      headerName: 'adjustments.table.warehouse',
      headerNameEn: 'adjustments.table.warehouse',
      type: 'string',
      required: true,
      example: 'المخزن الرئيسي',
      exampleEn: 'Main Warehouse'
    },
    {
      field: 'adjustmentType',
      headerName: 'adjustments.table.type',
      headerNameEn: 'adjustments.table.type',
      type: 'string',
      required: true,
      example: 'جديد',
      exampleEn: 'New',
      validate: (value) => {
        const validTypes = ['جديد', 'رصيد افتتاحي', 'تسوية يدوية', 'New', 'Opening Balance', 'Manual Adjustment'];
        if (value && !validTypes.includes(value)) {
          return 'نوع التسوية غير صحيح';
        }
        return null;
      }
    },
    {
      field: 'adjustmentDate',
      headerName: 'adjustments.table.date',
      headerNameEn: 'adjustments.table.date',
      type: 'date',
      required: true,
      example: '2025-01-01',
      exampleEn: '2025-01-01'
    },
    {
      field: 'referenceNumber',
      headerName: 'adjustments.table.referenceNumber',
      headerNameEn: 'adjustments.table.referenceNumber',
      type: 'string',
      required: false,
      example: 'REF-001',
      exampleEn: 'REF-001'
    },
    {
      field: 'reason',
      headerName: 'adjustments.table.reason',
      headerNameEn: 'adjustments.table.reason',
      type: 'string',
      required: false,
      example: 'تسوية المخزون',
      exampleEn: 'Inventory Adjustment'
    },
    {
      field: 'totalItems',
      headerName: 'adjustments.table.totalItems',
      headerNameEn: 'adjustments.table.totalItems',
      type: 'number',
      required: false,
      example: '5',
      exampleEn: '5'
    },
    {
      field: 'totalDifference',
      headerName: 'adjustments.table.totalDifference',
      headerNameEn: 'adjustments.table.totalDifference',
      type: 'number',
      required: false,
      example: '51.00',
      exampleEn: '51.00'
    },
    {
      field: 'status',
      headerName: 'adjustments.table.status',
      headerNameEn: 'adjustments.table.status',
      type: 'string',
      required: false,
      example: 'محفوظ',
      exampleEn: 'Saved'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // التحقق من وجود المخزن
        // const warehouses = await warehousesApi.getAll();
        // const warehouse = warehouses.find(w => w.name === item.warehouseName);
        // if (!warehouse) {
        //   results.errors.push(`الصف ${i + 1}: المخزن "${item.warehouseName}" غير موجود`);
        //   continue;
        // }
        
        // تحويل نوع التسوية
        
        // تحويل الحالة
        
        // await adjustmentsListApi.add({
        //   warehouseId: warehouse.id,
        //   adjustmentType: adjustmentType,
        //   adjustmentDate: item.adjustmentDate,
        //   referenceNumber: item.referenceNumber || '',
        //   reason: item.reason || '',
        //   totalItems: item.totalItems || 0,
        //   totalDifference: item.totalDifference || 0,
        //   status: status
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 1000
};



/* ───── Users Configuration ───── */
export const usersImportExportConfig: ImportExportConfig = {
  moduleName: 'users.title',
  moduleNameEn: 'users.title',
  fileName: 'users',
  title: 'users.title',
  titleEn: 'users.title',
  columns: [
    {
      field: 'userName',
      headerName: 'users.table.userName',
      headerNameEn: 'users.table.userName',
      type: 'string',
      required: true,
      example: 'أحمد محمد',
      exampleEn: 'Ahmed Mohamed',
      validate: (value) => {
        if (!value || value.length < 2) return 'users.validation.userNameTooShort';
        if (value.length > 100) return 'users.validation.userNameTooLong';
        return null;
      }
    },
    {
      field: 'phoneNo',
      headerName: 'users.table.phoneNumber',
      headerNameEn: 'users.table.phoneNumber',
      type: 'string',
      required: true,
      example: '01234567890',
      exampleEn: '01234567890',
      validate: (value) => {
        if (!value || !/^01[0-9]{9}$/.test(value)) return 'users.validation.invalidPhone';
        return null;
      }
    },
    {
      field: 'email',
      headerName: 'users.table.email',
      headerNameEn: 'users.table.email',
      type: 'string',
      required: false,
      example: 'user@company.com',
      exampleEn: 'user@company.com',
      validate: (value) => {
        if (value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) return 'users.validation.invalidEmail';
        return null;
      }
    },
    {
      field: 'password',
      headerName: 'users.form.password',
      headerNameEn: 'users.form.password',
      type: 'string',
      required: true,
      example: '123456',
      exampleEn: '123456',
      validate: (value) => {
        if (!value || value.length < 6) return 'users.validation.passwordTooShort';
        return null;
      }
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        const item = data[i];
        
        const success = await register(item.userName, item.phoneNo, item.password);
        
        if (success) {
          results.success++;
        } else {
          results.errors.push(`import.rowError ${i + 1}: users.errors.addFailed`);
        }
      } catch (error: any) {
        results.errors.push(`import.rowError ${i + 1}: ${error.message || 'import.addError'}`);
      }
    }
    
    return results;
  },
  maxRows: 100
};


/* ───── Delivery Zones Configuration ───── */
export const deliveryZonesImportExportConfig: ImportExportConfig = {
  moduleName: 'deliveryZones.title',
  moduleNameEn: 'Delivery Zones',
  fileName: 'delivery_zones',
  title: 'deliveryZones.title',
  titleEn: 'Delivery Zones',
  columns: [
    {
      field: 'name',
      headerName: 'deliveryZones.form.name',
      headerNameEn: 'Zone Name',
      type: 'string',
      required: true,
      example: 'منطقة الدقي',
      exampleEn: 'Dokki Area',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المنطقة يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم المنطقة طويل جداً';
        return null;
      }
    },
    {
      field: 'deliveryCharge',
      headerName: 'deliveryZones.form.deliveryCharge',
      headerNameEn: 'Delivery Charge',
      type: 'number',
      required: true,
      example: '20.00',
      exampleEn: '20.00',
      validate: (value) => {
        if (value < 0) return 'رسوم التوصيل لا يمكن أن تكون سالبة';
        return null;
      }
    },
    {
      field: 'defaultBonus',
      headerName: 'deliveryZones.form.defaultBonus',
      headerNameEn: 'Default Bonus',
      type: 'number',
      required: true,
      example: '10.00',
      exampleEn: '10.00',
      validate: (value) => {
        if (value < 0) return 'المكافأة الافتراضية لا يمكن أن تكون سالبة';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // await deliveryZonesApi.add({
        //   name: item.name,
        //   deliveryCharge: Number(item.deliveryCharge),
        //   defaultBonus: Number(item.defaultBonus)
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Delivery Agents Configuration ───── */
export const deliveryAgentsImportExportConfig: ImportExportConfig = {
  moduleName: 'deliveryAgents.title',
  moduleNameEn: 'Delivery Agents',
  fileName: 'delivery_agents',
  title: 'deliveryAgents.title',
  titleEn: 'Delivery Agents',
  columns: [
    {
      field: 'name',
      headerName: 'deliveryAgents.form.name',
      headerNameEn: 'Agent Name',
      type: 'string',
      required: true,
      example: 'محمد حسن',
      exampleEn: 'Mohamed Hassan',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم المندوب يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم المندوب طويل جداً';
        return null;
      }
    },
    {
      field: 'phone',
      headerName: 'deliveryAgents.form.phone',
      headerNameEn: 'Phone Number',
      type: 'string',
      required: true,
      example: '01012345678',
      exampleEn: '01012345678',
      validate: (value) => {
        if (!value || !/^01[0-9]{9}$/.test(value)) return 'رقم هاتف غير صحيح';
        return null;
      }
    },
    {
      field: 'branchName',
      headerName: 'deliveryAgents.form.branch',
      headerNameEn: 'Branch',
      type: 'string',
      required: true,
      example: 'الفرع الرئيسي',
      exampleEn: 'Main Branch',
      validate: (value) => {
        if (!value) return 'اسم الفرع مطلوب';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // const branch = branches.find(b => b.name === item.branchName);
        // if (!branch) {
        //   results.errors.push(`الصف ${i + 1}: الفرع "${item.branchName}" غير موجود`);
        //   continue;
        // }
        
        // await deliveryAgentsApi.add({
        //   name: item.name,
        //   phone: item.phone,
        //   branchId: branch.id
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Table Sections Configuration ───── */
export const tableSectionsImportExportConfig: ImportExportConfig = {
  moduleName: 'tableSections.title',
  moduleNameEn: 'Table Sections',
  fileName: 'table_sections',
  title: 'tableSections.title',
  titleEn: 'Table Sections',
  columns: [
    {
      field: 'name',
      headerName: 'tableSections.form.name',
      headerNameEn: 'Section Name',
      type: 'string',
      required: true,
      example: 'صالة VIP',
      exampleEn: 'VIP Hall',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم القسم يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم القسم طويل جداً';
        return null;
      }
    },
    {
      field: 'serviceCharge',
      headerName: 'tableSections.form.serviceCharge',
      headerNameEn: 'Service Charge',
      type: 'number',
      required: true,
      example: '10.00',
      exampleEn: '10.00',
      validate: (value) => {
        if (value < 0) return 'رسوم الخدمة لا يمكن أن تكون سالبة';
        return null;
      }
    },
    {
      field: 'tablesCount',
      headerName: 'tableSections.form.tablesCount',
      headerNameEn: 'Tables Count',
      type: 'number',
      required: false,
      example: '5',
      exampleEn: '5',
      validate: (value) => {
        if (value && value < 0) return 'عدد الطاولات لا يمكن أن يكون سالب';
        return null;
      }
    },
    {
      field: 'totalCapacity',
      headerName: 'tableSections.form.totalCapacity',
      headerNameEn: 'Total Capacity',
      type: 'number',
      required: false,
      example: '20',
      exampleEn: '20'
    },
    {
      field: 'branchName',
      headerName: 'tableSections.form.branch',
      headerNameEn: 'Branch',
      type: 'string',
      required: false,
      example: 'الفرع الرئيسي',
      exampleEn: 'Main Branch'
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // await tableSectionsApi.add({
        //   name: item.name,
        //   serviceCharge: Number(item.serviceCharge),
        //   tables: []
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 300
};

/* ───── Hall Captains Configuration ───── */
export const hallCaptainsImportExportConfig: ImportExportConfig = {
  moduleName: 'hallCaptains.title',
  moduleNameEn: 'Hall Captains',
  fileName: 'hall_captains',
  title: 'hallCaptains.title',
  titleEn: 'Hall Captains',
  columns: [
    {
      field: 'name',
      headerName: 'hallCaptains.form.name',
      headerNameEn: 'Captain Name',
      type: 'string',
      required: true,
      example: 'أحمد عبد السلام',
      exampleEn: 'Ahmed Abdelsalam',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم الكابتن يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم الكابتن طويل جداً';
        return null;
      }
    },
    {
      field: 'phone',
      headerName: 'hallCaptains.form.phone',
      headerNameEn: 'Phone Number',
      type: 'string',
      required: true,
      example: '01012345678',
      exampleEn: '01012345678',
      validate: (value) => {
        if (!value || !/^01[0-9]{9}$/.test(value)) return 'رقم هاتف غير صحيح';
        return null;
      }
    },
    {
      field: 'notes',
      headerName: 'hallCaptains.form.notes',
      headerNameEn: 'Notes',
      type: 'string',
      required: false,
      example: 'كابتن رئيسي',
      exampleEn: 'Head Captain'
    },
    {
      field: 'branchName',
      headerName: 'hallCaptains.form.branch',
      headerNameEn: 'Branch',
      type: 'string',
      required: true,
      example: 'الفرع الرئيسي',
      exampleEn: 'Main Branch',
      validate: (value) => {
        if (!value) return 'اسم الفرع مطلوب';
        return null;
      }
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // const branch = branches.find(b => b.name === item.branchName);
        // if (!branch) {
        //   results.errors.push(`الصف ${i + 1}: الفرع "${item.branchName}" غير موجود`);
        //   continue;
        // }
        
        // await hallCaptainsApi.add({
        //   name: item.name,
        //   phone: item.phone,
        //   notes: item.notes,
        //   branchId: branch.id,
        //   isActive: true
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};

/* ───── Customers Configuration ───── */
export const customersImportExportConfig: ImportExportConfig = {
  moduleName: 'customers.title',
  moduleNameEn: 'Customers',
  fileName: 'customers',
  title: 'customers.title',
  titleEn: 'Customers',
  columns: [
    {
      field: 'name',
      headerName: 'customers.form.name',
      headerNameEn: 'Customer Name',
      type: 'string',
      required: true,
      example: 'عميل تجريبي',
      exampleEn: 'Test Customer',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم العميل يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم العميل طويل جداً';
        return null;
      }
    },
    {
      field: 'phone1',
      headerName: 'customers.form.phone1',
      headerNameEn: 'Primary Phone',
      type: 'string',
      required: true,
      example: '01012345678',
      exampleEn: '01012345678',
      validate: (value) => {
        if (!value || !/^01[0-9]{9}$/.test(value)) return 'رقم الهاتف الأساسي غير صحيح';
        return null;
      }
    },
    {
      field: 'phone2',
      headerName: 'customers.form.phone2',
      headerNameEn: 'Secondary Phone',
      type: 'string',
      required: false,
      example: '01087654321',
      exampleEn: '01087654321'
    },
    {
      field: 'phone3',
      headerName: 'customers.form.phone3',
      headerNameEn: 'Third Phone',
      type: 'string',
      required: false,
      example: '01098765432',
      exampleEn: '01098765432'
    },
    {
      field: 'phone4',
      headerName: 'customers.form.phone4',
      headerNameEn: 'Fourth Phone',
      type: 'string',
      required: false,
      example: '01054321098',
      exampleEn: '01054321098'
    },
    {
      field: 'isVIP',
      headerName: 'customers.form.isVIP',
      headerNameEn: 'VIP Customer',
      type: 'boolean',
      required: false,
      example: 'لا',
      exampleEn: 'No'
    },
    {
      field: 'isBlocked',
      headerName: 'customers.form.isBlocked',
      headerNameEn: 'Blocked',
      type: 'boolean',
      required: false,
      example: 'لا',
      exampleEn: 'No'
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    },
    {
      field: 'addressesCount',
      headerName: 'customers.form.addressesCount',
      headerNameEn: 'Addresses Count',
      type: 'number',
      required: false,
      example: '2',
      exampleEn: '2'
    },
    {
      field: 'primaryAddress',
      headerName: 'customers.form.primaryAddress',
      headerNameEn: 'Primary Address',
      type: 'string',
      required: false,
      example: 'شارع الثورة',
      exampleEn: 'Revolution Street'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // await customersApi.add({
        //   name: item.name,
        //   phone1: item.phone1,
        //   phone2: item.phone2 || null,
        //   phone3: item.phone3 || null,
        //   phone4: item.phone4 || null,
        //   isVIP: Boolean(item.isVIP),
        //   isBlocked: Boolean(item.isBlocked),
        //   isActive: Boolean(item.isActive),
        //   addresses: []
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 1000
};

/* ───── Offers Configuration ───── */
export const offersImportExportConfig: ImportExportConfig = {
  moduleName: 'offers.title',
  moduleNameEn: 'Offers',
  fileName: 'offers',
  title: 'offers.title',
  titleEn: 'Offers',
  columns: [
    {
      field: 'name',
      headerName: 'offers.form.name',
      headerNameEn: 'Offer Name',
      type: 'string',
      required: true,
      example: 'وجبة فاميلي',
      exampleEn: 'Family Meal',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم العرض يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم العرض طويل جداً';
        return null;
      }
    },
    {
      field: 'priceType',
      headerName: 'offers.form.priceType',
      headerNameEn: 'Price Type',
      type: 'string',
      required: true,
      example: 'Fixed',
      exampleEn: 'Fixed',
      validate: (value) => {
        if (!['Fixed', 'Dynamic'].includes(value)) return 'نوع السعر يجب أن يكون Fixed أو Dynamic';
        return null;
      }
    },
    {
      field: 'fixedPrice',
      headerName: 'offers.form.fixedPrice',
      headerNameEn: 'Fixed Price',
      type: 'number',
      required: false,
      example: '99.00',
      exampleEn: '99.00',
      validate: (value) => {
        if (value && value < 0) return 'السعر الثابت لا يمكن أن يكون سالب';
        return null;
      }
    },
    {
      field: 'startDate',
      headerName: 'offers.form.startDate',
      headerNameEn: 'Start Date',
      type: 'date',
      required: true,
      example: '2025-07-01',
      exampleEn: '2025-07-01'
    },
    {
      field: 'endDate',
      headerName: 'offers.form.endDate',
      headerNameEn: 'End Date',
      type: 'date',
      required: true,
      example: '2025-07-31',
      exampleEn: '2025-07-31'
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // await offersApi.add({
        //   name: item.name,
        //   priceType: item.priceType,
        //   fixedPrice: Number(item.fixedPrice) || 0,
        //   startDate: new Date(item.startDate).toISOString(),
        //   endDate: new Date(item.endDate).toISOString(),
        //   orderTypeId: '1',
        //   isActive: Boolean(item.isActive),
        //   offerGroups: [],
        //   offerItems: []
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};
/* ───── Delivery Companies Configuration ───── */
export const deliveryCompaniesImportExportConfig: ImportExportConfig = {
  moduleName: 'deliveryCompanies.title',
  moduleNameEn: 'Delivery Companies',
  fileName: 'delivery_companies',
  title: 'deliveryCompanies.title',
  titleEn: 'Delivery Companies',
  columns: [
    {
      field: 'name',
      headerName: 'deliveryCompanies.form.name',
      headerNameEn: 'Company Name',
      type: 'string',
      required: true,
      example: 'شركة توصيل المستقبل',
      exampleEn: 'Future Delivery Company',
      validate: (value) => {
        if (!value || value.length < 2) return 'اسم الشركة يجب أن يكون أكثر من حرفين';
        if (value.length > 100) return 'اسم الشركة طويل جداً';
        return null;
      }
    },
    {
      field: 'paymentType',
      headerName: 'deliveryCompanies.form.paymentType',
      headerNameEn: 'Payment Type',
      type: 'string',
      required: true,
      example: 'Cash',
      exampleEn: 'Cash',
      validate: (value) => {
        if (!['Cash', 'Visa'].includes(value)) return 'نوع الدفع يجب أن يكون Cash أو Visa';
        return null;
      }
    },
    {
      field: 'companySharePercentage',
      headerName: 'deliveryCompanies.form.companySharePercentage',
      headerNameEn: 'Company Share %',
      type: 'number',
      required: true,
      example: '20.00',
      exampleEn: '20.00',
      validate: (value) => {
        if (value < 0 || value > 100) return 'نسبة الشركة يجب أن تكون بين 0 و 100';
        return null;
      }
    },
    {
      field: 'phone',
      headerName: 'deliveryCompanies.form.phone',
      headerNameEn: 'Phone Number',
      type: 'string',
      required: true,
      example: '01012345678',
      exampleEn: '01012345678',
      validate: (value) => {
        if (!value || !/^01[0-9]{9}$/.test(value)) return 'رقم هاتف غير صحيح';
        return null;
      }
    },
    {
      field: 'email',
      headerName: 'deliveryCompanies.form.email',
      headerNameEn: 'Email',
      type: 'string',
      required: true,
      example: 'info@company.com',
      exampleEn: 'info@company.com',
      validate: (value) => {
        if (!value || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) return 'بريد إلكتروني غير صحيح';
        return null;
      }
    },
    {
      field: 'contactPerson',
      headerName: 'deliveryCompanies.form.contactPerson',
      headerNameEn: 'Contact Person',
      type: 'string',
      required: true,
      example: 'أحمد علي',
      exampleEn: 'Ahmed Ali'
    },
    {
      field: 'isActive',
      headerName: 'common.status',
      headerNameEn: 'Status',
      type: 'boolean',
      required: false,
      example: 'نعم',
      exampleEn: 'Yes'
    }
  ],
  onImport: async (data) => {
    const results = { success: 0, errors: [] as string[] };
    
    for (let i = 0; i < data.length; i++) {
      try {
        
        // يمكن إضافة API call هنا لاحقاً
        // await deliveryCompaniesApi.add({
        //   name: item.name,
        //   paymentType: item.paymentType,
        //   companySharePercentage: Number(item.companySharePercentage),
        //   visaCollectionCommissionPercentage: 0,
        //   taxPercentage: 0,
        //   phone: item.phone,
        //   email: item.email,
        //   contactPerson: item.contactPerson,
        //   notes: '',
        //   isActive: Boolean(item.isActive)
        // });
        
        results.success++;
      } catch (error: any) {
        results.errors.push(`الصف ${i + 1}: ${error.message || 'خطأ في الإضافة'}`);
      }
    }
    
    return results;
  },
  maxRows: 500
};
===== src/Pages/components/CopyPasteButtons.tsx =====
// File: src/components/CopyPasteButtons.tsx
import React from 'react';
import { Button, Stack, Tooltip } from '@mui/material';
import { 
  IconCopy, 
  IconClipboard, 
  IconClipboardCheck, 
  IconTrashX 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onCopy: () => void;
  onPaste: () => void;
  onClear: () => void;
  hasCopiedData: boolean;
  canCopy?: boolean;
  size?: 'small' | 'medium' | 'large';
  variant?: 'contained' | 'outlined' | 'text';
  showLabels?: boolean;
  direction?: 'row' | 'column';
  spacing?: number;
}

const CopyPasteButtons: React.FC<Props> = ({
  onCopy,
  onPaste,
  onClear,
  hasCopiedData,
  canCopy = true,
  size = 'small',
  variant = 'outlined',
  showLabels = true,
  direction = 'row',
  spacing = 1
}) => {
  const { t } = useTranslation();

  return (
    <Stack direction={direction} spacing={spacing}>
      <Tooltip title={t('common.copy')}>
        <span>
          <Button
            variant={variant}
            size={size}
            startIcon={<IconCopy size={16} />}
            onClick={onCopy}
            disabled={!canCopy}
            sx={{ minWidth: showLabels ? 80 : 'auto' }}
          >
            {showLabels ? t('common.copy') : ''}
          </Button>
        </span>
      </Tooltip>
      
      <Tooltip title={t('common.paste')}>
        <span>
          <Button
            variant={variant}
            size={size}
            startIcon={hasCopiedData ? <IconClipboardCheck size={16} /> : <IconClipboard size={16} />}
            onClick={onPaste}
            disabled={!hasCopiedData}
            color={hasCopiedData ? 'success' : 'inherit'}
            sx={{ minWidth: showLabels ? 80 : 'auto' }}
          >
            {showLabels ? t('common.paste') : ''}
          </Button>
        </span>
      </Tooltip>
      
      {hasCopiedData && (
        <Tooltip title={t('common.clearCopy')}>
          <span>
            <Button
              variant={variant}
              size={size}
              startIcon={<IconTrashX size={16} />}
              onClick={onClear}
              color="error"
              sx={{ minWidth: showLabels ? 80 : 'auto' }}
            >
              {showLabels ? t('common.clear') : ''}
            </Button>
          </span>
        </Tooltip>
      )}
    </Stack>
  );
};

export default CopyPasteButtons;

===== src/Pages/components/ExportButtons.tsx =====
// File: src/components/ExportButtons.tsx
import React from 'react';
import {
  Button,
  Stack,
  Box,
  Typography,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  IconFileTypePdf,
  IconFileTypeXls,
  IconDownload
} from '@tabler/icons-react';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

// Cairo Base64 modules (generated by your convert-font script)
import { cairoRegularBase64 } from 'src/assets/fonts/Cairo-Regular';
import { cairoBoldBase64    } from 'src/assets/fonts/Cairo-Bold';

import arabicReshaper from 'arabic-reshaper';
import bidiFactory from 'bidi-js';
const bidi = bidiFactory();

interface Column {
  field: string;
  headerName: string;
  width?: number;
  type?: 'string' | 'number' | 'date' | 'boolean';
  format?: (value: any) => string;
}

interface ExportButtonsProps {
  data: any[];
  columns: Column[];
  fileName: string;
  title?: string;
  disabled?: boolean;
  loading?: boolean;
  compact?: boolean;
}

const ExportButtons: React.FC<ExportButtonsProps> = ({
  data,
  columns,
  fileName,
  title,
  disabled = false,
  loading = false,
  compact = false
}) => {
  const { t } = useTranslation();
  const customizer = useSelector((state: AppState) => state.customizer);
  const isRTL = customizer.activeDir === 'rtl';

  const getNested = (obj: any, path: string) =>
    path.split('.').reduce((o, k) => (o && o[k] != null ? o[k] : ''), obj);

  // Prepare rows for Excel/PDF
  const prepareRows = () =>
    data.map(row => {
      const r: Record<string, any> = {};
      columns.forEach(col => {
        let v = getNested(row, col.field);
        if (col.format && v != null) {
          v = col.format(v);
        } else {
          switch (col.type) {
            case 'number':
              v = typeof v === 'number' ? v.toFixed(2) : v || '0.00';
              break;
            case 'date':
              v = v ? new Date(v).toLocaleDateString() : '';
              break;
            case 'boolean':
              v = v ? t('common.yes') : t('common.no');
              break;
            default:
              v = v || '';
          }
        }
        r[col.headerName] = v;
      });
      return r;
    });

  const exportPDF = () => {
    try {
      const doc = new jsPDF({
        orientation: columns.length > 6 ? 'landscape' : 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // clean out any non-base64 chars
      const reg64  = cairoRegularBase64.replace(/[^A-Za-z0-9+/=]/g, '');
      const bold64 = cairoBoldBase64   .replace(/[^A-Za-z0-9+/=]/g, '');

      // register Cairo fonts
      doc.addFileToVFS('Cairo-Regular.ttf', reg64);
      doc.addFont('Cairo-Regular.ttf', 'Cairo', 'normal');
      doc.addFileToVFS('Cairo-Bold.ttf', bold64);
      doc.addFont('Cairo-Bold.ttf',    'Cairo', 'bold');

      // helper: reshape + bidi
      const shape = (txt: string) =>
        isRTL ? bidi(arabicReshaper.reshape(txt)) : txt;

      // title
      if (title) {
        doc.setFont('Cairo', 'bold');
        doc.setFontSize(16);
        const pw = doc.internal.pageSize.getWidth();
        const x  = isRTL ? pw - 20 : 20;
        doc.text(shape(title), x, 20, { align: isRTL ? 'right' : 'left' });
      }

      // prepare table head & body
      const head = columns.map(c => shape(c.headerName));
      const body = prepareRows().map(r =>
        columns.map(col => shape(String(r[col.headerName])))
      );

      // set default font for body
      doc.setFont('Cairo', 'normal');

      autoTable(doc, {
        head: [head],
        body,
        startY: title ? 30 : 20,
        styles: {
          font: 'Cairo',
          fontStyle: 'normal',
          fontSize: 9,
          cellPadding: 3
        },
        headStyles: {
          font: 'Cairo',
          fontStyle: 'bold',
          fontSize: 10,
          halign: isRTL ? 'right' : 'left',
          fillColor: [66, 139, 202],
          textColor: [255, 255, 255]
        },
        bodyStyles: {
          halign: isRTL ? 'right' : 'left'
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        margin: { top: 15, right: 15, bottom: 15, left: 15 },
        didDrawPage: () => {
          const date   = new Date().toLocaleDateString();
          const footer = `${t('common.exportedOn')}: ${date}`;
          const ph     = doc.internal.pageSize.getHeight();
          doc.setFont('Cairo', 'normal');
          doc.setFontSize(8);
          doc.text(footer, isRTL ? doc.internal.pageSize.getWidth() - 20 : 20, ph - 10);
        }
      });

      doc.save(`${fileName}_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (err) {
      alert(t('export.errorPdf'));
    }
  };

  const exportExcel = () => {
    try {
      const rows    = prepareRows();
      const headers = columns.map(c => c.headerName);
      const aoa     = [headers, ...rows.map(r => headers.map(h => r[h]))];
      const ws      = XLSX.utils.aoa_to_sheet(aoa);

      // column widths
      ws['!cols'] = columns.map(c => ({ wch: Math.max(c.headerName.length + 5, 15) }));

      // style header row
      const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');
      for (let C = range.s.c; C <= range.e.c; C++) {
        const cell = XLSX.utils.encode_cell({ r: 0, c: C });
        if (ws[cell]) {
          ws[cell].s = {
            font: { bold: true, name: 'Tahoma', color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '428BCA' } },
            alignment: { horizontal: isRTL ? 'right' : 'left', readingOrder: isRTL ? 2 : 1 }
          };
        }
      }

      // style body rows
      for (let R = 1; R <= range.e.r; R++) {
        for (let C = range.s.c; C <= range.e.c; C++) {
          const cell = XLSX.utils.encode_cell({ r: R, c: C });
          if (ws[cell]) {
            ws[cell].s = {
              ...(ws[cell].s || {}),
              font: { name: 'Tahoma' },
              alignment: { horizontal: isRTL ? 'right' : 'left', readingOrder: isRTL ? 2 : 1 }
            };
          }
        }
      }

      // if title provided, insert above headers
      if (title) {
        XLSX.utils.sheet_add_aoa(ws, [[title]], { origin: 'A1' });
        XLSX.utils.sheet_add_aoa(ws, [[]],       { origin: 'A2' });
        const nr = XLSX.utils.decode_range(ws['!ref']!);
        nr.s.r = 2;
        ws['!ref'] = XLSX.utils.encode_range(nr);
      }

      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Data');
      wb.Props = {
        Title:       title || fileName,
        Subject:     t('export.subject'),
        Author:      t('export.author'),
        CreatedDate: new Date()
      };
      XLSX.writeFile(wb, `${fileName}_${new Date().toISOString().split('T')[0]}.xlsx`);
    } catch {
      alert(t('export.errorExcel'));
    }
  };

  if (!data.length) return null;

  if (compact) {
    return (
      <Stack direction="row" spacing={1} alignItems="center">
        <Typography variant="caption" color="text.secondary" sx={{ mr: 1 }}>
          <IconDownload size={16} style={{ marginRight: 4, verticalAlign: 'middle' }} />
          {t('export.title')}:
        </Typography>
        <Tooltip title={t('export.pdf')}>
          <IconButton onClick={exportPDF} disabled={disabled || loading} size="small" color="error"  sx={{ border: '1px solid', borderColor: 'error.main', borderRadius: 1, '&:hover': { backgroundColor: 'error.light', color: 'white' } }}>
            <IconFileTypePdf size={18} />
          </IconButton>
        </Tooltip>
        <Tooltip title={t('export.excel')}>
          <IconButton onClick={exportExcel} disabled={disabled || loading} size="small" color="success" sx={{ border: '1px solid', borderColor: 'success.main', borderRadius: 1, '&:hover': { backgroundColor: 'success.light', color: 'white' } }}>
            <IconFileTypeXls size={18} />
          </IconButton>
        </Tooltip>
        <Typography variant="caption" color="text.secondary">
          ({data.length} {t('export.records')})
        </Typography>
      </Stack>
    );
  }

  return (
    <Box>
      <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2, flexWrap: 'wrap', gap: 1 }}>
        <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <IconDownload size={20} /> {t('export.title')}
        </Typography>
        <Button
          variant="outlined"
          startIcon={<IconFileTypePdf />}
          onClick={exportPDF}
          disabled={disabled || loading || !data.length}
          color="error"
          size="small"
          sx={{ borderWidth: 2, '&:hover': { borderWidth: 2 } }}
        >
          {t('export.pdf')}
        </Button>
        <Button
          variant="outlined"
          startIcon={<IconFileTypeXls />}
          onClick={exportExcel}
          disabled={disabled || loading || !data.length}
          color="success"
          size="small"
          sx={{ borderWidth: 2, '&:hover': { borderWidth: 2 } }}
        >
          {t('export.excel')}
        </Button>
        <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
          {t('export.recordsCount', { count: data.length })}
        </Typography>
      </Stack>
    </Box>
  );
};

export default ExportButtons;

===== src/Pages/components/ImportExportManager.tsx =====
// File: src/components/ImportExportManager.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  Stack,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  Alert,
  LinearProgress,
  Divider,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconFileImport,
  IconDownload,
  IconUpload,
  IconFileSpreadsheet,
  IconFile3d,
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import 'jspdf/dist/jspdf.es.min.js';
import html2canvas from 'html2canvas';

export interface ColumnConfig {
  field: string;
  headerName: string;
  headerNameEn?: string; // إضافة الترجمة الإنجليزية
  type: 'string' | 'number' | 'date' | 'boolean';
  required?: boolean;
  format?: (value: any) => string;
  validate?: (value: any) => string | null;
  width?: number;
  example?: string;
  exampleEn?: string; // إضافة المثال الإنجليزي
}

export interface ImportExportConfig {
  moduleName: string;
  moduleNameEn?: string; // إضافة الاسم الإنجليزي
  fileName: string;
  title: string;
  titleEn?: string; // إضافة العنوان الإنجليزي
  columns: ColumnConfig[];
  onImport: (data: any[]) => Promise<{ success: number; errors: string[] }>;
  onExport?: () => any[];
  maxRows?: number;
  allowedFileTypes?: string[];
}

interface Props {
  config: ImportExportConfig;
  data?: any[];
  loading?: boolean;
  compact?: boolean;
  showImport?: boolean; // جديد
  showExport?: boolean; // جديد
}

const ImportExportManager: React.FC<Props> = ({
  config,
  data = [],
  loading = false,
  compact = false,
  showImport = true,
  showExport = true
}) => {
  const { t, i18n } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isRTL = i18n.language === 'ar';
  // دالة لإعداد خط Cairo في jsPDF
  const [importDialog, setImportDialog] = useState(false);
  const [importFile, setImportFile] = useState<File | null>(null);
  const [importData, setImportData] = useState<any[]>([]);
  const [importErrors, setImportErrors] = useState<string[]>([]);
  const [importing, setImporting] = useState(false);
  const [importResult, setImportResult] = useState<{ success: number; errors: string[] } | null>(null);

  // دالة للحصول على النص حسب اللغة
const getLocalizedText = (keyOrText: string, englishKeyOrText?: string) => {
  // إذا كان النص يحتوي على نقطة، فهو key للترجمة
  if (keyOrText.includes('.')) {
    const translatedText = t(keyOrText);
    // إذا كانت الترجمة نفس الـ key، يعني مش موجودة
    if (translatedText === keyOrText) {
      return isRTL ? keyOrText : (englishKeyOrText || keyOrText);
    }
    return translatedText;
  }
  // وإلا استخدم النص مباشرة
  return isRTL ? keyOrText : (englishKeyOrText || keyOrText);
};

  // دالة للحصول على العمود حسب اللغة
  const getLocalizedColumn = (col: ColumnConfig) => ({
    ...col,
    headerName: getLocalizedText(col.headerName, col.headerNameEn),
    example: getLocalizedText(col.example || '', col.exampleEn || '')
  });

  /* ───── Export Functions ───── */
  const exportToExcel = () => {
    const exportData = config.onExport ? config.onExport() : data;
    
    const processedData = exportData.map(item => {
      const row: any = {};
      config.columns.forEach(col => {
        const localizedCol = getLocalizedColumn(col);
        const value = getNestedValue(item, col.field);
        row[localizedCol.headerName] = col.format ? col.format(value) : value;
      });
      return row;
    });

    const ws = XLSX.utils.json_to_sheet(processedData);
    
    // تحسين عرض الأعمدة
    const colWidths = config.columns.map(col => {
      const localizedCol = getLocalizedColumn(col);
      return {
        wch: col.width || Math.max(localizedCol.headerName.length, 15)
      };
    });
    ws['!cols'] = colWidths;

    const wb = XLSX.utils.book_new();
    const sheetName = getLocalizedText(config.moduleName, config.moduleNameEn);
    XLSX.utils.book_append_sheet(wb, ws, sheetName);
    
    XLSX.writeFile(wb, `${config.fileName}_${new Date().toISOString().split('T')[0]}.xlsx`);
  };

const exportToPDF = async () => {
  // 1. Gather data to export
  const exportData = config.onExport ? config.onExport() : data;

  // 2. Build a hidden container for html2canvas
  const tempDiv = document.createElement('div');
  Object.assign(tempDiv.style, {
    position: 'absolute',
    left: '-9999px',
    top: '-9999px',
    backgroundColor: 'white',
    padding: '40px',
    fontFamily: isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif',
    direction: isRTL ? 'rtl' : 'ltr',
    width: '1200px',
    fontSize: '14px',
    lineHeight: '1.6',
    textAlign: isRTL ? 'right' : 'left',
  });

  // 3. Load Cairo font for Arabic if needed
  if (isRTL) {
    const cairoFontLink = document.createElement('link');
    cairoFontLink.href = 'https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap';
    cairoFontLink.rel = 'stylesheet';
    document.head.appendChild(cairoFontLink);
    await new Promise((resolve) => setTimeout(resolve, 1500));
  }

  // 4. Build the HTML table
  const title = getLocalizedText(config.title, config.titleEn);
  const dateText = `${t('common.exportDate')}: ${new Date().toLocaleDateString()}`;

  // Header -- note the table itself is RTL, so **no array reversing necessary**
  const localizedColumns = config.columns.map((col) => getLocalizedColumn(col));

  let tableHTML = `
    <div style="text-align:${isRTL ? 'right' : 'left'};margin-bottom:30px;direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">
      <h1 style="margin:0 0 15px;font-size:28px;font-weight:700;color:#2c3e50;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;text-align:${isRTL ? 'right' : 'left'};">
        ${title}
      </h1>
      <p style="margin:0;font-size:16px;color:#7f8c8d;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;text-align:${isRTL ? 'right' : 'left'};">
        ${dateText}
      </p>
    </div>
    <table style="width:100%;border-collapse:collapse;font-size:14px;box-shadow:0 4px 12px rgba(0,0,0,0.15);border-radius:12px;overflow:hidden;font-family:${
      isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
    };direction:${isRTL ? 'rtl' : 'ltr'};">
      <thead>
        <tr style="background:linear-gradient(135deg,#3498db,#2980b9);color:white;">`;

  localizedColumns.forEach((col) => {
    tableHTML += `
      <th style="border:none;padding:20px 18px;text-align:${
        isRTL ? 'right' : 'left'
      };font-weight:600;font-size:16px;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">${col.headerName}</th>`;
  });

  tableHTML += `</tr></thead><tbody>`;

  // Body rows (keep original column order)
  exportData.forEach((item, index) => {
    const isEven = index % 2 === 0;
    tableHTML += `<tr style="background-color:${isEven ? '#f8f9fa' : 'white'};">`;

    config.columns.forEach((col) => {
      const value = getNestedValue(item, col.field);
      let formattedValue = col.format ? col.format(value) : String(value ?? '');

      if (isRTL) {
        // Quick localisation of common boolean-ish values
        switch (formattedValue) {
          case 'true':
          case 'Active':
          case 'Yes':
            formattedValue = 'نشط';
            break;
          case 'false':
          case 'Inactive':
          case 'No':
            formattedValue = 'غير نشط';
            break;
        }
      }

      tableHTML += `
        <td style="border:1px solid #e9ecef;padding:16px 15px;text-align:${
          isRTL ? 'right' : 'left'
        };color:#2c3e50;font-size:14px;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">${formattedValue}</td>`;
    });

    tableHTML += `</tr>`;
  });

  tableHTML += `
      </tbody>
    </table>
    <div style="margin-top:30px;text-align:center;color:#95a5a6;font-size:12px;font-family:${
      isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
    };">Generated on ${new Date().toLocaleString()}</div>`;

  tempDiv.innerHTML = tableHTML;
  document.body.appendChild(tempDiv);

  // 5. Capture, place into jsPDF
  try {
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: 1200,
      height: tempDiv.scrollHeight,
      scrollX: 0,
      scrollY: 0,
      windowWidth: 1200,
      windowHeight: tempDiv.scrollHeight,
      logging: false,
      imageTimeout: 20000,
    });

    const imgData = canvas.toDataURL('image/png', 1.0);
    const pdf = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4', compress: true });

    const pdfW = pdf.internal.pageSize.getWidth();
    const pdfH = pdf.internal.pageSize.getHeight();
    const margin = 10;
    const availW = pdfW - margin * 2;
    const availH = pdfH - margin * 2;

    const canvasRatio = canvas.width / canvas.height;
    const availRatio = availW / availH;

    let finalW, finalH;
    if (canvasRatio > availRatio) {
      finalW = availW;
      finalH = availW / canvasRatio;
    } else {
      finalH = availH;
      finalW = availH * canvasRatio;
    }

    const xOffset = margin + (availW - finalW) / 2;
    const yOffset = margin + (availH - finalH) / 2;

    pdf.addImage(imgData, 'PNG', xOffset, yOffset, finalW, finalH);
    pdf.save(`${config.fileName}_${new Date().toISOString().split('T')[0]}.pdf`);
  } catch (err) {
    console.error('Error generating PDF:', err);
  } finally {
    document.body.removeChild(tempDiv);
  }
};



// دالة احتياطية بسيطة

  /* ───── Template Download ───── */
  const downloadTemplate = () => {
    const templateData = [{}];
    
    // إنشاء صف للأمثلة
    const exampleRow: any = {};
    config.columns.forEach(col => {
      const localizedCol = getLocalizedColumn(col);
      exampleRow[localizedCol.headerName] = localizedCol.example || getExampleValue(col.type);
    });
    templateData.push(exampleRow);

    const ws = XLSX.utils.json_to_sheet(templateData);
    
    // إضافة تعليقات للأعمدة المطلوبة
    config.columns.forEach((col, index) => {
      const localizedCol = getLocalizedColumn(col);
      const cellRef = XLSX.utils.encode_cell({ r: 0, c: index });
      if (!ws[cellRef]) ws[cellRef] = { v: localizedCol.headerName };
      
      if (col.required) {
        ws[cellRef].s = {
          fill: { fgColor: { rgb: "FFFF00" } },
          font: { bold: true }
        };
      }
    });

    // تحسين عرض الأعمدة
    const colWidths = config.columns.map(col => {
      const localizedCol = getLocalizedColumn(col);
      return {
        wch: Math.max(localizedCol.headerName.length, 20)
      };
    });
    ws['!cols'] = colWidths;

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Template');
    
    // إضافة sheet للتعليمات
    const instructionsTitle = isRTL ? 'تعليمات الاستخدام' : 'Usage Instructions';
    const instructions = isRTL ? [
      { [instructionsTitle]: 'يرجى اتباع التعليمات التالية:' },
      { [instructionsTitle]: '1. املأ البيانات في الصف الثاني وما بعده' },
      { [instructionsTitle]: '2. الأعمدة ذات الخلفية الصفراء مطلوبة' },
      { [instructionsTitle]: '3. لا تغير أسماء الأعمدة' },
      { [instructionsTitle]: '4. احفظ الملف بصيغة Excel (.xlsx)' },
      { [instructionsTitle]: '' },
      { [instructionsTitle]: 'أنواع البيانات المطلوبة:' }
    ] : [
      { [instructionsTitle]: 'Please follow these instructions:' },
      { [instructionsTitle]: '1. Fill data in the second row and beyond' },
      { [instructionsTitle]: '2. Columns with yellow background are required' },
      { [instructionsTitle]: '3. Do not change column names' },
      { [instructionsTitle]: '4. Save the file in Excel format (.xlsx)' },
      { [instructionsTitle]: '' },
      { [instructionsTitle]: 'Required data types:' }
    ];

    const instructionsData = [
      ...instructions,
      ...config.columns.map(col => {
        const localizedCol = getLocalizedColumn(col);
        const requiredText = isRTL ? 
          (col.required ? '(مطلوب)' : '(اختياري)') :
          (col.required ? '(Required)' : '(Optional)');
        
        return {
          [instructionsTitle]: `${localizedCol.headerName}: ${getTypeDescription(col.type)} ${requiredText}`
        };
      })
    ];

    const instructionsWs = XLSX.utils.json_to_sheet(instructionsData);
    instructionsWs['!cols'] = [{ wch: 50 }];
    const instructionsSheetName = isRTL ? 'تعليمات' : 'Instructions';
    XLSX.utils.book_append_sheet(wb, instructionsWs, instructionsSheetName);
    
    XLSX.writeFile(wb, `${config.fileName}_template.xlsx`);
  };

  /* ───── Import Functions ───── */
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImportFile(file);
      setImportErrors([]);
      setImportResult(null);
      
      // قراءة الملف
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          
          // تحويل البيانات وتنظيفها
          const processedData = processImportData(jsonData);
          setImportData(processedData);
        } catch (error) {
          setImportErrors([t('import.fileReadError')]);
        }
      };
      reader.readAsArrayBuffer(file);
    }
  };

  const processImportData = (rawData: any[]) => {
    const processedData: any[] = [];
    const errors: string[] = [];

    rawData.forEach((row, index) => {
      if (index === 0 && isExampleRow(row)) return;
      
      const processedRow: any = {};
      let hasData = false;

      config.columns.forEach(col => {
        const localizedCol = getLocalizedColumn(col);
        // البحث عن القيمة بكلا الاسمين (العربي والإنجليزي)
        const value = row[localizedCol.headerName] || row[col.headerName] || row[col.headerNameEn || ''];
        
        if (value !== undefined && value !== null && value !== '') {
          hasData = true;
          processedRow[col.field] = convertValue(value, col.type);
        } else if (col.required) {
          errors.push(`${t('import.requiredField')} "${localizedCol.headerName}" ${t('import.inRow')} ${index + 1}`);
        }

        if (col.validate && processedRow[col.field] !== undefined) {
          const validationError = col.validate(processedRow[col.field]);
          if (validationError) {
            errors.push(`${t('import.validationError')} "${localizedCol.headerName}" ${t('import.inRow')} ${index + 1}: ${validationError}`);
          }
        }
      });

      if (hasData) {
        processedData.push(processedRow);
      }
    });

    setImportErrors(errors);
    return processedData;
  };

  const handleImport = async () => {
    if (importData.length === 0) return;
    
    setImporting(true);
    try {
      const result = await config.onImport(importData);
      setImportResult(result);
      
      if (result.errors.length === 0) {
        setTimeout(() => {
          setImportDialog(false);
          setImportFile(null);
          setImportData([]);
          setImportResult(null);
        }, 2000);
      }
    } catch (error) {
      setImportErrors([t('import.importError')]);
    } finally {
      setImporting(false);
    }
  };

  /* ───── Helper Functions ───── */
  const getNestedValue = (obj: any, path: string) => {
    return path.split('.').reduce((current, key) => current?.[key], obj);
  };

  const getExampleValue = (type: string) => {
    if (isRTL) {
      switch (type) {
        case 'string': return 'نص تجريبي';
        case 'number': return '123';
        case 'date': return '2024-01-01';
        case 'boolean': return 'نعم';
        default: return 'قيمة تجريبية';
      }
    } else {
      switch (type) {
        case 'string': return 'Sample Text';
        case 'number': return '123';
        case 'date': return '2024-01-01';
        case 'boolean': return 'Yes';
        default: return 'Sample Value';
      }
    }
  };

  const getTypeDescription = (type: string) => {
    if (isRTL) {
      switch (type) {
        case 'string': return 'نص';
        case 'number': return 'رقم';
        case 'date': return 'تاريخ (YYYY-MM-DD)';
        case 'boolean': return 'نعم/لا';
        default: return 'نص';
      }
    } else {
      switch (type) {
        case 'string': return 'Text';
        case 'number': return 'Number';
        case 'date': return 'Date (YYYY-MM-DD)';
        case 'boolean': return 'Yes/No';
        default: return 'Text';
      }
    }
  };

  const isExampleRow = (row: any) => {
    return Object.values(row).some(value => 
      String(value).includes('تجريبي') || 
      String(value).includes('example') ||
      String(value).includes('Sample')
    );
  };

  const convertValue = (value: any, type: string) => {
    switch (type) {
      case 'number':
        const num = Number(value);
        return isNaN(num) ? 0 : num;
      case 'boolean':
        const lowerValue = String(value).toLowerCase();
        return ['نعم', 'yes', 'true', '1', 1, true].includes(lowerValue);
      case 'date':
        return new Date(value).toISOString().split('T')[0];
      default:
        return String(value);
    }
  };

  /* ───── Render ───── */
  return (
    <Box>
      {/* Export & Import Buttons */}
      <Stack 
        direction={compact ? "column" : "row"} 
        spacing={1} 
        sx={{ mb: 2 }}
      >
        {/* Export Buttons */}
 {showExport && (
          <>
            <Button
              variant="outlined"
              startIcon={<IconFileSpreadsheet size={16} />}
              onClick={exportToExcel}
              disabled={loading}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('export.exportExcel')}
            </Button>
            
            <Button
              variant="outlined"
              startIcon={<IconFile3d size={16} />}
              onClick={exportToPDF}
              disabled={loading}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('export.exportPdf')}
            </Button>
          </>
        )}

        {(showImport || showExport) && <Divider orientation={compact ? "horizontal" : "vertical"} flexItem />}

        {/* Import Buttons */}
 {showImport && (
          <>
            <Button
              variant="outlined"
              startIcon={<IconDownload size={16} />}
              onClick={downloadTemplate}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
              color="secondary"
            >
              {t('import.downloadTemplate')}
            </Button>

            <Button
              variant="contained"
              startIcon={<IconFileImport size={16} />}
              onClick={() => setImportDialog(true)}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('import.import')}
            </Button>
          </>
        )}
      </Stack>

      {/* Import Dialog */}
      <Dialog 
        open={importDialog} 
        onClose={() => setImportDialog(false)}
        maxWidth="md"
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>
          {t('import.importTitle')} - {getLocalizedText(config.title, config.titleEn)}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={3}>
            {/* File Upload */}
            <Box>
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileSelect}
                style={{ display: 'none' }}
                id="import-file-input"
              />
              <label htmlFor="import-file-input">
                <Button
                  variant="outlined"
                  component="span"
                  startIcon={<IconUpload />}
                  fullWidth
                  sx={{ p: 2 }}
                >
                  {importFile ? importFile.name : t('import.selectFile')}
                </Button>
              </label>
            </Box>

            {/* Import Progress */}
            {importing && (
              <Box>
                <Typography variant="body2" gutterBottom>
                  {t('import.importing')}...
                </Typography>
                <LinearProgress />
              </Box>
            )}

            {/* Import Errors */}
            {importErrors.length > 0 && (
              <Alert severity="error">
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.errorsFound')}:
                </Typography>
                {importErrors.map((error, index) => (
                  <Typography key={index} variant="body2">
                    • {error}
                  </Typography>
                ))}
              </Alert>
            )}

            {/* Import Result */}
            {importResult && (
              <Alert severity={importResult.errors.length === 0 ? "success" : "warning"}>
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.importComplete')}
                </Typography>
                <Typography variant="body2">
                  {t('import.successfulRecords')}: {importResult.success}
                </Typography>
                {importResult.errors.length > 0 && (
                  <Box sx={{ mt: 1 }}>
                    <Typography variant="body2" color="error">
                      {t('import.failedRecords')}: {importResult.errors.length}
                    </Typography>
                    {importResult.errors.slice(0, 5).map((error, index) => (
                      <Typography key={index} variant="caption" display="block">
                        • {error}
                      </Typography>
                    ))}
                    {importResult.errors.length > 5 && (
                      <Typography variant="caption" color="text.secondary">
                        {t('import.andMore', { count: importResult.errors.length - 5 })}
                      </Typography>
                    )}
                  </Box>
                )}
              </Alert>
            )}

            {/* Data Preview */}
            {importData.length > 0 && importErrors.length === 0 && !importResult && (
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.dataPreview')} ({importData.length} {t('import.records')}):
                </Typography>
                <Box sx={{ maxHeight: 200, overflow: 'auto', border: 1, borderColor: 'divider', borderRadius: 1, p: 1 }}>
                  {importData.slice(0, 3).map((row, index) => (
                    <Box key={index} sx={{ mb: 1, p: 1, backgroundColor: 'grey.50', borderRadius: 1 }}>
                      {config.columns.map(col => {
                        const localizedCol = getLocalizedColumn(col);
                        return (
                          <Typography key={col.field} variant="caption" display="block">
                            <strong>{localizedCol.headerName}:</strong> {String(row[col.field] || '-')}
                          </Typography>
                        );
                      })}
                    </Box>
                  ))}
                  {importData.length > 3 && (
                    <Typography variant="caption" color="text.secondary">
                      {t('import.andMoreRecords', { count: importData.length - 3 })}
                    </Typography>
                  )}
                </Box>
              </Box>
            )}
          </Stack>
        </DialogContent>

        <DialogActions>
          <Button onClick={() => setImportDialog(false)}>
            {t('common.cancel')}
          </Button>
          <Button
            onClick={handleImport}
            variant="contained"
            disabled={importData.length === 0 || importErrors.length > 0 || importing}
          >
            {importing ? t('import.importing') : t('import.import')}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ImportExportManager;

===== src/Pages/components/PageHeader.tsx =====
// File: src/components/PageHeader.tsx
import React from 'react';
import { Box, Typography, Stack } from '@mui/material';
import { useTranslation } from 'react-i18next';
import ExportButtons from './ExportButtons';

interface Column {
  field: string;
  headerName: string;
  width?: number;
  type?: 'string' | 'number' | 'date' | 'boolean';
  format?: (value: any) => string;
}

interface PageHeaderProps {
  titleKey: string;
  subtitleKey: string;
  // خصائص التصدير (اختيارية)
  exportData?: any[];
  exportColumns?: Column[];
  exportFileName?: string;
  exportLoading?: boolean;
}

const PageHeader: React.FC<PageHeaderProps> = ({
  titleKey,
  subtitleKey,
  exportData = [],
  exportColumns = [],
  exportFileName = 'data',
  exportLoading = false
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
        <Box>
          <Typography variant="h5" fontWeight="bold">{t(titleKey)}</Typography>
          <Typography variant="body2" color="text.secondary">
            {t(subtitleKey)}
          </Typography>
        </Box>
        
        {/* أزرار التصدير */}
        {exportData.length > 0 && exportColumns.length > 0 && (
          <ExportButtons
            data={exportData}
            columns={exportColumns}
            fileName={exportFileName}
            title={t(titleKey)}
            loading={exportLoading}
            compact={true}
          />
        )}
      </Stack>
    </Box>
  );
};

export default PageHeader;

===== src/Pages/components/SearchableSelect.tsx =====
import React, { useState, useEffect, useRef } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment,
  Typography,
  ListSubheader,
  MenuProps
} from '@mui/material';
import { IconSearch } from '@tabler/icons-react';
import { t } from 'i18next';

interface Option {
  id: string;
  name: string;
  [key: string]: any;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  size?: 'small' | 'medium';
  autoFocusSearch?: boolean;
  onSelectionComplete?: () => void; // موجود بالفعل
}

const SearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled,
  fullWidth = true,
  size = 'medium',
  autoFocusSearch = false,
  onSelectionComplete
}) => {
  const [searchText, setSearchText] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const [open, setOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const searchInputRef = useRef<HTMLInputElement>(null);

  // Recompute filteredOptions when options or searchText change:
  useEffect(() => {
    const filtered = options.filter(option =>
      option.name.toLowerCase().includes(searchText.toLowerCase())
    );
    setFilteredOptions(filtered);
    setSelectedIndex(-1);
  }, [searchText, options]);

  // Whenever `open` becomes true and autoFocusSearch is set, focus the search input:
useEffect(() => {
  if (open && autoFocusSearch) {
    // تأكد من الـ focus فوراً
    const timer = setTimeout(() => {
      if (searchInputRef.current) {
        const inputElement = searchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select(); // تحديد النص الموجود
        }
      }
    }, 50); // وقت أقل للاستجابة الأسرع

    return () => clearTimeout(timer);
  }
}, [open, autoFocusSearch]);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
    setSelectedIndex(-1);
  };

  const handleChange = (event: any) => {
    onChange(event.target.value);
    handleClose();
    
    // التعديل الوحيد هنا - إضافة callback
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  };

  // Arrow-key navigation inside the search box:
const handleSearchKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'ArrowUp') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.max(prev - 1, -1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'Enter' && selectedIndex >= 0) {
    e.preventDefault();
    e.stopPropagation();
    onChange(filteredOptions[selectedIndex].id);
    handleClose();
    
    // إضافة callback هنا كمان
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    e.stopPropagation();
    handleClose();
  }
};

  // If the closed Select is focused and the user starts typing a letter,
  // open the dropdown with that letter in the search field:
  const handleSelectKeyDown = (e: React.KeyboardEvent) => {
    if (
      e.key.length === 1 &&
      !e.ctrlKey &&
      !e.altKey &&
      !e.metaKey
    ) {
      e.preventDefault();
      setOpen(true);
      setSearchText(e.key);
      // Focus the search input after the dropdown appears:
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
          searchInputRef.current.setSelectionRange(1, 1);
        }
      }, 100);
    }
  };

  const customMenuProps: Partial<MenuProps> = {
    PaperProps: {
      style: {
        maxHeight: 300,
      },
    },
    onClose: (_event, reason) => {
      if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
        handleClose();
      }
    },
  };

  return (
    <FormControl fullWidth={fullWidth} size={size} error={error} disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value}
        label={label}
        open={open}
        onOpen={handleOpen}
        onClose={handleClose}
        onChange={handleChange}
        onKeyDown={handleSelectKeyDown}
        MenuProps={customMenuProps}
      >
        <ListSubheader>
          <TextField
            ref={searchInputRef}
            size="small"
            placeholder={t('common.search') || 'البحث...'}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            onKeyDown={handleSearchKeyDown}
            onClick={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            autoComplete="off"
          />
        </ListSubheader>

        {placeholder && !value && (
          <MenuItem value="" disabled>
            <Typography color="text.secondary">{placeholder}</Typography>
          </MenuItem>
        )}

        {filteredOptions.length === 0 ? (
          <MenuItem disabled>
            <Typography color="text.secondary">
              {t('common.noResults') || 'لا توجد نتائج'}
            </Typography>
          </MenuItem>
        ) : (
          filteredOptions.map((option, index) => (
            <MenuItem
              key={option.id}
              value={option.id}
              selected={index === selectedIndex}
              sx={{
                backgroundColor:
                  index === selectedIndex ? 'action.selected' : 'transparent',
              }}
            >
              {option.name}
            </MenuItem>
          ))
        )}
      </Select>
    </FormControl>
  );
};

export default SearchableSelect;

===== src/Pages/errors/NoBranchesPage.tsx =====
// File: src/pages/errors/NoBranchesPage.tsx
import React from 'react';
import { Box, Typography, Button, Container, Alert } from '@mui/material';
import { IconBuilding, IconLogout } from '@tabler/icons-react';
import { useAuth } from 'src/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const NoBranchesPage: React.FC = () => {
  const { t } = useTranslation();
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/auth/login');
  };

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          textAlign: 'center'
        }}
      >
        <IconBuilding size={64} color="warning" />
        <Typography variant="h4" sx={{ mt: 2, mb: 1 }}>
          {t('errors.noBranches.title')}
        </Typography>
        
        <Alert severity="warning" sx={{ mt: 2, mb: 3 }}>
          <Typography variant="body1">
            {t('errors.noBranches.message')}
          </Typography>
        </Alert>
        
        <Button
          variant="contained"
          color="error"
          startIcon={<IconLogout />}
          onClick={handleLogout}
        >
          {t('auth.logout')}
        </Button>
      </Box>
    </Container>
  );
};

export default NoBranchesPage;

===== src/Pages/errors/UnauthorizedPage.tsx =====
// File: src/pages/errors/UnauthorizedPage.tsx
import React from 'react';
import { Box, Typography, Button, Container } from '@mui/material';
import { IconLock } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const UnauthorizedPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          textAlign: 'center'
        }}
      >
        <IconLock size={64} color="error" />
        <Typography variant="h4" sx={{ mt: 2, mb: 1 }}>
          {t('errors.unauthorized.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
          {t('errors.unauthorized.message')}
        </Typography>
        <Button
          variant="contained"
          onClick={() => navigate('/dashboard')}
        >
          {t('errors.unauthorized.backToDashboard')}
        </Button>
      </Box>
    </Container>
  );
};

export default UnauthorizedPage;

===== src/Pages/groups/components/ActionsBar.tsx =====
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('groups.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('groups.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;

===== src/Pages/groups/components/GroupForm.tsx =====
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Box,
  Typography
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import GroupTreeSelect from './GroupTreeSelect';
import { StatusPill } from './StatusPill';

/* ---------- types ---------- */
type FormValues = { 
  name: string; 
  parentId?: string;
  backgroundColor: string;
  fontColor: string;
  isActive: boolean; // تأكد من وجود هذا الحقل
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Group;
  parentGroup?: Group;
  allGroups: Group[];
  onClose: () => void;
  onSubmit: (data: FormValues | Group) => void;
}

const GroupForm: React.FC<Props> = ({
  open, mode, initialValues, parentGroup, allGroups, onClose, onSubmit
}) => {
  const { t } = useTranslation();
const defaults: FormValues = { 
  name: '', 
  parentId: parentGroup?.id || '',
  backgroundColor: 'ffffff', // أبيض
  fontColor: '000000',       // أسود
  isActive: true
};

const { control, handleSubmit, reset, watch } = useForm<FormValues>({
  defaultValues: mode === 'add' ? defaults : {
    name: initialValues?.name ?? '',
    parentId: initialValues?.parentId ?? '',
    backgroundColor: initialValues?.backgroundColor ?? 'ffffff',
    fontColor: initialValues?.fontColor ?? '000000',
    isActive: initialValues?.isActive ?? true,
  },
});

  const backgroundColor = watch('backgroundColor');
  const fontColor = watch('fontColor');
  const isActive = watch('isActive'); // مراقبة حالة النشاط

  React.useEffect(() => {
    if (mode === 'add') {
      reset({
        ...defaults,
        parentId: parentGroup?.id || ''
      });
    } else if (initialValues) {
      reset({
        name: initialValues.name,
        parentId: initialValues.parentId || '',
        backgroundColor: initialValues.backgroundColor,
        fontColor: initialValues.fontColor,
        isActive: initialValues.isActive, // تمرير الحالة الصحيحة
      });
    }
  }, [mode, initialValues, parentGroup, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' 
          ? (parentGroup ? t('groups.addChild') : t('groups.add'))
          : t('groups.edit')
        }
        {parentGroup && (
          <Box component="span" sx={{ fontSize: '0.8em', color: 'text.secondary', ml: 1 }}>
            ({t('groups.parentGroup')}: {parentGroup.name})
          </Box>
        )}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            {/* ---------- Name ---------- */}
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('groups.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('groups.name')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                  />
                )}
              />
            </Grid>

            {/* ---------- Parent Group ---------- */}
            {!parentGroup && (
              <Grid item xs={12}>
                <Controller
                  name="parentId"
                  control={control}
                  render={({ field }) => (
                    <GroupTreeSelect
                      groups={allGroups}
                      value={field.value}
                      onChange={field.onChange}
                      label={t('groups.parentGroup')}
                      excludeId={initialValues?.id}
                    />
                  )}
                />
              </Grid>
            )}

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <Box>
                    <FormControlLabel
                      control={
                        <Switch 
                          checked={field.value} 
                          onChange={(e) => field.onChange(e.target.checked)} 
                        />
                      }
                      label={t('groups.status')}
                    />
                    <Box sx={{ mt: 1 }}>
                      <StatusPill isActive={field.value} />
                    </Box>
                  </Box>
                )}
              />
            </Grid>

            {/* ---------- Colors ---------- */}
<Grid item xs={6}>
  <Controller
    name="backgroundColor"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('groups.backgroundColor')}
        type="color"
        fullWidth
        value={`#${field.value || 'ffffff'}`}
        onChange={(e) => field.onChange(e.target.value.replace('#', ''))}
      />
    )}
  />
</Grid>

<Grid item xs={6}>
  <Controller
    name="fontColor"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('groups.fontColor')}
        type="color"
        fullWidth
        value={`#${field.value || '000000'}`}
        onChange={(e) => field.onChange(e.target.value.replace('#', ''))}
      />
    )}
  />
</Grid>


            {/* ---------- Preview ---------- */}
            <Grid item xs={12}>
              <Box
                sx={{
                  p: 2,
                  border: 1,
                  borderColor: 'divider',
                  borderRadius: 1,
    backgroundColor: `#${backgroundColor || 'ffffff'}`,
    color: `#${fontColor || '000000'}`,
    opacity: isActive ? 1 : 0.5
                }}
              >
                <Typography variant="body2" gutterBottom>
                  {t('groups.preview')}:
                </Typography>
                <Typography variant="h6">
                  {watch('name') || t('groups.sampleText')}
                </Typography>
                <Box sx={{ mt: 1 }}>
                  <StatusPill isActive={isActive} />
                </Box>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('groups.add') : t('groups.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default GroupForm;

===== src/Pages/groups/components/GroupTree.tsx =====
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Box} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus
} from '@tabler/icons-react';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';

interface Props {
  groups: Group[];
  onEdit: (group: Group) => void;
  onAddChild: (parentGroup: Group) => void;
  level?: number;
}

const GroupTree: React.FC<Props> = ({ 
  groups, 
  onEdit, 
  onAddChild, 
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (groupId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(groupId)) {
      newExpanded.delete(groupId);
    } else {
      newExpanded.add(groupId);
    }
    setExpanded(newExpanded);
  };

  const GroupItem: React.FC<{ group: Group }> = ({ group }) => {
    const hasChildren = group.children && group.children.length > 0;
    const isExpanded = expanded.has(group.id);

    return (
      <Box>
        <Card 
          sx={{ 
            mb: 1, 
            ml: level * 3,
            backgroundColor: group.backgroundColor !== '123' ? `#${group.backgroundColor}` : undefined,
            color: group.fontColor !== '123' ? `#${group.fontColor}` : undefined
          }}
        >
          <CardContent sx={{ py: 2, '&:last-child': { pb: 2 } }}>
            <Stack direction="row" alignItems="center" spacing={1}>
              {/* زر التوسيع/الطي */}
              {hasChildren && (
                <IconButton
                  size="small"
                  onClick={() => toggleExpanded(group.id)}
                >
                  {isExpanded ? (
                    <IconChevronDown size={16} />
                  ) : (
                    <IconChevronRight size={16} />
                  )}
                </IconButton>
              )}
              
              {/* اسم المجموعة */}
              <Typography variant="body1" sx={{ flex: 1 }}>
                {group.name}
              </Typography>

              {/* حالة المجموعة */}
              <StatusPill isActive={group.isActive} />

              {/* أزرار الإجراءات */}
              <Stack direction="row" spacing={1}>
                <IconButton
                  size="small"
                  onClick={() => onAddChild(group)}
                  title={t('groups.addChild')}
                >
                  <IconPlus size={16} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => onEdit(group)}
                  title={t('groups.edit')}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* المجموعات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <GroupTree
              groups={group.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  return (
    <Box>
      {groups.map((group) => (
        <GroupItem key={group.id} group={group} />
      ))}
    </Box>
  );
};

export default GroupTree;

===== src/Pages/groups/components/GroupTreeSelect.tsx =====
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography
} from '@mui/material';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  groups: Group[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  disabled?: boolean;
  excludeId?: string; // لاستبعاد مجموعة معينة (مثل المجموعة الحالية عند التعديل)
}

const GroupTreeSelect: React.FC<Props> = ({
  groups,
  value,
  onChange,
  label,
  disabled,
  excludeId
}) => {
  // تحويل الشجرة إلى قائمة مسطحة مع مستويات
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      if (group.id !== excludeId) {
        result.push({ group, level });
        if (group.children && group.children.length > 0) {
          result.push(...flattenGroups(group.children, level + 1));
        }
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  return (
    <FormControl fullWidth disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
      >
        <MenuItem value="">
          <em>لا يوجد (مجموعة رئيسية)</em>
        </MenuItem>
        {flatGroups.map(({ group, level }) => (
          <MenuItem key={group.id} value={group.id}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ width: level * 20 }} />
              <Typography>
                {'─'.repeat(level)} {group.name}
              </Typography>
            </Box>
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

export default GroupTreeSelect;

===== src/Pages/groups/components/mobile/GroupCards.tsx =====
// File: src/pages/groups/components/mobile/GroupCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import {
  IconEdit,
  IconPlus
} from '@tabler/icons-react';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from '../StatusPill';

interface Props {
  groups: Group[];
  onEdit: (group: Group) => void;
  onAddChild: (parentGroup: Group) => void;
  loading: boolean;
}

const GroupCards: React.FC<Props> = ({ 
  groups, 
  onEdit, 
  onAddChild, 
  loading 
}) => {
  const { t } = useTranslation();

  // تحويل الشجرة إلى قائمة مسطحة للعرض في الكروت
  const flattenGroups = (groups: Group[], level = 0, parentName = ''): Array<{ group: Group; level: number; parentName: string }> => {
    const result: Array<{ group: Group; level: number; parentName: string }> = [];
    
    groups.forEach(group => {
      result.push({ group, level, parentName });
      if (group.children && group.children.length > 0) {
        result.push(...flattenGroups(group.children, level + 1, group.name));
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (flatGroups.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('groups.noGroups')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {flatGroups.map(({ group, level, parentName }) => (
        <Grid item xs={12} sm={6} md={4} key={group.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            backgroundColor: group.backgroundColor !== '123' ? `#${group.backgroundColor}` : undefined,
            color: group.fontColor !== '123' ? `#${group.fontColor}` : undefined,
            opacity: group.isActive ? 1 : 0.7,
            border: level > 0 ? '2px solid' : 'none',
            borderColor: level > 0 ? 'primary.light' : 'transparent',
            ml: level * 1 // إزاحة بسيطة للمستويات
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack spacing={2}>
                {/* مستوى المجموعة */}
                {level > 0 && (
                  <Box>
                    <Chip
                      label={`${t('groups.level')} ${level}`}
                      size="small"
                      variant="outlined"
                      sx={{ fontSize: '0.75rem' }}
                    />
                  </Box>
                )}

                {/* اسم المجموعة */}
                <Typography 
                  variant="h6" 
                  component="div"
                  sx={{ 
                    fontSize: { xs: '1rem', sm: '1.25rem' },
                    fontWeight: 'bold',
                    lineHeight: 1.2
                  }}
                >
                  {'─'.repeat(level)} {group.name}
                </Typography>

                {/* المجموعة الأب */}
                {parentName && (
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ 
                      fontSize: { xs: '0.75rem', sm: '0.875rem' },
                      fontStyle: 'italic'
                    }}
                  >
                    {t('groups.parentGroup')}: {parentName}
                  </Typography>
                )}

                {/* عدد المجموعات الفرعية */}
                {group.children && group.children.length > 0 && (
                  <Typography 
                    variant="body2" 
                    color="primary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('groups.childrenCount')}: {group.children.length}
                  </Typography>
                )}

                {/* حالة المجموعة */}
                <Box>
                  <StatusPill isActive={group.isActive} />
                </Box>

                {/* الأزرار */}
                <Stack direction="row" spacing={1} justifyContent="center">
                  <IconButton
                    onClick={() => onAddChild(group)}
                    size="small"
                    sx={{
                      backgroundColor: 'action.hover',
                      '&:hover': {
                        backgroundColor: 'success.light',
                        color: 'success.contrastText'
                      }
                    }}
                  >
                    <IconPlus size={18} />
                  </IconButton>
                  
                  <IconButton
                    onClick={() => onEdit(group)}
                    size="small"
                    sx={{
                      backgroundColor: 'action.hover',
                      '&:hover': {
                        backgroundColor: 'primary.light',
                        color: 'primary.contrastText'
                      }
                    }}
                  >
                    <IconEdit size={18} />
                  </IconButton>
                </Stack>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default GroupCards;

===== src/Pages/groups/components/mobile/MobileGroupsFilter.tsx =====
// File: src/pages/groups/components/mobile/MobileGroupsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface GroupsFilterState {
  searchQuery: string;
  status: string;
  parentFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: GroupsFilterState;
  onFiltersChange: (filters: GroupsFilterState) => void;
  parentGroups: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileGroupsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  parentGroups,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<GroupsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('groups.active') },
    { value: 'false', label: t('groups.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('groups.name') },
    { value: 'isActive', label: t('groups.status') }
  ];

  const handleLocalChange = (field: keyof GroupsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: GroupsFilterState = {
      searchQuery: '',
      status: '',
      parentFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.parentFilter) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('groups.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('groups.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('groups.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('groups.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('groups.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('groups.filter.filters')}</Typography>
            {(localFilters.status || localFilters.parentFilter) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.parentFilter].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('groups.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.parentGroup')}</InputLabel>
              <Select
                value={localFilters.parentFilter}
                label={t('groups.parentGroup')}
                onChange={(e) => handleLocalChange('parentFilter', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                <MenuItem value="root">
                  {t('groups.rootGroups')}
                </MenuItem>
                {parentGroups.map(group => (
                  <MenuItem key={group.id} value={group.id}>
                    {group.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('groups.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('groups.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('groups.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('groups.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('groups.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('groups.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('groups.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileGroupsFilter;

===== src/Pages/groups/components/PageHeader.tsx =====
// File: src/pages/groups/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { groupsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  exportData: Group[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // تحويل البيانات الهرمية إلى مسطحة للتصدير
  const flattenGroups = (groups: Group[]): any[] => {
    const result: any[] = [];
    
    const flatten = (groups: Group[], level = 0) => {
      groups.forEach(group => {
        result.push({
          name: group.name,
          level: level,
          parentName: group.parentGroup || '-',
          backgroundColor: group.backgroundColor,
          fontColor: group.fontColor,
          isActive: group.isActive
        });
        
        if (group.children && group.children.length > 0) {
          flatten(group.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  const config = {
    ...groupsImportExportConfig,
    onExport: () => flattenGroups(exportData)
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('groups.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/groups/components/StatusPill.tsx =====
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ isActive: boolean }> = ({ isActive }) => {
  const { t } = useTranslation();

  return (
    <Chip
      label={isActive ? t('groups.active') : t('groups.inactive')}
      color={isActive ? 'success' : 'default'}
      size="small"
    />
  );
};

===== src/Pages/groups/GroupsPage.tsx =====
// File: src/pages/groups/GroupsPage.tsx
import React from 'react';
import {
  Container, 
  Snackbar, Alert, useMediaQuery, useTheme, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import GroupTree from './components/GroupTree';
import GroupCards from './components/mobile/GroupCards';
import GroupForm from './components/GroupForm';
import MobileGroupsFilter, { GroupsFilterState } from './components/mobile/MobileGroupsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/groupsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}


const GroupsPage: React.FC<Props> = ({ canAdd = true }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [items, setItems] = React.useState<Group[]>([]);
  const [query, setQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Group;
    parentGroup?: Group;
  }>({ open: false, mode: 'add' });

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<GroupsFilterState>({
    searchQuery: '',
    status: '',
    parentFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { 
        setItems(await apiSrv.getAll()); 
      }
      catch (e: any) { 
        setErr(e?.message || 'Load failed'); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const filterTree = (groups: Group[], searchQuery: string): Group[] => {
    if (!searchQuery) return groups;
    
    return groups.reduce((acc: Group[], group) => {
      const matchesQuery = group.name.toLowerCase().includes(searchQuery.toLowerCase());
      const filteredChildren = group.children ? filterTree(group.children, searchQuery) : [];
      
      if (matchesQuery || filteredChildren.length > 0) {
        acc.push({
          ...group,
          children: filteredChildren
        });
      }
      
      return acc;
    }, []);
  };

  const desktopFiltered = React.useMemo(
    () => filterTree(items, query),
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // تطبيق الفلاتر على الشجرة المسطحة
    const applyFiltersToTree = (groups: Group[]): Group[] => {
      return groups.reduce((acc: Group[], group) => {
        let includeGroup = true;

        // فلتر البحث
        if (mobileFilters.searchQuery.trim()) {
          const searchLower = mobileFilters.searchQuery.toLowerCase();
          const matchesSearch = group.name.toLowerCase().includes(searchLower) ||
                               group.code.toString().includes(searchLower);
          
          // البحث في المجموعات الفرعية أيضاً
          const hasMatchingChildren = group.children ? 
            applyFiltersToTree(group.children).length > 0 : false;
          
          includeGroup = matchesSearch || hasMatchingChildren;
        }

        // فلتر الحالة
        if (mobileFilters.status && includeGroup) {
          const isActive = mobileFilters.status === 'true';
          includeGroup = group.isActive === isActive;
        }

        // فلتر المجموعة الأب
        if (mobileFilters.parentFilter && includeGroup) {
          if (mobileFilters.parentFilter === 'root') {
            includeGroup = !group.parentId;
          } else {
            includeGroup = group.parentId === mobileFilters.parentFilter;
          }
        }

        if (includeGroup) {
          const filteredChildren = group.children ? 
            applyFiltersToTree(group.children) : [];
          
          acc.push({
            ...group,
            children: filteredChildren
          });
        }

        return acc;
      }, []);
    };

    result = applyFiltersToTree(result);

    // الترتيب
    const sortGroups = (groups: Group[]): Group[] => {
      const sorted = [...groups].sort((a, b) => {
        let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
        let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

        if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (mobileFilters.sortOrder === 'asc') {
          return aValue > bValue ? 1 : -1;
        } else {
          return aValue < bValue ? 1 : -1;
        }
      });

      return sorted.map(group => ({
        ...group,
        children: group.children ? sortGroups(group.children) : []
      }));
    };

    return sortGroups(result);
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // الحصول على المجموعات الأب للفلتر
  const getParentGroups = (groups: Group[]): Array<{ id: string; name: string }> => {
    const parents: Array<{ id: string; name: string }> = [];
    
    const extractParents = (groups: Group[]) => {
      groups.forEach(group => {
        if (group.children && group.children.length > 0) {
          parents.push({ id: group.id, name: group.name });
          extractParents(group.children);
        }
      });
    };
    
    extractParents(groups);
    return parents;
  };

  const parentGroups = getParentGroups(items);

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.parentFilter) count++;
    return count;
  };

  // حساب العدد الإجمالي للمجموعات
  const getTotalCount = (groups: Group[]): number => {
    return groups.reduce((count, group) => {
      return count + 1 + (group.children ? getTotalCount(group.children) : 0);
    }, 0);
  };

  const totalCount = getTotalCount(items);
  const filteredCount = getTotalCount(filtered);

  /* ───── CRUD ───── */
  const handleAdd = async (body: { 
    name: string; 
    parentId?: string; 
    backgroundColor?: string; 
    fontColor?: string; 
  }) => {
    try {
      await apiSrv.add(body);
      setItems(await apiSrv.getAll());
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.GroupName?.[0] || e?.message || 'Add failed';
      setErr(msg);
    }
  };

  const handleUpdate = async (group: Group) => {
    try {
      await apiSrv.update(group);
      setItems(await apiSrv.getAll());
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.GroupName?.[0] || e?.message || 'Update failed';
      setErr(msg);
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('groups.add')}
          </Button>
        )}
        </Box>
      )}

      {/* عرض البيانات */}
      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <GroupCards
            groups={filtered}
            onEdit={(group) => setDialog({ open: true, mode: 'edit', current: group })}
            onAddChild={(parentGroup) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentGroup 
            })}
            loading={loading}
          />
        ) : (
          <GroupTree
            groups={filtered}
            onEdit={(group) => setDialog({ open: true, mode: 'edit', current: group })}
            onAddChild={(parentGroup) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentGroup 
            })}
          />
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileGroupsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          parentGroups={parentGroups}
          totalResults={totalCount}
          filteredResults={filteredCount}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <GroupForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        parentGroup={dialog.parentGroup}
        allGroups={items}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd({ ...data, parentId: data.parentId ?? undefined }))
          : ((data) => handleUpdate(data as Group))
        }
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>

      {loading && <div>Loading…</div>}
    </Container>
  );
};

export default GroupsPage;

===== src/Pages/inventory/adjustments-list/AdjustmentsListPage.tsx =====
// File: src/pages/inventory/adjustments-list/AdjustmentsListPage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import {
  Container,
  useMediaQuery,
  useTheme,
  Alert,
  Snackbar,
  Box,
  Fab,
  Badge
} from '@mui/material';
import { IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as adjustmentsListApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import PageHeader from './components/PageHeader'; // استبدال AdjustmentsListHeader
import AdjustmentsTable from './components/AdjustmentsTable';
import AdjustmentsCards from './components/AdjustmentsCards';
import MobileAdjustmentsFilter, { FilterState } from './components/mobile/MobileAdjustmentsFilter';



const AdjustmentsListPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [adjustments, setAdjustments] = useState<adjustmentsListApi.AdjustmentListItem[]>([]);
  const [warehouses, setWarehouses] = useState<Array<{ id: string; name: string }>>([]);
  const [loading, setLoading] = useState(true);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [filterOpen, setFilterOpen] = useState(false);
  
  const [filters, setFilters] = useState<FilterState>({
    searchQuery: '',
    adjustmentType: '',
    status: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'adjustmentDate',
    sortOrder: 'desc'
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const [adjustmentsData, warehousesData] = await Promise.all([
        adjustmentsListApi.getAdjustments(),
        warehousesApi.getAll()
      ]);
      setAdjustments(adjustmentsData);
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (error) {
      console.error('Error loading data:', error);
      setAlertMessage(t('adjustments.errors.loadFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  // تطبيق الفلاتر والبحث والترتيب
  const filteredAndSortedAdjustments = useMemo(() => {
    let result = [...adjustments];

    // البحث
    if (filters.searchQuery.trim()) {
      const searchLower = filters.searchQuery.toLowerCase();
      result = result.filter(adj => 
        adj.adjustmentId.toLowerCase().includes(searchLower) ||
        adj.warehouseName?.toLowerCase().includes(searchLower) ||
        adj.reason?.toLowerCase().includes(searchLower) ||
        adj.referenceNumber?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع التسوية
    if (filters.adjustmentType) {
      result = result.filter(adj => adj.adjustmentType.toString() === filters.adjustmentType);
    }

    // فلتر الحالة
    if (filters.status) {
      result = result.filter(adj => adj.status.toString() === filters.status);
    }

    // فلتر المخزن
    if (filters.warehouseId) {
      result = result.filter(adj => adj.warehouseId === filters.warehouseId);
    }

    // فلتر التاريخ
    if (filters.dateFrom) {
      result = result.filter(adj => {
        const adjDate = new Date(adj.adjustmentDate).toISOString().split('T')[0];
        return adjDate >= filters.dateFrom;
      });
    }

    if (filters.dateTo) {
      result = result.filter(adj => {
        const adjDate = new Date(adj.adjustmentDate).toISOString().split('T')[0];
        return adjDate <= filters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[filters.sortBy as keyof typeof a];
      let bValue: any = b[filters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (filters.sortBy === 'adjustmentDate') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (filters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [adjustments, filters]);

  // حساب عدد الفلاتر النشطة
  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.adjustmentType) count++;
    if (filters.status) count++;
    if (filters.warehouseId) count++;
    if (filters.dateFrom || filters.dateTo) count++;
    return count;
  };

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      {/* استبدال AdjustmentsListHeader و ExportButtons بـ PageHeader الجديد */}
      <PageHeader
        exportData={filteredAndSortedAdjustments}
        loading={loading}
        onRefresh={loadData}
      />

      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <AdjustmentsCards
            adjustments={filteredAndSortedAdjustments}
            loading={loading}
          />
        ) : (
          <AdjustmentsTable
            adjustments={filteredAndSortedAdjustments}
            loading={loading}
          />
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileAdjustmentsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={filters}
          onFiltersChange={setFilters}
          warehouses={warehouses}
          totalResults={adjustments.length}
          filteredResults={filteredAndSortedAdjustments.length}
        />
      )}

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ 
          vertical: 'top', 
          horizontal: 'center' 
        }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default AdjustmentsListPage;

===== src/Pages/inventory/adjustments-list/components/AdjustmentForm.tsx =====
// File: src/pages/inventory/adjustment/components/AdjustmentForm.tsx
import React from 'react';
import {
  Grid,
  TextField} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import SearchableSelect from '../../../components/SearchableSelect';

interface Props {
  control: Control<any>;
  warehouses: Warehouse[];
  hasAdjustment: boolean;
  adjustmentType: number;
  isReadOnly?: boolean;
}

const AdjustmentForm: React.FC<Props> = ({
  control,
  warehouses,
  adjustmentType}) => {
  const { t } = useTranslation();

  const adjustmentTypeOptions = [
    { value: 1, label: t('adjustment.types.openingBalance') },
    { value: 2, label: t('adjustment.types.manualAdjustment') }
  ];

  const getAdjustmentTypeLabel = (type: number) => {
    const option = adjustmentTypeOptions.find(opt => opt.value === type);
    return option ? option.label : t('adjustment.types.notSelected');
  };

  return (
    <Grid container spacing={2} sx={{ mb: 2 }}>
      <Grid item xs={12} md={3}>
        <Controller
          name="warehouseId"
          control={control}
          rules={{ required: t('adjustment.form.validation.warehouseRequired') }}
          render={({ field, fieldState }) => (
            <SearchableSelect
              label={t('adjustment.form.warehouse')}
              value={field.value}
              onChange={field.onChange}
              options={warehouses.map(w => ({ id: w.id, name: w.name }))}
              placeholder={t('adjustment.form.selectWarehouse')}
              error={!!fieldState.error}
              size="small"
            />
          )}
        />
      </Grid>

      <Grid item xs={12} md={3}>
        {adjustmentType === 0 ? (
          <TextField
            label={t('adjustment.form.adjustmentType')}
            value={t('adjustment.types.notSelected')}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
            variant="filled"
          />
        ) : (
          <TextField
            label={t('adjustment.form.adjustmentType')}
            value={getAdjustmentTypeLabel(adjustmentType)}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
            variant="filled"
          />
        )}
      </Grid>

      <Grid item xs={12} md={3}>
        <Controller
          name="referenceNumber"
          control={control}
          render={({ field }) => (
            <TextField
              {...field}
              label={t('adjustment.form.referenceNumber')}
              fullWidth
              size="small"
            />
          )}
        />
      </Grid>

      <Grid item xs={12} md={3}>
        <Controller
          name="reason"
          control={control}
          render={({ field }) => (
            <TextField
              {...field}
              label={t('adjustment.form.reason')}
              fullWidth
              size="small"
            />
          )}
        />
      </Grid>
    </Grid>
  );
};

export default AdjustmentForm;

===== src/Pages/inventory/adjustments-list/components/AdjustmentHeader.tsx =====
// File: src/pages/inventory/adjustment/components/AdjustmentHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconArrowLeft,
  IconHome,
  IconSend,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';

interface Props {
  isSubmitting: boolean;
  hasAdjustment: boolean;
  warehouseId: string;
  onSave: () => void;
  onSubmit: () => void;
  onRefresh: () => void;
}

const AdjustmentHeader: React.FC<Props> = ({
  isSubmitting,
  hasAdjustment,
  warehouseId,
  onSave,
  onSubmit,
  onRefresh
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Box sx={{ mb: 3 }}>
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustment.title')}
        </Typography>
      </Breadcrumbs>

      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h4" component="h1">
          {t('adjustment.title')}
        </Typography>
      </Box>

      <Stack direction="row" spacing={2}>
        <Button
          variant="outlined"
          startIcon={<IconArrowLeft />}
          onClick={() => navigate('/inventory/inventory-adjustments')}
          disabled={isSubmitting}
        >
          {t('common.back')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={onRefresh}
          disabled={isSubmitting || !warehouseId}
        >
          {t('common.refresh')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconDeviceFloppy />}
          onClick={onSave}
          disabled={isSubmitting || !hasAdjustment}
          color="warning"
        >
          {t('adjustment.form.save')}
        </Button>

        <Button
          variant="contained"
          startIcon={<IconSend />}
          onClick={onSubmit}
          disabled={isSubmitting || !hasAdjustment}
        >
          {t('adjustment.form.submit')}
        </Button>
      </Stack>
    </Box>
  );
};

export default AdjustmentHeader;

===== src/Pages/inventory/adjustments-list/components/AdjustmentItemsCards.tsx =====
// File: src/pages/inventory/adjustment/components/AdjustmentItemsCards.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Box,
  Card,
  CardContent,
  Grid,
  TextField
} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';

interface Props {
  control: Control<any>;
  details: any[];
  itemsCount: number;
  onQuantityChange: (index: number, newQuantity: number) => void;
  watch: (path: string) => any;
}

const AdjustmentItemsCards: React.FC<Props> = ({
  control,
  details,
  itemsCount,
  onQuantityChange,
  watch
}) => {
  const { t } = useTranslation();

  const MobileDetailCard: React.FC<{ index: number }> = ({ index }) => (
    <Card sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={2}>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.oldQuantity')}
              value={watch(`details.${index}.oldQuantity`)}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
            />
          </Grid>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.newQuantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('adjustment.form.newQuantity')}
                  type="number"
                  size="small"
                  fullWidth
                  onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                />
              )}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.difference')}
              value={watch(`details.${index}.diffQty`)?.toFixed(2) || '0.00'}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
              sx={{
                '& .MuiInputBase-input': {
                  color: watch(`details.${index}.diffQty`) > 0 ? 'success.main' : 
                         watch(`details.${index}.diffQty`) < 0 ? 'error.main' : 'text.primary'
                }
              }}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.unitFactor')}
              value={watch(`details.${index}.unitFactor`)}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
            />
          </Grid>
          <Grid item xs={12}>
            <Controller
              name={`details.${index}.notes`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('adjustment.form.notes')}
                  multiline
                  rows={2}
                  size="small"
                  fullWidth
                />
              )}
            />
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" sx={{ mb: 2 }}>
        {t('adjustment.form.items')} ({itemsCount})
      </Typography>

      <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
        {details.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
            {t('adjustment.form.noItems')}
          </Typography>
        ) : (
          details.map((_, index) => (
            <MobileDetailCard key={index} index={index} />
          ))
        )}
      </Box>
    </Paper>
  );
};

export default AdjustmentItemsCards;

===== src/Pages/inventory/adjustments-list/components/AdjustmentItemsTable.tsx =====
// File: src/pages/inventory/adjustment/components/AdjustmentItemsTable.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField
} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';

interface Props {
  control: Control<any>;
  details: any[];
  itemsCount: number;
  onQuantityChange: (index: number, newQuantity: number) => void;
  watch: (path: string) => any;
  rawDetails?: any[];
  searchQuery?: string;
}

const AdjustmentItemsTable: React.FC<Props> = ({
  control,
  details,
  itemsCount,
  onQuantityChange,
  watch,
  rawDetails = [],
  searchQuery = ''
}) => {
  const { t } = useTranslation();

  const displayDetails = details.length > 0 ? details : rawDetails;
  const useFormData = details.length > 0;

  const filteredDisplayDetails = searchQuery.trim() 
    ? displayDetails.filter(detail => {
        const searchLower = searchQuery.toLowerCase();
        return (
          detail.productName.toLowerCase().includes(searchLower) ||
          detail.unitName.toLowerCase().includes(searchLower) ||
          (detail.barcode && detail.barcode.toLowerCase().includes(searchLower))
        );
      })
    : displayDetails;

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" sx={{ mb: 2 }}>
        {t('adjustment.form.items')} ({searchQuery ? filteredDisplayDetails.length : itemsCount})
        {searchQuery && (
          <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
            ({t('adjustment.search.filteredFrom', { total: itemsCount })})
          </Typography>
        )}
      </Typography>

      <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
        <TableContainer>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell align="center">{t('adjustment.form.product')}</TableCell>
                <TableCell align="center">{t('adjustment.form.unit')}</TableCell>
                <TableCell align="center">{t('adjustment.form.barcode')}</TableCell>
                <TableCell align="center">{t('adjustment.form.unitFactor')}</TableCell>
                <TableCell align="center">{t('adjustment.form.oldQuantity')}</TableCell>
                <TableCell align="center">{t('adjustment.form.newQuantity')}</TableCell>
                <TableCell align="center">{t('adjustment.form.difference')}</TableCell>
                <TableCell align="center">{t('adjustment.form.notes')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredDisplayDetails.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} align="center">
                    <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                      {searchQuery ? t('adjustment.search.noResults') : t('adjustment.form.noItems')}
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                filteredDisplayDetails.map((detail, index) => (
                  <TableRow 
                    key={detail.detailsAdjustmentId || index}
                    id={`product-row-${detail.productId}`}
                  >
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.productName`) : detail.productName}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.unitName`) : detail.unitName}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2" color="text.secondary">
                        {detail.barcode || '-'}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.unitFactor`) : detail.unitFactor}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData 
                          ? (watch(`details.${index}.oldQuantity`)?.toFixed(2) || '0.00')
                          : (detail.oldQuantity?.toFixed(2) || '0.00')
                        }
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      {useFormData ? (
                        <Controller
                          name={`details.${index}.newQuantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              type="number"
                              size="small"
                              id={`quantity-${detail.productId}`}
                              onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                              sx={{
                                width: 120,
                                '& input[type=number]': {
                                  '-moz-appearance': 'textfield',
                                  textAlign: 'center',
                                },
                                '& input[type=number]::-webkit-outer-spin-button': {
                                  '-webkit-appearance': 'none',
                                  margin: 0,
                                },
                                '& input[type=number]::-webkit-inner-spin-button': {
                                  '-webkit-appearance': 'none',
                                  margin: 0,
                                },
                              }}
                              inputProps={{
                                step: "0.01",
                                inputMode: 'decimal'
                              }}
                            />
                          )}
                        />
                      ) : (
                        <TextField
                          type="number"
                          size="small"
                          id={`quantity-${detail.productId}`}
                          value={detail.newQuantity || 0}
                          onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                          sx={{
                            width: 120,
                            '& input[type=number]': {
                              '-moz-appearance': 'textfield',
                              textAlign: 'center',
                            },
                            '& input[type=number]::-webkit-outer-spin-button': {
                              '-webkit-appearance': 'none',
                              margin: 0,
                            },
                            '& input[type=number]::-webkit-inner-spin-button': {
                              '-webkit-appearance': 'none',
                              margin: 0,
                            },
                          }}
                          inputProps={{
                            step: "0.01",
                            inputMode: 'decimal'
                          }}
                        />
                      )}
                    </TableCell>
                    <TableCell align="center">
                      <Typography 
                        variant="body2" 
                        sx={{ 
                          fontWeight: 'bold',
                          color: (useFormData 
                            ? watch(`details.${index}.diffQty`) 
                            : detail.diffQty) > 0 ? 'success.main' : 
                                 (useFormData 
                                   ? watch(`details.${index}.diffQty`) 
                                   : detail.diffQty) < 0 ? 'error.main' : 'text.primary'
                        }}
                      >
                        {useFormData 
                          ? (watch(`details.${index}.diffQty`)?.toFixed(2) || '0.00')
                          : (detail.diffQty?.toFixed(2) || '0.00')
                        }
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      {useFormData ? (
                        <Controller
                          name={`details.${index}.notes`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              size="small"
                              multiline
                              rows={1}
                              sx={{ width: 150 }}
                            />
                          )}
                        />
                      ) : (
                        <TextField
                          size="small"
                          multiline
                          rows={1}
                          value={detail.notes || ''}
                          sx={{ width: 150 }}
                        />
                      )}
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </Box>
    </Paper>
  );
};

export default AdjustmentItemsTable;

===== src/Pages/inventory/adjustments-list/components/AdjustmentsCards.tsx =====
// File: src/pages/inventory/adjustments-list/components/AdjustmentsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  IconButton,
  Grid,
  Stack,
  Divider
} from '@mui/material';
import { IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  adjustments: AdjustmentListItem[];
  loading: boolean;
}

const AdjustmentsCards: React.FC<Props> = ({ adjustments, loading }) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustments.types.openingBalance');
      case 2:
        return t('adjustments.types.manualAdjustment');
      default:
        return t('adjustments.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const handleViewAdjustment = (adjustmentId: string) => {
    navigate(`/inventory/inventory-adjustments/${adjustmentId}`);
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString();
  };

  const getTotalItems = (details: any[]) => {
    return details.length;
  };

  const getTotalDifference = (details: any[]) => {
    return details.reduce((sum, detail) => sum + Math.abs(detail.diffQty), 0);
  };

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (adjustments.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('adjustments.list.noAdjustments')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {adjustments.map((adjustment) => {
        const statusInfo = getStatusLabel(adjustment.status);
        return (
          <Grid item xs={12} sm={6} md={4} key={adjustment.adjustmentId}>
            <Card sx={{ height: '100%', position: 'relative' }}>
              <CardContent>
                <Stack spacing={2}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Typography variant="h6" sx={{ fontSize: '1rem' }}>
                      {getAdjustmentTypeLabel(adjustment.adjustmentType)}
                    </Typography>
                    <Chip
                      label={statusInfo.label}
                      color={statusInfo.color}
                      size="small"
                    />
                  </Box>

                  <Divider />

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.warehouse')}
                    </Typography>
                    <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                      {adjustment.warehouseName}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      ID: {adjustment.warehouseId.substring(0, 8)}...
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.adjustmentId')}
                    </Typography>
                    <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                      {adjustment.adjustmentId.substring(0, 8)}...
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.date')}
                    </Typography>
                    <Typography variant="body2">
                      {formatDate(adjustment.adjustmentDate)}
                    </Typography>
                  </Box>

                  {adjustment.referenceNumber && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.referenceNumber')}
                      </Typography>
                      <Typography variant="body2">
                        {adjustment.referenceNumber}
                      </Typography>
                    </Box>
                  )}

                  {adjustment.reason && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.reason')}
                      </Typography>
                      <Typography variant="body2">
                        {adjustment.reason}
                      </Typography>
                    </Box>
                  )}

                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.totalItems')}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        {getTotalItems(adjustment.details)}
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.totalDifference')}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                        {getTotalDifference(adjustment.details).toFixed(2)}
                      </Typography>
                    </Box>
                  </Box>

                  <Box sx={{ display: 'flex', justifyContent: 'center', pt: 1 }}>
                    <IconButton
                      onClick={() => handleViewAdjustment(adjustment.adjustmentId)}
                      color="primary"
                      sx={{
                        border: '1px solid',
                        borderColor: 'primary.main',
                        borderRadius: 1
                      }}
                    >
                      <IconEye size={18} />
                    </IconButton>
                  </Box>
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        );
      })}
    </Grid>
  );
};

export default AdjustmentsCards;

===== src/Pages/inventory/adjustments-list/components/AdjustmentsListHeader.tsx =====
// File: src/pages/inventory/adjustments-list/components/AdjustmentsListHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link
} from '@mui/material';
import {
  IconPlus,
  IconRefresh,
  IconHome
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';

interface Props {
  onRefresh: () => void;
  isLoading: boolean;
}

const AdjustmentsListHeader: React.FC<Props> = ({
  onRefresh,
  isLoading
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Box sx={{ mb: 3 }}>
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustments.list.title')}
        </Typography>
      </Breadcrumbs>

      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h4" component="h1">
          {t('adjustments.list.title')}
        </Typography>
      </Box>

      <Stack direction="row" spacing={2}>
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={() => navigate('/inventory/inventory-adjustments/new')}
        >
          {t('adjustments.list.newAdjustment')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={onRefresh}
          disabled={isLoading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>
    </Box>
  );
};

export default AdjustmentsListHeader;

===== src/Pages/inventory/adjustments-list/components/AdjustmentsTable.tsx =====
// File: src/pages/inventory/adjustments-list/components/AdjustmentsTable.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Chip,
  IconButton,
  Tooltip,
  Box,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import { IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  adjustments: AdjustmentListItem[];
  loading: boolean;
}

const AdjustmentsTable: React.FC<Props> = ({ adjustments, loading }) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustments.types.openingBalance');
      case 2:
        return t('adjustments.types.manualAdjustment');
      default:
        return t('adjustments.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const handleViewAdjustment = (adjustmentId: string) => {
    navigate(`/inventory/inventory-adjustments/${adjustmentId}`);
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString();
  };

  const getTotalItems = (details: any[]) => {
    return details.length;
  };

  const getTotalDifference = (details: any[]) => {
    return details.reduce((sum, detail) => sum + Math.abs(detail.diffQty), 0);
  };

  const columns: GridColDef[] = [
    {
      field: 'warehouseName',
      headerName: t('adjustments.table.warehouse'),
      width: isTablet ? 150 : 200,
      renderCell: (params: GridRenderCellParams) => (
        <Box>
          <Typography variant="body2" sx={{ 
            fontWeight: 'bold', 
            color: 'primary.main',
            fontSize: { xs: '0.75rem', sm: '0.875rem' },
            lineHeight: 1.2
          }}>
            {params.value}
          </Typography>

        </Box>
      ),
    },
    {
      field: 'adjustmentType',
      headerName: t('adjustments.table.type'),
      width: isTablet ? 120 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getAdjustmentTypeLabel(params.value)}
        </Typography>
      ),
    },
    {
      field: 'adjustmentDate',
      headerName: t('adjustments.table.date'),
      width: isTablet ? 100 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {formatDate(params.value)}
        </Typography>
      ),
    },
    ...(isTablet ? [] : [
      {
        field: 'referenceNumber',
        headerName: t('adjustments.table.referenceNumber'),
        width: 150,
        renderCell: (params: GridRenderCellParams) => (
          <Typography variant="body2">
            {params.value || '-'}
          </Typography>
        ),
      },
      {
        field: 'reason',
        headerName: t('adjustments.table.reason'),
        width: 200,
        renderCell: (params: GridRenderCellParams) => (
          <Typography variant="body2">
            {params.value || '-'}
          </Typography>
        ),
      }
    ]),
    {
      field: 'details',
      headerName: t('adjustments.table.totalItems'),
      width: isTablet ? 80 : 120,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{ 
          fontWeight: 'bold',
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getTotalItems(params.value)}
        </Typography>
      ),
    },
    {
      field: 'totalDifference',
      headerName: t('adjustments.table.totalDifference'),
      width: isTablet ? 100 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{ 
          fontWeight: 'bold', 
          color: 'primary.main',
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getTotalDifference(params.row.details).toFixed(2)}
        </Typography>
      ),
    },
    {
      field: 'status',
      headerName: t('adjustments.table.status'),
      width: isTablet ? 100 : 120,
      renderCell: (params: GridRenderCellParams) => {
        const statusInfo = getStatusLabel(params.value);
        return (
          <Chip
            label={statusInfo.label}
            color={statusInfo.color}
            size="small"
            sx={{
              fontSize: { xs: '0.625rem', sm: '0.75rem' },
              height: { xs: 20, sm: 24 }
            }}
          />
        );
      },
    },
    {
      field: 'actions',
      headerName: t('common.actions'),
      width: isTablet ? 80 : 100,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => (
        <Tooltip title={t('adjustments.actions.view')}>
          <IconButton
            size="small"
            onClick={() => handleViewAdjustment(params.row.adjustmentId)}
            color="primary"
          >
            <IconEye size={isTablet ? 16 : 18} />
          </IconButton>
        </Tooltip>
      ),
    },
  ];

  return (
    <Paper sx={{ 
      height: { xs: 400, sm: 500, md: 600 }, 
      width: '100%',
      '& .MuiDataGrid-root': {
        border: 'none',
      },
      '& .MuiDataGrid-columnHeaders': {
        backgroundColor: 'grey.50',
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        minHeight: { xs: 40, sm: 48 }
      },
      '& .MuiDataGrid-cell': {
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        padding: { xs: '4px 8px', sm: '8px 16px' }
      },
      '& .MuiDataGrid-row': {
        minHeight: { xs: 40, sm: 52 }
      }
    }}>
      <DataGrid
        rows={adjustments}
        columns={columns}
        loading={loading}
        getRowId={(row) => row.adjustmentId}
        pageSizeOptions={isTablet ? [5, 10, 25] : [10, 25, 50]}
        initialState={{
          pagination: {
            paginationModel: { page: 0, pageSize: isTablet ? 5 : 10 },
          },
        }}
        disableRowSelectionOnClick
        density={isTablet ? 'compact' : 'standard'}
        sx={{
          '& .MuiDataGrid-cell': {
            display: 'flex',
            alignItems: 'center',
          },
          '& .MuiDataGrid-columnHeaders': {
            backgroundColor: 'grey.50',
            fontWeight: 'bold',
          },
        }}
        localeText={{
          noRowsLabel: t('adjustments.list.noAdjustments'),
          toolbarDensity: t('common.density'),
          toolbarDensityLabel: t('common.density'),
          toolbarDensityCompact: t('common.compact'),
          toolbarDensityStandard: t('common.standard'),
          toolbarDensityComfortable: t('common.comfortable'),
          toolbarExport: t('common.export'),
          toolbarExportLabel: t('common.export'),
          toolbarExportCSV: t('common.exportCSV'),
          toolbarExportPrint: t('common.print'),
          toolbarColumns: t('common.columns'),
          toolbarColumnsLabel: t('common.columns'),
          toolbarFilters: t('common.filters'),
          toolbarFiltersLabel: t('common.filters'),
          toolbarFiltersTooltipHide: t('common.hideFilters'),
          toolbarFiltersTooltipShow: t('common.showFilters'),
          filterPanelAddFilter: t('common.addFilter'),
          filterPanelDeleteIconLabel: t('common.delete'),
          filterPanelOperatorAnd: t('common.and'),
          filterPanelOperatorOr: t('common.or'),
          filterPanelColumns: t('common.columns'),
          filterPanelInputLabel: t('common.value'),
          filterPanelInputPlaceholder: t('common.filterValue'),
          filterOperatorContains: t('common.contains'),
          filterOperatorEquals: t('common.equals'),
          filterOperatorStartsWith: t('common.startsWith'),
          filterOperatorEndsWith: t('common.endsWith'),
          filterOperatorIs: t('common.is'),
          filterOperatorNot: t('common.isNot'),
          filterOperatorAfter: t('common.isAfter'),
          filterOperatorOnOrAfter: t('common.isOnOrAfter'),
          filterOperatorBefore: t('common.isBefore'),
          filterOperatorOnOrBefore: t('common.isOnOrBefore'),
          filterOperatorIsEmpty: t('common.isEmpty'),
          filterOperatorIsNotEmpty: t('common.isNotEmpty'),
          columnMenuLabel: t('common.menu'),
          columnMenuShowColumns: t('common.showColumns'),
          columnMenuFilter: t('common.filter'),
          columnMenuHideColumn: t('common.hide'),
          columnMenuUnsort: t('common.unsort'),
          columnMenuSortAsc: t('common.sortAsc'),
          columnMenuSortDesc: t('common.sortDesc'),
          columnHeaderFiltersTooltipActive: (count) =>
            count !== 1 ? `${count} ${t('common.activeFilters')}` : `${count} ${t('common.activeFilter')}`,
          columnHeaderFiltersLabel: t('common.showFilters'),
          columnHeaderSortIconLabel: t('common.sort'),
          footerRowSelected: (count) =>
            count !== 1
              ? `${count.toLocaleString()} ${t('common.rowsSelected')}`
              : `${count.toLocaleString()} ${t('common.rowSelected')}`,
          footerTotalRows: t('common.totalRows'),
          footerTotalVisibleRows: (visibleCount, totalCount) =>
            `${visibleCount.toLocaleString()} ${t('common.of')} ${totalCount.toLocaleString()}`,
          checkboxSelectionHeaderName: t('common.checkboxSelection'),
          booleanCellTrueLabel: t('common.yes'),
          booleanCellFalseLabel: t('common.no'),
        }}
      />
    </Paper>
  );
};

export default AdjustmentsTable;

===== src/Pages/inventory/adjustments-list/components/AdjustmentViewCards.tsx =====
// File: src/pages/inventory/adjustment-view/components/AdjustmentViewCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Grid,
  Stack,
  Divider,
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  details: any[];
}

const AdjustmentViewCards: React.FC<Props> = ({ details }) => {
  const { t } = useTranslation();

  if (details.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
        <Typography 
          variant="body2" 
          color="text.secondary"
          sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
        >
          {t('adjustment.form.noItems')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={{ xs: 1, sm: 2 }}>
      {details.map((detail) => (
        <Grid item xs={12} sm={6} md={4} lg={3} key={detail.detailsAdjustmentId}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ 
              p: { xs: 1.5, sm: 2 },
              '&:last-child': { pb: { xs: 1.5, sm: 2 } }
            }}>
              <Stack spacing={{ xs: 1, sm: 1.5 }}>
                <Typography 
                  variant="h6" 
                  sx={{ 
                    fontSize: { xs: '0.875rem', sm: '1rem' }, 
                    fontWeight: 'bold',
                    lineHeight: 1.2
                  }}
                >
                  {detail.productName}
                </Typography>
                
                <Divider />
                
                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.unit')}
                  </Typography>
                  <Typography 
                    variant="body2"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {detail.unitName}
                  </Typography>
                </Box>

                {detail.barcode && (
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.barcode')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ 
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        fontFamily: 'monospace'
                      }}
                    >
                      {detail.barcode}
                    </Typography>
                  </Box>
                )}

                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.unitFactor')}
                  </Typography>
                  <Typography 
                    variant="body2"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {detail.unitFactor}
                  </Typography>
                </Box>

                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  flexDirection: { xs: 'column', sm: 'row' },
                  gap: { xs: 1, sm: 0 }
                }}>
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.oldQuantity')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                    >
                      {detail.oldQuantity?.toFixed(2) || '0.00'}
                    </Typography>
                  </Box>
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.newQuantity')}
                    </Typography>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontWeight: 'bold',
                        fontSize: { xs: '0.75rem', sm: '0.875rem' }
                      }}
                    >
                      {detail.newQuantity?.toFixed(2) || '0.00'}
                    </Typography>
                  </Box>
                </Box>

                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.difference')}
                  </Typography>
                  <Typography 
                    variant="body1" 
                    sx={{ 
                      fontWeight: 'bold',
                      fontSize: { xs: '0.875rem', sm: '1rem' },
                      color: detail.diffQty > 0 ? 'success.main' : 
                             detail.diffQty < 0 ? 'error.main' : 'text.primary'
                    }}
                  >
                    {detail.diffQty > 0 ? '+' : ''}{detail.diffQty?.toFixed(2) || '0.00'}
                  </Typography>
                </Box>

                {detail.notes && (
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.notes')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ 
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        lineHeight: 1.3
                      }}
                    >
                      {detail.notes}
                    </Typography>
                  </Box>
                )}
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default AdjustmentViewCards;

===== src/Pages/inventory/adjustments-list/components/AdjustmentViewPage.tsx =====
// File: src/pages/inventory/adjustment-view/AdjustmentViewPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Grid,
  Chip,
  Button,
  Stack,
  Breadcrumbs,
  Link,
  Alert,
  Snackbar,
  CircularProgress,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconArrowLeft, IconHome } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate, useParams } from 'react-router-dom';
import * as adjustmentApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import AdjustmentViewTable from './AdjustmentViewTable';
import AdjustmentViewCards from './AdjustmentViewCards';

const AdjustmentViewPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [adjustment, setAdjustment] = useState<adjustmentApi.InventoryAdjustment | null>(null);
  const [warehouseName, setWarehouseName] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  useEffect(() => {
    if (id) {
      loadAdjustment(id);
    }
  }, [id]);

  const loadAdjustment = async (adjustmentId: string) => {
    try {
      setLoading(true);
      
      const adjustmentData = await adjustmentApi.getAdjustmentById(adjustmentId);
      setAdjustment(adjustmentData);
      
      if (adjustmentData.warehouseId) {
        try {
          const warehouses = await warehousesApi.getAll();
          const warehouse = warehouses.find((w: { id: string; }) => w.id === adjustmentData.warehouseId);
          setWarehouseName(warehouse?.name || 'مخزن غير معروف');
        } catch (warehouseError) {
          console.error('Error loading warehouse:', warehouseError);
          setWarehouseName('مخزن غير معروف');
        }
      }
      
    } catch (error) {
      console.error('Error loading adjustment:', error);
      setAlertMessage(t('adjustment.errors.loadAdjustmentFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustment.types.openingBalance');
      case 2:
        return t('adjustment.types.manualAdjustment');
      default:
        return t('adjustment.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString('ar-EG', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <Container 
        maxWidth={false} 
        sx={{ 
          px: { xs: 1, sm: 2, md: 3 },
          py: { xs: 1, sm: 2 }
        }}
      >
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          minHeight: { xs: '40vh', sm: '50vh' }
        }}>
          <CircularProgress />
          <Typography sx={{ ml: 2, fontSize: { xs: '0.875rem', sm: '1rem' } }}>
            {t('common.loading')}
          </Typography>
        </Box>
      </Container>
    );
  }

  if (!adjustment) {
    return (
      <Container 
        maxWidth={false} 
        sx={{ 
          px: { xs: 1, sm: 2, md: 3 },
          py: { xs: 1, sm: 2 }
        }}
      >
        <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
          <Typography 
            variant={isMobile ? "h6" : "h5"} 
            color="error"
            sx={{ mb: { xs: 1, sm: 2 } }}
          >
            {t('adjustment.errors.notFound')}
          </Typography>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft size={isMobile ? 16 : 20} />}
            onClick={() => navigate('/inventory/inventory-adjustments')}
            size={isMobile ? 'medium' : 'large'}
          >
            {t('common.back')}
          </Button>
        </Box>
      </Container>
    );
  }

  const statusInfo = getStatusLabel(adjustment.status);

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      {/* Header */}
      <Box sx={{ mb: { xs: 2, sm: 3 } }}>
        <Breadcrumbs sx={{ 
          mb: { xs: 1, sm: 2 },
          '& .MuiBreadcrumbs-separator': {
            mx: { xs: 0.5, sm: 1 }
          }
        }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/inventory');
            }}
            sx={{ 
              display: 'flex', 
              alignItems: 'center',
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            <IconHome size={isMobile ? 14 : 16} style={{ marginRight: 4 }} />
            {t('inventory.title')}
          </Link>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/inventory/inventory-adjustments');
            }}
            sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
          >
            {t('adjustments.list.title')}
          </Link>
          <Typography 
            color="text.primary"
            sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
          >
            {t('adjustments.view.title')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ 
          display: 'flex', 
          flexDirection: { xs: 'column', sm: 'row' },
          justifyContent: 'space-between', 
          alignItems: { xs: 'flex-start', sm: 'center' }, 
          mb: { xs: 1, sm: 2 },
          gap: { xs: 1, sm: 0 }
        }}>
          <Typography 
            variant={isMobile ? "h5" : "h4"} 
            component="h1"
            sx={{
              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' }
            }}
          >
            {t('adjustments.view.title')}
          </Typography>
          <Chip
            label={statusInfo.label}
            color={statusInfo.color}
            size={isMobile ? "small" : "medium"}
            sx={{
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              height: { xs: 24, sm: 32 }
            }}
          />
        </Box>

        <Stack 
          direction={{ xs: 'column', sm: 'row' }} 
          spacing={{ xs: 1, sm: 2 }}
          sx={{ width: { xs: '100%', sm: 'auto' } }}
        >
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft size={isMobile ? 16 : 20} />}
            onClick={() => navigate('/inventory/inventory-adjustments')}
            fullWidth={isMobile}
            size={isMobile ? 'medium' : 'large'}
            sx={{
              minHeight: { xs: 44, sm: 48 },
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            {t('common.back')}
          </Button>
        </Stack>
      </Box>

      {/* معلومات التسوية */}
      <Paper sx={{ 
        p: { xs: 2, sm: 3 }, 
        mb: { xs: 2, sm: 3 },
        borderRadius: { xs: 1, sm: 2 }
      }}>
        <Typography 
          variant={isMobile ? "h6" : "h5"} 
          sx={{ 
            mb: { xs: 1, sm: 2 },
            fontSize: { xs: '1.125rem', sm: '1.5rem' }
          }}
        >
          {t('adjustments.view.adjustmentInfo')}
        </Typography>
        
        <Grid container spacing={{ xs: 2, sm: 3 }}>
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.adjustmentId')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold', 
                fontFamily: 'monospace',
                fontSize: { xs: '0.875rem', sm: '1rem' },
                wordBreak: 'break-all'
              }}
            >
              {adjustment.adjustmentId}
            </Typography>
          </Grid>

          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.warehouse')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold', 
                color: 'primary.main',
                fontSize: { xs: '0.875rem', sm: '1rem' }
              }}
            >
              {warehouseName}
            </Typography>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ 
                fontSize: { xs: '0.625rem', sm: '0.75rem' },
                wordBreak: 'break-all'
              }}
            >
              ID: {adjustment.warehouseId}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.adjustmentType')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold',
                fontSize: { xs: '0.875rem', sm: '1rem' }
              }}
            >
              {getAdjustmentTypeLabel(adjustment.adjustmentType)}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.date')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {formatDate(adjustment.adjustmentDate)}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.referenceNumber')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {adjustment.referenceNumber || '-'}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.reason')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {adjustment.reason || '-'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* جدول الأصناف */}
      <Paper sx={{ 
        p: { xs: 2, sm: 3 },
        borderRadius: { xs: 1, sm: 2 }
      }}>
        <Typography 
          variant={isMobile ? "h6" : "h5"} 
          sx={{ 
            mb: { xs: 1, sm: 2 },
            fontSize: { xs: '1.125rem', sm: '1.5rem' }
          }}
        >
          {t('adjustment.form.items')} ({adjustment.details.length})
        </Typography>
        
        {adjustment.details.length === 0 ? (
          <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {t('adjustment.form.noItems')}
            </Typography>
          </Box>
        ) : (
          <Box sx={{ 
            width: '100%',
            overflow: 'hidden'
          }}>
            {isMobile ? (
              <AdjustmentViewCards details={adjustment.details} />
            ) : (
              <AdjustmentViewTable details={adjustment.details} />
            )}
          </Box>
        )}

        {/* ملخص التسوية */}
        {adjustment.details.length > 0 && (
          <Box sx={{ 
            mt: { xs: 2, sm: 3 }, 
            p: { xs: 1.5, sm: 2 }, 
            backgroundColor: 'grey.50', 
            borderRadius: { xs: 1, sm: 2 }
          }}>
            <Grid container spacing={{ xs: 1, sm: 2 }}>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalItems')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  {adjustment.details.length}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalPositive')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold', 
                    color: 'success.main',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  +{adjustment.details.filter(d => d.diffQty > 0).reduce((sum, d) => sum + d.diffQty, 0).toFixed(2)}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalNegative')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold', 
                    color: 'error.main',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  {adjustment.details.filter(d => d.diffQty < 0).reduce((sum, d) => sum + d.diffQty, 0).toFixed(2)}
                </Typography>
              </Grid>
            </Grid>
          </Box>
        )}
      </Paper>

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default AdjustmentViewPage;

===== src/Pages/inventory/adjustments-list/components/AdjustmentViewTable.tsx =====
// File: src/pages/inventory/adjustment-view/components/AdjustmentViewTable.tsx
import React from 'react';
import { Paper, useMediaQuery, useTheme } from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import { useTranslation } from 'react-i18next';

interface Props {
  details: any[];
}

const AdjustmentViewTable: React.FC<Props> = ({ details }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  const columns: GridColDef[] = [
    {
      field: 'productName',
      headerName: t('adjustment.form.product'),
      width: isTablet ? 150 : 200,
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ 
          fontWeight: 'bold',
          fontSize: isTablet ? '0.75rem' : '0.875rem'
        }}>
          {params.value}
        </span>
      ),
    },
    {
      field: 'unitName',
      headerName: t('adjustment.form.unit'),
      width: isTablet ? 80 : 120,
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value}
        </span>
      ),
    },
    ...(isTablet ? [] : [
      {
        field: 'barcode',
        headerName: t('adjustment.form.barcode'),
        width: 150,
        renderCell: (params: GridRenderCellParams) => (
          <span style={{ color: '#666' }}>{params.value || '-'}</span>
        ),
      }
    ]),
    {
      field: 'unitFactor',
      headerName: t('adjustment.form.unitFactor'),
      width: isTablet ? 80 : 120,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value}
        </span>
      ),
    },
    {
      field: 'oldQuantity',
      headerName: t('adjustment.form.oldQuantity'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value?.toFixed(2) || '0.00'}
        </span>
      ),
    },
    {
      field: 'newQuantity',
      headerName: t('adjustment.form.newQuantity'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ 
          fontWeight: 'bold',
          fontSize: isTablet ? '0.75rem' : '0.875rem'
        }}>
          {params.value?.toFixed(2) || '0.00'}
        </span>
      ),
    },
    {
      field: 'diffQty',
      headerName: t('adjustment.form.difference'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => {
        const value = params.value || 0;
        const color = value > 0 ? '#2e7d32' : value < 0 ? '#d32f2f' : '#666';
        return (
          <span style={{ 
            fontWeight: 'bold', 
            color,
            fontSize: isTablet ? '0.75rem' : '0.875rem'
          }}>
            {value > 0 ? '+' : ''}{value.toFixed(2)}
          </span>
        );
      },
    },
    ...(isTablet ? [] : [
      {
        field: 'notes',
        headerName: t('adjustment.form.notes'),
        width: 200,
        renderCell: (params: GridRenderCellParams) => (
          <span>{params.value || '-'}</span>
        ),
      }
    ]),
  ];

  return (
    <Paper sx={{ 
      height: { xs: 400, sm: 500 }, 
      width: '100%',
      '& .MuiDataGrid-root': {
        border: 'none',
      },
      '& .MuiDataGrid-columnHeaders': {
        backgroundColor: 'grey.50',
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        minHeight: { xs: 40, sm: 48 }
      },
      '& .MuiDataGrid-cell': {
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        padding: { xs: '4px 8px', sm: '8px 16px' }
      },
      '& .MuiDataGrid-row': {
        minHeight: { xs: 40, sm: 52 }
      }
    }}>
      <DataGrid
        rows={details}
        columns={columns}
        getRowId={(row) => row.detailsAdjustmentId}
        pageSizeOptions={isTablet ? [5, 10, 25] : [10, 25, 50]}
        initialState={{
          pagination: {
            paginationModel: { page: 0, pageSize: isTablet ? 5 : 10 },
          },
        }}
        disableRowSelectionOnClick
        density={isTablet ? 'compact' : 'standard'}
        sx={{
          '& .MuiDataGrid-cell': {
            display: 'flex',
            alignItems: 'center',
          },
          '& .MuiDataGrid-columnHeaders': {
            backgroundColor: 'grey.50',
            fontWeight: 'bold',
          },
        }}
        localeText={{
          noRowsLabel: t('adjustment.form.noItems'),
          toolbarDensity: t('common.density'),
          toolbarDensityLabel: t('common.density'),
          toolbarDensityCompact: t('common.compact'),
          toolbarDensityStandard: t('common.standard'),
          toolbarDensityComfortable: t('common.comfortable'),
          footerTotalRows: t('common.totalRows'),
          footerTotalVisibleRows: (visibleCount, totalCount) =>
            `${visibleCount.toLocaleString()} ${t('common.of')} ${totalCount.toLocaleString()}`,
        }}
      />
    </Paper>
  );
};

export default AdjustmentViewTable;

===== src/Pages/inventory/adjustments-list/components/BarcodeScanner.tsx =====
// File: src/pages/inventory/adjustment/components/BarcodeScanner.tsx
import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box
} from '@mui/material';
import { IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onScan: (barcode: string) => void;
}

const BarcodeScanner: React.FC<Props> = ({ open, onClose, onScan }) => {
  const { t } = useTranslation();
  const [barcode, setBarcode] = useState('');

  const handleScan = () => {
    if (barcode.trim()) {
      onScan(barcode.trim());
      setBarcode('');
      onClose();
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleScan();
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <IconBarcode />
        {t('adjustment.barcode.title')}
      </DialogTitle>
      
      <DialogContent>
        <Box sx={{ textAlign: 'center', mb: 2 }}>
          <Typography variant="body2" color="text.secondary">
            {t('adjustment.barcode.instruction')}
          </Typography>
        </Box>
        
        <TextField
          autoFocus
          fullWidth
          label={t('adjustment.barcode.label')}
          value={barcode}
          onChange={(e) => setBarcode(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={t('adjustment.barcode.placeholder')}
        />
      </DialogContent>
      
      <DialogActions>
        <Button onClick={onClose}>
          {t('common.cancel')}
        </Button>
        <Button onClick={handleScan} variant="contained" disabled={!barcode.trim()}>
          {t('adjustment.barcode.scan')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BarcodeScanner;

===== src/Pages/inventory/adjustments-list/components/mobile/MobileAdjustmentsFilter.tsx =====
// File: src/pages/inventory/adjustments-list/components/mobile/MobileAdjustmentsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface FilterState {
  searchQuery: string;
  adjustmentType: string;
  status: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileAdjustmentsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<FilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const adjustmentTypeOptions = [
    { value: '', label: t('common.all') },
    { value: '0', label: t('adjustments.types.new') },
    { value: '1', label: t('adjustments.types.openingBalance') },
    { value: '2', label: t('adjustments.types.manualAdjustment') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('adjustments.status.saved') },
    { value: '3', label: t('adjustments.status.submitted') }
  ];

  const sortOptions = [
    { value: 'adjustmentDate', label: t('adjustments.table.date') },
    { value: 'adjustmentType', label: t('adjustments.table.type') },
    { value: 'status', label: t('adjustments.table.status') },
    { value: 'warehouseName', label: t('adjustments.table.warehouse') }
  ];

  const handleLocalChange = (field: keyof FilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: FilterState = {
      searchQuery: '',
      adjustmentType: '',
      status: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'adjustmentDate',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.adjustmentType) count++;
    if (localFilters.status) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('adjustments.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('adjustments.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('adjustments.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('adjustments.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('adjustments.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('adjustments.filter.filters')}</Typography>
            {(localFilters.adjustmentType || localFilters.status || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.adjustmentType, localFilters.status, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.type')}</InputLabel>
              <Select
                value={localFilters.adjustmentType}
                label={t('adjustments.table.type')}
                onChange={(e) => handleLocalChange('adjustmentType', e.target.value)}
              >
                {adjustmentTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('adjustments.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('adjustments.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('adjustments.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('adjustments.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('adjustments.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('adjustments.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('adjustments.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('adjustments.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('adjustments.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('adjustments.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('adjustments.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('adjustments.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileAdjustmentsFilter;

===== src/Pages/inventory/adjustments-list/components/NewAdjustmentDialog.tsx =====
// File: src/pages/inventory/adjustment/components/NewAdjustmentDialog.tsx
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  Button
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onConfirm: (adjustmentType: number) => void;
}

const NewAdjustmentDialog: React.FC<Props> = ({
  open,
  onClose,
  onConfirm
}) => {
  const { t } = useTranslation();

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>{t('adjustment.dialog.newAdjustmentTitle')}</DialogTitle>
      <DialogContent>
        <Typography sx={{ mb: 2 }}>
          {t('adjustment.dialog.newAdjustmentMessage')}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {t('adjustment.dialog.selectAdjustmentType')}
        </Typography>
      </DialogContent>
      <DialogActions>
        <Button onClick={() => onConfirm(1)} variant="outlined">
          {t('adjustment.types.openingBalance')}
        </Button>
        <Button onClick={() => onConfirm(2)} variant="contained">
          {t('adjustment.types.manualAdjustment')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default NewAdjustmentDialog;

===== src/Pages/inventory/adjustments-list/components/PageHeader.tsx =====
// File: src/pages/inventory/adjustments-list/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconPlus,
  IconRefresh,
  IconHome
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import ImportExportManager from '../../../components/ImportExportManager';
import { inventoryAdjustmentsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  exportData: AdjustmentListItem[];
  loading: boolean;
  onRefresh: () => void;
}

const PageHeader: React.FC<Props> = ({ exportData, loading, onRefresh }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const navigate = useNavigate();

const config = {
  ...inventoryAdjustmentsImportExportConfig,
  onExport: () => exportData.map(adjustment => ({
    warehouseName: adjustment.warehouseName || '-',
    adjustmentType: (() => {
      switch (adjustment.adjustmentType) {
        case 0: return t('adjustments.types.new');
        case 1: return t('adjustments.types.openingBalance');
        case 2: return t('adjustments.types.manualAdjustment');
        default: return t('adjustments.types.unknown');
      }
    })(),
    adjustmentDate: adjustment.adjustmentDate && adjustment.adjustmentDate !== '0001-01-01T00:00:00' 
      ? new Date(adjustment.adjustmentDate).toLocaleDateString() 
      : '-',
    referenceNumber: adjustment.referenceNumber || '-',
    reason: adjustment.reason || '-',
    totalItems: adjustment.totalItems || 0,
    totalDifference: adjustment.totalDifference ? adjustment.totalDifference.toFixed(2) : '0.00',
    status: (() => {
      switch (adjustment.status) {
        case 1: return t('adjustments.status.saved');
        case 3: return t('adjustments.status.submitted');
        default: return t('adjustments.status.unknown');
      }
    })()
  }))
};

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      {/* Breadcrumbs */}
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustments.list.title')}
        </Typography>
      </Breadcrumbs>

      {/* Title and Actions */}
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 2, sm: 3 },
        gap: { xs: 2, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('adjustments.list.title')}
        </Typography>

        {/* Action Buttons */}
        <Stack 
          direction={{ xs: 'column', sm: 'row' }} 
          spacing={1}
          sx={{ width: { xs: '100%', sm: 'auto' } }}
        >
          <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => navigate('/inventory/inventory-adjustments/new')}
            fullWidth={isMobile}
            sx={{ minWidth: { sm: 180 } }}
          >
            {t('adjustments.list.newAdjustment')}
          </Button>

          <Button
            variant="outlined"
            startIcon={<IconRefresh />}
            onClick={onRefresh}
            disabled={loading}
            fullWidth={isMobile}
            sx={{ minWidth: { sm: 120 } }}
          >
            {t('common.refresh')}
          </Button>
        </Stack>
      </Box>

      {/* Import/Export Manager */}
      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/inventory/adjustments-list/components/ProductSearchBox.tsx =====
// File: src/pages/inventory/adjustment/components/ProductSearchBox.tsx
import React, { useState, useRef } from 'react';
import {
  Paper,
  TextField,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Typography,
  Box,
  ClickAwayListener,
  IconButton
} from '@mui/material';
import { IconSearch, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import BarcodeScanner from './BarcodeScanner';

interface Props {
  searchQuery: string;
  onSearchChange: (query: string) => void;
  filteredDetails: any[];
  onProductSelect: (productId: string) => void;
  onProductFocus: (productId: string) => void; // إضافة جديدة
}

const ProductSearchBox: React.FC<Props> = ({
  searchQuery,
  onSearchChange,
  filteredDetails,
  onProductSelect,
  onProductFocus
}) => {
  const { t } = useTranslation();
  const [showResults, setShowResults] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  const handleSearchChange = (value: string) => {
    onSearchChange(value);
    setShowResults(value.trim().length > 0 && filteredDetails.length > 0);
    setSelectedIndex(0);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (!showResults || filteredDetails.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => Math.min(prev + 1, filteredDetails.length - 1));
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => Math.max(prev - 1, 0));
        break;
      case 'Enter':
        e.preventDefault();
        if (filteredDetails[selectedIndex]) {
          handleProductSelect(filteredDetails[selectedIndex]);
        }
        break;
      case 'Escape':
        setShowResults(false);
        break;
    }
  };

  const handleProductSelect = (product: any) => {
    onProductSelect(product.productId);
    // التركيز على حقل الكمية للمنتج المحدد
    onProductFocus(product.productId);
    setShowResults(false);
    onSearchChange('');
  };

  const handleBarcodeScanned = (barcode: string) => {
    onSearchChange(barcode);
    setScannerOpen(false);
    
    const foundProduct = filteredDetails.find(detail => 
      detail.barcode && detail.barcode.toLowerCase() === barcode.toLowerCase()
    );
    
    if (foundProduct) {
      setTimeout(() => {
        handleProductSelect(foundProduct);
      }, 100);
    }
  };

  return (
    <Box sx={{ mb: 2, position: 'relative' }}>
      <Paper sx={{ p: 2 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('adjustment.search.title')}
        </Typography>
        
        <ClickAwayListener onClickAway={() => setShowResults(false)}>
          <Box ref={searchRef}>
            <TextField
              fullWidth
              placeholder={t('adjustment.search.placeholder')}
              value={searchQuery}
              onChange={(e) => handleSearchChange(e.target.value)}
              onKeyDown={handleKeyDown}
              onFocus={() => setShowResults(searchQuery.trim().length > 0 && filteredDetails.length > 0)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setScannerOpen(true)}
                      size="small"
                      title={t('adjustment.search.scanBarcode')}
                    >
                      <IconBarcode size={20} />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />

            {showResults && filteredDetails.length > 0 && (
              <Paper
                sx={{
                  position: 'absolute',
                  top: '100%',
                  left: 0,
                  right: 0,
                  zIndex: 1000,
                  maxHeight: 300,
                  overflow: 'auto',
                  mt: 1
                }}
              >
                <List dense>
                  {filteredDetails.slice(0, 10).map((product, index) => (
                    <ListItem key={product.productId} disablePadding>
                      <ListItemButton
                        onClick={() => handleProductSelect(product)}
                        selected={index === selectedIndex}
                        sx={{
                          backgroundColor: index === selectedIndex ? 'action.selected' : 'transparent'
                        }}
                      >
                        <ListItemText
                          primary={`${product.productName} — ${product.unitName}`}
                          secondary={
                            <Box>
                              <Typography variant="caption" color="text.secondary">
                                {t('adjustment.search.currentQuantity')}: {product.oldQuantity?.toFixed(2) || '0.00'}
                              </Typography>
                              {product.barcode && (
                                <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
                                  {t('adjustment.search.barcode')}: {product.barcode}
                                </Typography>
                              )}
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>
              </Paper>
            )}
          </Box>
        </ClickAwayListener>
      </Paper>

      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />
    </Box>
  );
};

export default ProductSearchBox;

===== src/Pages/inventory/adjustments-list/InventoryAdjustmentPage.tsx =====
// File: src/pages/inventory/adjustment/InventoryAdjustmentPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  useMediaQuery,
  useTheme,
  Alert,
  Snackbar,
  Typography,
  Box,
  Paper
} from '@mui/material';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import * as adjustmentApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import AdjustmentHeader from './components/AdjustmentHeader';
import AdjustmentForm from './components/AdjustmentForm';
import AdjustmentItemsTable from './components/AdjustmentItemsTable';
import AdjustmentItemsCards from './components/AdjustmentItemsCards';
import NewAdjustmentDialog from './components/NewAdjustmentDialog';
import ProductSearchBox from './components/ProductSearchBox';

type FormValues = {
  warehouseId: string;
  adjustmentType: number;
  reason: string;
  referenceNumber: string;
  details: Array<{
    detailsAdjustmentId: string;
    productId: string;
    productPriceId: string;
    productName: string;
    unitName: string;
    oldQuantity: number;
    newQuantity: number;
    unitFactor: number;
    diffQty: number;
    notes: string;
    barcode?: string;
  }>;
};

const InventoryAdjustmentPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [adjustment, setAdjustment] = useState<adjustmentApi.InventoryAdjustment | null>(null);
  const [, setLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [showNewAdjustmentDialog, setShowNewAdjustmentDialog] = useState(false);
  const [selectedAdjustmentType, setSelectedAdjustmentType] = useState<number>(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredDetails, setFilteredDetails] = useState<any[]>([]);

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: {
      warehouseId: '',
      adjustmentType: 0,
      reason: '',
      referenceNumber: '',
      details: []
    }
  });

  const watchedWarehouseId = watch('warehouseId');
  const watchedDetails = watch('details');

  useEffect(() => {
    loadWarehouses();
  }, []);

  useEffect(() => {
    if (watchedWarehouseId) {
      loadAdjustment(watchedWarehouseId);
    }
  }, [watchedWarehouseId]);

  useEffect(() => {
    watchedDetails.forEach((detail, index) => {
      const diffQty = detail.newQuantity - detail.oldQuantity;
      if (detail.diffQty !== diffQty) {
        setValue(`details.${index}.diffQty`, diffQty);
      }
    });
  }, [watchedDetails, setValue]);

  useEffect(() => {
    if (!adjustment?.details) {
      setFilteredDetails([]);
      return;
    }

    if (!searchQuery.trim()) {
      setFilteredDetails(adjustment.details);
      return;
    }

    const filtered = adjustment.details.filter(detail => {
      const searchLower = searchQuery.toLowerCase();
      return (
        detail.productName.toLowerCase().includes(searchLower) ||
        detail.unitName.toLowerCase().includes(searchLower) ||
        (detail.barcode && detail.barcode.toLowerCase().includes(searchLower))
      );
    });

    setFilteredDetails(filtered);
  }, [adjustment?.details, searchQuery]);

  const loadWarehouses = async () => {
    try {
      const data = await warehousesApi.getAll();
      setWarehouses(data);
    } catch (error) {
      setAlertMessage(t('adjustment.errors.loadWarehousesFailed'));
      setAlertSeverity('error');
    }
  };

  const loadAdjustment = async (warehouseId: string) => {
    try {
      setLoading(true);
      const data = await adjustmentApi.getOrCreatePendingAdjustment(warehouseId);
      setAdjustment(data);

      if (data.adjustmentType === 0) {
        setShowNewAdjustmentDialog(true);
        setSelectedAdjustmentType(0);
      } else {
        setSelectedAdjustmentType(data.adjustmentType);
        populateForm(data);
      }
    } catch (error) {
      setAlertMessage(t('adjustment.errors.loadAdjustmentFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  const populateForm = (data: adjustmentApi.InventoryAdjustment) => {
    reset({
      warehouseId: data.warehouseId,
      adjustmentType: data.adjustmentType,
      reason: data.reason || '',
      referenceNumber: data.referenceNumber || '',
      details: data.details.map(d => ({
        detailsAdjustmentId: d.detailsAdjustmentId,
        productId: d.productId,
        productPriceId: d.productPriceId,
        productName: d.productName,
        unitName: d.unitName,
        oldQuantity: d.oldQuantity,
        newQuantity: d.newQuantity,
        unitFactor: d.unitFactor,
        diffQty: d.diffQty,
        notes: d.notes || '',
        barcode: d.barcode || ''
      }))
    });
  };

  const handleNewAdjustmentConfirm = (adjustmentType: number) => {
    setSelectedAdjustmentType(adjustmentType);
    setValue('adjustmentType', adjustmentType);
    
    if (adjustment) {
      populateForm(adjustment);
    }
    
    setShowNewAdjustmentDialog(false);
    setAlertMessage(t('adjustment.messages.newAdjustmentStarted'));
    setAlertSeverity('success');
  };

  const handleQuantityChange = (index: number, newQuantity: number) => {
    setValue(`details.${index}.newQuantity`, newQuantity);
    const oldQuantity = watch(`details.${index}.oldQuantity`);
    const diffQty = newQuantity - oldQuantity;
    setValue(`details.${index}.diffQty`, diffQty);
  };

  const handleSave = async () => {
    handleSubmit(async (data) => {
      if (isSubmitting || !adjustment?.adjustmentId) return;

      try {
        setIsSubmitting(true);
        
        const updateData = {
          adjustmentId: adjustment.adjustmentId,
          adjustmentType: selectedAdjustmentType,
          reason: data.reason,
          referenceNumber: data.referenceNumber,
          warehouseId: data.warehouseId,
          status: 1,
          details: data.details.map(d => ({
            detailsAdjustmentId: d.detailsAdjustmentId,
            adjustmentId: adjustment.adjustmentId,
            productId: d.productId,
            productPriceId: d.productPriceId,
            productName: d.productName,
            unitName: d.unitName,
            oldQuantity: d.oldQuantity,
            newQuantity: d.newQuantity,
            unitFactor: d.unitFactor,
            diffQty: d.diffQty,
            notes: d.notes,
            branchID: null,
            companyID: null,
            isActive: true
          }))
        };

        const result = await adjustmentApi.updateAdjustment(updateData);
        setAdjustment(result);
        setAlertMessage(t('adjustment.messages.saveSuccess'));
        setAlertSeverity('success');
      } catch (error) {
        setAlertMessage(t('adjustment.errors.saveFailed'));
        setAlertSeverity('error');
      } finally {
        setIsSubmitting(false);
      }
    })();
  };

  const handleSubmitAdjustment = async () => {
    handleSubmit(async (data) => {
      if (isSubmitting || !adjustment?.adjustmentId) return;

      try {
        setIsSubmitting(true);
        
        const updateData = {
          adjustmentId: adjustment.adjustmentId,
          adjustmentType: selectedAdjustmentType,
          reason: data.reason,
          referenceNumber: data.referenceNumber,
          warehouseId: data.warehouseId,
          status: 3,
          details: data.details.map(d => ({
            detailsAdjustmentId: d.detailsAdjustmentId,
            adjustmentId: adjustment.adjustmentId,
            productId: d.productId,
            productPriceId: d.productPriceId,
            productName: d.productName,
            unitName: d.unitName,
            oldQuantity: d.oldQuantity,
            newQuantity: d.newQuantity,
            unitFactor: d.unitFactor,
            diffQty: d.diffQty,
            notes: d.notes,
            branchID: null,
            companyID: null,
            isActive: true
          }))
        };

        const result = await adjustmentApi.updateAdjustment(updateData);
        setAdjustment(result);
        setAlertMessage(t('adjustment.messages.submitSuccess'));
        setAlertSeverity('success');
        
        if (watchedWarehouseId) {
          setTimeout(() => loadAdjustment(watchedWarehouseId), 1000);
        }
      } catch (error) {
        setAlertMessage(t('adjustment.errors.submitFailed'));
        setAlertSeverity('error');
      } finally {
        setIsSubmitting(false);
      }
    })();
  };

  const handleRefresh = () => {
    if (watchedWarehouseId) {
      loadAdjustment(watchedWarehouseId);
    }
  };

  const scrollToProductAndFocus = (productId: string) => {
    const element = document.getElementById(`product-row-${productId}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      element.style.backgroundColor = '#fff3cd';
      
      focusOnQuantityField(productId);
      
      setTimeout(() => {
        element.style.backgroundColor = '';
      }, 2000);
    }
  };

  const focusOnQuantityField = (productId: string) => {
    if (!adjustment?.details) return;
    
    const productIndex = adjustment.details.findIndex(detail => detail.productId === productId);
    if (productIndex !== -1) {
      setTimeout(() => {
        const quantityInput = document.getElementById(`quantity-${productId}`) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
      }, 300);
    }
  };

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      <AdjustmentHeader
        isSubmitting={isSubmitting}
        hasAdjustment={!!adjustment}
        warehouseId={watchedWarehouseId}
        onSave={handleSave}
        onSubmit={handleSubmitAdjustment}
        onRefresh={handleRefresh}
      />

      {!watchedWarehouseId && (
        <Paper sx={{ 
          p: { xs: 2, sm: 3 }, 
          mb: { xs: 2, sm: 3 }, 
          backgroundColor: 'info.light', 
          border: '1px solid', 
          borderColor: 'info.main',
          borderRadius: { xs: 1, sm: 2 }
        }}>
          <Typography 
            variant={isMobile ? "body1" : "h6"} 
            color="info.dark" 
            sx={{ 
              textAlign: 'center',
              fontSize: { xs: '1rem', sm: '1.25rem' }
            }}
          >
            {t('adjustment.messages.selectWarehouseToStart')}
          </Typography>
        </Paper>
      )}

      <Box sx={{ mb: { xs: 1, sm: 2 } }}>
        <AdjustmentForm
          control={control}
          warehouses={warehouses}
          hasAdjustment={!!adjustment}
          adjustmentType={selectedAdjustmentType}
          isReadOnly={selectedAdjustmentType !== 0}
        />
      </Box>

      {adjustment && (
        <Box sx={{ mb: { xs: 1, sm: 2 } }}>
          <ProductSearchBox
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filteredDetails={filteredDetails}
            onProductSelect={scrollToProductAndFocus}
            onProductFocus={focusOnQuantityField}
          />
        </Box>
      )}

      {adjustment && (
        <Box sx={{ 
          width: '100%',
          overflow: 'hidden',
          '& .MuiPaper-root': {
            borderRadius: { xs: 1, sm: 2 },
          }
        }}>
          {isMobile ? (
            <AdjustmentItemsCards
              control={control}
              details={filteredDetails}
              itemsCount={filteredDetails.length}
              onQuantityChange={handleQuantityChange}
              watch={watch}
            />
          ) : (
            <AdjustmentItemsTable
              control={control}
              details={watchedDetails}
              itemsCount={filteredDetails.length}
              onQuantityChange={handleQuantityChange}
              watch={watch}
              rawDetails={filteredDetails}
              searchQuery={searchQuery}
            />
          )}
        </Box>
      )}

      <NewAdjustmentDialog
        open={showNewAdjustmentDialog}
        onClose={() => setShowNewAdjustmentDialog(false)}
        onConfirm={handleNewAdjustmentConfirm}
      />

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default InventoryAdjustmentPage;

===== src/Pages/permissions/PermissionsPage.tsx =====
// File: src/pages/permissions/PermissionsPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Switch,
  FormControlLabel,
  Chip,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Stack,
  Button,
  Alert,
  Snackbar,
} from '@mui/material';
import {
  IconChevronDown,
  IconUser,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getAllUsers, getUserPages, getUserPagePermission, User, UserPage, PagePermission } from 'src/utils/api/authApi';

interface UserPermissions {
  user: User;
  pages: UserPage[];
  permissions: { [pageId: number]: PagePermission[] };
}

const PermissionsPage: React.FC = () => {
  const { t } = useTranslation();
  
  const [, setUsers] = useState<User[]>([]);
  const [userPermissions, setUserPermissions] = useState<UserPermissions[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedUser, setExpandedUser] = useState<string | null>(null);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  // تحميل المستخدمين والصلاحيات
  const loadUsersAndPermissions = async () => {
    try {
      setLoading(true);
      const usersResponse = await getAllUsers();
      
      if (usersResponse.isvalid && usersResponse.data) {
        setUsers(usersResponse.data);
        
        const permissionsData: UserPermissions[] = [];
        
        for (const user of usersResponse.data) {
          try {
            const pages = await getUserPages();
            const permissions: { [pageId: number]: PagePermission[] } = {};
            
            for (const page of pages) {
              try {
                const pagePermissions = await getUserPagePermission(page.pageId);
                permissions[page.pageId] = pagePermissions;
              } catch (error) {
                console.error(`Error loading permissions for page ${page.pageId}:`, error);
                permissions[page.pageId] = [];
              }
            }
            
            permissionsData.push({
              user,
              pages,
              permissions
            });
          } catch (error) {
            console.error(`Error loading data for user ${user.id}:`, error);
          }
        }
        
        setUserPermissions(permissionsData);
      }
    } catch (error) {
      console.error('Error loading users and permissions:', error);
      setSnackbar({
        open: true,
        message: t('permissions.errors.loadFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsersAndPermissions();
  }, []);

  // تحديث صلاحية صفحة
  const updatePagePermission = async (userId: string, pageId: number, hasAccess: boolean) => {
    try {
      console.log('Updating page permission:', { userId, pageId, hasAccess });
      
      setSnackbar({
        open: true,
        message: t('permissions.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('permissions.errors.updateFailed'),
        severity: 'error'
      });
    }
  };

  // تحديث صلاحية فرعية
  const updateSubPermission = async (userId: string, pageId: number, permissionId: number, hasPermission: boolean) => {
    try {
      console.log('Updating sub permission:', { userId, pageId, permissionId, hasPermission });
      
      setSnackbar({
        open: true,
        message: t('permissions.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('permissions.errors.updateFailed'),
        severity: 'error'
      });
    }
  };

  // مكون عرض صلاحيات المستخدم
  const UserPermissionsCard: React.FC<{ userPermission: UserPermissions }> = ({ userPermission }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <Accordion
        expanded={expandedUser === userPermission.user.id}
        onChange={() => setExpandedUser(
          expandedUser === userPermission.user.id ? null : userPermission.user.id
        )}
      >
        <AccordionSummary expandIcon={<IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
            <IconUser size={24} />
            <Box sx={{ flex: 1 }}>
              <Typography variant="h6">
                {userPermission.user.userName}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {userPermission.user.phoneNo}
              </Typography>
            </Box>
            <Chip
              label={t('permissions.pagesCount', { 
                accessible: userPermission.pages.filter(p => p.hasAccess).length,
                total: userPermission.pages.length 
              })}
              size="small"
              color="primary"
              variant="outlined"
            />
          </Box>
        </AccordionSummary>

        <AccordionDetails>
          <Stack spacing={2}>
            {userPermission.pages.map((page) => (
              <Card key={page.pageId} variant="outlined">
                <CardContent sx={{ py: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="subtitle1">
                      {page.description}
                    </Typography>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={page.hasAccess}
                          onChange={(e) => updatePagePermission(
                            userPermission.user.id,
                            page.pageId,
                            e.target.checked
                          )}
                          color="primary"
                        />
                      }
                      label={page.hasAccess ? t('permissions.enabled') : t('permissions.disabled')}
                    />
                  </Box>

                  {/* الصلاحيات الفرعية */}
                  {page.hasAccess && userPermission.permissions[page.pageId] && (
                    <Box sx={{ mt: 2, pl: 2, borderLeft: 2, borderColor: 'divider' }}>
                      <Typography variant="caption" color="text.secondary" gutterBottom>
                        {t('permissions.subPermissions')}:
                      </Typography>
                      <Grid container spacing={1}>
                        {userPermission.permissions[page.pageId].map((permission) => (
                          <Grid item xs={12} sm={6} md={4} key={permission.permissionId}>
                            <FormControlLabel
                              control={
                                <Switch
                                  size="small"
                                  checked={permission.hasPermission}
                                  onChange={(e) => updateSubPermission(
                                    userPermission.user.id,
                                    page.pageId,
                                    permission.permissionId,
                                    e.target.checked
                                  )}
                                />
                              }
                              label={
                                <Typography variant="caption">
                                  {permission.permissionName}
                                </Typography>
                              }
                            />
                          </Grid>
                        ))}
                      </Grid>
                    </Box>
                  )}
                </CardContent>
              </Card>
            ))}
          </Stack>
        </AccordionDetails>
      </Accordion>
    </Card>
  );

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('permissions.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary">
          {t('permissions.description')}
        </Typography>
      </Box>

      {/* Actions */}
      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={loadUsersAndPermissions}
          disabled={loading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>

      {/* Content */}
      {loading ? (
        <Card>
          <CardContent>
            <Typography color="text.secondary" align="center">
              {t('permissions.loading')}
            </Typography>
          </CardContent>
        </Card>
      ) : userPermissions.length === 0 ? (
        <Card>
          <CardContent>
            <Typography color="text.secondary" align="center">
              {t('permissions.noData')}
            </Typography>
          </CardContent>
        </Card>
      ) : (
        <Box>
          {userPermissions.map((userPermission) => (
            <UserPermissionsCard
              key={userPermission.user.id}
              userPermission={userPermission}
            />
          ))}
        </Box>
      )}

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PermissionsPage;

===== src/Pages/pos/additions/AdditionProductsPage.tsx =====
// File: src/Pages/pos/additions/AdditionProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from '../../products/components/PageHeader';
import ActionsBar from '../../products/components/ActionsBar';
import ProductTable from '../../products/components/ProductTable';
import ProductRow from '../../products/components/ProductsRow';
import ProductForm from '../../products/components/ProductForm';
import ProductPricesDrawer from '../../products/components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from '../../products/components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {
  // Add other props here if needed
}

const AdditionProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canImport = true, canExport = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch Addition products only ───── */
  const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
    try {
      setLoad(true);
      // ⭐ Addition products (productType = 3)
      const data = await apiSrv.getByType(3, page, pageSize);
      setProductsData(data);
      setCurrentPage(page);
    } catch (e: any) {
      setErr(e?.message || t('additionProducts.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  /* ───── search Addition products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product && product.productType === 3) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        // ⭐ فلترة النتائج للـ Addition products بس
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 3)
        };
        setProductsData(filteredData);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {
      setErr(e?.message || t('additionProducts.errors.searchFailed'));
    } finally {
      setSearching(false);
    }
  };

  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll()
        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        await fetchProducts(1);
      }
      catch (e: any) { 
        setErr(e?.message || t('additionProducts.errors.loadFailed')); 
      }
    })();
  }, []);

  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 3)
        };
        setProductsData(filteredData);
        setCurrentPage(page);
      } catch (e: any) {
        setErr(e?.message || t('additionProducts.errors.searchFailed'));
      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      const addData = {
        ...data,
        productType: 3 // ⭐ Addition
      };
      await apiSrv.add(addData);
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updateData = {
        ...data,
        productType: 3 // ⭐ Addition
      };
      const updatedProduct = await apiSrv.update(updateData);
      
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      if (selectedProduct && selectedProduct.id === data.productId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        title={t('additionProducts.title')}
        exportData={displayedData} 
        loading={loading}
        showImport={canImport}
        showExport={canExport}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('additionProducts.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('additionProducts.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('additionProducts.searchByBarcode')}: ${searchQuery}`
                    : `${t('additionProducts.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('additionProducts.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{
                minHeight: 48,
                fontSize: '1rem'
              }}
            >
              {t('additionProducts.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('additionProducts.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('additionProducts.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('additionProducts.noSearchResults') : t('additionProducts.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <ProductForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        groups={groups}
        units={units}
        productType={3} // ⭐ Addition
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default AdditionProductsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/pos/customers/components/ActionsBar.tsx =====
// File: src/pages/pos/customers/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('customers.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/customers/components/CustomerForm.tsx =====
// File: src/pages/pos/customers/components/CustomerForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Switch, Typography,
  FormControlLabel, Card, CardContent, IconButton, Divider,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus } from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';

type FormValues = {
  name: string;
  phone1: string;
  phone2: string;
  phone3: string;
  phone4: string;
  isVIP: boolean;
  isBlocked: boolean;
  isActive: boolean;
  addresses: CustomerAddress[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Customer;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CustomerForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [zones, setZones] = React.useState<any[]>([]);

  const defaults: FormValues = {
    name: '',
    phone1: '',
    phone2: '',
    phone3: '',
    phone4: '',
    isVIP: false,
    isBlocked: false,
    isActive: true,
    addresses: []
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: addressFields, append: appendAddress, remove: removeAddress } = useFieldArray({
    control,
    name: 'addresses'
  });

  // تحميل مناطق التوصيل
  React.useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        }
    };
    
    if (open) {
      loadZones();
    }
  }, [open]);

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone1: initialValues.phone1,
          phone2: initialValues.phone2 || '',
          phone3: initialValues.phone3 || '',
          phone4: initialValues.phone4 || '',
          isVIP: initialValues.isVIP,
          isBlocked: initialValues.isBlocked,
          isActive: initialValues.isActive,
          addresses: initialValues.addresses || []
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const addAddress = () => {
    appendAddress({
      addressLine: '',
      floor: '',
      apartment: '',
      landmark: '',
      notes: '',
      zoneId: '',
      isActive: true
    });
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone1: data.phone1,
          phone2: data.phone2 || null,
          phone3: data.phone3 || null,
          phone4: data.phone4 || null,
          isVIP: data.isVIP,
          isBlocked: data.isBlocked,
          isActive: data.isActive,
          addresses: data.addresses.map(addr => ({
            ...(addr.id && { id: addr.id }),
            addressLine: addr.addressLine,
            floor: addr.floor || '',
            apartment: addr.apartment || '',
            landmark: addr.landmark || '',
            notes: addr.notes || '',
            zoneId: addr.zoneId,
            isActive: addr.isActive
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone1: data.phone1,
          phone2: data.phone2 || null,
          phone3: data.phone3 || null,
          phone4: data.phone4 || null,
          isVIP: data.isVIP,
          isBlocked: data.isBlocked,
          isActive: data.isActive,
          addresses: data.addresses.map(addr => ({
            addressLine: addr.addressLine,
            floor: addr.floor || '',
            apartment: addr.apartment || '',
            landmark: addr.landmark || '',
            notes: addr.notes || '',
            zoneId: addr.zoneId
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('customers.add') : t('customers.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Customer Info */}
            <Grid item xs={12}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                {t('customers.form.basicInfo')}
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('customers.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone1"
                control={control}
                rules={{ 
                  required: t('customers.phone1Required'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('customers.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone1')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone2"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone2')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone3"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone3')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone4"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone4')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Customer Status */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap' }}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isVIP"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('customers.form.isVIP')}
                />

                <FormControlLabel
                  control={
                    <Controller
                      name="isBlocked"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('customers.form.isBlocked')}
                />

                {mode === 'edit' && (
                  <FormControlLabel
                    control={
                      <Controller
                        name="isActive"
                        control={control}
                        render={({ field }) => (
                          <Switch
                            checked={field.value}
                            onChange={field.onChange}
                          />
                        )}
                      />
                    }
                    label={t('customers.form.isActive')}
                  />
                )}
              </Box>
            </Grid>

            {/* Addresses Section */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  {t('customers.form.addresses')} ({addressFields.length})
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<IconPlus />}
                  onClick={addAddress}
                  size="small"
                >
                  {t('customers.form.addAddress')}
                </Button>
              </Box>

              {addressFields.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4, backgroundColor: 'grey.50', borderRadius: 1 }}>
                  <Typography color="text.secondary">
                    {t('customers.form.noAddresses')}
                  </Typography>
                </Box>
              ) : (
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  {addressFields.map((address, index) => (
                    <Card key={address.id} variant="outlined">
                      <CardContent sx={{ pb: '16px !important' }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                          <Typography variant="subtitle2">
                            {t('customers.form.address')} {index + 1}
                          </Typography>
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => removeAddress(index)}
                          >
                            <IconTrash size={16} />
                          </IconButton>
                        </Box>

                        <Grid container spacing={2}>
                          <Grid item xs={12}>
                            <Controller
                              name={`addresses.${index}.addressLine`}
                              control={control}
                              rules={{ required: t('customers.addressLineRequired') }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.addressLine')}
                                  fullWidth
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.zoneId`}
                              control={control}
                              rules={{ required: t('customers.zoneRequired') }}
                              render={({ field, fieldState }) => (
                                <FormControl fullWidth size="small" error={!!fieldState.error}>
                                  <InputLabel>{t('customers.form.zone')}</InputLabel>
                                  <Select
                                    {...field}
                                    label={t('customers.form.zone')}
                                    required
                                  >
                                    {zones.map((zone) => (
                                      <MenuItem key={zone.id} value={zone.id}>
                                        {zone.name}
                                      </MenuItem>
                                    ))}
                                  </Select>
                                  {fieldState.error && (
                                    <Box sx={{ color: 'error.main', fontSize: '0.75rem', mt: 0.5 }}>
                                      {fieldState.error.message}
                                    </Box>
                                  )}
                                </FormControl>
                              )}
                            />
                          </Grid>

                          <Grid item xs={6} md={3}>
                            <Controller
                              name={`addresses.${index}.floor`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.floor')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={6} md={3}>
                            <Controller
                              name={`addresses.${index}.apartment`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.apartment')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.landmark`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.landmark')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.notes`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.notes')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  ))}
                </Box>
              )}
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('customers.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('customers.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CustomerForm;

===== src/Pages/pos/customers/components/CustomerRow.tsx =====
// File: src/pages/pos/customers/components/CustomerRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Accordion, AccordionSummary, AccordionDetails
} from '@mui/material';
import { IconEdit, IconTrash, IconPhone, IconMapPin, IconChevronDown } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  customer: Customer;
  onEdit: () => void;
  onDelete: () => void;
  canEdit?: boolean;
  canDelete?: boolean;
}

const CustomerRow: React.FC<Props> = ({ 
  customer, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = (phone: string) => {
    window.open(`tel:${phone}`, '_self');
  };

  const getCustomerTypeChip = () => {
    if (customer.isBlocked) {
      return <Chip label={t('customers.form.blocked')} color="error" size="small" />;
    }
    if (customer.isVIP) {
      return <Chip label={t('customers.form.vip')} color="warning" size="small" />;
    }
    return <Chip label={t('customers.form.regular')} color="default" size="small" variant="outlined" />;
  };

  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {customer.name}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              {getCustomerTypeChip()}
              <Chip
                label={customer.isActive ? t('common.active') : t('common.inactive')}
                color={customer.isActive ? 'success' : 'error'}
                size="small"
                variant={customer.isActive ? 'filled' : 'outlined'}
              />
            </Box>
          </Box>
        </Box>

        {/* Customer Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          {/* Primary Phone */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('customers.form.phone1')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {customer.phone1}
              </Typography>
              <IconButton
                size="small"
                onClick={() => handlePhoneCall(customer.phone1)}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>

          {/* Additional Phones */}
          {[customer.phone2, customer.phone3, customer.phone4].filter(Boolean).map((phone, index) => (
            <Box key={index} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                {t(`customers.form.phone${index + 2}`)}:
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Typography variant="body2" fontFamily="monospace">
                  {phone}
                </Typography>
                <IconButton
                  size="small"
                  onClick={() => handlePhoneCall(phone!)}
                  color="primary"
                  sx={{ p: 0.5 }}
                >
                  <IconPhone size={16} />
                </IconButton>
              </Box>
            </Box>
          ))}
        </Stack>

        {/* Addresses */}
        {customer.addresses.length > 0 && (
          <Accordion sx={{ mt: 2, boxShadow: 'none', border: '1px solid', borderColor: 'divider' }}>
            <AccordionSummary expandIcon={<IconChevronDown />}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <IconMapPin size={16} />
                <Typography variant="body2" fontWeight={500}>
                  {customer.addresses.length} {t('customers.form.addressCount')}
                </Typography>
              </Box>
            </AccordionSummary>
            <AccordionDetails>
              <Stack spacing={2}>
                {customer.addresses.map((address, index) => (
                  <Box key={address.id || index} sx={{ p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
                    <Typography variant="body2" fontWeight={500} sx={{ mb: 1 }}>
                      {address.addressLine}
                    </Typography>
                    {address.zoneName && (
                      <Typography variant="caption" color="primary.main">
                        {address.zoneName}
                      </Typography>
                    )}
                    {(address.floor || address.apartment) && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {address.floor && `${t('customers.form.floor')}: ${address.floor}`}
                        {address.floor && address.apartment && ' - '}
                        {address.apartment && `${t('customers.form.apartment')}: ${address.apartment}`}
                      </Typography>
                    )}
                    {address.landmark && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {t('customers.form.landmark')}: {address.landmark}
                      </Typography>
                    )}
                    {address.notes && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {t('customers.form.notes')}: {address.notes}
                      </Typography>
                    )}
                  </Box>
                ))}
              </Stack>
            </AccordionDetails>
          </Accordion>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
          
          {canDelete && (
            <Tooltip title={t('common.delete')}>
              <IconButton
                size="small"
                onClick={onDelete}
                color="error"
              >
                <IconTrash size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CustomerRow;

===== src/Pages/pos/customers/components/CustomerTable.tsx =====
// File: src/pages/pos/customers/components/CustomerTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTrash, IconPhone, IconMapPin } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  rows: Customer[];
  onEdit: (customer: Customer) => void;
  onDelete: (customer: Customer) => void;
  canEdit?: boolean;
  canDelete?: boolean;
}

const CustomerTable: React.FC<Props> = ({ 
  rows, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<Customer>[] = [
    { 
      field: 'name', 
      headerName: t('customers.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone1', 
      headerName: t('customers.form.phone1'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'addresses', 
      headerName: t('customers.form.addresses'), 
      width: 250,
      sortable: false,
      renderCell: ({ value }) => {
        const addresses = value || [];
        return (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconMapPin size={16} />
            <Typography variant="body2">
              {addresses.length} {t('customers.form.addressCount')}
            </Typography>
            {addresses.length > 0 && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ 
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                  maxWidth: 150
                }}
                title={addresses[0]?.addressLine}
              >
                - {addresses[0]?.addressLine}
              </Typography>
            )}
          </Box>
        );
      }
    },
    { 
      field: 'customerType', 
      headerName: t('customers.form.type'), 
      width: 120,
      renderCell: ({ row }) => {
        if (row.isBlocked) {
          return <Chip label={t('customers.form.blocked')} color="error" size="small" />;
        }
        if (row.isVIP) {
          return <Chip label={t('customers.form.vip')} color="warning" size="small" />;
        }
        return <Chip label={t('customers.form.regular')} color="default" size="small" variant="outlined" />;
      }
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
          {canDelete && (
            <IconButton size="small" onClick={() => onDelete(row)} color="error">
              <IconTrash size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CustomerTable;

===== src/Pages/pos/customers/components/mobile/MobileCustomersFilter.tsx =====
// File: src/pages/pos/customers/components/mobile/MobileCustomersFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface CustomersFilterState {
  searchQuery: string;
  status: string;
  customerType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CustomersFilterState;
  onFiltersChange: (filters: CustomersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCustomersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof CustomersFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      customerType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.customerType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('customers.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Customer Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('customers.form.type')}</InputLabel>
            <Select
              value={filters.customerType}
              onChange={(e) => updateFilter('customerType', e.target.value)}
              label={t('customers.form.type')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="vip">{t('customers.form.vip')}</MenuItem>
              <MenuItem value="blocked">{t('customers.form.blocked')}</MenuItem>
              <MenuItem value="regular">{t('customers.form.regular')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('customers.form.name')}</MenuItem>
              <MenuItem value="phone1">{t('customers.form.phone1')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCustomersFilter;

===== src/Pages/pos/customers/components/PageHeader.tsx =====
// File: src/pages/pos/customers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { customersImportExportConfig } from '../../../components/configs/importExportConfigs';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  exportData: Customer[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...customersImportExportConfig,
    onExport: () => exportData.map(customer => ({
      name: customer.name,
      phone1: customer.phone1,
      phone2: customer.phone2 || '',
      phone3: customer.phone3 || '',
      phone4: customer.phone4 || '',
      isVIP: customer.isVIP,
      isBlocked: customer.isBlocked,
      isActive: customer.isActive,
      addressesCount: customer.addresses.length,
      primaryAddress: customer.addresses[0]?.addressLine || ''
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('customers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/customers/CustomersPage.tsx =====
// File: src/pages/pos/customers/CustomersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, Dialog, DialogTitle,
  DialogContent, DialogContentText, DialogActions, Pagination,
  TextField, InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconTrash, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CustomerTable from './components/CustomerTable';
import CustomerRow from './components/CustomerRow';
import CustomerForm from './components/CustomerForm';
import MobileCustomersFilter, { CustomersFilterState } from './components/mobile/MobileCustomersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/customersApi';
import { Customer, CustomersResponse } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
}

const CustomersPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true, canDelete = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [customersData, setCustomersData] = React.useState<CustomersResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 25,
    data: []
  });
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Customer;
  }>({ open: false, mode: 'add', current: undefined });

  const [deleteDialog, setDeleteDialog] = React.useState<{
    open: boolean;
    customer?: Customer;
  }>({ open: false });

  const [mobileFilters, setMobileFilters] = React.useState<CustomersFilterState>({
    searchQuery: '',
    status: '',
    customerType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const [currentPage, setCurrentPage] = React.useState(1);
  const pageSize = 25;

  const fetchCustomers = async (page: number = currentPage) => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll(page, pageSize);
      setCustomersData(data);
    } catch (e: any) {
      setErr(e?.message || t('customers.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCustomers(currentPage);
  }, [currentPage]);

  const searchCustomers = (query: string) => {
    if (!query.trim()) {
      return customersData.data;
    }
    
    const searchLower = query.toLowerCase();
    return customersData.data.filter(customer => 
      customer.name.toLowerCase().includes(searchLower) ||
      customer.phone1.toLowerCase().includes(searchLower) ||
      customer.phone2?.toLowerCase().includes(searchLower) ||
      customer.addresses.some(addr => 
        addr.addressLine.toLowerCase().includes(searchLower) ||
        addr.zoneName?.toLowerCase().includes(searchLower)
      )
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...customersData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(customer => 
        customer.name.toLowerCase().includes(searchLower) ||
        customer.phone1.toLowerCase().includes(searchLower) ||
        customer.phone2?.toLowerCase().includes(searchLower) ||
        customer.addresses.some(addr => 
          addr.addressLine.toLowerCase().includes(searchLower) ||
          addr.zoneName?.toLowerCase().includes(searchLower)
        )
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(customer => customer.isActive === isActive);
    }

    if (mobileFilters.customerType) {
      if (mobileFilters.customerType === 'vip') {
        result = result.filter(customer => customer.isVIP);
      } else if (mobileFilters.customerType === 'blocked') {
        result = result.filter(customer => customer.isBlocked);
      } else if (mobileFilters.customerType === 'regular') {
        result = result.filter(customer => !customer.isVIP && !customer.isBlocked);
      }
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [customersData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCustomers(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.customerType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCustomers(currentPage);
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchCustomers(currentPage);
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleDelete = async (customer: Customer) => {
    try {
      await apiSrv.deleteCustomer(customer.id);
      await fetchCustomers(currentPage);
      setDeleteDialog({ open: false });
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.deleteFailed');
      setErr(msg);
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (customer: Customer) => {
    setDialog({ open: true, mode: 'edit', current: customer });
  };

  const handlePageChange = (_event: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={customersData.data} 
        loading={loading}
      />
      
      {/* ⭐ تنسيق البحث والإضافة زي الصفحات القديمة */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('customers.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('customers.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('customers.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('customers.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
          <Typography variant="h5">
            {t('customers.title')} ({customersData.totalCount})
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {t('customers.pageInfo', { 
              page: customersData.pageNumber, 
              total: customersData.pageCount 
            })}
          </Typography>
        </Stack>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('customers.noSearchResults') : t('customers.noCustomers')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(customer => (
                  <CustomerRow
                    key={customer.id}
                    customer={customer}
                    onEdit={() => handleEdit(customer)}
                    onDelete={() => setDeleteDialog({ open: true, customer })}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                ))
              : (
                  <CustomerTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onDelete={(customer) => setDeleteDialog({ open: true, customer })}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                )}
          </>
        )}

        {/* Pagination */}
        {customersData.pageCount > 1 && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <Pagination
              count={customersData.pageCount}
              page={currentPage}
              onChange={handlePageChange}
              color="primary"
              size={isMobile ? 'small' : 'medium'}
            />
          </Box>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCustomersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={customersData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <CustomerForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialog.open} onClose={() => setDeleteDialog({ open: false })}>
        <DialogTitle>{t('customers.deleteConfirmTitle')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {t('customers.deleteConfirmMessage', { name: deleteDialog.customer?.name })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog({ open: false })}>
            {t('common.cancel')}
          </Button>
          <Button 
            onClick={() => deleteDialog.customer && handleDelete(deleteDialog.customer)}
            color="error"
            variant="contained"
            startIcon={<IconTrash />}
          >
            {t('common.delete')}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default CustomersPage;

===== src/Pages/pos/delivery/agents/components/ActionsBar.tsx =====
// File: src/pages/delivery/agents/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryAgents.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/delivery/agents/components/AgentForm.tsx =====
// File: src/pages/delivery/agents/components/AgentForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Typography,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  phone: string;
  branchId: string;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryAgent;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const AgentForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    phone: '',
    branchId: defaultBranch?.id || ''
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          branchId: initialValues.branchId || defaultBranch?.id || ''
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone: data.phone,
          branchId: data.branchId
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone: data.phone,
          branchId: data.branchId
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryAgents.add') : t('deliveryAgents.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryAgents.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryAgents.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('deliveryAgents.phoneRequired'),
                  pattern: {
                    value: /^[0-9+\-\s()]+$/,
                    message: t('deliveryAgents.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryAgents.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="branchId"
                control={control}
                rules={{ required: t('deliveryAgents.branchRequired') }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth error={!!fieldState.error}>
                    <InputLabel>{t('deliveryAgents.form.branch')}</InputLabel>
                    <Select
                      {...field}
                      label={t('deliveryAgents.form.branch')}
                      required
                    >
                      {branches.map((branch) => (
                        <MenuItem key={branch.id} value={branch.id}>
                          {branch.name}
                        </MenuItem>
                      ))}
                    </Select>
                    {fieldState.error && (
                      <Typography variant="caption" color="error" sx={{ mt: 1, ml: 2 }}>
                        {fieldState.error.message}
                      </Typography>
                    )}
                  </FormControl>
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryAgents.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryAgents.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default AgentForm;

===== src/Pages/pos/delivery/agents/components/AgentRow.tsx =====
// File: src/pages/delivery/agents/components/AgentRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit, IconTrash, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  agent: DeliveryAgent;
  onEdit: () => void;
  onDelete: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
}

const AgentRow: React.FC<Props> = ({ 
  agent, onEdit, onDelete, isSelected = false, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${agent.phone}`, '_self');
  };

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {agent.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {agent.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={agent.isActive ? t('common.active') : t('common.inactive')}
            color={agent.isActive ? 'success' : 'error'}
            size="small"
            variant={agent.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Agent Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryAgents.form.phone')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {agent.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
          
          {canDelete && (
            <Tooltip title={t('common.delete')}>
              <IconButton
                size="small"
                onClick={onDelete}
                color="error"
              >
                <IconTrash size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default AgentRow;

===== src/Pages/pos/delivery/agents/components/AgentTable.tsx =====
// File: src/pages/delivery/agents/components/AgentTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTrash, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  rows: DeliveryAgent[];
  onEdit: (agent: DeliveryAgent) => void;
  onDelete: (agent: DeliveryAgent) => void;
  canEdit?: boolean;
  canDelete?: boolean;
    selectedAgentId?: string;

}

const AgentTable: React.FC<Props> = ({ 
  rows, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryAgent>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryAgents.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone', 
      headerName: t('deliveryAgents.form.phone'), 
      width: 180,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={16} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('deliveryAgents.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 150, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
          {canDelete && (
            <IconButton size="small" onClick={() => onDelete(row)} color="error">
              <IconTrash size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default AgentTable;

===== src/Pages/pos/delivery/agents/components/mobile/MobileAgentsFilter.tsx =====
// File: src/pages/delivery/agents/components/mobile/MobileAgentsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface AgentsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: AgentsFilterState;
  onFiltersChange: (filters: AgentsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileAgentsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof AgentsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryAgents.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('deliveryAgents.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('deliveryAgents.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryAgents.form.name')}</MenuItem>
              <MenuItem value="phone">{t('deliveryAgents.form.phone')}</MenuItem>
              <MenuItem value="branchName">{t('deliveryAgents.form.branch')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileAgentsFilter;

===== src/Pages/pos/delivery/agents/components/PageHeader.tsx =====
// File: src/pages/delivery/agents/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryAgentsImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  exportData: DeliveryAgent[];
  loading: boolean;
    onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryAgentsImportExportConfig,
    onExport: () => exportData.map(agent => ({
      name: agent.name,
      phone: agent.phone,
      branchName: agent.branchName || t('common.notSpecified'),
      isActive: agent.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryAgents.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/delivery/agents/DeliveryAgentsPage.tsx =====
// File: src/pages/delivery/agents/DeliveryAgentsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip, Dialog, DialogTitle,
  DialogContent, DialogContentText, DialogActions
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus, IconTrash } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import AgentTable from './components/AgentTable';
import AgentRow from './components/AgentRow';
import AgentForm from './components/AgentForm';
import MobileAgentsFilter, { AgentsFilterState } from './components/mobile/MobileAgentsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryAgentsApi';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryAgentsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true, canDelete = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [agents, setAgents] = React.useState<DeliveryAgent[]>([]);
  const [selectedAgent, setSelectedAgent] = React.useState<DeliveryAgent | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryAgent;
  }>({ open: false, mode: 'add', current: undefined });

  const [deleteDialog, setDeleteDialog] = React.useState<{
    open: boolean;
    agent?: DeliveryAgent;
  }>({ open: false });

  const [mobileFilters, setMobileFilters] = React.useState<AgentsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchAgents = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setAgents(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryAgents.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchAgents();
  }, []);

  const searchAgents = (query: string) => {
    if (!query.trim()) {
      return agents;
    }
    
    const searchLower = query.toLowerCase();
    return agents.filter(agent => 
      agent.name.toLowerCase().includes(searchLower) ||
      agent.phone.toLowerCase().includes(searchLower) ||
      agent.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...agents];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(agent => 
        agent.name.toLowerCase().includes(searchLower) ||
        agent.phone.toLowerCase().includes(searchLower) ||
        agent.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(agent => agent.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(agent => agent.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [agents, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchAgents(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchAgents();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedAgent = await apiSrv.update(data);
      setAgents(prev => prev.map(a => a.id === updatedAgent.id ? updatedAgent : a));
      
      if (selectedAgent && selectedAgent.id === data.id) {
        setSelectedAgent(updatedAgent);
      }
      
      return updatedAgent;
    } catch (e: any) {      throw e;
    }
  };

  const handleDelete = async (agent: DeliveryAgent) => {
    try {
      await apiSrv.deleteAgent(agent.id);
      setAgents(prev => prev.filter(a => a.id !== agent.id));
      setDeleteDialog({ open: false });
      
      if (selectedAgent?.id === agent.id) {
        setSelectedAgent(null);
      }
    } catch (e: any) {    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (agent: DeliveryAgent) => {
    setDialog({ open: true, mode: 'edit', current: agent });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={agents} 
  loading={loading}
  onDataChange={fetchAgents} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryAgents.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryAgents.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryAgents.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryAgents.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryAgents.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryAgents.noSearchResults') : t('deliveryAgents.noAgents')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(agent => (
                  <AgentRow
                    key={agent.id}
                    agent={agent}
                    onEdit={() => handleEdit(agent)}
                    onDelete={() => setDeleteDialog({ open: true, agent })}
                    isSelected={selectedAgent?.id === agent.id}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                ))
              : (
                  <AgentTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onDelete={(agent) => setDeleteDialog({ open: true, agent })}
                    selectedAgentId={selectedAgent?.id}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileAgentsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={agents.length}
          filteredResults={displayedData.length}
        />
      )}

      <AgentForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialog.open} onClose={() => setDeleteDialog({ open: false })}>
        <DialogTitle>{t('deliveryAgents.deleteConfirmTitle')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {t('deliveryAgents.deleteConfirmMessage', { name: deleteDialog.agent?.name })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog({ open: false })}>
            {t('common.cancel')}
          </Button>
          <Button 
            onClick={() => deleteDialog.agent && handleDelete(deleteDialog.agent)}
            color="error"
            variant="contained"
            startIcon={<IconTrash />}
          >
            {t('common.delete')}
          </Button>
        </DialogActions>
      </Dialog></Container>
  );
};

export default DeliveryAgentsPage;

function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}

===== src/Pages/pos/delivery/companies/components/ActionsBar.tsx =====
// File: src/pages/delivery/companies/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryCompanies.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/delivery/companies/components/CompanyForm.tsx =====
// File: src/pages/delivery/companies/components/CompanyForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, FormControl, InputLabel, Select, MenuItem,
  Switch, FormControlLabel
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

type FormValues = {
  name: string;
  paymentType: string;
  companySharePercentage: number;
  visaCollectionCommissionPercentage: number;
  taxPercentage: number;
  phone: string;
  email: string;
  contactPerson: string;
  notes: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryCompany;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CompanyForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const defaults: FormValues = {
    name: '',
    paymentType: 'Cash',
    companySharePercentage: 0,
    visaCollectionCommissionPercentage: 0,
    taxPercentage: 0,
    phone: '',
    email: '',
    contactPerson: '',
    notes: '',
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          paymentType: initialValues.paymentType,
          companySharePercentage: initialValues.companySharePercentage,
          visaCollectionCommissionPercentage: initialValues.visaCollectionCommissionPercentage,
          taxPercentage: initialValues.taxPercentage,
          phone: initialValues.phone,
          email: initialValues.email,
          contactPerson: initialValues.contactPerson,
          notes: initialValues.notes || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          paymentType: data.paymentType,
          companySharePercentage: Number(data.companySharePercentage),
          visaCollectionCommissionPercentage: Number(data.visaCollectionCommissionPercentage),
          taxPercentage: Number(data.taxPercentage),
          phone: data.phone,
          email: data.email,
          contactPerson: data.contactPerson,
          notes: data.notes,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          paymentType: data.paymentType,
          companySharePercentage: Number(data.companySharePercentage),
          visaCollectionCommissionPercentage: Number(data.visaCollectionCommissionPercentage),
          taxPercentage: Number(data.taxPercentage),
          phone: data.phone,
          email: data.email,
          contactPerson: data.contactPerson,
          notes: data.notes,
          isActive: data.isActive
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      // Error handled by global error handler
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryCompanies.add') : t('deliveryCompanies.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Company Name */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryCompanies.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Payment Type */}
            <Grid item xs={12} md={6}>
              <Controller
                name="paymentType"
                control={control}
                render={({ field }) => (
                  <FormControl fullWidth>
                    <InputLabel>{t('deliveryCompanies.form.paymentType')}</InputLabel>
                    <Select
                      {...field}
                      label={t('deliveryCompanies.form.paymentType')}
                    >
                      <MenuItem value="Cash">{t('deliveryCompanies.form.cash')}</MenuItem>
                      <MenuItem value="Visa">{t('deliveryCompanies.form.visa')}</MenuItem>
                    </Select>
                  </FormControl>
                )}
              />
            </Grid>

            {/* Company Share Percentage */}
            <Grid item xs={12} md={6}>
              <Controller
                name="companySharePercentage"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.companyShareRequired'),
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.companySharePercentage')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Visa Collection Commission */}
            <Grid item xs={12} md={6}>
              <Controller
                name="visaCollectionCommissionPercentage"
                control={control}
                rules={{ 
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.visaCollectionCommissionPercentage')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Tax Percentage */}
            <Grid item xs={12} md={6}>
              <Controller
                name="taxPercentage"
                control={control}
                rules={{ 
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.taxPercentage')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Phone */}
            <Grid item xs={12} md={6}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.phoneRequired'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('deliveryCompanies.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Email */}
            <Grid item xs={12} md={6}>
              <Controller
                name="email"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.emailRequired'),
                  pattern: {
                    value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: t('deliveryCompanies.emailInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.email')}
                    type="email"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Contact Person */}
            <Grid item xs={12} md={6}>
              <Controller
                name="contactPerson"
                control={control}
                rules={{ required: t('deliveryCompanies.contactPersonRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.contactPerson')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Notes */}
            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.notes')}
                    fullWidth
                    multiline
                    rows={3}
                    placeholder={t('deliveryCompanies.form.notesPlaceholder')}
                  />
                )}
              />
            </Grid>

            {/* Active Status */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={
                      <Switch
                        checked={field.value}
                        onChange={field.onChange}
                      />
                    }
                    label={t('deliveryCompanies.form.isActive')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryCompanies.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryCompanies.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CompanyForm;

===== src/Pages/pos/delivery/companies/components/CompanyRow.tsx =====
// File: src/pages/delivery/companies/components/CompanyRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconPhone, IconMail, IconUser, IconCreditCard } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  company: DeliveryCompany;
  onEdit: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
}

const CompanyRow: React.FC<Props> = ({ 
  company, onEdit, isSelected = false, canEdit = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${company.phone}`, '_self');
  };

  const handleEmailOpen = () => {
    window.open(`mailto:${company.email}`, '_self');
  };

  return (
    <Card variant="outlined" sx={{ 
      mb: 2,
      ...(isSelected && {
        borderColor: 'primary.main',
        backgroundColor: 'action.selected'
      })
    }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {company.name}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Chip
                icon={<IconCreditCard size={14} />}
                label={t(`deliveryCompanies.form.${company.paymentType.toLowerCase()}`)}
                size="small"
                variant="outlined"
                color="primary"
              />
            </Box>
          </Box>
          
          <Chip
            label={company.isActive ? t('common.active') : t('common.inactive')}
            color={company.isActive ? 'success' : 'error'}
            size="small"
            variant={company.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Company Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconPhone size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.phone')}:
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {company.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={14} />
              </IconButton>
            </Box>
          </Grid>

          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconMail size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.email')}:
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
                {company.email}
              </Typography>
              <IconButton
                size="small"
                onClick={handleEmailOpen}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconMail size={14} />
              </IconButton>
            </Box>
          </Grid>

          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconUser size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.contactPerson')}:
              </Typography>
            </Box>
            <Typography variant="body2" fontWeight={500}>
              {company.contactPerson}
            </Typography>
          </Grid>
        </Grid>

        {/* Percentages */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
            {t('deliveryCompanies.form.percentages')}:
          </Typography>
          <Stack direction="row" spacing={1} flexWrap="wrap" gap={0.5}>
            <Chip
              label={`${t('deliveryCompanies.form.companyShare')}: ${company.companySharePercentage}%`}
              size="small"
              variant="outlined"
              color="primary"
            />
            <Chip
              label={`${t('deliveryCompanies.form.visaCommission')}: ${company.visaCollectionCommissionPercentage}%`}
              size="small"
              variant="outlined"
              color="secondary"
            />
            <Chip
              label={`${t('deliveryCompanies.form.tax')}: ${company.taxPercentage}%`}
              size="small"
              variant="outlined"
              color="warning"
            />
          </Stack>
        </Box>

        {/* Notes */}
        {company.notes && (
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
              {t('deliveryCompanies.form.notes')}:
            </Typography>
            <Typography variant="body2">
              {company.notes}
            </Typography>
          </Box>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CompanyRow;

===== src/Pages/pos/delivery/companies/components/CompanyTable.tsx =====
// File: src/pages/delivery/companies/components/CompanyTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconPhone, IconMail } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  rows: DeliveryCompany[];
  onEdit: (company: DeliveryCompany) => void;
  canEdit?: boolean;
  selectedCompanyId?: string;
}

const CompanyTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryCompany>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryCompanies.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'paymentType', 
      headerName: t('deliveryCompanies.form.paymentType'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip
          label={t(`deliveryCompanies.form.${value.toLowerCase()}`)}
          size="small"
          variant="outlined"
          color="primary"
        />
      )
    },
    { 
      field: 'phone', 
      headerName: t('deliveryCompanies.form.phone'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'email', 
      headerName: t('deliveryCompanies.form.email'), 
      width: 200,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`mailto:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconMail size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'companySharePercentage', 
      headerName: t('deliveryCompanies.form.companyShare'), 
      width: 130,
      renderCell: ({ value }) => (
        <Typography variant="body2" color="primary.main" fontWeight={600}>
          {value}%
        </Typography>
      )
    },
    { 
      field: 'contactPerson', 
      headerName: t('deliveryCompanies.form.contactPerson'), 
      width: 150
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CompanyTable;

===== src/Pages/pos/delivery/companies/components/mobile/MobileCompaniesFilter.tsx =====
// File: src/pages/delivery/companies/components/mobile/MobileCompaniesFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface CompaniesFilterState {
  searchQuery: string;
  status: string;
  paymentType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CompaniesFilterState;
  onFiltersChange: (filters: CompaniesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCompaniesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof CompaniesFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      paymentType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.paymentType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryCompanies.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Payment Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('deliveryCompanies.form.paymentType')}</InputLabel>
            <Select
              value={filters.paymentType}
              onChange={(e) => updateFilter('paymentType', e.target.value)}
              label={t('deliveryCompanies.form.paymentType')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="Cash">{t('deliveryCompanies.form.cash')}</MenuItem>
              <MenuItem value="Visa">{t('deliveryCompanies.form.visa')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryCompanies.form.name')}</MenuItem>
              <MenuItem value="companySharePercentage">{t('deliveryCompanies.form.companySharePercentage')}</MenuItem>
              <MenuItem value="phone">{t('deliveryCompanies.form.phone')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCompaniesFilter;

===== src/Pages/pos/delivery/companies/components/PageHeader.tsx =====
// File: src/pages/delivery/companies/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryCompaniesImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  exportData: DeliveryCompany[];
  loading: boolean;
  onDataChange?: () => Promise<void>;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryCompaniesImportExportConfig,
    onExport: () => exportData.map(company => ({
      name: company.name,
      paymentType: company.paymentType,
      companySharePercentage: company.companySharePercentage,
      visaCollectionCommissionPercentage: company.visaCollectionCommissionPercentage,
      taxPercentage: company.taxPercentage,
      phone: company.phone,
      email: company.email,
      contactPerson: company.contactPerson,
      notes: company.notes || '',
      isActive: company.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryCompanies.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/delivery/companies/DeliveryCompaniesPage.tsx =====
// File: src/pages/delivery/companies/DeliveryCompaniesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CompanyTable from './components/CompanyTable';
import CompanyRow from './components/CompanyRow';
import CompanyForm from './components/CompanyForm';
import MobileCompaniesFilter, { CompaniesFilterState } from './components/mobile/MobileCompaniesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryCompaniesApi';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryCompaniesPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [companies, setCompanies] = React.useState<DeliveryCompany[]>([]);
  const [selectedCompany, setSelectedCompany] = React.useState<DeliveryCompany | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryCompany;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<CompaniesFilterState>({
    searchQuery: '',
    status: '',
    paymentType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchCompanies = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setCompanies(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryCompanies.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCompanies();
  }, []);

  const searchCompanies = (query: string) => {
    if (!query.trim()) {
      return companies;
    }
    
    const searchLower = query.toLowerCase();
    return companies.filter(company => 
      company.name.toLowerCase().includes(searchLower) ||
      company.phone.toLowerCase().includes(searchLower) ||
      company.email.toLowerCase().includes(searchLower) ||
      company.contactPerson.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...companies];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(company => 
        company.name.toLowerCase().includes(searchLower) ||
        company.phone.toLowerCase().includes(searchLower) ||
        company.email.toLowerCase().includes(searchLower) ||
        company.contactPerson.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(company => company.isActive === isActive);
    }

    if (mobileFilters.paymentType) {
      result = result.filter(company => company.paymentType === mobileFilters.paymentType);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [companies, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCompanies(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.paymentType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCompanies();
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedCompany = await apiSrv.update(data);
      setCompanies(prev => prev.map(c => c.id === updatedCompany.id ? updatedCompany : c));
      if (selectedCompany && selectedCompany.id === data.id) {
        setSelectedCompany(updatedCompany);
      }
      return updatedCompany;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (company: DeliveryCompany) => {
    setDialog({ open: true, mode: 'edit', current: company });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={companies} 
        loading={loading}
        onDataChange={fetchCompanies}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryCompanies.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryCompanies.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryCompanies.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryCompanies.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryCompanies.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryCompanies.noSearchResults') : t('deliveryCompanies.noCompanies')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(company => (
                  <CompanyRow
                    key={company.id}
                    company={company}
                    onEdit={() => handleEdit(company)}
                    isSelected={selectedCompany?.id === company.id}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <CompanyTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedCompanyId={selectedCompany?.id}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCompaniesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={companies.length}
          filteredResults={displayedData.length}
        />
      )}

      <CompanyForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default DeliveryCompaniesPage;



===== src/Pages/pos/delivery/zones/components/ActionsBar.tsx =====
// File: src/pages/delivery/zones/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryZones.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/delivery/zones/components/mobile/MobileZonesFilter.tsx =====
// File: src/pages/delivery/zones/components/mobile/MobileZonesFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface ZonesFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ZonesFilterState;
  onFiltersChange: (filters: ZonesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileZonesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof ZonesFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryZones.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('deliveryZones.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('deliveryZones.form.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryZones.form.name')}</MenuItem>
              <MenuItem value="deliveryCharge">{t('deliveryZones.form.deliveryCharge')}</MenuItem>
              <MenuItem value="defaultBonus">{t('deliveryZones.form.defaultBonus')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileZonesFilter;

===== src/Pages/pos/delivery/zones/components/PageHeader.tsx =====
// File: src/pages/delivery/zones/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryZonesImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  exportData: DeliveryZone[];
  loading: boolean;
      onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryZonesImportExportConfig,
    onExport: () => exportData.map(zone => ({
      name: zone.name,
      deliveryCharge: zone.deliveryCharge,
      defaultBonus: zone.defaultBonus,
      branchName: zone.branchName || t('deliveryZones.form.allBranches'),
      isActive: zone.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryZones.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/delivery/zones/components/ZoneForm.tsx =====
// File: src/pages/delivery/zones/components/ZoneForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Switch,
  FormControlLabel, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  deliveryCharge: number;
  defaultBonus: number;
  branchId?: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryZone;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const ZoneForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    deliveryCharge: 0,
    defaultBonus: 0,
  branchId: defaultBranch?.id || '', // ⭐ إضافة الفرع الافتراضي
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          deliveryCharge: initialValues.deliveryCharge,
          defaultBonus: initialValues.defaultBonus,
          branchId: initialValues.branchId || defaultBranch?.id || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          deliveryCharge: Number(data.deliveryCharge),
          defaultBonus: Number(data.defaultBonus),
          branchId: data.branchId || null,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          deliveryCharge: Number(data.deliveryCharge),
          defaultBonus: Number(data.defaultBonus)
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryZones.add') : t('deliveryZones.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryZones.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="deliveryCharge"
                control={control}
                rules={{ required: t('deliveryZones.deliveryChargeRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.deliveryCharge')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="defaultBonus"
                control={control}
                rules={{ required: t('deliveryZones.defaultBonusRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.defaultBonus')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

<Grid item xs={12}>
  <Controller
    name="branchId"
    control={control}
    render={({ field }) => (
      <FormControl fullWidth>
        <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
        <Select
          {...field}
          label={t('deliveryZones.form.branch')}
        >
          <MenuItem value="">
            <em>{t('deliveryZones.form.allBranches')}</em>
          </MenuItem>
          {branches.map((branch) => (
            <MenuItem key={branch.id} value={branch.id}>
              {branch.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    )}
  />
</Grid>

            {mode === 'edit' && branches.length > 1 && (
              <Grid item xs={12}>
                <Controller
                  name="branchId"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth>
                      <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
                      <Select
                        {...field}
                        label={t('deliveryZones.form.branch')}
                      >
                        <MenuItem value="">
                          <em>{t('deliveryZones.form.allBranches')}</em>
                        </MenuItem>
                        {branches.map((branch) => (
                          <MenuItem key={branch.id} value={branch.id}>
                            {branch.name}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>
            )}

            {mode === 'edit' && (
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isActive"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('deliveryZones.form.isActive')}
                />
              </Grid>
            )}
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryZones.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryZones.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default ZoneForm;

===== src/Pages/pos/delivery/zones/components/ZoneRow.tsx =====
// File: src/pages/delivery/zones/components/ZoneRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  zone: DeliveryZone;
  onEdit: () => void;
  isSelected?: boolean;
}

const ZoneRow: React.FC<Props> = ({ zone, onEdit, isSelected = false }) => {
  const { t } = useTranslation();

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {zone.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {zone.branchName || t('deliveryZones.form.allBranches')}
            </Typography>
          </Box>
          
          <Chip
            label={zone.isActive ? t('common.active') : t('common.inactive')}
            color={zone.isActive ? 'success' : 'error'}
            size="small"
            variant={zone.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Zone Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryZones.form.deliveryCharge')}:
            </Typography>
            <Typography variant="body2" color="primary.main" fontWeight={600}>
              {zone.deliveryCharge.toFixed(2)} {t('common.currency')}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryZones.form.defaultBonus')}:
            </Typography>
            <Typography variant="body2" color="success.main" fontWeight={600}>
              {zone.defaultBonus.toFixed(2)} {t('common.currency')}
            </Typography>
          </Box>
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default ZoneRow;

===== src/Pages/pos/delivery/zones/components/ZoneTable.tsx =====
// File: src/pages/delivery/zones/components/ZoneTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  rows: DeliveryZone[];
  onEdit: (zone: DeliveryZone) => void;
    selectedZoneId?: string;

}

const ZoneTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryZone>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryZones.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'deliveryCharge', 
      headerName: t('deliveryZones.form.deliveryCharge'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'defaultBonus', 
      headerName: t('deliveryZones.form.defaultBonus'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'success.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('deliveryZones.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('deliveryZones.form.allBranches')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default ZoneTable;

===== src/Pages/pos/delivery/zones/DeliveryZonesPage.tsx =====
// File: src/pages/delivery/zones/DeliveryZonesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import ZoneTable from './components/ZoneTable';
import ZoneRow from './components/ZoneRow';
import ZoneForm from './components/ZoneForm';
import MobileZonesFilter, { ZonesFilterState } from './components/mobile/MobileZonesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryZonesApi';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryZonesPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [zones, setZones] = React.useState<DeliveryZone[]>([]);
  const [selectedZone, setSelectedZone] = React.useState<DeliveryZone | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryZone;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<ZonesFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchZones = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setZones(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryZones.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchZones();
  }, []);

  const searchZones = (query: string) => {
    if (!query.trim()) {
      return zones;
    }
    
    const searchLower = query.toLowerCase();
    return zones.filter(zone => 
      zone.name.toLowerCase().includes(searchLower) ||
      zone.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...zones];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(zone => 
        zone.name.toLowerCase().includes(searchLower) ||
        zone.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(zone => zone.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(zone => zone.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [zones, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchZones(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchZones();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedZone = await apiSrv.update(data);
      setZones(prev => prev.map(z => z.id === updatedZone.id ? updatedZone : z));
      
      if (selectedZone && selectedZone.id === data.id) {
        setSelectedZone(updatedZone);
      }
      
      return updatedZone;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (zone: DeliveryZone) => {
    setDialog({ open: true, mode: 'edit', current: zone });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={zones} 
  loading={loading}
  onDataChange={fetchZones} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryZones.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryZones.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryZones.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryZones.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryZones.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryZones.noSearchResults') : t('deliveryZones.noZones')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(zone => (
                  <ZoneRow
                    key={zone.id}
                    zone={zone}
                    onEdit={() => handleEdit(zone)}
                    isSelected={selectedZone?.id === zone.id}
                  />
                ))
              : (
                  <ZoneTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedZoneId={selectedZone?.id}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileZonesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={zones.length}
          filteredResults={displayedData.length}
        />
      )}

      <ZoneForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      /></Container>
  );
};

export default DeliveryZonesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/pos/hall-captains/components/ActionsBar.tsx =====
// File: src/pages/pos/hall-captains/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('hallCaptains.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/hall-captains/components/CaptainForm.tsx =====
// File: src/pages/pos/hall-captains/components/CaptainForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Switch,
  FormControlLabel, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  phone: string;
  notes: string;
  branchId: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: HallCaptain;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CaptainForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    phone: '',
    notes: '',
    branchId: defaultBranch?.id || '',
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          notes: initialValues.notes || '',
          branchId: initialValues.branchId || defaultBranch?.id || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone: data.phone,
          notes: data.notes,
          branchId: data.branchId,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone: data.phone,
          notes: data.notes,
          branchId: data.branchId,
          isActive: data.isActive
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('hallCaptains.add') : t('hallCaptains.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('hallCaptains.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('hallCaptains.phoneRequired'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('hallCaptains.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="branchId"
                control={control}
                rules={{ required: t('hallCaptains.branchRequired') }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth error={!!fieldState.error}>
                    <InputLabel>{t('hallCaptains.form.branch')}</InputLabel>
                    <Select
                      {...field}
                      label={t('hallCaptains.form.branch')}
                      required
                    >
                      {branches.map((branch) => (
                        <MenuItem key={branch.id} value={branch.id}>
                          {branch.name}
                        </MenuItem>
                      ))}
                    </Select>
                    {fieldState.error && (
                      <Box sx={{ color: 'error.main', fontSize: '0.75rem', mt: 0.5, ml: 2 }}>
                        {fieldState.error.message}
                      </Box>
                    )}
                  </FormControl>
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.notes')}
                    fullWidth
                    multiline
                    rows={3}
                    placeholder={t('hallCaptains.form.notesPlaceholder')}
                  />
                )}
              />
            </Grid>

            {mode === 'edit' && (
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isActive"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('hallCaptains.form.isActive')}
                />
              </Grid>
            )}
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('hallCaptains.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('hallCaptains.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CaptainForm;

===== src/Pages/pos/hall-captains/components/CaptainRow.tsx =====
// File: src/pages/pos/hall-captains/components/CaptainRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  captain: HallCaptain;
  onEdit: () => void;
  canEdit?: boolean;
}

const CaptainRow: React.FC<Props> = ({ 
  captain, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${captain.phone}`, '_self');
  };

  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {captain.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {captain.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={captain.isActive ? t('common.active') : t('common.inactive')}
            color={captain.isActive ? 'success' : 'error'}
            size="small"
            variant={captain.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Captain Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('hallCaptains.form.phone')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {captain.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>

          {captain.notes && (
            <Box>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                {t('hallCaptains.form.notes')}:
              </Typography>
              <Typography variant="body2">
                {captain.notes}
              </Typography>
            </Box>
          )}
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CaptainRow;

===== src/Pages/pos/hall-captains/components/CaptainTable.tsx =====
// File: src/pages/pos/hall-captains/components/CaptainTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  rows: HallCaptain[];
  onEdit: (captain: HallCaptain) => void;
  canEdit?: boolean;
}

const CaptainTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<HallCaptain>[] = [
    { 
      field: 'name', 
      headerName: t('hallCaptains.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone', 
      headerName: t('hallCaptains.form.phone'), 
      width: 180,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={16} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('hallCaptains.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'notes', 
      headerName: t('hallCaptains.form.notes'), 
      width: 250,
      renderCell: ({ value }) => (
        <Typography 
          variant="body2" 
          sx={{ 
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }}
          title={value}
        >
          {value || '-'}
        </Typography>
      )
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CaptainTable;

===== src/Pages/pos/hall-captains/components/mobile/MobileCaptainsFilter.tsx =====
// File: src/pages/pos/hall-captains/components/mobile/MobileCaptainsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface CaptainsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CaptainsFilterState;
  onFiltersChange: (filters: CaptainsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCaptainsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof CaptainsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('hallCaptains.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('hallCaptains.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('hallCaptains.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('hallCaptains.form.name')}</MenuItem>
              <MenuItem value="phone">{t('hallCaptains.form.phone')}</MenuItem>
              <MenuItem value="branchName">{t('hallCaptains.form.branch')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCaptainsFilter;

===== src/Pages/pos/hall-captains/components/PageHeader.tsx =====
// File: src/pages/pos/hall-captains/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { hallCaptainsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  exportData: HallCaptain[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...hallCaptainsImportExportConfig,
    onExport: () => exportData.map(captain => ({
      name: captain.name,
      phone: captain.phone,
      notes: captain.notes || '',
      branchName: captain.branchName || t('common.notSpecified'),
      isActive: captain.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('hallCaptains.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/hall-captains/HallCaptainsPage.tsx =====
// File: src/pages/pos/hall-captains/HallCaptainsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CaptainTable from './components/CaptainTable';
import CaptainRow from './components/CaptainRow';
import CaptainForm from './components/CaptainForm';
import MobileCaptainsFilter, { CaptainsFilterState } from './components/mobile/MobileCaptainsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/hallCaptainsApi';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
}

const HallCaptainsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [captains, setCaptains] = React.useState<HallCaptain[]>([]);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: HallCaptain;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<CaptainsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchCaptains = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setCaptains(data);
    } catch (e: any) {
      setErr(e?.message || t('hallCaptains.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCaptains();
  }, []);

  const searchCaptains = (query: string) => {
    if (!query.trim()) {
      return captains;
    }
    
    const searchLower = query.toLowerCase();
    return captains.filter(captain => 
      captain.name.toLowerCase().includes(searchLower) ||
      captain.phone.toLowerCase().includes(searchLower) ||
      captain.notes?.toLowerCase().includes(searchLower) ||
      captain.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...captains];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(captain => 
        captain.name.toLowerCase().includes(searchLower) ||
        captain.phone.toLowerCase().includes(searchLower) ||
        captain.notes?.toLowerCase().includes(searchLower) ||
        captain.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(captain => captain.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(captain => captain.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [captains, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCaptains(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCaptains();
    } catch (e: any) {
      const msg = e?.message || t('hallCaptains.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchCaptains();
    } catch (e: any) {
      const msg = e?.message || t('hallCaptains.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (captain: HallCaptain) => {
    setDialog({ open: true, mode: 'edit', current: captain });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={captains} 
        loading={loading}
      />
      
      {/* ⭐ تنسيق البحث والإضافة زي الصفحات القديمة */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('hallCaptains.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('hallCaptains.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('hallCaptains.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('hallCaptains.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('hallCaptains.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('hallCaptains.noSearchResults') : t('hallCaptains.noCaptains')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(captain => (
                  <CaptainRow
                    key={captain.id}
                    captain={captain}
                    onEdit={() => handleEdit(captain)}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <CaptainTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCaptainsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={captains.length}
          filteredResults={displayedData.length}
        />
      )}

      <CaptainForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default HallCaptainsPage;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
import React, { useState } from 'react';

const Header: React.FC = () => {
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');

  const orderTypes = ['Takeaway', 'Dine In', 'Delivery'];

  return (
    <div className="header-content">
      {/* Logo */}
      <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />

      {/* Navigation */}
      <nav className="nav-items">
        <a href="#" className="nav-item">
          <img src="/images/img_sending_order.svg" alt="" />
          Today Orders
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_table_02.svg" alt="" />
          Table
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_discount_tag_01.svg" alt="" />
          Discount
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_delete_01.svg" alt="" />
          Void
        </a>
        <select 
          value={selectedOrderType}
          onChange={(e) => setSelectedOrderType(e.target.value)}
          style={{ 
            padding: '0.8rem 1.6rem', 
            borderRadius: '0.4rem',
            border: '0.1rem solid #ccc',
            fontSize: '1.6rem',
            fontFamily: 'Nunito, sans-serif'
          }}
        >
          {orderTypes.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        <button style={{ 
          padding: '0.8rem',
          background: 'none',
          border: 'none',
          cursor: 'pointer'
        }}>
          <img src="/images/img_menu_01.svg" alt="Menu" style={{ width: '2.8rem', height: '2.8rem' }} />
        </button>
      </nav>
    </div>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/PriceSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';

interface PriceSelectionPopupProps {
  product: PosProduct;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  quantity,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  // إقفال الـ popup عند الضغط خارجه
  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  // إقفال الـ popup عند الضغط على Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="popup-overlay" ref={overlayRef}>
      <div className="popup-content">
        <div className="popup-header">
          <h3 className="popup-title">{product.nameArabic}</h3>
          <button className="popup-close" onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className="popup-body">
          <div className="quantity-display">
            الكمية: {quantity}
          </div>
          
          <div className="prices-grid">
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className="price-card"
                onClick={() => onSelectPrice(price)}
              >
                <div className="price-name">{price.nameArabic}</div>
                <div className="price-value">
                  <span className="price">{price.price}</span>
                  <span className="currency">EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/index.tsx =====
// src/Pages/pos/newSales/index.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary, OrderItem, PosPrice } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('1');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  
  // API States
  const [allProducts, setAllProducts] = useState<PosProduct[]>([]);
  const [categories, setCategories] = useState<CategoryItem[]>([]);
  const [displayedProducts, setDisplayedProducts] = useState<PosProduct[]>([]);
  const [loading, setLoading] = useState(false);
  
  // إضافة states جديدة للتحكم في عرض الأطفال
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [parentCategory, setParentCategory] = useState<CategoryItem | null>(null);
  const [allCategories, setAllCategories] = useState<CategoryItem[]>([]);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // Load all data on mount
  useEffect(() => {
    loadAllData();
  }, []);

  // Update displayed products when category or search changes
  useEffect(() => {
    if (searchQuery.trim()) {
      const searchResults = posService.searchProducts(allProducts, searchQuery);
      setDisplayedProducts(searchResults);
    } else if (selectedCategory) {
      const categoryProducts = posService.getProductsByScreenId(allProducts, selectedCategory);
      setDisplayedProducts(categoryProducts);
    } else {
      setDisplayedProducts([]);
    }
  }, [selectedCategory, searchQuery, allProducts]);

  const loadAllData = async () => {
    try {
      setLoading(true);
      
      // جلب كل المنتجات أولاً
      const products = await posService.getAllPosProducts();
      setAllProducts(products);
      
      // ثم جلب الفئات
      const apiCategories = await posService.getAllCategories(products);
      setAllCategories(apiCategories); // حفظ جميع الفئات
      const rootCategories = apiCategories.filter(cat => !cat.parentId);
      setCategories(rootCategories);
      
      if (rootCategories.length > 0) {
        setSelectedCategory(rootCategories[0].id);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  // تحديث handleCategorySelect للمنطق الجديد
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      // إخفاء كل الفئات وإظهار الأطفال فقط
      setShowingChildren(categoryId);
      setParentCategory(category);
      setCategories(category.children);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // دالة الرجوع للفئة الأب
  const handleBackToParent = useCallback(async () => {
    setShowingChildren(null);
    setParentCategory(null);
    
    // إعادة تحميل الفئات الأساسية
    const rootCategories = allCategories.filter(cat => !cat.parentId);
    setCategories(rootCategories);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [allCategories]);

  // التعامل مع ضغط المنتج
  const handleProductClick = useCallback((product: PosProduct) => {
    if (product.hasMultiplePrices) {
      // فتح الـ popup لاختيار السعر
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      // إضافة للفاتورة مباشرة
      addToOrder(product, product.productPrices[0]);
    }
  }, [keypadValue]);

  // إضافة منتج للفاتورة
  const addToOrder = useCallback((product: PosProduct, price: PosPrice) => {
    const quantity = parseInt(keypadValue) || 1;
    const totalPrice = price.price * quantity;
    
    const orderItem: OrderItem = {
      id: `${product.id}_${price.id}_${Date.now()}`,
      product,
      selectedPrice: price,
      quantity,
      totalPrice,
    };

    setOrderItems(prev => [...prev, orderItem]);
    setKeypadValue('1'); // إعادة تعيين الكمية
  }, [keypadValue]);

  // التعامل مع اختيار السعر من الـ popup
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      addToOrder(selectedProduct, price);
    }
    setShowPricePopup(false);
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder]);

  // حساب ملخص الطلب
  const orderSummary: OrderSummary = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const discount = 0;
    const tax = 0;
    const service = 0;
    const total = subtotal - discount + tax + service;

    return {
      items: orderItems,
      subtotal,
      discount,
      tax,
      service,
      total
    };
  }, [orderItems]);

  // حذف منتج من الطلب
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  const handleNumberClick = useCallback((number: string) => {
    if (keypadValue === '1' && number !== '.') {
      setKeypadValue(number);
    } else if (keypadValue !== '0') {
      setKeypadValue(prev => prev + number);
    }
  }, [keypadValue]);

  const handleClearClick = useCallback(() => {
    setKeypadValue('1');
  }, []);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  return (
    <div className="pos-system">
      {/* Top Header Bar */}
      <header className="top-bar">
        <div className="top-bar-content">
          <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />
          <nav className="nav-items">
            <a href="#" className="nav-item active">
              <img src="/images/img_sending_order.svg" alt="" />
              <span>Today Orders</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_table_02.svg" alt="" />
              <span>Table</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_discount_tag_01.svg" alt="" />
              <span>Discount</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_delete_01.svg" alt="" />
              <span>Void</span>
            </a>
            <select className="order-type-select">
              <option>Takeaway</option>
              <option>Dine In</option>
              <option>Delivery</option>
            </select>
            <button className="menu-button">
              <img src="/images/img_menu_01.svg" alt="Menu" />
            </button>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="main-content">
        {/* Left Section - Products Area */}
        <section className="products-section">
          {/* Number Pad Bar */}
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          {/* Action Buttons Bar */}
          <div className="action-buttons-bar">
            <div className="action-chips">
              <button 
                className={`action-chip extra ${selectedChips.includes('extra') ? 'active' : ''}`}
                onClick={() => handleChipClick('extra')}
              >
                <img src="/images/img_addcircle.svg" alt="" />
                <span>Extra</span>
              </button>
              <button 
                className={`action-chip without ${selectedChips.includes('without') ? 'active' : ''}`}
                onClick={() => handleChipClick('without')}
              >
                <img src="/images/img_removecircle.svg" alt="" />
                <span>Without</span>
              </button>
              <button 
                className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
                onClick={() => handleChipClick('offer')}
              >
                <img src="/images/img_tags.svg" alt="" />
                <span>Offer</span>
              </button>
            </div>
            
            <div className="search-container">
              <img src="/images/img_search01.svg" alt="search" className="search-icon" />
              <input
                type="text"
                placeholder="Search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
              <button className="filter-button">
                <img src="/images/img_group_7.svg" alt="Filter" />
              </button>
            </div>
          </div>

          {/* Products Grid */}
          <div className="product-grid">
            {loading ? (
              <div className="loading-message">Loading...</div>
            ) : (
              displayedProducts.map((product) => (
                <button
                  key={product.id}
                  onClick={() => handleProductClick(product)}
                  className="product-card"
                >
                  <img src={product.image} alt={product.name} className="product-image" />
                  <div className="product-info">
                    <div className="product-name">{product.nameArabic}</div>
                    {!product.hasMultiplePrices && product.displayPrice && (
                      <div className="product-price">
                        <span className="price">{product.displayPrice}</span>
                        <span className="currency">EGP</span>
                      </div>
                    )}
                  </div>
                </button>
              ))
            )}
          </div>
        </section>

 {/* Categories Sidebar */}
      <aside className="categories-sidebar">
        <div className="categories-list">
          {/* زر الرجوع إذا كنا نعرض الأطفال */}
          {showingChildren && (
            <button
              onClick={handleBackToParent}
              className="category-item back-button"
            >
              <ArrowBackIcon />
              <span>رجوع</span>
            </button>
          )}
          
          {/* عرض الفئات */}
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
              className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
            >
              <img src={category.image} alt={category.name} />
              <span>{category.nameArabic}</span>
            </button>
          ))}
        </div>
      </aside>

        {/* Order Summary */}
        <aside className="order-summary">
          <div className="order-header">
            <div className="order-number">#123</div>
            <div className="order-total">
              <span className="amount">{orderSummary.total.toFixed(2)}</span>
              <span className="currency">EGP</span>
            </div>
          </div>

          <div className="order-content">
            <h3 className="order-title">Order Details</h3>

            <div className="customer-input">
              <input
                type="text"
                placeholder="Walk in Customer"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                className="customer-field"
              />
              <button className="customer-button">
                <img src="/images/img_group_1000004320.svg" alt="Add customer" />
              </button>
            </div>

            <div className="order-items">
              {orderSummary.items.map((item) => (
                <div key={item.id} className="order-item">
                  <div className="item-details">
                    <button 
                      className="delete-button"
                      onClick={() => removeOrderItem(item.id)}
                    >
                      <img src="/images/img_delete_02.svg" alt="Remove" />
                    </button>
                    <div className="item-info">
                      <div className="item-name">
                        {item.quantity} X {item.product.nameArabic}
                        {/* إضافة اسم الحجم جنب اسم الصنف */}
                        {item.product.hasMultiplePrices && (
                          <span className="item-size-inline"> - {item.selectedPrice.nameArabic}</span>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="item-prices">
                    <div className="item-price">{item.selectedPrice.price}</div>
                    <div className="item-total">{item.totalPrice}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="order-footer">
            <div className="summary-rows">
              <div className="summary-row">
                <span>Sub Total</span>
                <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Discount</span>
                <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Tax</span>
                <span>{orderSummary.tax.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Service</span>
                <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
              </div>
            </div>

            <div className="total-row">
              <span>Total</span>
              <span>{orderSummary.total.toFixed(2)} <small>EGP</small></span>
            </div>

            <div className="action-buttons">
              <button className="action-button send">
                <img src="/images/img_tabler_send.svg" alt="Send" />
                <span>Send</span>
              </button>
              <button className="action-button print">
                <img src="/images/img_printer.svg" alt="Print" />
                <span>Print</span>
              </button>
              <button className="action-button pay">
                <img src="/images/img_payment_02.svg" alt="Pay" />
                <span>Pay</span>
              </button>
            </div>
          </div>
        </aside>
      </main>

      {/* Price Selection Popup */}
      <PriceSelectionPopup
        product={selectedProduct!}
        quantity={parseInt(keypadValue) || 1}
        isOpen={showPricePopup}
        onClose={() => setShowPricePopup(false)}
        onSelectPrice={handlePriceSelect}
      />
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/index.css =====
@import './tailwind.css';
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Aleo:wght@400;700&display=swap');

/* إعداد النظام الأساسي للـ REM مع الأبعاد الصحيحة 2000×1200 */
html {
  font-size: 62.5%; /* 1rem = 10px */
  direction: ltr !important;
  text-align: left !important;
  color-scheme: light only !important;
}

/* Responsive breakpoints */
@media (max-width: 768px) {
  html { font-size: 50%; }
}

@media (min-width: 769px) and (max-width: 1200px) {
  html { font-size: 56.25%; }
}

@media (min-width: 1201px) and (max-width: 1600px) {
  html { font-size: 62.5%; }
}

@media (min-width: 1601px) and (max-width: 2000px) {
  html { font-size: 68.75%; }
}

@media (min-width: 2001px) {
  html { font-size: 75%; }
}

/* إعدادات عامة */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  direction: ltr !important;
  text-align: left !important;
  color-scheme: light only !important;
}

body {
  font-family: 'Nunito', 'Inter', sans-serif;
  background-color: #f5f5f5;
  color: #000;
  font-size: 1.6rem;
  line-height: 1.5;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  direction: ltr !important;
  width: 100%;
  height: 100%;
}

/* Container رئيسي يملأ الشاشة بالكامل */
.pos-system-container {
  width: 100vw;
  height: 100vh;
  min-width: 100vw;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: #f5f5f5;
  overflow: hidden;
  direction: ltr !important;
}

/* Header يملأ العرض بالكامل */
.site-header {
  height: 7.2rem; /* 72px */
  background-color: #ffffff;
  display: flex;
  align-items: center;
  padding: 0 4rem;
  flex-shrink: 0;
  width: 100%;
  box-shadow: 0 0.2rem 0.8rem rgba(0, 0, 0, 0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.logo {
  width: 14rem;
  height: 6rem;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: 2.4rem;
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  font-size: 1.6rem;
  font-weight: 500;
  color: #000;
  text-decoration: none;
  transition: color 0.2s ease;
}

.nav-item:first-child {
  color: #0373ed;
}

.nav-item img {
  width: 1.8rem;
  height: 1.8rem;
}

/* Main Content يملأ المساحة المتبقية */
.main-content {
  flex: 1;
  display: flex;
  gap: 1.5rem;
  padding: 2rem;
  height: calc(100vh - 7.2rem);
  overflow: hidden;
  width: 100%;
    flex-direction: row; /* التأكد من الترتيب الأفقي */
  align-items: stretch; /* جعل جميع العناصر بنفس الارتفاع */
    justify-content: space-between;

}

/* Left Panel - 62% من الشاشة الكاملة */
.left-panel {
  width: 62%;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  overflow: hidden;
  order: 1;
}

/* Numeric Keypad */
.numeric-keypad {
  height: 8.5rem;
  display: flex;
  background-color: #ffffff;
  border: 0.1rem solid rgba(0, 0, 0, 0.3);
  border-radius: 0.8rem;
  overflow: hidden;
  flex-shrink: 0;
  direction: ltr !important;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  height: 100%;
  direction: ltr !important;
}

.keypad-key {
  font-family: 'Aleo', serif;
  font-size: 2.8rem;
  border-right: 0.1rem solid rgba(0, 0, 0, 0.2);
  color: #000;
  background: #ffffff;
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  direction: ltr !important;
  text-align: center !important;
}

.keypad-key:hover {
  background-color: #f8f9fa;
}

.keypad-key:last-child {
  font-family: 'Nunito', sans-serif;
  border-right: none;
}

.keypad-display {
  width: 20rem;
  background-color: #0373ed;
  color: #ffffff;
  font-family: 'Nunito', sans-serif;
  font-size: 3.2rem;
  font-weight: 400;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
  direction: ltr !important;
  text-align: center !important;
}

/* Filter Section */
.filter-section {
  height: 4.8rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1.6rem;
  flex-shrink: 0;
}

.chip-container {
  display: flex;
  gap: 1.2rem;
  flex: 1;
}

.chip {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  padding: 0.8rem 2rem;
  border-radius: 0.6rem;
  font-family: 'Nunito', sans-serif;
  font-size: 2rem;
  font-weight: 500;
  color: #ffffff;
  border: none;
  cursor: pointer;
  transition: opacity 0.2s ease;
  height: 4.8rem;
  direction: ltr !important;
}

.chip:hover {
  opacity: 0.9;
}

.chip.extra { background-color: #23a929; }
.chip.without { background-color: #e53935; }
.chip.offer { background-color: #ffb74d; }

.chip img {
  width: 2rem;
  height: 2rem;
}

.search-container {
  display: flex;
  background-color: #ffffff;
  border-radius: 0.6rem;
  box-shadow: 0 0.8rem 2.4rem rgba(0, 0, 0, 0.15);
  overflow: hidden;
  height: 4.8rem;
}

.search-input {
  width: 28rem;
  height: 4.8rem;
  border: none;
  background: transparent;
  padding: 0 1.6rem 0 4.4rem;
  font-size: 1.6rem;
  outline: none;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.search-icon {
  position: absolute;
  left: 1.6rem;
  top: 50%;
  transform: translateY(-50%);
  width: 1.8rem;
  height: 1.8rem;
}

.filter-button {
  width: 5.6rem;
  height: 4.8rem;
  background-color: #0373ed;
  border: none;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.filter-button:hover {
  background-color: #025bb5;
}

.filter-button img {
  width: 2rem;
  height: 2rem;
}

/* Products Grid */
.products-grid {
  flex: 1;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding: 0.6rem;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(18rem, 1fr));
  gap: 0.6rem;
  align-content: start;
  direction: ltr !important;
}

.products-grid::-webkit-scrollbar {
  display: none;
}

.product-card {
  width: 18rem;
  height: 24rem;
  background-color: #ffffff;
  border-radius: 1.2rem;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  box-shadow: 0 0.2rem 0.6rem rgba(0, 0, 0, 0.1);
  position: relative;
}

.product-card:hover {
  transform: translateY(-0.2rem);
  box-shadow: 0 0.4rem 1rem rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 16rem;
  object-fit: cover;
}

.product-info {
  padding: 0.6rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 8rem;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-weight: 600;
  font-size: 1.4rem;
  color: #000;
  text-align: center;
  direction: ltr !important;
}

.product-price {
  font-family: 'Cairo', sans-serif;
  font-weight: 600;
  font-size: 1.8rem;
  color: #000;
  direction: ltr !important;
  text-align: left !important;
}

.product-price .currency {
  font-size: 1rem;
}

/* Category Sidebar - 9% من الشاشة الكاملة */
.category-sidebar {
  order: 2;
  width: 9%;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding: 1.2rem;
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  flex-shrink: 0; /* منع الانكماش */
}

.category-sidebar::-webkit-scrollbar {
  display: none;
}

.category-item {
  width: 100%;
  min-width: 12rem;
  height: 10rem;
  background-color: #ffffff;
  border-radius: 1.2rem;
  padding: 1.2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.6rem;
  text-align: center;
  font-family: 'Cairo', sans-serif;
  font-size: 2rem;
  font-weight: 400;
  transition: all 0.2s ease;
  cursor: pointer;
  border: 0.2rem solid transparent;
  flex-shrink: 0;
  color: #000;
  direction: ltr !important;
}

.category-item:hover {
  background-color: #f8f9fa;
  transform: translateY(-0.2rem);
  box-shadow: 0 0.4rem 1rem rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border: 0.2rem solid #0373ed;
}

.category-item img {
  width: 4.8rem;
  height: 4.8rem;
  object-fit: contain;
}

/* إضافة responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .category-sidebar {
    padding: 1rem;
    gap: 1rem;
  }
  
  .category-item {
    height: 8rem;
    padding: 1rem;
    font-size: 1.6rem;
  }
  
  .category-item img {
    width: 3.6rem;
    height: 3.6rem;
  }
}

@media (max-width: 1024px) {
  .category-sidebar {
    padding: 0.8rem;
    gap: 0.8rem;
  }
  
  .category-item {
    height: 7rem;
    padding: 0.8rem;
    font-size: 1.4rem;
  }
  
  .category-item img {
    width: 3rem;
    height: 3rem;
  }
}

/* Order Panel - 29% من الشاشة الكاملة */
.order-panel {
    order: 3;
  width: 29%;
  background-color: #ffffff;
  border-radius: 1.2rem;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 0.2rem 0.6rem rgba(0, 0, 0, 0.1);
    flex-shrink: 0; /* منع الانكماش */

}

.order-header {
  height: 5.6rem;
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background-color: #0373ed;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem 0 0 0;
  font-size: 2rem;
  font-weight: 700;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: center !important;
}

.order-total {
  width: 13rem;
  border: 0.1rem solid #0373ed;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0 1.2rem 0 0;
  font-size: 2.4rem;
  font-weight: 700;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: center !important;
}

.order-body {
  flex: 1;
  padding: 2rem 1.4rem;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  display: flex;
  flex-direction: column;
}

.order-body::-webkit-scrollbar {
  display: none;
}

.order-title {
  font-size: 1.8rem;
  font-weight: 700;
  margin-bottom: 1.4rem;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.customer-input-container {
  display: flex;
  margin-bottom: 2rem;
  border: 0.1rem solid rgba(0, 0, 0, 0.3);
  border-radius: 0.4rem;
  overflow: hidden;
}

.customer-input {
  flex: 1;
  padding: 0.8rem 1.2rem;
  font-size: 1.2rem;
  border: none;
  outline: none;
  background: transparent;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.customer-button {
  width: 3.6rem;
  height: 3.2rem;
  background-color: #0373ed;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.customer-button img {
  width: 1.6rem;
  height: 1.6rem;
}

/* Order Items */
.order-items {
  flex: 1;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  margin-bottom: 2rem;
  direction: ltr !important;
}

.order-items::-webkit-scrollbar {
  display: none;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: 0.6rem;
  margin-bottom: 0.6rem;
  border-bottom: 0.05rem solid rgba(0, 0, 0, 0.2);
}

.item-details {
  display: flex;
  gap: 0.6rem;
  align-items: flex-start;
  flex: 1;
}

.delete-button {
  margin-top: 0.2rem;
  padding: 0.2rem;
  background: none;
  border: none;
  cursor: pointer;
}

.delete-button img {
  width: 1.4rem;
  height: 1.4rem;
}

.item-info {
  flex: 1;
}

.item-name {
  font-size: 1.4rem;
  font-weight: 600;
  font-family: 'Nunito', sans-serif;
  margin-bottom: 0.3rem;
  direction: ltr !important;
  text-align: left !important;
}

.item-extras {
  font-size: 1rem;
  color: rgba(0, 0, 0, 0.5);
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: left !important;
}

.item-prices {
  text-align: right;
  flex-shrink: 0;
}

.item-price {
  font-size: 1.4rem;
  font-weight: 600;
  font-family: 'Nunito', sans-serif;
  margin-bottom: 0.3rem;
  direction: ltr !important;
  text-align: right !important;
}

.item-total {
  font-size: 1.4rem;
  font-weight: 600;
  color: #0373ed;
  font-family: 'Nunito', sans-serif;
  direction: ltr !important;
  text-align: right !important;
}

/* Order Summary */
.order-summary {
  padding: 2rem 1.4rem;
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  margin-bottom: 2rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  font-size: 1.4rem;
  font-weight: 500;
  font-family: 'Nunito', sans-serif;
}

.summary-row .value {
  font-weight: 700;
}

.summary-total {
  display: flex;
  justify-content: space-between;
  font-size: 1.8rem;
  font-weight: 700;
  padding-top: 2rem;
  border-top: 0.1rem solid rgba(0, 0, 0, 0.3);
  margin-bottom: 2rem;
  font-family: 'Nunito', sans-serif;
}

/* Action Buttons */
.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.2rem;
}

.action-button {
  height: 5.2rem;
  border-radius: 0.4rem;
  color: #ffffff;
  font-size: 1.6rem;
  font-weight: 700;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 0.3rem;
  transition: opacity 0.2s ease;
  font-family: 'Nunito', sans-serif;
  border: none;
  cursor: pointer;
  direction: ltr !important;
}

.action-button img {
  width: 1.6rem;
  height: 1.6rem;
}

.action-button:hover {
  opacity: 0.9;
}

.send-button { background-color: #e53935; }
.print-button { background-color: #0373ed; }
.pay-button { background-color: #23a929; }

/* إخفاء الـ scrollbar تماماً */
.invisible-scroll {
  overflow-y: auto;
  overflow-x: hidden;
  scrollbar-width: none;
  -ms-overflow-style: none;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  direction: ltr !important;
}

.invisible-scroll::-webkit-scrollbar {
  display: none;
}

/* تحسين scroll للمنتجات فقط في Order Details */
.order-products-list {
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  direction: ltr !important;
  max-height: 30rem;
  margin-bottom: 1.6rem;
}

.order-products-list::-webkit-scrollbar {
  display: none;
}

/* Utility Classes */
.hidden-scroll {
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.hidden-scroll::-webkit-scrollbar {
  display: none;
}

/* فرض LTR على جميع العناصر */
[dir="rtl"], .rtl {
  direction: ltr !important;
  text-align: left !important;
}

.flex {
  direction: ltr !important;
}

.grid {
  direction: ltr !important;
}

html[dir="rtl"], 
body[dir="rtl"], 
*[dir="rtl"] {
  direction: ltr !important;
  text-align: left !important;
}

.pos-system-container,
.pos-system-container * {
  direction: ltr !important;
}

/* استثناءات للنصوص العربية */
.category-name,
.product-name-arabic,
.order-item-arabic {
  text-align: center !important;
  direction: ltr !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .main-content {
    flex-direction: column;
    padding: 1.2rem;
  }
  
  .left-panel, .category-sidebar, .order-panel {
    width: 100%;
    height: auto;
  }
  
  .category-sidebar {
    flex-direction: row;
    flex-wrap: wrap;
    height: auto;
    overflow: visible;
  }
  
  .category-item {
    flex-grow: 1;
    min-width: 8rem;
  }
}

@media (min-width: 1920px) {
  .left-panel {
    width: 68%;
  }
  
  .category-sidebar {
    width: 7%;
  }
  
  .order-panel {
    width: 25%;
  }
}

@media (min-width: 2560px) {
  .pos-system-container {
    width: 100vw;
  }
}

/* Print Styles */
@media print {
  .pos-system-container {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
  
  * {
    direction: ltr !important;
  }
}

/* High DPI Screens */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  img {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }
}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}

/* Loading State */
.loading {
  opacity: 0.7;
  pointer-events: none;
}

/* Error State */
.error {
  border-color: #e53935 !important;
  background-color: rgba(229, 57, 53, 0.1) !important;
}

/* Success State */
.success {
  border-color: #23a929 !important;
  background-color: rgba(35, 169, 41, 0.1) !important;
}


/* منع التداخل بين العناصر */
.main-content > * {
  flex-shrink: 0; /* منع انكماش أي عنصر */
  min-width: 0; /* السماح بالتقلص عند الحاجة */
}

/* تأكيد عدم التداخل */
.category-sidebar {
  position: relative;
  z-index: 1;
}

.order-panel {
  position: relative;
  z-index: 1;
}

/* للشاشات الصغيرة */
@media (max-width: 1440px) {
  .left-panel {
    width: 58%;
  }
  
  .category-sidebar {
    width: 12%;
  }
  
  .order-panel {
    width: 29%;
  }
  
  .main-content {
    gap: 1rem;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .left-panel {
    width: 64%;
  }
  
  .category-sidebar {
    width: 8%;
  }
  
  .order-panel {
    width: 27.5%;
  }
  
  .main-content {
    gap: 1rem;
  }
}
===== src/Pages/pos/newSales/styles/popup.css =====
/* src/Pages/pos/newSales/styles/popup.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.popup-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.popup-title {
  font-size: 20px;
  font-weight: 700;
  color: var(--text-primary);
  margin: 0;
}

.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
}


.popup-close:hover {
  background: #f0f0f0;
  transform: scale(1.1);
}

.popup-close img {
  width: 20px;
  height: 20px;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
  transition: color 0.2s ease;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

.popup-body {
  padding: 20px;
}

.quantity-display {
  text-align: center;
  font-size: 18px;
  font-weight: 600;
  color: var(--primary-blue);
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 8px;
}

.prices-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
}

.price-card {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.price-card:hover {
  border-color: var(--primary-blue);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.price-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  text-align: center;
}

.price-value {
  display: flex;
  align-items: baseline;
  gap: 5px;
}

.price-value .price {
  font-size: 20px;
  font-weight: 700;
  color: var(--primary-blue);
}

.price-value .currency {
  font-size: 14px;
  color: var(--text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .popup-content {
    width: 95%;
    margin: 20px;
  }
  
  .prices-grid {
    grid-template-columns: 1fr;
  }
  
  .popup-header {
    padding: 15px;
  }
  
  .popup-body {
    padding: 15px;
  }
}



@media (max-width: 768px) {
  .popup-close {
    width: 32px;
    height: 32px;
    padding: 6px;
  }
  
  .popup-close .MuiSvgIcon-root {
    font-size: 18px !important;
  }
}
===== src/Pages/pos/newSales/styles/responsive.css =====
/* src/Pages/pos/newSales/styles/responsive.css */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');


html[dir="rtl"] .pos-system,
html[dir="rtl"] .pos-system * {
  direction: ltr !important;
}


/* تحديد نظام الوحدات المرن */
:root {
  --base-font-size: clamp(10px, 0.8vw, 16px);
  --scale-factor: clamp(0.8, 1vw, 1.2);
  
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
  --spacing-xxl: calc(3rem * var(--scale-factor));
  
  /* Component heights */
  --header-height: clamp(60px, 8vh, 100px);
  --keypad-height: clamp(80px, 10vh, 120px);
  --action-bar-height: clamp(50px, 7vh, 80px);
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: var(--base-font-size);
  height: 100%;
}

body {
  font-family: 'Nunito', sans-serif;
  background-color: var(--bg-main);
  color: var(--text-primary);
  height: 100%;
  overflow: hidden;
    direction: ltr !important;

}

/* Main container */
.pos-system {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
    direction: ltr !important;
}

/* Top Bar */
.top-bar {
  height: var(--header-height);
  background: var(--bg-white);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.top-bar-content {
  height: 100%;
  padding: 0 var(--spacing-xl);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  text-decoration: none;
  color: var(--text-primary);
  font-size: clamp(12px, 1.2vw, 18px);
  font-weight: 500;
  transition: all 0.2s ease;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: var(--primary-blue);
}

.nav-item img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

.order-type-select {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: clamp(12px, 1.2vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: var(--bg-white);
  min-width: 120px;
}

.menu-button {
  padding: var(--spacing-sm);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(20px, 2vw, 28px);
  height: clamp(20px, 2vw, 28px);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  overflow: hidden;
}

/* Products Section */
.products-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  overflow: hidden;
}

/* Number Pad Bar */
.number-pad-bar {
  height: var(--keypad-height);
  display: flex;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1px;
  background: var(--border-color);
}

.keypad-key {
  background: var(--bg-white);
  border: none;
  font-size: clamp(18px, 2.5vw, 32px);
  font-weight: 600;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypad-key:hover {
  background: #f8f9fa;
}

.keypad-display {
  width: clamp(120px, 15vw, 200px);
  background: var(--primary-blue);
  color: white;
  font-size: clamp(20px, 2.8vw, 36px);
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Action Buttons Bar */
.action-buttons-bar {
  height: var(--action-bar-height);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  flex-shrink: 0;
}

.action-chips {
  display: flex;
  gap: var(--spacing-md);
}

.action-chip {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-md) var(--spacing-md);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(12px, 1.4vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.action-chip img {
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
}

.action-chip.extra { background: var(--primary-green); }
.action-chip.without { background: var(--primary-red); }
.action-chip.offer { background: var(--primary-orange); }

.action-chip:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.search-container {
  position: relative;
  display: flex;
  background: var(--bg-white);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  height: 85%;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
  z-index: 1;
}

.search-input {
  width: clamp(200px, 25vw, 350px);
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: calc(var(--spacing-md) * 2 + 20px);
  border: none;
  font-size: clamp(12px, 1.4vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
  height: 100%;
}

.search-input:focus {
  outline: none;
}

.filter-button {
  width: clamp(40px, 5vw, 60px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.filter-button:hover {
  background: #025bb5;
}

.filter-button img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

/* Product Grid */
.product-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: var(--spacing-sm);
  padding: var(--spacing-xs);
    overflow-y: auto;
  scrollbar-width: none; /* Firefox */
}


.product-grid::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-grid::-webkit-scrollbar-track {
  background: transparent;
}

.product-grid::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.product-card {
  aspect-ratio: 3/4;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: none;
  display: flex;
  flex-direction: column;
    min-width: 0; /* للسماح بالتقلص */

}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 70%;
  object-fit: cover;
    flex-shrink: 0;

}

.product-info {
  height: 30%;
  padding: clamp(4px, 0.8vw, 12px);
  display: flex;
  flex-direction: row; /* تغيير من column إلى row */
  justify-content: space-between;
  align-items: center;
  gap: clamp(4px, 0.6vw, 8px);
  width: 100%;
  min-height: 0;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1.2vw, 16px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
  text-align: right; /* محاذاة لليمين للنص العربي */
  flex: 1; /* يأخذ المساحة المتاحة */
  min-width: 0; /* يسمح بالتقلص */
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* السماح بسطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: clamp(2px, 0.3vw, 4px);
  width: 100%;
}

.product-price .price {
  font-size: clamp(9px, 1.4vw, 18px);
  font-weight: 700;
  color: var(--text-primary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}
.product-price .currency {
  font-size: clamp(7px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-secondary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}

/* Categories Sidebar */
.categories-sidebar {
  width: clamp(80px, 10vw, 120px);
  background: transparent;
  flex-shrink: 0;
}

.categories-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  height: 100%;
  overflow-y: auto;
  padding: var(--spacing-sm);
 scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.categories-list::-webkit-scrollbar {
  width: 4px;
}

.categories-list::-webkit-scrollbar-track {
  background: transparent;
}

.categories-list::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.category-item {
  aspect-ratio: 1;
  background: var(--bg-white);
  border-radius: 8px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-sm);
  text-align: center;
}

.category-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border-color: var(--primary-blue);
}

.category-item img {
  width: clamp(24px, 3vw, 48px);
  height: clamp(24px, 3vw, 48px);
  object-fit: contain;
}

.category-item span {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
}

/* Order Summary */
.order-summary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.order-header {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.order-total {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.order-total .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.order-total .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

.order-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.order-content::-webkit-scrollbar {
  width: 6px;
}

.order-content::-webkit-scrollbar-track {
  background: transparent;
}

.order-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.order-title {
  font-size: clamp(14px, 1.6vw, 20px);
  font-weight: 700;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  
}

.customer-input {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customer-field {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
}

.customer-field:focus {
  outline: none;
}

.customer-button {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customer-button:hover {
  background: #025bb5;
}

.customer-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.order-items {
  max-height: 50vh; /* زيادة من 40vh إلى 50vh */
  overflow-y: auto;
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.order-items::-webkit-scrollbar {
  width: 4px;
}

.order-items::-webkit-scrollbar-track {
  background: transparent;
}

.order-items::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.item-details {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0; /* للسماح بالتقلص */
}

.delete-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.delete-button:hover {
  background: rgba(229, 57, 53, 0.1);
}

.delete-button img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.item-info {
  flex: 1;
  min-width: 0;
}

.item-name {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
}

.item-extra {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.extra-price,
.extra-total {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
}

.item-prices {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  min-width: fit-content;
}

.item-price::after {
  content: "|";
  margin-left: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: normal;
}

.item-price {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
}

.item-total {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
}

.order-footer {
  padding: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm); /* كان var(--spacing-md) */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px); /* كان 11px, 1.3vw, 16px */
  font-weight: 500;
  line-height: 1.3; /* إضافة line-height للوضوح */
}

.summary-row span:last-child {
  font-weight: 700;
  color: var(--text-primary); /* تأكيد اللون */
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px); /* كان 14px, 1.6vw, 20px */
  font-weight: 700;
  padding-top: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.action-button {
  height: clamp(40px, 6vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
}

.action-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.action-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.action-button.send { background: var(--primary-red); }
.action-button.print { background: var(--primary-blue); }
.action-button.pay { background: var(--primary-green); }

/* Responsive breakpoints */
@media (max-width: 1366px) {
  :root {
    --scale-factor: 0.9;
  }
    .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.8);
  }
  
  .order-items {
    max-height: 45vh;
  }
  
}

@media (max-width: 1024px) {
  :root {
    --scale-factor: 0.8;
  }
  
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .order-items {
    max-height: 42vh;
  }
}

@media (min-width: 1920px) {
  :root {
    --scale-factor: 1.1;
  }
}

@media (min-width: 2560px) {
  :root {
    --scale-factor: 1.3;
  }
}

/* Print styles */
@media print {
  .pos-system {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
}



/* إضافة media query لمنطقة 1400-1600px */
@media (min-width: 1400px) and (max-width: 1600px) {
  :root {
    --scale-factor: 0.95; /* قيمة وسط */
    --base-font-size: clamp(12px, 1vw, 18px); /* تحسين الخط */
  }
  
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: var(--spacing-md);
  }
  
  /* تثبيت ارتفاعات العناصر */
  .action-buttons-bar {
    height: clamp(55px, 8vh, 85px);
  }
  
  .number-pad-bar {
    height: clamp(85px, 11vh, 125px);
  }
  
  .top-bar {
    height: clamp(65px, 9vh, 105px);
  }
}

.loading-message {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  font-size: 1.6rem;
  color: var(--text-secondary);
}

.item-size {
  font-size: clamp(9px, 1vw, 12px);
  color: var(--primary-blue);
  font-weight: 500;
}

.product-card .product-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-xs);
}

.product-card .product-name {
  order: 1;
}

.product-card .product-price {
  order: 2;
}


.item-size-inline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em; /* أصغر قليلاً من اسم الصنف */
}

.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

/* تحسين responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .product-name {
    font-size: clamp(7px, 1.1vw, 14px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(8px, 1.3vw, 16px);
  }
  
  .product-price .currency {
    font-size: clamp(6px, 0.9vw, 12px);
  }
}

@media (max-width: 1024px) {
  .product-name {
    font-size: clamp(6px, 1vw, 12px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(7px, 1.2vw, 14px);
  }
  
  .product-price .currency {
    font-size: clamp(5px, 0.8vw, 10px);
  }
  
  .item-prices {
    flex-direction: column;
    gap: 2px;
    align-items: flex-end;
  }
  
  .item-price::after {
    display: none;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .product-name {
    font-size: clamp(10px, 1.4vw, 20px);
  }
  
  .product-price .price {
    font-size: clamp(12px, 1.6vw, 22px);
  }
  
  .product-price .currency {
    font-size: clamp(9px, 1.2vw, 18px);
  }
}

/* جعل الصفحة دائماً LTR */
.pos-system {
  direction: ltr !important;
}

.pos-system * {
  direction: ltr !important;
}

/* تحسين شكل الـ Material UI Icons */
.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

.back-button .MuiSvgIcon-root {
  font-size: 18px !important;
  color: var(--text-primary) !important;
}

/* تحسين شكل زر الإغلاق في الـ popup */
.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup-close:hover {
  background: #f0f0f0;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

/* التأكد من أن الـ popup overlay يمكن الضغط عليه */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  cursor: pointer; /* إضافة cursor للإشارة أنه قابل للضغط */
}

.popup-content {
  cursor: default; /* إزالة cursor من المحتوى */
  /* باقي الـ styles كما هي */
}

/* إضافة animation للـ popup */
.popup-overlay {
  animation: fadeIn 0.2s ease-out;
}

.popup-content {
  animation: slideIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  notes?: string;
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}

===== src/Pages/pos/offers/components/ActionsBar.tsx =====
// File: src/pages/pos/offers/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('offers.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/offers/components/mobile/MobileOffersFilter.tsx =====
// File: src/pages/pos/offers/components/mobile/MobileOffersFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface OffersFilterState {
  searchQuery: string;
  status: string;
  priceType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: OffersFilterState;
  onFiltersChange: (filters: OffersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileOffersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof OffersFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      priceType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.priceType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('offers.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Price Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('offers.form.priceType')}</InputLabel>
            <Select
              value={filters.priceType}
              onChange={(e) => updateFilter('priceType', e.target.value)}
              label={t('offers.form.priceType')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="Fixed">{t('offers.form.fixed')}</MenuItem>
              <MenuItem value="Dynamic">{t('offers.form.dynamic')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('offers.form.name')}</MenuItem>
              <MenuItem value="fixedPrice">{t('offers.form.fixedPrice')}</MenuItem>
              <MenuItem value="startDate">{t('offers.form.startDate')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileOffersFilter;

===== src/Pages/pos/offers/components/OfferForm.tsx =====
// File: src/pages/pos/offers/components/OfferForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Typography, FormControl, InputLabel, Select, MenuItem,
  Switch, FormControlLabel, Card, CardContent, IconButton, Box,
  Checkbox, useMediaQuery, useTheme, Tabs, Tab
} from '@mui/material';
import { 
  IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus, 
  IconUsers, IconShoppingCart 
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Offer, OfferGroup, OfferItem } from 'src/utils/api/pagesApi/offersApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import ProductMultiSelectDialog from './ProductMultiSelectDialog';

type FormValues = {
  name: string;
  priceType: 'Fixed' | 'Dynamic';
  fixedPrice: number;
  startDate: string;
  endDate: string;
  orderTypeId: string;
  isActive: boolean;
  offerGroups: OfferGroup[];
  offerItems: OfferItem[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Offer;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`offer-tabpanel-${index}`}
      aria-labelledby={`offer-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 2 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const OfferForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [, setGroups] = React.useState<any[]>([]);
  const [, setProducts] = React.useState<any[]>([]);
  const [productPrices, setProductPrices] = React.useState<any[]>([]);
  const [multiSelectOpen, setMultiSelectOpen] = React.useState(false);
  const [currentGroupIndex, setCurrentGroupIndex] = React.useState<number | null>(null);
  const [tabValue, setTabValue] = React.useState(0);

  const defaults: FormValues = {
    name: '',
    priceType: 'Fixed',
    fixedPrice: 0,
    startDate: '',
    endDate: '',
    orderTypeId: '1',
    isActive: true,
    offerGroups: [],
    offerItems: []
  };

  const { control, handleSubmit, reset, watch, setValue, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: groupFields, append: appendGroup, remove: removeGroup } = useFieldArray({
    control,
    name: 'offerGroups'
  });

  const { fields: itemFields, append: appendItem, remove: removeItem } = useFieldArray({
    control,
    name: 'offerItems'
  });

  // تحميل البيانات المطلوبة
  React.useEffect(() => {
    const loadData = async () => {
      try {
        const [groupsData, productsData] = await Promise.all([
          groupsApi.getAll(),
          productsApi.getAll(1, 100)
        ]);
        
        const flatGroups = flattenGroups(groupsData);
        setGroups(flatGroups);
        setProducts(productsData.data);

        const allProductPrices = productsData.data.flatMap(product => 
          product.productPrices.map(price => ({
            ...price,
            productName: product.name,
            displayName: `${product.name} - ${price.posPriceName}`,
            fullDisplayName: `${product.name} - ${price.posPriceName} (${price.price} ${t('common.currency')})`
          }))
        );
        setProductPrices(allProductPrices);
      } catch (error) {
        console.error('Error loading data:', error);
      }
    };

    if (open) {
      loadData();
    }
  }, [open, t]);

  const flattenGroups = (groups: any[]): any[] => {
    const result: any[] = [];
    
    const flatten = (items: any[], level = 0) => {
      items.forEach(item => {
        result.push({
          ...item,
          displayName: '  '.repeat(level) + item.name,
          level
        });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          priceType: initialValues.priceType,
          fixedPrice: initialValues.fixedPrice || 0,
          startDate: initialValues.startDate ? initialValues.startDate.split('T')[0] : '',
          endDate: initialValues.endDate ? initialValues.endDate.split('T')[0] : '',
          orderTypeId: initialValues.orderTypeId || '1',
          isActive: initialValues.isActive,
          offerGroups: initialValues.offerGroups || [],
          offerItems: initialValues.offerItems || []
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const addOfferGroup = () => {
    appendGroup({
      title: '',
      minSelection: 1,
      maxSelection: 1,
      isMandatory: true,
      isActive: true
    });
    setTabValue(0);
  };

  const addOfferItem = () => {
    setCurrentGroupIndex(null);
    setMultiSelectOpen(true);
  };

  const addItemToGroup = (groupIndex: number) => {
    setCurrentGroupIndex(groupIndex);
    setMultiSelectOpen(true);
  };

const handleMultiSelectSubmit = (selectedProducts: Array<{
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}>) => {
  console.log('Received selected products:', selectedProducts);
  
  if (currentGroupIndex !== null) {
    // للمجموعات: استبدال كامل للعناصر
    const groupId = groupFields[currentGroupIndex].id || `group_${currentGroupIndex}`;
    
    // إزالة كل العناصر الموجودة في هذه المجموعة
    const itemsToRemove: number[] = [];
    itemFields.forEach((_item, index) => {
      const itemGroupId = watch(`offerItems.${index}.offerGroupId`);
      if (itemGroupId === groupId) {
        itemsToRemove.push(index);
      }
    });
    
    // إزالة من الآخر للأول لتجنب تغيير الفهارس
    itemsToRemove.reverse().forEach(index => {
      console.log('Removing item at index:', index);
      removeItem(index);
    });
    
    // إضافة كل المنتجات المختارة الجديدة
    selectedProducts.forEach(product => {
      console.log('Adding product to group:', product);
      appendItem({
        productPriceId: product.productPriceId,
        offerGroupId: groupId,
        quantity: 1,
        isDefaultSelected: true,
        useOriginalPrice: true,
        customPrice: 0,
        isActive: true
      });
    });
    
    setTabValue(0);
  } else {
    // للعناصر الثابتة: استبدال كامل للعناصر
    
    // إزالة كل العناصر الثابتة الموجودة
    const itemsToRemove: number[] = [];
    itemFields.forEach((_item, index) => {
      const itemGroupId = watch(`offerItems.${index}.offerGroupId`);
      if (!itemGroupId) {
        itemsToRemove.push(index);
      }
    });
    
    // إزالة من الآخر للأول لتجنب تغيير الفهارس
    itemsToRemove.reverse().forEach(index => {
      console.log('Removing fixed item at index:', index);
      removeItem(index);
    });
    
    // إضافة كل المنتجات المختارة الجديدة
    selectedProducts.forEach(product => {
      console.log('Adding fixed product:', product);
      appendItem({
        productPriceId: product.productPriceId,
        quantity: 1,
        isDefaultSelected: true,
        useOriginalPrice: true,
        customPrice: 0,
        isActive: true
      });
    });
    
    setTabValue(1);
  }
  
  setMultiSelectOpen(false);
  setCurrentGroupIndex(null);
};

  const getGroupItems = (groupIndex: number) => {
    const groupId = groupFields[groupIndex].id || `group_${groupIndex}`;
    return itemFields.filter((_, index) => 
      watch(`offerItems.${index}.offerGroupId`) === groupId
    );
  };

  const getNonGroupItems = () => {
    return itemFields.filter((_, index) => 
      !watch(`offerItems.${index}.offerGroupId`)
    );
  };

  const getPreSelectedItems = () => {
    if (currentGroupIndex !== null) {
      const groupId = groupFields[currentGroupIndex].id || `group_${currentGroupIndex}`;
      return itemFields
        .filter((_, index) => watch(`offerItems.${index}.offerGroupId`) === groupId)
        .map((_, index) => watch(`offerItems.${index}.productPriceId`))
        .filter(Boolean);
    } else {
      return itemFields
        .filter((_, index) => !watch(`offerItems.${index}.offerGroupId`))
        .map((_, index) => watch(`offerItems.${index}.productPriceId`))
        .filter(Boolean);
    }
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          priceType: data.priceType,
          fixedPrice: Number(data.fixedPrice),
          startDate: new Date(data.startDate).toISOString(),
          endDate: new Date(data.endDate).toISOString(),
          orderTypeId: data.orderTypeId,
          isActive: data.isActive,
          offerGroups: data.offerGroups.map(group => ({
            ...(group.id && { id: group.id }),
            ...(initialValues.id && { offerId: initialValues.id }),
            title: group.title,
            minSelection: Number(group.minSelection),
            maxSelection: Number(group.maxSelection),
            isMandatory: group.isMandatory,
            isActive: group.isActive
          })),
          offerItems: data.offerItems.map(item => ({
            ...(item.id && { id: item.id }),
            ...(initialValues.id && { offerId: initialValues.id }),
            productPriceId: item.productPriceId,
            offerGroupId: item.offerGroupId || null,
            quantity: Number(item.quantity),
            isDefaultSelected: true,
            useOriginalPrice: item.useOriginalPrice,
            customPrice: item.useOriginalPrice ? null : Number(item.customPrice),
            isActive: item.isActive
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          priceType: data.priceType,
          fixedPrice: Number(data.fixedPrice),
          startDate: new Date(data.startDate).toISOString(),
          endDate: new Date(data.endDate).toISOString(),
          orderTypeId: data.orderTypeId,
          isActive: data.isActive,
          offerGroups: data.offerGroups.map(group => ({
            title: group.title,
            minSelection: Number(group.minSelection),
            maxSelection: Number(group.maxSelection),
            isMandatory: group.isMandatory,
            isActive: group.isActive
          })),
          offerItems: data.offerItems.map(item => ({
            productPriceId: item.productPriceId,
            offerGroupId: item.offerGroupId || null,
            quantity: Number(item.quantity),
            isDefaultSelected: true,
            useOriginalPrice: item.useOriginalPrice,
            customPrice: item.useOriginalPrice ? null : Number(item.customPrice),
            isActive: item.isActive
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      // Error handled by global error handler
    } finally {
      setIsSubmitting(false);
    }
  };

  // مكون لعرض العناصر في 3 أعمدة مع تمييز المجموعات والعناصر الثابتة
  const ItemsGrid: React.FC<{ items: any[], groupIndex?: number }> = ({ items, groupIndex }) => {
    const isGroupItems = groupIndex !== undefined;
    
    return (
      <Grid container spacing={1}>
        {items.map((item, itemIndex) => {
          const actualIndex = itemFields.findIndex(field => field.id === item.id);
          
          if (actualIndex === -1) return null;
          
          const productPrice = productPrices.find(p => p.id === watch(`offerItems.${actualIndex}.productPriceId`));
          const useOriginalPrice = watch(`offerItems.${actualIndex}.useOriginalPrice`);
          
          return (
            <Grid item xs={12} md={4} key={item.id}>
              <Box sx={{ 
                p: 1,
                border: 2, // زيادة سمك البوردر للتمييز
                borderColor: isGroupItems ? 'primary.main' : 'secondary.main', // ألوان مختلفة للتمييز
                borderRadius: 1,
                backgroundColor: itemIndex % 2 === 0 ? 
                  (isGroupItems ? 'primary.50' : 'secondary.50') : 
                  'background.paper',
                minHeight: 80,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'space-between',
                position: 'relative'
              }}>
                {/* شارة للتمييز */}
                <Box sx={{
                  position: 'absolute',
                  top: -1,
                  right: -1,
                  backgroundColor: isGroupItems ? 'primary.main' : 'secondary.main',
                  color: 'white',
                  px: 0.5,
                  py: 0.25,
                  borderRadius: '0 0 0 4px',
                  fontSize: '0.6rem',
                  fontWeight: 'bold'
                }}>
                  {isGroupItems ? t('offers.form.group') : t('offers.form.fixed')}
                </Box>
                
                {/* اسم المنتج */}
                <Typography variant="body2" sx={{ 
                  fontSize: '0.8rem',
                  fontWeight: 500,
                  mb: 0.5,
                  minHeight: 20,
                  display: '-webkit-box',
                  WebkitLineClamp: 1,
                  WebkitBoxOrient: 'vertical',
                  overflow: 'hidden',
                  mt: 1 // مساحة للشارة
                }}>
                  {productPrice?.displayName || t('offers.form.selectProduct')}
                </Typography>
                
                <Box sx={{ display: 'flex', gap: 0.5, alignItems: 'center', flexWrap: 'wrap' }}>
                  {/* الكمية */}
                  <TextField
                    label={t('offers.form.quantity')}
                    type="number"
                    size="small"
                    sx={{ width: 60 }}
                    value={watch(`offerItems.${actualIndex}.quantity`)}
                    onChange={(e) => setValue(`offerItems.${actualIndex}.quantity`, Number(e.target.value))}
                    inputProps={{ min: 1 }}
                  />
                  
                  {/* استخدام السعر الأصلي */}
                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={useOriginalPrice}
                        onChange={(e) => {
                          setValue(`offerItems.${actualIndex}.useOriginalPrice`, e.target.checked);
                          if (e.target.checked) {
                            setValue(`offerItems.${actualIndex}.customPrice`, 0);
                          }
                        }}
                        size="small"
                      />
                    }
                    label={<Typography variant="caption" sx={{ fontSize: '0.7rem' }}>{t('offers.form.original')}</Typography>}
                  />
                  
                  {/* السعر المخصص */}
                  {!useOriginalPrice && (
                    <TextField
                      label={t('offers.form.price')}
                      type="number"
                      size="small"
                      sx={{ width: 70 }}
                      value={watch(`offerItems.${actualIndex}.customPrice`)}
                      onChange={(e) => setValue(`offerItems.${actualIndex}.customPrice`, Number(e.target.value))}
                      inputProps={{ min: 0, step: 0.01 }}
                    />
                  )}
                  
                  {/* زرار الحذف */}
                  <IconButton
                    size="small"
                    color="error"
                    onClick={() => removeItem(actualIndex)}
                    sx={{ ml: 'auto' }}
                  >
                    <IconTrash size={12} />
                  </IconButton>
                </Box>
              </Box>
            </Grid>
          );
        })}
      </Grid>
    );
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <>
      <Dialog 
        open={open} 
        onClose={onClose} 
        maxWidth="xl" 
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle sx={{ 
          position: 'sticky', 
          top: 0, 
          zIndex: 1, 
          backgroundColor: 'background.paper',
          borderBottom: 1,
          borderColor: 'divider'
        }}>
          {mode === 'add' ? t('offers.add') : t('offers.edit')}
        </DialogTitle>

        <form>
          <DialogContent sx={{ 
            maxHeight: isMobile ? 'calc(100vh - 120px)' : '85vh', 
            overflowY: 'auto', 
            p: isMobile ? 1.5 : 2 
          }}>
            <Grid container spacing={isMobile ? 1.5 : 2}>
              {/* Basic Info */}
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ 
                  mb: isMobile ? 1 : 1.5, 
                  fontSize: isMobile ? '1rem' : '1.1rem' 
                }}>
                  {t('offers.form.basicInfo')}
                </Typography>
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="name"
                  control={control}
                  rules={{ required: t('offers.nameRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.name')}
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      onFocus={(e) => e.target.select()}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="priceType"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth size={isMobile ? "medium" : "small"}>
                      <InputLabel>{t('offers.form.priceType')}</InputLabel>
                      <Select
                        {...field}
                        label={t('offers.form.priceType')}
                      >
                        <MenuItem value="Fixed">{t('offers.form.fixed')}</MenuItem>
                        <MenuItem value="Dynamic">{t('offers.form.dynamic')}</MenuItem>
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="fixedPrice"
                  control={control}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.fixedPrice')}
                      type="number"
                      fullWidth
                      inputProps={{ min: 0, step: 0.01 }}
                      onFocus={(e) => e.target.select()}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="orderTypeId"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth size={isMobile ? "medium" : "small"}>
                      <InputLabel>{t('offers.form.orderType')}</InputLabel>
                      <Select
                        {...field}
                        label={t('offers.form.orderType')}
                      >
                        <MenuItem value="1">{t('offers.form.dineIn')}</MenuItem>
                        <MenuItem value="2">{t('offers.form.takeaway')}</MenuItem>
                        <MenuItem value="3">{t('offers.form.delivery')}</MenuItem>
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="startDate"
                  control={control}
                  rules={{ required: t('offers.startDateRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.startDate')}
                      type="date"
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      InputLabelProps={{ shrink: true }}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="endDate"
                  control={control}
                  rules={{ required: t('offers.endDateRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.endDate')}
                      type="date"
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      InputLabelProps={{ shrink: true }}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12}>
                <Controller
                  name="isActive"
                  control={control}
                  render={({ field }) => (
                    <FormControlLabel
                      control={
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      }
                      label={t('offers.form.isActive')}
                    />
                  )}
                />
              </Grid>

              {/* الزرارين فوق التابات */}
              <Grid item xs={12}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'flex-end',
                  gap: 1,
                  mb: 1
                }}>
                  <Button
                    variant="outlined"
                    startIcon={<IconPlus />}
                    onClick={addOfferGroup}
                    size="small"
                  >
                    {t('offers.form.addGroup')}
                  </Button>
                  <Button
                    variant="outlined"
                    startIcon={<IconShoppingCart />}
                    onClick={addOfferItem}
                    size="small"
                  >
                    {t('offers.form.addItem')}
                  </Button>
                </Box>
              </Grid>

              {/* التابات */}
              <Grid item xs={12}>
                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                  <Tabs value={tabValue} onChange={handleTabChange} aria-label="offer tabs">
                    <Tab 
                      icon={<IconUsers size={18} />}
                      label={`${t('offers.form.offerGroups')} (${groupFields.length})`}
                      id="offer-tab-0"
                      aria-controls="offer-tabpanel-0"
                      sx={{ 
                        color: 'primary.main',
                        '&.Mui-selected': { 
                          color: 'primary.main',
                          fontWeight: 'bold'
                        }
                      }}
                    />
                    <Tab 
                      icon={<IconShoppingCart size={18} />}
                      label={`${t('offers.form.fixedItems')} (${getNonGroupItems().length})`}
                      id="offer-tab-1"
                      aria-controls="offer-tabpanel-1"
                      sx={{ 
                        color: 'secondary.main',
                        '&.Mui-selected': { 
                          color: 'secondary.main',
                          fontWeight: 'bold'
                        }
                      }}
                    />
                  </Tabs>
                </Box>

                {/* تاب المجموعات */}
                <TabPanel value={tabValue} index={0}>
                  {groupFields.length === 0 ? (
                    <Box sx={{ 
                      textAlign: 'center', 
                      py: 4, 
                      backgroundColor: 'primary.50', 
                      borderRadius: 1,
                      border: 1,
                      borderColor: 'primary.main'
                    }}>
                      <Typography color="primary.main" variant="body2" fontWeight={500}>
                        {t('offers.form.noGroups')}
                      </Typography>
                    </Box>
                  ) : (
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      {groupFields.map((group, index) => (
                        <Card key={group.id} variant="outlined" sx={{ 
                          borderColor: 'primary.main',
                          borderWidth: 2
                        }}>
                          <CardContent sx={{ p: '16px !important' }}>
                            <Box sx={{ 
                              display: 'flex', 
                              justifyContent: 'space-between', 
                              alignItems: 'center', 
                              mb: 2,
                              flexDirection: isMobile ? 'column' : 'row',
                              gap: isMobile ? 1 : 0
                            }}>
                              <Controller
                                name={`offerGroups.${index}.title`}
                                control={control}
                                rules={{ required: t('offers.groupTitleRequired') }}
                                render={({ field, fieldState }) => (
                                  <TextField
                                    {...field}
                                    label={t('offers.form.groupTitle')}
                                    required
                                    error={!!fieldState.error}
                                    helperText={fieldState.error?.message}
                                    size="small"
                                    sx={{ 
                                      flex: 1, 
                                      mr: isMobile ? 0 : 2,
                                      width: isMobile ? '100%' : 'auto'
                                    }}
                                  />
                                )}
                              />
                              <Box sx={{ display: 'flex', gap: 1 }}>
                                <Button
                                  variant="outlined"
                                  startIcon={<IconPlus />}
                                  onClick={() => addItemToGroup(index)}
                                  size="small"
                                  color="primary"
                                >
                                  {t('offers.form.addItem')}
                                </Button>
                                <IconButton
                                  size="small"
                                  color="error"
                                  onClick={() => removeGroup(index)}
                                >
                                  <IconTrash size={16} />
                                </IconButton>
                              </Box>
                            </Box>

                            <Grid container spacing={1.5} sx={{ mb: 2 }}>
                              <Grid item xs={6} md={2}>
                                <Controller
                                  name={`offerGroups.${index}.minSelection`}
                                  control={control}
                                  render={({ field }) => (
                                    <TextField
                                      {...field}
                                      label={t('offers.form.minSelection')}
                                      type="number"
                                      fullWidth
                                      size="small"
                                      inputProps={{ min: 0 }}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={2}>
                                <Controller
                                  name={`offerGroups.${index}.maxSelection`}
                                  control={control}
                                  render={({ field }) => (
                                    <TextField
                                      {...field}
                                      label={t('offers.form.maxSelection')}
                                      type="number"
                                      fullWidth
                                      size="small"
                                      inputProps={{ min: 1 }}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={4}>
                                <Controller
                                  name={`offerGroups.${index}.isMandatory`}
                                  control={control}
                                  render={({ field }) => (
                                    <FormControlLabel
                                      control={
                                        <Switch
                                          checked={field.value}
                                          onChange={field.onChange}
                                          size="small"
                                        />
                                      }
                                      label={t('offers.form.mandatory')}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={4}>
                                <Controller
                                  name={`offerGroups.${index}.isActive`}
                                  control={control}
                                  render={({ field }) => (
                                    <FormControlLabel
                                      control={
                                        <Switch
                                          checked={field.value}
                                          onChange={field.onChange}
                                          size="small"
                                        />
                                      }
                                      label={t('offers.form.active')}
                                    />
                                  )}
                                />
                              </Grid>
                            </Grid>

                            {/* عناصر المجموعة */}
                            <Box>
                              <Typography variant="subtitle2" sx={{ mb: 1, fontSize: '0.9rem', color: 'primary.main' }}>
                                {t('offers.form.groupItems')} ({getGroupItems(index).length})
                              </Typography>
                              {getGroupItems(index).length === 0 ? (
                                <Box sx={{ 
                                  textAlign: 'center', 
                                  py: 2, 
                                  backgroundColor: 'primary.50', 
                                  borderRadius: 1,
                                  border: 1,
                                  borderColor: 'primary.main'
                                }}>
                                  <Typography variant="body2" color="primary.main">
                                    {t('offers.form.noItemsInGroup')}
                                  </Typography>
                                </Box>
                              ) : (
                                <ItemsGrid items={getGroupItems(index)} groupIndex={index} />
                              )}
                            </Box>
                          </CardContent>
                        </Card>
                      ))}
                    </Box>
                  )}
                </TabPanel>

                {/* تاب العناصر الثابتة */}
                <TabPanel value={tabValue} index={1}>
                  {getNonGroupItems().length === 0 ? (
                    <Box sx={{ 
                      textAlign: 'center', 
                      py: 4, 
                      backgroundColor: 'secondary.50', 
                      borderRadius: 1,
                      border: 1,
                      borderColor: 'secondary.main'
                    }}>
                      <Typography color="secondary.main" variant="body2" fontWeight={500}>
                        {t('offers.form.noFixedItems')}
                      </Typography>
                    </Box>
                  ) : (
                    <Card variant="outlined" sx={{ 
                      borderColor: 'secondary.main',
                      borderWidth: 2
                    }}>
                      <CardContent sx={{ p: '16px !important' }}>
                        <ItemsGrid items={getNonGroupItems()} />
                      </CardContent>
                    </Card>
                  )}
                </TabPanel>
              </Grid>
            </Grid>
          </DialogContent>

          <DialogActions sx={{ 
            p: 2, 
            gap: 1,
            position: 'sticky',
            bottom: 0,
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            flexDirection: isMobile ? 'column' : 'row'
          }}>
            <Button 
              onClick={onClose} 
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('common.cancel')}
            </Button>
            
            <Button 
              variant="outlined"
              startIcon={<IconDeviceFloppy size={20} />}
              onClick={handleSubmit((data) => submit(data, 'save'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('offers.saveAndExit')}
            </Button>
            
            <Button 
              variant="contained"
              startIcon={<IconPlusNew size={20} />}
              onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('offers.saveAndNew')}
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      <ProductMultiSelectDialog
        open={multiSelectOpen}
        onClose={() => {
          setMultiSelectOpen(false);
          setCurrentGroupIndex(null);
        }}
        onSubmit={handleMultiSelectSubmit}
        title={currentGroupIndex !== null ? 
          t('offers.form.selectItemsForGroup') : 
          t('offers.form.selectFixedItems')
        }
        preSelectedItems={getPreSelectedItems()}
      />
    </>
  );
};

export default OfferForm;

===== src/Pages/pos/offers/components/OfferRow.tsx =====
// File: src/pages/pos/offers/components/OfferRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconCalendar, IconCurrencyDollar } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  offer: Offer;
  onEdit: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
}

const OfferRow: React.FC<Props> = ({ 
  offer, onEdit, isSelected = false, canEdit = true 
}) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ar-EG');
  };

  return (
    <Card variant="outlined" sx={{ 
      mb: 2,
      ...(isSelected && {
        borderColor: 'primary.main',
        backgroundColor: 'action.selected'
      })
    }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {offer.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t(`offers.form.${offer.priceType.toLowerCase()}`)}
            </Typography>
          </Box>
          
          <Chip
            label={offer.isActive ? t('common.active') : t('common.inactive')}
            color={offer.isActive ? 'success' : 'error'}
            size="small"
            variant={offer.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Offer Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconCurrencyDollar size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('offers.form.fixedPrice')}:
              </Typography>
            </Box>
            <Typography variant="body2" color="primary.main" fontWeight={600}>
              {offer.fixedPrice?.toFixed(2) || '0.00'} {t('common.currency')}
            </Typography>
          </Grid>

          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconCalendar size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('offers.form.period')}:
              </Typography>
            </Box>
            <Typography variant="body2">
              {formatDate(offer.startDate)} - {formatDate(offer.endDate)}
            </Typography>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="body2" color="text.secondary">
              {t('offers.form.groups')}: {offer.offerGroups?.length || 0} | {t('offers.form.items')}: {offer.offerItems?.length || 0}
            </Typography>
          </Grid>
        </Grid>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default OfferRow;

===== src/Pages/pos/offers/components/OfferTable.tsx =====
// File: src/pages/pos/offers/components/OfferTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  rows: Offer[];
  onEdit: (offer: Offer) => void;
  canEdit?: boolean;
  selectedOfferId?: string;
}

const OfferTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ar-EG');
  };

  const cols: GridColDef<Offer>[] = [
    { 
      field: 'name', 
      headerName: t('offers.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'priceType', 
      headerName: t('offers.form.priceType'), 
      width: 120,
      renderCell: ({ value }) => t(`offers.form.${value.toLowerCase()}`)
    },
    { 
      field: 'fixedPrice', 
      headerName: t('offers.form.fixedPrice'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2) || '0.00'} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'startDate', 
      headerName: t('offers.form.startDate'), 
      width: 140,
      renderCell: ({ value }) => formatDate(value)
    },
    { 
      field: 'endDate', 
      headerName: t('offers.form.endDate'), 
      width: 140,
      renderCell: ({ value }) => formatDate(value)
    },
    { 
      field: 'offerGroups', 
      headerName: t('offers.form.groups'), 
      width: 100,
      sortable: false,
      renderCell: ({ value }) => (
        <Typography variant="body2" fontWeight={500}>
          {value?.length || 0}
        </Typography>
      )
    },
    { 
      field: 'offerItems', 
      headerName: t('offers.form.items'), 
      width: 100,
      sortable: false,
      renderCell: ({ value }) => (
        <Typography variant="body2" fontWeight={500}>
          {value?.length || 0}
        </Typography>
      )
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default OfferTable;

===== src/Pages/pos/offers/components/PageHeader.tsx =====
// File: src/pages/pos/offers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { offersImportExportConfig } from '../../../components/configs/importExportConfigs';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  exportData: Offer[];
  loading: boolean;
  onDataChange?: () => Promise<void>;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...offersImportExportConfig,
    onExport: () => exportData.map(offer => ({
      name: offer.name,
      priceType: offer.priceType,
      fixedPrice: offer.fixedPrice || 0,
      startDate: offer.startDate,
      endDate: offer.endDate,
      groupsCount: offer.offerGroups?.length || 0,
      itemsCount: offer.offerItems?.length || 0,
      isActive: offer.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('offers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/offers/components/ProductMultiSelectDialog.tsx =====
// File: src/pages/pos/offers/components/ProductMultiSelectDialog.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Button, TextField, Box, Checkbox,
  Table, TableBody, TableCell, TableContainer, TableHead,
  TableRow, Paper, Chip, Stack, Typography, InputAdornment,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconSearch, IconSelectAll } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';

interface SelectedProduct {
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}

interface Props {
  open: boolean;
  onClose: () => void;
  onSubmit: (products: SelectedProduct[]) => void;
  title?: string;
  preSelectedItems?: string[]; // المنتجات المختارة مسبقاً
}

const ProductMultiSelectDialog: React.FC<Props> = ({
  open, onClose, onSubmit, title, preSelectedItems = []
}) => {
  const { t } = useTranslation();
  const [products, setProducts] = React.useState<any[]>([]);
  const [groups, setGroups] = React.useState<any[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [selectedGroupId, setSelectedGroupId] = React.useState('');
  const [selectedProducts, setSelectedProducts] = React.useState<Set<string>>(new Set());

  React.useEffect(() => {
    if (open) {
      loadGroups();
      loadProducts();
      // ⭐ تحميل المنتجات المختارة مسبقاً عند فتح الـ dialog
      console.log('Pre-selected items:', preSelectedItems);
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [open, preSelectedItems]);

  // ⭐ تحديث المنتجات المختارة عند تغيير preSelectedItems
  React.useEffect(() => {
    if (open) {
      console.log('Updating selected products with:', preSelectedItems);
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [preSelectedItems, open]);

  const loadGroups = async () => {
    try {
      const groupsData = await groupsApi.getAll();
      const flatGroups = flattenGroups(groupsData);
      setGroups(flatGroups);
    } catch (error) {
      console.error('Error loading groups:', error);
    }
  };

  const flattenGroups = (groups: any[]): any[] => {
    const result: any[] = [];
    
    const flatten = (items: any[], level = 0) => {
      items.forEach(item => {
        result.push({
          ...item,
          displayName: '  '.repeat(level) + item.name,
          level
        });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productsApi.getAll(1, 100);
      const filteredProducts = data.data.filter(p => 
        p.productPrices && 
        p.productPrices.length > 0 &&
        p.isActive
      );
      setProducts(filteredProducts);
    } catch (error) {
      console.error('Error loading products:', error);
    } finally {
      setLoading(false);
    }
  };

const filteredProducts = React.useMemo(() => {
  let result = [...products];

  if (searchQuery.trim()) {
    const searchLower = searchQuery.toLowerCase();
    result = result.filter(product => {
      // البحث في اسم المنتج
      const productNameMatch = product.name.toLowerCase().includes(searchLower);
      
      // البحث في أسماء الأسعار والاسم المدمج
      const priceNameMatch = product.productPrices.some((price: any) => {
        const priceName = price.posPriceName;
        const combinedName = priceName  && priceName !== product.name
          ? `${product.name} - ${priceName}`
          : product.name;
        
        return priceName.toLowerCase().includes(searchLower) ||
               combinedName.toLowerCase().includes(searchLower);
      });
      
      // البحث في الباركود
      const barcodeMatch = product.productPrices.some((price: any) => 
        price.barcode && price.barcode.toLowerCase().includes(searchLower)
      );
      
      return productNameMatch || priceNameMatch || barcodeMatch;
    });
  }

  if (selectedGroupId) {
    result = result.filter(product => product.groupId === selectedGroupId);
  }

  return result;
}, [products, searchQuery, selectedGroupId]);

const allProductPrices = React.useMemo(() => {
  const prices: Array<{
    productPriceId: string;
    productId: string;
    productName: string;
    priceName: string;
    price: number;
    barcode: string;
    displayName: string; // ⭐ إضافة displayName محسن
  }> = [];

  filteredProducts.forEach(product => {
    product.productPrices.forEach((price: any) => {
      const priceName = price.posPriceName;
      
      prices.push({
        productPriceId: price.id,
        productId: product.id,
        productName: product.name,
        priceName: priceName,
        price: price.price,
        barcode: price.barcode || '',
        // ⭐ إنشاء displayName محسن
        displayName: priceName  && priceName !== product.name
          ? `${product.name} - ${priceName}`
          : product.name
      });
    });
  });

  return prices;
}, [filteredProducts]);

  const handleSelectAll = () => {
    if (selectedProducts.size === allProductPrices.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(allProductPrices.map(p => p.productPriceId)));
    }
  };

  const handleProductToggle = (productPriceId: string) => {
    const newSelected = new Set(selectedProducts);
    if (newSelected.has(productPriceId)) {
      newSelected.delete(productPriceId);
      console.log('Removed product:', productPriceId);
    } else {
      newSelected.add(productPriceId);
      console.log('Added product:', productPriceId);
    }
    setSelectedProducts(newSelected);
  };

  const handleConfirm = () => {
    // ⭐ إرجاع كل المنتجات المختارة (الجديدة والقديمة)
    const selectedProductsData = allProductPrices
      .filter(p => selectedProducts.has(p.productPriceId))
      .map(p => ({
        productPriceId: p.productPriceId,
        productName: p.productName,
        priceName: p.priceName,
        price: p.price
      }));
    
    console.log('Final selected products:', selectedProductsData);
    console.log('Selected product IDs:', Array.from(selectedProducts));
    
    onSubmit(selectedProductsData);
    handleCancel();
  };

  const handleCancel = () => {
    onClose();
    setSearchQuery('');
    setSelectedGroupId('');
    // ⭐ إعادة تعيين للمنتجات المختارة مسبقاً عند الإلغاء
    setSelectedProducts(new Set(preSelectedItems));
  };

  return (
    <Dialog open={open} onClose={handleCancel} maxWidth="lg" fullWidth>
      <DialogTitle>
        {title || t('offers.form.selectProducts')}
      </DialogTitle>
      
      <DialogContent>
        <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
          <TextField
            placeholder={t('offers.form.searchProductsAndPrices')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              )
            }}
            sx={{ flex: 1 }}
          />
          
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>{t('offers.form.filterByGroup')}</InputLabel>
            <Select
              value={selectedGroupId}
              onChange={(e) => setSelectedGroupId(e.target.value)}
              label={t('offers.form.filterByGroup')}
            >
              <MenuItem value="">
                <em>{t('offers.form.allGroups')}</em>
              </MenuItem>
              {groups.map((group) => (
                <MenuItem key={group.id} value={group.id}>
                  {group.displayName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>

        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            {t('offers.form.productsFound', { count: allProductPrices.length })}
          </Typography>
          
          <Stack direction="row" spacing={1} alignItems="center">
            <Chip 
              label={t('offers.form.selected', { count: selectedProducts.size })}
              color="primary"
              variant="outlined"
            />
            <Button
              size="small"
              startIcon={<IconSelectAll />}
              onClick={handleSelectAll}
            >
              {selectedProducts.size === allProductPrices.length 
                ? t('offers.form.deselectAll') 
                : t('offers.form.selectAll')
              }
            </Button>
          </Stack>
        </Box>

<TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 400 }}>
  <Table stickyHeader size="small">
    <TableHead>
      <TableRow>
        <TableCell padding="checkbox">
          <Checkbox
            checked={selectedProducts.size === allProductPrices.length && allProductPrices.length > 0}
            indeterminate={selectedProducts.size > 0 && selectedProducts.size < allProductPrices.length}
            onChange={handleSelectAll}
          />
        </TableCell>
        <TableCell>{t('offers.form.productName')}</TableCell>
        {/* ⭐ حذف عمود اسم السعر */}
        <TableCell>{t('offers.form.price')}</TableCell>
        <TableCell>{t('offers.form.barcode')}</TableCell>
      </TableRow>
    </TableHead>
    <TableBody>
      {loading ? (
        <TableRow>
          <TableCell colSpan={4} align="center">
            {t('common.loading')}
          </TableCell>
        </TableRow>
      ) : allProductPrices.length === 0 ? (
        <TableRow>
          <TableCell colSpan={4} align="center">
            {t('offers.form.noProductsFound')}
          </TableCell>
        </TableRow>
      ) : (
        allProductPrices.map((productPrice) => (
          <TableRow 
            key={productPrice.productPriceId}
            hover
            sx={{ cursor: 'pointer' }}
            onClick={() => handleProductToggle(productPrice.productPriceId)}
          >
            <TableCell padding="checkbox">
              <Checkbox
                checked={selectedProducts.has(productPrice.productPriceId)}
                onChange={() => handleProductToggle(productPrice.productPriceId)}
              />
            </TableCell>
            <TableCell>
              {/* ⭐ دمج اسم المنتج مع اسم السعر */}
              <Box>
                <Typography variant="body2" fontWeight={500}>
                  {productPrice.displayName
                    ? productPrice.displayName
                    : productPrice.productName
                  }
                </Typography>
                {/* يمكن إضافة معلومات إضافية كـ subtitle إذا لزم الأمر */}
                {productPrice.priceName  && productPrice.priceName !== productPrice.productName && (
                  <Typography variant="caption" color="text.secondary">
                    {productPrice.productName}
                  </Typography>
                )}
              </Box>
            </TableCell>
            <TableCell>
              <Typography variant="body2" sx={{ fontWeight: 600, color: 'primary.main' }}>
                {productPrice.price.toFixed(2)} {t('common.currency')}
              </Typography>
            </TableCell>
            <TableCell>
              <Typography variant="body2" color="text.secondary" fontFamily="monospace">
                {productPrice.barcode || '-'}
              </Typography>
            </TableCell>
          </TableRow>
        ))
      )}
    </TableBody>
  </Table>
</TableContainer>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={handleCancel}>
          {t('common.cancel')}
        </Button>
        <Button 
          onClick={handleConfirm} 
          variant="contained"
          disabled={selectedProducts.size === 0}
        >
          {t('offers.form.addSelected', { count: selectedProducts.size })}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ProductMultiSelectDialog;

===== src/Pages/pos/offers/OffersPage.tsx =====
// File: src/pages/pos/offers/OffersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip, Pagination
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import OfferTable from './components/OfferTable';
import OfferRow from './components/OfferRow';
import OfferForm from './components/OfferForm';
import MobileOffersFilter, { OffersFilterState } from './components/mobile/MobileOffersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/offersApi';
import { Offer, OffersResponse } from 'src/utils/api/pagesApi/offersApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const OffersPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [offersData, setOffersData] = React.useState<OffersResponse>({
    totalCount: 0,
    pageCount: 1,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [selectedOffer, setSelectedOffer] = React.useState<Offer | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Offer;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<OffersFilterState>({
    searchQuery: '',
    status: '',
    priceType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchOffers = async (page = 1) => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll(page, offersData.pageSize);
      setOffersData(data);
    } catch (e: any) {
      setErr(e?.message || t('offers.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchOffers();
    // eslint-disable-next-line
  }, []);

  const searchOffers = (query: string) => {
    if (!query.trim()) {
      return offersData.data;
    }
    
    const searchLower = query.toLowerCase();
    return offersData.data.filter(offer => 
      offer.name.toLowerCase().includes(searchLower) ||
      offer.priceType.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...offersData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(offer => 
        offer.name.toLowerCase().includes(searchLower) ||
        offer.priceType.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(offer => offer.isActive === isActive);
    }

    if (mobileFilters.priceType) {
      result = result.filter(offer => offer.priceType === mobileFilters.priceType);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [offersData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchOffers(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.priceType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchOffers(offersData.pageNumber);
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedOffer = await apiSrv.update(data);
      setOffersData(prev => ({
        ...prev,
        data: prev.data.map(o => o.id === updatedOffer.id ? updatedOffer : o)
      }));
      if (selectedOffer && selectedOffer.id === data.id) {
        setSelectedOffer(updatedOffer);
      }
      return updatedOffer;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (offer: Offer) => {
    setDialog({ open: true, mode: 'edit', current: offer });
  };

  const handlePageChange = (_: any, page: number) => {
    fetchOffers(page);
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={offersData.data} 
        loading={loading}
        onDataChange={fetchOffers}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('offers.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('offers.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('offers.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('offers.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('offers.title')} ({offersData.totalCount})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('offers.noSearchResults') : t('offers.noOffers')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(offer => (
                  <OfferRow
                    key={offer.id}
                    offer={offer}
                    onEdit={() => handleEdit(offer)}
                    isSelected={selectedOffer?.id === offer.id}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <OfferTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedOfferId={selectedOffer?.id}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}

        {/* Pagination */}
        {offersData.pageCount > 1 && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <Pagination
              count={offersData.pageCount}
              page={offersData.pageNumber}
              onChange={handlePageChange}
              color="primary"
              size={isMobile ? 'small' : 'medium'}
            />
          </Box>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileOffersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={offersData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <OfferForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default OffersPage;
===== src/Pages/pos/payment-methods/components/ActionsBar.tsx =====
// File: src/pages/pos-payment-methods/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('posPaymentMethods.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('posPaymentMethods.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/payment-methods/components/mobile/MobilePosPaymentMethodsFilter.tsx =====
// File: src/pages/pos-payment-methods/components/mobile/MobilePosPaymentMethodsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PosPaymentMethodsFilterState {
  searchQuery: string;
  accountType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PosPaymentMethodsFilterState;
  onFiltersChange: (filters: PosPaymentMethodsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobilePosPaymentMethodsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PosPaymentMethodsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const accountTypeOptions = [
    { value: '', label: t('common.all') },
    { value: 'Cash', label: t('safes.types.cash') },
    { value: 'Bank', label: t('accounts.types.bank') },
    { value: 'Wallet', label: t('accounts.types.wallet') },
    { value: 'Visa', label: t('accounts.types.visa') },
    { value: 'InstaPay', label: t('accounts.types.instapay') },
    { value: 'StaffAccount', label: t('accounts.types.staffAccount') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posPaymentMethods.active') },
    { value: 'false', label: t('posPaymentMethods.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('posPaymentMethods.name') },
    { value: 'safeOrAccount.name', label: t('posPaymentMethods.safeOrAccount') },
    { value: 'safeOrAccount.typeName', label: t('posPaymentMethods.accountType') },
    { value: 'isActive', label: t('posPaymentMethods.status') }
  ];

  const handleLocalChange = (field: keyof PosPaymentMethodsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PosPaymentMethodsFilterState = {
      searchQuery: '',
      accountType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.accountType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('posPaymentMethods.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posPaymentMethods.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('posPaymentMethods.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('posPaymentMethods.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('posPaymentMethods.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('posPaymentMethods.filter.filters')}</Typography>
            {(localFilters.accountType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.accountType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.accountType')}</InputLabel>
              <Select
                value={localFilters.accountType}
                label={t('posPaymentMethods.accountType')}
                onChange={(e) => handleLocalChange('accountType', e.target.value)}
              >
                {accountTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('posPaymentMethods.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('posPaymentMethods.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('posPaymentMethods.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('posPaymentMethods.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('posPaymentMethods.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('posPaymentMethods.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('posPaymentMethods.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('posPaymentMethods.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePosPaymentMethodsFilter;

===== src/Pages/pos/payment-methods/components/mobile/PosPaymentMethodsCards.tsx =====
// File: src/pages/pos-payment-methods/components/mobile/PosPaymentMethodsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { useTranslation } from 'react-i18next';

interface Props {
  paymentMethods: PosPaymentMethod[];
  onEdit: (paymentMethod: PosPaymentMethod) => void;
  loading: boolean;
}

const PosPaymentMethodsCards: React.FC<Props> = ({ paymentMethods, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (paymentMethods.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posPaymentMethods.noPaymentMethods')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {paymentMethods.map((paymentMethod) => (
        <Grid item xs={12} sm={6} md={4} key={paymentMethod.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {paymentMethod.name}
                  </Typography>
                  
                  {paymentMethod.safeOrAccount && (
                    <>
                      <Typography 
                        variant="body2" 
                        color="text.secondary"
                        sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                      >
                        {t('posPaymentMethods.safeOrAccount')}: {paymentMethod.safeOrAccount.name}
                      </Typography>
                      
                      <Box>
                        <Chip
                          label={t(`accounts.types.${paymentMethod.safeOrAccount.typeName.toLowerCase()}`)}
                          color={paymentMethod.safeOrAccount.safeOrAccountType === 1 ? 'warning' : 'primary'}
                          variant="outlined"
                          size="small"
                        />
                      </Box>
                      
                      {paymentMethod.safeOrAccount.accountNumber && (
                        <Typography 
                          variant="body2" 
                          color="text.secondary"
                          sx={{ 
                            fontSize: { xs: '0.75rem', sm: '0.875rem' },
                            fontFamily: 'monospace'
                          }}
                        >
                          {t('posPaymentMethods.accountNumber')}: {paymentMethod.safeOrAccount.accountNumber}
                        </Typography>
                      )}
                      
                      {paymentMethod.safeOrAccount.collectionFeePercent > 0 && (
                        <Typography 
                          variant="body2" 
                          color="text.secondary"
                          sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                        >
                          {t('posPaymentMethods.collectionFee')}: {paymentMethod.safeOrAccount.collectionFeePercent}%
                        </Typography>
                      )}
                    </>
                  )}
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={paymentMethod.isActive ? t('posPaymentMethods.active') : t('posPaymentMethods.inactive')}
                      color={paymentMethod.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(paymentMethod)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default PosPaymentMethodsCards;

===== src/Pages/pos/payment-methods/components/PageHeader.tsx =====
// File: src/pages/pos-payment-methods/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { posPaymentMethodsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';

interface Props {
  exportData: PosPaymentMethod[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...posPaymentMethodsImportExportConfig,
    onExport: () => exportData.map(method => ({
      name: method.name,
      safeOrAccountName: method.safeOrAccount?.name || '',
      type: method.type,
      isActive: method.isActive,
      createdOn: method.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('posPaymentMethods.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/payment-methods/components/PosPaymentMethodForm.tsx =====
// File: src/pages/pos-payment-methods/components/PosPaymentMethodForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Box,
  Chip,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { SafeOrAccount } from 'src/utils/api/pagesApi/safesAndAccountsApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: PosPaymentMethod;
  safesAndAccounts: SafeOrAccount[];
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const PosPaymentMethodForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  safesAndAccounts,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  type FormValues = {
    name: string;
    safeOrAccountID: string;
    branches: any[]; // Replace 'any' with the actual branch type if available
  };
  
  const { control, handleSubmit, reset, watch, formState: { errors } } = useForm<FormValues>({
    defaultValues: {
      name: '',
      safeOrAccountID: '',
      branches: []
    }
  });
  
  useFieldArray({
        control,
        name: 'branches'
    });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        safeOrAccountID: initialValues.safeOrAccountID || '',
        branches: initialValues.branches || []
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        safeOrAccountID: '',
        branches: []
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          safeOrAccountID: '',
          branches: []
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  const selectedAccount = safesAndAccounts.find(sa => sa.id === watch('safeOrAccountID'));

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('posPaymentMethods.add') : t('posPaymentMethods.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('posPaymentMethods.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('posPaymentMethods.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="safeOrAccountID"
            control={control}
            rules={{ required: t('posPaymentMethods.validation.accountRequired') }}
            render={({ field }) => (
              <FormControl fullWidth error={!!errors.safeOrAccountID}>
                <InputLabel>{t('posPaymentMethods.safeOrAccount')}</InputLabel>
                <Select
                  {...field}
                  label={t('posPaymentMethods.safeOrAccount')}
                  disabled={isSubmitting}
                >
                  {safesAndAccounts.map((sa) => (
                    <MenuItem key={sa.id} value={sa.id}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography>{sa.name}</Typography>
                        <Chip
                          label={t(`accounts.types.${sa.typeName.toLowerCase()}`)}
                          size="small"
                          variant="outlined"
                          color={sa.safeOrAccountType === 1 ? 'warning' : 'primary'}
                        />
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
          />

          {selectedAccount && (
            <Box sx={{ p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                {t('posPaymentMethods.selectedAccount')}
              </Typography>
              <Stack direction="row" spacing={1} alignItems="center">
                <Typography variant="body2">{selectedAccount.name}</Typography>
                <Chip
                  label={t(`accounts.types.${selectedAccount.typeName.toLowerCase()}`)}
                  size="small"
                  color={selectedAccount.safeOrAccountType === 1 ? 'warning' : 'primary'}
                />
                {selectedAccount.accountNumber && (
                  <Typography variant="caption" sx={{ fontFamily: 'monospace' }}>
                    {selectedAccount.accountNumber}
                  </Typography>
                )}
              </Stack>
            </Box>
          )}

          {/* يمكن إضافة إدارة الفروع هنا لاحقاً */}
          <Typography variant="body2" color="text.secondary">
            {t('posPaymentMethods.branchesNote')}
          </Typography>
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default PosPaymentMethodForm;

===== src/Pages/pos/payment-methods/components/PosPaymentMethodsTable.tsx =====
// File: src/pages/pos-payment-methods/components/PosPaymentMethodsTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';

interface Props {
  rows: PosPaymentMethod[];
  onEdit: (paymentMethod: PosPaymentMethod) => void;
}

const PosPaymentMethodsTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<PosPaymentMethod>[] = [
    { field: 'name', headerName: t('posPaymentMethods.name'), flex: 1, minWidth: 180 },
    { 
      field: 'safeOrAccountName', 
      headerName: t('posPaymentMethods.safeOrAccount'), 
      flex: 1,
      renderCell: ({ row }) => row.safeOrAccount?.name || '-'
    },
    { 
      field: 'accountType', 
      headerName: t('posPaymentMethods.accountType'), 
      flex: 0.8,
      renderCell: ({ row }) => {
        if (!row.safeOrAccount?.typeName) return '-';
        const safeOrAccountType = row.safeOrAccount.safeOrAccountType;
        return (
          <Chip 
            label={t(`accounts.types.${row.safeOrAccount.typeName.toLowerCase()}`)} 
            color={safeOrAccountType === 1 ? 'warning' : 'primary'} 
            variant="outlined" 
            size="small" 
          />
        );
      }
    },
    { 
      field: 'accountNumber', 
      headerName: t('posPaymentMethods.accountNumber'), 
      flex: 1,
      renderCell: ({ row }) => (
        <span style={{ fontFamily: 'monospace' }}>
          {row.safeOrAccount?.accountNumber || '-'}
        </span>
      )
    },
    { 
      field: 'collectionFee', 
      headerName: t('posPaymentMethods.collectionFee'), 
      flex: 0.8,
      renderCell: ({ row }) => `${row.safeOrAccount?.collectionFeePercent || 0}%`
    },
    { 
      field: 'isActive', 
      headerName: t('posPaymentMethods.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('posPaymentMethods.active') : t('posPaymentMethods.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default PosPaymentMethodsTable;

===== src/Pages/pos/payment-methods/PosPaymentMethodsPage.tsx =====
// File: src/pages/pos-payment-methods/PosPaymentMethodsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import PosPaymentMethodsTable from './components/PosPaymentMethodsTable';
import PosPaymentMethodsCards from './components/mobile/PosPaymentMethodsCards';
import PosPaymentMethodForm from './components/PosPaymentMethodForm';
import MobilePosPaymentMethodsFilter, { PosPaymentMethodsFilterState } from './components/mobile/MobilePosPaymentMethodsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import * as safesAndAccountsApi from 'src/utils/api/pagesApi/safesAndAccountsApi';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { SafeOrAccount } from 'src/utils/api/pagesApi/safesAndAccountsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const PosPaymentMethodsPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [paymentMethods, setPaymentMethods] = React.useState<PosPaymentMethod[]>([]);
  const [safesAndAccounts, setSafesAndAccounts] = React.useState<SafeOrAccount[]>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: PosPaymentMethod;
  }>({ open: false, mode: 'add', current: undefined });

  const { canAdd = true } = props; // Default to true if not provided

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PosPaymentMethodsFilterState>({
    searchQuery: '',
    accountType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchData = async () => {
    try {
      const [paymentMethodsData, safesAndAccountsData] = await Promise.all([
        apiSrv.getAll(),
        safesAndAccountsApi.getAllSafesAndAccounts()
      ]);
      setPaymentMethods(paymentMethodsData);
      setSafesAndAccounts(safesAndAccountsData);
    } catch (e: any) {
      setErr(e?.message || t('posPaymentMethods.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchData();
      }
      catch (e: any) { 
        setErr(e?.message || t('posPaymentMethods.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? paymentMethods.filter(pm => 
      pm.name.toLowerCase().includes(query.toLowerCase()) ||
      pm.safeOrAccount?.name.toLowerCase().includes(query.toLowerCase()) ||
      pm.safeOrAccount?.typeName.toLowerCase().includes(query.toLowerCase())
    ) : paymentMethods,
    [paymentMethods, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...paymentMethods];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(pm => 
        pm.name.toLowerCase().includes(searchLower) ||
        pm.safeOrAccount?.name.toLowerCase().includes(searchLower) ||
        pm.safeOrAccount?.typeName.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع الحساب
    if (mobileFilters.accountType) {
      result = result.filter(pm => pm.safeOrAccount?.typeName === mobileFilters.accountType);
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(pm => pm.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [paymentMethods, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.accountType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchData();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchData();
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('posPaymentMethods.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <PosPaymentMethodsCards
                paymentMethods={filtered}
                onEdit={(pm) => setDialog({ open: true, mode: 'edit', current: pm })}
                loading={loading}
              />
            )
          : (
              <PosPaymentMethodsTable
                rows={filtered}
                onEdit={(pm) => setDialog({ open: true, mode: 'edit', current: pm })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePosPaymentMethodsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={paymentMethods.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <PosPaymentMethodForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        safesAndAccounts={safesAndAccounts}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default PosPaymentMethodsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/pos/products/PosProductsPage.tsx =====
// File: src/Pages/pos/products/PosProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from '../../products/components/PageHeader';
import ActionsBar from '../../products/components/ActionsBar';
import ProductTable from '../../products/components/ProductTable';
import ProductRow from '../../products/components/ProductsRow';
import ProductForm from '../../products/components/ProductForm';
import ProductPricesDrawer from '../../products/components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from '../../products/components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import * as posScreensApi from 'src/utils/api/pagesApi/posScreensApi'; // ⭐ إضافة import للـ POS Screens
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi'; // ⭐ إضافة import للـ PosScreen type

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {
  // Add other props here if needed
}

const PosProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canImport = true, canExport = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [posScreens, setPosScreens] = React.useState<PosScreen[]>([]); // ⭐ إضافة state للـ POS Screens
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch POS products only ───── */
  const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
    try {
      setLoad(true);
      const data = await apiSrv.getByType(1, page, pageSize);
      setProductsData(data);
      setCurrentPage(page);
    } catch (e: any) {
      setErr(e?.message || t('posProducts.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  /* ───── search POS products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product && product.productType === 1) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 1)
        };
        setProductsData(filteredData);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {
      setErr(e?.message || t('posProducts.errors.searchFailed'));
    } finally {
      setSearching(false);
    }
  };

  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  // ⭐ تحديث useEffect لتحميل POS Screens
  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData, posScreensData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll(),
          posScreensApi.getAll() // ⭐ تحميل POS Screens
        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        setPosScreens(posScreensData); // ⭐ حفظ POS Screens في الـ state
        await fetchProducts(1);
      }
      catch (e: any) { 
        setErr(e?.message || t('posProducts.errors.loadFailed')); 
      }
    })();
  }, []);

  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 1)
        };
        setProductsData(filteredData);
        setCurrentPage(page);
      } catch (e: any) {
        setErr(e?.message || t('posProducts.errors.searchFailed'));
      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      const addData = {
        ...data,
        productType: 1
      };
      await apiSrv.add(addData);
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updateData = {
        ...data,
        productType: 1
      };
      const updatedProduct = await apiSrv.update(updateData);
      
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      if (selectedProduct && selectedProduct.id === data.productId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        title={t('posProducts.title')}
        exportData={displayedData} 
        loading={loading}
        showImport={canImport}
        showExport={canExport}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('posProducts.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('posProducts.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('posProducts.searchByBarcode')}: ${searchQuery}`
                    : `${t('posProducts.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('posProducts.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{
                minHeight: 48,
                fontSize: '1rem'
              }}
            >
              {t('posProducts.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('posProducts.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('posProducts.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('posProducts.noSearchResults') : t('posProducts.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      {/* ⭐ تمرير posScreens للـ ProductForm */}
      <ProductForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        groups={groups}
        units={units}
        posScreens={posScreens} // ⭐ تمرير POS Screens
        productType={1}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default PosProductsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/pos/sales/components/ActionButtonsBar.tsx =====
// File: src/pages/pos/sales/components/ActionButtonsBar.tsx
import React, { useState } from 'react';
import { 
  Box, Button, Grid, TextField, InputAdornment 
} from '@mui/material';
import { IconSearch, IconPlus, IconMinus, IconTag, IconSortAscending } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

const ActionButtonsBar: React.FC = () => {
  const { t } = useTranslation();
  const [searchValue, setSearchValue] = useState('');

  return (
    <Box sx={{ 
      width: '100%',
      height: '100%',
      padding: '0.5vh 1vw',
      display: 'flex',
      alignItems: 'center'
    }}>
      <Grid container spacing="0.5vw" alignItems="center" sx={{ height: '100%' }}>
        {/* Action Buttons */}
        <Grid item xs={2}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<IconPlus size="1vw" />}
            sx={{ 
              backgroundColor: '#4CAF50',
              color: 'white',
              height: '100%',
              fontSize: '0.9vw',
              fontWeight: 'bold',
              borderRadius: '0.3vw',
              '&:hover': { backgroundColor: '#45a049' }
            }}
          >
            Extra
          </Button>
        </Grid>
        
        <Grid item xs={2}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<IconMinus size="1vw" />}
            sx={{ 
              backgroundColor: '#f44336',
              color: 'white',
              height: '100%',
              fontSize: '0.9vw',
              fontWeight: 'bold',
              borderRadius: '0.3vw',
              '&:hover': { backgroundColor: '#da190b' }
            }}
          >
            Without
          </Button>
        </Grid>
        
        <Grid item xs={2}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<IconTag size="1vw" />}
            sx={{ 
              backgroundColor: '#FF9800',
              color: 'white',
              height: '100%',
              fontSize: '0.9vw',
              fontWeight: 'bold',
              borderRadius: '0.3vw',
              '&:hover': { backgroundColor: '#e68900' }
            }}
          >
            Offer
          </Button>
        </Grid>

        {/* Search */}
        <Grid item xs={4}>
          <TextField
            fullWidth
            placeholder="Search"
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size="1.2vw" />
                </InputAdornment>
              ),
              sx: {
                fontSize: '0.9vw',
                height: '100%'
              }
            }}
            sx={{
              height: '100%',
              '& .MuiOutlinedInput-root': {
                backgroundColor: '#f5f5f5',
                height: '100%',
                borderRadius: '0.3vw'
              }
            }}
          />
        </Grid>

        {/* Sort Button */}
        <Grid item xs={2}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<IconSortAscending size="1vw" />}
            sx={{ 
              backgroundColor: '#2196F3',
              color: 'white',
              height: '100%',
              fontSize: '0.9vw',
              fontWeight: 'bold',
              borderRadius: '0.3vw',
              '&:hover': { backgroundColor: '#1976D2' }
            }}
          >
            Sort
          </Button>
        </Grid>
      </Grid>
    </Box>
  );
};

export default ActionButtonsBar;

===== src/Pages/pos/sales/components/CategorySidebar.tsx =====
// File: src/pages/pos/sales/components/CategorySidebar.tsx
import React, { useState } from 'react';
import { 
  Box, List, ListItem, ListItemButton,
  Avatar, Typography
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Category {
  id: string;
  name: string;
  icon: string;
  color: string;
}

const CategorySidebar: React.FC = () => {
  const { t } = useTranslation();
  const [selectedCategory, setSelectedCategory] = useState('burgers');

  // زيادة عدد الفئات للاختبار
  const categories: Category[] = [
    { id: 'burgers', name: 'برجر', icon: '🍔', color: '#FF5722' },
    { id: 'fries', name: 'بطاطس', icon: '🍟', color: '#FF9800' },
    { id: 'pasta', name: 'باستا', icon: '🍝', color: '#4CAF50' },
    { id: 'pizza', name: 'بيتزا', icon: '🍕', color: '#2196F3' },
    { id: 'drinks', name: 'مشروبات', icon: '🥤', color: '#9C27B0' },
    { id: 'desserts', name: 'حلويات', icon: '🍰', color: '#E91E63' },
    { id: 'salads', name: 'سلطات', icon: '🥗', color: '#4CAF50' },
    { id: 'sandwiches', name: 'ساندوتش', icon: '🥪', color: '#795548' },
    { id: 'chicken', name: 'فراخ', icon: '🍗', color: '#FF5722' },
    { id: 'seafood', name: 'مأكولات بحرية', icon: '🦐', color: '#00BCD4' }
  ];

  return (
    <Box sx={{ 
      width: '100%',
      height: '100%',
      backgroundColor: '#f5f5f5',
      borderLeft: '1px solid #e0e0e0',
      borderRight: '1px solid #e0e0e0',
      display: 'flex',
      flexDirection: 'column'
    }}>
      <List sx={{ 
        padding: '0.5vh 0.2vw',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        gap: '0.8vh',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
          width: '0.2vw'
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0,0,0,0.3)',
          borderRadius: '0.1vw'
        },
        '&::-webkit-scrollbar-track': {
          backgroundColor: 'rgba(0,0,0,0.1)'
        }
      }}>
        {categories.map((category) => (
          <ListItem 
            key={category.id} 
            disablePadding 
            sx={{ 
              minHeight: '10vh', // ارتفاع ثابت لكل عنصر
              flexShrink: 0
            }}
          >
            <ListItemButton
              selected={selectedCategory === category.id}
              onClick={() => setSelectedCategory(category.id)}
              sx={{
                borderRadius: '0.4vw',
                flexDirection: 'column',
                height: '100%',
                backgroundColor: 'white',
                padding: '0.8vh 0.1vw',
                '&.Mui-selected': {
                  backgroundColor: category.color + '20',
                  '&:hover': {
                    backgroundColor: category.color + '30',
                  }
                },
                '&:hover': {
                  backgroundColor: selectedCategory === category.id 
                    ? category.color + '30' 
                    : 'rgba(0,0,0,0.04)'
                }
              }}
            >
              <Avatar
                sx={{ 
                  width: '3.2vw', 
                  height: '3.2vw',
                  backgroundColor: selectedCategory === category.id ? category.color : 'grey.200',
                  fontSize: '1.6vw',
                  marginBottom: '0.4vh'
                }}
              >
                {category.icon}
              </Avatar>
              <Typography 
                sx={{ 
                  fontWeight: 'bold',
                  color: selectedCategory === category.id ? category.color : 'text.secondary',
                  textAlign: 'center',
                  fontSize: '0.65vw',
                  lineHeight: 1.1,
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  display: '-webkit-box',
                  WebkitLineClamp: 2,
                  WebkitBoxOrient: 'vertical',
                  width: '100%',
                  maxHeight: '2.2vh'
                }}
              >
                {category.name}
              </Typography>
            </ListItemButton>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default CategorySidebar;

===== src/Pages/pos/sales/components/NumberPadBar.tsx =====
// File: src/pages/pos/sales/components/NumberPadBar.tsx
import React, { useState } from 'react';
import { Box, Button, Typography, Paper } from '@mui/material';
import { IconBackspace } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

const NumberPadBar: React.FC = () => {
  const { t } = useTranslation();
  const [displayValue, setDisplayValue] = useState('5');

  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'];

  const handleNumberClick = (value: string) => {
    if (value === 'C') {
      setDisplayValue('');
    } else if (value === '.') {
      if (!displayValue.includes('.')) {
        setDisplayValue(prev => prev + '.');
      }
    } else {
      setDisplayValue(prev => prev === '0' ? value : prev + value);
    }
  };

  return (
    <Box sx={{ 
      width: '100%',
      height: '100%',
      padding: '0.5vh 1vw',
      backgroundColor: 'white',
      borderBottom: '1px solid #e0e0e0',
      display: 'flex',
      alignItems: 'center',
      gap: '0.5vw'
    }}>
      {/* Display Value - عرض ثابت */}
      <Paper 
        elevation={0}
        sx={{ 
          width: '12vw',
          height: '80%',
          backgroundColor: '#2196F3',
          borderRadius: '0.5vw',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexShrink: 0
        }}
      >
        <Typography 
          sx={{ 
            color: 'white',
            fontWeight: 'bold',
            fontSize: '2.2vw',
            lineHeight: 1
          }}
        >
          {displayValue || '0'}
        </Typography>
      </Paper>

      {/* Number Buttons Container */}
      <Box sx={{ 
        flex: 1,
        height: '80%',
        display: 'flex',
        gap: '0.3vw'
      }}>
        {numbers.map((num) => (
          <Button
            key={num}
            variant="outlined"
            onClick={() => handleNumberClick(num)}
            sx={{ 
              flex: 1,
              height: '100%',
              fontSize: '1.1vw',
              fontWeight: 'bold',
              borderColor: '#e0e0e0',
              color: num === 'C' ? '#f44336' : 'text.primary',
              borderRadius: '0.3vw',
              minWidth: 0,
              '&:hover': { 
                backgroundColor: num === 'C' ? '#ffebee' : '#f5f5f5' 
              }
            }}
          >
            {num === 'C' ? <IconBackspace size="1.2vw" /> : num}
          </Button>
        ))}
      </Box>
    </Box>
  );
};

export default NumberPadBar;

===== src/Pages/pos/sales/components/OrderSummary.tsx =====
// File: src/pages/pos/sales/components/OrderSummary.tsx
import React from 'react';
import { 
  Box, Typography, List, ListItem, 
  IconButton, Divider, Button, Grid
} from '@mui/material';
import { IconTrash, IconSend, IconPrinter, IconCreditCard, IconUser } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

const OrderSummary: React.FC = () => {
  useTranslation();

  const orderItems = [
    { id: '1', name: 'Crepe', price: 50, quantity: 2, extras: 'Extra cheese', extraPrice: 20, total: 100 },
    { id: '2', name: 'Crepe', price: 50, quantity: 2, extras: 'Extra cheese', extraPrice: 20, total: 100 },
    { id: '3', name: 'Crepe', price: 50, quantity: 2, extras: 'Extra cheese', extraPrice: 20, total: 100 },
    { id: '4', name: 'Crepe', price: 50, quantity: 2, extras: 'Extra cheese', extraPrice: 20, total: 100 }
  ];

  return (
    <Box sx={{ 
      width: '100%',
      height: '100%',
      display: 'flex', 
      flexDirection: 'column',
      backgroundColor: 'white'
    }}>
      {/* Order Header */}
      <Box sx={{ 
        height: '7%',
        backgroundColor: '#2196F3',
        color: 'white',
        padding: '1vh 0.8vw',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        flexShrink: 0
      }}>
        <Typography sx={{ 
          fontWeight: 'bold',
          fontSize: '1.1vw'
        }}>
          #123
        </Typography>
        <Typography sx={{ 
          fontWeight: 'bold',
          fontSize: '1.8vw'
        }}>
          1250 EGP
        </Typography>
      </Box>

      {/* Order Details Header */}
      <Box sx={{ 
        height: '10%',
        padding: '1vh 0.8vw',
        borderBottom: '1px solid #e0e0e0',
        flexShrink: 0,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center'
      }}>
        <Typography sx={{ 
          fontWeight: 'bold', 
          marginBottom: '0.5vh',
          fontSize: '0.9vw'
        }}>
          Order Details
        </Typography>
        
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: '0.3vw',
          backgroundColor: '#f5f5f5',
          padding: '0.3vh 0.5vw',
          borderRadius: '0.2vw'
        }}>
          <IconUser size="0.8vw" color="#666" />
          <Typography sx={{ 
            color: 'text.secondary',
            fontSize: '0.7vw'
          }}>
            Walk in Customer
          </Typography>
        </Box>
      </Box>

      {/* Order Items */}
      <Box sx={{ 
        height: '58%',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
          width: '0.3vw'
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgba(0,0,0,0.2)',
          borderRadius: '0.15vw'
        }
      }}>
        <List sx={{ padding: 0 }}>
          {orderItems.map((item) => (
            <ListItem 
              key={item.id}
              sx={{ 
                borderBottom: '1px solid #f0f0f0',
                padding: '1vh 0.8vw',
                display: 'block'
              }}
            >
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'flex-start', 
                width: '100%',
                gap: '0.3vw'
              }}>
                <Box sx={{ 
                  width: '1vw', 
                  height: '1vw', 
                  backgroundColor: '#f0f0f0',
                  borderRadius: '0.1vw',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  flexShrink: 0,
                  marginTop: '0.2vh'
                }}>
                                  <IconButton 
                  size="small" 
                  sx={{ 
                    flexShrink: 0,
                    padding: '0.2vh'
                  }}
                >
                  <IconTrash size="0.8vw" />
                </IconButton>
                </Box>
                
                <Box sx={{ flex: 1, minWidth: 0 }}>
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'flex-start',
                    marginBottom: '0.3vh'
                  }}>
                    <Typography sx={{ 
                      fontWeight: 'bold',
                      fontSize: '0.7vw',
                      lineHeight: 1.2
                    }}>
                      {item.quantity} × {item.name}
                    </Typography>
                    <Typography sx={{ 
                      fontWeight: 'bold',
                      fontSize: '0.7vw'
                    }}>
                      {item.price}
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '0.3vh'
                  }}>
                    <Typography sx={{
                      color: 'text.secondary',
                      fontSize: '0.6vw',
                      lineHeight: 1
                    }}>
                      2 × {item.extras} [{item.extraPrice}]
                    </Typography>
                    <Typography sx={{ 
                      fontWeight: 'bold', 
                      color: '#2196F3',
                      fontSize: '0.7vw'
                    }}>
                      {item.total}
                    </Typography>
                  </Box>
                  
                  <Typography sx={{
                    color: 'text.secondary',
                    fontSize: '0.6vw'
                  }}>
                    {item.price}
                  </Typography>
                </Box>
                

              </Box>
            </ListItem>
          ))}
        </List>
      </Box>

      {/* Summary & Actions */}
      <Box sx={{ 
        height: '25%',
        padding: '1vh 0.8vw',
        borderTop: '1px solid #e0e0e0',
        flexShrink: 0,
        display: 'flex',
        flexDirection: 'column'
      }}>
        {/* Summary */}
        <Box sx={{ flex: 0.6, marginBottom: '1vh' }}>
          {[
            { label: 'Sub Total', value: '250 EGP' },
            { label: 'Discount', value: '20 EGP' },
            { label: 'Tax', value: '50 EGP' },
            { label: 'Service', value: '70 EGP' }
          ].map((item) => (
            <Box key={item.label} sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              marginBottom: '0.3vh' 
            }}>
              <Typography sx={{ fontSize: '0.7vw' }}>
                {item.label}
              </Typography>
              <Typography sx={{ 
                fontWeight: 'bold',
                fontSize: '0.7vw'
              }}>
                {item.value}
              </Typography>
            </Box>
          ))}
          
          <Divider sx={{ margin: '0.5vh 0' }} />
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography sx={{ 
              fontWeight: 'bold',
              fontSize: '0.9vw'
            }}>
              Total
            </Typography>
            <Typography sx={{ 
              fontWeight: 'bold',
              fontSize: '0.9vw'
            }}>
              320 EGP
            </Typography>
          </Box>
        </Box>

        {/* Action Buttons */}
        <Grid container spacing="0.2vw" sx={{ flex: 0.4 }}>
          {[
            { icon: IconSend, label: 'Send', color: '#f44336' },
            { icon: IconPrinter, label: 'Print', color: '#2196F3' },
            { icon: IconCreditCard, label: 'Pay', color: '#4CAF50' }
          ].map((button) => (
            <Grid item xs={4} key={button.label} sx={{ height: '100%' }}>
              <Button
                fullWidth
                variant="contained"
                startIcon={<button.icon size="0.8vw" />}
                sx={{ 
                  backgroundColor: button.color,
                  color: 'white',
                  height: '100%',
                  fontWeight: 'bold',
                  fontSize: '0.6vw',
                  borderRadius: '0.2vw',
                  '&:hover': { 
                    backgroundColor: button.color,
                    filter: 'brightness(0.9)'
                  }
                }}
              >
                {button.label}
              </Button>
            </Grid>
          ))}
        </Grid>
      </Box>
    </Box>
  );
};

export default OrderSummary;

===== src/Pages/pos/sales/components/ProductGrid.tsx =====
// File: src/pages/pos/sales/components/ProductGrid.tsx
import React from 'react';
import { 
  Box, Card, CardMedia, CardContent, 
  Typography
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Product {
  id: string;
  name: string;
  price: number;
  image: string;
  category: string;
}

const ProductGrid: React.FC = () => {
  const { t } = useTranslation();

  const products: Product[] = Array.from({ length: 18 }, (_, index) => ({
    id: `${index + 1}`,
    name: 'كريب فراخ',
    price: 100,
    image: `https://picsum.photos/195/187?random=${index + 1}`,
    category: 'wraps'
  }));

  const handleProductClick = (product: Product) => {
    console.log('Adding product:', product);
  };

  return (
    <Box sx={{ 
      width: '100%',
      height: '100%',
      overflow: 'auto',
      backgroundColor: '#f5f5f5',
      padding: '8px',
      display: 'flex',
      flexDirection: 'column',
      gap: '8px',
      '&::-webkit-scrollbar': {
        width: '8px'
      },
      '&::-webkit-scrollbar-thumb': {
        backgroundColor: 'rgba(0,0,0,0.2)',
        borderRadius: '4px'
      }
    }}>
      {/* الصف الأول */}
      <Box sx={{
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        gap: '8px',
        flexWrap: 'nowrap'
      }}>
        {products.slice(0, 6).map((product) => (
          <Card 
            key={product.id}
            sx={{ 
              cursor: 'pointer',
              transition: 'transform 0.2s, box-shadow 0.2s',
              '&:hover': {
                transform: 'translateY(-2px)',
                boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
              },
              borderRadius: '16px',
              overflow: 'hidden',
              width: '195px',
              height: '269px',
              backgroundColor: 'white',
              position: 'relative',
              flexShrink: 0
            }}
            onClick={() => handleProductClick(product)}
          >
            <CardMedia
              component="img"
              sx={{ 
                width: '195px',
                height: '187px',
                objectFit: 'cover',
                borderRadius: '16px'
              }}
              image={product.image}
              alt={product.name}
            />
            <CardContent sx={{ 
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
              height: '82px',
              padding: '8px 16px',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'white',
              borderBottomLeftRadius: '16px',
              borderBottomRightRadius: '16px',
              '&:last-child': { 
                paddingBottom: '8px' 
              }
            }}>
              <Typography 
                sx={{ 
                  color: 'black',
                  fontSize: '16px',
                  fontFamily: 'Cairo',
                  fontWeight: '600',
                  textAlign: 'center',
                  marginBottom: '4px'
                }}
              >
                {product.name}
              </Typography>
              <Typography 
                sx={{ 
                  textAlign: 'center'
                }}
              >
                <span style={{
                  color: 'black',
                  fontSize: '20px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  {product.price}{' '}
                </span>
                <span style={{
                  color: 'black',
                  fontSize: '12px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  EGP
                </span>
              </Typography>
            </CardContent>
          </Card>
        ))}
      </Box>

      {/* الصف الثاني */}
      <Box sx={{
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        gap: '8px',
        flexWrap: 'nowrap'
      }}>
        {products.slice(6, 12).map((product) => (
          <Card 
            key={product.id}
            sx={{ 
              cursor: 'pointer',
              transition: 'transform 0.2s, box-shadow 0.2s',
              '&:hover': {
                transform: 'translateY(-2px)',
                boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
              },
              borderRadius: '16px',
              overflow: 'hidden',
              width: '195px',
              height: '269px',
              backgroundColor: 'white',
              position: 'relative',
              flexShrink: 0
            }}
            onClick={() => handleProductClick(product)}
          >
            <CardMedia
              component="img"
              sx={{ 
                width: '195px',
                height: '187px',
                objectFit: 'cover',
                borderRadius: '16px'
              }}
              image={product.image}
              alt={product.name}
            />
            <CardContent sx={{ 
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
              height: '82px',
              padding: '8px 16px',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'white',
              borderBottomLeftRadius: '16px',
              borderBottomRightRadius: '16px',
              '&:last-child': { 
                paddingBottom: '8px' 
              }
            }}>
              <Typography 
                sx={{ 
                  color: 'black',
                  fontSize: '16px',
                  fontFamily: 'Cairo',
                  fontWeight: '600',
                  textAlign: 'center',
                  marginBottom: '4px'
                }}
              >
                {product.name}
              </Typography>
              <Typography 
                sx={{ 
                  textAlign: 'center'
                }}
              >
                <span style={{
                  color: 'black',
                  fontSize: '20px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  {product.price}{' '}
                </span>
                <span style={{
                  color: 'black',
                  fontSize: '12px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  EGP
                </span>
              </Typography>
            </CardContent>
          </Card>
        ))}
      </Box>

      {/* الصف الثالث */}
      <Box sx={{
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        gap: '8px',
        flexWrap: 'nowrap'
      }}>
        {products.slice(12, 18).map((product) => (
          <Card 
            key={product.id}
            sx={{ 
              cursor: 'pointer',
              transition: 'transform 0.2s, box-shadow 0.2s',
              '&:hover': {
                transform: 'translateY(-2px)',
                boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
              },
              borderRadius: '16px',
              overflow: 'hidden',
              width: '195px',
              height: '269px',
              backgroundColor: 'white',
              position: 'relative',
              flexShrink: 0
            }}
            onClick={() => handleProductClick(product)}
          >
            <CardMedia
              component="img"
              sx={{ 
                width: '195px',
                height: '187px',
                objectFit: 'cover',
                borderRadius: '16px'
              }}
              image={product.image}
              alt={product.name}
            />
            <CardContent sx={{ 
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
              height: '82px',
              padding: '8px 16px',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'white',
              borderBottomLeftRadius: '16px',
              borderBottomRightRadius: '16px',
              '&:last-child': { 
                paddingBottom: '8px' 
              }
            }}>
              <Typography 
                sx={{ 
                  color: 'black',
                  fontSize: '16px',
                  fontFamily: 'Cairo',
                  fontWeight: '600',
                  textAlign: 'center',
                  marginBottom: '4px'
                }}
              >
                {product.name}
              </Typography>
              <Typography 
                sx={{ 
                  textAlign: 'center'
                }}
              >
                <span style={{
                  color: 'black',
                  fontSize: '20px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  {product.price}{' '}
                </span>
                <span style={{
                  color: 'black',
                  fontSize: '12px',
                  fontFamily: 'Cairo',
                  fontWeight: '600'
                }}>
                  EGP
                </span>
              </Typography>
            </CardContent>
          </Card>
        ))}
      </Box>
    </Box>
  );
};

export default ProductGrid;

===== src/Pages/pos/sales/components/TopBar.tsx =====
// File: src/pages/pos/sales/components/TopBar.tsx
import React from 'react';
import { 
  AppBar, Toolbar, Typography, Button, Box, 
  IconButton, useMediaQuery, Theme
} from '@mui/material';
import { 
  IconShoppingCart, IconDiscount, IconReceipt, 
  IconTable, IconSettings 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import Logo from 'src/layouts/full/shared/logo/Logo';

const TopBar: React.FC = () => {
  const { t } = useTranslation();
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));

  return (
    <AppBar 
      position="static" 
      elevation={0}
      sx={{ 
        backgroundColor: 'white',
        borderBottom: '1px solid #e0e0e0',
        height: '100%'
      }}
    >
      <Toolbar sx={{ 
        justifyContent: 'space-between', 
        height: '100%',
        minHeight: 'unset !important'
      }}>

        <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box>

        {/* Center Buttons */}
        <Box sx={{ display: 'flex', gap: '1vw' }}>
          <Button
            startIcon={<IconShoppingCart size="1.2vw" />}
            variant="outlined"
            sx={{ 
              borderColor: '#2196F3',
              color: '#2196F3',
              fontSize: '0.8vw',
              padding: '0.5vh 1vw',
              '&:hover': { backgroundColor: '#e3f2fd' }
            }}
          >
            {t('pos.todayOrders')}
          </Button>
          
          <Button
            startIcon={<IconTable size="1.2vw" />}
            variant="outlined"
            sx={{ 
              borderColor: '#2196F3',
              color: '#2196F3',
              fontSize: '0.8vw',
              padding: '0.5vh 1vw',
              '&:hover': { backgroundColor: '#e3f2fd' }
            }}
          >
            {t('pos.table')}
          </Button>
          
          <Button
            startIcon={<IconDiscount size="1.2vw" />}
            variant="outlined"
            sx={{ 
              borderColor: '#2196F3',
              color: '#2196F3',
              fontSize: '0.8vw',
              padding: '0.5vh 1vw',
              '&:hover': { backgroundColor: '#e3f2fd' }
            }}
          >
            {t('pos.discount')}
          </Button>
          
          <Button
            startIcon={<IconReceipt size="1.2vw" />}
            variant="outlined"
            sx={{ 
              borderColor: '#2196F3',
              color: '#2196F3',
              fontSize: '0.8vw',
              padding: '0.5vh 1vw',
              '&:hover': { backgroundColor: '#e3f2fd' }
            }}
          >
            {t('pos.void')}
          </Button>
        </Box>

        {/* Right Side */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: '0.5vw' }}>
          <Typography sx={{ 
            color: 'text.secondary',
            fontSize: '0.8vw'
          }}>
            {t('pos.takeaway')}
          </Typography>
          <IconButton>
            <IconSettings size="1.5vw" />
          </IconButton>
        </Box>
      </Toolbar>
    </AppBar>
  );
};

export default TopBar;

===== src/Pages/pos/sales/draft/CategorySidebar.tsx =====
// import React from 'react';
// import { CategoryItem } from './types/PosSystem';

// interface CategorySidebarProps {
//   categories: CategoryItem[];
//   selectedCategory: string;
//   onCategorySelect: (categoryId: string) => void;
//   className?: string;
// }

// const CategorySidebar: React.FC<CategorySidebarProps> = ({
//   categories,
//   selectedCategory,
//   onCategorySelect,
//   className = ''
// }) => {
//   return (
//     <div className={`category-sidebar ${className}`}>
//       {categories.map((category) => (
//         <button
//           key={category.id}
//           onClick={() => onCategorySelect(category.id)}
//           className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
//         >
//           <img src={category.image} alt={category.name} />
//           <span>{category.nameArabic}</span>
//         </button>
//       ))}
//     </div>
//   );
// };

// export default CategorySidebar;

===== src/Pages/pos/sales/draft/MenuGrid.tsx =====
// import React from 'react';
// import { MenuItem } from './types/PosSystem';

// interface MenuGridProps {
//   items: MenuItem[];
//   onItemClick: (item: MenuItem) => void;
//   className?: string;
// }

// const MenuGrid: React.FC<MenuGridProps> = ({
//   items,
//   onItemClick,
//   className = ''
// }) => {
//   return (
//     <div className={`products-grid ${className}`}>
//       {items.map((item) => (
//         <button
//           key={item.id}
//           onClick={() => onItemClick(item)}
//           className="product-card"
//         >
//           <img src={item.image} alt={item.name} className="product-image" />
//           <div className="product-info">
//             <div className="product-name">{item.nameArabic}</div>
//             <div className="product-price">
//               <span>{item.price}</span>
//               <span className="currency">EGP</span>
//             </div>
//           </div>
//         </button>
//       ))}
//     </div>
//   );
// };

// export default MenuGrid;

===== src/Pages/pos/sales/draft/NumericKeypad.tsx =====
// import React from 'react';

// interface NumericKeypadProps {
//   onNumberClick: (number: string) => void;
//   onClearClick: () => void;
//   currentValue: string;
//   className?: string;
// }

// const NumericKeypad: React.FC<NumericKeypadProps> = ({
//   onNumberClick,
//   onClearClick,
//   currentValue,
//   className = ''
// }) => {
//   const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'];

//   return (
//     <div className={`numeric-keypad ${className}`}>
//       <div className="keypad-grid">
//         {numbers.map((key) => (
//           <button 
//             key={key}
//             className="keypad-key"
//             onClick={() => key === 'C' ? onClearClick() : onNumberClick(key)}
//           >
//             {key}
//           </button>
//         ))}
//       </div>
//       <div className="keypad-display">
//         {currentValue}
//       </div>
//     </div>
//   );
// };

// export default NumericKeypad;

===== src/Pages/pos/sales/draft/OrderSummaryPanel.tsx =====
// import React from 'react';
// import { OrderSummary } from './types/PosSystem';

// interface OrderSummaryPanelProps {
//   orderNumber: string;
//   totalAmount: string;
//   orderSummary: OrderSummary;
//   customerName: string;
//   onCustomerNameChange: (name: string) => void;
//   onRemoveItem: (itemId: string) => void;
//   onSendOrder: () => void;
//   onPrintOrder: () => void;
//   onPayOrder: () => void;
//   className?: string;
// }

// const OrderSummaryPanel: React.FC<OrderSummaryPanelProps> = ({
//   orderNumber,
//   totalAmount,
//   orderSummary,
//   customerName,
//   onCustomerNameChange,
//   onRemoveItem,
//   onSendOrder,
//   onPrintOrder,
//   onPayOrder,
//   className = ''
// }) => {
//   return (
//     <div className={`order-container ${className}`}>
//       {/* Header */}
//       <div className="order-header">
//         <div className="order-number">{orderNumber}</div>
//         <div className="order-total">
//           <span>{totalAmount.split(' ')[0]}</span>
//           <span style={{ fontSize: '1.4rem', marginLeft: '0.4rem' }}>EGP</span>
//         </div>
//       </div>

//       {/* Body */}
//       <div className="order-body">
//         <h3 className="order-title">Order Details</h3>

//         {/* Customer Info */}
//         <div className="customer-input-container">
//           <input
//             type="text"
//             placeholder="Walk in Customer"
//             value={customerName}
//             onChange={(e) => onCustomerNameChange(e.target.value)}
//             className="customer-input"
//           />
//           <button className="customer-button">
//             <img src="/images/img_group_1000004320.svg" alt="Add customer" />
//           </button>
//         </div>

//         {/* Order Items */}
//         <div className="order-items">
//           {orderSummary.items.map((item) => (
//             <div key={item.id} className="order-item">
//               <div className="item-details">
//                 <button onClick={() => onRemoveItem(item.id)} className="delete-button">
//                   <img src="/images/img_delete_02.svg" alt="Remove" />
//                 </button>
//                 <div className="item-info">
//                   <div className="item-name">
//                     {item.quantity} X {item.menuItem.name}
//                   </div>
//                   {item.extras.map((extra, index) => (
//                     <div key={index} className="item-extras">
//                       {extra.quantity} X {extra.name} ({extra.price})
//                       <span style={{ marginLeft: '3.2rem' }}>{extra.price * extra.quantity}</span>
//                     </div>
//                   ))}
//                 </div>
//               </div>
//               <div className="item-prices">
//                 <div className="item-price">{item.menuItem.price * item.quantity}</div>
//                 <div className="item-total">{item.totalPrice}</div>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>

//       {/* Summary */}
//       <div className="order-summary">
//         <div className="summary-rows">
//           {[
//             { label: 'Sub Total', value: orderSummary.subtotal },
//             { label: 'Discount', value: orderSummary.discount },
//             { label: 'Tax', value: orderSummary.tax },
//             { label: 'Service', value: orderSummary.service }
//           ].map(item => (
//             <div key={item.label} className="summary-row">
//               <span>{item.label}</span>
//               <span className="value">{item.value} <small>EGP</small></span>
//             </div>
//           ))}
//         </div>

//         <div className="summary-total">
//           <span>Total</span>
//           <span>{orderSummary.total} <small>EGP</small></span>
//         </div>

//         <div className="action-buttons">
//           <button onClick={onSendOrder} className="action-button send-button">
//             <img src="/images/img_tabler_send.svg" alt="Send" />
//             Send
//           </button>
//           <button onClick={onPrintOrder} className="action-button print-button">
//             <img src="/images/img_printer.svg" alt="Print" />
//             Print
//           </button>
//           <button onClick={onPayOrder} className="action-button pay-button">
//             <img src="/images/img_payment_02.svg" alt="Pay" />
//             Pay
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default OrderSummaryPanel;

===== src/Pages/pos/sales/SalesPage.tsx =====
// File: src/pages/pos/sales/SalesPage.tsx
import React from 'react';
import { Box } from '@mui/material';
import { useTranslation } from 'react-i18next';
import ProductGrid from './components/ProductGrid';
import CategorySidebar from './components/CategorySidebar';
import OrderSummary from './components/OrderSummary';
import TopBar from './components/TopBar';
import NumberPadBar from './components/NumberPadBar';
import ActionButtonsBar from './components/ActionButtonsBar';

const SalesPage: React.FC = () => {
  const { t } = useTranslation();

  return (
    <Box sx={{ 
      width: '100vw',
      height: '100vh', 
      display: 'flex', 
      flexDirection: 'column',
      backgroundColor: '#f5f5f5',
      overflow: 'hidden'
    }}>
      {/* Top Bar - 8% من الارتفاع */}
      <Box sx={{ 
        width: '100%',
        height: '8vh',
        flexShrink: 0
      }}>
        <TopBar />
      </Box>
      
      {/* Main Content - 92% من الارتفاع */}
      <Box sx={{ 
        width: '100%',
        height: '92vh',
        display: 'flex',
        flexDirection: 'row'
      }}>
        {/* Products Area - 70% من العرض */}
        <Box sx={{ 
          width: '72vw',
          height: '100%',
          display: 'flex', 
          flexDirection: 'column'
        }}>
          {/* Number Pad Bar - 15% من ارتفاع المنطقة */}
          <Box sx={{ 
            width: '100%',
            height: '10%',
            flexShrink: 0
          }}>
            <NumberPadBar />
          </Box>
          
          {/* Action Buttons Bar - 10% من ارتفاع المنطقة */}
          <Box sx={{ 
            width: '100%',
            height: '10%',
            flexShrink: 0
          }}>
            <ActionButtonsBar />
          </Box>
          
          {/* Products Grid - 75% من ارتفاع المنطقة */}
          <Box sx={{ 
            width: '100%',
            height: '80%'
          }}>
            <ProductGrid />
          </Box>
        </Box>

        {/* Category Sidebar - 10% من العرض */}
        <Box sx={{ 
          width: '8vw',
          height: '100%'
        }}>
          <CategorySidebar />
        </Box>

        {/* Order Summary - 20% من العرض */}
        <Box sx={{ 
          width: '20vw',
          height: '100%'
        }}>
          <OrderSummary />
        </Box>
      </Box>
    </Box>
  );
};

export default SalesPage;

===== src/Pages/pos/screens/components/ActionsBar.tsx =====
// File: src/pages/pos-screens/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('posScreens.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('posScreens.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/screens/components/mobile/MobileScreensFilter.tsx =====
// File: src/pages/pos-screens/components/mobile/MobileScreensFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface ScreensFilterState {
  searchQuery: string;
  status: string;
  visibility: string;
  parentFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ScreensFilterState;
  onFiltersChange: (filters: ScreensFilterState) => void;
  parentScreens: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileScreensFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  parentScreens,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<ScreensFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posScreens.active') },
    { value: 'false', label: t('posScreens.inactive') }
  ];

  const visibilityOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posScreens.visible') },
    { value: 'false', label: t('posScreens.hidden') }
  ];

  const parentOptions = [
    { value: '', label: t('common.all') },
    { value: 'root', label: t('posScreens.rootScreens') },
    ...parentScreens.map(parent => ({ value: parent.id, label: parent.name }))
  ];

  const sortOptions = [
    { value: 'name', label: t('posScreens.name') },
    { value: 'displayOrder', label: t('posScreens.displayOrder') },
    { value: 'colorHex', label: t('posScreens.color') },
    { value: 'icon', label: t('posScreens.icon') }
  ];

  const handleLocalChange = (field: keyof ScreensFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: ScreensFilterState = {
      searchQuery: '',
      status: '',
      visibility: '',
      parentFilter: '',
      sortBy: 'displayOrder',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.visibility) count++;
    if (localFilters.parentFilter) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('posScreens.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('posScreens.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('posScreens.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('posScreens.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('posScreens.filter.filters')}</Typography>
            {(localFilters.status || localFilters.visibility || localFilters.parentFilter) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.visibility, localFilters.parentFilter].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('posScreens.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.visibility')}</InputLabel>
              <Select
                value={localFilters.visibility}
                label={t('posScreens.visibility')}
                onChange={(e) => handleLocalChange('visibility', e.target.value)}
              >
                {visibilityOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.parentScreen')}</InputLabel>
              <Select
                value={localFilters.parentFilter}
                label={t('posScreens.parentScreen')}
                onChange={(e) => handleLocalChange('parentFilter', e.target.value)}
              >
                {parentOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('posScreens.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('posScreens.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('posScreens.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('posScreens.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('posScreens.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('posScreens.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('posScreens.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileScreensFilter;

===== src/Pages/pos/screens/components/mobile/ScreenCards.tsx =====
// File: src/pages/pos-screens/components/mobile/ScreenCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Avatar,
  Collapse
} from '@mui/material';
import {
  IconEdit,
  IconPlus,
  IconChevronRight,
  IconChevronDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from '../StatusPill';
import { VisibilityPill } from '../VisibilityPill';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  loading: boolean;
  level?: number;
}

const ScreenCards: React.FC<Props> = ({ 
  screens, 
  onEdit, 
  onAddChild, 
  loading,
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (screenId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(screenId)) {
      newExpanded.delete(screenId);
    } else {
      newExpanded.add(screenId);
    }
    setExpanded(newExpanded);
  };

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  const ScreenCard: React.FC<{ screen: PosScreen; index: number }> = ({ screen }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);

    return (
      <Box sx={{ ml: level * 2 }}>
        <Card sx={{ 
          mb: 2,
          borderRadius: { xs: 1, sm: 2 },
          boxShadow: { xs: 1, sm: 2 },
          backgroundColor: screen.colorHex ? `${screen.colorHex}20` : undefined,
          borderLeft: screen.colorHex ? `4px solid ${screen.colorHex}` : undefined
        }}>
          <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
            <Stack spacing={2}>
              {/* Header */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                {hasChildren && (
                  <IconButton
                    size="small"
                    onClick={() => toggleExpanded(screen.id)}
                  >
                    {isExpanded ? (
                      <IconChevronDown size={16} />
                    ) : (
                      <IconChevronRight size={16} />
                    )}
                  </IconButton>
                )}

                <Avatar 
                  sx={{ 
                    width: 32, 
                    height: 32, 
                    backgroundColor: screen.colorHex,
                    fontSize: '1rem'
                  }}
                >
                  {screen.icon}
                </Avatar>

                <Typography 
                  variant="h6" 
                  component="div"
                  sx={{ 
                    flex: 1,
                    fontSize: { xs: '1rem', sm: '1.25rem' },
                    fontWeight: 'bold'
                  }}
                >
                  {screen.name}
                </Typography>

                <Typography 
                  variant="caption" 
                  color="text.secondary"
                  sx={{ 
                    backgroundColor: 'background.paper',
                    px: 1,
                    py: 0.5,
                    borderRadius: 1,
                    fontSize: { xs: '0.7rem', sm: '0.75rem' }
                  }}
                >
                  #{screen.displayOrder}
                </Typography>
              </Box>

              {/* Status Pills */}
              <Stack direction="row" spacing={1} flexWrap="wrap">
                <VisibilityPill isVisible={screen.isVisible} />
                <StatusPill isActive={screen.isActive} />
              </Stack>

              {/* Actions */}
              <Stack direction="row" spacing={1} justifyContent="flex-end">
                <IconButton
                  size="small"
                  onClick={() => onAddChild(screen)}
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'success.light',
                      color: 'success.contrastText'
                    }
                  }}
                >
                  <IconPlus size={16} />
                </IconButton>
                
                <IconButton 
                  onClick={() => onEdit(screen)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* Children */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <ScreenCards
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              loading={false}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  return (
    <Box>
      {screens.map((screen, index) => (
        <ScreenCard key={screen.id} screen={screen} index={index} />
      ))}
    </Box>
  );
};

export default ScreenCards;

===== src/Pages/pos/screens/components/OptimizedScreenTree.tsx =====
// File: src/pages/pos-screens/components/OptimizedDragTree.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  IconButton,
  Avatar,
  Chip,
  Paper,
  Collapse
} from '@mui/material';
import {
  IconEdit,
  IconPlus,
  IconGripVertical,
  IconArrowUp,
  IconArrowDown,
  IconChevronRight,
  IconChevronDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[], parentId?: string) => void;
  level?: number;
  parentId?: string;
}

// دالة debounce للتحكم في تكرار الأحداث
const debounce = (func: Function, delay: number) => {
  let timeoutId: NodeJS.Timeout;
  return (...args: any[]) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

const OptimizedDragTree: React.FC<Props> = React.memo(({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0,
  parentId
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());
  const [draggedItem, setDraggedItem] = React.useState<string | null>(null);
  const [dragOverItem, setDragOverItem] = React.useState<string | null>(null);
  const [, setDragPosition] = React.useState<{ x: number; y: number } | null>(null);

  const toggleExpanded = React.useCallback((screenId: string) => {
    setExpanded(prev => {
      const newExpanded = new Set(prev);
      if (newExpanded.has(screenId)) {
        newExpanded.delete(screenId);
      } else {
        newExpanded.add(screenId);
      }
      return newExpanded;
    });
  }, []);

  // دالة محسنة للسحب مع requestAnimationFrame
  const updateDragPosition = React.useCallback(
    debounce((x: number, y: number) => {
      requestAnimationFrame(() => {
        setDragPosition({ x, y });
      });
    }, 16), // 60fps
    []
  );

  const moveScreen = React.useCallback((fromIndex: number, toIndex: number) => {
    if (fromIndex === toIndex) return;

    const newScreens = [...screens];
    const [movedScreen] = newScreens.splice(fromIndex, 1);
    newScreens.splice(toIndex, 0, movedScreen);
    
    onReorder(newScreens, parentId);
  }, [screens, onReorder, parentId]);

  // Drag handlers محسنة
  const handleDragStart = React.useCallback((e: React.DragEvent, screenId: string, index: number) => {
    setDraggedItem(screenId);
    e.dataTransfer.setData('text/plain', JSON.stringify({ screenId, index, parentId }));
    e.dataTransfer.effectAllowed = 'move';
    
    // تحسين الـ drag image
    const dragElement = e.currentTarget as HTMLElement;
    const rect = dragElement.getBoundingClientRect();
    
    // إنشاء drag image مخصص
    const dragImage = dragElement.cloneNode(true) as HTMLElement;
    dragImage.style.transform = 'rotate(5deg)';
    dragImage.style.opacity = '0.8';
    dragImage.style.pointerEvents = 'none';
    dragImage.style.position = 'absolute';
    dragImage.style.top = '-1000px';
    document.body.appendChild(dragImage);
    
    e.dataTransfer.setDragImage(dragImage, rect.width / 2, rect.height / 2);
    
    // تنظيف drag image بعد فترة
    setTimeout(() => {
      document.body.removeChild(dragImage);
    }, 0);
    
    // تحديث موضع السحب
    updateDragPosition(e.clientX, e.clientY);
  }, [parentId, updateDragPosition]);

  const handleDrag = React.useCallback((e: React.DragEvent) => {
    if (e.clientX !== 0 && e.clientY !== 0) {
      updateDragPosition(e.clientX, e.clientY);
    }
  }, [updateDragPosition]);

  const handleDragEnd = React.useCallback(() => {
    setDraggedItem(null);
    setDragOverItem(null);
    setDragPosition(null);
  }, []);

  const handleDragOver = React.useCallback((e: React.DragEvent, screenId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverItem(screenId);
  }, []);

  const handleDragLeave = React.useCallback(() => {
    setDragOverItem(null);
  }, []);

  const handleDrop = React.useCallback((e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    setDragOverItem(null);
    
    try {
      const dragData = JSON.parse(e.dataTransfer.getData('text/plain'));
      
      // تأكد من أن السحب في نفس المستوى
      if (dragData.parentId === parentId && dragData.index !== dropIndex) {
        moveScreen(dragData.index, dropIndex);
      }
    } catch (error) {
      }
  }, [parentId, moveScreen]);

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number;
  }> = React.memo(({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);
    const isDragging = draggedItem === screen.id;
    const isDragOver = dragOverItem === screen.id;

    const handleEdit = React.useCallback(() => {
      onEdit(screen);
    }, [screen]);

    const handleAddChild = React.useCallback(() => {
      onAddChild(screen);
    }, [screen]);

    const handleToggleExpanded = React.useCallback(() => {
      toggleExpanded(screen.id);
    }, [screen.id]);

    const handleMoveUp = React.useCallback(() => {
      moveScreen(index, Math.max(0, index - 1));
    }, [index]);

    const handleMoveDown = React.useCallback(() => {
      moveScreen(index, Math.min(screens.length - 1, index + 1));
    }, [index]);

    return (
      <Box>
        {/* العنصر الرئيسي */}
        <Paper
  elevation={isDragOver ? 2 : 0}
  draggable
  onDragStart={(e) => handleDragStart(e, screen.id, index)}
  onDrag={handleDrag}
  onDragEnd={handleDragEnd}
  onDragOver={(e) => handleDragOver(e, screen.id)}
  onDragLeave={handleDragLeave}
  onDrop={(e) => handleDrop(e, index)}
  sx={{
    display: 'flex',
    alignItems: 'center',
    py: 0.5,
    px: 1,
    ml: level * 2,
    backgroundColor: isDragOver 
      ? 'primary.light' 
      : screen.colorHex 
        ? `${screen.colorHex}15` 
        : 'background.paper',
    borderLeft: screen.colorHex ? `3px solid ${screen.colorHex}` : undefined,
    borderRadius: 1,
    mb: 0.5,
    minHeight: 40,
    cursor: 'grab',
    // إزالة التدوير والانحناء - فقط شفافية
    opacity: isDragging ? 0.5 : 1,
    // تحسين الانتقالات بدون تدوير
    transition: isDragging 
      ? 'none' 
      : 'all 0.2s ease',
    // إزالة will-change للأداء الأفضل
    '&:hover': {
      backgroundColor: screen.colorHex ? `${screen.colorHex}25` : 'action.hover',
      // إزالة التحرك لأعلى أيضاً
      boxShadow: isDragging ? 'none' : 1,
    },
    '&:active': {
      cursor: 'grabbing',
    }
  }}
>
          {/* زر التوسيع/الطي */}
          {hasChildren && (
            <IconButton
              size="small"
              onClick={handleToggleExpanded}
              sx={{ p: 0.25, mr: 0.5 }}
            >
              {isExpanded ? (
                <IconChevronDown size={14} />
              ) : (
                <IconChevronRight size={14} />
              )}
            </IconButton>
          )}

          {/* مقبض السحب */}
          <Box 
            sx={{ 
              mr: 1, 
              display: 'flex', 
              alignItems: 'center',
              '&:hover': {
                color: 'primary.main'
              }
            }}
          >
            <IconGripVertical size={14} color="#999" />
          </Box>

          {/* أزرار الترتيب */}
          <Stack direction="column" spacing={0} sx={{ mr: 1 }}>
            <IconButton
              size="small"
              onClick={handleMoveUp}
              disabled={index === 0}
              sx={{ p: 0.25 }}
            >
              <IconArrowUp size={10} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleMoveDown}
              disabled={index === screens.length - 1}
              sx={{ p: 0.25 }}
            >
              <IconArrowDown size={10} />
            </IconButton>
          </Stack>
          
          {/* أيقونة الشاشة */}
          <Avatar 
            sx={{ 
              width: 24, 
              height: 24, 
              backgroundColor: screen.colorHex,
              fontSize: '0.7rem',
              mr: 1
            }}
          >
            {screen.icon}
          </Avatar>

          {/* اسم الشاشة */}
          <Typography 
            variant="body2" 
            sx={{ 
              flex: 1, 
              fontSize: '0.875rem',
              fontWeight: 500
            }}
          >
            {screen.name}
          </Typography>

          {/* ترتيب العرض */}
          <Chip
            label={`#${screen.displayOrder}`}
            size="small"
            variant="outlined"
            sx={{ 
              height: 20,
              fontSize: '0.7rem',
              mr: 1
            }}
          />

          {/* حالات مضغوطة */}
          <Stack direction="row" spacing={0.5} sx={{ mr: 1 }}>
            {!screen.isVisible && (
              <Chip
                label="مخفي"
                size="small"
                color="warning"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
            {!screen.isActive && (
              <Chip
                label="غير نشط"
                size="small"
                color="default"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
          </Stack>

          {/* أزرار الإجراءات */}
          <Stack direction="row" spacing={0.5}>
            <IconButton
              size="small"
              onClick={handleAddChild}
              sx={{ p: 0.25 }}
            >
              <IconPlus size={14} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleEdit}
              sx={{ p: 0.25 }}
            >
              <IconEdit size={14} />
            </IconButton>
          </Stack>
        </Paper>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <OptimizedDragTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => onReorder(reorderedChildren, screen.id)}
              level={level + 1}
              parentId={screen.id}
            />
          </Collapse>
        )}
      </Box>
    );
  });

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 2 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxHeight: '70vh', overflow: 'auto' }}>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
});

OptimizedDragTree.displayName = 'OptimizedDragTree';

export default OptimizedDragTree;

===== src/Pages/pos/screens/components/PageHeader.tsx =====
// File: src/pages/pos-screens/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { posScreensImportExportConfig } from '../../../components/configs/importExportConfigs';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface Props {
  exportData: PosScreen[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // تحويل البيانات الهرمية إلى مسطحة للتصدير
  const flattenScreens = (screens: PosScreen[]): any[] => {
    const result: any[] = [];
    
    const flatten = (screens: PosScreen[], level = 0) => {
      screens.forEach(screen => {
        result.push({
          screenName: screen.name,
          parentScreenName: screen.parentScreen?.name || '',
          displayOrder: screen.displayOrder,
          colorHex: screen.colorHex,
          icon: screen.icon,
          isVisible: screen.isVisible,
          level: level
        });
        
        if (screen.children && screen.children.length > 0) {
          flatten(screen.children, level + 1);
        }
      });
    };
    
    flatten(screens);
    return result;
  };

  const config = {
    ...posScreensImportExportConfig,
    onExport: () => flattenScreens(exportData)
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('posScreens.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/screens/components/ScreenForm.tsx =====
// File: src/pages/pos-screens/components/ScreenForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Box,
  Typography, Avatar, Stack
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import ScreenTreeSelect from './ScreenTreeSelect';
import { StatusPill } from './StatusPill';
import { VisibilityPill } from './VisibilityPill';

type FormValues = { 
  screenName: string; 
  ParentScreenId?: string;
  isVisible: boolean;
  displayOrder: number;
  colorHex: string;
  icon: string;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: PosScreen;
  parentScreen?: PosScreen;
  allScreens: PosScreen[];
  onClose: () => void;
  onSubmit: (data: FormValues) => void;
}

const ScreenForm: React.FC<Props> = ({
  open, mode, initialValues, parentScreen, allScreens, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  
  const getNextDisplayOrder = () => {
    if (parentScreen) {
      return (parentScreen.children?.length || 0) + 1;
    }
    return allScreens.length + 1;
  };

  const defaults: FormValues = { 
    screenName: '', 
    ParentScreenId: parentScreen?.id || '',
    isVisible: true,
    displayOrder: getNextDisplayOrder(),
    colorHex: '#2196F3',
    icon: '📱'
  };

  const { control, handleSubmit, reset, watch } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      screenName: initialValues?.name || '',
      ParentScreenId: initialValues?.parentId || '',
      isVisible: initialValues?.isVisible ?? true,
      displayOrder: initialValues?.displayOrder ?? 1,
      colorHex: initialValues?.colorHex ?? '#2196F3',
      icon: initialValues?.icon ?? '📱',
    },
  });

  const colorHex = watch('colorHex');
  const icon = watch('icon');
  const isVisible = watch('isVisible');
  const screenName = watch('screenName');

  React.useEffect(() => {
    if (mode === 'add') {
      reset({
        ...defaults,
        ParentScreenId: parentScreen?.id || '',
        displayOrder: getNextDisplayOrder()
      });
    } else if (initialValues) {
      reset({
        screenName: initialValues.name,
        ParentScreenId: initialValues.parentId || '',
        isVisible: initialValues.isVisible,
        displayOrder: initialValues.displayOrder,
        colorHex: initialValues.colorHex,
        icon: initialValues.icon,
      });
    }
  }, [mode, initialValues, parentScreen, reset]);

  const submit = (data: FormValues) => {
    onSubmit(data);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' 
          ? (parentScreen ? t('posScreens.addChild') : t('posScreens.add'))
          : t('posScreens.edit')
        }
        {parentScreen && (
          <Box component="span" sx={{ fontSize: '0.8em', color: 'text.secondary', ml: 1 }}>
            ({t('posScreens.parentScreen')}: {parentScreen.name})
          </Box>
        )}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="screenName"
                control={control}
                rules={{ 
                  required: t('posScreens.nameRequired'),
                  validate: (value) => {
                    if (!value || value.trim() === '') {
                      return t('posScreens.nameRequired');
                    }
                    return true;
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {!parentScreen && (
              <Grid item xs={12}>
                <Controller
                  name="ParentScreenId"
                  control={control}
                  render={({ field }) => (
                    <ScreenTreeSelect
                      screens={allScreens}
                      value={field.value}
                      onChange={field.onChange}
                      label={t('posScreens.parentScreen')}
                      excludeId={initialValues?.id}
                    />
                  )}
                />
              </Grid>
            )}

            <Grid item xs={6}>
              <Controller
                name="displayOrder"
                control={control}
                rules={{ required: true, min: 1 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.displayOrder')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="isVisible"
                control={control}
                render={({ field }) => (
                  <Box>
                    <FormControlLabel
                      control={
                        <Switch 
                          checked={field.value} 
                          onChange={(e) => field.onChange(e.target.checked)} 
                        />
                      }
                      label={t('posScreens.visibility')}
                    />
                    <Box sx={{ mt: 1 }}>
                      <VisibilityPill isVisible={field.value} />
                    </Box>
                  </Box>
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="icon"
                control={control}
                rules={{ required: t('posScreens.iconRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.icon')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message || t('posScreens.iconHelp')}
                    placeholder="📱"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="colorHex"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.color')}
                    type="color"
                    fullWidth
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Box
                sx={{
                  p: 2,
                  border: 1,
                  borderColor: 'divider',
                  borderRadius: 1,
                  backgroundColor: 'background.paper'
                }}
              >
                <Typography variant="body2" gutterBottom>
                  {t('posScreens.preview')}:
                </Typography>
                
                <Stack direction="row" alignItems="center" spacing={2}>
                  <Avatar 
                    sx={{ 
                      backgroundColor: colorHex,
                      width: 40,
                      height: 40
                    }}
                  >
                    {icon}
                  </Avatar>
                  
                  <Box>
                    <Typography variant="h6">
                      {screenName || t('posScreens.sampleText')}
                    </Typography>
                    <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                      <VisibilityPill isVisible={isVisible} />
                      <StatusPill isActive={true} />
                    </Stack>
                  </Box>
                </Stack>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('posScreens.add') : t('posScreens.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default ScreenForm;

===== src/Pages/pos/screens/components/ScreenTreeSelect.tsx =====
// File: src/pages/pos-screens/components/ScreenTreeSelect.tsx
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Box
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface Props {
  screens: PosScreen[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  excludeId?: string;
}

const ScreenTreeSelect: React.FC<Props> = ({ 
  screens, 
  value, 
  onChange, 
  label,
  excludeId 
}) => {
  const { t } = useTranslation();

  const renderScreenOptions = (screens: PosScreen[], level = 0): React.ReactNode[] => {
    const options: React.ReactNode[] = [];

    screens.forEach(screen => {
      // استبعاد الشاشة المحددة وأطفالها
      if (excludeId && screen.id === excludeId) {
        return;
      }

      const indent = '—'.repeat(level);
      options.push(
        <MenuItem key={screen.id} value={screen.id}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography variant="body2">
              {indent} {screen.name}
            </Typography>
          </Box>
        </MenuItem>
      );

      if (screen.children && screen.children.length > 0) {
        options.push(...renderScreenOptions(screen.children, level + 1));
      }
    });

    return options;
  };

  return (
    <FormControl fullWidth>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
        displayEmpty
      >
        <MenuItem value="">
          <em>{t('posScreens.noParent')}</em>
        </MenuItem>
        {renderScreenOptions(screens)}
      </Select>
    </FormControl>
  );
};

export default ScreenTreeSelect;

===== src/Pages/pos/screens/components/SimpleScreenTree.tsx =====
// File: src/pages/pos-screens/components/SimpleScreenTree.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Box,
  Avatar,
} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus,
  IconArrowUp,
  IconArrowDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { VisibilityPill } from './VisibilityPill';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[]) => void;
  level?: number;
}

const SimpleScreenTree: React.FC<Props> = ({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (screenId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(screenId)) {
      newExpanded.delete(screenId);
    } else {
      newExpanded.add(screenId);
    }
    setExpanded(newExpanded);
  };

const moveScreen = (index: number, direction: 'up' | 'down') => {
  if (
    (direction === 'up' && index === 0) ||
    (direction === 'down' && index === screens.length - 1)
  ) {
    return;
  }

  const newScreens = [...screens];
  const targetIndex = direction === 'up' ? index - 1 : index + 1;
  
  // تبديل المواضع
  [newScreens[index], newScreens[targetIndex]] = [newScreens[targetIndex], newScreens[index]];
  
  // تحديث displayOrder مع الحفاظ على جميع البيانات
  const updatedScreens = newScreens.map((screen, idx) => ({
    ...screen, // الحفاظ على جميع البيانات الأصلية
    displayOrder: idx + 1
  }));
  
  onReorder(updatedScreens);
};

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number; 
  }> = ({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);

    return (
      <Box>
        <Card 
          sx={{ 
            mb: 1, 
            ml: level * 3,
            backgroundColor: screen.colorHex ? `${screen.colorHex}20` : undefined,
            borderLeft: screen.colorHex ? `4px solid ${screen.colorHex}` : undefined
          }}
        >
          <CardContent sx={{ py: 2, '&:last-child': { pb: 2 } }}>
            <Stack direction="row" alignItems="center" spacing={1}>
              {/* أزرار الترتيب */}
              <Stack direction="column" spacing={0}>
                <IconButton
                  size="small"
                  onClick={() => moveScreen(index, 'up')}
                  disabled={index === 0}
                  sx={{ p: 0.5 }}
                >
                  <IconArrowUp size={12} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => moveScreen(index, 'down')}
                  disabled={index === screens.length - 1}
                  sx={{ p: 0.5 }}
                >
                  <IconArrowDown size={12} />
                </IconButton>
              </Stack>

              {/* زر التوسيع/الطي */}
              {hasChildren && (
                <IconButton
                  size="small"
                  onClick={() => toggleExpanded(screen.id)}
                >
                  {isExpanded ? (
                    <IconChevronDown size={16} />
                  ) : (
                    <IconChevronRight size={16} />
                  )}
                </IconButton>
              )}
              
              {/* أيقونة الشاشة */}
              <Avatar 
                sx={{ 
                  width: 32, 
                  height: 32, 
                  backgroundColor: screen.colorHex,
                  fontSize: '0.875rem'
                }}
              >
                {screen.icon}
              </Avatar>

              {/* اسم الشاشة */}
              <Typography variant="body1" sx={{ flex: 1 }}>
                {screen.name}
              </Typography>

              {/* ترتيب العرض */}
              <Typography variant="caption" color="text.secondary">
                #{screen.displayOrder}
              </Typography>

              {/* حالة الرؤية */}
              <VisibilityPill isVisible={screen.isVisible} />

              {/* حالة النشاط */}
              <StatusPill isActive={screen.isActive} />

              {/* أزرار الإجراءات */}
              <Stack direction="row" spacing={1}>
                <IconButton
                  size="small"
                  onClick={() => onAddChild(screen)}
                  title={t('posScreens.addChild')}
                >
                  <IconPlus size={16} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => onEdit(screen)}
                  title={t('posScreens.edit')}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <SimpleScreenTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => {
                // تحديث الشاشات الفرعية
                const updatedScreens = screens.map(s => 
                  s.id === screen.id 
                    ? { ...s, children: reorderedChildren }
                    : s
                );
                onReorder(updatedScreens);
              }}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
};

export default SimpleScreenTree;

===== src/Pages/pos/screens/components/SmoothScreenTree.tsx =====
// File: src/pages/pos-screens/components/SmoothScreenTree.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Avatar,
  Chip
} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus,
  IconGripVertical
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[], parentId?: string) => void;
  level?: number;
  parentId?: string;
}

const SmoothScreenTree: React.FC<Props> = React.memo(({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0,
  parentId
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());
  const [draggedItem, setDraggedItem] = React.useState<string | null>(null);
  const [dragOverItem, setDragOverItem] = React.useState<string | null>(null);

  const toggleExpanded = React.useCallback((screenId: string) => {
    setExpanded(prev => {
      const newExpanded = new Set(prev);
      if (newExpanded.has(screenId)) {
        newExpanded.delete(screenId);
      } else {
        newExpanded.add(screenId);
      }
      return newExpanded;
    });
  }, []);

  const handleDragStart = React.useCallback((e: React.DragEvent, screenId: string, index: number) => {
    setDraggedItem(screenId);
    e.dataTransfer.setData('text/plain', JSON.stringify({ screenId, index, parentId }));
    e.dataTransfer.effectAllowed = 'move';
    
    // إضافة تأثير بصري
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '0.5';
    }
  }, [parentId]);

  const handleDragEnd = React.useCallback((e: React.DragEvent) => {
    setDraggedItem(null);
    setDragOverItem(null);
    
    // إزالة التأثير البصري
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '1';
    }
  }, []);

  const handleDragOver = React.useCallback((e: React.DragEvent, screenId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverItem(screenId);
  }, []);

  const handleDragLeave = React.useCallback(() => {
    setDragOverItem(null);
  }, []);

  const handleDrop = React.useCallback((e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    setDragOverItem(null);
    
    try {
      const dragData = JSON.parse(e.dataTransfer.getData('text/plain'));
      
      // تأكد من أن السحب في نفس المستوى
      if (dragData.parentId === parentId && dragData.index !== dropIndex) {
        const newScreens = [...screens];
        const [movedScreen] = newScreens.splice(dragData.index, 1);
        newScreens.splice(dropIndex, 0, movedScreen);
        onReorder(newScreens, parentId);
      }
    } catch (error) {
      }
  }, [screens, onReorder, parentId]);

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number;
  }> = React.memo(({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);
    const isDragging = draggedItem === screen.id;
    const isDragOver = dragOverItem === screen.id;

    const handleEdit = React.useCallback(() => {
      onEdit(screen);
    }, [screen]);

    const handleAddChild = React.useCallback(() => {
      onAddChild(screen);
    }, [screen]);

    const handleToggleExpanded = React.useCallback(() => {
      toggleExpanded(screen.id);
    }, [screen.id]);

    return (
      <Box>
        {/* العنصر الرئيسي */}
        <Box
          draggable
          onDragStart={(e) => handleDragStart(e, screen.id, index)}
          onDragEnd={handleDragEnd}
          onDragOver={(e) => handleDragOver(e, screen.id)}
          onDragLeave={handleDragLeave}
          onDrop={(e) => handleDrop(e, index)}
          sx={{
            display: 'flex',
            alignItems: 'center',
            py: 0.5,
            px: 1,
            ml: level * 2,
            backgroundColor: isDragOver 
              ? 'primary.light' 
              : screen.colorHex 
                ? `${screen.colorHex}15` 
                : 'background.paper',
            borderLeft: screen.colorHex ? `3px solid ${screen.colorHex}` : undefined,
            borderRadius: 1,
            mb: 0.5,
            minHeight: 40,
            cursor: 'grab',
            opacity: isDragging ? 0.5 : 1,
            transform: isDragging ? 'rotate(5deg)' : 'none',
            transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',
            '&:hover': {
              backgroundColor: screen.colorHex ? `${screen.colorHex}25` : 'action.hover',
              transform: isDragging ? 'rotate(5deg)' : 'translateY(-1px)',
              boxShadow: isDragging ? 'none' : '0 2px 8px rgba(0,0,0,0.1)',
            },
            '&:active': {
              cursor: 'grabbing',
              transform: 'rotate(5deg) scale(1.02)',
            }
          }}
        >
          {/* مقبض السحب */}
          <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>
            <IconGripVertical size={14} color="#999" />
          </Box>

          {/* زر التوسيع/الطي */}
          {hasChildren && (
            <IconButton
              size="small"
              onClick={handleToggleExpanded}
              sx={{ p: 0.25, mr: 0.5 }}
            >
              {isExpanded ? (
                <IconChevronDown size={14} />
              ) : (
                <IconChevronRight size={14} />
              )}
            </IconButton>
          )}
          
          {/* أيقونة الشاشة */}
          <Avatar 
            sx={{ 
              width: 24, 
              height: 24, 
              backgroundColor: screen.colorHex,
              fontSize: '0.7rem',
              mr: 1
            }}
          >
            {screen.icon}
          </Avatar>

          {/* اسم الشاشة */}
          <Typography 
            variant="body2" 
            sx={{ 
              flex: 1, 
              fontSize: '0.875rem',
              fontWeight: 500
            }}
          >
            {screen.name}
          </Typography>

          {/* ترتيب العرض */}
          <Chip
            label={`#${screen.displayOrder}`}
            size="small"
            variant="outlined"
            sx={{ 
              height: 20,
              fontSize: '0.7rem',
              mr: 1
            }}
          />

          {/* حالات مضغوطة */}
          <Stack direction="row" spacing={0.5} sx={{ mr: 1 }}>
            {!screen.isVisible && (
              <Chip
                label="مخفي"
                size="small"
                color="warning"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
            {!screen.isActive && (
              <Chip
                label="غير نشط"
                size="small"
                color="default"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
          </Stack>

          {/* أزرار الإجراءات */}
          <Stack direction="row" spacing={0.5}>
            <IconButton
              size="small"
              onClick={handleAddChild}
              sx={{ p: 0.25 }}
            >
              <IconPlus size={14} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleEdit}
              sx={{ p: 0.25 }}
            >
              <IconEdit size={14} />
            </IconButton>
          </Stack>
        </Box>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <SmoothScreenTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => onReorder(reorderedChildren, screen.id)}
              level={level + 1}
              parentId={screen.id}
            />
          </Collapse>
        )}
      </Box>
    );
  });

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 2 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxHeight: '70vh', overflow: 'auto' }}>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
});

SmoothScreenTree.displayName = 'SmoothScreenTree';

export default SmoothScreenTree;

===== src/Pages/pos/screens/components/StatusPill.tsx =====
// File: src/pages/pos-screens/components/StatusPill.tsx
import React from 'react';
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  isActive: boolean;
}

export const StatusPill: React.FC<Props> = ({ isActive }) => {
  const { t } = useTranslation();
  
  return (
    <Chip
      label={isActive ? t('posScreens.active') : t('posScreens.inactive')}
      color={isActive ? 'success' : 'default'}
      size="small"
      variant="outlined"
    />
  );
};

===== src/Pages/pos/screens/components/VisibilityPill.tsx =====
// File: src/pages/pos-screens/components/VisibilityPill.tsx
import React from 'react';
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  isVisible: boolean;
}

export const VisibilityPill: React.FC<Props> = ({ isVisible }) => {
  const { t } = useTranslation();
  
  return (
    <Chip
      label={isVisible ? t('posScreens.visible') : t('posScreens.hidden')}
      color={isVisible ? 'primary' : 'warning'}
      size="small"
      variant="outlined"
    />
  );
};

===== src/Pages/pos/screens/PosScreensPage.tsx =====
// File: src/pages/pos-screens/PosScreensPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import OptimizedDragTree from './components/OptimizedScreenTree';
import ScreenCards from './components/mobile/ScreenCards';
import ScreenForm from './components/ScreenForm';
import MobileScreensFilter, { ScreensFilterState } from './components/mobile/MobileScreensFilter';
import * as apiSrv from 'src/utils/api/pagesApi/posScreensApi';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const PosScreensPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { canAdd } = props;
  
  const [items, setItems] = React.useState<PosScreen[]>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: PosScreen;
    parentScreen?: PosScreen;
  }>({ open: false, mode: 'add' });

  const [mobileFilters, setMobileFilters] = React.useState<ScreensFilterState>({
    searchQuery: '',
    status: '',
    visibility: '',
    parentFilter: '',
    sortBy: 'displayOrder',
    sortOrder: 'asc'
  });

  const fetchScreens = React.useCallback(async () => {
    try {
      setLoad(true);
      const result = await apiSrv.getAll();
      setItems(result);
    } catch (e: any) {    } finally {
      setLoad(false);
    }
  }, []);

  React.useEffect(() => {
    fetchScreens();
  }, [fetchScreens]);

  const filterTree = React.useCallback((screens: PosScreen[], searchQuery: string): PosScreen[] => {
    if (!searchQuery) return screens;
    
    return screens.reduce((acc: PosScreen[], screen) => {
      const matchesQuery = screen.name.toLowerCase().includes(searchQuery.toLowerCase());
      const filteredChildren = screen.children ? filterTree(screen.children, searchQuery) : [];
      
      if (matchesQuery || filteredChildren.length > 0) {
        acc.push({
          ...screen,
          children: filteredChildren
        });
      }
      
      return acc;
    }, []);
  }, []);

  const desktopFiltered = React.useMemo(
    () => filterTree(items, query),
    [items, query, filterTree]
  );

  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    const applyFiltersToTree = (screens: PosScreen[]): PosScreen[] => {
      return screens.reduce((acc: PosScreen[], screen) => {
        let includeScreen = true;

        if (mobileFilters.searchQuery.trim()) {
          const searchLower = mobileFilters.searchQuery.toLowerCase();
          const matchesSearch = screen.name.toLowerCase().includes(searchLower) ||
                               screen.icon.toLowerCase().includes(searchLower);
          
          const hasMatchingChildren = screen.children ? 
            applyFiltersToTree(screen.children).length > 0 : false;
          
          includeScreen = matchesSearch || hasMatchingChildren;
        }

        if (mobileFilters.status && includeScreen) {
          const isActive = mobileFilters.status === 'true';
          includeScreen = screen.isActive === isActive;
        }

        if (mobileFilters.visibility && includeScreen) {
          const isVisible = mobileFilters.visibility === 'true';
          includeScreen = screen.isVisible === isVisible;
        }

        if (mobileFilters.parentFilter && includeScreen) {
          if (mobileFilters.parentFilter === 'root') {
            includeScreen = !screen.parentId;
          } else {
            includeScreen = screen.parentId === mobileFilters.parentFilter;
          }
        }

        if (includeScreen) {
          const filteredChildren = screen.children ? 
            applyFiltersToTree(screen.children) : [];
          
          acc.push({
            ...screen,
            children: filteredChildren
          });
        }

        return acc;
      }, []);
    };

    result = applyFiltersToTree(result);

    const sortScreens = (screens: PosScreen[]): PosScreen[] => {
      const sorted = [...screens].sort((a, b) => {
        let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
        let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

        if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (mobileFilters.sortOrder === 'asc') {
          return aValue > bValue ? 1 : -1;
        } else {
          return aValue < bValue ? 1 : -1;
        }
      });

      return sorted.map(screen => ({
        ...screen,
        children: screen.children ? sortScreens(screen.children) : []
      }));
    };

    return sortScreens(result);
  }, [items, mobileFilters]);

  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  const getParentScreens = React.useCallback((screens: PosScreen[]): Array<{ id: string; name: string }> => {
    const parents: Array<{ id: string; name: string }> = [];
    
    const extractParents = (screens: PosScreen[]) => {
      screens.forEach(screen => {
        if (screen.children && screen.children.length > 0) {
          parents.push({ id: screen.id, name: screen.name });
          extractParents(screen.children);
        }
      });
    };
    
    extractParents(screens);
    return parents;
  }, []);

  const parentScreens = React.useMemo(() => getParentScreens(items), [items, getParentScreens]);

  const getActiveFiltersCount = React.useCallback(() => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.visibility) count++;
    if (mobileFilters.parentFilter) count++;
    return count;
  }, [mobileFilters]);

  const getTotalCount = React.useCallback((screens: PosScreen[]): number => {
    return screens.reduce((count, screen) => {
      return count + 1 + (screen.children ? getTotalCount(screen.children) : 0);
    }, 0);
  }, []);

  const totalCount = React.useMemo(() => getTotalCount(items), [items, getTotalCount]);
  const filteredCount = React.useMemo(() => getTotalCount(filtered), [filtered, getTotalCount]);

  const handleReorder = React.useCallback(async (reorderedScreens: PosScreen[], parentId?: string) => {
    try {
      const updateTreeWithNewOrder = (screens: PosScreen[]): PosScreen[] => {
        if (!parentId) {
          return reorderedScreens.map((screen, index) => ({
            ...screen,
            displayOrder: index + 1
          }));
        } else {
          return screens.map(screen => {
            if (screen.id === parentId) {
              return { 
                ...screen, 
                children: reorderedScreens.map((child, index) => ({
                  ...child,
                  displayOrder: index + 1
                }))
              };
            }
            return {
              ...screen,
              children: screen.children ? updateTreeWithNewOrder(screen.children) : []
            };
          });
        }
      };

      const newItems = updateTreeWithNewOrder(items);
      setItems(newItems);

      const reorderData = reorderedScreens.map((screen, index) => ({
        screenId: screen.id,
        displayOrder: index + 1,
        parentScreenId: parentId,
        screenName: screen.name,
        isVisible: screen.isVisible,
        colorHex: screen.colorHex,
        icon: screen.icon
      }));

      await apiSrv.reorderScreens(reorderData);
      await fetchScreens();
    } catch (e: any) {      await fetchScreens();
    }
  }, [items, fetchScreens]);

  const handleSubmit = async (formData: any) => {
    try {
      if (!formData.screenName || formData.screenName.trim() === '') {
        setErr(t('posScreens.nameRequired'));
        return;
      }
      
      if (dialog.mode === 'add') {
        const addData = {
          screenName: formData.screenName,
          ParentScreenId: formData.ParentScreenId || undefined,
          isVisible: Boolean(formData.isVisible),
          displayOrder: Number(formData.displayOrder),
          colorHex: formData.colorHex,
          icon: formData.icon
        };
        
        await apiSrv.add(addData);
      } else if (dialog.mode === 'edit' && dialog.current) {
        const updateData = {
          Screenid: dialog.current.id,
          screenName: formData.screenName,
          ParentScreenId: formData.ParentScreenId || undefined,
          isVisible: Boolean(formData.isVisible),
          displayOrder: Number(formData.displayOrder),
          colorHex: formData.colorHex,
          icon: formData.icon
        };
        
        await apiSrv.update(updateData);
      }
      
      await fetchScreens();
      setDialog({ open: false, mode: 'add' });
      
    } catch (error: any) {
      setErr(error?.message || t('posScreens.submitError'));
    }
  };

  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add' })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('posScreens.add')}
            </Button>
          )}
        </Box>
      )}

      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <ScreenCards
            screens={filtered}
            onEdit={(screen) => setDialog({ open: true, mode: 'edit', current: screen })}
            onAddChild={(parentScreen) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentScreen 
            })}
            loading={loading}
          />
        ) : (
          <OptimizedDragTree
            screens={filtered}
            onEdit={(screen) => setDialog({ open: true, mode: 'edit', current: screen })}
            onAddChild={(parentScreen) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentScreen 
            })}
            onReorder={handleReorder}
          />
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileScreensFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          parentScreens={parentScreens}
          totalResults={totalCount}
          filteredResults={filteredCount}
        />
      )}

      <ScreenForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        parentScreen={dialog.parentScreen}
        allScreens={items}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={handleSubmit}
      /></Container>
  );
};

export default PosScreensPage;
function setErr(_arg0: string) {
  throw new Error('Function not implemented.');
}


===== src/Pages/pos/table-sections/components/ActionsBar.tsx =====
// File: src/pages/pos/table-sections/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('tableSections.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/pos/table-sections/components/mobile/MobileSectionsFilter.tsx =====
// File: src/pages/pos/table-sections/components/mobile/MobileSectionsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface SectionsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SectionsFilterState;
  onFiltersChange: (filters: SectionsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSectionsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof SectionsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('tableSections.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('tableSections.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('tableSections.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('tableSections.form.name')}</MenuItem>
              <MenuItem value="serviceCharge">{t('tableSections.form.serviceCharge')}</MenuItem>
              <MenuItem value="tables">{t('tableSections.form.tablesCount')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileSectionsFilter;

===== src/Pages/pos/table-sections/components/PageHeader.tsx =====
// File: src/pages/pos/table-sections/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme,
  Chip,
  Stack
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { tableSectionsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  exportData: TableSection[];
  loading: boolean;
    onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const getTotalTablesCount = () => {
    return exportData.reduce((total, section) => total + section.tables.length, 0);
  };

  const config = {
    ...tableSectionsImportExportConfig,
    onExport: () => exportData.map(section => ({
      name: section.name,
      serviceCharge: section.serviceCharge,
      tablesCount: section.tables.length,
      totalCapacity: section.tables.reduce((sum, table) => sum + table.capacity, 0),
      branchName: section.branchName || t('common.notSpecified'),
      isActive: section.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Box>
          <Typography 
            variant={isMobile ? "h5" : "h4"} 
            component="h1"
            sx={{
              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
              fontWeight: { xs: 600, sm: 500 },
              mb: 1
            }}
          >
            {t('tableSections.title')}
          </Typography>
          <Stack direction="row" spacing={2} alignItems="center">
            <Typography variant="body2" color="text.secondary">
              {t('tableSections.subtitle', { count: exportData.length })}
            </Typography>
            <Chip 
              label={t('tableSections.totalTables', { count: getTotalTablesCount() })}
              color="primary"
              variant="outlined"
              size="small"
            />
          </Stack>
        </Box>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/pos/table-sections/components/SectionForm.tsx =====
// File: src/pages/pos/table-sections/components/SectionForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Typography, IconButton,
  Card, CardContent, Stack, Divider
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus } from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { TableSection, Table } from 'src/utils/api/pagesApi/tableSectionsApi';

type FormValues = {
  name: string;
  serviceCharge: number;
  tables: Table[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: TableSection;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SectionForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const defaults: FormValues = {
    name: '',
    serviceCharge: 0,
    tables: []
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: tableFields, append: appendTable, remove: removeTable } = useFieldArray({
    control,
    name: 'tables'
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          serviceCharge: initialValues.serviceCharge,
          tables: initialValues.tables.map(table => ({
            id: table.id,
            name: table.name,
            sectionId: table.sectionId,
            capacity: table.capacity
          }))
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const addTable = () => {
    appendTable({
      name: `T${tableFields.length + 1}`,
      sectionId: '',
      capacity: 0
    });
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          serviceCharge: Number(data.serviceCharge),
          tables: data.tables.map(table => ({
            ...(table.id && { id: table.id }),
            name: table.name,
            sectionId: initialValues.id,
            capacity: Number(table.capacity)
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          serviceCharge: Number(data.serviceCharge),
          tables: data.tables.map(table => ({
            name: table.name,
            capacity: Number(table.capacity)
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('tableSections.add') : t('tableSections.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Section Info */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('tableSections.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('tableSections.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="serviceCharge"
                control={control}
                rules={{ required: t('tableSections.serviceChargeRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('tableSections.form.serviceCharge')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Tables Section */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  {t('tableSections.form.tables')} ({tableFields.length})
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<IconPlus />}
                  onClick={addTable}
                  size="small"
                >
                  {t('tableSections.form.addTable')}
                </Button>
              </Box>

              {tableFields.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4, backgroundColor: 'grey.50', borderRadius: 1 }}>
                  <Typography color="text.secondary">
                    {t('tableSections.form.noTables')}
                  </Typography>
                </Box>
              ) : (
<Stack spacing={1}> {/* ⭐ تقليل المسافة من 2 إلى 1 */}
  {tableFields.map((table, index) => (
    <Card key={table.id} variant="outlined" sx={{ mb: 1 }}> {/* ⭐ إضافة margin bottom صغير */}
      <CardContent sx={{ py: 1, px: 2, '&:last-child': { pb: 1 } }}> {/* ⭐ تقليل padding */}
                        <Grid container spacing={2} alignItems="center">
                          <Grid item xs={12} md={5}>
                            <Controller
                              name={`tables.${index}.name`}
                              control={control}
                              rules={{ required: t('tableSections.tableNameRequired') }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('tableSections.form.tableName')}
                                  fullWidth
                                  size="small"
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  onFocus={(e) => e.target.select()}
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={5}>
                            <Controller
                              name={`tables.${index}.capacity`}
                              control={control}
                              rules={{ required: t('tableSections.capacityRequired'), min: 0 }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('tableSections.form.capacity')}
                                  type="number"
                                  fullWidth
                                  size="small"
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  inputProps={{ min: 1, max: 20 }}
                                  onFocus={(e) => e.target.select()}
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={2}>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => removeTable(index)}
                              sx={{ width: '100%' }}
                            >
                              <IconTrash size={16} />
                            </IconButton>
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  ))}
                </Stack>
              )}
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('tableSections.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('tableSections.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default SectionForm;

===== src/Pages/pos/table-sections/components/SectionRow.tsx =====
// File: src/pages/pos/table-sections/components/SectionRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconTable, IconUsers } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  section: TableSection;
  onEdit: () => void;
  isSelected?: boolean;
}

const SectionRow: React.FC<Props> = ({ section, onEdit, isSelected = false }) => {
  const { t } = useTranslation();
  const totalCapacity = section.tables.reduce((sum, table) => sum + table.capacity, 0);

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {section.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {section.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={section.isActive ? t('common.active') : t('common.inactive')}
            color={section.isActive ? 'success' : 'error'}
            size="small"
            variant={section.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Section Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" color="text.secondary">
                {t('tableSections.form.serviceCharge')}:
              </Typography>
              <Typography variant="body2" color="primary.main" fontWeight={600}>
                {section.serviceCharge.toFixed(2)}
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconTable size={16} />
              <Typography variant="body2" fontWeight={500}>
                {section.tables.length} {t('tableSections.form.tables')}
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconUsers size={16} />
              <Typography variant="body2" color="success.main" fontWeight={600}>
                {totalCapacity} {t('tableSections.form.persons')}
              </Typography>
            </Box>
          </Grid>
        </Grid>

        {/* Tables */}
        {section.tables.length > 0 && (
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              {t('tableSections.form.tables')}:
            </Typography>
            <Stack direction="row" spacing={0.5} flexWrap="wrap" gap={0.5}>
              {section.tables.map((table, index) => (
                <Chip
                  key={index}
                  label={`${table.name} (${table.capacity})`}
                  size="small"
                  variant="outlined"
                  sx={{ height: 24, fontSize: '0.75rem' }}
                />
              ))}
            </Stack>
          </Box>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default SectionRow;

===== src/Pages/pos/table-sections/components/SectionTable.tsx =====
// File: src/pages/pos/table-sections/components/SectionTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTable, IconUsers } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  rows: TableSection[];
  onEdit: (section: TableSection) => void;
  selectedSectionId?: string;
}

const SectionTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<TableSection>[] = [
    { 
      field: 'name', 
      headerName: t('tableSections.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'serviceCharge', 
      headerName: t('tableSections.form.serviceCharge'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'tables', 
      headerName: t('tableSections.form.tables'), 
      width: 300,
      sortable: false,
      renderCell: ({ value }) => {
        const tables = value || [];
        const totalCapacity = tables.reduce((sum: number, table: any) => sum + table.capacity, 0);
        
        return (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <IconTable size={16} />
              <Typography variant="body2" fontWeight={500}>
                {tables.length}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <IconUsers size={16} />
              <Typography variant="body2" color="success.main" fontWeight={600}>
                {totalCapacity}
              </Typography>
            </Box>
            {tables.length > 0 && (
              <Stack direction="row" spacing={0.5}>
                {tables.slice(0, 2).map((table: any, index: number) => (
                  <Chip
                    key={index}
                    label={`${table.name} (${table.capacity})`}
                    size="small"
                    variant="outlined"
                    sx={{ height: 20, fontSize: '0.7rem' }}
                  />
                ))}
                {tables.length > 2 && (
                  <Chip
                    label={`+${tables.length - 2}`}
                    size="small"
                    variant="outlined"
                    sx={{ height: 20, fontSize: '0.7rem' }}
                  />
                )}
              </Stack>
            )}
          </Box>
        );
      }
    },
    { 
      field: 'branchName', 
      headerName: t('tableSections.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default SectionTable;

===== src/Pages/pos/table-sections/TableSectionsPage.tsx =====
// File: src/pages/pos/table-sections/TableSectionsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SectionTable from './components/SectionTable';
import SectionRow from './components/SectionRow';
import SectionForm from './components/SectionForm';
import MobileSectionsFilter, { SectionsFilterState } from './components/mobile/MobileSectionsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/tableSectionsApi';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const TableSectionsPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [sections, setSections] = React.useState<TableSection[]>([]);
  const [selectedSection, setSelectedSection] = React.useState<TableSection | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: TableSection;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<SectionsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchSections = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setSections(data);
    } catch (e: any) {
      setErr(e?.message || t('tableSections.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchSections();
  }, []);

  const searchSections = (query: string) => {
    if (!query.trim()) {
      return sections;
    }
    
    const searchLower = query.toLowerCase();
    return sections.filter(section => 
      section.name.toLowerCase().includes(searchLower) ||
      section.branchName?.toLowerCase().includes(searchLower) ||
      section.tables.some(table => table.name.toLowerCase().includes(searchLower))
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...sections];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(section => 
        section.name.toLowerCase().includes(searchLower) ||
        section.branchName?.toLowerCase().includes(searchLower) ||
        section.tables.some(table => table.name.toLowerCase().includes(searchLower))
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(section => section.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(section => section.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [sections, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchSections(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const getTotalTablesCount = () => {
    return displayedData.reduce((total, section) => total + section.tables.length, 0);
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSections();
    } catch (e: any) {
      const msg = e?.message || t('tableSections.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedSection = await apiSrv.update(data);
      setSections(prev => prev.map(s => s.id === updatedSection.id ? updatedSection : s));
      
      if (selectedSection && selectedSection.id === data.id) {
        setSelectedSection(updatedSection);
      }
      
      return updatedSection;
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.message || t('tableSections.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (section: TableSection) => {
    setDialog({ open: true, mode: 'edit', current: section });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={sections} 
  loading={loading}
  onDataChange={fetchSections} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('tableSections.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('tableSections.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('tableSections.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('tableSections.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2 }}>
          <Typography variant="h5">
            {t('tableSections.title')} ({displayedData.length})
          </Typography>
          <Chip 
            label={t('tableSections.totalTables', { count: getTotalTablesCount() })}
            color="primary"
            variant="outlined"
          />
        </Stack>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('tableSections.noSearchResults') : t('tableSections.noSections')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(section => (
                  <SectionRow
                    key={section.id}
                    section={section}
                    onEdit={() => handleEdit(section)}
                    isSelected={selectedSection?.id === section.id}
                  />
                ))
              : (
                  <SectionTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedSectionId={selectedSection?.id}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileSectionsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={sections.length}
          filteredResults={displayedData.length}
        />
      )}

      <SectionForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default TableSectionsPage;

===== src/Pages/products/components/ActionsBar.tsx =====
import { Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Button
      variant="contained"
      startIcon={<IconPlus size={20} />}
      onClick={onAdd}
    >
      {t('products.add')}
    </Button>
  );
};

export default ActionsBar;

===== src/Pages/products/components/GroupTreeSelect.tsx =====
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography
} from '@mui/material';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  groups: Group[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  disabled?: boolean;
  excludeId?: string;
}

const GroupTreeSelect: React.FC<Props> = ({
  groups,
  value,
  onChange,
  label,
  disabled,
  excludeId
}) => {
  // تحويل الشجرة إلى قائمة مسطحة مع مستويات
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      if (group.id !== excludeId) {
        result.push({ group, level });
        if (group.children && group.children.length > 0) {
          result.push(...flattenGroups(group.children, level + 1));
        }
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  return (
    <FormControl fullWidth disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
      >
        <MenuItem value="">
          <em>اختر المجموعة</em>
        </MenuItem>
        {flatGroups.map(({ group, level }) => (
          <MenuItem key={group.id} value={group.id}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ width: level * 20 }} />
              <Typography>
                {'─'.repeat(level)} {group.name}
              </Typography>
            </Box>
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

export default GroupTreeSelect;

===== src/Pages/products/components/mobile/MobileProductsFilter.tsx =====
// File: src/pages/products/components/mobile/MobileProductsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

export interface ProductsFilterState {
  searchQuery: string;
  groupId: string;
  productType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ProductsFilterState;
  onFiltersChange: (filters: ProductsFilterState) => void;
  groups: Group[];
  totalResults: number;
  filteredResults: number;
}

const MobileProductsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  groups,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<ProductsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const productTypeOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: 'POS' },
    { value: '2', label: 'Material' }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('products.active') },
    { value: 'false', label: t('products.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('products.name') },
    { value: 'cost', label: t('products.cost') },
    { value: 'createdOn', label: t('products.created') },
    { value: 'isActive', label: t('products.status') }
  ];

  // تحويل الشجرة إلى قائمة مسطحة
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      result.push({ group, level });
      if (group.children && group.children.length > 0) {
        result.push(...flattenGroups(group.children, level + 1));
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  const handleLocalChange = (field: keyof ProductsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: ProductsFilterState = {
      searchQuery: '',
      groupId: '',
      productType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.groupId) count++;
    if (localFilters.productType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('products.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('products.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('products.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('products.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('products.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('products.filter.filters')}</Typography>
            {(localFilters.groupId || localFilters.productType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.groupId, localFilters.productType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('products.group')}</InputLabel>
              <Select
                value={localFilters.groupId}
                label={t('products.group')}
                onChange={(e) => handleLocalChange('groupId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {flatGroups.map(({ group, level }) => (
                  <MenuItem key={group.id} value={group.id}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: level * 20 }} />
                      <Typography>
                        {'─'.repeat(level)} {group.name}
                      </Typography>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.type')}</InputLabel>
              <Select
                value={localFilters.productType}
                label={t('products.type')}
                onChange={(e) => handleLocalChange('productType', e.target.value)}
              >
                {productTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('products.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('products.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('products.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('products.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('products.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('products.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('products.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('products.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('products.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileProductsFilter;

===== src/Pages/products/components/PageHeader.tsx =====
// File: src/pages/products/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { productsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  title: string; // ⭐ إضافة title كـ prop
  exportData: Product[];
  loading: boolean;
  showImport?: boolean; // ⭐ إضافة تحكم في الـ import/export
  showExport?: boolean;
}

const PageHeader: React.FC<Props> = ({ 
  title, 
  exportData, 
  loading, 
  showImport = true, 
  showExport = true 
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...productsImportExportConfig,
    onExport: () => exportData.map(product => ({
      productName: product.name,
      groupName: product.group?.name || t('common.notSpecified'),
      productType: product.productType === 1 ? 'POS' : 
                   product.productType === 2 ? 'Material' : 
                   product.productType === 3 ? 'Addition' : 'Unknown',
      description: product.description,
      reorderLevel: product.reorderLevel,
      cost: product.cost,
      expirationDays: product.expirationDays,
      code: product.code,
      isActive: product.isActive ? t('common.active') : t('common.inactive')
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {title} {/* ⭐ استخدام title المُمرر */}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
        showImport={showImport} // ⭐ تمرير الـ props
        showExport={showExport}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/products/components/ProductForm.tsx =====
// File: src/pages/products/components/ProductForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button,
  FormControl, InputLabel, Select, MenuItem, Typography,
  Box, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Paper, IconButton, Stack,
  Card, CardContent, useMediaQuery, useTheme, Accordion,
  AccordionSummary, AccordionDetails,
  FormControlLabel, Switch, Tabs, Tab, Chip,
  Divider
} from '@mui/material';
import { 
  IconPlus, IconTrash, IconDeviceFloppy, IconPlus as IconPlusNew,
  IconChevronDown, IconComponents, IconCopy, IconClipboard, 
  IconClipboardCheck, IconTrashX, IconGripVertical,
  IconSearch
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Product, searchProductPricesByNameOrBarcode } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';
import GroupTreeSelect from './GroupTreeSelect';
import ProductPriceSearchSelect from './ProductPriceSearchSelect';
import { useCopyPaste } from 'src/hooks/useCopyPaste';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import ProductMultiSelectDialog from './ProductMultiSelectDialog';

/* ---------- types ---------- */
type FormValues = { 
  productName: string; 
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  cost?: number;
  lastPurePrice: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  productPrices: Array<{
    productPriceId?: string;
    unitId: string;
    unitFactor: number;
    barcode: string;
    Price: number;
    posPriceName?: string;
    productComponents: Array<{
      componentId?: string;
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
    branchPrices: Array<{
      id?: string;
      rawBranchId: string;
      price: number;
      isActive: boolean;
    }>;
  }>;
  productOptionGroups: Array<{
    id?: string;
    name: string;
    isRequired: boolean;
    allowMultiple: boolean;
    minSelection: number;
    maxSelection: number;
    sortOrder: number;
    optionItems: Array<{
      id?: string;
      name: string;
      productPriceId?: string;
      useOriginalPrice: boolean;
      extraPrice: number;
      isCommentOnly: boolean;
      sortOrder: number;
    }>;
  }>;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Product;
  groups: Group[];
  units: Unit[];
  posScreens?: PosScreen[];
  productType?: number;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

// أنواع البيانات للـ Copy/Paste
interface ProductCopyData {
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  priceTemplates: Array<{
    unitId: string;
    unitFactor: number;
    posPriceName?: string;
    productComponents: Array<{
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
    branchPrices: Array<{
      rawBranchId: string;
      price: number;
      isActive: boolean;
    }>;
  }>;
  optionGroupTemplates: Array<{
    name: string;
    isRequired: boolean;
    allowMultiple: boolean;
    minSelection: number;
    maxSelection: number;
    sortOrder: number;
    optionItems: Array<{
      name: string;
      productPriceId?: string;
      useOriginalPrice: boolean;
      extraPrice: number;
      isCommentOnly: boolean;
      sortOrder: number;
    }>;
  }>;
}

const ProductForm: React.FC<Props> = ({
  open, mode, initialValues, groups, units, posScreens = [], productType = 2, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const nameFieldRef = React.useRef<HTMLInputElement>(null);
  const [, setLastAddedPriceIndex] = React.useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [expandedPriceIndex, setExpandedPriceIndex] = React.useState<number | null>(null);
  const [currentTab, setCurrentTab] = React.useState(0);
  
  // الحصول على فروع المستخدم
  const userBranches = getUserBranchesFromStorage();
  
  // إضافةstate
  const [, set] = React.useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'warning' | 'error';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const productCopyPaste = useCopyPaste<ProductCopyData>({
    storageKey: 'productCopyData',
    onCopySuccess: () => {
      set({
        open: true,
        message: t('products.copySuccess'),
        severity: 'success'
      });
    },
    onPasteSuccess: (data) => {
      set({
        open: true,
        message: t('products.pasteSuccess', { count: data.priceTemplates.length }),
        severity: 'success'
      });
    },
    onError: (error) => {
      set({
        open: true,
        message: error,
        severity: 'error'
      });
    }
  });
 
  const defaults: FormValues = { 
    productName: '', 
    groupId: '',
    productType: productType,
    description: '',
    reorderLevel: 0,
    cost: 0,
    lastPurePrice: 0,
    expirationDays: 180,
    isActive: true,
    posScreenId: '',
    productPrices: [],
    productOptionGroups: []
  };

  const { control, handleSubmit, reset, watch, setValue, getValues, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'productPrices'
  });

  const { fields: optionGroupFields, append: appendOptionGroup, remove: removeOptionGroup } = useFieldArray({
    control,
    name: 'productOptionGroups'
  });

  // دالة إضافة Option Group
  const addOptionGroup = () => {
    appendOptionGroup({
      name: '',
      isRequired: false,
      allowMultiple: false,
      minSelection: 1,
      maxSelection: 1,
      sortOrder: optionGroupFields.length,
      optionItems: []
    });
  };

const OptionGroupComponent: React.FC<{ groupIndex: number }> = ({ groupIndex }) => {
  const [productSelectionOpen, setProductSelectionOpen] = React.useState(false);
    const [groupName, setGroupName] = React.useState('');

  const { fields: itemFields, append: appendItem, remove: removeItem } = useFieldArray({
    control,
    name: `productOptionGroups.${groupIndex}.optionItems`
  });

  React.useEffect(() => {
    const subscription = watch((value) => {
      const currentName = value.productOptionGroups?.[groupIndex]?.name;
      if (currentName !== groupName) {
        setGroupName(currentName || '');
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, groupIndex, groupName]);

  const getCurrentlySelectedProducts = React.useCallback(() => {
    return itemFields
      .filter(item => item.productPriceId && !item.isCommentOnly)
      .map(item => item.productPriceId)
      .filter(Boolean) as string[];
  }, [itemFields]);

  const addCommentItem = () => {
    appendItem({
      name: '',
      productPriceId: '',
      useOriginalPrice: false,
      extraPrice: 0,
      isCommentOnly: true,
      sortOrder: itemFields.length
    });
  };

  const handleAddMultipleProducts = (selectedProducts: Array<{
    productPriceId: string;
    productName: string;
    priceName: string;
    price: number;
  }>) => {
    const existingProductPriceIds = new Set(
      itemFields
        .filter(item => item.productPriceId && !item.isCommentOnly)
        .map(item => item.productPriceId)
    );

    const newProducts = selectedProducts.filter(
      product => !existingProductPriceIds.has(product.productPriceId)
    );

    const selectedProductPriceIds = new Set(selectedProducts.map(p => p.productPriceId));
    const itemsToRemove: number[] = [];
    
    itemFields.forEach((item, index) => {
      if (item.productPriceId && !item.isCommentOnly && !selectedProductPriceIds.has(item.productPriceId)) {
        itemsToRemove.push(index);
      }
    });

    itemsToRemove.reverse().forEach(index => {
      removeItem(index);
    });

    newProducts.forEach(product => {
      appendItem({
        name: `${product.productName} - ${product.priceName}`,
        productPriceId: product.productPriceId,
        useOriginalPrice: true,
        extraPrice: 0,
        isCommentOnly: false,
        sortOrder: itemFields.length
      });
    });
  };

  return (
    <>
      <Accordion key={groupIndex}>
       <AccordionSummary expandIcon={<IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
            <IconGripVertical size={16} />
            <Typography variant="h6" sx={{ flex: 1 }}>
              {groupName || `${t('products.form.optionGroup')} ${groupIndex + 1}`}
            </Typography>
            
            <FormControlLabel
              control={
                <Controller
                  name={`productOptionGroups.${groupIndex}.isRequired`}
                  control={control}
                  render={({ field }) => (
                    <Switch
                      checked={field.value}
                      onChange={field.onChange}
                      size="small"
                    />
                  )}
                />
              }
              label={t('products.form.required')}
              labelPlacement="start"
              sx={{ mr: 2 }}
            />
            
            <IconButton
              size="small"
              color="error"
              onClick={(e) => {
                e.stopPropagation();
                removeOptionGroup(groupIndex);
              }}
            >
              <IconTrash size={16} />
            </IconButton>
          </Box>
        </AccordionSummary>

        <AccordionDetails>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Controller
                name={`productOptionGroups.${groupIndex}.name`}
                control={control}
                rules={{ required: t('products.validation.optionGroupNameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('products.form.optionGroupName')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={
                  <Controller
                    name={`productOptionGroups.${groupIndex}.allowMultiple`}
                    control={control}
                    render={({ field }) => (
                      <Switch
                        checked={field.value}
                        onChange={field.onChange}
                      />
                    )}
                  />
                }
                label={t('products.form.allowMultiple')}
              />
            </Grid>

            <Grid item xs={6} md={3}>
              <Controller
                name={`productOptionGroups.${groupIndex}.minSelection`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.form.minSelection')}
                    type="number"
                    fullWidth
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6} md={3}>
              <Controller
                name={`productOptionGroups.${groupIndex}.maxSelection`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.form.maxSelection')}
                    type="number"
                    fullWidth
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="subtitle1">
                  {t('products.form.optionItems')} ({itemFields.length})
                </Typography>
                
                <Stack direction="row" spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<IconPlus />}
                    onClick={addCommentItem}
                  >
                    {t('products.form.addComment')}
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<IconSearch />}
                    onClick={() => setProductSelectionOpen(true)}
                    color="primary"
                  >
                    {t('products.form.selectProducts')}
                  </Button>
                </Stack>
              </Box>

              {itemFields.map((item, itemIndex) => {
                const isComment = watch(`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.isCommentOnly`);
                const hasProductPrice = watch(`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.productPriceId`);
                
                return (
                  <Box key={item.id} sx={{ mb: 2, p: 2, border: 1, borderColor: 'grey.300', borderRadius: 1 }}>
                    <Grid container spacing={2} alignItems="center">
                      <Grid item xs={12} md={6}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Controller
                            name={`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.name`}
                            control={control}
                            rules={{ required: t('products.validation.optionItemNameRequired') }}
                            render={({ field, fieldState }) => (
                              <TextField
                                {...field}
                                label={t('products.form.optionItemName')}
                                fullWidth
                                size="small"
                                required
                                error={!!fieldState.error}
                                helperText={fieldState.error?.message}
                                disabled={!!hasProductPrice && !isComment}
                                onFocus={(e) => e.target.select()}
                              />
                            )}
                          />
                          {isComment && (
                            <Chip label={t('products.form.comment')} size="small" color="info" />
                          )}
                          {hasProductPrice && !isComment && (
                            <Chip label={t('products.form.product')} size="small" color="success" />
                          )}
                        </Box>
                      </Grid>

                      <Grid item xs={12} md={3}>
                        <Controller
                          name={`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.extraPrice`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('products.form.extraPrice')}
                              type="number"
                              fullWidth
                              size="small"
                              inputProps={{ min: 0, step: 0.01 }}
                              onFocus={(e) => e.target.select()}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={12} md={3}>
                        <IconButton
                          size="small"
                          color="error"
                          onClick={() => removeItem(itemIndex)}
                        >
                          <IconTrash size={16} />
                        </IconButton>
                      </Grid>
                    </Grid>
                  </Box>
                );
              })}
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>

      <ProductMultiSelectDialog
        open={productSelectionOpen}
        onClose={() => setProductSelectionOpen(false)}
        onSelect={handleAddMultipleProducts}
        excludeProductId={watchedProductId}
        productType={productType}
        preSelectedItems={getCurrentlySelectedProducts()}
      />
    </>
  );
};

  const watchedProductId = initialValues?.id;

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
        setCurrentTab(0);
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  React.useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 200);
      
      return () => clearTimeout(timer);
    }
  }, [open]);

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          productName: initialValues.name,
          groupId: initialValues.groupId,
          description: initialValues.description || '',
          reorderLevel: initialValues.reorderLevel,
          cost: initialValues.cost,
          lastPurePrice: initialValues.lastPurePrice,
          expirationDays: initialValues.expirationDays,
          isActive: initialValues.isActive,
          posScreenId: initialValues.posScreenId || '',
          productPrices: initialValues.productPrices?.map(p => ({
            productPriceId: p.id,
            unitId: p.unitId,
            unitFactor: p.unitFactor,
            barcode: p.barcode,
            Price: p.price,
            posPriceName: p.posPriceName || '',
            productComponents: p.productComponents?.map(c => ({
              componentId: c.componentId,
              rawProductPriceId: c.rawProductPriceId,
              quantity: c.quantity,
              notes: c.notes || ''
            })) || [],
            branchPrices: p.branchPrices?.map(bp => ({
              id: bp.id,
              rawBranchId: bp.rawBranchId,
              price: bp.price,
              isActive: bp.isActive
            })) || []
          })) ?? [],
          productOptionGroups: initialValues.productOptionGroups?.map(g => ({
            id: g.id,
            name: g.name,
            isRequired: g.isRequired,
            allowMultiple: g.allowMultiple,
            minSelection: Math.max(g.minSelection, 1),
            maxSelection: Math.max(g.maxSelection, 1),
            sortOrder: g.sortOrder,
            optionItems: g.optionItems?.map(i => ({
              id: i.id,
              name: i.name,
              productPriceId: i.productPriceId ?? undefined,
              useOriginalPrice: i.useOriginalPrice,
              extraPrice: i.extraPrice,
              isCommentOnly: i.isCommentOnly,
              sortOrder: i.sortOrder
            })) || []
          })) || []
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  const flattenPosScreens = (screens: PosScreen[]): PosScreen[] => {
    const result: PosScreen[] = [];
    
    const flatten = (items: PosScreen[], level = 0) => {
      items.forEach(item => {
        result.push({ ...item, displayOrder: level });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(screens);
    return result;
  };

  const flatPosScreens = React.useMemo(() => flattenPosScreens(posScreens), [posScreens]);

  const handleCopyProduct = () => {
    const currentValues = getValues();
    
    if (!currentValues.productName.trim()) {
      set({
        open: true,
        message: t('products.nameRequiredForCopy'),
        severity: 'warning'
      });
      return;
    }

    const copyData: ProductCopyData = {
      groupId: currentValues.groupId,
      productType: productType,
      description: currentValues.description,
      reorderLevel: currentValues.reorderLevel,
      expirationDays: currentValues.expirationDays,
      isActive: currentValues.isActive,
      posScreenId: currentValues.posScreenId,
      priceTemplates: currentValues.productPrices.map(price => ({
        unitId: price.unitId,
        unitFactor: price.unitFactor,
        posPriceName: price.posPriceName,
        productComponents: price.productComponents.map(component => ({
          rawProductPriceId: component.rawProductPriceId,
          quantity: component.quantity,
          notes: component.notes
        })),
        branchPrices: price.branchPrices.map(bp => ({
          rawBranchId: bp.rawBranchId,
          price: bp.price,
          isActive: bp.isActive
        }))
      })),
      optionGroupTemplates: currentValues.productOptionGroups.map(group => ({
        name: group.name,
        isRequired: group.isRequired,
        allowMultiple: group.allowMultiple,
        minSelection: group.minSelection,
        maxSelection: group.maxSelection,
        sortOrder: group.sortOrder,
        optionItems: group.optionItems.map(item => ({
          name: item.name,
          productPriceId: item.productPriceId,
          useOriginalPrice: item.useOriginalPrice,
          extraPrice: item.extraPrice,
          isCommentOnly: item.isCommentOnly,
          sortOrder: item.sortOrder
        }))
      }))
    };
    
    productCopyPaste.copyData(copyData);
  };

  const handlePasteProduct = () => {
    const pastedData = productCopyPaste.pasteData();
    
    if (!pastedData) return;

    setValue('groupId', pastedData.groupId);
    setValue('productType', pastedData.productType);
    setValue('description', pastedData.description);
    setValue('reorderLevel', pastedData.reorderLevel);
    setValue('expirationDays', pastedData.expirationDays);
    setValue('isActive', pastedData.isActive);
    setValue('posScreenId', pastedData.posScreenId || '');
    
    setValue('productPrices', pastedData.priceTemplates.map(template => ({
      productPriceId: undefined,
      unitId: template.unitId,
      unitFactor: template.unitFactor,
      barcode: '',
      Price: 0,
      posPriceName: template.posPriceName || '',
      productComponents: template.productComponents,
      branchPrices: template.branchPrices
    })));

    setValue('productOptionGroups', pastedData.optionGroupTemplates.map(template => ({
      name: template.name,
      isRequired: template.isRequired,
      allowMultiple: template.allowMultiple,
      minSelection: template.minSelection,
      maxSelection: template.maxSelection,
      sortOrder: template.sortOrder,
      optionItems: template.optionItems
    })));
  };

 const addPrice = () => {
    const newIndex = fields.length;
    append({
      unitId: '',
      unitFactor: 1,
      barcode: '',
      Price: 0,
      posPriceName: '',
      productComponents: [],
      branchPrices: userBranches.map(branch => ({
        rawBranchId: branch.id,
        price: 0,
        isActive: true
      }))
    });
    setLastAddedPriceIndex(newIndex);
    // العودة لتاب الأسعار الافتراضية عند إضافة سعر جديد
    setExpandedPriceIndex(0);
  };

const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
  if (isSubmitting) return;
  
  setIsSubmitting(true);
  try {
    if (mode === 'edit' && initialValues) {
      const updateData = {
        ProductId: initialValues.id,
        productName: data.productName,
        groupId: data.groupId,
        ProductType: productType,
        description: data.description,
        reorderLevel: data.reorderLevel,
        lastPurePrice: data.lastPurePrice,
        expirationDays: data.expirationDays,
        isActive: data.isActive,
        ...(productType === 1 && { posScreenId: data.posScreenId }),
        productPrices: data.productPrices.map(price => {
          const priceData: any = {
            ...(price.productPriceId && { productPriceId: price.productPriceId }),
            barcode: price.barcode,
            Price: Number(price.Price),
            productComponents: price.productComponents?.map(component => ({
              ...(component.componentId && { componentId: component.componentId }),
              rawProductPriceId: component.rawProductPriceId,
              quantity: Number(component.quantity),
              notes: component.notes || ""
            })) || [],
            branchPrices: price.branchPrices?.filter(bp => bp.price > 0) || []
          };

          if (productType === 2) {
            priceData.unitId = price.unitId;
            priceData.unitFactor = Number(price.unitFactor);
          }

          if (productType === 1 || productType === 3) {
            priceData.posPriceName = price.posPriceName || '';
          }

          return priceData;
        }),
        ...((productType === 1 || productType === 3) && { 
          productOptionGroups: data.productOptionGroups?.map(group => ({
            ...(group.id && { id: group.id }),
            name: group.name,
            isRequired: group.isRequired,
            allowMultiple: group.allowMultiple,
            minSelection: Math.max(group.minSelection, 1),
            maxSelection: Math.max(group.maxSelection, 1),
            sortOrder: group.sortOrder,
            optionItems: group.optionItems.map(item => ({
              ...(item.id && { id: item.id }),
              name: item.name,
              productPriceId: item.productPriceId || null,
              useOriginalPrice: item.useOriginalPrice,
              extraPrice: Number(item.extraPrice),
              isCommentOnly: item.isCommentOnly,
              sortOrder: item.sortOrder
            }))
          })) || []
        })
      };
      await onSubmit(updateData, saveAction);
    } else {
      const addData = {
        productName: data.productName,
        groupId: data.groupId,
        productType: productType,
        description: data.description,
        reorderLevel: data.reorderLevel,
        cost: data.cost,
        lastPurePrice: data.lastPurePrice,
        expirationDays: data.expirationDays,
        isActive: data.isActive,
        ...(productType === 1 && { posScreenId: data.posScreenId }),
        productPrices: data.productPrices.map(price => {
          const priceData: any = {
            barcode: price.barcode,
            Price: Number(price.Price),
            productComponents: price.productComponents?.map(component => ({
              rawProductPriceId: component.rawProductPriceId,
              quantity: Number(component.quantity),
              notes: component.notes || ""
            })) || [],
            branchPrices: price.branchPrices?.filter(bp => bp.price > 0) || []
          };

          if (productType === 2) {
            priceData.unitId = price.unitId;
            priceData.unitFactor = Number(price.unitFactor);
          }

          if (productType === 1 || productType === 3) {
            priceData.posPriceName = price.posPriceName || '';
          }

          return priceData;
        }),
        ...((productType === 1 || productType === 3) && { 
          productOptionGroups: data.productOptionGroups?.map(group => ({
            name: group.name,
            isRequired: group.isRequired,
            allowMultiple: group.allowMultiple,
            minSelection: Math.max(group.minSelection, 1),
            maxSelection: Math.max(group.maxSelection, 1),
            sortOrder: group.sortOrder,
            optionItems: group.optionItems.map(item => ({
              name: item.name,
              productPriceId: item.productPriceId || null,
              useOriginalPrice: item.useOriginalPrice,
              extraPrice: Number(item.extraPrice),
              isCommentOnly: item.isCommentOnly,
              sortOrder: item.sortOrder
            }))
          })) || []
        })
      };
      await onSubmit(addData, saveAction);
    }

    if (mode === 'add' && saveAction === 'saveAndNew') {
      setTimeout(() => {
        reset(defaults);
        setCurrentTab(0);
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 100);
    }
    
  } catch (error: any) {
    // ... error handling
  } finally {
    setIsSubmitting(false);
  }
};

  // مكون إدارة المكونات لكل سعر
  const ProductComponentsManager: React.FC<{ priceIndex: number }> = React.memo(({ priceIndex }) => {
    const { fields: componentFields, append: appendComponent, remove: removeComponent } = useFieldArray({
      control,
      name: `productPrices.${priceIndex}.productComponents`
    });

    const [componentDetails, setComponentDetails] = React.useState<{[key: string]: any}>({});
    const [loadingComponents, setLoadingComponents] = React.useState<{[key: string]: boolean}>({});

    const addComponent = React.useCallback(() => {
      appendComponent({
        rawProductPriceId: '',
        quantity: 1,
        notes: ''
      });
    }, [appendComponent]);

    const copyComponents = React.useCallback(() => {
      const components = getValues(`productPrices.${priceIndex}.productComponents`);
      if (components && components.length > 0) {
        const copyData = components.map(comp => ({
          rawProductPriceId: comp.rawProductPriceId,
          quantity: comp.quantity,
          notes: comp.notes
        }));
        
        localStorage.setItem(`componentsCopy_${priceIndex}`, JSON.stringify(copyData));
        
        set({
          open: true,
          message: t('products.componentsCopySuccess'),
          severity: 'success'
        });
      } else {
        set({
          open: true,
          message: t('products.noComponentsToCopy'),
          severity: 'warning'
        });
      }
    }, [priceIndex, getValues, set, t]);

    const pasteComponents = React.useCallback(() => {
      try {
        const savedData = localStorage.getItem(`componentsCopy_${priceIndex}`);
        if (savedData) {
          const componentsToPaste = JSON.parse(savedData);
          
          for (let i = componentFields.length - 1; i >= 0; i--) {
            removeComponent(i);
          }
          
          setTimeout(() => {
            componentsToPaste.forEach((comp: any) => {
              appendComponent({
                rawProductPriceId: comp.rawProductPriceId,
                quantity: comp.quantity,
                notes: comp.notes
              });
            });
            
            set({
              open: true,
              message: t('products.componentsPasteSuccess'),
              severity: 'success'
            });
          }, 100);
        } else {
          set({
            open: true,
            message: 'لا توجد مكونات منسوخة',
            severity: 'warning'
          });
        }
      } catch (error) {
        set({
          open: true,
          message: 'خطأ في لصق المكونات',
          severity: 'error'
        });
      }
    }, [priceIndex, componentFields.length, removeComponent, appendComponent, set, t]);

    const hasCopiedData = React.useMemo(() => {
      return localStorage.getItem(`componentsCopy_${priceIndex}`) !== null;
    }, [priceIndex]);

    const fetchComponentDetails = React.useCallback(async (rawProductPriceId: string) => {
      if (!rawProductPriceId || componentDetails[rawProductPriceId] || loadingComponents[rawProductPriceId]) {
        return;
      }

      setLoadingComponents(prev => ({ ...prev, [rawProductPriceId]: true }));

      try {
        const searchResponse = await searchProductPricesByNameOrBarcode(rawProductPriceId, 1, 10);
        const foundInSearch = searchResponse.data.find((item: { productPriceId: string; }) => item.productPriceId === rawProductPriceId);

        if (foundInSearch) {
          const details = {
            productName: foundInSearch.product?.productName || 'منتج غير محدد',
            unitName: foundInSearch.unit?.unitName || 'وحدة غير محددة',
            unitFactor: foundInSearch.unitFactor || 1,
            price: foundInSearch.price || 0,
            barcode: foundInSearch.barcode || '',
            productId: foundInSearch.product?.productID || ''
          };

          setComponentDetails(prev => ({
            ...prev,
            [rawProductPriceId]: details
          }));
        }
      } catch (error) {
        } finally {
        setLoadingComponents(prev => ({ ...prev, [rawProductPriceId]: false }));
      }
    }, [componentDetails, loadingComponents]);

    return (
      <Box sx={{ mt: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="subtitle2" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconComponents size={16} />
            {t('products.components')} ({componentFields.length})
          </Typography>
          
          <Stack direction="row" spacing={1}>
            <Button
              size="small"
              variant="outlined"
              onClick={copyComponents}
              disabled={componentFields.length === 0}
              startIcon={<IconCopy size={14} />}
              sx={{ minWidth: 80 }}
            >
              {t('common.copy')}
            </Button>
            
            <Button
              size="small"
              variant="outlined"
              onClick={pasteComponents}
              disabled={!hasCopiedData}
              startIcon={hasCopiedData ? <IconClipboardCheck size={14} /> : <IconClipboard size={14} />}
              color={hasCopiedData ? 'success' : 'inherit'}
              sx={{ minWidth: 80 }}
            >
              {t('common.paste')}
            </Button>
            
            <Button
              size="small"
              variant="outlined"
              onClick={addComponent}
              startIcon={<IconPlus size={14} />}
              sx={{ minWidth: 80 }}
            >
              {t('products.addComponent')}
            </Button>
          </Stack>
        </Box>

        {componentFields.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
            {t('products.noComponents')}
          </Typography>
        ) : (
          <Stack spacing={2}>
            {componentFields.map((field, componentIndex) => {
              
              return (
                <Card key={field.id} variant="outlined" sx={{ p: 2 }}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} md={5}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.rawProductPriceId`}
                        control={control}
                        rules={{ required: t('products.componentRequired') }}
                        render={({ field, fieldState }) => (
                          <ProductPriceSearchSelect
                            value={field.value}
                            onChange={(value) => {
                              field.onChange(value);
                              if (value && !componentDetails[value]) {
                                fetchComponentDetails(value);
                              }
                            }}
                            label={t('products.selectComponent')}
                            error={!!fieldState.error}
                            excludeProductId={watchedProductId}
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={6} md={2}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.quantity`}
                        control={control}
                        rules={{ required: true, min: 0.01 }}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            label={t('products.quantity')}
                            type="number"
                            size="small"
                            fullWidth
                            inputProps={{ min: 0.01, step: 0.01 }}
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={6} md={3}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.notes`}
                        control={control}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            label={t('products.notes')}
                            size="small"
                            fullWidth
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={12} md={2}>
                      <IconButton
                        size="small"
                        color="error"
                        onClick={() => removeComponent(componentIndex)}
                        sx={{ width: '100%' }}
                      >
                        <IconTrash size={16} />
                      </IconButton>
                    </Grid>
                  </Grid>

                </Card>
              );
            })}
          </Stack>
        )}
      </Box>
    );
  });

  // مكون منفصل لعرض الأسعار في الموبايل
  const MobilePriceCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Stack spacing={2}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="subtitle2" color="primary">
              {t('products.price')} #{index + 1}
            </Typography>
            <IconButton
              size="small"
              color="error"
              onClick={onRemove}
              type="button"
            >
              <IconTrash size={18} />
            </IconButton>
          </Box>

<Controller
  name={`productPrices.${index}.Price`}
  control={control}
  render={({ field }) => (
    <TextField
      {...field}
      type="number"
      size="small"
      inputProps={{ 
        min: 0, 
        step: 0.01,
        onBlur: (e) => {
          // التأكد من حفظ القيمة عند فقدان التركيز
          const value = parseFloat(e.target.value) || 0;
          field.onChange(value);
        }
      }}
      onFocus={(e) => {
        e.target.select();
        // منع re-render أثناء التركيز
        e.preventDefault();
      }}
      onChange={(e) => {
        // تأخير التحديث لتجنب re-render المستمر
        const value = e.target.value;
        setTimeout(() => {
          field.onChange(parseFloat(value) || 0);
        }, 100);
      }}
      onKeyDown={(e) => {
        // منع فقدان التركيز عند الضغط على مفاتيح معينة
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
          e.preventDefault();
        }
      }}
    />
  )}
/>

          {(productType === 1 || productType === 3) && (
            <Controller
              name={`productPrices.${index}.posPriceName`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('products.form.posPriceName')}
                  fullWidth
                  size="small"
                />
              )}
            />
          )}

          {productType === 2 && (
            <>
              <Controller
                name={`productPrices.${index}.unitId`}
                control={control}
                rules={{ required: true }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth size="small" error={!!fieldState.error}>
                    <InputLabel>{t('products.unit')}</InputLabel>
                    <Select
                      {...field}
                      label={t('products.unit')}
                      displayEmpty
                    >
                      <MenuItem value="">
                        <em>{t('products.selectUnit')}</em>
                      </MenuItem>
                      {units.map((unit) => (
                        <MenuItem key={unit.id} value={unit.id}>
                          {unit.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                )}
              />

              <Controller
                name={`productPrices.${index}.unitFactor`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.unitFactor')}
                    type="number"
                    fullWidth
                    size="small"
                    inputProps={{ min: 0.01, step: 0.01 }}
                  />
                )}
              />
            </>
          )}

          <Controller
            name={`productPrices.${index}.Price`}
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('products.price')}
                type="number"
                fullWidth
                size="small"
                inputProps={{ min: 0, step: 0.01 }}
              />
            )}
          />

          <Accordion>
            <AccordionSummary expandIcon={<IconChevronDown />}>
              <Typography variant="subtitle2">
                {t('products.components')} ({fields[index]?.productComponents?.length || 0})
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <ProductComponentsManager priceIndex={index} />
            </AccordionDetails>
          </Accordion>
        </Stack>
      </CardContent>
    </Card>
  );

// مكون الجدول للشاشات الكبيرة
const DesktopPriceTable = () => (
  <TableContainer component={Paper} variant="outlined">
    <Table size="small">
      <TableHead>
        <TableRow>
          <TableCell>{t('products.barcode')}</TableCell>
          {(productType === 1 || productType === 3) && (
            <TableCell>{t('products.form.posPriceName')}</TableCell>
          )}
          {productType === 2 && (
            <>
              <TableCell>{t('products.unit')}</TableCell>
              <TableCell>{t('products.unitFactor')}</TableCell>
            </>
          )}
          <TableCell>{t('products.price')}</TableCell>
          <TableCell>{t('products.components')}</TableCell>
          <TableCell width={50}></TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {fields.length === 0 ? (
          <TableRow>
            <TableCell colSpan={productType === 2 ? 6 : 5} align="center">
              <Typography color="text.secondary">
                {t('products.noPrices')}
              </Typography>
            </TableCell>
          </TableRow>
        ) : (
          fields.map((field, index) => (
            <React.Fragment key={field.id}>
              <TableRow>
                <TableCell>
                  <Controller
                    name={`productPrices.${index}.barcode`}
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        size="small"
                        placeholder={t('products.barcodeOptional')}
                        fullWidth
                        onKeyDown={(e) => {
                          if (e.key === 'ArrowDown') {
                            e.preventDefault();
                            const nextField = document.querySelector(`[name="productPrices.${index + 1}.barcode"]`) as HTMLElement;
                            if (nextField) {
                              nextField.focus();
                            }
                          }
                          if (e.key === 'ArrowUp') {
                            e.preventDefault();
                            const prevField = document.querySelector(`[name="productPrices.${index - 1}.barcode"]`) as HTMLElement;
                            if (prevField) {
                              prevField.focus();
                            }
                          }
                          if (e.key === 'ArrowRight') {
                            e.preventDefault();
                            const nextField = productType === 1 || productType === 3 
                              ? document.querySelector(`[name="productPrices.${index}.posPriceName"]`) as HTMLElement
                              : document.querySelector(`[name="productPrices.${index}.unitId"]`) as HTMLElement;
                            nextField?.focus();
                          }
                        }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </TableCell>
                
                {(productType === 1 || productType === 3) && (
                  <TableCell>
                    <Controller
                      name={`productPrices.${index}.posPriceName`}
                      control={control}
                      render={({ field }) => (
                        <TextField
                          {...field}
                          size="small"
                          placeholder={t('products.form.posNamePlaceholder')}
                          fullWidth
                          onKeyDown={(e) => {
                            if (e.key === 'ArrowDown') {
                              e.preventDefault();
                              const nextField = document.querySelector(`[name="productPrices.${index + 1}.posPriceName"]`) as HTMLElement;
                              if (nextField) {
                                nextField.focus();
                              }
                            }
                            if (e.key === 'ArrowUp') {
                              e.preventDefault();
                              const prevField = document.querySelector(`[name="productPrices.${index - 1}.posPriceName"]`) as HTMLElement;
                              if (prevField) {
                                prevField.focus();
                              }
                            }
                            if (e.key === 'ArrowLeft') {
                              e.preventDefault();
                              const prevField = document.querySelector(`[name="productPrices.${index}.barcode"]`) as HTMLElement;
                              prevField?.focus();
                            }
                            if (e.key === 'ArrowRight') {
                              e.preventDefault();
                              const nextField = document.querySelector(`[name="productPrices.${index}.Price"]`) as HTMLElement;
                              nextField?.focus();
                            }
                          }}
                          onFocus={(e) => e.target.select()}
                        />
                      )}
                    />
                  </TableCell>
                )}
                
                {productType === 2 && (
                  <>
                    <TableCell>
                      <Controller
                        name={`productPrices.${index}.unitId`}
                        control={control}
                        rules={{ required: true }}
                        render={({ field }) => (
                          <FormControl fullWidth size="small">
                            <Select
                              {...field}
                              displayEmpty
                              onKeyDown={(e) => {
                                if (e.key === 'ArrowRight') {
                                  e.preventDefault();
                                  const nextField = document.querySelector(`[name="productPrices.${index}.unitFactor"]`) as HTMLElement;
                                  nextField?.focus();
                                }
                                if (e.key === 'ArrowLeft') {
                                  e.preventDefault();
                                  const prevField = document.querySelector(`[name="productPrices.${index}.barcode"]`) as HTMLElement;
                                  prevField?.focus();
                                }
                              }}
                            >
                              <MenuItem value="">
                                <em>{t('products.selectUnit')}</em>
                              </MenuItem>
                              {units.map((unit) => (
                                <MenuItem key={unit.id} value={unit.id}>
                                  {unit.name}
                                </MenuItem>
                              ))}
                            </Select>
                          </FormControl>
                        )}
                      />
                    </TableCell>
                    <TableCell>
                      <Controller
                        name={`productPrices.${index}.unitFactor`}
                        control={control}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            type="number"
                            size="small"
                            inputProps={{ min: 0.01, step: 0.01 }}
                            onKeyDown={(e) => {
                              if (e.key === 'ArrowDown') {
                                e.preventDefault();
                                const nextField = document.querySelector(`[name="productPrices.${index + 1}.unitFactor"]`) as HTMLElement;
                                if (nextField) {
                                  nextField.focus();
                                }
                              }
                              if (e.key === 'ArrowUp') {
                                e.preventDefault();
                                const prevField = document.querySelector(`[name="productPrices.${index - 1}.unitFactor"]`) as HTMLElement;
                                if (prevField) {
                                  prevField.focus();
                                }
                              }
                              if (e.key === 'ArrowLeft') {
                                e.preventDefault();
                                const prevField = document.querySelector(`[name="productPrices.${index}.unitId"]`) as HTMLElement;
                                prevField?.focus();
                              }
                              if (e.key === 'ArrowRight') {
                                e.preventDefault();
                                const nextField = document.querySelector(`[name="productPrices.${index}.Price"]`) as HTMLElement;
                                nextField?.focus();
                              }
                            }}
                            onFocus={(e) => e.target.select()}
                          />
                        )}
                      />
                    </TableCell>
                  </>
                )}
                
                <TableCell>
                  <Controller
                    name={`productPrices.${index}.Price`}
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        type="number"
                        size="small"
                        inputProps={{ min: 0, step: 0.01 }}
                        onKeyDown={(e) => {
                          if (e.key === 'ArrowDown') {
                            e.preventDefault();
                            const nextField = document.querySelector(`[name="productPrices.${index + 1}.Price"]`) as HTMLElement;
                            if (nextField) {
                              nextField.focus();
                            }
                          }
                          if (e.key === 'ArrowUp') {
                            e.preventDefault();
                            const prevField = document.querySelector(`[name="productPrices.${index - 1}.Price"]`) as HTMLElement;
                            if (prevField) {
                              prevField.focus();
                            }
                          }
                          if (e.key === 'ArrowLeft') {
                            e.preventDefault();
                            const prevField = productType === 2 
                              ? document.querySelector(`[name="productPrices.${index}.unitFactor"]`) as HTMLElement
                              : document.querySelector(`[name="productPrices.${index}.posPriceName"]`) as HTMLElement;
                            prevField?.focus();
                          }
                        }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </TableCell>
                
                <TableCell>
                  <Button
                    size="small"
                    variant="outlined"
                    onClick={() => setExpandedPriceIndex(expandedPriceIndex === index ? null : index)}
                    startIcon={<IconComponents size={16} />}
                  >
                    {fields[index]?.productComponents?.length || 0}
                  </Button>
                </TableCell>
                <TableCell>
                  <IconButton
                    size="small"
                    color="error"
                    onClick={() => remove(index)}
                    type="button"
                  >
                    <IconTrash size={18} />
                  </IconButton>
                </TableCell>
              </TableRow>
              {expandedPriceIndex === index && (
                <TableRow>
                  <TableCell colSpan={productType === 2 ? 6 : 5}>
                    <ProductComponentsManager priceIndex={index} />
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))
        )}
      </TableBody>
    </Table>
  </TableContainer>
);

  return (
    <>
<Dialog 
  open={open} 
  onClose={onClose} 
  maxWidth="lg" 
  fullWidth
  fullScreen={isMobile}
  scroll="body" // تغيير من paper إلى body
  sx={{
    '& .MuiDialog-paper': {
      maxHeight: isMobile ? '100vh' : '90vh',
      height: isMobile ? '100vh' : 'auto',
      margin: isMobile ? 0 : 2,
      overflowY: 'auto',
      overflowX: 'hidden'
    }
  }}
>
        <DialogTitle>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            flexDirection: { xs: 'column', sm: 'row' },
            gap: { xs: 2, sm: 0 }
          }}>
            <Typography variant="h6">
              {mode === 'add' ? t('products.add') : t('products.edit')}
            </Typography>
            
            <Stack direction="row" spacing={1}>
              <Button
                variant="outlined"
                size="small"
                startIcon={<IconCopy size={16} />}
                onClick={handleCopyProduct}
                disabled={!watch('productName')}
                sx={{ minWidth: { xs: 'auto', sm: 100 } }}
              >
                {isMobile ? '' : t('common.copy')}
              </Button>
              
              <Button
                variant="outlined"
                size="small"
                startIcon={productCopyPaste.hasCopiedData ? <IconClipboardCheck size={16} /> : <IconClipboard size={16} />}
                onClick={handlePasteProduct}
                disabled={!productCopyPaste.hasCopiedData}
                color={productCopyPaste.hasCopiedData ? 'success' : 'inherit'}
                sx={{ minWidth: { xs: 'auto', sm: 100 } }}
              >
                {isMobile ? '' : t('common.paste')}
              </Button>
              
              {productCopyPaste.hasCopiedData && (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<IconTrashX size={16} />}
                  onClick={productCopyPaste.clearData}
                  color="error"
                  sx={{ minWidth: { xs: 'auto', sm: 100 } }}
                >
                  {isMobile ? '' : t('common.clearCopy')}
                </Button>
              )}
            </Stack>
          </Box>
        </DialogTitle>

        <form>
<DialogContent 
  sx={{ 
    maxHeight: 'none', // إزالة maxHeight
    height: 'auto',
    overflowY: 'visible', // تغيير من auto إلى visible
    overflowX: 'hidden',
    p: isMobile ? 1.5 : 2,
    '&::-webkit-scrollbar': {
      display: 'none' // إخفاء scrollbar في webkit browsers
    },
    scrollbarWidth: 'none', // إخفاء scrollbar في Firefox
    msOverflowStyle: 'none' // إخفاء scrollbar في IE/Edge
  }}
>            {/* Tabs للتنقل */}
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
              <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>
                <Tab label={t('products.basicInfo')} />
                {(productType === 1 || productType === 3) && <Tab label={t('products.optionGroups')} />}
              </Tabs>
            </Box>

            {/* Tab 0: المعلومات الأساسية والأسعار */}
            {currentTab === 0 && (
              <Grid container spacing={3}>
                {/* Basic Info Section */}
                <Grid item xs={12}>
                  <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
                    {t('products.basicInfo')}
                  </Typography>
                </Grid>

                <Grid item xs={12} md={6}>
                  <Controller
                    name="productName"
                    control={control}
                    rules={{ required: t('products.nameRequired') }}
                    render={({ field, fieldState }) => (
                      <TextField
                        {...field}
                        inputRef={nameFieldRef}
                        label={t('products.name')}
                        fullWidth
                        error={!!fieldState.error}
                        helperText={fieldState.error?.message}
                        autoFocus
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </Grid>

                <Grid item xs={12} md={6}>
                  <Controller
                    name="groupId"
                    control={control}
                    rules={{ required: t('products.groupRequired') }}
                    render={({ field, fieldState }) => (
                      <Box>
                        <GroupTreeSelect
                          groups={groups}
                          value={field.value}
                          onChange={field.onChange}
                          label={t('products.group')}
                        />
                        {fieldState.error && (
                          <Typography variant="caption" color="error" sx={{ mt: 1, ml: 2 }}>
                            {fieldState.error.message}
                          </Typography>
                        )}
                      </Box>
                    )}
                  />
                </Grid>

                {productType === 1 && flatPosScreens.length > 0 && (
                  <Grid item xs={12} md={6}>
                    <Controller
                      name="posScreenId"
                      control={control}
                      render={({ field }) => (
                        <FormControl fullWidth>
                          <InputLabel>{t('products.posScreen')}</InputLabel>
                          <Select
                            {...field}
                            label={t('products.posScreen')}
                          >
                            <MenuItem value="">
                              <em>{t('products.selectPosScreen')}</em>
                            </MenuItem>
                            {flatPosScreens.map((screen) => (
                              <MenuItem key={screen.id} value={screen.id}>
                                {'  '.repeat(screen.displayOrder || 0) + screen.name}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      )}
                    />
                  </Grid>
                )}

<Grid item xs={12} md={6}>
  <Controller
    name="description"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('products.description')}
        fullWidth
        onFocus={(e) => e.target.select()}
      />
    )}
  />
</Grid>

{/* إظهار الحقول فقط للمواد الخام (productType === 2) */}
{productType === 2 && (
  <>
    <Grid item xs={12} md={4}>
      <Controller
        name="reorderLevel"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.reorderLevel')}
            type="number"
            fullWidth
            inputProps={{ min: 0 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>

    <Grid item xs={12} md={4}>
      <Controller
        name="cost"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.cost')}
            type="number"
            fullWidth
            inputProps={{ min: 0, step: 0.01 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>

    <Grid item xs={12} md={4}>
      <Controller
        name="lastPurePrice"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.lastPurePrice')}
            type="number"
            fullWidth
            inputProps={{ min: 0, step: 0.01 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>
  </>
)}

                {/* <Grid item xs={12} md={4}>
                  <Controller
                    name="expirationDays"
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        label={t('products.expirationDays')}
                        type="number"
                        fullWidth
                        inputProps={{ min: 0 }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </Grid> */}

                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Controller
                        name="isActive"
                        control={control}
                        render={({ field }) => (
                          <Switch
                            checked={field.value}
                            onChange={field.onChange}
                          />
                        )}
                      />
                    }
                    label={t('products.form.isActive')}
                  />
                </Grid>

                {/* Pricing Section */}
   {/* Pricing Section */}
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  
                  {/* عنوان قسم الأسعار */}
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6" sx={{ color: 'primary.main' }}>
                      {t('products.pricing')}
                    </Typography>
                    <Button
                      variant="contained"
                      startIcon={<IconPlus size={20} />}
                      onClick={addPrice}
                      size={isMobile ? "small" : "medium"}
                    >
                      {t('products.addPrice')}
                    </Button>
                  </Box>

                  {/* نظام التابات للأسعار */}
                  {userBranches.length === 0 ? (
                    // إذا لم توجد فروع، عرض الأسعار الافتراضية فقط
                    <Box>
                      <Typography variant="subtitle1" sx={{ mb: 2, color: 'primary.main' }}>
                        {t('products.defaultPrices')} ({fields.length})
                      </Typography>
                      
                      {fields.length === 0 ? (
                        <Card variant="outlined">
                          <CardContent>
                            <Typography color="text.secondary" align="center">
                              {t('products.noPrices')}
                            </Typography>
                          </CardContent>
                        </Card>
                      ) : isMobile ? (
                        <Stack spacing={2}>
                          {fields.map((field, index) => (
                            <MobilePriceCard 
                              key={field.id} 
                              index={index} 
                              onRemove={() => remove(index)} 
                            />
                          ))}
                        </Stack>
                      ) : (
                        <DesktopPriceTable />
                      )}
                    </Box>
                  ) : (
                    // إذا وجدت فروع، عرض نظام التابات
                    <Box>
                      {/* التابات */}
                      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
                        <Tabs 
                          value={expandedPriceIndex || 0} 
                          onChange={(_, newValue) => setExpandedPriceIndex(newValue)}
                          variant={isMobile ? "scrollable" : "standard"}
                          scrollButtons="auto"
                        >
                          <Tab 
                            label={`${t('products.defaultPrices')} (${fields.length})`}
                            id="prices-tab-0"
                            aria-controls="prices-tabpanel-0"
                          />
                          {userBranches.map((branch, index) => (
                            <Tab
                              key={branch.id}
                              label={branch.name}
                              id={`prices-tab-${index + 1}`}
                              aria-controls={`prices-tabpanel-${index + 1}`}
                            />
                          ))}
                        </Tabs>
                      </Box>

                      {/* محتوى التابات */}
                      
                      {/* تاب الأسعار الافتراضية */}
                      {(expandedPriceIndex || 0) === 0 && (
                        <Box>
                          {fields.length === 0 ? (
                            <Card variant="outlined">
                              <CardContent>
                                <Typography color="text.secondary" align="center">
                                  {t('products.noPrices')}
                                </Typography>
                              </CardContent>
                            </Card>
                          ) : isMobile ? (
                            <Stack spacing={2}>
                              {fields.map((field, index) => (
                                <MobilePriceCard 
                                  key={field.id} 
                                  index={index} 
                                  onRemove={() => remove(index)} 
                                />
                              ))}
                            </Stack>
                          ) : (
                            <DesktopPriceTable />
                          )}
                        </Box>
                      )}

                      {/* تابات أسعار الفروع */}
                      {userBranches.map((branch, branchIndex) => (
                        (expandedPriceIndex || 0) === branchIndex + 1 && (
                          <Box key={branch.id}>
                            <Typography variant="subtitle1" sx={{ mb: 2, color: 'secondary.main' }}>
                              {t('products.branchPrices')} - {branch.name}
                            </Typography>
                            
                            {fields.length === 0 ? (
                              <Card variant="outlined">
                                <CardContent>
                                  <Typography color="text.secondary" align="center">
                                    {t('products.noPricesForBranchPricing')}
                                  </Typography>
                                </CardContent>
                              </Card>
                            ) : (
                              <TableContainer component={Paper} variant="outlined">
                                <Table size="small">
                                  <TableHead>
                                    <TableRow>
                                      <TableCell>{t('products.productPrice')}</TableCell>
                                      <TableCell>{t('products.defaultPrice')}</TableCell>
                                      <TableCell>{t('products.branchPrice')}</TableCell>
                                      <TableCell>{t('products.difference')}</TableCell>
                                    </TableRow>
                                  </TableHead>
                                  <TableBody>
                                    {fields.map((field, priceIndex) => {
                                      const defaultPrice = watch(`productPrices.${priceIndex}.Price`) || 0;
                                      const branchPrices = watch(`productPrices.${priceIndex}.branchPrices`) || [];
                                      const branchPriceIndex = branchPrices.findIndex(
                                        (bp: any) => bp.rawBranchId === branch.id
                                      );
                                      const branchPrice = branchPriceIndex >= 0 
                                        ? branchPrices[branchPriceIndex]?.price || 0
                                        : 0;
                                      const difference = branchPrice - defaultPrice;
                                      const priceName = productType === 1 || productType === 3 
                                        ? watch(`productPrices.${priceIndex}.posPriceName`) || `${t('products.price')} ${priceIndex + 1}`
                                        : `${t('products.price')} ${priceIndex + 1}`;

                                      return (
                                        <TableRow key={field.id}>
                                          <TableCell>
                                            <Typography variant="body2" fontWeight={500}>
                                              {priceName}
                                            </Typography>
                                            {watch(`productPrices.${priceIndex}.barcode`) && (
                                              <Typography variant="caption" color="text.secondary">
                                                {watch(`productPrices.${priceIndex}.barcode`)}
                                              </Typography>
                                            )}
                                          </TableCell>
                                          <TableCell>
                                            <Typography variant="body2" color="text.secondary">
                                              {defaultPrice.toFixed(2)} {t('common.currency')}
                                            </Typography>
                                          </TableCell>
                                          <TableCell>
                                            <TextField
                                              type="number"
                                              size="small"
                                              value={branchPrice}
                                              onChange={(e) => {
                                                const newPrice = Number(e.target.value);
                                                const currentBranchPrices = [...branchPrices];
                                                
                                                if (branchPriceIndex >= 0) {
                                                  currentBranchPrices[branchPriceIndex] = {
                                                    ...currentBranchPrices[branchPriceIndex],
                                                    price: newPrice
                                                  };
                                                } else {
                                                  currentBranchPrices.push({
                                                    rawBranchId: branch.id,
                                                    price: newPrice,
                                                    isActive: true
                                                  });
                                                }
                                                
                                                setValue(`productPrices.${priceIndex}.branchPrices`, currentBranchPrices);
                                              }}
                                              inputProps={{ min: 0, step: 0.01 }}
                                              sx={{ width: 120 }}
                                              onFocus={(e) => e.target.select()}
                                            />
                                          </TableCell>
                                          <TableCell>
                                            <Typography 
                                              variant="body2" 
                                              color={difference > 0 ? 'success.main' : difference < 0 ? 'error.main' : 'text.secondary'}
                                              fontWeight={difference !== 0 ? 600 : 400}
                                            >
                                              {difference > 0 ? '+' : ''}{difference.toFixed(2)}
                                            </Typography>
                                          </TableCell>
                                        </TableRow>
                                      );
                                    })}
                                  </TableBody>
                                </Table>
                              </TableContainer>
                            )}
                          </Box>
                        )
                      ))}
                    </Box>
                  )}
                </Grid>
              </Grid>
            )}

            {/* Tab 1: Option Groups */}
            {currentTab === 1 && (productType === 1 || productType === 3) && (
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                    <Typography variant="h6" color="primary.main">
                      {t('products.optionGroups')} ({optionGroupFields.length})
                    </Typography>
                    <Button
                      variant="contained"
                      startIcon={<IconPlus />}
                      onClick={addOptionGroup}
                    >
                      {t('products.addOptionGroup')}
                    </Button>
                  </Box>

                  {optionGroupFields.length === 0 ? (
                    <Card variant="outlined">
                      <CardContent>
                        <Typography color="text.secondary" align="center">
                          {t('products.noOptionGroups')}
                        </Typography>
                      </CardContent>
                    </Card>
                  ) : (
                    <Stack spacing={2}>
                      {optionGroupFields.map((field, index) => (
                        <OptionGroupComponent key={field.id} groupIndex={index} />
                      ))}
                    </Stack>
                  )}
                </Grid>
              </Grid>
            )}
          </DialogContent>

          <DialogActions sx={{ 
            position: 'sticky', 
            bottom: 0, 
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            p: 2,
            flexDirection: isMobile ? 'column' : 'row',
            gap: isMobile ? 1 : 0
          }}>
            <Button 
              onClick={onClose} 
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('common.cancel')}
            </Button>
            
            <Stack direction={isMobile ? "column" : "row"} spacing={1} sx={{ width: isMobile ? '100%' : 'auto' }}>
              <Button 
                variant="outlined"
                startIcon={<IconDeviceFloppy size={20} />}
                onClick={handleSubmit((data) => submit(data, 'save'))}
                disabled={isSubmitting}
                fullWidth={isMobile}
              >
                {t('products.saveAndExit')}
              </Button>
              
              <Button 
                variant="contained"
                startIcon={<IconPlusNew size={20} />}
                onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
                disabled={isSubmitting}
                fullWidth={isMobile}
              >
                {t('products.saveAndNew')}
              </Button>
            </Stack>
          </DialogActions>
        </form>
      </Dialog>
    </>
  );
};

export default ProductForm;


===== src/Pages/products/components/ProductMultiSelectDialog.tsx =====
// File: src/pages/products/components/ProductMultiSelectDialog.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Button, TextField, Box, Checkbox,
  Table, TableBody, TableCell, TableContainer, TableHead,
  TableRow, Paper, Chip, Stack, Typography, InputAdornment,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconSearch, IconSelectAll } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import { Product } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface SelectedProduct {
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (products: SelectedProduct[]) => void;
  excludeProductId?: string;
  productType?: number;
  preSelectedItems?: string[]; // ⭐ إضافة المنتجات المختارة مسبقاً
}

const ProductMultiSelectDialog: React.FC<Props> = ({
  open, onClose, onSelect, excludeProductId, productType = 1, preSelectedItems = []
}) => {
  const { t } = useTranslation();
  const [products, setProducts] = React.useState<Product[]>([]);
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [selectedGroupId, setSelectedGroupId] = React.useState('');
  const [selectedProducts, setSelectedProducts] = React.useState<Set<string>>(new Set());

  // تحميل المجموعات
  React.useEffect(() => {
    if (open) {
      loadGroups();
      loadProducts();
      // ⭐ تحميل المنتجات المختارة مسبقاً
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [open, preSelectedItems]);

  const loadGroups = async () => {
    try {
      const groupsData = await groupsApi.getAll();
      setGroups(groupsData);
    } catch (error) {
      }
  };

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productsApi.getByType(productType, 1, 100);
      const filteredProducts = data.data.filter(p => 
        p.id !== excludeProductId && 
        p.productPrices && 
        p.productPrices.length > 0 &&
        p.isActive
      );
      setProducts(filteredProducts);
    } catch (error) {
      } finally {
      setLoading(false);
    }
  };

  // ⭐ فلترة المنتجات مع البحث في Product Name و Price Name
  const filteredProducts = React.useMemo(() => {
    let result = [...products];

    if (searchQuery.trim()) {
      const searchLower = searchQuery.toLowerCase();
      result = result.filter(product => {
        // البحث في اسم المنتج
        const productNameMatch = product.name.toLowerCase().includes(searchLower);
        
        // البحث في أسماء الأسعار
        const priceNameMatch = product.productPrices.some(price => 
          price.posPriceName && price.posPriceName.toLowerCase().includes(searchLower)
        );
        
        return productNameMatch || priceNameMatch;
      });
    }

    if (selectedGroupId) {
      result = result.filter(product => product.groupId === selectedGroupId);
    }

    return result;
  }, [products, searchQuery, selectedGroupId]);

  const allProductPrices = React.useMemo(() => {
    const prices: Array<{
      productPriceId: string;
      productId: string;
      productName: string;
      priceName: string;
      price: number;
      barcode: string;
    }> = [];

    filteredProducts.forEach(product => {
      product.productPrices.forEach(price => {
        prices.push({
          productPriceId: price.id,
          productId: product.id,
          productName: product.name,
          priceName: price.posPriceName || product.name,
          price: price.price,
          barcode: price.barcode
        });
      });
    });

    return prices;
  }, [filteredProducts]);

  const handleSelectAll = () => {
    if (selectedProducts.size === allProductPrices.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(allProductPrices.map(p => p.productPriceId)));
    }
  };

  const handleProductToggle = (productPriceId: string) => {
    const newSelected = new Set(selectedProducts);
    if (newSelected.has(productPriceId)) {
      newSelected.delete(productPriceId);
    } else {
      newSelected.add(productPriceId);
    }
    setSelectedProducts(newSelected);
  };

  const handleConfirm = () => {
    const selectedProductsData = allProductPrices
      .filter(p => selectedProducts.has(p.productPriceId))
      .map(p => ({
        productPriceId: p.productPriceId,
        productName: p.productName,
        priceName: p.priceName,
        price: p.price
      }));
    
    onSelect(selectedProductsData);
    onClose();
    setSelectedProducts(new Set());
  };

  const handleCancel = () => {
    onClose();
    setSelectedProducts(new Set());
  };

  return (
    <Dialog open={open} onClose={handleCancel} maxWidth="lg" fullWidth>
      <DialogTitle>
        {t('products.form.selectProducts')}
      </DialogTitle>
      
      <DialogContent>
        <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
          <TextField
            placeholder={t('products.form.searchProductsAndPrices')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              )
            }}
            sx={{ flex: 1 }}
          />
          
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>{t('products.form.filterByGroup')}</InputLabel>
            <Select
              value={selectedGroupId}
              onChange={(e) => setSelectedGroupId(e.target.value)}
              label={t('products.form.filterByGroup')}
            >
              <MenuItem value="">
                <em>{t('products.form.allGroups')}</em>
              </MenuItem>
              {groups.map((group) => (
                <MenuItem key={group.id} value={group.id}>
                  {group.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>

        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            {t('products.form.productsFound', { count: allProductPrices.length })}
          </Typography>
          
          <Stack direction="row" spacing={1} alignItems="center">
            <Chip 
              label={t('products.form.selected', { count: selectedProducts.size })}
              color="primary"
              variant="outlined"
            />
            <Button
              size="small"
              startIcon={<IconSelectAll />}
              onClick={handleSelectAll}
            >
              {selectedProducts.size === allProductPrices.length 
                ? t('products.form.deselectAll') 
                : t('products.form.selectAll')
              }
            </Button>
          </Stack>
        </Box>

        <TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 400 }}>
          <Table stickyHeader size="small">
            <TableHead>
              <TableRow>
                <TableCell padding="checkbox">
                  <Checkbox
                    checked={selectedProducts.size === allProductPrices.length && allProductPrices.length > 0}
                    indeterminate={selectedProducts.size > 0 && selectedProducts.size < allProductPrices.length}
                    onChange={handleSelectAll}
                  />
                </TableCell>
                <TableCell>{t('products.form.productName')}</TableCell>
                <TableCell>{t('products.form.priceName')}</TableCell>
                <TableCell>{t('products.form.price')}</TableCell>
                <TableCell>{t('products.form.barcode')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    {t('common.loading')}
                  </TableCell>
                </TableRow>
              ) : allProductPrices.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    {t('products.form.noProductsFound')}
                  </TableCell>
                </TableRow>
              ) : (
                allProductPrices.map((productPrice) => (
                  <TableRow key={productPrice.productPriceId}>
                    <TableCell padding="checkbox">
                      <Checkbox
                        checked={selectedProducts.has(productPrice.productPriceId)}
                        onChange={() => handleProductToggle(productPrice.productPriceId)}
                      />
                    </TableCell>
                    <TableCell>{productPrice.productName}</TableCell>
                    <TableCell>
                      <Box>
                        <Typography variant="body2">
                          {productPrice.priceName}
                        </Typography>
                        {productPrice.priceName !== productPrice.productName && (
                          <Typography variant="caption" color="text.secondary">
                            ({productPrice.productName})
                          </Typography>
                        )}
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" sx={{ fontWeight: 600, color: 'primary.main' }}>
                        {productPrice.price.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" color="text.secondary">
                        {productPrice.barcode || '-'}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={handleCancel}>
          {t('common.cancel')}
        </Button>
        <Button 
          onClick={handleConfirm} 
          variant="contained"
          disabled={selectedProducts.size === 0}
        >
          {t('products.form.addSelected', { count: selectedProducts.size })}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ProductMultiSelectDialog;

===== src/Pages/products/components/ProductPricesDrawer.tsx =====
// File: src/pages/products/components/ProductPricesDrawer.tsx
import React from 'react';
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Stack,
  Card,
  CardContent,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconX, IconBarcode, IconComponents } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  open: boolean;
  product: Product | null;
  units: Unit[];
  onClose: () => void;
}

const ProductPricesDrawer: React.FC<Props> = ({
  open,
  product,
  units,
  onClose
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  if (!product) return null;

  const getUnitName = (unitId: string) => {
    const unit = units.find(u => u.id === unitId);
    return unit?.name || t('common.notSpecified');
  };

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';
      case 2: return 'secondary';
      case 3: return 'info';
      default: return 'default';
    }
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: isMobile ? '100%' : 600,
          maxWidth: '100%'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ mb: 1 }}>
              {product.name}
            </Typography>
            <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
              <Chip
                label={getProductTypeLabel(product.productType)}
                color={getProductTypeColor(product.productType)}
                size="small"
                variant="outlined"
              />
              {/* ⭐ عرض حالة المنتج */}
              <Chip
                label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
                color={product.isActive ? 'success' : 'error'}
                size="small"
                variant={product.isActive ? 'filled' : 'outlined'}
              />
            </Stack>
            <Typography variant="body2" color="text.secondary">
              {t('products.code')}: {product.code}
            </Typography>
            {product.group && (
              <Typography variant="body2" color="text.secondary">
                {t('products.group')}: {product.group.name}
              </Typography>
            )}
            {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
            {product.productType === 1 && product.posScreen && (
              <Typography variant="body2" color="text.secondary">
                📱 {t('products.form.posScreen')}: {product.posScreen.name}
              </Typography>
            )}
          </Box>
          
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Divider sx={{ mb: 3 }} />

        {/* Product Description */}
        {product.description && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" sx={{ mb: 1 }}>
              {t('products.description')}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {product.description}
            </Typography>
          </Box>
        )}

        {/* Product Options (للـ POS و Addition فقط) */}
        {(product.productType === 1 || product.productType === 3) && 
         product.productOptionGroups && 
         product.productOptionGroups.length > 0 && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" sx={{ mb: 2 }}>
              {t('products.form.productOptions')} ({product.productOptionGroups.length})
            </Typography>
            {product.productOptionGroups.map((group, index) => (
              <Card key={group.id || index} variant="outlined" sx={{ mb: 2 }}>
                <CardContent sx={{ pb: '16px !important' }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="subtitle2">
                      {group.name}
                    </Typography>
                    <Stack direction="row" spacing={1}>
                      {group.isRequired && (
                        <Chip label={t('products.form.required')} size="small" color="error" variant="outlined" />
                      )}
                      {group.allowMultiple && (
                        <Chip label={t('products.form.allowMultiple')} size="small" color="info" variant="outlined" />
                      )}
                    </Stack>
                  </Box>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 2, display: 'block' }}>
                    {t('products.form.minSelection')}: {group.minSelection} | {t('products.form.maxSelection')}: {group.maxSelection}
                  </Typography>
                  
                  {group.optionItems && group.optionItems.length > 0 && (
                    <Box>
                      {group.optionItems.map((item, itemIndex) => (
                        <Box key={item.id || itemIndex} sx={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          py: 0.5,
                          borderBottom: itemIndex < group.optionItems.length - 1 ? 1 : 0,
                          borderColor: 'divider'
                        }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body2">
                              {item.name}
                            </Typography>
                            {item.isCommentOnly && (
                              <Chip label={t('products.form.comment')} size="small" color="info" />
                            )}
                          </Box>
                          {item.extraPrice > 0 && (
                            <Typography variant="body2" color="primary.main" sx={{ fontWeight: 600 }}>
                              +{item.extraPrice.toFixed(2)}
                            </Typography>
                          )}
                        </Box>
                      ))}
                    </Box>
                  )}
                </CardContent>
              </Card>
            ))}
          </Box>
        )}

        {/* Prices */}
        <Typography variant="subtitle2" sx={{ mb: 2 }}>
          {t('products.prices')} ({product.productPrices.length})
        </Typography>

        {product.productPrices.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
            {t('products.noPrices')}
          </Typography>
        ) : isMobile ? (
          // Mobile View
          <Stack spacing={2}>
            {product.productPrices.map((price, index) => (
              <Card key={price.id} variant="outlined">
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Typography variant="subtitle2">
                      {t('products.price')} #{index + 1}
                    </Typography>
                    <Typography variant="h6" color="primary.main">
                      {price.price.toFixed(2)}
                    </Typography>
                  </Box>

                  <Stack spacing={1}>
                    {/* ⭐ عرض posPriceName للـ POS/Addition */}
                    {(product.productType === 1 || product.productType === 3) && price.posPriceName && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.form.priceName')}:
                        </Typography>
                        <Typography variant="body2">
                          {price.posPriceName}
                        </Typography>
                      </Box>
                    )}

                    {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                    {product.productType === 2 && (
                      <>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                          <Typography variant="body2" color="text.secondary">
                            {t('products.unit')}:
                          </Typography>
                          <Typography variant="body2">
                            {getUnitName(price.unitId)}
                          </Typography>
                        </Box>

                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                          <Typography variant="body2" color="text.secondary">
                            {t('products.unitFactor')}:
                          </Typography>
                          <Typography variant="body2">
                            {price.unitFactor}x
                          </Typography>
                        </Box>
                      </>
                    )}

                    {price.barcode && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.barcode')}:
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconBarcode size={16} />
                          <Typography variant="body2" fontFamily="monospace">
                            {price.barcode}
                          </Typography>
                        </Box>
                      </Box>
                    )}

                    {price.productComponents && price.productComponents.length > 0 && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.components')}:
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconComponents size={16} />
                          <Typography variant="body2">
                            {price.productComponents.length}
                          </Typography>
                        </Box>
                      </Box>
                    )}
                  </Stack>
                </CardContent>
              </Card>
            ))}
          </Stack>
        ) : (
          // Desktop Table View
          <TableContainer component={Paper} variant="outlined">
            <Table size="small">
              <TableHead>
                <TableRow>
                  {/* ⭐ عرض posPriceName للـ POS/Addition */}
                  {(product.productType === 1 || product.productType === 3) && (
                    <TableCell>{t('products.form.priceName')}</TableCell>
                  )}
                  {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                  {product.productType === 2 && (
                    <>
                      <TableCell>{t('products.unit')}</TableCell>
                      <TableCell>{t('products.unitFactor')}</TableCell>
                    </>
                  )}
                  <TableCell>{t('products.price')}</TableCell>
                  <TableCell>{t('products.barcode')}</TableCell>
                  <TableCell>{t('products.components')}</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {product.productPrices.map((price) => (
                  <TableRow key={price.id}>
                    {/* ⭐ عرض posPriceName للـ POS/Addition */}
                    {(product.productType === 1 || product.productType === 3) && (
                      <TableCell>
                        <Typography variant="body2">
                          {price.posPriceName || '-'}
                        </Typography>
                      </TableCell>
                    )}
                    
                    {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                    {product.productType === 2 && (
                      <>
                        <TableCell>
                          <Typography variant="body2">
                            {getUnitName(price.unitId)}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2">
                            {price.unitFactor}x
                          </Typography>
                        </TableCell>
                      </>
                    )}
                    
                    <TableCell>
                      <Typography variant="body2" fontWeight={600} color="primary.main">
                        {price.price.toFixed(2)}
                      </Typography>
                    </TableCell>
                    
                    <TableCell>
                      {price.barcode ? (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconBarcode size={16} />
                          <Typography variant="body2" fontFamily="monospace">
                            {price.barcode}
                          </Typography>
                        </Box>
                      ) : (
                        <Typography variant="body2" color="text.secondary">-</Typography>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      {price.productComponents && price.productComponents.length > 0 ? (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconComponents size={16} />
                          <Typography variant="body2">
                            {price.productComponents.length}
                          </Typography>
                        </Box>
                      ) : (
                        <Typography variant="body2" color="text.secondary">-</Typography>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Box>
    </Drawer>
  );
};

export default ProductPricesDrawer;

===== src/Pages/products/components/ProductPriceSearchSelect.tsx =====
// File: src/pages/products/components/ProductPriceSearchSelect.tsx
import React from 'react';
import {
  Autocomplete,
  TextField,
  Box,
  Typography,
  Chip,
  CircularProgress,
  Paper
} from '@mui/material';
import { debounce } from '@mui/material/utils';
import { useTranslation } from 'react-i18next';
import { searchProductPricesByNameOrBarcode } from 'src/utils/api/pagesApi/productsApi';

interface ProductPriceOption {
  productPriceId: string;
  product: {
    productID: string;
    productName: string;
  };
  unit: {
    unitName: string;
  };
  unitFactor: number;
  price: number;
  barcode: string;
  posPriceName?: string;
}

interface Props {
  value: string;
  onChange: (value: string) => void;
  label: string;
  error?: boolean;
  excludeProductId?: string;
  showPriceName?: boolean;
  hideUnitInfo?: boolean;
  placeholder?: string;
}

const ProductPriceSearchSelect: React.FC<Props> = ({
  value,
  onChange,
  label,
  error = false,
  excludeProductId,
  showPriceName = false,
  hideUnitInfo = false,
  placeholder
}) => {
  const { t } = useTranslation();
const [options, setOptions] = React.useState<ProductPriceOption[]>([]); // ✅ دايماً array فاضي
  const [loading, setLoading] = React.useState(false);
  const [inputValue, setInputValue] = React.useState('');
  const [selectedOption, setSelectedOption] = React.useState<ProductPriceOption | null>(null);
  const [open, setOpen] = React.useState(false);

  // إضافة AbortController لإلغاء الطلبات السابقة
  const abortControllerRef = React.useRef<AbortController | null>(null);

  // ⭐ دالة لتحميل النتائج الأولية (أول 10)
const loadInitialResults = React.useCallback(async () => {
  if (abortControllerRef.current) {
    abortControllerRef.current.abort();
  }

  abortControllerRef.current = new AbortController();
  setLoading(true);
  
  try {
    const response = await searchProductPricesByNameOrBarcode('', 1, 10);
    
    let filteredData: ProductPriceOption[] = [];
    // ⭐ تحديث المسار للبيانات
    const apiData = response.data;
    if (apiData && Array.isArray(apiData)) {
      filteredData = apiData
        .filter(item => item && item.product && item.productPriceId)
        .map(item => ({
          productPriceId: item.productPriceId,
          product: {
            productID: item.product.productID,
            productName: item.product.productName
          },
          unit: {
            unitName: item.unit?.unitName || 'قطعة'
          },
          unitFactor: item.unitFactor || 1,
          price: item.price || 0,
          barcode: item.barcode || '',
          posPriceName: item.posPriceName || ''
        }));
    }

    if (excludeProductId) {
      filteredData = filteredData.filter(item => 
        item.product?.productID !== excludeProductId
      );
    }

    setOptions(filteredData);
  } catch (error) {
    setOptions([]);
  } finally {
    setLoading(false);
  }
}, [excludeProductId]);

  // دالة البحث مع debounce
const debouncedSearch = React.useMemo(
  () => debounce(async (searchTerm: string) => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    abortControllerRef.current = new AbortController();

    if (!searchTerm.trim()) {
      await loadInitialResults();
      return;
    }

    setLoading(true);
    try {
      const response = await searchProductPricesByNameOrBarcode(searchTerm, 1, 50);
      
      // ⭐ تحديد نوع البيانات
      let filteredData: ProductPriceOption[] = [];
      if (response.data && Array.isArray(response.data)) {
        filteredData = response.data
          .filter(item => item && item.product && item.productPriceId)
          .map(item => ({
            productPriceId: item.productPriceId,
            product: {
              productID: item.product.productID,
              productName: item.product.productName
            },
            unit: {
              unitName: item.unit?.unitName || 'قطعة'
            },
            unitFactor: item.unitFactor || 1,
            price: item.price || 0,
            barcode: item.barcode || '',
            posPriceName: item.posPriceName || ''
          }));
      }

      if (excludeProductId) {
        filteredData = filteredData.filter(item => 
          item.product?.productID !== excludeProductId
        );
      }

      setOptions(filteredData);
    } catch (error) {
      if (typeof error === 'object' && error !== null && 'name' in error && (error as any).name !== 'AbortError') {
        setOptions([]);
      }
    } finally {
      setLoading(false);
    }
  }, 300),
  [excludeProductId, loadInitialResults]
);

  // ⭐ تحديث useEffect للبحث
  React.useEffect(() => {
    if (open) {
      if (inputValue.trim()) {
        debouncedSearch(inputValue);
      } else {
        // عرض أول 10 نتائج عند فتح القائمة بدون بحث
        loadInitialResults();
      }
    }
  }, [inputValue, debouncedSearch, open, loadInitialResults]);

  // تنظيف عند unmount
  React.useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      debouncedSearch.clear();
    };
  }, [debouncedSearch]);

  // تحديد الخيار المحدد عند تغيير القيمة
  React.useEffect(() => {
    if (value && options.length > 0) {
      const found = options.find(option => option.productPriceId === value);
      if (found && (!selectedOption || selectedOption.productPriceId !== found.productPriceId)) {
        setSelectedOption(found);
      }
    } else if (!value && selectedOption) {
      setSelectedOption(null);
    }
  }, [value, options]);

  // دالة عرض الخيار في القائمة
  const renderOption = (props: any, option: ProductPriceOption) => {
    const isSelected = selectedOption?.productPriceId === option.productPriceId;
    
    return (
      <Box 
        component="li" 
        {...props} 
        key={option.productPriceId}
        sx={{
          ...props.sx,
          backgroundColor: isSelected ? 'rgba(25, 118, 210, 0.08)' : 'transparent',
          '&:hover': {
            backgroundColor: isSelected 
              ? 'rgba(25, 118, 210, 0.12)' 
              : 'rgba(0, 0, 0, 0.04)'
          }
        }}
      >
        <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%', py: 0.5 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Typography variant="body2" sx={{ fontWeight: 500 }}>
              {showPriceName && option.posPriceName 
                ? option.posPriceName 
                : option.product?.productName || 'منتج غير محدد'
              }
            </Typography>
            {isSelected && (
              <Chip 
                label="محدد" 
                size="small" 
                color="primary" 
                sx={{ height: 20, fontSize: '0.7rem' }}
              />
            )}
          </Box>
          
          {!hideUnitInfo && (
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 0.5 }}>
              <Typography variant="caption" color="text.secondary">
                {option.unit?.unitName || 'وحدة غير محددة'} × {option.unitFactor}
              </Typography>
              <Typography variant="caption" sx={{ fontWeight: 600, color: 'primary.main' }}>
                {option.price?.toFixed(2)} جنيه
              </Typography>
            </Box>
          )}
          
          {showPriceName && option.posPriceName && (
            <Typography variant="caption" color="text.secondary">
              {option.product?.productName} - {option.price?.toFixed(2)} جنيه
            </Typography>
          )}
          
          {option.barcode && (
            <Typography variant="caption" color="text.secondary">
              {option.barcode}
            </Typography>
          )}
        </Box>
      </Box>
    );
  };

  // دالة عرض النص المحدد في الـ input
  const getOptionLabel = (option: ProductPriceOption | string) => {
    if (typeof option === 'string') return option;
    if (!option.product?.productName) return '';
    
    if (showPriceName && option.posPriceName) {
      return option.posPriceName;
    }
    
    if (hideUnitInfo) {
      return option.product.productName;
    }
    
    return `${option.product.productName} - ${option.unit?.unitName || 'وحدة'} × ${option.unitFactor} - ${option.price?.toFixed(2)} جنيه`;
  };

  return (
    <Autocomplete
      open={open}
      onOpen={() => setOpen(true)}
      onClose={() => setOpen(false)}
      value={selectedOption}
      onChange={(_, newValue) => {
        onChange(newValue?.productPriceId || '');
      }}
      inputValue={inputValue}
      onInputChange={(_, newInputValue, reason) => {
        if (reason === 'input') {
          setInputValue(newInputValue);
        }
      }}
      options={options}
      getOptionLabel={getOptionLabel}
      renderOption={renderOption}
      loading={loading}
      loadingText={t('common.loading')}
      noOptionsText={inputValue ? t('products.noProductsFound') : t('products.startTyping')}
      isOptionEqualToValue={(option, value) => option.productPriceId === value.productPriceId}
      filterOptions={(x) => x}
      PaperComponent={(props) => (
        <Paper 
          {...props} 
          sx={{ 
            '& .MuiAutocomplete-option': {
              '&[aria-selected="true"]': {
                backgroundColor: 'rgba(25, 118, 210, 0.08)',
              },
              '&.Mui-focused': {
                backgroundColor: 'rgba(0, 0, 0, 0.04)',
              },
              '&[aria-selected="true"].Mui-focused': {
                backgroundColor: 'rgba(25, 118, 210, 0.12)',
              }
            }
          }}
        />
      )}
      renderInput={(params) => (
        <TextField
          {...params}
          label={label}
          error={error}
          size="small"
          placeholder={placeholder || (selectedOption ? selectedOption.product?.productName : t('products.searchPlaceholder'))}
          InputProps={{
            ...params.InputProps,
            endAdornment: (
              <>
                {loading ? <CircularProgress color="inherit" size={20} /> : null}
                {params.InputProps.endAdornment}
              </>
            ),
          }}
          // ⭐ تحديد النص عند Focus
          onFocus={(e) => {
            if (e.target.value) {
              e.target.select();
            }
          }}
        />
      )}
      sx={{
        '& .MuiAutocomplete-input': {
          fontSize: '0.875rem'
        },
        '& .MuiOutlinedInput-root': {
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            borderColor: 'primary.main',
            borderWidth: 1,
          }
        }
      }}
    />
  );
};

export default ProductPriceSearchSelect;

===== src/Pages/products/components/ProductsRow.tsx =====
// File: src/pages/products/components/ProductsRow.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  IconButton,
  Stack,
  Divider,
  Tooltip
} from '@mui/material';
import { IconEdit, IconEye, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  product: Product;
  onEdit: () => void;
  onViewPrices: () => void;
  isSelected?: boolean;
}

const ProductRow: React.FC<Props> = ({
  product,
  onEdit,
  onViewPrices,
  isSelected = false
}) => {
  const { t } = useTranslation();

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';   // POS
      case 2: return 'secondary'; // Material
      case 3: return 'info';      // Addition
      default: return 'default';
    }
  };

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {product.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('products.code')}: {product.code}
            </Typography>
          </Box>
          
          {/* ⭐ عرض حالة المنتج */}
          <Chip
            label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
            color={product.isActive ? 'success' : 'error'}
            size="small"
            variant={product.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Product Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.group')}:
            </Typography>
            <Typography variant="body2">
              {product.group?.name || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.type')}:
            </Typography>
            <Chip
              label={getProductTypeLabel(product.productType)}
              color={getProductTypeColor(product.productType)}
              size="small"
              variant="outlined"
            />
          </Box>
          
          {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
          {product.productType === 1 && product.posScreen && (
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                {t('products.form.posScreen')}:
              </Typography>
              <Typography variant="body2">
                📱 {product.posScreen.name}
              </Typography>
            </Box>
          )}
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.prices')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2">
                {product.productPrices.length}
              </Typography>
              {product.productPrices.some(p => p.barcode) && (
                <Tooltip title={t('products.hasBarcode')}>
                  <IconBarcode size={16} color="green" />
                </Tooltip>
              )}
            </Box>
          </Box>
        </Stack>

        {/* Description */}
        {product.description && (
          <>
            <Divider sx={{ my: 1 }} />
            <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.875rem' }}>
              {product.description}
            </Typography>
          </>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('products.viewPrices')}>
            <IconButton
              size="small"
              onClick={onViewPrices}
              color="info"
            >
              <IconEye size={18} />
            </IconButton>
          </Tooltip>
          
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default ProductRow;

===== src/Pages/products/components/ProductTable.tsx =====
// File: src/pages/products/components/ProductTable.tsx
import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Chip,
  Typography,
  Box,
  Tooltip
} from '@mui/material';
import { IconEdit, IconEye, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  rows: Product[];
  onEdit: (product: Product) => void;
  onViewPrices: (product: Product) => void;
  selectedProductId?: string;
}

const ProductTable: React.FC<Props> = ({
  rows,
  onEdit,
  onViewPrices,
  selectedProductId
}) => {
  const { t } = useTranslation();

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';   // POS
      case 2: return 'secondary'; // Material
      case 3: return 'info';      // Addition
      default: return 'default';
    }
  };

  return (
    <TableContainer component={Paper} variant="outlined">
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>{t('products.code')}</TableCell>
            <TableCell>{t('products.name')}</TableCell>
            <TableCell>{t('products.group')}</TableCell>
            <TableCell>{t('products.type')}</TableCell>
            <TableCell>{t('products.prices')}</TableCell>
            {/* ⭐ إضافة عمود الحالة */}
            <TableCell>{t('products.status.title')}</TableCell>
            <TableCell>{t('products.description')}</TableCell>
            <TableCell width={120}>{t('common.actions')}</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((product) => (
            <TableRow
              key={product.id}
              selected={selectedProductId === product.id}
              sx={{
                '&:hover': {
                  backgroundColor: 'action.hover',
                },
                ...(selectedProductId === product.id && {
                  backgroundColor: 'action.selected',
                }),
              }}
            >
              <TableCell>
                <Typography variant="body2" fontWeight={500}>
                  {product.code}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Box>
                  <Typography variant="body2" fontWeight={500}>
                    {product.name}
                  </Typography>
                  {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
                  {product.productType === 1 && product.posScreen && (
                    <Typography variant="caption" color="text.secondary">
                      📱 {product.posScreen.name}
                    </Typography>
                  )}
                </Box>
              </TableCell>
              
              <TableCell>
                <Typography variant="body2">
                  {product.group?.name || t('common.notSpecified')}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Chip
                  label={getProductTypeLabel(product.productType)}
                  color={getProductTypeColor(product.productType)}
                  size="small"
                  variant="outlined"
                />
              </TableCell>
              
              <TableCell>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Typography variant="body2">
                    {product.productPrices.length}
                  </Typography>
                  {product.productPrices.some(p => p.barcode) && (
                    <Tooltip title={t('products.hasBarcode')}>
                      <IconBarcode size={16} color="green" />
                    </Tooltip>
                  )}
                </Box>
              </TableCell>
              
              {/* ⭐ عمود الحالة */}
              <TableCell>
                <Chip
                  label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
                  color={product.isActive ? 'success' : 'error'}
                  size="small"
                  variant={product.isActive ? 'filled' : 'outlined'}
                />
              </TableCell>
              
              <TableCell>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{
                    maxWidth: 200,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap'
                  }}
                >
                  {product.description || '-'}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Box sx={{ display: 'flex', gap: 0.5 }}>
                  <Tooltip title={t('common.edit')}>
                    <IconButton
                      size="small"
                      onClick={() => onEdit(product)}
                      color="primary"
                    >
                      <IconEdit size={18} />
                    </IconButton>
                  </Tooltip>
                  
                  <Tooltip title={t('products.viewPrices')}>
                    <IconButton
                      size="small"
                      onClick={() => onViewPrices(product)}
                      color="info"
                    >
                      <IconEye size={18} />
                    </IconButton>
                  </Tooltip>
                </Box>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default ProductTable;

===== src/Pages/products/ProductsPage.tsx =====
// File: src/pages/products/ProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import ProductTable from './components/ProductTable';
import ProductRow from './components/ProductsRow';
import ProductForm from './components/ProductForm';
import ProductPricesDrawer from './components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from './components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const ProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch products with pagination ───── */
const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
  try {
    setLoad(true);
    // ⭐ هنا التغيير الوحيد - نجيب Materials بس
    const data = await apiSrv.getByType(2, page, pageSize); // ProductType.Material = 2
    setProductsData(data);
    setCurrentPage(page);
  } catch (e: any) {  } finally {
    setLoad(false);
  }
};

  /* ───── search products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        setProductsData(data);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {    } finally {
      setSearching(false);
    }
  };

  /* ───── clear search ───── */
  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  /* ───── initial load ───── */
  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll()
        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        await fetchProducts(1);
      }
      catch (e: any) {      }
    })();
  }, []);

  /* ───── handle page change ───── */
  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        setProductsData(data);
        setCurrentPage(page);
      } catch (e: any) {      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  /* ───── search handlers ───── */
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      // تحديد نوع البحث بناءً على المحتوى
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  /* ───── mobile filter data ───── */
  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    // تطبيق فلاتر الموبايل على البيانات المحملة
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.productType) {
      result = result.filter(product => product.productType.toString() === mobileFilters.productType);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  // اختيار البيانات المعروضة حسب نوع الجهاز
  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.productType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      // إعادة تحميل الصفحة الحالية
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedProduct = await apiSrv.update(data);
      
      // تحديث المنتج في القائمة الحالية
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      // تحديث المنتج في الـ drawer إذا كان مفتوح
      if (selectedProduct && selectedProduct.id === data.ProductId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={displayedData} loading={loading} title={t('products.title')}/>
      
      {/* شريط البحث المحسن - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('products.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('products.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {/* مؤشرات البحث */}
          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('products.searchByBarcode')}: ${searchQuery}`
                    : `${t('products.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('products.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('products.add')}
          </Button>
        )}
        </Box>
      )}

      {/* جدول المنتجات */}
      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('products.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('products.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('products.noSearchResults') : t('products.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {/* Pagination - يظهر فقط في الديسكتوب */}
            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      {/* Form Dialog */}
<ProductForm
  open={dialog.open}
  mode={dialog.mode}
  initialValues={dialog.current}
  groups={groups}
  units={units}
  productType={2} // ⭐ Material
  onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
  onSubmit={handleSubmit}
/>

      {/* Prices Drawer */}
      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default ProductsPage;

===== src/Pages/purchase-orders/AddPurchaseOrderPage.tsx =====
// File: src/pages/purchases/purchase-orders/AddPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { useMediaQuery, useTheme, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import MobilePurchaseOrderForm from './components/mobile/MobilePurchaseOrderForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const AddPurchaseOrderPage: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [suppliersData, warehousesData] = await Promise.all([
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSubmit = async (data: any) => {
    try {
      await apiSrv.add(data);
    } catch (e: any) {
      throw e;
    }
  };

  if (loading) {
    return (
      <Box textAlign="center" py={4}>
        <CircularProgress />
        <Typography sx={{ mt: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseOrderForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseOrderForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}</>
  );
};

export default AddPurchaseOrderPage;

===== src/Pages/purchase-orders/components/ActionsBar.tsx =====
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

type Props = {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
  searchPlaceholder?: string;
  addButtonText?: string;
};

const ActionsBar: React.FC<Props> = ({ 
  query, 
  onQueryChange, 
  onAdd, 
  searchPlaceholder,
  addButtonText 
}) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={searchPlaceholder || t('purchaseOrders.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 300 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {addButtonText || t('purchaseOrders.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;

===== src/Pages/purchase-orders/components/BarcodeScanner.tsx =====
import React, { useState, useRef, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  IconButton,
  Alert,
  CircularProgress
} from '@mui/material';
import { IconX, IconCamera, IconCameraOff, IconRefresh } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onScan: (barcode: string) => void;
}

const BarcodeScanner: React.FC<Props> = ({ open, onClose, onScan }) => {
  const { t } = useTranslation();
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState('');
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // تنظيف الكاميرا عند الإغلاق
  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  // إيقاف الكاميرا عند إغلاق المودال
  useEffect(() => {
    if (!open) {
      stopCamera();
      setError('');
      setHasPermission(null);
      setIsLoading(false);
    }
  }, [open]);

  const checkCameraPermission = async () => {
    try {
      // التحقق من دعم المتصفح للكاميرا
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('المتصفح لا يدعم الوصول للكاميرا');
      }

      // التحقق من الصلاحيات
      try {
        const permission = await navigator.permissions.query({ name: 'camera' as PermissionName });
        
        if (permission.state === 'denied') {
          throw new Error('تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا من إعدادات المتصفح');
        }
      } catch (permError) {
        // بعض المتصفحات لا تدعم permissions API
        console.log('Permissions API not supported, continuing...');
      }

      setHasPermission(true);
      return true;
    } catch (err: any) {
      console.error('Permission check error:', err);
      setError(err.message || 'خطأ في التحقق من صلاحيات الكاميرا');
      setHasPermission(false);
      return false;
    }
  };

  const startCamera = async () => {
    try {
      setError('');
      setIsLoading(true);
      
      // التحقق من الصلاحيات أولاً
      const hasAccess = await checkCameraPermission();
      if (!hasAccess) {
        setIsLoading(false);
        return;
      }

      console.log('Starting camera...');

      // محاولة الحصول على الكاميرا الخلفية أولاً
      let constraints = {
        video: { 
          facingMode: 'environment', // الكاميرا الخلفية
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };

      let stream: MediaStream;
      
      try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);
      } catch (err) {
        console.log('Back camera failed, trying front camera:', err);
        // إذا فشلت الكاميرا الخلفية، جرب الأمامية
        constraints = {
          video: { 
            facingMode: 'user', // الكاميرا الأمامية
            width: { ideal: 1280 },
            height: { ideal: 720 }
          }
        };
        
        try {
          stream = await navigator.mediaDevices.getUserMedia(constraints);
        } catch (frontErr) {
          console.log('Front camera failed, trying any camera:', frontErr);
          // إذا فشلت الكاميرا الأمامية، جرب أي كاميرا متاحة
          stream = await navigator.mediaDevices.getUserMedia({ video: true });
        }
      }
      
      console.log('Camera stream obtained:', stream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        
        // انتظار تحميل الفيديو
        videoRef.current.onloadedmetadata = () => {
          console.log('Video metadata loaded');
          if (videoRef.current) {
            videoRef.current.play()
              .then(() => {
                console.log('Video playing successfully');
                setIsScanning(true);
                setIsLoading(false);
                startBarcodeDetection();
              })
              .catch((playError) => {
                console.error('Video play error:', playError);
                setError('خطأ في تشغيل الفيديو');
                setIsLoading(false);
              });
          }
        };

        // معالجة أخطاء الفيديو
        videoRef.current.onerror = (videoError) => {
          console.error('Video error:', videoError);
          setError('خطأ في عرض الفيديو');
          setIsLoading(false);
        };
      }
    } catch (err: any) {
      console.error('Camera error:', err);
      let errorMessage = 'خطأ في الوصول للكاميرا';
      
      if (err.name === 'NotAllowedError') {
        errorMessage = 'تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا وإعادة المحاولة';
      } else if (err.name === 'NotFoundError') {
        errorMessage = 'لم يتم العثور على كاميرا متاحة';
      } else if (err.name === 'NotReadableError') {
        errorMessage = 'الكاميرا مستخدمة من تطبيق آخر';
      } else if (err.name === 'OverconstrainedError') {
        errorMessage = 'إعدادات الكاميرا غير مدعومة';
      } else if (err.name === 'AbortError') {
        errorMessage = 'تم إلغاء الوصول للكاميرا';
      } else if (err.name === 'SecurityError') {
        errorMessage = 'خطأ أمني في الوصول للكاميرا';
      }
      
      setError(errorMessage);
      setHasPermission(false);
      setIsLoading(false);
    }
  };

  const stopCamera = () => {
    console.log('Stopping camera...');
    
    // إيقاف البحث عن الباركود
    if (scanIntervalRef.current) {
      clearInterval(scanIntervalRef.current);
      scanIntervalRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        console.log('Stopping track:', track.kind);
        track.stop();
      });
      streamRef.current = null;
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    
    setIsScanning(false);
  };

  // محاكاة البحث عن الباركود (يمكن استبدالها بمكتبة حقيقية)
  const startBarcodeDetection = () => {
    // هذا مثال بسيط - في التطبيق الحقيقي يجب استخدام مكتبة مثل QuaggaJS أو ZXing
    scanIntervalRef.current = setInterval(() => {
      // محاكاة اكتشاف الباركود
      if (Math.random() > 0.98) { // احتمال 2% لاكتشاف باركود وهمي
        const mockBarcode = generateMockBarcode();
        handleBarcodeDetected(mockBarcode);
      }
    }, 100);
  };

  const generateMockBarcode = () => {
    // توليد باركود وهمي للاختبار
    const barcodes = [
      '1234567890123',
      '9876543210987',
      '5555666677778',
      '1111222233334',
      '9999888877776'
    ];
    return barcodes[Math.floor(Math.random() * barcodes.length)];
  };

  const handleBarcodeDetected = (barcode: string) => {
    console.log('Barcode detected:', barcode);
    onScan(barcode);
    handleClose();
  };

  const handleClose = () => {
    stopCamera();
    onClose();
  };

  const simulateScan = () => {
    const mockBarcode = '1234567890123';
    handleBarcodeDetected(mockBarcode);
  };

  const retryCamera = () => {
    setError('');
    setHasPermission(null);
    startCamera();
  };

  // قائمة الكاميرات المتاحة (للتشخيص)
  const listCameras = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const cameras = devices.filter(device => device.kind === 'videoinput');
      console.log('Available cameras:', cameras);
      return cameras;
    } catch (err) {
      console.error('Error listing cameras:', err);
      return [];
    }
  };

  // تشخيص المشكلة
  const diagnoseCamera = async () => {
    console.log('=== Camera Diagnosis ===');
    console.log('Navigator.mediaDevices:', !!navigator.mediaDevices);
    console.log('getUserMedia support:', !!navigator.mediaDevices?.getUserMedia);
    console.log('Is HTTPS:', window.location.protocol === 'https:');
    console.log('User agent:', navigator.userAgent);
    
    const cameras = await listCameras();
    console.log('Number of cameras found:', cameras.length);
    
    if (cameras.length === 0) {
      setError('لم يتم العثور على أي كاميرا متاحة');
    }
  };

  // تشغيل التشخيص عند فتح المودال
  useEffect(() => {
    if (open) {
      diagnoseCamera();
    }
  }, [open]);

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('barcode.scanTitle') || 'مسح الباركود'}
          <IconButton onClick={handleClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box textAlign="center">
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
              <Box mt={1}>
                <Typography variant="caption" display="block">
                  تأكد من:
                </Typography>
                <Typography variant="caption" component="ul" sx={{ textAlign: 'left', mt: 1 }}>
                  <li>السماح بالوصول للكاميرا في المتصفح</li>
                  <li>عدم استخدام الكاميرا من تطبيق آخر</li>
                  <li>وجود كاميرا متصلة بالجهاز</li>
                  <li>استخدام HTTPS (مطلوب للكاميرا)</li>
                </Typography>
              </Box>
            </Alert>
          )}

          {isLoading && (
            <Box py={2}>
              <CircularProgress />
              <Typography variant="body2" sx={{ mt: 1 }}>
                جاري تشغيل الكاميرا...
              </Typography>
            </Box>
          )}

          {!isScanning && !isLoading ? (
            <Box py={4}>
              <IconCamera size={64} color="gray" />
              <Typography variant="h6" sx={{ mt: 2, mb: 3 }}>
                {hasPermission === false 
                  ? 'يرجى السماح بالوصول للكاميرا' 
                  : (t('barcode.clickToStart') || 'انقر لبدء المسح')
                }
              </Typography>
              <Button
                variant="contained"
                onClick={startCamera}
                startIcon={<IconCamera size={20} />}
                disabled={hasPermission === false}
                sx={{ mb: 2 }}
              >
                {t('barcode.startCamera') || 'تشغيل الكاميرا'}
              </Button>
              
              {error && (
                <Box mt={2}>
                  <Button
                    variant="outlined"
                    onClick={retryCamera}
                    startIcon={<IconRefresh size={20} />}
                    size="small"
                    sx={{ mr: 1 }}
                  >
                    إعادة المحاولة
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={() => window.location.reload()}
                    size="small"
                  >
                    إعادة تحميل الصفحة
                  </Button>
                </Box>
              )}
            </Box>
          ) : isScanning ? (
            <Box>
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                style={{
                  width: '100%',
                  maxHeight: '300px',
                  border: '2px solid #ddd',
                  borderRadius: '8px',
                  backgroundColor: '#000'
                }}
              />
              <Typography variant="body2" sx={{ mt: 2, mb: 2 }}>
                {t('barcode.pointCamera') || 'وجه الكاميرا نحو الباركود'}
              </Typography>
              
              <Box display="flex" justifyContent="center" gap={1}>
                <Button
                  variant="outlined"
                  onClick={stopCamera}
                  startIcon={<IconCameraOff size={20} />}
                  size="small"
                >
                  إيقاف الكاميرا
                </Button>
                <Button
                  variant="outlined"
                  onClick={simulateScan}
                  size="small"
                >
                  محاكاة المسح (للاختبار)
                </Button>
              </Box>
            </Box>
          ) : null}

          {!isScanning && !isLoading && (
            <Button
              variant="outlined"
              onClick={simulateScan}
              sx={{ mt: 2 }}
            >
              {t('barcode.simulateScan') || 'محاكاة المسح'} (للاختبار)
            </Button>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose}>
          {t('common.cancel') || 'إلغاء'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BarcodeScanner;

===== src/Pages/purchase-orders/components/mobile/MobileProductSearch.tsx =====
// File: src/pages/purchases/purchase-orders/components/mobile/MobileProductSearch.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  Box,
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip,
  IconButton,
  CircularProgress
} from '@mui/material';
import { IconSearch, IconX, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (productPrice: ProductPrice) => void;
}

const MobileProductSearch: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<ProductPrice[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  useEffect(() => {
    if (!open) {
      setSearchQuery('');
      setSearchResults([]);
      setHasSearched(false);
    }
  }, [open]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) return;

    try {
      setLoading(true);
      setHasSearched(true);
      const result = await productsApi.searchProductPrices(searchQuery, 1, 50);
      setSearchResults(result.data);
    } catch (error) {
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSelect = (item: ProductPrice) => {
    onSelect(item);
    onClose();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <Dialog open={open} onClose={onClose} fullScreen>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('products.selectProduct')}
          <IconButton onClick={onClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        {/* شريط البحث */}
        <Box sx={{ mb: 2 }}>
          <TextField
            fullWidth
            placeholder={t('products.searchPlaceholder')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={handleKeyPress}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton size="small">
                    <IconBarcode size={20} />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            sx={{ mb: 1 }}
          />
          
          <Button
            variant="contained"
            fullWidth
            onClick={handleSearch}
            disabled={!searchQuery.trim() || loading}
            size="large"
          >
            {loading ? <CircularProgress size={20} /> : t('common.search')}
          </Button>
        </Box>

        {/* النتائج */}
        <Box>
          {loading ? (
            <Box textAlign="center" py={4}>
              <CircularProgress />
              <Typography sx={{ mt: 2 }}>{t('common.searching')}</Typography>
            </Box>
          ) : hasSearched && searchResults.length === 0 ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">
                {t('products.noSearchResults')}
              </Typography>
            </Box>
          ) : !hasSearched ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">
                {t('products.enterSearchTerm')}
              </Typography>
            </Box>
          ) : (
            <List>
              {searchResults.map((price) => (
                <ListItem key={price.id} disablePadding>
                  <ListItemButton
                    onClick={() => handleSelect(price)}
                    sx={{
                      border: 1,
                      borderColor: 'divider',
                      borderRadius: 1,
                      mb: 1,
                      p: 2
                    }}
                  >
                    <ListItemText
                      primary={
                        <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
                          {price.productName}
                        </Typography>
                      }
                      secondary={
                        <Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            {t('products.unit')}: {price.unitName}
                          </Typography>
                          
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                            <Chip
                              label={`${t('products.price')}: ${price.price.toFixed(2)}`}
                              color="primary"
                              size="small"
                            />
                            <Chip
                              label={`${t('products.unitFactor')}: ${price.unitFactor}`}
                              variant="outlined"
                              size="small"
                            />
                            {price.barcode && (
                              <Chip
                                label={`${t('products.barcode')}: ${price.barcode}`}
                                variant="outlined"
                                size="small"
                              />
                            )}
                          </Box>
                          
                          <Chip
                            label={price.isActive ? t('products.active') : t('products.inactive')}
                            color={price.isActive ? 'success' : 'default'}
                            size="small"
                          />
                        </Box>
                      }
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} fullWidth>
          {t('common.cancel')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default MobileProductSearch;

===== src/Pages/purchase-orders/components/mobile/MobilePurchaseOrderForm.tsx =====
// File: src/pages/purchases/purchase-orders/components/mobile/MobilePurchaseOrderForm.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Card,
  CardContent,
  IconButton,
  Divider,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Fab
} from '@mui/material';
import {
  IconPlus,
  IconTrash,
  IconArrowLeft,
} from '@tabler/icons-react';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import MobileProductSearch from './MobileProductSearch';
import MobileSearchableSelect from './MobileSearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

type FormValues = {
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseOrderDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: PurchaseOrder;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const MobilePurchaseOrderForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [expandedSection, setExpandedSection] = useState<string>('basic');

  const defaults: FormValues = {
    referenceDocNumber: `PO-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 0,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // حساب الإجماليات
  const recalculateAll = () => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)));
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)));
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)));
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)));

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)));
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)));
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)));
    setValue('total', parseFloat(total.toFixed(2)));
  };

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);
    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent]);

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      const convertedDetails = initialValues.details.map((d) => ({
        purchaseOrderDetailID: d.id || '',
        productId: d.productID,
        productPriceId: d.productPriceID || '',
        productName: d.unitName || 'منتج غير محدد',
        unitId: d.unitId,
        unitName: d.unitName,
        unitFactor: d.unitFactor,
        quantity: d.quantity,
        price: d.price,
        discountPercent: d.discountPercent,
        discountValue: d.discountValue,
        taxPercent: d.taxPercent,
        taxValue: d.taxValue,
        subTotal: d.subTotal,
        total: d.total
      }));

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset]);

  const addProductToForm = (productPrice: ProductPrice) => {
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 0,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    append(newItem);
    setProductSearchOpen(false);
    setExpandedSection('items');
  };

  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  const submit = async (data: FormValues) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setAlertMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setAlertSeverity('error');
      return;
    }

    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchaseOrders.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchaseOrders.price')} ${t('common.inLine')} ${i + 1}`)) return;
    }

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d) => {
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseOrderDetailID && d.purchaseOrderDetailID.trim() !== '') {
            detailData.id = d.purchaseOrderDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);

      if (data.status === 1 && mode === 'add') {
        reset(defaults);
        setExpandedSection('basic');
      } else {
        navigate('/purchases/purchase-orders');
      }
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  return (
    <Container maxWidth="sm" sx={{ py: 1, px: 1 }}>
      {/* Header مع الإجمالي */}
      <Card sx={{ mb: 2, position: 'sticky', top: 0, zIndex: 100 }}>
        <CardContent sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">
              {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
            </Typography>
            <IconButton onClick={() => navigate('/purchases/purchase-orders')} size="small">
              <IconArrowLeft />
            </IconButton>
          </Box>
          
          <Typography variant="h4" color="primary" sx={{ textAlign: 'center', fontWeight: 'bold' }}>
            {t('purchaseOrders.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
          
          <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
            {watchedStatus !== 3 && (
              <>
                <Button
                  variant="contained"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 1;
                    submit(data);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchaseOrders.savePending')}
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 3;
                    submit(data);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchaseOrders.submit')}
                </Button>
              </>
            )}
          </Stack>
        </CardContent>
      </Card>

      {/* المعلومات الأساسية */}
      <Accordion 
        expanded={expandedSection === 'basic'} 
        onChange={handleAccordionChange('basic')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">{t('purchaseOrders.basicInfo')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="referenceDocNumber"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.docNumber')}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="date1"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.date')}
                  type="date"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputLabelProps={{ shrink: true }}
                />
              )}
            />

            <Controller
              name="supplierId"
              control={control}
              rules={{ required: t('validation.supplierRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchaseOrders.supplier')}
                  value={field.value}
                  onChange={field.onChange}
                  options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                  placeholder={t('purchaseOrders.selectSupplier')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="warehouseId"
              control={control}
              rules={{ required: t('validation.warehouseRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchaseOrders.warehouse')}
                  value={field.value}
                  onChange={field.onChange}
                  options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                  placeholder={t('purchaseOrders.selectWarehouse')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الخصومات والضرائب */}
      <Accordion 
        expanded={expandedSection === 'discounts'} 
        onChange={handleAccordionChange('discounts')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">{t('purchaseOrders.discountsAndTaxes')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="discountPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchaseOrders.totalDiscount')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />

            <Controller
              name="taxPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchaseOrders.totalTax')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأصناف */}
      <Accordion 
        expanded={expandedSection === 'items'} 
        onChange={handleAccordionChange('items')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">
            {t('purchaseOrders.items')} ({fields.length})
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            {fields.length === 0 ? (
              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                {t('purchaseOrders.noItems')}
              </Typography>
            ) : (
              fields.map((field, index) => (
                <Card key={field.id} variant="outlined">
                  <CardContent sx={{ p: 2 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="subtitle2">
                        #{index + 1} - {watch(`details.${index}.productName`)}
                      </Typography>
                      {watchedStatus !== 3 && (
                        <IconButton onClick={() => remove(index)} size="small" color="error">
                          <IconTrash size={16} />
                        </IconButton>
                      )}
                    </Box>

                    <Grid container spacing={1}>
                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.quantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchaseOrders.quantity')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.price`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchaseOrders.price')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.discountPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchaseOrders.discount')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.taxPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchaseOrders.tax')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>
                    </Grid>

                    <Divider sx={{ my: 1 }} />
                    
                    <Typography variant="body2" sx={{ textAlign: 'right', fontWeight: 'bold' }}>
                      {t('purchaseOrders.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                    </Typography>
                  </CardContent>
                </Card>
              ))
            )}
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* زر إضافة منتج عائم */}
{watchedStatus !== 3 && (
  <Fab
    color="primary"
    onClick={() => setProductSearchOpen(true)}
    sx={{
      position: 'fixed',
      bottom: 16,
      left: 16, // تغيير من right إلى left
      zIndex: 1000
    }}
  >
    <IconPlus />
  </Fab>
)}

      {/* البحث عن المنتجات */}
      <MobileProductSearch
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={addProductToForm}
      />

      {/* التنبيهات */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default MobilePurchaseOrderForm;

===== src/Pages/purchase-orders/components/mobile/MobilePurchaseOrdersFilter.tsx =====
// File: src/pages/purchases/purchase-orders/components/mobile/MobilePurchaseOrdersFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PurchaseOrderFilterState {
  searchQuery: string;
  status: string;
  supplierId: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PurchaseOrderFilterState;
  onFiltersChange: (filters: PurchaseOrderFilterState) => void;
  suppliers: Array<{ id: string; name: string }>;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobilePurchaseOrdersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  suppliers,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PurchaseOrderFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('purchaseOrders.status.pending') },
    { value: '2', label: t('purchaseOrders.status.draft') },
    { value: '3', label: t('purchaseOrders.status.submitted') }
  ];

  const sortOptions = [
    { value: 'date1', label: t('purchaseOrders.table.date') },
    { value: 'referenceDocNumber', label: t('purchaseOrders.table.docNumber') },
    { value: 'total', label: t('purchaseOrders.table.total') },
    { value: 'status', label: t('purchaseOrders.table.status') }
  ];

  const handleLocalChange = (field: keyof PurchaseOrderFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PurchaseOrderFilterState = {
      searchQuery: '',
      status: '',
      supplierId: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'date1',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.supplierId) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('purchaseOrders.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('purchaseOrders.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('purchaseOrders.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('purchaseOrders.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('purchaseOrders.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('purchaseOrders.filter.filters')}</Typography>
            {(localFilters.status || localFilters.supplierId || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.supplierId, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('purchaseOrders.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.supplier')}</InputLabel>
              <Select
                value={localFilters.supplierId}
                label={t('purchaseOrders.table.supplier')}
                onChange={(e) => handleLocalChange('supplierId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {suppliers.map(supplier => (
                  <MenuItem key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('purchaseOrders.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('purchaseOrders.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('purchaseOrders.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('purchaseOrders.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('purchaseOrders.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('purchaseOrders.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('purchaseOrders.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('purchaseOrders.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('purchaseOrders.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('purchaseOrders.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('purchaseOrders.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePurchaseOrdersFilter;

===== src/Pages/purchase-orders/components/mobile/MobileSearchableSelect.tsx =====
// File: src/pages/purchases/purchase-orders/components/mobile/MobileSearchableSelect.tsx
import React, { useState } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Box,
  Typography,
  IconButton
} from '@mui/material';
import { IconX, IconSearch } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Option {
  id: string;
  name: string;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
}

const MobileSearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled
}) => {
  const { t } = useTranslation();
  const [open, setOpen] = useState(false);
  const [searchText, setSearchText] = useState('');

  const filteredOptions = options.filter(option =>
    option.name.toLowerCase().includes(searchText.toLowerCase())
  );

  const selectedOption = options.find(opt => opt.id === value);

  const handleSelect = (optionId: string) => {
    onChange(optionId);
    setOpen(false);
    setSearchText('');
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
  };

  return (
    <>
      <FormControl fullWidth error={error} disabled={disabled}>
        <InputLabel>{label}</InputLabel>
        <Select
          value={value}
          label={label}
          onClick={() => setOpen(true)}
          readOnly
        >
          <MenuItem value={value}>
            {selectedOption ? selectedOption.name : placeholder}
          </MenuItem>
        </Select>
      </FormControl>

      <Dialog open={open} onClose={handleClose} fullScreen>
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            {label}
            <IconButton onClick={handleClose}>
              <IconX size={20} />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          <TextField
            fullWidth
            placeholder={t('common.search')}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            InputProps={{
              startAdornment: <IconSearch size={20} style={{ marginRight: 8 }} />
            }}
            sx={{ mb: 2 }}
          />

          <List>
            {filteredOptions.length === 0 ? (
              <ListItem>
                <ListItemText
                  primary={
                    <Typography color="text.secondary" textAlign="center">
                      {t('common.noResults')}
                    </Typography>
                  }
                />
              </ListItem>
            ) : (
              filteredOptions.map((option) => (
                <ListItem key={option.id} disablePadding>
                  <ListItemButton
                    onClick={() => handleSelect(option.id)}
                    selected={option.id === value}
                    sx={{
                      border: 1,
                      borderColor: option.id === value ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      mb: 1,
                      backgroundColor: option.id === value ? 'action.selected' : 'transparent'
                    }}
                  >
                    <ListItemText
                      primary={option.name}
                      primaryTypographyProps={{
                        fontWeight: option.id === value ? 'bold' : 'normal'
                      }}
                    />
                  </ListItemButton>
                </ListItem>
              ))
            )}
          </List>
        </DialogContent>

        <DialogActions>
          <Button onClick={handleClose} fullWidth>
            {t('common.cancel')}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default MobileSearchableSelect;

===== src/Pages/purchase-orders/components/PageHeader.tsx =====
// File: src/pages/purchases/purchase-orders/components/PageHeader.tsx
import React from 'react';
import PageHeader from '../../components/PageHeader';

interface Props {
  exportData?: any[];
  loading?: boolean;
}

const PurchaseOrdersPageHeader: React.FC<Props> = ({ exportData = [], loading = false }) => {
  const exportColumns = [
    { field: 'referenceDocNumber', headerName: 'رقم المستند', type: 'string' as const },
    { field: 'code', headerName: 'الكود', type: 'number' as const },
    { field: 'supplier.name', headerName: 'المورد', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'warehouse.name', headerName: 'المخزن', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'date1', headerName: 'التاريخ', type: 'date' as const },
    { field: 'total', headerName: 'الإجمالي', type: 'number' as const },
    { field: 'status', headerName: 'الحالة', type: 'string' as const, format: (value: number) => value === 1 ? 'معلق' : value === 3 ? 'مرسل' : 'غير محدد' },
  ];

  return (
    <PageHeader
      titleKey="purchaseOrders.title"
      subtitleKey="purchaseOrders.subtitle"
      exportData={exportData}
      exportColumns={exportColumns}
      exportFileName="purchase-orders"
      exportLoading={loading}
    />
  );
};

export default PurchaseOrdersPageHeader;

===== src/Pages/purchase-orders/components/ProductPriceSearchDialog.tsx =====
import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  Typography,
  CircularProgress,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconArrowUp, IconArrowDown } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import BarcodeScanner from './BarcodeScanner';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (productPrice: ProductPrice) => void;
}

// Debounce hook to avoid querying on every keystroke
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
};

const ProductPriceSearchDialog: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const searchInputRef = useRef<HTMLInputElement>(null);
  const listRef = useRef<HTMLDivElement>(null);

  const [searchQuery, setSearchQuery] = useState('');
  const debouncedSearchQuery = useDebounce(searchQuery, 400);

  const [allPrices, setAllPrices] = useState<ProductPrice[]>([]);
  const [displayItems, setDisplayItems] = useState<ProductPrice[]>([]);
  const [loading, setLoading] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [isSearchMode, setIsSearchMode] = useState(false);

  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Focus on the search field when dialog opens
  useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        searchInputRef.current?.focus();
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [open]);

  // Reset state when dialog closes
  useEffect(() => {
    if (!open) {
      setSearchQuery('');
      setAllPrices([]);
      setDisplayItems([]);
      setCurrentPage(1);
      setHasMore(true);
      setIsSearchMode(false);
      setSelectedIndex(0);
    }
  }, [open]);

  // Initial load of products
  useEffect(() => {
    if (open && !isSearchMode && allPrices.length === 0) {
      loadInitialProducts();
    }
  }, [open, isSearchMode, allPrices.length]);

  // Debounced search logic
  useEffect(() => {
    if (debouncedSearchQuery.trim()) {
      handleDebouncedSearch(debouncedSearchQuery);
    } else {
      setIsSearchMode(false);
      setDisplayItems(allPrices);
      setSelectedIndex(0);
    }
  }, [debouncedSearchQuery, allPrices]);

  const loadInitialProducts = async () => {
    try {
      setLoading(true);
      const result = await productsApi.searchProductPrices('', 1, 20);
      setAllPrices(result.data);
      setDisplayItems(result.data);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(1);
      setSelectedIndex(0);
    } catch (err) {
      } finally {
      setLoading(false);
    }
  };

  const loadMoreProducts = useCallback(async () => {
    if (loadingMore || !hasMore || isSearchMode) return;
    try {
      setLoadingMore(true);
      const result = await productsApi.searchProductPrices('', currentPage + 1, 20);
      setAllPrices(prev => [...prev, ...result.data]);
      setDisplayItems(prev => [...prev, ...result.data]);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(result.pageNumber);
    } catch (err) {
      } finally {
      setLoadingMore(false);
    }
  }, [currentPage, hasMore, isSearchMode, loadingMore]);

  const handleDebouncedSearch = async (q: string) => {
    try {
      setLoading(true);
      setIsSearchMode(true);
      const result = await productsApi.searchProductPrices(q, 1, 50);
      setDisplayItems(result.data);
      setSelectedIndex(0);
    } catch (err) {
      setDisplayItems([]);
    } finally {
      setLoading(false);
    }
  };

  // دالة محسنة للـ scroll - الحل الأساسي للمشكلة
  const scrollToItem = useCallback((index: number) => {
    if (!listRef.current) return;
    
    const listElement = listRef.current;
    const itemElement = listElement.children[0]?.children[index] as HTMLElement; // الوصول للعنصر الصحيح داخل الـ List
    
    if (itemElement) {
      // استخدام scrollIntoView مع خيارات محددة
      itemElement.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest', // هذا هو المهم - يمنع القفز للأعلى أو الأسفل
        inline: 'nearest'
      });
    }
  }, []);

  // Arrow key handling on the search input, without ever losing focus
  const handleSearchKeyDown = (e: React.KeyboardEvent) => {
    if (displayItems.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.min(prev + 1, displayItems.length - 1);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.max(prev - 1, 0);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (displayItems[selectedIndex]) {
          handleSelect(displayItems[selectedIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setSelectedIndex(0);
  };

  // Ensure selectedIndex is reset if items change
  useEffect(() => {
    if (displayItems.length > 0 && selectedIndex >= displayItems.length) {
      setSelectedIndex(0);
    }
  }, [displayItems.length, selectedIndex]);

  // useEffect لمراقبة تغيير selectedIndex
  useEffect(() => {
    if (selectedIndex >= 0 && displayItems.length > 0) {
      scrollToItem(selectedIndex);
    }
  }, [selectedIndex, scrollToItem, displayItems.length]);

  const handleSelect = (item: ProductPrice) => {
    if (!item.productId) {
      return;
    }
    onSelect(item);
    onClose();
  };

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    if (scrollHeight - scrollTop - clientHeight < 100) {
      loadMoreProducts();
    }
  };

  const handleScanResult = (barcode: string) => {
    setSearchQuery(barcode);
    setScannerOpen(false);
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            {t('products.selectPriceTitle')}
            <IconButton onClick={onClose}>
              <IconX size={20} />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ height: '70vh', display: 'flex', flexDirection: 'column' }}>
          {/* Search field */}
          <Box mb={1}>
            <TextField
              inputRef={searchInputRef}
              fullWidth
              placeholder={t('products.searchPricesPlaceholder')}
              value={searchQuery}
              onChange={handleInputChange}
              onKeyDown={handleSearchKeyDown}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <Button
                      size="small"
                      variant="outlined"
                      onClick={() => setScannerOpen(true)}
                      startIcon={<IconBarcode size={16} />}
                    >
                      {t('barcode.scan')}
                    </Button>
                  </InputAdornment>
                )
              }}
              autoFocus
            />
          </Box>

          {/* Results info */}
          <Box mb={1}>
            <Typography variant="body2" color="text.secondary">
              {t('products.searchResults')}: {displayItems.length}
              {displayItems.length > 0 && (
                <Typography component="span" sx={{ ml: 2, color: 'primary.main' }}>
                  ({selectedIndex + 1} / {displayItems.length} {t('products.selected')})
                </Typography>
              )}
              {loading && (
                <Typography component="span" sx={{ ml: 2, color: 'info.main' }}>
                  - {t('common.searching')}...
                </Typography>
              )}
            </Typography>
          </Box>

          {/* Results list */}
          <Box
            ref={listRef}
            sx={{
              flex: 1,
              overflow: 'auto',
              border: 1,
              borderColor: 'divider',
              borderRadius: 1,
              // إضافة scroll behavior محسن
              scrollBehavior: 'smooth'
            }}
            onScroll={handleScroll}
          >
            {loading && displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <CircularProgress />
                <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
              </Box>
            ) : displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <Typography color="text.secondary">
                  {searchQuery
                    ? t('products.noSearchResults')
                    : t('products.startTypingPrices')}
                </Typography>
              </Box>
            ) : (
              <>
                <List dense sx={{ p: 0 }}>
                  {displayItems.map((price, index) => (
                    <ListItem key={`${price.id}-${index}`} disablePadding>
                      <ListItemButton
                        onClick={() => handleSelect(price)}
                        selected={index === selectedIndex}
                        onMouseEnter={() => setSelectedIndex(index)} // تحديث الاختيار عند hover
                        sx={{
                          border: index === selectedIndex ? 2 : 1,
                          borderColor:
                            index === selectedIndex ? 'primary.main' : 'divider',
                          borderRadius: 1,
                          mb: 0.5,
                          mx: 1,
                          backgroundColor:
                            index === selectedIndex
                              ? 'action.selected'
                              : 'transparent',
                          '&:hover': {
                            backgroundColor: 'action.hover',
                            borderColor: 'primary.main'
                          },
                          py: 0.5,
                          // إضافة ارتفاع ثابت للعناصر لتحسين الـ scroll
                          minHeight: 80
                        }}
                      >
                        <ListItemText
                          primary={
                            <Box>
                              <Typography
                                variant="subtitle2"
                                color="primary"
                                sx={{ mb: 0.5, fontSize: '0.9rem' }}
                              >
                                {price.productName} – {price.unitName}
                              </Typography>
                              <Box display="flex" gap={2} flexWrap="wrap" alignItems="center">
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.barcode')}: {price.barcode || '-'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.unitFactor')}: {price.unitFactor}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.cost')}:{' '}
                                  {price.cost?.toFixed(2) || '0.00'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  color="success.main"
                                  sx={{ fontSize: '0.75rem', fontWeight: 'bold' }}
                                >
                                  {t('products.salePrice')}: {price.price.toFixed(2)}
                                </Typography>
                                <Chip
                                  label={
                                    price.isActive
                                      ? t('products.active')
                                      : t('products.inactive')
                                  }
                                  color={price.isActive ? 'success' : 'default'}
                                  size="small"
                                  sx={{ fontSize: '0.65rem', height: '18px' }}
                                />
                              </Box>
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>

                {/* Loading more indicator */}
                {loadingMore && (
                  <Box textAlign="center" py={1}>
                    <CircularProgress size={20} />
                    <Typography variant="caption" sx={{ mt: 1, display: 'block' }}>
                      {t('products.loadingMore')}
                    </Typography>
                  </Box>
                )}

                {/* All results loaded */}
                {!hasMore && !isSearchMode && displayItems.length > 0 && (
                  <Box textAlign="center" py={1}>
                    <Typography variant="caption" color="text.secondary">
                      {t('products.allResultsLoaded')}
                    </Typography>
                  </Box>
                )}
              </>
            )}
          </Box>

          {/* Navigation hints */}
          {displayItems.length > 0 && (
            <Box mt={1} sx={{ backgroundColor: 'background.default', p: 0.5, borderRadius: 1 }}>
              <Typography variant="caption" color="text.secondary">
                <IconArrowUp size={14} style={{ verticalAlign: 'middle' }} /> /{' '}
                <IconArrowDown size={14} style={{ verticalAlign: 'middle' }} />{' '}
                {t('products.navigateWithArrows')} | {t('products.selectWithEnter')} |{' '}
                Esc {t('common.close')}
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>{t('common.cancel')}</Button>
        </DialogActions>
      </Dialog>

      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleScanResult}
      />
    </>
  );
};

export default ProductPriceSearchDialog;

===== src/Pages/purchase-orders/components/PurchaseOrderForm.tsx =====
// File: src/pages/purchases/purchase-orders/components/PurchaseOrderForm.tsx
import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ClickAwayListener,
  Alert,
  Snackbar
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconHome,
  IconSearch,
  IconBarcode
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import ProductPriceSearchDialog from './ProductPriceSearchDialog';
import BarcodeScanner from './BarcodeScanner';
import SearchableSelect from './SearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

type FormValues = {
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseOrderDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: PurchaseOrder;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const PurchaseOrderForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [lastAddedIndex, setLastAddedIndex] = useState<number | null>(null);

  // Quick-search states
  const [quickSearchQuery, setQuickSearchQuery] = useState('');
  const [quickSearchResults, setQuickSearchResults] = useState<ProductPrice[]>([]);
  const [quickSearchOpen, setQuickSearchOpen] = useState(false);
  const [, setQuickSearchLoading] = useState(false);
  const [quickSearchSelectedIndex, setQuickSearchSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Alert states
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  // Ref for quick search input
  const quickSearchInputRef = useRef<HTMLInputElement>(null);
  const quickSearchRef = useRef<HTMLDivElement>(null);
  const debouncedQuickSearch = useDebounce(quickSearchQuery, 300);

  // Default values
  const defaults: FormValues = {
    referenceDocNumber: `PO-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 0,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // دالة للعودة للـ Quick Search
  const focusQuickSearch = useCallback(() => {
    setTimeout(() => {
      if (quickSearchInputRef.current) {
        const inputElement = quickSearchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select();
        }
      }
    }, 200);
  }, []);

  const handleFieldKeyDown = useCallback((e: React.KeyboardEvent, nextFieldName?: string) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (nextFieldName) {
        setTimeout(() => {
          const nextInput = document.querySelector(`input[name="${nextFieldName}"]`) as HTMLInputElement;
          if (nextInput) {
            nextInput.focus();
            nextInput.select();
          }
        }, 50);
      } else {
        focusQuickSearch();
      }
    }
  }, [focusQuickSearch]);

  // دالة محسنة لإعادة الحساب
  const recalculateAll = useCallback(() => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)), { shouldValidate: false });

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)), { shouldValidate: false });
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)), { shouldValidate: false });
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)), { shouldValidate: false });
    setValue('total', parseFloat(total.toFixed(2)), { shouldValidate: false });
  }, [setValue, watch]);

  // Upon initial render in "add" mode, focus quick-search
  useLayoutEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current) {
      quickSearchInputRef.current.focus();
    }
  }, [mode]);

  // Fallback if ref isn't attached yet
  useEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current === null) {
      const timer = setTimeout(() => {
        if (quickSearchInputRef.current) {
          quickSearchInputRef.current.focus();
        }
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [mode]);

  // After adding a product, focus its quantity input
  useEffect(() => {
    if (lastAddedIndex !== null) {
      const timer = setTimeout(() => {
        const quantityInput = document.querySelector(
          `input[name="details.${lastAddedIndex}.quantity"]`
        ) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
        setLastAddedIndex(null);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [lastAddedIndex]);

  // Recalculate totals whenever details, discountPercent, or taxPercent change
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent, recalculateAll]);

  useEffect(() => {
    if (mode === 'add') {
      setTimeout(() => {
        focusQuickSearch();
      }, 500);
    }
  }, [mode, focusQuickSearch]);

  // Populate form in "edit" mode, or reset in "add" mode
  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      console.log('Initial values from API:', initialValues);
      console.log('Details from API:', initialValues.details);
      
      const convertedDetails = initialValues.details.map((d, index) => {
        console.log(`Converting detail ${index}:`, d);
        const converted = {
          purchaseOrderDetailID: d.id || '',
          productId: d.productID,
          productPriceId: d.productPriceID || '',
          productName: d.unitName || 'منتج غير محدد',
          unitId: d.unitId,
          unitName: d.unitName,
          unitFactor: d.unitFactor,
          quantity: d.quantity,
          price: d.price,
          discountPercent: d.discountPercent,
          discountValue: d.discountValue,
          taxPercent: d.taxPercent,
          taxValue: d.taxValue,
          subTotal: d.subTotal,
          total: d.total
        };
        console.log(`Converted detail ${index}:`, converted);
        return converted;
      });

      console.log('All converted details:', convertedDetails);

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset, t]);

  // Handle debounced quick-search
  useEffect(() => {
    if (debouncedQuickSearch.trim()) {
      handleQuickSearch(debouncedQuickSearch);
    } else {
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    }
  }, [debouncedQuickSearch]);

  const handleQuickSearch = async (query: string) => {
    try {
      setQuickSearchLoading(true);
      const result = await productsApi.searchProductPrices(query, 1, 10);
      setQuickSearchResults(result.data);
      setQuickSearchOpen(result.data.length > 0);
      setQuickSearchSelectedIndex(0);
    } catch (error) {
      console.error('Quick search error:', error);
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    } finally {
      setQuickSearchLoading(false);
    }
  };

  // Handle barcode scan result
  const handleBarcodeScanned = async (barcode: string) => {
    try {
      const result = await productsApi.searchProductPrices(barcode, 1, 1);
      if (result.data.length > 0) {
        const productPrice = result.data[0];
        addProductToForm(productPrice);
        setAlertMessage(`${t('products.productAdded')}: ${productPrice.productName}`);
        setAlertSeverity('success');
      } else {
        setAlertMessage(t('products.noProductFoundWithBarcode'));
        setAlertSeverity('warning');
      }
    } catch (error) {
      setAlertMessage(t('products.searchError'));
      setAlertSeverity('error');
    }
    setScannerOpen(false);
  };

  // Add a product from quick-search or barcode into the form's details
  const addProductToForm = (productPrice: ProductPrice) => {
    console.log('Adding product to form:', productPrice);
    
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 0,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    console.log('New item being added:', newItem);

    const currentDetails = watch('details') || [];
    setValue('details', [newItem, ...currentDetails]);
    setLastAddedIndex(0);
    setQuickSearchQuery('');
    setQuickSearchOpen(false);

    setTimeout(() => {
      if (quickSearchInputRef.current) {
        quickSearchInputRef.current.focus();
      }
    }, 100);
  };

  // Navigate quick-search results with arrows + Enter/Escape
  const handleQuickSearchKeyDown = (e: React.KeyboardEvent) => {
    if (quickSearchResults.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.min(prev + 1, quickSearchResults.length - 1);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (quickSearchResults[quickSearchSelectedIndex]) {
          addProductToForm(quickSearchResults[quickSearchSelectedIndex]);
        }
        break;
      case 'Escape':
        setQuickSearchOpen(false);
        setQuickSearchQuery('');
        break;
    }
  };

  // Ensure the selected quick-search item is visible
  const scrollToQuickSearchItem = (index: number) => {
    const listElement = quickSearchRef.current;
    if (listElement) {
      const itemElement = listElement.children[index] as HTMLElement;
      if (itemElement) {
        const listRect = listElement.getBoundingClientRect();
        const itemRect = itemElement.getBoundingClientRect();
        const itemHeight = itemRect.height;
        const listHeight = listRect.height;
        const itemTop = itemElement.offsetTop;

        if (itemRect.bottom > listRect.bottom) {
          const newScrollTop = itemTop - listHeight + itemHeight + 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        } else if (itemRect.top < listRect.top) {
          const newScrollTop = itemTop - 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        }
      }
    }
  };

  const addDetailWithSearch = () => {
    setProductSearchOpen(true);
  };

  const handleProductPriceSelect = (productPrice: ProductPrice) => {
    addProductToForm(productPrice);
  };

  // Validate numeric fields
  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  // On submit, build payload (with status from form) and call onSubmit
  const submit = async (data: FormValues) => {
    if (isSubmitting) return;

    // التحقق من المورد والمخزن
    if (!data.supplierId) {
      setAlertMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setAlertSeverity('error');
      return;
    }

    // التحقق من صحة البيانات
    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchaseOrders.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchaseOrders.price')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.discountPercent, `${t('purchaseOrders.discount')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.taxPercent, `${t('purchaseOrders.tax')} ${t('common.inLine')} ${i + 1}`)) return;
    }
    if (!validateNumber(data.discountPercent, t('purchaseOrders.totalDiscount'))) return;
    if (!validateNumber(data.taxPercent, t('purchaseOrders.totalTax'))) return;

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d, index) => {
          // التحقق من البيانات المطلوبة
          if (!d.productId) {
            console.error(`Detail ${index} missing productId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف المنتج`);
          }
          if (!d.productPriceId) {
            console.error(`Detail ${index} missing productPriceId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف السعر`);
          }
          
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          // إضافة ID للسطور الموجودة في التحديث
          if (mode === 'edit' && d.purchaseOrderDetailID && d.purchaseOrderDetailID.trim() !== '') {
            detailData.id = d.purchaseOrderDetailID;
            console.log(`Detail ${index} has existing ID:`, d.purchaseOrderDetailID);
          } else {
            console.log(`Detail ${index} is new - no ID`);
          }

          console.log(`Detail ${index} final data:`, detailData);
          return detailData;
        })
      };

      console.log('Submit data before sending:', JSON.stringify(submitData, null, 2));

      await onSubmit(submitData);

      if (data.status === 1 && mode === 'add') {
        reset(defaults);
        setTimeout(() => {
          if (quickSearchInputRef.current) {
            quickSearchInputRef.current.focus();
          }
        }, 200);
      } else {
        navigate('/purchases/purchase-orders');
      }
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Mobile-only detail card
  const MobileDetailCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle2">#{index + 1}</Typography>
          {watchedStatus !== 3 && (
            <IconButton onClick={onRemove} size="small" color="error">
              <IconTrash size={16} />
            </IconButton>
          )}
        </Box>
        <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.quantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.quantity')}
                  type="number"
                  size="small"
                  name={`details.${index}.quantity`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.price`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.price`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.price')}
                  type="number"
                  size="small"
                  name={`details.${index}.price`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.discountPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.discountPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.discount') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.discountPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.taxPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.taxPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.tax') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.taxPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>
        </Grid>

        <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
          {t('purchaseOrders.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
        </Typography>
      </CardContent>
    </Card>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Breadcrumbs + Header + Total */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchase-orders');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchaseOrders.list')}
          </Link>
          <Typography color="text.primary">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchaseOrders.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchase-orders')}
            disabled={isSubmitting}
          >
            {t('common.back')}
          </Button>

          {/* "Save (Pending)" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={handleSubmit((data) => {
                data.status = 1;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.savePending')}
            </Button>
          )}

          {/* "Submit" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              color="secondary"
              startIcon={<IconDeviceFloppy />}
              onClick={handleSubmit((data) => {
                data.status = 3;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.submit')}
            </Button>
          )}
        </Stack>
      </Box>

      {/* Row 1: Doc#, Date, Supplier, Warehouse */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <Controller
            name="referenceDocNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.docNumber')}
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="date1"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.date')}
                type="date"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                InputLabelProps={{ shrink: true }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="supplierId"
            control={control}
            rules={{ required: t('validation.supplierRequired') || 'يجب اختيار المورد' }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchaseOrders.supplier')}
                value={field.value}
                onChange={field.onChange}
                options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                placeholder={t('purchaseOrders.selectSupplier')}
                error={!!fieldState.error}
                size="small"
                autoFocusSearch={true}
                disabled={watchedStatus === 3}
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="warehouseId"
            control={control}
            rules={{ required: t('validation.warehouseRequired') || 'يجب اختيار المخزن' }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchaseOrders.warehouse')}
                value={field.value}
                onChange={field.onChange}
                options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                placeholder={t('purchaseOrders.selectWarehouse')}
                error={!!fieldState.error}
                size="small"
                autoFocusSearch={true}
                disabled={watchedStatus === 3}
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Row 2: Total Discount & Total Tax */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={6}>
          <Controller
            name="discountPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalDiscount')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <Controller
            name="taxPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalTax')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Hidden "status" field */}
      <Controller
        name="status"
        control={control}
        render={({ field }) => (
          <input type="hidden" {...field} />
        )}
      />

      {/* Quick summary row */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.subTotal')}: {watch('subTotal')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.discountValue')}: {watch('discountValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.taxValue')}: {watch('taxValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchaseOrders.total')}: {watch('total')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{
          display: 'flex',
          gap: 2,
          mb: 2,
          p: 2,
          backgroundColor: 'grey.50',
          borderRadius: 1,
          boxShadow: 1,
          alignItems: 'center'
        }}>
          <Typography variant="h6" sx={{ minWidth: 'fit-content' }}>
            {t('purchaseOrders.items')}
          </Typography>

          <Box sx={{ position: 'relative', flex: 1 }}>
            <ClickAwayListener onClickAway={() => setQuickSearchOpen(false)}>
              <Box>
                <TextField
                  ref={quickSearchInputRef}
                  autoFocus
                  placeholder={t('products.quickSearch')}
                  value={quickSearchQuery}
                  onChange={(e) => setQuickSearchQuery(e.target.value)}
                  onKeyDown={handleQuickSearchKeyDown}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    ),
                  }}
                />

                {/* Quick Search Results Dropdown */}
                {quickSearchOpen && quickSearchResults.length > 0 && (
                  <Paper
                    ref={quickSearchRef}
                    sx={{
                      position: 'absolute',
                      top: '100%',
                      left: 0,
                      right: 0,
                      zIndex: 1000,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    <List dense>
                      {quickSearchResults.map((price, index) => (
                        <ListItem key={price.id} disablePadding>
                          <ListItemButton
                            onClick={() => addProductToForm(price)}
                            selected={index === quickSearchSelectedIndex}
                            disabled={watchedStatus === 3}
                            sx={{
                              py: 0.25,
                              backgroundColor:
                                index === quickSearchSelectedIndex ? 'action.selected' : 'transparent'
                            }}
                          >
                            <ListItemText
                              primary={`${price.productName} — ${price.unitName}`}
                              secondary={`${t('products.price')}: ${price.price.toFixed(2)}`}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </Paper>
                )}
              </Box>
            </ClickAwayListener>
          </Box>

          <Button
            variant="outlined"
            size="small"
            onClick={() => setScannerOpen(true)}
            startIcon={<IconBarcode />}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('barcode.scan')}
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<IconPlus />}
            onClick={addDetailWithSearch}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('purchaseOrders.addItemWithSearch')}
          </Button>
        </Box>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {fields.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchaseOrders.noItems')}
                </Typography>
              ) : (
                fields.map((field, index) => (
                  <MobileDetailCard
                    key={field.id}
                    index={index}
                    onRemove={() => remove(index)}
                  />
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchaseOrders.product')}</TableCell>
                    <TableCell>{t('purchaseOrders.unit')}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.quantity')}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.price')}</TableCell>
                    <TableCell align="right">{`${t('purchaseOrders.discount')} %`}</TableCell>
                    <TableCell align="right">{`${t('purchaseOrders.tax')} %`}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.total')}</TableCell>
                    <TableCell />
                  </TableRow>
                </TableHead>
                <TableBody>
                  {fields.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchaseOrders.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    fields.map((field, index) => (
                      <TableRow key={field.id}>
                        <TableCell>{watch(`details.${index}.productName`)}</TableCell>
                        <TableCell>{watch(`details.${index}.unitName`)}</TableCell>
                        
                        {/* الكمية */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.quantity`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.quantity`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.price`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* السعر */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.price`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.price`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.discountPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 120,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الخصم */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.discountPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.discountPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.taxPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الضريبة */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.taxPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.taxPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الإجمالي */}
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>

                        <TableCell>
                          {watchedStatus !== 3 && (
                            <IconButton
                              onClick={() => remove(index)}
                              size="small"
                              color="error"
                            >
                              <IconTrash size={16} />
                            </IconButton>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* Product Price Search Dialog */}
      <ProductPriceSearchDialog
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={handleProductPriceSelect}
      />

      {/* Barcode Scanner */}
      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />

      {/* Alert Snackbar */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseOrderForm;

===== src/Pages/purchase-orders/components/PurchaseOrderRow.tsx =====
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Chip
} from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { useTranslation } from 'react-i18next';

interface Props {
  purchaseOrder: PurchaseOrder;
  onEdit: () => void;
}

const PurchaseOrderRow: React.FC<Props> = ({ purchaseOrder, onEdit }) => {
  const { t } = useTranslation();

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');
      case 3:
        return t('purchaseOrders.submitted');
      default:
        return '-';
    }
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography variant="h6" component="div">
              {purchaseOrder.referenceDocNumber}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('purchaseOrders.code')}: {purchaseOrder.code}
            </Typography>
            <Box>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.supplier')}: {purchaseOrder.supplier?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.warehouse')}: {purchaseOrder.warehouse?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.date')}: {new Date(purchaseOrder.date1).toLocaleDateString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.total')}: {purchaseOrder.total.toFixed(2)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.itemsCount')}: {purchaseOrder.details?.length || 0}
              </Typography>
            </Box>
            <Chip
              label={renderStatus(purchaseOrder.status)}
              color={purchaseOrder.status === 1 ? 'warning' : purchaseOrder.status === 3 ? 'primary' : 'default'}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            />
          </Stack>

          {/*
            إذا كان status === 3 → iconEye (view)، وإلا iconEdit.
          */}
          <IconButton onClick={onEdit}>
            {purchaseOrder.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default PurchaseOrderRow;

===== src/Pages/purchase-orders/components/PurchaseOrderTable.tsx =====
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';

interface Props {
  rows: PurchaseOrder[];
  onEdit: (po: PurchaseOrder) => void;
}

const PurchaseOrderTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const handleEdit = (row: PurchaseOrder) => {
    // ✅ للتأكد من البيانات

    // ✅ تأكد من وجود id
    if (!row.id) {
      alert('خطأ: معرف أمر الشراء غير موجود');
      return;
    }

    onEdit(row);
  };

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');   // “Pending”
      case 3:
        return t('purchaseOrders.submitted'); // “Submitted”
      default:
        return '-';
    }
  };

  const cols: GridColDef[] = [
    {
      field: 'referenceDocNumber',
      headerName: t('purchaseOrders.docNumber'),
      flex: 1,
      minWidth: 150
    },
    {
      field: 'code',
      headerName: t('purchaseOrders.code'),
      width: 100
    },
    {
      field: 'supplier',
      headerName: t('purchaseOrders.supplier'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.supplier?.name || 'N/A'
    },
    {
      field: 'warehouse',
      headerName: t('purchaseOrders.warehouse'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.warehouse?.name || 'N/A'
    },
    {
      field: 'date1',
      headerName: t('purchaseOrders.date'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch {
          return '-';
        }
      }
    },
    {
      field: 'total',
      headerName: t('purchaseOrders.total'),
      width: 120,
      renderCell: ({ value }) => `${Number(value).toFixed(2)}`
    },
    {
      field: 'details',
      headerName: t('purchaseOrders.itemsCount'),
      width: 120,
      renderCell: ({ value }) => `${value?.length || 0} ${t('purchaseOrders.items')}`
    },
    {
      // ← Changed from isActive → status
      field: 'status',
      headerName: t('purchaseOrders.status.title'),
      width: 110,
      renderCell: ({ value }) => (
        <Chip
          label={renderStatus(value)}
          color={value === 1 ? 'warning' : value === 3 ? 'primary' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'actions',
      headerName: '',
      width: 110,
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          {/*
            If status === 3 (Submitted), show “view” icon; otherwise show edit.
          */}
          {row.status === 3 ? (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEye size={18} />
            </IconButton>
          ) : (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => {
        // ✅ إصلاح: تأكد من وجود id وإلا اطبع خطأ
        if (!row.id) {
          return `temp-${Math.random()}`; // استخدم prefix للتمييز
        }
        return row.id;
      }}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default PurchaseOrderTable;

===== src/Pages/purchase-orders/components/SearchableSelect.tsx =====
import React, { useState, useEffect, useRef } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment,
  Typography,
  ListSubheader,
  MenuProps
} from '@mui/material';
import { IconSearch } from '@tabler/icons-react';
import { t } from 'i18next';

interface Option {
  id: string;
  name: string;
  [key: string]: any;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  size?: 'small' | 'medium';
  autoFocusSearch?: boolean;
  onSelectionComplete?: () => void; // موجود بالفعل
}

const SearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled,
  fullWidth = true,
  size = 'medium',
  autoFocusSearch = false,
  onSelectionComplete
}) => {
  const [searchText, setSearchText] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const [open, setOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const searchInputRef = useRef<HTMLInputElement>(null);

  // Recompute filteredOptions when options or searchText change:
  useEffect(() => {
    const filtered = options.filter(option =>
      option.name.toLowerCase().includes(searchText.toLowerCase())
    );
    setFilteredOptions(filtered);
    setSelectedIndex(-1);
  }, [searchText, options]);

  // Whenever `open` becomes true and autoFocusSearch is set, focus the search input:
useEffect(() => {
  if (open && autoFocusSearch) {
    // تأكد من الـ focus فوراً
    const timer = setTimeout(() => {
      if (searchInputRef.current) {
        const inputElement = searchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select(); // تحديد النص الموجود
        }
      }
    }, 50); // وقت أقل للاستجابة الأسرع

    return () => clearTimeout(timer);
  }
}, [open, autoFocusSearch]);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
    setSelectedIndex(-1);
  };

  const handleChange = (event: any) => {
    onChange(event.target.value);
    handleClose();
    
    // التعديل الوحيد هنا - إضافة callback
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  };

  // Arrow-key navigation inside the search box:
const handleSearchKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'ArrowUp') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.max(prev - 1, -1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'Enter' && selectedIndex >= 0) {
    e.preventDefault();
    e.stopPropagation();
    onChange(filteredOptions[selectedIndex].id);
    handleClose();
    
    // إضافة callback هنا كمان
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    e.stopPropagation();
    handleClose();
  }
};

  // If the closed Select is focused and the user starts typing a letter,
  // open the dropdown with that letter in the search field:
  const handleSelectKeyDown = (e: React.KeyboardEvent) => {
    if (
      e.key.length === 1 &&
      !e.ctrlKey &&
      !e.altKey &&
      !e.metaKey
    ) {
      e.preventDefault();
      setOpen(true);
      setSearchText(e.key);
      // Focus the search input after the dropdown appears:
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
          searchInputRef.current.setSelectionRange(1, 1);
        }
      }, 100);
    }
  };

  const customMenuProps: Partial<MenuProps> = {
    PaperProps: {
      style: {
        maxHeight: 300,
      },
    },
    onClose: (_event, reason) => {
      if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
        handleClose();
      }
    },
  };

  return (
    <FormControl fullWidth={fullWidth} size={size} error={error} disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value}
        label={label}
        open={open}
        onOpen={handleOpen}
        onClose={handleClose}
        onChange={handleChange}
        onKeyDown={handleSelectKeyDown}
        MenuProps={customMenuProps}
      >
        <ListSubheader>
          <TextField
            ref={searchInputRef}
            size="small"
            placeholder={t('common.search') || 'البحث...'}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            onKeyDown={handleSearchKeyDown}
            onClick={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            autoComplete="off"
          />
        </ListSubheader>

        {placeholder && !value && (
          <MenuItem value="" disabled>
            <Typography color="text.secondary">{placeholder}</Typography>
          </MenuItem>
        )}

        {filteredOptions.length === 0 ? (
          <MenuItem disabled>
            <Typography color="text.secondary">
              {t('common.noResults') || 'لا توجد نتائج'}
            </Typography>
          </MenuItem>
        ) : (
          filteredOptions.map((option, index) => (
            <MenuItem
              key={option.id}
              value={option.id}
              selected={index === selectedIndex}
              sx={{
                backgroundColor:
                  index === selectedIndex ? 'action.selected' : 'transparent',
              }}
            >
              {option.name}
            </MenuItem>
          ))
        )}
      </Select>
    </FormControl>
  );
};

export default SearchableSelect;

===== src/Pages/purchase-orders/EditPurchaseOrderPage.tsx =====
// File: src/pages/purchases/purchase-orders/EditPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useMediaQuery, useTheme, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import MobilePurchaseOrderForm from './components/mobile/MobilePurchaseOrderForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const EditPurchaseOrderPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [purchaseOrder, setPurchaseOrder] = useState<PurchaseOrder | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!id) {
          throw new Error('Purchase Order ID is required');
        }
        const [purchaseOrderData, suppliersData, warehousesData] = await Promise.all([
          apiSrv.getById(id),
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setPurchaseOrder(purchaseOrderData);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleSubmit = async (data: any) => {
    try {
      if (!purchaseOrder) {
        throw new Error('No purchase order loaded');
      }
      await apiSrv.update({ ...data, id: purchaseOrder.id! });
    } catch (e: any) {
      throw e;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  if (error && !purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  if (!purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">أمر الشراء غير موجود</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseOrderForm
          mode="edit"
          initialValues={purchaseOrder}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseOrderForm
          mode="edit"
          initialValues={purchaseOrder}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}</>
  );
};

export default EditPurchaseOrderPage;

===== src/Pages/purchase-orders/PurchaseOrdersPage.tsx =====
// File: src/pages/purchases/purchase-orders/PurchaseOrdersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Fab, Badge
} from '@mui/material';
import { IconFilter } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import PurchaseOrderTable from './components/PurchaseOrderTable';
import PurchaseOrderRow from './components/PurchaseOrderRow';
import MobilePurchaseOrdersFilter, { PurchaseOrderFilterState } from './components/mobile/MobilePurchaseOrdersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { t } from 'i18next';

const PurchaseOrdersPage: React.FC = () => {
  const navigate = useNavigate();
  const [purchaseOrders, setPurchaseOrders] = React.useState<PurchaseOrder[]>([]);
  const [suppliers, setSuppliers] = React.useState<Array<{ id: string; name: string }>>([]);
  const [warehouses, setWarehouses] = React.useState<Array<{ id: string; name: string }>>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PurchaseOrderFilterState>({
    searchQuery: '',
    status: '',
    supplierId: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'date1',
    sortOrder: 'desc'
  });

  /* ───── fetch all ───── */
  const fetchPurchaseOrders = async () => {
    try {
      const purchaseOrdersData = await apiSrv.getAll();
      setPurchaseOrders(purchaseOrdersData);
    } catch (e: any) {    }
  };

  const fetchSuppliers = async () => {
    try {
      const suppliersData = await suppliersApi.getAll();
      setSuppliers(suppliersData.map((s: { id: any; name: any; }) => ({ id: s.id, name: s.name })));
    } catch (e: any) {
      }
  };

  const fetchWarehouses = async () => {
    try {
      const warehousesData = await warehousesApi.getAll();
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (e: any) {
      }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await Promise.all([
          fetchPurchaseOrders(),
          fetchSuppliers(),
          fetchWarehouses()
        ]);
      }
      catch (e: any) {      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? purchaseOrders.filter(po => 
      po.referenceDocNumber.toLowerCase().includes(query.toLowerCase()) ||
      po.supplier?.name.toLowerCase().includes(query.toLowerCase()) ||
      po.warehouse?.name.toLowerCase().includes(query.toLowerCase())
    ) : purchaseOrders,
    [purchaseOrders, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...purchaseOrders];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(order => 
        order.referenceDocNumber.toLowerCase().includes(searchLower) ||
        order.supplier?.name.toLowerCase().includes(searchLower) ||
        order.warehouse?.name.toLowerCase().includes(searchLower) ||
        order.id?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      result = result.filter(order => order.status.toString() === mobileFilters.status);
    }

    // فلتر المورد
    if (mobileFilters.supplierId) {
      result = result.filter(order => order.supplierId === mobileFilters.supplierId);
    }

    // فلتر المخزن
    if (mobileFilters.warehouseId) {
      result = result.filter(order => order.warehouseId === mobileFilters.warehouseId);
    }

    // فلتر التاريخ
    if (mobileFilters.dateFrom) {
      result = result.filter(order => {
        const orderDate = new Date(order.date1).toISOString().split('T')[0];
        return orderDate >= mobileFilters.dateFrom;
      });
    }

    if (mobileFilters.dateTo) {
      result = result.filter(order => {
        const orderDate = new Date(order.date1).toISOString().split('T')[0];
        return orderDate <= mobileFilters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'date1') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [purchaseOrders, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.supplierId) count++;
    if (mobileFilters.warehouseId) count++;
    if (mobileFilters.dateFrom || mobileFilters.dateTo) count++;
    return count;
  };

  /* ───── Navigation handlers ───── */
  const handleAdd = () => {
    navigate('/purchases/purchase-orders/add');
  };

  const handleEdit = (purchaseOrder: PurchaseOrder) => {
    navigate(`/purchases/purchase-orders/edit/${purchaseOrder.id}`);
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={handleAdd}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          <ActionsBar
            onAdd={handleAdd} query={''} onQueryChange={function (): void {
              throw new Error('Function not implemented.');
            } }          />
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('purchaseOrders.title')} {` (${filtered.length})`}
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>جاري التحميل...</Typography>
          </Box>
        ) : filtered.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {(isMobile ? mobileFilters.searchQuery : query) || getActiveFiltersCount() > 0 
                ? 'لا توجد نتائج للبحث' 
                : 'لا توجد أوامر شراء'
              }
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? filtered.map(po => (
                  <PurchaseOrderRow
                    key={po.id}
                    purchaseOrder={po}
                    onEdit={() => handleEdit(po)}
                  />
                ))
              : (
                  <PurchaseOrderTable
                    rows={filtered}
                    onEdit={handleEdit}
                  />
                )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePurchaseOrdersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          suppliers={suppliers}
          warehouses={warehouses}
          totalResults={purchaseOrders.length}
          filteredResults={filtered.length}
        />
      )}</Container>
  );
};

export default PurchaseOrdersPage;

===== src/Pages/purchases/AddPurchasePage.tsx =====
// File: src/pages/purchases/AddPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useMediaQuery, useTheme, Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PurchaseForm from './components/PurchaseForm';
import MobilePurchaseForm from './components/mobile/MobilePurchaseForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const AddPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [suppliersData, warehousesData] = await Promise.all([
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [t]);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Adding purchase (data):', data);
      await apiSrv.add(data);
      setSuccess(t('purchases.messages.addSuccess'));
    } catch (e: any) {
      const msg = e?.message || t('purchases.errors.addFailed');
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box textAlign="center" py={4}>
        <CircularProgress />
        <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      <Snackbar open={!!success} autoHideDuration={4000} onClose={() => setSuccess('')}>
        <Alert severity="success" onClose={() => setSuccess('')}>
          {success}
        </Alert>
      </Snackbar>
    </>
  );
};

export default AddPurchasePage;

===== src/Pages/purchases/components/mobile/MobilePurchaseForm.tsx =====
// File: src/pages/purchases/components/mobile/MobilePurchaseForm.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Card,
  CardContent,
  IconButton,
  Divider,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Fab
} from '@mui/material';
import {
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconChevronDown,
  IconChevronUp,
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import MobileSearchableSelect from '../../../purchase-orders/components/mobile/MobileSearchableSelect';
import MobileProductSearch from '../../../purchase-orders/components/mobile/MobileProductSearch';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

type FormValues = {
  referenceDocNumber: string;
  purchaseOrderId?: string | null;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: Purchase;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const MobilePurchaseForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [alertMessage, setMessage] = useState('');
  const [alertSeverity, setSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [expandedSection, setExpandedSection] = useState<string>('basic');

  const defaults: FormValues = {
    referenceDocNumber: `PI-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    purchaseOrderId: null,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 14,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // حساب الإجماليات
  const recalculateAll = () => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)));
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)));
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)));
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)));

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)));
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)));
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)));
    setValue('total', parseFloat(total.toFixed(2)));
  };

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);
    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent]);

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      const convertedDetails = initialValues.details.map((d) => ({
        purchaseDetailID: d.id || '',
        productId: d.productID,
        productPriceId: d.productPriceID || '',
        productName: d.productName || d.unitName || 'منتج غير محدد',
        unitId: d.unitId,
        unitName: d.unitName,
        unitFactor: d.unitFactor,
        quantity: d.quantity,
        price: d.price,
        discountPercent: d.discountPercent,
        discountValue: d.discountValue,
        taxPercent: d.taxPercent,
        taxValue: d.taxValue,
        subTotal: d.subTotal,
        total: d.total
      }));

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        purchaseOrderId: initialValues.purchaseOrderId,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset]);

  const addProductToForm = (productPrice: ProductPrice) => {
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 14,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    append(newItem);
    setProductSearchOpen(false);
    setExpandedSection('items');
  };

  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setSeverity('error');
      return false;
    }
    return true;
  };

  const submit = async (data: FormValues, submitStatus: number) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setSeverity('error');
      return;
    }

    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchases.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchases.price')} ${t('common.inLine')} ${i + 1}`)) return;
    }

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        status: submitStatus,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d) => {
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseDetailID && d.purchaseDetailID.trim() !== '') {
            detailData.id = d.purchaseDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);

      if (submitStatus === 1 && mode === 'add') {
        reset(defaults);
        setExpandedSection('basic');
      } else {
        navigate('/purchases/purchases');
      }
    } catch (error) {
      setSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  return (
    <Container maxWidth="sm" sx={{ py: 1, px: 1 }}>
      {/* Header مع الإجمالي */}
      <Card sx={{ mb: 2, position: 'sticky', top: 0, zIndex: 100 }}>
        <CardContent sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">
              {mode === 'add' ? t('purchases.add') : t('purchases.edit')}
            </Typography>
            <IconButton onClick={() => navigate('/purchases/purchases')} size="small">
              <IconArrowLeft />
            </IconButton>
          </Box>
          
          <Typography variant="h4" color="primary" sx={{ textAlign: 'center', fontWeight: 'bold' }}>
            {t('purchases.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
          
          <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
            {watchedStatus !== 3 && (
              <>
                <Button
                  variant="contained"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 1;
                    submit(data, 1);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchases.savePending')}
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 3;
                    submit(data, 3);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchases.submit')}
                </Button>
              </>
            )}
          </Stack>
        </CardContent>
      </Card>

      {/* المعلومات الأساسية */}
      <Accordion 
        expanded={expandedSection === 'basic'} 
        onChange={handleAccordionChange('basic')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'basic' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">{t('purchases.basicInfo')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="referenceDocNumber"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.invoiceNumber')}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="date1"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.invoiceDate')}
                  type="date"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputLabelProps={{ shrink: true }}
                />
              )}
            />

            <Controller
              name="supplierId"
              control={control}
              rules={{ required: t('validation.supplierRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchases.supplier')}
                  value={field.value}
                  onChange={field.onChange}
                  options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                  placeholder={t('purchases.selectSupplier')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="warehouseId"
              control={control}
              rules={{ required: t('validation.warehouseRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchases.warehouse')}
                  value={field.value}
                  onChange={field.onChange}
                  options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                  placeholder={t('purchases.selectWarehouse')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الخصومات والضرائب */}
      <Accordion 
        expanded={expandedSection === 'discounts'} 
        onChange={handleAccordionChange('discounts')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'discounts' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">{t('purchases.discountsAndTaxes')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="discountPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchases.totalDiscount')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />

            <Controller
              name="taxPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchases.totalTax')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأصناف */}
      <Accordion 
        expanded={expandedSection === 'items'} 
        onChange={handleAccordionChange('items')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'items' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">
            {t('purchases.items')} ({fields.length})
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            {fields.length === 0 ? (
              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                {t('purchases.noItems')}
              </Typography>
            ) : (
              fields.map((field, index) => (
                <Card key={field.id} variant="outlined">
                  <CardContent sx={{ p: 2 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="subtitle2">
                        #{index + 1} - {watch(`details.${index}.productName`)}
                      </Typography>
                      {watchedStatus !== 3 && (
                        <IconButton onClick={() => remove(index)} size="small" color="error">
                          <IconTrash size={16} />
                        </IconButton>
                      )}
                    </Box>

                    <Grid container spacing={1}>
                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.quantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchases.quantity')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.price`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchases.price')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.discountPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchases.discount')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.taxPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchases.tax')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>
                    </Grid>

                    <Divider sx={{ my: 1 }} />
                    
                    <Typography variant="body2" sx={{ textAlign: 'right', fontWeight: 'bold' }}>
                      {t('purchases.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                    </Typography>
                  </CardContent>
                </Card>
              ))
            )}
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* زر إضافة منتج عائم */}
      {watchedStatus !== 3 && (
        <Fab
          color="primary"
          onClick={() => setProductSearchOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <IconPlus />
        </Fab>
      )}

      {/* البحث عن المنتجات */}
      <MobileProductSearch
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={addProductToForm}
      />

      {/* التنبيهات */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default MobilePurchaseForm;

===== src/Pages/purchases/components/mobile/MobilePurchasesFilter.tsx =====
// File: src/pages/purchases/components/mobile/MobilePurchasesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PurchasesFilterState {
  searchQuery: string;
  status: string;
  supplierId: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PurchasesFilterState;
  onFiltersChange: (filters: PurchasesFilterState) => void;
  suppliers: Array<{ id: string; name: string }>;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobilePurchasesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  suppliers,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PurchasesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('purchases.status.pending') },
    { value: '3', label: t('purchases.status.submitted') }
  ];

  const sortOptions = [
    { value: 'referenceDocNumber', label: t('purchases.table.invoiceNumber') },
    { value: 'date1', label: t('purchases.table.invoiceDate') },
    { value: 'total', label: t('purchases.table.total') },
    { value: 'status', label: t('purchases.table.status') }
  ];

  const handleLocalChange = (field: keyof PurchasesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PurchasesFilterState = {
      searchQuery: '',
      status: '',
      supplierId: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'date1',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.supplierId) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('purchases.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('purchases.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('purchases.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('purchases.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('purchases.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('purchases.filter.filters')}</Typography>
            {(localFilters.status || localFilters.supplierId || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.supplierId, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('purchases.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.supplier')}</InputLabel>
              <Select
                value={localFilters.supplierId}
                label={t('purchases.table.supplier')}
                onChange={(e) => handleLocalChange('supplierId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {suppliers.map(supplier => (
                  <MenuItem key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('purchases.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('purchases.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('purchases.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('purchases.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('purchases.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('purchases.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('purchases.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('purchases.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('purchases.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('purchases.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('purchases.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePurchasesFilter;

===== src/Pages/purchases/components/PageHeader.tsx =====
// File: src/pages/purchases/components/PageHeader.tsx
import React from 'react';
import PageHeader from '../../components/PageHeader';

interface Props {
  exportData?: any[];
  loading?: boolean;
}

const PurchasesPageHeader: React.FC<Props> = ({ exportData = [], loading = false }) => {
  const exportColumns = [
    { field: 'referenceDocNumber', headerName: 'رقم الفاتورة', type: 'string' as const },
    { field: 'purchaseOrder.referenceDocNumber', headerName: 'أمر الشراء', type: 'string' as const, format: (value: any) => value?.referenceDocNumber || 'فاتورة مباشرة' },
    { field: 'supplier.name', headerName: 'المورد', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'warehouse.name', headerName: 'المخزن', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'date1', headerName: 'تاريخ الفاتورة', type: 'date' as const },
    { field: 'total', headerName: 'الإجمالي', type: 'number' as const },
    { field: 'status', headerName: 'الحالة', type: 'string' as const, format: (value: number) => value === 1 ? 'معلق' : value === 3 ? 'مرسل' : 'غير محدد' },
  ];

  return (
    <PageHeader
      titleKey="purchases.title"
      subtitleKey="purchases.subtitle"
      exportData={exportData}
      exportColumns={exportColumns}
      exportFileName="purchases"
      exportLoading={loading}
    />
  );
};

export default PurchasesPageHeader;

===== src/Pages/purchases/components/PurchaseForm.tsx =====
// File: src/pages/purchases/components/PurchaseForm.tsx
import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ClickAwayListener,
  Alert,
  Snackbar,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconHome,
  IconSearch,
  IconBarcode,
  IconFileImport,
  IconSend
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import PurchaseOrderSelectDialog from './PurchaseOrderSelectDialog';
import ProductPriceSearchDialog from '../../purchase-orders/components/ProductPriceSearchDialog';
import BarcodeScanner from '../../purchase-orders/components/BarcodeScanner';
import SearchableSelect from '../../purchase-orders/components/SearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

type FormValues = {
  referenceDocNumber: string;
  purchaseOrderId?: string | null;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: Purchase;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const PurchaseForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [purchaseOrderSelectOpen, setPurchaseOrderSelectOpen] = useState(false);
  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState<PurchaseOrder | null>(null);
  const [lastAddedIndex, setLastAddedIndex] = useState<number | null>(null);

  // Quick-search states
  const [quickSearchQuery, setQuickSearchQuery] = useState('');
  const [quickSearchResults, setQuickSearchResults] = useState<ProductPrice[]>([]);
  const [quickSearchOpen, setQuickSearchOpen] = useState(false);
  const [, setQuickSearchLoading] = useState(false);
  const [quickSearchSelectedIndex, setQuickSearchSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Alert states
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  // Ref for quick search input
  const quickSearchInputRef = useRef<HTMLInputElement>(null);
  const quickSearchRef = useRef<HTMLDivElement>(null);
  const debouncedQuickSearch = useDebounce(quickSearchQuery, 300);

  // Default values
  const defaults: FormValues = {
    referenceDocNumber: `PI-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    purchaseOrderId: null,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 14,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1, // Default to Pending
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedPurchaseOrderId = watch('purchaseOrderId');

  // Status options
  const statusOptions = [
    { value: 1, label: t('purchases.status.pending'), color: 'warning' },
    { value: 3, label: t('purchases.status.submitted'), color: 'success' }
  ];

  // دالة للعودة للـ Quick Search
  const focusQuickSearch = useCallback(() => {
    setTimeout(() => {
      if (quickSearchInputRef.current) {
        const inputElement = quickSearchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select();
        }
      }
    }, 200);
  }, []);

  const handleFieldKeyDown = useCallback((e: React.KeyboardEvent, nextFieldName?: string) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (nextFieldName) {
        setTimeout(() => {
          const nextInput = document.querySelector(`input[name="${nextFieldName}"]`) as HTMLInputElement;
          if (nextInput) {
            nextInput.focus();
            nextInput.select();
          }
        }, 50);
      } else {
        focusQuickSearch();
      }
    }
  }, [focusQuickSearch]);

  // دالة محسنة لإعادة الحساب
  const recalculateAll = useCallback(() => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)), { shouldValidate: false });

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)), { shouldValidate: false });
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)), { shouldValidate: false });
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)), { shouldValidate: false });
    setValue('total', parseFloat(total.toFixed(2)), { shouldValidate: false });
  }, [setValue, watch]);

  // Upon initial render in "add" mode, focus quick-search
  useLayoutEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current) {
      quickSearchInputRef.current.focus();
    }
  }, [mode]);

  // Fallback if ref isn't attached yet
  useEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current === null) {
      const timer = setTimeout(() => {
        if (quickSearchInputRef.current) {
          quickSearchInputRef.current.focus();
        }
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [mode]);

  // After adding a product, focus its quantity input
  useEffect(() => {
    if (lastAddedIndex !== null) {
      const timer = setTimeout(() => {
        const quantityInput = document.querySelector(
          `input[name="details.${lastAddedIndex}.quantity"]`
        ) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
        setLastAddedIndex(null);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [lastAddedIndex]);

  // Recalculate totals whenever details, discountPercent, or taxPercent change
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent, recalculateAll]);

  useEffect(() => {
    if (mode === 'add') {
      setTimeout(() => {
        focusQuickSearch();
      }, 500);
    }
  }, [mode, focusQuickSearch]);

  // Populate form in "edit" mode, or reset in "add" mode
  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      console.log('Initial values from API:', initialValues);
      console.log('Details from API:', initialValues.details);
      
      const convertedDetails = initialValues.details.map((d, index) => {
        console.log(`Converting detail ${index}:`, d);
        const converted = {
          purchaseDetailID: d.id || '',
          productId: d.productID,
          productPriceId: d.productPriceID || '',
          productName: d.productName || d.unitName || t('purchases.form.unknownProduct'),
          unitId: d.unitId,
          unitName: d.unitName,
          unitFactor: d.unitFactor,
          quantity: d.quantity,
          price: d.price,
          discountPercent: d.discountPercent,
          discountValue: d.discountValue,
          taxPercent: d.taxPercent,
          taxValue: d.taxValue,
          subTotal: d.subTotal,
          total: d.total
        };
        console.log(`Converted detail ${index}:`, converted);
        return converted;
      });

      console.log('All converted details:', convertedDetails);

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        purchaseOrderId: initialValues.purchaseOrderId,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });

      // إذا كان مرتبط بأمر شراء، قم بإنشاء كائن كامل
      if (initialValues.purchaseOrder) {
        setSelectedPurchaseOrder(initialValues.purchaseOrder as PurchaseOrder);
      }
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset, t]);

  // Handle debounced quick-search
  useEffect(() => {
    if (debouncedQuickSearch.trim()) {
      handleQuickSearch(debouncedQuickSearch);
    } else {
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    }
  }, [debouncedQuickSearch]);

  const handleQuickSearch = async (query: string) => {
    try {
      setQuickSearchLoading(true);
      const result = await productsApi.searchProductPrices(query, 1, 10);
      setQuickSearchResults(result.data);
      setQuickSearchOpen(result.data.length > 0);
      setQuickSearchSelectedIndex(0);
    } catch (error) {
      console.error('Quick search error:', error);
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    } finally {
      setQuickSearchLoading(false);
    }
  };

  // Handle purchase order selection
  const handlePurchaseOrderSelect = (purchaseOrder: PurchaseOrder) => {
    setSelectedPurchaseOrder(purchaseOrder);
    
    // تعبئة البيانات من أمر الشراء - المورد فقط غير قابل للتعديل
    setValue('purchaseOrderId', purchaseOrder.id!);
    setValue('supplierId', purchaseOrder.supplierId); // المورد غير قابل للتعديل
    // المخزن قابل للتعديل
    setValue('warehouseId', purchaseOrder.warehouseId);
    setValue('discountPercent', purchaseOrder.discountPercent);
    setValue('taxPercent', purchaseOrder.taxPercent);
    
    // تعبئة الأصناف
    const convertedDetails = purchaseOrder.details.map(d => ({
      productId: d.productID,
      productPriceId: d.productPriceID || '',
      productName: d.unitName || t('purchases.form.unknownProduct'),
      unitId: d.unitId,
      unitName: d.unitName,
      unitFactor: d.unitFactor,
      quantity: d.quantity,
      price: d.price,
      discountPercent: d.discountPercent,
      discountValue: d.discountValue,
      taxPercent: d.taxPercent,
      taxValue: d.taxValue,
      subTotal: d.subTotal,
      total: d.total
    }));

    setValue('details', convertedDetails);
    
    setAlertMessage(t('purchases.form.purchaseOrderImported', { number: purchaseOrder.referenceDocNumber }));
    setAlertSeverity('success');
  };

  // Handle barcode scan result
  const handleBarcodeScanned = async (barcode: string) => {
    try {
      const result = await productsApi.searchProductPrices(barcode, 1, 1);
      if (result.data.length > 0) {
        const productPrice = result.data[0];
        addProductToForm(productPrice);
        setAlertMessage(t('purchases.form.productAdded', { name: productPrice.productName }));
        setAlertSeverity('success');
      } else {
        setAlertMessage(t('purchases.form.barcodeNotFound'));
        setAlertSeverity('warning');
      }
    } catch (error) {
      setAlertMessage(t('purchases.form.searchError'));
      setAlertSeverity('error');
    }
    setScannerOpen(false);
  };

  // Add a product from quick-search or barcode into the form's details
  const addProductToForm = (productPrice: ProductPrice) => {
    console.log('Adding product to form:', productPrice);
    
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 14,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    console.log('New item being added:', newItem);

    const currentDetails = watch('details') || [];
    setValue('details', [newItem, ...currentDetails]);
    setLastAddedIndex(0);
    setQuickSearchQuery('');
    setQuickSearchOpen(false);

    setTimeout(() => {
      if (quickSearchInputRef.current) {
        quickSearchInputRef.current.focus();
      }
    }, 100);
  };

  // Navigate quick-search results with arrows + Enter/Escape
  const handleQuickSearchKeyDown = (e: React.KeyboardEvent) => {
    if (quickSearchResults.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.min(prev + 1, quickSearchResults.length - 1);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (quickSearchResults[quickSearchSelectedIndex]) {
          addProductToForm(quickSearchResults[quickSearchSelectedIndex]);
        }
        break;
      case 'Escape':
        setQuickSearchOpen(false);
        setQuickSearchQuery('');
        break;
    }
  };

  // Ensure the selected quick-search item is visible
  const scrollToQuickSearchItem = (index: number) => {
    const listElement = quickSearchRef.current;
    if (listElement) {
      const itemElement = listElement.children[index] as HTMLElement;
      if (itemElement) {
        const listRect = listElement.getBoundingClientRect();
        const itemRect = itemElement.getBoundingClientRect();
        const itemHeight = itemRect.height;
        const listHeight = listRect.height;
        const itemTop = itemElement.offsetTop;

        if (itemRect.bottom > listRect.bottom) {
          const newScrollTop = itemTop - listHeight + itemHeight + 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        } else if (itemRect.top < listRect.top) {
          const newScrollTop = itemTop - 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        }
      }
    }
  };

  const addDetailWithSearch = () => {
    setProductSearchOpen(true);
  };

  const handleProductPriceSelect = (productPrice: ProductPrice) => {
    addProductToForm(productPrice);
  };

  // Validate numeric fields
  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(t('purchases.form.invalidNumber', { field: fieldName }));
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  // Submit function with status
  const submit = async (data: FormValues, submitStatus: number) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setAlertMessage(t('purchases.form.validation.supplierRequired'));
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('purchases.form.validation.warehouseRequired'));
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('purchases.form.validation.itemsRequired'));
      setAlertSeverity('error');
      return;
    }

    // التحقق من صحة البيانات
    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, t('purchases.form.quantity') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, t('purchases.form.price') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.discountPercent, t('purchases.form.discount') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.taxPercent, t('purchases.form.tax') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
    }
    if (!validateNumber(data.discountPercent, t('purchases.form.totalDiscount'))) return;
    if (!validateNumber(data.taxPercent, t('purchases.form.totalTax'))) return;

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        status: submitStatus,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d, index) => {
          if (!d.productId) {
            throw new Error(`Detail ${t('purchases.form.inLine')} ${index + 1} ${t('purchases.form.missingProductId')}`);
          }
          if (!d.productPriceId) {
            throw new Error(`Detail ${t('purchases.form.inLine')} ${index + 1} ${t('purchases.form.missingPriceId')}`);
          }
          
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseDetailID && d.purchaseDetailID.trim() !== '') {
            detailData.id = d.purchaseDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);
      navigate('/purchases/purchases');
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Mobile-only detail card
  const MobileDetailCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle2">#{index + 1}</Typography>
          <IconButton onClick={onRemove} size="small" color="error">
            <IconTrash size={16} />
          </IconButton>
        </Box>
        <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.quantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.quantity')}
                  type="number"
                  size="small"
                  name={`details.${index}.quantity`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.price`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.price`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.price')}
                  type="number"
                  size="small"
                  name={`details.${index}.price`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.discountPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.discountPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.discount') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.discountPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.taxPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.taxPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.tax') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.taxPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>
        </Grid>

        <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
          {t('purchases.form.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
        </Typography>
      </CardContent>
    </Card>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchases');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchases.title')}
          </Link>
          <Typography color="text.primary">
            {mode === 'add' ? t('purchases.form.addTitle') : t('purchases.form.editTitle')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {mode === 'add' ? t('purchases.form.addTitle') : t('purchases.form.editTitle')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchases.form.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchases')}
            disabled={isSubmitting}
          >
            {t('common.back')}
          </Button>

          {mode === 'add' && (
            <Button
              variant="outlined"
              startIcon={<IconFileImport />}
              onClick={() => setPurchaseOrderSelectOpen(true)}
              disabled={isSubmitting}
            >
              {t('purchases.form.importFromPO')}
            </Button>
          )}

          <Button
            variant="outlined"
            startIcon={<IconDeviceFloppy />}
            onClick={handleSubmit((data) => submit(data, 1))}
            disabled={isSubmitting}
            color="warning"
          >
            {t('purchases.form.savePending')}
          </Button>

          <Button
            variant="contained"
            startIcon={<IconSend />}
            onClick={handleSubmit((data) => submit(data, 3))}
            disabled={isSubmitting}
          >
            {t('purchases.form.submitInvoice')}
          </Button>
        </Stack>
      </Box>

      {/* Purchase Order Info */}
      {selectedPurchaseOrder && (
        <Paper sx={{ p: 2, mb: 2, backgroundColor: 'info.light' }}>
          <Typography variant="h6" gutterBottom>
            {t('purchases.form.linkedToPO')}: {selectedPurchaseOrder.referenceDocNumber}
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poCode')}:</strong> {selectedPurchaseOrder.code}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poDate')}:</strong> {selectedPurchaseOrder.date1 ? new Date(selectedPurchaseOrder.date1).toLocaleDateString() : t('common.notSpecified')}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poTotal')}:</strong> {selectedPurchaseOrder.total?.toFixed(2) || '0.00'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.itemsCount')}:</strong> {selectedPurchaseOrder.details?.length || 0}
              </Typography>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* Form Fields */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <Controller
            name="referenceDocNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.invoiceNumber')}
                fullWidth
                size="small"
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="date1"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.invoiceDate')}
                type="date"
                fullWidth
                size="small"
                InputLabelProps={{ shrink: true }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="supplierId"
            control={control}
            rules={{ required: t('purchases.form.validation.supplierRequired') }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchases.form.supplier')}
                value={field.value}
                onChange={field.onChange}
                options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                placeholder={t('purchases.form.selectSupplier')}
                error={!!fieldState.error}
                size="small"
                disabled={!!watchedPurchaseOrderId} // المورد غير قابل للتعديل عند الاستيراد
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="warehouseId"
            control={control}
            rules={{ required: t('purchases.form.validation.warehouseRequired') }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchases.form.warehouse')}
                value={field.value}
                onChange={field.onChange}
                options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                placeholder={t('purchases.form.selectWarehouse')}
                error={!!fieldState.error}
                size="small"
                // المخزن قابل للتعديل حتى لو تم الاستيراد
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Status and Discount & Tax */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={4}>
          <Controller
            name="status"
            control={control}
            render={({ field }) => (
              <FormControl fullWidth size="small">
                <InputLabel>{t('purchases.form.status')}</InputLabel>
                <Select
                  {...field}
                  label={t('purchases.form.status')}
                >
                  {statusOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <Controller
            name="discountPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.totalDiscount') + ' %'}
                type="number"
                fullWidth
                size="small"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    focusQuickSearch();
                  }
                }}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <Controller
            name="taxPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.totalTax') + ' %'}
                type="number"
                fullWidth
                size="small"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    focusQuickSearch();
                  }
                }}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Summary */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.subTotal')}: {watch('subTotal')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.discountValue')}: {watch('discountValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.taxValue')}: {watch('taxValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchases.form.total')}: {watch('total')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{
          display: 'flex',
          gap: 2,
          mb: 2,
          p: 2,
          backgroundColor: 'grey.50',
          borderRadius: 1,
          boxShadow: 1,
          alignItems: 'center'
        }}>
          <Typography variant="h6" sx={{ minWidth: 'fit-content' }}>
            {t('purchases.form.items')}
          </Typography>

          <Box sx={{ position: 'relative', flex: 1 }}>
            <ClickAwayListener onClickAway={() => setQuickSearchOpen(false)}>
              <Box>
                <TextField
                  ref={quickSearchInputRef}
                  autoFocus
                  placeholder={t('purchases.form.quickSearch')}
                  value={quickSearchQuery}
                  onChange={(e) => setQuickSearchQuery(e.target.value)}
                  onKeyDown={handleQuickSearchKeyDown}
                  fullWidth
                  size="small"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    ),
                  }}
                />

                {/* Quick Search Results Dropdown */}
                {quickSearchOpen && quickSearchResults.length > 0 && (
                  <Paper
                    ref={quickSearchRef}
                    sx={{
                      position: 'absolute',
                      top: '100%',
                      left: 0,
                      right: 0,
                      zIndex: 1000,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    <List dense>
                      {quickSearchResults.map((price, index) => (
                        <ListItem key={price.id} disablePadding>
                          <ListItemButton
                            onClick={() => addProductToForm(price)}
                            selected={index === quickSearchSelectedIndex}
                            sx={{
                              py: 0.25,
                              backgroundColor:
                                index === quickSearchSelectedIndex ? 'action.selected' : 'transparent'
                            }}
                          >
                            <ListItemText
                              primary={`${price.productName} — ${price.unitName}`}
                              secondary={`${t('purchases.form.price')}: ${price.price.toFixed(2)}`}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </Paper>
                )}
              </Box>
            </ClickAwayListener>
          </Box>

          <Button
            variant="outlined"
            size="small"
            onClick={() => setScannerOpen(true)}
            startIcon={<IconBarcode />}
            sx={{ fontSize: '0.75rem' }}
          >
            {t('purchases.form.scanBarcode')}
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<IconPlus />}
            onClick={addDetailWithSearch}
            sx={{ fontSize: '0.75rem' }}
          >
            {t('purchases.form.addBySearch')}
          </Button>
        </Box>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {fields.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchases.form.noItems')}
                </Typography>
              ) : (
                fields.map((field, index) => (
                  <MobileDetailCard
                    key={field.id}
                    index={index}
                    onRemove={() => remove(index)}
                  />
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchases.form.product')}</TableCell>
                    <TableCell>{t('purchases.form.unit')}</TableCell>
                    <TableCell align="right">{t('purchases.form.quantity')}</TableCell>
                    <TableCell align="right">{t('purchases.form.price')}</TableCell>
                    <TableCell align="right">{t('purchases.form.discount')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.tax')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.total')}</TableCell>
                    <TableCell />
                  </TableRow>
                </TableHead>
                <TableBody>
                  {fields.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchases.form.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    fields.map((field, index) => (
                      <TableRow key={field.id}>
                        <TableCell>{watch(`details.${index}.productName`)}</TableCell>
                        <TableCell>{watch(`details.${index}.unitName`)}</TableCell>
                        
                        {/* الكمية */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.quantity`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.quantity`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.price`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* السعر */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.price`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.price`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.discountPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 120,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الخصم */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.discountPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.discountPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.taxPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الضريبة */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.taxPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.taxPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الإجمالي */}
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>

                        <TableCell>
                          <IconButton
                            onClick={() => remove(index)}
                            size="small"
                            color="error"
                          >
                            <IconTrash size={16} />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* Purchase Order Select Dialog */}
      <PurchaseOrderSelectDialog
        open={purchaseOrderSelectOpen}
        onClose={() => setPurchaseOrderSelectOpen(false)}
        onSelect={handlePurchaseOrderSelect}
      />

      {/* Product Price Search Dialog */}
      <ProductPriceSearchDialog
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={handleProductPriceSelect}
      />

      {/* Barcode Scanner */}
      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />

      {/* Alert Snackbar */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseForm;

===== src/Pages/purchases/components/PurchaseOrderSelectDialog.tsx =====
// File: src/pages/purchases/components/PurchaseOrderSelectDialog.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip,
  CircularProgress
} from '@mui/material';
import { IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as purchaseOrdersApi from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (purchaseOrder: PurchaseOrder) => void;
}

const PurchaseOrderSelectDialog: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const [searchQuery, setSearchQuery] = useState('');
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<PurchaseOrder[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (open) {
      loadPurchaseOrders();
    }
  }, [open]);

  useEffect(() => {
    if (searchQuery.trim()) {
      const filtered = purchaseOrders.filter(po =>
        po.referenceDocNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
        po.supplier?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        po.warehouse?.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredOrders(filtered);
    } else {
      setFilteredOrders(purchaseOrders);
    }
  }, [searchQuery, purchaseOrders]);

  const loadPurchaseOrders = async () => {
    try {
      setLoading(true);
      const orders = await purchaseOrdersApi.getAll();
      const submittedOrders = orders.filter(po => po.status === 3);
      setPurchaseOrders(submittedOrders);
      setFilteredOrders(submittedOrders);
    } catch (error) {
      } finally {
      setLoading(false);
    }
  };

  const handleSelect = async (purchaseOrder: PurchaseOrder) => {
    try {
      const fullPurchaseOrder = await purchaseOrdersApi.getByIdWithDetails(purchaseOrder.id!);
      onSelect(fullPurchaseOrder);
      onClose();
    } catch (error) {
      onSelect(purchaseOrder);
      onClose();
    }
  };

  const handleClose = () => {
    setSearchQuery('');
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('purchases.form.selectPurchaseOrder')}
          <IconButton onClick={handleClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box mb={2}>
          <TextField
            fullWidth
            placeholder={t('purchases.form.searchPurchaseOrders')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
          />
        </Box>

        <Box sx={{ maxHeight: '400px', overflow: 'auto' }}>
          {loading ? (
            <Box textAlign="center" py={4}>
              <CircularProgress />
              <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
            </Box>
          ) : filteredOrders.length === 0 ? (
            <Typography color="text.secondary" textAlign="center" py={4}>
              {searchQuery ? t('common.noSearchResults') : t('purchases.form.noSubmittedPO')}
            </Typography>
          ) : (
            <List>
              {filteredOrders.map((order) => (
                <ListItem key={order.id} disablePadding>
                  <ListItemButton onClick={() => handleSelect(order)}>
                    <ListItemText
                      primary={
                        <Box>
                          <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
                            {order.referenceDocNumber}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.code')}: {order.code}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.supplier')}: {order.supplier?.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.warehouse')}: {order.warehouse?.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.date')}: {new Date(order.date1).toLocaleDateString()}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.total')}: {order.total.toFixed(2)}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.itemsCount')}: {order.details?.length || 0}
                          </Typography>
                          <Box mt={1}>
                            <Chip
                              label={t('purchases.status.submitted')}
                              color="primary"
                              size="small"
                            />
                          </Box>
                        </Box>
                      }
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose}>{t('common.cancel')}</Button>
      </DialogActions>
    </Dialog>
  );
};

export default PurchaseOrderSelectDialog;

===== src/Pages/purchases/components/PurchaseRow.tsx =====
// File: src/pages/purchases/components/PurchaseRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Chip
} from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

interface Props {
  purchase: Purchase;
  onEdit: () => void;
  onView: () => void;
}

const PurchaseRow: React.FC<Props> = ({ purchase, onEdit, onView }) => {
  const { t } = useTranslation();

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchases.status.pending');
      case 3:
        return t('purchases.status.submitted');
      default:
        return '-';
    }
  };

  const getStatusColor = (status: number | undefined) => {
    switch (status) {
      case 1:
        return 'warning';
      case 3:
        return 'success';
      default:
        return 'default';
    }
  };

  const renderPurchaseOrderInfo = () => {
    if (purchase.purchaseOrder) {
      return `${purchase.purchaseOrder.referenceDocNumber} (${purchase.purchaseOrder.code})`;
    }
    return t('purchases.table.directInvoice');
  };

  const handleAction = () => {
    if (purchase.status === 3) {
      onView(); // Submitted - View only
    } else {
      onEdit(); // Pending - Edit
    }
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography variant="h6" component="div">
              {purchase.referenceDocNumber}
            </Typography>
            <Box>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.purchaseOrder')}: {renderPurchaseOrderInfo()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.supplier')}: {purchase.supplier?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.warehouse')}: {purchase.warehouse?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.invoiceDate')}: {new Date(purchase.date1).toLocaleDateString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.total')}: {purchase.total.toFixed(2)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.itemsCount')}: {purchase.details?.length || 0}
              </Typography>
            </Box>
            <Chip
              label={renderStatus(purchase.status)}
              color={getStatusColor(purchase.status) as any}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            />
          </Stack>

          <IconButton onClick={handleAction}>
            {purchase.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default PurchaseRow;

===== src/Pages/purchases/components/PurchaseTable.tsx =====
// File: src/pages/purchases/components/PurchaseTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

interface Props {
  rows: Purchase[];
  onEdit: (purchase: Purchase) => void;
  onView: (purchase: Purchase) => void;
}

const PurchaseTable: React.FC<Props> = ({ rows, onEdit, onView }) => {
  const { t } = useTranslation();

  const handleAction = (row: Purchase) => {
    if (!row.id) {
      alert(t('purchases.errors.missingId'));
      return;
    }

    if (row.status === 3) {
      onView(row); // Submitted - View only
    } else {
      onEdit(row); // Pending - Edit
    }
  };

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchases.status.pending');
      case 3:
        return t('purchases.status.submitted');
      default:
        return '-';
    }
  };

  const getStatusColor = (status: number | undefined) => {
    switch (status) {
      case 1:
        return 'warning';
      case 3:
        return 'success';
      default:
        return 'default';
    }
  };

  const renderPurchaseOrderInfo = (purchase: Purchase) => {
    if (purchase.purchaseOrder) {
      return `${purchase.purchaseOrder.referenceDocNumber} (${purchase.purchaseOrder.code})`;
    }
    return t('purchases.table.directInvoice');
  };

  const cols: GridColDef[] = [
    {
      field: 'referenceDocNumber',
      headerName: t('purchases.table.invoiceNumber'),
      flex: 1,
      minWidth: 150
    },
    {
      field: 'purchaseOrder',
      headerName: t('purchases.table.purchaseOrder'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => renderPurchaseOrderInfo(row)
    },
    {
      field: 'supplier',
      headerName: t('purchases.table.supplier'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.supplier?.name || 'N/A'
    },
    {
      field: 'warehouse',
      headerName: t('purchases.table.warehouse'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.warehouse?.name || 'N/A'
    },
    {
      field: 'date1',
      headerName: t('purchases.table.invoiceDate'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString();
        } catch {
          return '-';
        }
      }
    },
    {
      field: 'total',
      headerName: t('purchases.table.total'),
      width: 120,
      renderCell: ({ value }) => `${Number(value).toFixed(2)}`
    },
    {
      field: 'details',
      headerName: t('purchases.table.itemsCount'),
      width: 120,
      renderCell: ({ value }) => `${value?.length || 0} ${t('purchases.table.items')}`
    },
    {
      field: 'status',
      headerName: t('purchases.table.status'),
      width: 110,
      renderCell: ({ value }) => (
        <Chip
          label={renderStatus(value)}
          color={getStatusColor(value) as any}
          size="small"
        />
      )
    },
    {
      field: 'actions',
      headerName: '',
      width: 110,
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => handleAction(row)}>
            {row.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => {
        if (!row.id) {
          return `temp-${Math.random()}`;
        }
        return row.id;
      }}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default PurchaseTable;

===== src/Pages/purchases/components/ViewPurchasePage.tsx =====
// File: src/pages/purchases/ViewPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  Chip} from '@mui/material';
import { IconArrowLeft, IconHome, IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

const ViewPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [purchase, setPurchase] = useState<Purchase | null>(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPurchase = async () => {
      try {
        if (!id) {
          throw new Error(t('purchases.errors.idRequired'));
        }
        const purchaseData = await apiSrv.getById(id);
        setPurchase(purchaseData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchPurchase();
  }, [id, t]);

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return { label: t('purchases.status.pending'), color: 'warning' };
      case 3:
        return { label: t('purchases.status.submitted'), color: 'success' };
      default:
        return { label: '-', color: 'default' };
    }
  };

  const handleEdit = () => {
    if (purchase?.status === 1) {
      navigate(`/purchases/purchases/edit/${purchase.id}`);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="xl" sx={{ py: 2 }}>
        <Box textAlign="center" py={4}>
          <Typography>{t('common.loading')}</Typography>
        </Box>
      </Container>
    );
  }

  if (error || !purchase) {
    return (
      <Container maxWidth="xl" sx={{ py: 2 }}>
        <Box textAlign="center" py={4}>
          <Typography color="error">{error || t('purchases.errors.purchaseNotFound')}</Typography>
        </Box>
      </Container>
    );
  }

  const statusInfo = renderStatus(purchase.status);

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchases');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchases.title')}
          </Link>
          <Typography color="text.primary">
            {purchase.status === 1 ? t('purchases.form.editTitle') : t('purchases.view.title')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {purchase.status === 1 ? t('purchases.form.editTitle') : t('purchases.view.title')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchases.form.total')}: {purchase.total?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchases')}
          >
            {t('common.back')}
          </Button>

          {purchase.status === 1 && (
            <Button
              variant="contained"
              startIcon={<IconEdit />}
              onClick={handleEdit}
            >
              {t('common.edit')}
            </Button>
          )}
        </Stack>
      </Box>

      {/* Purchase Order Info */}
      {purchase.purchaseOrder && (
        <Paper sx={{ p: 2, mb: 2, backgroundColor: 'info.light' }}>
          <Typography variant="h6" gutterBottom>
            {t('purchases.form.linkedToPO')}: {purchase.purchaseOrder.referenceDocNumber}
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poDate')}:</strong> {purchase.purchaseOrder.date1 ? new Date(purchase.purchaseOrder.date1).toLocaleDateString() : t('common.notSpecified')}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poTotal')}:</strong> {purchase.purchaseOrder.total?.toFixed(2) || '0.00'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.itemsCount')}:</strong> {purchase.purchaseOrder.details?.length || 0}
              </Typography>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* Form Fields - Read Only */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.invoiceNumber')}
            value={purchase.referenceDocNumber}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.invoiceDate')}
            value={purchase.date1.split('T')[0]}
            type="date"
            fullWidth
            size="small"
            InputLabelProps={{ shrink: true }}
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.supplier')}
            value={purchase.supplier?.name || 'N/A'}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.warehouse')}
            value={purchase.warehouse?.name || 'N/A'}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>
      </Grid>

      {/* Status and Discount & Tax - Read Only */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography variant="body1">{t('purchases.form.status')}:</Typography>
            <Chip
              label={statusInfo.label}
              color={statusInfo.color as any}
              size="small"
            />
          </Box>
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            label={t('purchases.form.totalDiscount') + ' %'}
            value={purchase.discountPercent}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            label={t('purchases.form.totalTax') + ' %'}
            value={purchase.taxPercent}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>
      </Grid>

      {/* Summary */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.subTotal')}: {purchase.subTotal?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.discountValue')}: {purchase.discountValue?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.taxValue')}: {purchase.taxValue?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchases.form.total')}: {purchase.total?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section - Read Only */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('purchases.form.items')}
        </Typography>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {purchase.details.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchases.form.noItems')}
                </Typography>
              ) : (
                purchase.details.map((detail, index) => (
                  <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
                    <CardContent sx={{ p: 2 }}>
                      <Typography variant="subtitle2" sx={{ mb: 1 }}>#{index + 1}</Typography>
                      <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
                        {detail.unitName} — {detail.unitName}
                      </Typography>

                      <Grid container spacing={1}>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.quantity')}: {detail.quantity}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.price')}: {detail.price.toFixed(2)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.discount')}: {detail.discountPercent}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.tax')}: {detail.taxPercent}%
                          </Typography>
                        </Grid>
                      </Grid>

                      <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
                        {t('purchases.form.total')}: {detail.total?.toFixed(2) || '0.00'}
                      </Typography>
                    </CardContent>
                  </Card>
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchases.form.product')}</TableCell>
                    <TableCell>{t('purchases.form.unit')}</TableCell>
                    <TableCell align="right">{t('purchases.form.quantity')}</TableCell>
                    <TableCell align="right">{t('purchases.form.price')}</TableCell>
                    <TableCell align="right">{t('purchases.form.discount')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.tax')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.total')}</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {purchase.details.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchases.form.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    purchase.details.map((detail, index) => (
                      <TableRow key={index}>
                        <TableCell>{detail.unitName}</TableCell>
                        <TableCell>{detail.unitName}</TableCell>
                        <TableCell align="right">{detail.quantity}</TableCell>
                        <TableCell align="right">{detail.price.toFixed(2)}</TableCell>
                        <TableCell align="right">{detail.discountPercent}%</TableCell>
                        <TableCell align="right">{detail.taxPercent}%</TableCell>
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {detail.total?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper></Container>
  );
};

export default ViewPurchasePage;

===== src/Pages/purchases/EditPurchasePage.tsx =====
// File: src/pages/purchases/EditPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useMediaQuery, useTheme, Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PurchaseForm from './components/PurchaseForm';
import MobilePurchaseForm from './components/mobile/MobilePurchaseForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const EditPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [purchase, setPurchase] = useState<Purchase | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!id) {
          throw new Error(t('purchases.errors.idRequired'));
        }
        const [purchaseData, suppliersData, warehousesData] = await Promise.all([
          apiSrv.getById(id),
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setPurchase(purchaseData);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id, t]);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Updating purchase:', data);
      if (!purchase) {
        throw new Error(t('purchases.errors.noPurchaseLoaded'));
      }
      await apiSrv.update({ ...data, id: purchase.id! });
      setSuccess(t('purchases.messages.updateSuccess'));
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.message || t('purchases.errors.updateFailed');
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (error && !purchase) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  if (!purchase) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{t('purchases.errors.purchaseNotFound')}</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseForm
          mode="edit"
          initialValues={purchase}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseForm
          mode="edit"
          initialValues={purchase}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      <Snackbar open={!!success} autoHideDuration={4000} onClose={() => setSuccess('')}>
        <Alert severity="success" onClose={() => setSuccess('')}>
          {success}
        </Alert>
      </Snackbar>
    </>
  );
};

export default EditPurchasePage;

===== src/Pages/purchases/PurchasesPage.tsx =====
// File: src/pages/purchases/PurchasesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Fab, Badge, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import ActionsBar from '../purchase-orders/components/ActionsBar';
import PurchaseTable from './components/PurchaseTable';
import PurchaseRow from './components/PurchaseRow';
import MobilePurchasesFilter, { PurchasesFilterState } from './components/mobile/MobilePurchasesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import PageHeader from './components/PageHeader';

const PurchasesPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [purchases, setPurchases] = React.useState<Purchase[]>([]);
  const [suppliers, setSuppliers] = React.useState<Array<{ id: string; name: string }>>([]);
  const [warehouses, setWarehouses] = React.useState<Array<{ id: string; name: string }>>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PurchasesFilterState>({
    searchQuery: '',
    status: '',
    supplierId: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'date1',
    sortOrder: 'desc'
  });

  const fetchPurchases = async () => {
    try {
      const purchasesData = await apiSrv.getAll();
      setPurchases(purchasesData);
    } catch (e: any) {
      setErr(e?.message || t('purchases.errors.loadFailed'));
    }
  };

  const fetchSuppliers = async () => {
    try {
      const suppliersData = await suppliersApi.getAll();
      setSuppliers(suppliersData.map((s: { id: any; name: any; }) => ({ id: s.id, name: s.name })));
    } catch (e: any) {
      }
  };

  const fetchWarehouses = async () => {
    try {
      const warehousesData = await warehousesApi.getAll();
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (e: any) {
      }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await Promise.all([
          fetchPurchases(),
          fetchSuppliers(),
          fetchWarehouses()
        ]);
      }
      catch (e: any) { 
        setErr(e?.message || t('purchases.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? purchases.filter(p => 
      p.referenceDocNumber.toLowerCase().includes(query.toLowerCase()) ||
      p.supplier?.name.toLowerCase().includes(query.toLowerCase()) ||
      p.warehouse?.name.toLowerCase().includes(query.toLowerCase()) ||
      p.purchaseOrder?.referenceDocNumber.toLowerCase().includes(query.toLowerCase())
    ) : purchases,
    [purchases, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...purchases];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(purchase => 
        purchase.referenceDocNumber.toLowerCase().includes(searchLower) ||
        purchase.supplier?.name.toLowerCase().includes(searchLower) ||
        purchase.warehouse?.name.toLowerCase().includes(searchLower) ||
        purchase.purchaseOrder?.referenceDocNumber.toLowerCase().includes(searchLower) ||
        purchase.id?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      result = result.filter(purchase => purchase.status.toString() === mobileFilters.status);
    }

    // فلتر المورد
    if (mobileFilters.supplierId) {
      result = result.filter(purchase => purchase.supplierId === mobileFilters.supplierId);
    }

    // فلتر المخزن
    if (mobileFilters.warehouseId) {
      result = result.filter(purchase => purchase.warehouseId === mobileFilters.warehouseId);
    }

    // فلتر التاريخ
    if (mobileFilters.dateFrom) {
      result = result.filter(purchase => {
        const purchaseDate = new Date(purchase.date1).toISOString().split('T')[0];
        return purchaseDate >= mobileFilters.dateFrom;
      });
    }

    if (mobileFilters.dateTo) {
      result = result.filter(purchase => {
        const purchaseDate = new Date(purchase.date1).toISOString().split('T')[0];
        return purchaseDate <= mobileFilters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'date1') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [purchases, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.supplierId) count++;
    if (mobileFilters.warehouseId) count++;
    if (mobileFilters.dateFrom || mobileFilters.dateTo) count++;
    return count;
  };

  const handleAdd = () => {
    navigate('/purchases/purchases/add');
  };

  const handleEdit = (purchase: Purchase) => {
    navigate(`/purchases/purchases/edit/${purchase.id}`);
  };

  const handleView = (purchase: Purchase) => {
    navigate(`/purchases/purchases/view/${purchase.id}`);
  };

  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>

      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={handleAdd}
          searchPlaceholder={t('purchases.searchPlaceholder')}
          addButtonText={t('purchases.addButton')}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={handleAdd}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('purchases.addButton')}
          </Button>
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('purchases.listTitle')} {` (${filtered.length})`}
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : filtered.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {(isMobile ? mobileFilters.searchQuery : query) || getActiveFiltersCount() > 0 
                ? t('common.noSearchResults') 
                : t('purchases.noData')
              }
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? filtered.map(p => (
                  <PurchaseRow
                    key={p.id}
                    purchase={p}
                    onEdit={() => handleEdit(p)}
                    onView={() => handleView(p)}
                  />
                ))
              : (
                  <PurchaseTable
                    rows={filtered}
                    onEdit={handleEdit}
                    onView={handleView}
                  />
                )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePurchasesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          suppliers={suppliers}
          warehouses={warehouses}
          totalResults={purchases.length}
          filteredResults={filtered.length}
        />
      )}</Container>
  );
};

export default PurchasesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/reports/components/mobile/MobileProductBalanceFilter.tsx =====
// File: src/pages/reports/components/mobile/MobileProductBalanceFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface ProductBalanceFilterState {
  searchQuery: string;
  warehouseFilter: string;
  stockFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ProductBalanceFilterState;
  onFiltersChange: (filters: ProductBalanceFilterState) => void;
  warehouses: string[];
  totalResults: number;
  filteredResults: number;
}

const MobileProductBalanceFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<ProductBalanceFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const stockFilterOptions = [
    { value: 'all', label: t('reports.stockFilter.all') },
    { value: 'inStock', label: t('reports.stockFilter.inStock') },
    { value: 'outOfStock', label: t('reports.stockFilter.outOfStock') },
    { value: 'lowStock', label: t('reports.stockFilter.lowStock') },
  ];

  const sortOptions = [
    { value: 'productName', label: t('reports.table.product') },
    { value: 'wareHouseName', label: t('reports.table.warehouse') },
    { value: 'totalQuantity', label: t('reports.table.totalQuantity') },
    { value: 'totalCost', label: t('reports.table.totalCostValue') },
    { value: 'totalLastPurePrice', label: t('reports.table.totalLastPurePriceValue') }
  ];

  const handleLocalChange = (field: keyof ProductBalanceFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: ProductBalanceFilterState = {
      searchQuery: '',
      warehouseFilter: 'all',
      stockFilter: 'all',
      sortBy: 'productName',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.warehouseFilter !== 'all') count++;
    if (localFilters.stockFilter !== 'all') count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('reports.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('reports.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('reports.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('reports.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('reports.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('reports.filter.filters')}</Typography>
            {(localFilters.warehouseFilter !== 'all' || localFilters.stockFilter !== 'all') && (
              <Chip 
                size="small" 
                label={[localFilters.warehouseFilter !== 'all', localFilters.stockFilter !== 'all'].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('reports.filters.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseFilter}
                label={t('reports.filters.warehouse')}
                onChange={(e) => handleLocalChange('warehouseFilter', e.target.value)}
              >
                <MenuItem value="all">{t('reports.filters.allWarehouses')}</MenuItem>
                {warehouses.map((warehouse) => (
                  <MenuItem key={warehouse} value={warehouse}>
                    {warehouse}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('reports.filters.stockStatus')}</InputLabel>
              <Select
                value={localFilters.stockFilter}
                label={t('reports.filters.stockStatus')}
                onChange={(e) => handleLocalChange('stockFilter', e.target.value)}
              >
                {stockFilterOptions.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('reports.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('reports.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('reports.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('reports.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('reports.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('reports.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('reports.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('reports.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('reports.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileProductBalanceFilter;

===== src/Pages/reports/components/ProductBalanceCards.tsx =====
// File: src/pages/reports/components/ProductBalanceCards.tsx
import React from 'react';
import {
  Card,
  Typography,
  Box,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Grid,
  useTheme,
  Divider
} from '@mui/material';
import {
  IconChevronDown,
  IconTriangle,
  IconCheck,
  IconPackage,
  IconBuilding,
  IconCurrencyDollar
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { GroupedProductBalance } from 'src/utils/api/reportsApi';

interface Props {
  data: GroupedProductBalance[];
  loading: boolean;
}

const ProductBalanceCards: React.FC<Props> = ({ data, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const getStockStatus = (quantity: number) => {
    if (quantity === 0) {
      return {
        label: t('reports.stockStatus.outOfStock'),
        color: 'error' as const,
        icon: IconTriangle
      };
    } else if (quantity < 10) {
      return {
        label: t('reports.stockStatus.lowStock'),
        color: 'warning' as const,
        icon: IconTriangle
      };
    } else {
      return {
        label: t('reports.stockStatus.inStock'),
        color: 'success' as const,
        icon: IconCheck
      };
    }
  };

  if (loading) {
    return (
      <Card sx={{ p: 4, textAlign: 'center' }}>
        <Typography>{t('common.loading')}</Typography>
      </Card>
    );
  }

  if (data.length === 0) {
    return (
      <Card sx={{ p: 4, textAlign: 'center' }}>
        <Typography color="text.secondary">
          {t('reports.noData')}
        </Typography>
      </Card>
    );
  }

  return (
    <Box>
      {data.map((item) => {
        const status = getStockStatus(item.totalQuantity);
        
        return (
          <Card key={`${item.productID}-${item.warehouseID}`} sx={{ mb: 2 }}>
            <Accordion>
              <AccordionSummary expandIcon={<IconChevronDown />}>
                <Box sx={{ width: '100%' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <IconPackage size={18} color={theme.palette.primary.main} />
                    <Typography variant="subtitle1" sx={{ ml: 1, fontWeight: 'bold', fontSize: '0.9rem' }}>
                      {item.productName}
                    </Typography>
                  </Box>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <IconBuilding size={14} color={theme.palette.text.secondary} />
                    <Typography variant="body2" color="text.secondary" sx={{ ml: 1, fontSize: '0.8rem' }}>
                      {item.wareHouseName}
                    </Typography>
                  </Box>

                  <Grid container spacing={1} sx={{ mb: 1 }}>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="text.secondary">
                        {t('reports.table.totalQuantity')}: {item.totalQuantity.toFixed(2)}
                      </Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Chip
                        label={status.label}
                        color={status.color}
                        size="small"
                        icon={<status.icon size={12} />}
                        sx={{ fontSize: '0.65rem', height: '18px' }}
                      />
                    </Grid>
                  </Grid>

                  <Grid container spacing={1}>
                    <Grid item xs={6}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <IconCurrencyDollar size={12} color={theme.palette.success.main} />
                        <Typography variant="caption" color="success.main" sx={{ ml: 0.5, fontWeight: 'medium' }}>
                          {t('reports.table.totalCostValue')}: {item.totalCost.toFixed(2)}
                        </Typography>
                      </Box>
                    </Grid>
                    <Grid item xs={6}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <IconCurrencyDollar size={12} color={theme.palette.warning.main} />
                        <Typography variant="caption" color="warning.main" sx={{ ml: 0.5, fontWeight: 'medium' }}>
                          {t('reports.table.totalLastPurePriceValue')}: {item.totalLastPurePrice.toFixed(2)}
                        </Typography>
                      </Box>
                    </Grid>
                  </Grid>
                </Box>
              </AccordionSummary>
              
              <AccordionDetails>
                <Typography variant="subtitle2" gutterBottom fontSize="0.8rem">
                  {t('reports.table.unitBreakdown')}
                </Typography>
                
                <Grid container spacing={1}>
                  {item.units.map((unit, index) => (
                    <Grid item xs={12} key={`${unit.unitId}-${index}`}>
                      <Card variant="outlined" sx={{ p: 1 }}>
                        <Typography variant="body2" fontWeight="medium" fontSize="0.8rem">
                          {unit.unitName}
                        </Typography>
                        <Divider sx={{ my: 0.5 }} />
                        
                        <Grid container spacing={1}>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              {t('reports.table.quantity')}: {unit.unitQuantity}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              {t('reports.table.cost')}: {unit.cost.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="success.main" fontWeight="medium">
                              {t('reports.table.totalCost')}: {unit.totalCost.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              {t('reports.table.lastPurePrice')}: {unit.lastPurePrice.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Typography variant="caption" color="warning.main" fontWeight="medium">
                              {t('reports.table.totalLastPurePrice')}: {unit.totalLastPurePrice.toFixed(2)}
                            </Typography>
                          </Grid>
                        </Grid>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </AccordionDetails>
            </Accordion>
          </Card>
        );
      })}
    </Box>
  );
};

export default ProductBalanceCards;

===== src/Pages/reports/components/ProductBalanceFilters.tsx =====
// File: src/pages/reports/components/ProductBalanceFilters.tsx
import React from 'react';
import {
  Paper,
  Grid,
  TextField,
  InputAdornment,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Box,
  Typography
} from '@mui/material';
import { IconSearch, IconFilter, IconRefresh } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  searchQuery: string;
  onSearchChange: (query: string) => void;
  warehouseFilter: string;
  onWarehouseFilterChange: (warehouse: string) => void;
  stockFilter: string;
  onStockFilterChange: (filter: string) => void;
  warehouses: string[];
  onRefresh: () => void;
  loading: boolean;
}

const ProductBalanceFilters: React.FC<Props> = ({
  searchQuery,
  onSearchChange,
  warehouseFilter,
  onWarehouseFilterChange,
  stockFilter,
  onStockFilterChange,
  warehouses,
  onRefresh,
  loading
}) => {
  const { t } = useTranslation();

  const stockFilterOptions = [
    { value: 'all', label: t('reports.stockFilter.all') },
    { value: 'inStock', label: t('reports.stockFilter.inStock') },
    { value: 'outOfStock', label: t('reports.stockFilter.outOfStock') },
    { value: 'lowStock', label: t('reports.stockFilter.lowStock') },
  ];

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <IconFilter size={20} />
        <Typography variant="h6" sx={{ ml: 1 }}>
          {t('reports.filters.title')}
        </Typography>
      </Box>

      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} md={4}>
          <TextField
            fullWidth
            placeholder={t('reports.filters.searchProducts')}
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            size="small"
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel>{t('reports.filters.warehouse')}</InputLabel>
            <Select
              value={warehouseFilter}
              onChange={(e) => onWarehouseFilterChange(e.target.value)}
              label={t('reports.filters.warehouse')}
            >
              <MenuItem value="all">{t('reports.filters.allWarehouses')}</MenuItem>
              {warehouses.map((warehouse) => (
                <MenuItem key={warehouse} value={warehouse}>
                  {warehouse}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel>{t('reports.filters.stockStatus')}</InputLabel>
            <Select
              value={stockFilter}
              onChange={(e) => onStockFilterChange(e.target.value)}
              label={t('reports.filters.stockStatus')}
            >
              {stockFilterOptions.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={2}>
          <Button
            fullWidth
            variant="outlined"
            startIcon={<IconRefresh />}
            onClick={onRefresh}
            disabled={loading}
          >
            {t('common.refresh')}
          </Button>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default ProductBalanceFilters;

===== src/Pages/reports/components/ProductBalanceStats.tsx =====
// File: src/pages/reports/components/ProductBalanceStats.tsx
import React from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Box,
  useTheme
} from '@mui/material';
import {
  IconPackage,
  IconBuilding,
  IconTriangle,
  IconCheck
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { GroupedProductBalance } from 'src/utils/api/reportsApi';

interface Props {
  data: GroupedProductBalance[];
}

const ProductBalanceStats: React.FC<Props> = ({ data }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const stats = React.useMemo(() => {
    const totalProducts = new Set(data.map(item => item.productID)).size;
    const totalWarehouses = new Set(data.map(item => item.warehouseID)).size;
     const inStockProducts = data.filter(item => item.totalQuantity > 0).length;
    const outOfStockProducts = data.filter(item => item.totalQuantity === 0).length;
    return {
      totalProducts,
      totalWarehouses,
      inStockProducts,
      outOfStockProducts
    };
  }, [data]);

  const statCards = [
    {
      title: t('reports.stats.totalProducts'),
      value: stats.totalProducts,
      icon: IconPackage,
      color: theme.palette.primary.main,
      bgColor: theme.palette.primary.light + '20',
      isNumber: true
    },
    {
      title: t('reports.stats.totalWarehouses'),
      value: stats.totalWarehouses,
      icon: IconBuilding,
      color: theme.palette.info.main,
      bgColor: theme.palette.info.light + '20',
      isNumber: true
    },
    {
      title: t('reports.stats.inStock'),
      value: stats.inStockProducts,
      icon: IconCheck,
      color: theme.palette.success.main,
      bgColor: theme.palette.success.light + '20'
    },
    {
      title: t('reports.stats.outOfStock'),
      value: stats.outOfStockProducts,
      icon: IconTriangle,
      color: theme.palette.error.main,
      bgColor: theme.palette.error.light + '20'
    }
  ];

  return (
    <Grid container spacing={2} sx={{ mb: 2 }}>
      {statCards.map((stat, index) => (
        <Grid item xs={12} sm={6} md={3} key={index}>
          <Card sx={{ height: '75%' }}>
            <CardContent sx={{ p: 1 }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box
                  sx={{
                    p: 0.5,
                    borderRadius: 1.5,
                    backgroundColor: stat.bgColor,
                    mr: 1
                  }}
                >
                  <stat.icon size={20} color={stat.color} />
                </Box>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 'bold', color: stat.color, fontSize: '1.1rem' }}>
                    {stat.value}
                  </Typography>
                  <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                    {stat.title}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default ProductBalanceStats;

===== src/Pages/reports/components/ProductBalanceTable.tsx =====
// File: src/pages/reports/components/ProductBalanceTable.tsx
import React from 'react';
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Chip,
  Box,
  Collapse,
  IconButton,
  useTheme
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronRight,
  IconTriangle,
  IconCheck
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { GroupedProductBalance } from 'src/utils/api/reportsApi';

interface Props {
  data: GroupedProductBalance[];
  loading: boolean;
}

const ProductBalanceTable: React.FC<Props> = ({ data, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [expandedRows, setExpandedRows] = React.useState<Set<string>>(new Set());

  const toggleRow = (key: string) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(key)) {
      newExpanded.delete(key);
    } else {
      newExpanded.add(key);
    }
    setExpandedRows(newExpanded);
  };

  const getStockStatus = (quantity: number) => {
    if (quantity === 0) {
      return {
        label: t('reports.stockStatus.outOfStock'),
        color: 'error' as const,
        icon: IconTriangle
      };
    } else if (quantity < 10) {
      return {
        label: t('reports.stockStatus.lowStock'),
        color: 'warning' as const,
        icon: IconTriangle
      };
    } else {
      return {
        label: t('reports.stockStatus.inStock'),
        color: 'success' as const,
        icon: IconCheck
      };
    }
  };

  if (loading) {
    return (
      <Paper sx={{ p: 4, textAlign: 'center' }}>
        <Typography>{t('common.loading')}</Typography>
      </Paper>
    );
  }

  if (data.length === 0) {
    return (
      <Paper sx={{ p: 4, textAlign: 'center' }}>
        <Typography color="text.secondary">
          {t('reports.noData')}
        </Typography>
      </Paper>
    );
  }

  return (
    <Paper >
      <TableContainer>
        <Table size="small">
          <TableHead>
            <TableRow sx={{ backgroundColor: theme.palette.grey[50] }}>
              <TableCell width={40}></TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.product')}
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.warehouse')}
                </Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.totalQuantity')}
                </Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.totalCostValue')}
                </Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.totalLastPurePriceValue')}
                </Typography>
              </TableCell>
              <TableCell align="center">
                <Typography variant="subtitle2" fontWeight="bold" fontSize="0.8rem">
                  {t('reports.table.status')}
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {data.map((item) => {
              const rowKey = `${item.productID}-${item.warehouseID}`;
              const isExpanded = expandedRows.has(rowKey);
              const status = getStockStatus(item.totalQuantity);

              return (
                <React.Fragment key={rowKey}>
                  <TableRow hover sx={{ '& td': { py: 1 } }}>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={() => toggleRow(rowKey)}
                      >
                        {isExpanded ? <IconChevronDown size={16} /> : <IconChevronRight size={16} />}
                      </IconButton>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" fontWeight="medium" fontSize="0.8rem">
                        {item.productName}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" fontSize="0.8rem">
                        {item.wareHouseName}
                      </Typography>
                    </TableCell>
                    <TableCell align="right">
                      <Typography variant="body2" fontWeight="medium" fontSize="0.8rem">
                        {item.totalQuantity.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell align="right">
                      <Typography variant="body2" fontWeight="medium" fontSize="0.8rem" color="success.main">
                        {item.totalCost.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell align="right">
                      <Typography variant="body2" fontWeight="medium" fontSize="0.8rem" color="warning.main">
                        {item.totalLastPurePrice.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Chip
                        label={status.label}
                        color={status.color}
                        size="small"
                        icon={<status.icon size={12} />}
                        sx={{ fontSize: '0.65rem', height: '20px' }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell colSpan={7} sx={{ p: 0, border: 0 }}>
                      <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                        <Box sx={{ p: 1.5, backgroundColor: theme.palette.grey[100] }}>
                          <Typography variant="subtitle2" gutterBottom fontSize="0.8rem">
                            {t('reports.table.unitBreakdown')}
                          </Typography>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.unit')}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right" sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.quantity')}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right" sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.cost')}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right" sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.totalCost')}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right" sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.lastPurePrice')}
                                  </Typography>
                                </TableCell>
                                <TableCell align="right" sx={{ py: 0.5 }}>
                                  <Typography variant="caption" fontWeight="bold">
                                    {t('reports.table.totalLastPurePrice')}
                                  </Typography>
                                </TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {item.units.map((unit, index) => (
                                <TableRow key={`${unit.unitId}-${index}`}>
                                  <TableCell sx={{ py: 0.5 }}>
                                    <Typography variant="caption">
                                      {unit.unitName}
                                    </Typography>
                                  </TableCell>
                                  <TableCell align="right" sx={{ py: 0.5 }}>
                                    <Typography variant="caption">
                                      {unit.unitQuantity}
                                    </Typography>
                                  </TableCell>
                                  <TableCell align="right" sx={{ py: 0.5 }}>
                                    <Typography variant="caption">
                                      {unit.cost.toFixed(2)}
                                    </Typography>
                                  </TableCell>
                                  <TableCell align="right" sx={{ py: 0.5 }}>
                                    <Typography variant="caption" color="success.main" fontWeight="medium">
                                      {unit.totalCost.toFixed(2)}
                                    </Typography>
                                  </TableCell>
                                  <TableCell align="right" sx={{ py: 0.5 }}>
                                    <Typography variant="caption">
                                      {unit.lastPurePrice.toFixed(2)}
                                    </Typography>
                                  </TableCell>
                                  <TableCell align="right" sx={{ py: 0.5 }}>
                                    <Typography variant="caption" color="warning.main" fontWeight="medium">
                                      {unit.totalLastPurePrice.toFixed(2)}
                                    </Typography>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </Box>
                      </Collapse>
                    </TableCell>
                  </TableRow>
                </React.Fragment>
              );
            })}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default ProductBalanceTable;

===== src/Pages/reports/ProductBalanceReportPage.tsx =====
// File: src/pages/reports/ProductBalanceReportPage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import {
  Container,
  Typography,
  Box,
  Breadcrumbs,
  Link,
  useMediaQuery,
  useTheme,
  Fab,
  Badge
} from '@mui/material';
import { IconHome, IconReportAnalytics, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import ProductBalanceFilters from './components/ProductBalanceFilters';
import ProductBalanceStats from './components/ProductBalanceStats';
import ProductBalanceTable from './components/ProductBalanceTable';
import ProductBalanceCards from './components/ProductBalanceCards';
import MobileProductBalanceFilter, { ProductBalanceFilterState } from './components/mobile/MobileProductBalanceFilter';
import * as reportsApi from 'src/utils/api/reportsApi';
import { GroupedProductBalance } from 'src/utils/api/reportsApi';

const ProductBalanceReportPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [data, setData] = useState<GroupedProductBalance[]>([]);
  const [loading, setLoading] = useState(true);
  const [, setError] = useState('');
  const [filterOpen, setFilterOpen] = useState(false);

  // Desktop filters (existing)
  const [searchQuery, setSearchQuery] = useState('');
  const [warehouseFilter, setWarehouseFilter] = useState('all');
  const [stockFilter, setStockFilter] = useState('all');

  // Mobile filters
  const [mobileFilters, setMobileFilters] = useState<ProductBalanceFilterState>({
    searchQuery: '',
    warehouseFilter: 'all',
    stockFilter: 'all',
    sortBy: 'productName',
    sortOrder: 'asc'
  });

  // Load data
  const loadData = async () => {
    try {
      setLoading(true);
      const balances = await reportsApi.getProductBalancesReport();
      const grouped = reportsApi.groupProductBalances(balances);
      setData(grouped);
    } catch (err: any) {
      setError(err?.message || t('reports.errors.loadFailed'));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  // Get unique warehouses for filter
  const warehouses = useMemo(() => {
    return Array.from(new Set(data.map(item => item.wareHouseName)));
  }, [data]);

  // Desktop filter data (existing logic)
  const desktopFilteredData = useMemo(() => {
    let filtered = data;

    if (searchQuery.trim()) {
      filtered = filtered.filter(item =>
        item.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.wareHouseName.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (warehouseFilter !== 'all') {
      filtered = filtered.filter(item => item.wareHouseName === warehouseFilter);
    }

    if (stockFilter !== 'all') {
      filtered = filtered.filter(item => {
        switch (stockFilter) {
          case 'inStock':
            return item.totalQuantity > 0;
          case 'outOfStock':
            return item.totalQuantity === 0;
          case 'lowStock':
            return item.totalQuantity > 0 && item.totalQuantity < 10;
          default:
            return true;
        }
      });
    }

    return filtered;
  }, [data, searchQuery, warehouseFilter, stockFilter]);

  // Mobile filter data
  const mobileFilteredData = useMemo(() => {
    let filtered = data;

    // Search filter
    if (mobileFilters.searchQuery.trim()) {
      filtered = filtered.filter(item =>
        item.productName.toLowerCase().includes(mobileFilters.searchQuery.toLowerCase()) ||
        item.wareHouseName.toLowerCase().includes(mobileFilters.searchQuery.toLowerCase())
      );
    }

    // Warehouse filter
    if (mobileFilters.warehouseFilter !== 'all') {
      filtered = filtered.filter(item => item.wareHouseName === mobileFilters.warehouseFilter);
    }

    // Stock filter
    if (mobileFilters.stockFilter !== 'all') {
      filtered = filtered.filter(item => {
        switch (mobileFilters.stockFilter) {
          case 'inStock':
            return item.totalQuantity > 0;
          case 'outOfStock':
            return item.totalQuantity === 0;
          case 'lowStock':
            return item.totalQuantity > 0 && item.totalQuantity < 10;
          default:
            return true;
        }
      });
    }

    // Sorting
    filtered.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // Handle string values
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return filtered;
  }, [data, mobileFilters]);

  // Choose filtered data based on device type
  const filteredData = isMobile ? mobileFilteredData : desktopFilteredData;

  // Count active mobile filters
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.warehouseFilter !== 'all') count++;
    if (mobileFilters.stockFilter !== 'all') count++;
    return count;
  };

  const handleRefresh = () => {
    loadData();
  };

  return (
    <Container maxWidth="xl" sx={{ py: { xs: 1, sm: 2, md: 3 } }}>
      {/* Header */}
      <Box sx={{ mb: { xs: 2, sm: 3 } }}>
        <Breadcrumbs sx={{ mb: { xs: 1, sm: 2 } }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/');
            }}
            sx={{ 
              display: 'flex', 
              alignItems: 'center',
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            <IconHome size={isMobile ? 14 : 16} style={{ marginRight: 4 }} />
            {t('common.home')}
          </Link>
          <Typography 
            color="text.primary" 
            sx={{ 
              display: 'flex', 
              alignItems: 'center',
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            <IconReportAnalytics size={isMobile ? 14 : 16} style={{ marginRight: 4 }} />
            {t('reports.productBalance.title')}
          </Typography>
        </Breadcrumbs>

        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1" 
          gutterBottom 
          fontWeight="bold"
          sx={{ fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' } }}
        >
          {t('reports.productBalance.title')}
        </Typography>
        <Typography 
          variant="body1" 
          color="text.secondary"
          sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
        >
          {t('reports.productBalance.description')}
        </Typography>
      </Box>

      {/* Desktop Filters */}
      {!isMobile && (
        <ProductBalanceFilters
          searchQuery={searchQuery}
          onSearchChange={setSearchQuery}
          warehouseFilter={warehouseFilter}
          onWarehouseFilterChange={setWarehouseFilter}
          stockFilter={stockFilter}
          onStockFilterChange={setStockFilter}
          warehouses={warehouses}
          onRefresh={handleRefresh}
          loading={loading}
        />
      )}

      {/* Stats */}
      <ProductBalanceStats data={filteredData} />

      {/* Data Display */}
      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <ProductBalanceCards data={filteredData} loading={loading} />
        ) : (
          <ProductBalanceTable data={filteredData} loading={loading} />
        )}
      </Box>

      {/* Mobile Filter FAB */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* Mobile Filter Component */}
      {isMobile && (
        <MobileProductBalanceFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          warehouses={warehouses}
          totalResults={data.length}
          filteredResults={filteredData.length}
        />
      )}

      {/* Error*/}</Container>
  );
};

export default ProductBalanceReportPage;

===== src/Pages/safes/components/ActionsBar.tsx =====
// File: src/pages/safes/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('safes.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('safes.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;

===== src/Pages/safes/components/mobile/MobileSafesFilter.tsx =====
// File: src/pages/safes/components/mobile/MobileSafesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface SafesFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SafesFilterState;
  onFiltersChange: (filters: SafesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSafesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<SafesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('safes.active') },
    { value: 'false', label: t('safes.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('safes.name') },
    { value: 'typeName', label: t('safes.type') },
    { value: 'collectionFeePercent', label: t('safes.collectionFeePercent') },
    { value: 'isActive', label: t('safes.status') }
  ];

  const handleLocalChange = (field: keyof SafesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: SafesFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('safes.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('safes.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('safes.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('safes.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('safes.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('safes.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('safes.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('safes.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('safes.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('safes.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('safes.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('safes.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('safes.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('safes.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('safes.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('safes.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('safes.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileSafesFilter;

===== src/Pages/safes/components/mobile/SafesCards.tsx =====
// File: src/pages/safes/components/mobile/SafesCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Safe } from 'src/utils/api/pagesApi/safesApi';
import { useTranslation } from 'react-i18next';

interface Props {
  safes: Safe[];
  onEdit: (safe: Safe) => void;
  loading: boolean;
}

const SafesCards: React.FC<Props> = ({ safes, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (safes.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('safes.noSafes')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {safes.map((safe) => (
        <Grid item xs={12} sm={6} md={4} key={safe.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {safe.name}
                  </Typography>
                  
                  <Box>
                    <Chip
                      label={t(`safes.types.${safe.typeName.toLowerCase()}`)}
                      color="primary"
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                  
                  {safe.accountNumber && (
                    <Typography 
                      variant="body2" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                    >
                      {t('safes.accountNumber')}: {safe.accountNumber}
                    </Typography>
                  )}
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('safes.collectionFeePercent')}: {safe.collectionFeePercent}%
                  </Typography>
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={safe.isActive ? t('safes.active') : t('safes.inactive')}
                      color={safe.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(safe)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default SafesCards;

===== src/Pages/safes/components/PageHeader.tsx =====
// File: src/pages/safes/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { safesImportExportConfig } from '../../components/configs/importExportConfigs';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  exportData: Safe[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...safesImportExportConfig,
    onExport: () => exportData.map(safe => ({
      name: safe.name,
      typeName: safe.typeName,
      accountNumber: safe.accountNumber,
      collectionFeePercent: safe.collectionFeePercent,
      isActive: safe.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('safes.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/safes/components/SafeForm.tsx =====
// File: src/pages/safes/components/SafeForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  Switch,
  FormControlLabel,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Safe;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SafeForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const { control, handleSubmit, reset, formState: { errors } } = useForm({
    defaultValues: {
      name: '',
      typeName: 'Safe',
      accountNumber: '',
      collectionFeePercent: 0,
      isActive: true
    }
  });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        typeName: 'Safe',
        accountNumber: initialValues.accountNumber || '',
        collectionFeePercent: initialValues.collectionFeePercent,
        isActive: initialValues.isActive
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        typeName: 'Safe',
        accountNumber: '',
        collectionFeePercent: 0,
        isActive: true
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          typeName: 'Safe',
          accountNumber: '',
          collectionFeePercent: 0,
          isActive: true
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="sm" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('safes.add') : t('safes.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('safes.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="accountNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.accountNumber')}
                fullWidth
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="collectionFeePercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.collectionFeePercent')}
                type="number"
                fullWidth
                inputProps={{ step: 0.01, min: 0, max: 100 }}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="isActive"
            control={control}
            render={({ field }) => (
              <FormControlLabel
                control={
                  <Switch
                    checked={field.value}
                    onChange={field.onChange}
                    disabled={isSubmitting}
                  />
                }
                label={t('safes.isActive')}
              />
            )}
          />
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default SafeForm;

===== src/Pages/safes/components/SafesTable.tsx =====
// File: src/pages/safes/components/SafesTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  rows: Safe[];
  onEdit: (safe: Safe) => void;
}

const SafesTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<Safe>[] = [
    { field: 'name', headerName: t('safes.name'), flex: 1, minWidth: 180 },
    { 
      field: 'typeName', 
      headerName: t('safes.type'), 
      flex: 0.8,
      renderCell: ({ value }) => (
        <Chip 
          label={t(`safes.types.${value.toLowerCase()}`)} 
          color="primary" 
          variant="outlined" 
          size="small" 
        />
      )
    },
    { field: 'accountNumber', headerName: t('safes.accountNumber'), flex: 1,
      renderCell: ({ value }) => value || '-' },
    { 
      field: 'collectionFeePercent', 
      headerName: t('safes.collectionFeePercent'), 
      flex: 0.8,
      renderCell: ({ value }) => `${value}%`
    },
    { 
      field: 'isActive', 
      headerName: t('safes.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('safes.active') : t('safes.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default SafesTable;

===== src/Pages/safes/SafesPage.tsx =====
// File: src/pages/safes/SafesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SafesTable from './components/SafesTable';
import SafesCards from './components/mobile/SafesCards';
import SafeForm from './components/SafeForm';
import MobileSafesFilter, { SafesFilterState } from './components/mobile/MobileSafesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/safesApi';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const SafesPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [safes, setSafes] = React.useState<Safe[]>([]);
  const { canAdd = true } = props; // Default to true if not provided
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Safe;
  }>({ open: false, mode: 'add', current: undefined });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<SafesFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchSafes = async () => {
    try {
      const safesData = await apiSrv.getAll();
      setSafes(safesData);
    } catch (e: any) {
      setErr(e?.message || t('safes.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchSafes();
      }
      catch (e: any) { 
        setErr(e?.message || t('safes.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? safes.filter(s => 
      s.name.toLowerCase().includes(query.toLowerCase())
    ) : safes,
    [safes, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...safes];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(safe => 
        safe.name.toLowerCase().includes(searchLower) ||
        safe.typeName.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(safe => safe.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [safes, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSafes();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchSafes();
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('safes.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <SafesCards
                safes={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
                loading={loading}
              />
            )
          : (
              <SafesTable
                rows={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileSafesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={safes.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <SafeForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default SafesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/settings/components/PrinterSettings.tsx =====
// File: src/pages/settings/PrinterSettingsPage.tsx
import React from 'react';
import {
  Container, Card, CardContent, Typography, Switch, FormControlLabel,
  TextField, Select, MenuItem, FormControl, InputLabel,
  Button, Box, Alert, Snackbar, Grid, Divider, Paper,
  List, ListItem, ListItemIcon, ListItemText, Chip
} from '@mui/material';
import { 
  IconPrinter, IconUsb, IconNetwork, 
  IconCheck, IconX, IconTestPipe, IconDeviceFloppy 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useThermalPrint } from 'src/hooks/useThermalPrint';

const PrinterSettingsPage: React.FC = () => {
  const { t } = useTranslation();
  const [snackbar, setSnackbar] = React.useState({ 
    open: false, 
    message: '', 
    severity: 'success' as 'success' | 'error' | 'warning' 
  });
  
  const [settings, setSettings] = React.useState({
    thermalEnabled: localStorage.getItem('thermal_printer_enabled') !== 'false',
    printerType: localStorage.getItem('thermal_printer_type') || 'usb',
    networkIp: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
    networkPort: Number(localStorage.getItem('thermal_printer_port')) || 9100,
    autoConnect: localStorage.getItem('thermal_auto_connect') !== 'false',
    silentPrint: localStorage.getItem('thermal_silent_print') !== 'false'
  });

  const [connectionStatus, setConnectionStatus] = React.useState<{
    status: 'unknown' | 'connected' | 'disconnected' | 'testing';
    message: string;
  }>({ status: 'unknown', message: '' });

  const { print: thermalPrint } = useThermalPrint({
    printerType: settings.printerType as 'usb' | 'network',
    networkConfig: {
      ip: settings.networkIp,
      port: settings.networkPort
    }
  });

  // تحديث الإعدادات
  const updateSetting = (key: string, value: any) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  // حفظ الإعدادات
  const saveSettings = () => {
    try {
      localStorage.setItem('thermal_printer_enabled', settings.thermalEnabled.toString());
      localStorage.setItem('thermal_printer_type', settings.printerType);
      localStorage.setItem('thermal_printer_ip', settings.networkIp);
      localStorage.setItem('thermal_printer_port', settings.networkPort.toString());
      localStorage.setItem('thermal_auto_connect', settings.autoConnect.toString());
      localStorage.setItem('thermal_silent_print', settings.silentPrint.toString());
      
      setSnackbar({ 
        open: true, 
        message: t('settings.printer.saved'), 
        severity: 'success' 
      });
      
      // إعادة تحميل الصفحة لتطبيق الإعدادات
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } catch (error) {
      setSnackbar({ 
        open: true, 
        message: t('settings.printer.saveError'), 
        severity: 'error' 
      });
    }
  };

  // تفعيل سريع للطباعة الحرارية
  const quickEnable = () => {
    setSettings(prev => ({
      ...prev,
      thermalEnabled: true,
      printerType: 'usb',
      autoConnect: true,
      silentPrint: true
    }));
  };

  // اختبار الاتصال
  const testConnection = async () => {
    setConnectionStatus({ status: 'testing', message: t('settings.printer.testing') });
    
    try {
      const testContent = `
=================================
        اختبار الاتصال
=================================
التاريخ: ${new Date().toLocaleDateString('ar-EG')}
الوقت: ${new Date().toLocaleTimeString('ar-EG')}

نوع الطابعة: ${settings.printerType.toUpperCase()}
${settings.printerType === 'network' ? 
  `IP: ${settings.networkIp}:${settings.networkPort}` : 
  'USB Connection'
}

اختبار الطباعة الحرارية
Test Print for Thermal Printer

=================================
      اختبار ناجح ✓
=================================
      `;

      const result = await thermalPrint(testContent);

      // Type assertion for result
      const typedResult = result as { success: boolean; error?: string };

      if (typedResult.success) {
        setConnectionStatus({ 
          status: 'connected', 
          message: t('settings.printer.connectionSuccess') 
        });
        setSnackbar({
          open: true,
          message: t('settings.printer.testSuccess'),
          severity: 'success'
        });
      } else {
        setConnectionStatus({ 
          status: 'disconnected', 
          message: typedResult.error || t('settings.printer.connectionFailed') 
        });
        setSnackbar({
          open: true,
          message: t('settings.printer.testFailed'),
          severity: 'error'
        });
      }
    } catch (error: any) {
      setConnectionStatus({ 
        status: 'disconnected', 
        message: error.message || t('settings.printer.connectionError') 
      });
      setSnackbar({
        open: true,
        message: t('settings.printer.testError'),
        severity: 'error'
      });
    }
  };

  // إعادة تعيين الإعدادات
  const resetSettings = () => {
    setSettings({
      thermalEnabled: false,
      printerType: 'usb',
      networkIp: '192.168.1.100',
      networkPort: 9100,
      autoConnect: true,
      silentPrint: true
    });
    
    // مسح البيانات المحفوظة
    localStorage.removeItem('thermal_usb_port');
    
    setSnackbar({
      open: true,
      message: t('settings.printer.resetSuccess'),
      severity: 'success'
    });
  };

  return (
    <Container maxWidth="md">
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" gutterBottom>
          {t('settings.printer.title')}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {t('settings.printer.description')}
        </Typography>
      </Box>

      {/* حالة الاتصال */}
      {connectionStatus.status !== 'unknown' && (
        <Alert 
          severity={
            connectionStatus.status === 'connected' ? 'success' : 
            connectionStatus.status === 'testing' ? 'info' : 'error'
          }
          sx={{ mb: 3 }}
          icon={
            connectionStatus.status === 'connected' ? <IconCheck /> :
            connectionStatus.status === 'testing' ? <IconTestPipe /> : <IconX />
          }
        >
          {connectionStatus.message}
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* الإعدادات الأساسية */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                <IconPrinter />
                <Typography variant="h6">
                  {t('settings.printer.basicSettings')}
                </Typography>
              </Box>

              {!settings.thermalEnabled && (
                <Alert 
                  severity="info" 
                  sx={{ mb: 3 }}
                  action={
                    <Button color="inherit" size="small" onClick={quickEnable}>
                      {t('settings.printer.quickEnable')}
                    </Button>
                  }
                >
                  {t('settings.printer.disabledInfo')}
                </Alert>
              )}

              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={settings.thermalEnabled}
                        onChange={(e) => updateSetting('thermalEnabled', e.target.checked)}
                      />
                    }
                    label={t('settings.printer.enableThermal')}
                  />
                </Grid>

                {settings.thermalEnabled && (
                  <>
                    <Grid item xs={12}>
                      <Divider />
                    </Grid>

                    <Grid item xs={12} md={6}>
                      <FormControl fullWidth>
                        <InputLabel>{t('settings.printer.type')}</InputLabel>
                        <Select
                          value={settings.printerType}
                          onChange={(e) => updateSetting('printerType', e.target.value)}
                          label={t('settings.printer.type')}
                        >
                          <MenuItem value="usb">
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <IconUsb size={16} />
                              USB Printer
                            </Box>
                          </MenuItem>
                          <MenuItem value="network">
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <IconNetwork size={16} />
                              {t('settings.printer.network')} Printer
                            </Box>
                          </MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>

                    {settings.printerType === 'network' && (
                      <>
                        <Grid item xs={12} md={6}>
                          <TextField
                            fullWidth
                            label={t('settings.printer.ip')}
                            value={settings.networkIp}
                            onChange={(e) => updateSetting('networkIp', e.target.value)}
                            placeholder="192.168.1.100"
                            helperText={t('settings.printer.ipHelp')}
                          />
                        </Grid>
                        <Grid item xs={12} md={6}>
                          <TextField
                            fullWidth
                            label={t('settings.printer.port')}
                            type="number"
                            value={settings.networkPort}
                            onChange={(e) => updateSetting('networkPort', Number(e.target.value))}
                            placeholder="9100"
                            helperText={t('settings.printer.portHelp')}
                          />
                        </Grid>
                      </>
                    )}
                  </>
                )}
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* الإعدادات المتقدمة */}
        {settings.thermalEnabled && (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 3 }}>
                  {t('settings.printer.advancedSettings')}
                </Typography>

                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={settings.autoConnect}
                          onChange={(e) => updateSetting('autoConnect', e.target.checked)}
                        />
                      }
                      label={t('settings.printer.autoConnect')}
                    />
                    <Typography variant="caption" color="text.secondary" display="block">
                      {t('settings.printer.autoConnectDesc')}
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={6}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={settings.silentPrint}
                          onChange={(e) => updateSetting('silentPrint', e.target.checked)}
                        />
                      }
                      label={t('settings.printer.silentPrint')}
                    />
                    <Typography variant="caption" color="text.secondary" display="block">
                      {t('settings.printer.silentPrintDesc')}
                    </Typography>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        )}

        {/* معلومات النظام */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                {t('settings.printer.systemInfo')}
              </Typography>
              
              <List dense>
                <ListItem>
                  <ListItemIcon>
                    <IconCheck size={20} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Web Serial API"
                    secondary={
                      'serial' in navigator ? 
                        t('settings.printer.supported') : 
                        t('settings.printer.notSupported')
                    }
                  />
                  <Chip 
                    label={'serial' in navigator ? t('common.supported') : t('common.notSupported')}
                    color={'serial' in navigator ? 'success' : 'error'}
                    size="small"
                  />
                </ListItem>
                
                <ListItem>
                  <ListItemIcon>
                    <IconNetwork size={20} />
                  </ListItemIcon>
                  <ListItemText 
                    primary={t('settings.printer.networkPrinting')}
                    secondary={t('settings.printer.networkDesc')}
                  />
                  <Chip 
                    label={t('common.supported')}
                    color="success"
                    size="small"
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* الأزرار */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'space-between', flexWrap: 'wrap' }}>
              <Box sx={{ display: 'flex', gap: 2 }}>
                {settings.thermalEnabled && (
                  <Button
                    variant="outlined"
                    onClick={testConnection}
                    startIcon={<IconTestPipe />}
                    disabled={connectionStatus.status === 'testing'}
                  >
                    {connectionStatus.status === 'testing' ? 
                      t('settings.printer.testing') : 
                      t('settings.printer.testConnection')
                    }
                  </Button>
                )}
                
                <Button
                  variant="outlined"
                  color="error"
                  onClick={resetSettings}
                >
                  {t('settings.printer.reset')}
                </Button>
              </Box>

              <Button
                variant="contained"
                onClick={saveSettings}
                startIcon={<IconDeviceFloppy />}
                size="large"
              >
                {t('common.save')}
              </Button>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PrinterSettingsPage;

===== src/Pages/suppliers/components/ActionsBar.tsx =====
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('suppliers.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 300 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('suppliers.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;

===== src/Pages/suppliers/components/mobile/MobileSuppliersFilter.tsx =====
// File: src/pages/suppliers/components/mobile/MobileSuppliersFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface SuppliersFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SuppliersFilterState;
  onFiltersChange: (filters: SuppliersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSuppliersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<SuppliersFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('suppliers.active') },
    { value: 'false', label: t('suppliers.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('suppliers.name') },
    { value: 'phone', label: t('suppliers.phone') },
    { value: 'address', label: t('suppliers.address') },
    { value: 'createdOn', label: t('suppliers.created') },
    { value: 'isActive', label: t('suppliers.status') }
  ];

  const handleLocalChange = (field: keyof SuppliersFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: SuppliersFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('suppliers.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('suppliers.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('suppliers.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('suppliers.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('suppliers.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('suppliers.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('suppliers.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('suppliers.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('suppliers.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('suppliers.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('suppliers.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('suppliers.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('suppliers.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('suppliers.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('suppliers.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('suppliers.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('suppliers.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileSuppliersFilter;

===== src/Pages/suppliers/components/PageHeader.tsx =====
// File: src/pages/suppliers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { suppliersImportExportConfig } from '../../components/configs/importExportConfigs';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

interface Props {
  exportData: Supplier[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...suppliersImportExportConfig,
    onExport: () => exportData.map(supplier => ({
      name: supplier.name,
      phone: supplier.phone,
      address: supplier.address,
      email: supplier.email,
      taxNumber: supplier.taxNumber,
      isActive: supplier.isActive,
      createdOn: supplier.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('suppliers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/suppliers/components/SupplierForm.tsx =====
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Stack,
  useMediaQuery, useTheme
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

/* ---------- types ---------- */
type FormValues = { 
  name: string; 
  phone: string;
  address: string;
  notes: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Supplier;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SupplierForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const nameFieldRef = React.useRef<HTMLInputElement>(null);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  
  const defaults: FormValues = { 
    name: '', 
    phone: '',
    address: '',
    notes: '',
    isActive: true
  };

  const { control, handleSubmit, reset, setError, clearErrors } = useForm<FormValues>({
    defaultValues: defaults
  });

  // Focus على اسم المورد عند فتح المودال
  React.useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 200);
      
      return () => clearTimeout(timer);
    }
  }, [open]);

  // إعادة تعيين النموذج عند تغيير البيانات
  React.useEffect(() => {
    if (open) {
      clearErrors(); // مسح الأخطاء السابقة
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          address: initialValues.address,
          notes: initialValues.notes,
          isActive: initialValues.isActive,
        });
      }
    }
  }, [open, mode, initialValues, reset, clearErrors]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          ...initialValues,
          ...data
        };
        await onSubmit(updateData, saveAction);
      } else {
        await onSubmit(data, saveAction);
      }
      
      // إذا كان saveAndNew، إعادة تعيين النموذج
      if (saveAction === 'saveAndNew') {
        reset(defaults);
        // Focus على الحقل الأول مرة أخرى
        setTimeout(() => {
          if (nameFieldRef.current) {
            nameFieldRef.current.focus();
          }
        }, 100);
      }
    } catch (error: any) {
      // معالجة أخطاء الـ validation من الـ API
      if (error?.errors) {
        Object.keys(error.errors).forEach(field => {
          const fieldName = field.toLowerCase();
          if (fieldName.includes('name') || fieldName.includes('suppliername')) {
            setError('name', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.nameRequired') 
            });
          } else if (fieldName.includes('phone')) {
            setError('phone', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.phoneRequired') 
            });
          } else if (fieldName.includes('address')) {
            setError('address', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.addressRequired') 
            });
          }
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      disableEscapeKeyDown={false}
      fullScreen={isMobile}
    >
      <DialogTitle>
        {mode === 'add' ? t('suppliers.add') : t('suppliers.edit')}
      </DialogTitle>

      <form>
        <DialogContent sx={{ maxHeight: isMobile ? 'none' : '70vh', overflowY: 'auto' }}>
          <Grid container spacing={3}>
            {/* ---------- Name (Required) ---------- */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ 
                  required: t('suppliers.nameRequired'),
                  minLength: {
                    value: 2,
                    message: t('suppliers.nameMinLength')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    inputRef={nameFieldRef}
                    label={`${t('suppliers.name')} *`}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    autoFocus
                  />
                )}
              />
            </Grid>

            {/* ---------- Phone (Optional) ---------- */}
            <Grid item xs={12} md={6}>
              <Controller
                name="phone"
                control={control}
                rules={{
                  pattern: {
                    value: /^[0-9+\-\s()]*$/,
                    message: t('suppliers.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.phone')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01xxxxxxxxx"
                  />
                )}
              />
            </Grid>

            {/* ---------- Address (Optional) ---------- */}
            <Grid item xs={12}>
              <Controller
                name="address"
                control={control}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.address')}
                    fullWidth
                    multiline
                    rows={2}
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                  />
                )}
              />
            </Grid>

            {/* ---------- Notes (Optional) ---------- */}
            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.notes')}
                    fullWidth
                    multiline
                    rows={3}
                  />
                )}
              />
            </Grid>

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={
                      <Switch 
                        checked={field.value} 
                        onChange={(e) => field.onChange(e.target.checked)} 
                      />
                    }
                    label={t('suppliers.status')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        {/* أزرار ثابتة في الأسفل */}
        <DialogActions 
          sx={{ 
            position: 'sticky', 
            bottom: 0, 
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            p: 2,
            flexDirection: isMobile ? 'column' : 'row',
            gap: isMobile ? 1 : 0
          }}
        >
          <Button 
            onClick={onClose} 
            type="button" 
            disabled={isSubmitting}
            fullWidth={isMobile}
          >
            {t('common.cancel')}
          </Button>
          
          <Stack direction={isMobile ? "column" : "row"} spacing={1} sx={{ width: isMobile ? '100%' : 'auto' }}>
            <Button 
              variant="outlined"
              startIcon={<IconDeviceFloppy size={20} />}
              onClick={handleSubmit((data) => submit(data, 'save'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('suppliers.saveAndExit')}
            </Button>
            
            <Button 
              variant="contained"
              startIcon={<IconPlusNew size={20} />}
              onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('suppliers.saveAndNew')}
            </Button>
          </Stack>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default SupplierForm;

===== src/Pages/suppliers/components/SupplierRow.tsx =====
// File: src/pages/suppliers/components/SupplierRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Chip,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { useTranslation } from 'react-i18next';

interface Props {
  supplier: Supplier;
  onEdit: () => void;
}

const SupplierRow: React.FC<Props> = ({ supplier, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {supplier.name}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('suppliers.phone')}: {supplier.phone || '-'}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ 
                fontSize: { xs: '0.75rem', sm: '0.875rem' },
                lineHeight: 1.3
              }}
            >
              {t('suppliers.address')}: {supplier.address || '-'}
            </Typography>
            
            {supplier.notes && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ 
                  fontSize: { xs: '0.75rem', sm: '0.875rem' },
                  lineHeight: 1.3,
                  fontStyle: 'italic'
                }}
              >
                {t('suppliers.notes')}: {supplier.notes}
              </Typography>
            )}
            
            {supplier.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('suppliers.created')}: {formatDate(supplier.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <Chip
                label={supplier.isActive ? t('suppliers.active') : t('suppliers.inactive')}
                color={supplier.isActive ? 'success' : 'default'}
                size="small"
                sx={{ alignSelf: 'flex-start' }}
              />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default SupplierRow;

===== src/Pages/suppliers/components/SupplierTable.tsx =====
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

interface Props {
  rows: Supplier[];
  onEdit: (s: Supplier) => void;
}

const SupplierTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef[] = [
    { field: 'name', headerName: t('suppliers.name'), flex: 1, minWidth: 200 },
    { field: 'phone', headerName: t('suppliers.phone'), flex: 0.8, minWidth: 150 },
    { field: 'address', headerName: t('suppliers.address'), flex: 1, minWidth: 200 },
    {
      field: 'createdOn',
      headerName: t('suppliers.created'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch (error) {
          return '-';
        }
      },
    },
    { 
      field: 'isActive', 
      headerName: t('suppliers.status'), 
      width: 110,
      renderCell: (p) => (
        <Chip
          label={p.value ? t('suppliers.active') : t('suppliers.inactive')}
          color={p.value ? 'success' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => row.id}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default SupplierTable;

===== src/Pages/suppliers/SuppliersPage.tsx =====
// File: src/pages/suppliers/SuppliersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Fab, Badge, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SupplierTable from './components/SupplierTable';
import SupplierRow from './components/SupplierRow';
import SupplierForm from './components/SupplierForm';
import MobileSuppliersFilter, { SuppliersFilterState } from './components/mobile/MobileSuppliersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/suppliersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

const SuppliersPage: React.FC = () => {
  const { t } = useTranslation();
  const [suppliers, setSuppliers] = React.useState<Supplier[]>([]);
  const canAdd = true; // Set to true or fetch from permissions/props as needed
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Supplier;
  }>({ open: false, mode: 'add', current: undefined });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<SuppliersFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchSuppliers = async () => {
    try {
      const suppliersData = await apiSrv.getAll();
      setSuppliers(suppliersData);
    } catch (e: any) {    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchSuppliers();
      }
      catch (e: any) {      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? suppliers.filter(s => 
      s.name.toLowerCase().includes(query.toLowerCase()) ||
      s.phone.toLowerCase().includes(query.toLowerCase()) ||
      s.address.toLowerCase().includes(query.toLowerCase())
    ) : suppliers,
    [suppliers, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...suppliers];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(supplier => 
        supplier.name.toLowerCase().includes(searchLower) ||
        supplier.phone.toLowerCase().includes(searchLower) ||
        supplier.address.toLowerCase().includes(searchLower) ||
        supplier.notes?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(supplier => supplier.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [suppliers, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSuppliers();
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchSuppliers();
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('suppliers.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? filtered.map(s => (
              <SupplierRow
                key={s.id}
                supplier={s}
                onEdit={() => setDialog({ open: true, mode: 'edit', current: s })}
              />
            ))
          : (
              <SupplierTable
                rows={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileSuppliersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={suppliers.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <SupplierForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default SuppliersPage;

===== src/Pages/units/components/ActionsBar.tsx =====
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('units.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('units.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;

===== src/Pages/units/components/mobile/MobileUnitsFilter.tsx =====
// File: src/pages/units/components/mobile/MobileUnitsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface UnitsFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: UnitsFilterState;
  onFiltersChange: (filters: UnitsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileUnitsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<UnitsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('units.active') },
    { value: 'false', label: t('units.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('units.name') },
    { value: 'createdOn', label: t('units.created') },
    { value: 'isActive', label: t('units.status') }
  ];

  const handleLocalChange = (field: keyof UnitsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: UnitsFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('units.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('units.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('units.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('units.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('units.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('units.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('units.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('units.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('units.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('units.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('units.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('units.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('units.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('units.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('units.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('units.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('units.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileUnitsFilter;

===== src/Pages/units/components/PageHeader.tsx =====
// File: src/pages/units/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { unitsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  exportData: Unit[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...unitsImportExportConfig,
    onExport: () => exportData.map(unit => ({
      name: unit.name,
      code: unit.code,
      isActive: unit.isActive,
      createdOn: unit.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('units.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/units/components/StatusPill.tsx =====
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ status: 'active' | 'inactive' }> = ({ status }) => {
  const { t } = useTranslation();

  return (
    <Chip
      label={t(`units.${status}`)}
      color={status === 'active' ? 'success' : 'default'}
      size="small"
    />
  );
};

===== src/Pages/units/components/types.ts =====
export type Unit = {
  unitID: string;
  unitCode: number;
  unitName: string;
  isActive: boolean;
  createDate: string;
  lastModifyDate: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
};

===== src/Pages/units/components/UnitForm.tsx =====
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

/* ---------- types ---------- */
type FormValues = { name: string; isActive: boolean };

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Unit;
  onClose: () => void;
  onSubmit: (data: FormValues | Unit) => void;
}

/* ---------- helpers ---------- */
const nextOnEnter = (e: React.KeyboardEvent) => {
  if (e.key !== 'Enter') return;
  const form = (e.currentTarget as HTMLInputElement).form!;
  const idx = Array.prototype.indexOf.call(form, e.currentTarget);
  if (idx > -1 && idx + 1 < form.elements.length) {
    (form.elements[idx + 1] as HTMLElement).focus();
  } else {
    (form as HTMLFormElement).requestSubmit();
  }
  e.preventDefault();
};

/* ---------- component ---------- */
const UnitForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const defaults: FormValues = { name: '', isActive: true };

  const { control, handleSubmit, reset } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      name: initialValues?.name ?? '',
      isActive: initialValues?.isActive ?? true,
    },
  });

  /* -- reset القيم عند تغيير النمط -- */
  React.useEffect(() => {
    if (mode === 'add') reset(defaults);
    else if (initialValues) reset({
      name: initialValues.name,
      isActive: initialValues.isActive,
    });
  }, [mode, initialValues, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('units.add') : t('units.edit')}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            {/* ---------- Name ---------- */}
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('units.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('units.name')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onKeyDown={nextOnEnter}
                  />
                )}
              />
            </Grid>

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={<Switch checked={field.value} onChange={(e) => field.onChange(e.target.checked)} />}
                    label={t('units.status')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('units.add') : t('units.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default UnitForm;

===== src/Pages/units/components/UnitRow.tsx =====
// File: src/pages/units/components/UnitRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { StatusPill } from './StatusPill';
import { useTranslation } from 'react-i18next';

interface Props {
  unit: Unit;
  onEdit: () => void;
}

const UnitRow: React.FC<Props> = ({ unit, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {unit.name}
            </Typography>
            
            
            {unit.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('units.created')}: {formatDate(unit.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <StatusPill status={unit.isActive ? 'active' : 'inactive'} />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default UnitRow;

===== src/Pages/units/components/UnitTable.tsx =====
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  rows: Unit[];
  onEdit: (u: Unit) => void;
}

const UnitTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef[] = [
    { field: 'name', headerName: t('units.name'), flex: 1, minWidth: 180 },
    {
      field: 'createdOn',
      headerName: t('units.created'),
      flex: .8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch (error) {
          return '-';
        }
      },
    },
    { 
      field: 'isActive', 
      headerName: t('units.status'), 
      width: 110,
      renderCell: (p) => <StatusPill status={p.value ? 'active' : 'inactive'} />
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => row.id}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default UnitTable;

===== src/Pages/units/UnitsPage.tsx =====
// File: src/pages/units/UnitsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Fab, Badge, Box, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import UnitTable from './components/UnitTable';
import UnitRow from './components/UnitRow';
import UnitForm from './components/UnitForm';
import MobileUnitsFilter, { UnitsFilterState } from './components/mobile/MobileUnitsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/unitsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { useTranslation } from 'react-i18next';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

const UnitsPage: React.FC<PermissionProps> = (props) => {
  const { t } = useTranslation();
  const [items, setItems] = React.useState<Unit[]>([]);
  const { canAdd } = props;
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Unit;
  }>({ open: false, mode: 'add' });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<UnitsFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { setItems(await apiSrv.getAll()); }
      catch (e: any) { setErr(e?.message || 'Load failed'); }
      finally { setLoad(false); }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? items.filter(u => u.name.toLowerCase().includes(query.toLowerCase())) : items,
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(unit => 
        unit.name.toLowerCase().includes(searchLower)      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(unit => unit.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (body: { name: string; }) => {
    try {
      const nw = await apiSrv.add(body);
      setItems(p => [nw, ...p]);
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  const handleUpdate = async (u: Unit) => {
    try {
      const up = await apiSrv.update(u);
      setItems(p => p.map(x => x.id === up.id ? up : x));
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('units.add')}
          </Button>
        )}
        </Box>
      )}

      {isDownSm
        ? filtered.map(u => (
            <UnitRow
              key={u.id}
              unit={u}
              onEdit={() => setDialog({ open: true, mode: 'edit', current: u })}
            />
          ))
        : (
            <UnitTable
              rows={filtered}
              onEdit={(u) => setDialog({ open: true, mode: 'edit', current: u })}
            />
          )}

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileUnitsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={items.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <UnitForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd(data as { name: string; }))
          : ((data) => handleUpdate(data as Unit))
        }
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default UnitsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


===== src/Pages/users/UsersManagementPage.tsx =====
// File: src/pages/users/UsersManagementPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert,
  Snackbar,
  Stack,
  Card,
  CardContent,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconPlus,
  IconEdit,
  IconUser,
  IconPhone,
  IconMail,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getAllUsers, register, User } from 'src/utils/api/authApi';
import ImportExportManager from '../components/ImportExportManager';
import { usersImportExportConfig } from '../components/configs/importExportConfigs';

const UsersManagementPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const [formData, setFormData] = useState({
    userName: '',
    phoneNo: '',
    password: ''
  });

  // تحميل المستخدمين
  const loadUsers = async () => {
    try {
      setLoading(true);
      const response = await getAllUsers();
      if (response.isvalid && response.data) {
        setUsers(response.data);
      }
    } catch (error) {
      console.error('Error loading users:', error);
      setSnackbar({
        open: true,
        message: t('users.errors.loadFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsers();
  }, []);

  // فتح dialog للإضافة
  const handleAdd = () => {
    setEditingUser(null);
    setFormData({ userName: '', phoneNo: '', password: '' });
    setDialogOpen(true);
  };

  // فتح dialog للتعديل
  const handleEdit = (user: User) => {
    setEditingUser(user);
    setFormData({
      userName: user.userName,
      phoneNo: user.phoneNo,
      password: ''
    });
    setDialogOpen(true);
  };

  // حفظ المستخدم
  const handleSave = async () => {
    try {
      if (!formData.userName.trim() || !formData.phoneNo.trim()) {
        setSnackbar({
          open: true,
          message: t('users.validation.requiredFields'),
          severity: 'warning'
        });
        return;
      }

      if (!editingUser && !formData.password.trim()) {
        setSnackbar({
          open: true,
          message: t('users.validation.passwordRequired'),
          severity: 'warning'
        });
        return;
      }

      if (editingUser) {
        setSnackbar({
          open: true,
          message: t('users.messages.editComingSoon'),
          severity: 'warning'
        });
      } else {
        const success = await register(formData.userName, formData.phoneNo, formData.password);
        
        if (success) {
          setSnackbar({
            open: true,
            message: t('users.messages.addSuccess'),
            severity: 'success'
          });
          setDialogOpen(false);
          loadUsers();
        } else {
          setSnackbar({
            open: true,
            message: t('users.messages.addFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      console.error('Error saving user:', error);
      setSnackbar({
        open: true,
        message: t('users.errors.saveFailed'),
        severity: 'error'
      });
    }
  };

  // مكون عرض المستخدمين للموبايل
  const UserCard: React.FC<{ user: User }> = ({ user }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" gutterBottom>
              {user.userName}
            </Typography>
            
            <Stack spacing={1}>
              <Stack direction="row" alignItems="center" spacing={1}>
                <IconPhone size={16} />
                <Typography variant="body2">{user.phoneNo}</Typography>
              </Stack>
              
              <Stack direction="row" alignItems="center" spacing={1}>
                <IconMail size={16} />
                <Typography variant="body2">{user.email || t('common.notSpecified')}</Typography>
              </Stack>
            </Stack>
          </Box>
          
          <Stack direction="row" spacing={1}>
            <IconButton
              size="small"
              onClick={() => handleEdit(user)}
              color="primary"
            >
              <IconEdit size={16} />
            </IconButton>
          </Stack>
        </Stack>
      </CardContent>
    </Card>
  );

  const config = {
    ...usersImportExportConfig,
    onExport: () => users.map(user => ({
      userName: user.userName,
      phoneNo: user.phoneNo,
      email: user.email || '',
      id: user.id
    }))
  };

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('users.title')}
        </Typography>
        
        {/* Import/Export */}
        <ImportExportManager
          config={config}
          data={users}
          loading={loading}
          compact={isMobile}
        />
      </Box>

      {/* Actions */}
      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={handleAdd}
        >
          {t('users.actions.add')}
        </Button>
        
        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={loadUsers}
          disabled={loading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>

      {/* Content */}
      {isMobile ? (
        // Mobile View
        <Box>
          {users.length === 0 ? (
            <Card>
              <CardContent>
                <Typography color="text.secondary" align="center">
                  {t('users.noUsers')}
                </Typography>
              </CardContent>
            </Card>
          ) : (
            users.map((user) => (
              <UserCard key={user.id} user={user} />
            ))
          )}
        </Box>
      ) : (
        // Desktop View
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>{t('users.table.userName')}</TableCell>
                <TableCell>{t('users.table.phoneNumber')}</TableCell>
                <TableCell>{t('users.table.email')}</TableCell>
                <TableCell>{t('users.table.actions')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={4} align="center">
                    <Typography color="text.secondary">
                      {t('users.noUsers')}
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                users.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <IconUser size={20} />
                        <Typography>{user.userName}</Typography>
                      </Stack>
                    </TableCell>
                    <TableCell>{user.phoneNo}</TableCell>
                    <TableCell>{user.email || t('common.notSpecified')}</TableCell>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={() => handleEdit(user)}
                        color="primary"
                      >
                        <IconEdit size={16} />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {/* Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingUser ? t('users.dialog.editTitle') : t('users.dialog.addTitle')}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={2} sx={{ mt: 1 }}>
            <TextField
              label={t('users.form.userName')}
              value={formData.userName}
              onChange={(e) => setFormData(prev => ({ ...prev, userName: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('users.form.phoneNumber')}
              value={formData.phoneNo}
              onChange={(e) => setFormData(prev => ({ ...prev, phoneNo: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('users.form.password')}
              type="password"
              value={formData.password}
              onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
              fullWidth
              required={!editingUser}
              helperText={editingUser ? t('users.form.passwordHelp') : ''}
            />
          </Stack>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button onClick={handleSave} variant="contained">
            {editingUser ? t('common.update') : t('common.add')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default UsersManagementPage;

===== src/Pages/warehouses/components/ActionsBar.tsx =====
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', md: 'row' }}
      spacing={2}
      alignItems={{ md: 'center' }}
      justifyContent="space-between"
      sx={{ mb: 2 }}
    >
      <TextField
        size="small"
        placeholder={t('common.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={16} />
            </InputAdornment>
          )
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={18} />}
        onClick={onAdd}
      >
        {t('warehouses.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;

===== src/Pages/warehouses/components/mobile/MobileWarehousesFilter.tsx =====
// File: src/pages/warehouses/components/mobile/MobileWarehousesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface WarehousesFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: WarehousesFilterState;
  onFiltersChange: (filters: WarehousesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileWarehousesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<WarehousesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('warehouses.active') },
    { value: 'false', label: t('warehouses.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('warehouses.name') },
    { value: 'address', label: t('warehouses.address') },
    { value: 'createdOn', label: t('warehouses.created') },
    { value: 'isActive', label: t('warehouses.status') }
  ];

  const handleLocalChange = (field: keyof WarehousesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: WarehousesFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('warehouses.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('warehouses.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('warehouses.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('warehouses.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('warehouses.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('warehouses.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('warehouses.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('warehouses.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('warehouses.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('warehouses.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('warehouses.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('warehouses.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('warehouses.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('warehouses.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('warehouses.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('warehouses.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('warehouses.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileWarehousesFilter;

===== src/Pages/warehouses/components/PageHeader.tsx =====
// File: src/pages/warehouses/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { warehousesImportExportConfig } from '../../components/configs/importExportConfigs';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface Props {
  exportData: Warehouse[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...warehousesImportExportConfig,
    onExport: () => exportData.map(warehouse => ({
      name: warehouse.name,
      address: warehouse.address,
      isActive: warehouse.isActive,
      createdOn: warehouse.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('warehouses.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;

===== src/Pages/warehouses/components/StatusPill.tsx =====
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ status: 'active' | 'inactive' }> = ({ status }) => {
  const { t } = useTranslation();
  return (
    <Chip
      label={status === 'active' ? t('status.active') : t('status.inactive')}
      color={status === 'active' ? 'success' : 'default'}
      size="small"
    />
  );
};

===== src/Pages/warehouses/components/types.ts =====
export type Warehouse = {
  status: "active" | "inactive";
  id: string;
  code: number;
  name: string;
  address: string;
  isActive: boolean;
  createdOn: string;
};

===== src/Pages/warehouses/components/WarehouseForm.tsx =====
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

/* ---------- types ---------- */
type FormValues = { name: string; address: string; isActive: boolean };

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Warehouse;
  onClose: () => void;
  onSubmit: (data: FormValues | Warehouse) => void;
}

/* ---------- helpers ---------- */
const nextOnEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {
  if (e.key !== 'Enter') return;
  const form = e.currentTarget.form!;
  const idx  = Array.prototype.indexOf.call(form, e.currentTarget);
  if (idx > -1 && idx + 1 < form.elements.length) {
    (form.elements[idx + 1] as HTMLElement).focus();
  } else {
    (form as HTMLFormElement).requestSubmit();
  }
  e.preventDefault();
};

/* ---------- component ---------- */
const WarehouseForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();

  const defaults: FormValues = { name: '', address: '', isActive: true };

  const { control, handleSubmit, reset } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      name:      initialValues?.name   ?? '',
      address:   initialValues?.address?? '',
      isActive:  initialValues?.isActive ?? true,
    },
  });

  /* -- reset القيم عند تغيير النمط -- */
  React.useEffect(() => {
    if (mode === 'add') reset(defaults);
    else if (initialValues) reset({
      name: initialValues.name,
      address: initialValues.address,
      isActive: initialValues.isActive,
    });
  }, [mode, initialValues, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>{mode === 'add' ? t('warehouses.add') : t('warehouses.edit')}</DialogTitle>

      <DialogContent dividers>
        <Grid container spacing={2}>
          {/* ---------- Name ---------- */}
          <Grid item xs={12}>
            <Controller
              name="name"
              control={control}
              rules={{ required: true }}
              render={({ field, fieldState }) => (
                <TextField
                  {...field}
                  autoFocus
                  fullWidth
                  label={t('warehouses.name')}
                  error={fieldState.invalid}
                  helperText={fieldState.invalid && t('validation.required')}
                  onKeyDown={nextOnEnter}
                />
              )}
            />
          </Grid>

          {/* ---------- Address ---------- */}
          <Grid item xs={12}>
            <Controller
              name="address"
              control={control}
              rules={{ required: true }}
              render={({ field, fieldState }) => (
                <TextField
                  {...field}
                  fullWidth
                  label={t('warehouses.address')}
                  error={fieldState.invalid}
                  helperText={fieldState.invalid && t('validation.required')}
                  onKeyDown={nextOnEnter}
                />
              )}
            />
          </Grid>

          {/* ---------- Status ---------- */}
          <Grid item xs={12}>
            <Controller
              name="isActive"
              control={control}
              render={({ field }) => (
                <FormControlLabel
                  control={<Switch checked={field.value}
                                   onChange={e => field.onChange(e.target.checked)} />}
                  label={t('warehouses.status')}
                />
              )}
            />
          </Grid>
        </Grid>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>{t('common.cancel')}</Button>
        <Button variant="contained" onClick={handleSubmit(submit)}>
          {mode === 'add' ? t('warehouses.add') : t('warehouses.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default WarehouseForm;

===== src/Pages/warehouses/components/WarehouseRow.tsx =====
// File: src/pages/warehouses/components/WarehouseRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Warehouse } from './types';
import { StatusPill } from './StatusPill';
import { useTranslation } from 'react-i18next';

interface Props {
  warehouse: Warehouse;
  onEdit: () => void;
}

const WarehouseRow: React.FC<Props> = ({ warehouse, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {warehouse.name}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('warehouses.address')}: {warehouse.address}
            </Typography>

            {warehouse.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('warehouses.created')}: {formatDate(warehouse.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <StatusPill status={warehouse.status} />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default WarehouseRow;

===== src/Pages/warehouses/components/WarehouseTable.tsx =====
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface Props {
  rows: Warehouse[];
  onEdit: (w: Warehouse) => void;
}

const WarehouseTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

const cols: GridColDef<Warehouse>[] = [
  { field: 'name',    headerName: t('warehouses.name'), flex: 1, minWidth: 180 },
  { field: 'address', headerName: t('warehouses.address'), flex: 1 },
  { 
    field: 'createdOn', 
    headerName: t('warehouses.created'), 
    flex: .8,
    renderCell: ({ value }) => {
      if (!value) return '-';
      try {
        return new Date(value).toLocaleDateString('en-US', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit'
        });
      } catch (error) {
        return '-';
      }
    }
  },
  { field: 'isActive', headerName: t('warehouses.status'), width: 110,
    renderCell: (p) => <StatusPill status={p.value ? 'active' : 'inactive'} /> },
  {
    field: 'actions', headerName: '', width: 110, sortable: false, filterable: false,
    renderCell: ({ row }) => (
      <Stack direction="row" spacing={0.5}>
        <IconButton size="small" onClick={() => onEdit(row)}><IconEdit size={18} /></IconButton>
      </Stack>
    )
  }
];


  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default WarehouseTable;

===== src/Pages/warehouses/WarehousesPage.tsx =====
// File: src/pages/warehouses/WarehousesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Fab, Badge, Box, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

import PageHeader     from './components/PageHeader';
import ActionsBar     from './components/ActionsBar';
import WarehouseTable from './components/WarehouseTable';
import WarehouseRow   from './components/WarehouseRow';
import WarehouseForm  from './components/WarehouseForm';
import MobileWarehousesFilter, { WarehousesFilterState } from './components/mobile/MobileWarehousesFilter';

import * as apiSrv from 'src/utils/api/pagesApi/warehousesApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const WarehousesPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [items, setItems] = React.useState<Warehouse[]>([]);
  const [query, setQuery] = React.useState('');
  const [, setErr]   = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Warehouse;
  }>({ open: false, mode: 'add' });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<WarehousesFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { setItems(await apiSrv.getAll()); }
      catch (e: any) { setErr(e?.message || 'Load failed'); }
      finally { setLoad(false); }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? items.filter(w => w.name.toLowerCase().includes(query.toLowerCase())) : items,
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(warehouse => 
        warehouse.name.toLowerCase().includes(searchLower) ||
        warehouse.address?.toLowerCase().includes(searchLower) ||
        warehouse.code?.toString().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(warehouse => warehouse.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (body: { name: string; address: string }) => {
    try {
      const nw = await apiSrv.add(body);
      setItems(p => [nw, ...p]);
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.WarehouseName?.[0] || e?.message || 'Add failed';
      setErr(msg)
    }
  };

  const handleUpdate = async (w: Warehouse) => {
    try {
      const up = await apiSrv.update(w);
      setItems(p => p.map(x => x.id === up.id ? up : x));
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>

      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {props.canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('warehouses.add')}
          </Button>
        )}
        </Box>
      )}

      {isDownSm
        ? filtered.map(w => (
            <WarehouseRow
              key={w.id}
              warehouse={{
                ...w,
                status: w.isActive ? "active" : "inactive"
              }}
              onEdit={() => setDialog({ open: true, mode: 'edit', current: w })}
            />
          ))
        : (
          <WarehouseTable
            rows={filtered}
            onEdit={w => setDialog({ open: true, mode: 'edit', current: w })}
          />
        )}

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileWarehousesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={items.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <WarehouseForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd(data as { name: string; address: string }))
          : ((data) => handleUpdate(data as Warehouse))
        }
      />{loading && <p>Loading…</p>}
    </Container>
  );
};

export default WarehousesPage;

===== src/routes/authLoader.ts =====
// File: src/routes/authLoader.ts
import { redirect } from 'react-router-dom';
import { isAuthenticated } from 'src/utils/axios';

export const authLoader = () => {
  // التحقق من وجود مصادقة صحيحة
  if (!isAuthenticated()) {
    return redirect('/auth/login');
  }
  
  return null; // مسموح بالوصول
};

===== src/routes/Router.tsx =====
// File: src/routes/Router.tsx
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React, { lazy } from 'react';
import Loadable from '../layouts/full/shared/loadable/Loadable';
import { createBrowserRouter, Navigate } from 'react-router-dom';
import { authLoader } from './authLoader';
import { createProtectedPage } from 'src/utils/pageWrapper';
import DeliveryAgentsPage from 'src/Pages/pos/delivery/agents/DeliveryAgentsPage';
import DeliveryZonesPage from 'src/Pages/pos/delivery/zones/DeliveryZonesPage';
import TableSectionsPage from 'src/Pages/pos/table-sections/TableSectionsPage';
import PrinterSettingsPage from 'src/Pages/settings/components/PrinterSettings';
import HallCaptainsPage from 'src/Pages/pos/hall-captains/HallCaptainsPage';
import CustomersPage from 'src/Pages/pos/customers/CustomersPage';
import OffersPage from 'src/Pages/pos/offers/OffersPage';
import DeliveryCompaniesPage from 'src/Pages/pos/delivery/companies/DeliveryCompaniesPage';
// import SalesPage from 'src/Pages/pos/sales/SalesPage';

/* ***Layouts**** */
const FullLayout = Loadable(lazy(() => import('../layouts/full/FullLayout')));
const BlankLayout = Loadable(lazy(() => import('../layouts/blank/BlankLayout')));

/* ****Dashboard***** */
const ModernDash = Loadable(lazy(() => import('../views/dashboard/Modern')));

/* ****Auth Pages***** */
const Login = Loadable(lazy(() => import('../Pages/auth/LoginPage')));
const BranchSelection = Loadable(lazy(() => import('../Pages/auth/BranchSelectionPage')));
const Register = Loadable(lazy(() => import('../Pages/auth/RegisterPage')));

/* ****Error Pages***** */
const Error = Loadable(lazy(() => import('../views/authentication/Error')));
const Unauthorized = Loadable(lazy(() => import('../Pages/errors/UnauthorizedPage')));
const NoBranches = Loadable(lazy(() => import('../Pages/errors/NoBranchesPage')));

/* ****تحميل الصفحات الأصلية***** */
const UsersManagementOriginal = Loadable(lazy(() => import('../Pages/users/UsersManagementPage')));
const CompanySettingsOriginal = Loadable(lazy(() => import('../Pages/company/CompanySettingsPage')));
const PermissionsPageOriginal = Loadable(lazy(() => import('../Pages/permissions/PermissionsPage')));
const ProductsPageOriginal = Loadable(lazy(() => import('../Pages/products/ProductsPage')));
const GroupsPageOriginal = Loadable(lazy(() => import('../Pages/groups/GroupsPage')));
const UnitsPageOriginal = Loadable(lazy(() => import('../Pages/units/UnitsPage')));
const PosScreensPageOriginal = Loadable(lazy(() => import('../Pages/pos/screens/PosScreensPage')));
const PosPaymentMethodsPageOriginal = Loadable(lazy(() => import('../Pages/pos/payment-methods/PosPaymentMethodsPage')));
const SuppliersPageOriginal = Loadable(lazy(() => import('../Pages/suppliers/SuppliersPage')));
const WarehousesPageOriginal = Loadable(lazy(() => import('../Pages/warehouses/WarehousesPage')));
const AccountsPageOriginal = Loadable(lazy(() => import('../Pages/accounts/AccountsPage')));
const SafesPageOriginal = Loadable(lazy(() => import('../Pages/safes/SafesPage')));
const AdjustmentsListPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/AdjustmentsListPage')));
const InventoryAdjustmentPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/InventoryAdjustmentPage')));
const AdjustmentViewPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/components/AdjustmentViewPage')));
const PurchaseOrdersPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/PurchaseOrdersPage')));
const AddPurchaseOrderPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/AddPurchaseOrderPage')));
const EditPurchaseOrderPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/EditPurchaseOrderPage')));
const PurchasesPageOriginal = Loadable(lazy(() => import('../Pages/purchases/PurchasesPage')));
const AddPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/AddPurchasePage')));
const EditPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/EditPurchasePage')));
const ViewPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/components/ViewPurchasePage')));
const ProductBalanceReportPageOriginal = Loadable(lazy(() => import('../Pages/reports/ProductBalanceReportPage')));
const PosProductsPageOriginal = Loadable(lazy(() => import('../Pages/pos/products/PosProductsPage')));
const AdditionProductsPage = Loadable(lazy(() => import('../Pages/pos/additions/AdditionProductsPage')))
const SalesPage2 = Loadable(lazy(() => import('../Pages/pos/newSales/index')));
/* ****إنشاء الصفحات المحمية***** */
const UsersManagement = createProtectedPage(UsersManagementOriginal, 'USERS');
const CompanySettings = createProtectedPage(CompanySettingsOriginal, 'COMPANY');
const PermissionsPage = createProtectedPage(PermissionsPageOriginal, 'PERMISSIONS');
const ProductsPage = createProtectedPage(ProductsPageOriginal, 'PRODUCTS');
const GroupsPage = createProtectedPage(GroupsPageOriginal, 'GROUPS');
const UnitsPage = createProtectedPage(UnitsPageOriginal, 'UNITS');
const PosScreensPage = createProtectedPage(PosScreensPageOriginal, 'POS_SCREENS');
const PosPaymentMethodsPage = createProtectedPage(PosPaymentMethodsPageOriginal, 'PAYMENT_METHODS');
const SuppliersPage = createProtectedPage(SuppliersPageOriginal, 'SUPPLIERS');
const WarehousesPage = createProtectedPage(WarehousesPageOriginal, 'WAREHOUSES');
const AccountsPage = createProtectedPage(AccountsPageOriginal, 'ACCOUNTS');
const SafesPage = createProtectedPage(SafesPageOriginal, 'SAFES');
const AdjustmentsListPage = createProtectedPage(AdjustmentsListPageOriginal, 'INVENTORY_ADJUSTMENTS');
const InventoryAdjustmentPage = createProtectedPage(InventoryAdjustmentPageOriginal, 'INVENTORY_ADJUSTMENTS');
const AdjustmentViewPage = createProtectedPage(AdjustmentViewPageOriginal, 'INVENTORY_ADJUSTMENTS');
const PurchaseOrdersPage = createProtectedPage(PurchaseOrdersPageOriginal, 'PURCHASE_ORDERS');
const AddPurchaseOrderPage = createProtectedPage(AddPurchaseOrderPageOriginal, 'PURCHASE_ORDERS');
const EditPurchaseOrderPage = createProtectedPage(EditPurchaseOrderPageOriginal, 'PURCHASE_ORDERS');
const PurchasesPage = createProtectedPage(PurchasesPageOriginal, 'PURCHASES');
const AddPurchasePage = createProtectedPage(AddPurchasePageOriginal, 'PURCHASES');
const EditPurchasePage = createProtectedPage(EditPurchasePageOriginal, 'PURCHASES');
const ViewPurchasePage = createProtectedPage(ViewPurchasePageOriginal, 'PURCHASES');
const ProductBalanceReportPage = createProtectedPage(ProductBalanceReportPageOriginal, 'REPORTS');
const PosProductsPage = createProtectedPage(PosProductsPageOriginal, 'POS_PRODUCTS');
const AdditionProducts = createProtectedPage(AdditionProductsPage, 'ADDITION_PRODUCTS');
const Router = [
  {
    path: '/',
    element: <FullLayout />,
    loader: authLoader,
    children: [
      // Dashboard Routes
      { path: '/', element: <Navigate to="/dashboard" /> },
      { path: '/dashboard', element: <ModernDash /> },
      { path: '/dashboards/modern', element: <ModernDash /> },
      {path: '/settings/printer', element: <PrinterSettingsPage />},

      // User Management Routes
      { path: '/users', element: <UsersManagement /> },
      { path: '/company', element: <CompanySettings /> },
      { path: '/permissions', element: <PermissionsPage /> },
 
      // Product Management Routes
      { path: '/products', element: <ProductsPage /> },
      { path: '/inventory/products', element: <ProductsPage /> },
      { path: '/groups', element: <GroupsPage /> },
      { path: '/inventory/groups', element: <GroupsPage /> },
      { path: '/units', element: <UnitsPage /> },
      { path: '/inventory/units', element: <UnitsPage /> },

      // POS System Routes
      { path: '/pos/screens', element: <PosScreensPage /> },
      { path: '/pos/payment-methods', element: <PosPaymentMethodsPage /> },
      { path: '/pos/products', element: <PosProductsPage /> },
      { path: '/addition/products', element: <AdditionProducts /> },
      { path: '/pos/delivery/agents', element: <DeliveryAgentsPage /> },
      { path: '/pos/delivery/zones', element: <DeliveryZonesPage /> },
      { path: '/pos/table-sections', element: <TableSectionsPage /> },
      { path: '/pos/hall-captains', element: <HallCaptainsPage /> },
      { path: '/pos/customers', element: <CustomersPage /> },
      // Offers and Delivery Companies
      { path: '/pos/offers', element: <OffersPage /> },
      { path: '/pos/delivery/companies', element: <DeliveryCompaniesPage /> },
      // Business Entities Routes
      { path: '/suppliers', element: <SuppliersPage /> },
      { path: '/purchases/suppliers', element: <SuppliersPage /> },
      { path: '/warehouses', element: <WarehousesPage /> },
      { path: '/inventory/warehouses', element: <WarehousesPage /> },

      // Financial Routes
      { path: '/accounts', element: <AccountsPage /> },
      { path: '/accounting/accounts', element: <AccountsPage /> },
      { path: '/safes', element: <SafesPage /> },
      { path: '/accounting/safes', element: <SafesPage /> },

      // Inventory Routes
      { path: '/inventory/adjustments', element: <AdjustmentsListPage /> },
      { path: '/inventory/inventory-adjustments', element: <AdjustmentsListPage /> },
      { path: '/inventory/inventory-adjustments/new', element: <InventoryAdjustmentPage /> },
      { path: '/inventory/inventory-adjustments/:id', element: <AdjustmentViewPage /> },

      // Purchase Routes
      { path: '/purchase-orders', element: <PurchaseOrdersPage /> },
      { path: '/purchases/purchase-orders', element: <PurchaseOrdersPage /> },
      { path: '/purchases/purchase-orders/add', element: <AddPurchaseOrderPage /> },
      { path: '/purchases/purchase-orders/edit/:id', element: <EditPurchaseOrderPage /> },
      { path: '/purchases', element: <PurchasesPage /> },
      { path: '/purchases/purchases', element: <PurchasesPage /> },
      { path: '/purchases/purchases/add', element: <AddPurchasePage /> },
      { path: '/purchases/purchases/edit/:id', element: <EditPurchasePage /> },
      { path: '/purchases/purchases/view/:id', element: <ViewPurchasePage /> },

      // Reports Routes
      { path: '/reports/product-balance', element: <ProductBalanceReportPage /> },

      // Fallback for protected routes
      { path: '*', element: <Navigate to="/dashboard" /> },
    ],
  },
  {
    path: '/',
    element: <BlankLayout />,
    children: [
      // Auth Routes
      { path: '/auth/login', element: <Login /> },
      { path: '/auth/branch-selection', element: <BranchSelection /> },
      { path: '/auth/register', element: <Register /> },
      // { path: '/pos/sales', element: <SalesPage /> },
      // Error Routes
      { path: '/auth/404', element: <Error /> },
      { path: '/unauthorized', element: <Unauthorized /> },
      { path: '/auth/no-branches', element: <NoBranches /> },
      { path: '/pos/sales', element: <SalesPage2 /> },
      // Fallback for public routes
      { path: '*', element: <Navigate to="/auth/login" /> },
    ],
  },
];

const router = createBrowserRouter(Router);

export default router;

===== src/scripts/applyPermissions.ts =====
// File: scripts/applyPermissions.ts
import fs from 'fs';

const PAGES_TO_UPDATE = [
  'src/pages/products/ProductsPage.tsx',
  'src/pages/groups/GroupsPage.tsx',
  'src/pages/units/UnitsPage.tsx',
  'src/pages/suppliers/SuppliersPage.tsx',
  'src/pages/warehouses/WarehousesPage.tsx',
  'src/pages/accounts/AccountsPage.tsx',
  'src/pages/safes/SafesPage.tsx',
  'src/pages/pos-screens/PosScreensPage.tsx',
  'src/pages/pos-payment-methods/PosPaymentMethodsPage.tsx',
  // أضف باقي الصفحات
];

const PERMISSION_PROPS_INTERFACE = `
interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
`;

const PERMISSION_PROPS_DESTRUCTURING = `
  canAdd = false,
  canEdit = false,
  canDelete = false,
  canExport = false,
  canImport = false,
  canView = true,
`;

// دالة لتحديث ملف واحد
function updatePageFile(filePath: string) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // إضافة interface للصلاحيات
    if (!content.includes('interface PermissionProps')) {
      const interfaceIndex = content.indexOf('interface Props');
      if (interfaceIndex !== -1) {
        content = content.slice(0, interfaceIndex) + PERMISSION_PROPS_INTERFACE + '\n' + content.slice(interfaceIndex);
      }
    }
    
    // تحديث Props interface
    content = content.replace(
      /interface Props\s*{/,
      'interface Props extends PermissionProps {'
    );
    
    // إضافة destructuring للصلاحيات
    const componentMatch = content.match(/const\s+\w+Page:\s*React\.FC<Props>\s*=\s*\(\s*{([^}]*)}\s*\)/);
    if (componentMatch && !componentMatch[1].includes('canAdd')) {
      const newProps = componentMatch[1].trim() ? componentMatch[1] + ',\n' + PERMISSION_PROPS_DESTRUCTURING : PERMISSION_PROPS_DESTRUCTURING;
      content = content.replace(componentMatch[0], componentMatch[0].replace(componentMatch[1], newProps));
    }
    
    fs.writeFileSync(filePath, content);
    } catch (error) {
    }
}

// تطبيق التحديثات على كل الصفحات
PAGES_TO_UPDATE.forEach(updatePageFile);


===== src/scripts/cleanup-project.js =====
// File: cleanup-project.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function cleanupProject() {
  console.log('🧹 بدء تنظيف المشروع...');
  
  const srcDir = path.join(__dirname, '..'); // العودة مستوى واحد للوصول لـ src
  
  function processFile(filePath) {
    if (!filePath.endsWith('.ts') && !filePath.endsWith('.tsx')) return;
    
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // إزالة console statements
    const consoleRegex = /console\.(log|error|warn|info|debug)\([^;]*\);?\s*\n?/g;
    if (consoleRegex.test(content)) {
      content = content.replace(consoleRegex, '');
      modified = true;
    }
    
    // تبسيط try-catch blocks
    const patterns = [
      // إزالة setErr statements مع النص المحيط
      {
        regex: /\s*const msg = [^;]*\|\| t\([^;]*\);\s*\n/g,
        replacement: ''
      },
      {
        regex: /\s*setErr\([^)]*\);\s*\n/g,
        replacement: ''
      },
      {
        regex: /\s*setError\([^)]*\);\s*\n/g,
        replacement: ''
      },
      // تبسيط catch blocks الكاملة
      {
        regex: /} catch \([^)]*\) \{\s*const msg[^}]*setErr[^}]*throw [^;]*;\s*\n?\s*}/g,
        replacement: '} catch (error: any) {\n    throw error;\n  }'
      },
      {
        regex: /catch \([^)]*\) \{\s*const msg[^}]*setErr[^}]*throw [^;]*;\s*\n?\s*}/g,
        replacement: 'catch (error: any) {\n    throw error;\n  }'
      },
      // إزالة error state declarations
      {
        regex: /\s*const \[error, setErr\] = React\.useState\([^)]*\);\s*\n/g,
        replacement: ''
      },
      {
        regex: /\s*const \[error, setError\] = React\.useState\([^)]*\);\s*\n/g,
        replacement: ''
      },
      // إزالة error Snackbar components
      {
        regex: /\s*<Snackbar[^>]*error[^>]*>[\s\S]*?<\/Snackbar>\s*\n?/g,
        replacement: ''
      },
      {
        regex: /\s*<Snackbar[^>]*open=\{!!error\}[^>]*>[\s\S]*?<\/Snackbar>\s*\n?/g,
        replacement: ''
      }
    ];
    
    patterns.forEach(pattern => {
      const originalContent = content;
      content = content.replace(pattern.regex, pattern.replacement);
      if (content !== originalContent) {
        modified = true;
      }
    });
    
    // تنظيف imports غير المستخدمة
    const unusedImports = ['Snackbar', 'Alert'];
    
    unusedImports.forEach(importName => {
      // إزالة import من قائمة imports
      const importRegex = new RegExp(`\\s*,?\\s*${importName}\\s*,?`, 'g');
      const originalContent = content;
      content = content.replace(importRegex, '');
      if (content !== originalContent) {
        modified = true;
      }
    });
    
    // تنظيف imports فارغة أو مع فواصل زائدة
    content = content.replace(/import\s*{\s*,?\s*}\s*from[^;]*;\s*\n/g, '');
    content = content.replace(/import\s*{\s*,\s*([^}]+)\s*}\s*from/g, 'import { $1 } from');
    content = content.replace(/import\s*{\s*([^}]+)\s*,\s*}\s*from/g, 'import { $1 } from');
    
    // تنظيف أسطر فارغة متتالية
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`✅ تم تنظيف: ${path.relative(process.cwd(), filePath)}`);
    }
  }
  
  function walkDirectory(dir) {
    if (!fs.existsSync(dir)) {
      console.error(`❌ المجلد غير موجود: ${dir}`);
      return;
    }
    
    const files = fs.readdirSync(dir);
    
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        // تجاهل مجلدات معينة
        if (!['node_modules', '.git', 'dist', 'build'].includes(file)) {
          walkDirectory(filePath);
        }
      } else {
        processFile(filePath);
      }
    });
  }
  
  walkDirectory(srcDir);
  console.log('🎉 تم تنظيف المشروع بنجاح!');
}

// تشغيل التنظيف
cleanupProject();

===== src/scripts/cleanup-project.sh =====
#!/bin/bash
# File: cleanup-project.sh

echo "🧹 بدء تنظيف المشروع..."

# إنشاء backup
echo "📦 إنشاء backup..."
cp -r src src_backup_$(date +%Y%m%d_%H%M%S)

# مسح console.log
echo "🗑️ مسح console.log statements..."
find src -name "*.ts" -o -name "*.tsx" | xargs sed -i.bak -E '
/console\.(log|error|warn|info|debug)/d
'

# تنظيف try-catch blocks
echo "🔧 تنظيف try-catch blocks..."
find src -name "*.ts" -o -name "*.tsx" | xargs sed -i.bak -E '
# إزالة setErr و setError statements
/setErr\(.*\);?/d
/setError\(.*\);?/d
# إزالة const msg = ... statements
/const msg = .*\|\| t\(/d
# تبسيط catch blocks
s/} catch \(e: any\) \{[^}]*setErr[^}]*throw e;/} catch (e: any) {\
    throw e;/g
s/} catch \(error: any\) \{[^}]*setErr[^}]*throw error;/} catch (error: any) {\
    throw error;/g
'

# مسح ملفات backup
find src -name "*.bak" -delete

echo "✅ تم تنظيف المشروع بنجاح!"
echo "📁 تم إنشاء backup في: src_backup_*"

===== src/scripts/convert-font.js =====
// File: scripts/convert-font.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const fonts = [
  { file: 'Cairo-Regular.ttf', varName: 'cairoRegularBase64', out: 'Cairo-Regular.ts' },
  { file: 'Cairo-Bold.ttf',    varName: 'cairoBoldBase64',    out: 'Cairo-Bold.ts'    },
];

for (const { file, varName, out } of fonts) {
  const ttfPath = path.resolve(__dirname, `../assets/fonts/${file}`);
  const b64 = fs.readFileSync(ttfPath).toString('base64');
  const ts = `// Auto-generated by scripts/convert-font.js
export const ${varName} = \`
${b64}
\`;
`;
  fs.writeFileSync(path.resolve(__dirname, `../assets/fonts/${out}`), ts);
  console.log(`✅ Wrote ${out}`);
}

===== src/scripts/updatePagesWithPermissions.js =====
// File: scripts/updatePagesWithPermissions.js
import { existsSync, readFileSync, writeFileSync } from 'fs';
import path from 'path';

// الصفحات المطلوب تحديثها
const PAGES_TO_UPDATE = [
  'src/Pages/products/ProductsPage.tsx',
  'src/Pages/groups/GroupsPage.tsx', 
  'src/Pages/units/UnitsPage.tsx',
  'src/Pages/suppliers/SuppliersPage.tsx',
  'src/Pages/warehouses/WarehousesPage.tsx',
  'src/Pages/accounts/AccountsPage.tsx',
  'src/Pages/safes/SafesPage.tsx',
  'src/Pages/pos-screens/PosScreensPage.tsx',
  'src/Pages/pos-payment-methods/PosPaymentMethodsPage.tsx',
  'src/Pages/inventory/adjustments-list/AdjustmentsListPage.tsx',
  'src/Pages/purchase-orders/PurchaseOrdersPage.tsx',
  'src/Pages/purchases/PurchasesPage.tsx',
  'src/Pages/reports/ProductBalanceReportPage.tsx'
];

// Interface للصلاحيات
const PERMISSION_INTERFACE = `
interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}`;

// Props destructuring
const PERMISSION_PROPS = `  canAdd = false,
  canEdit = false,
  canDelete = false,
  canExport = false,
  canImport = false,
  canView = true,`;

// دالة لتحديث ملف واحد
function updatePageFile(filePath) {
  try {
    if (!existsSync(filePath)) {
      console.log(`⚠️  File not found: ${filePath}`);
      return;
    }

    let content = readFileSync(filePath, 'utf8');
    let modified = false;

    // 1. إضافة PermissionProps interface
    if (!content.includes('interface PermissionProps')) {
      const importIndex = content.lastIndexOf('import');
      const nextLineIndex = content.indexOf('\n', importIndex);
      content = content.slice(0, nextLineIndex + 1) + PERMISSION_INTERFACE + '\n' + content.slice(nextLineIndex + 1);
      modified = true;
    }

    // 2. تحديث Props interface
    if (content.includes('interface Props') && !content.includes('extends PermissionProps')) {
      content = content.replace(
        /interface Props(\s*{)/g,
        'interface Props extends PermissionProps$1'
      );
      modified = true;
    }

    // 3. إضافة Props interface إذا مش موجود
    if (!content.includes('interface Props')) {
      const permissionInterfaceIndex = content.indexOf('interface PermissionProps');
      const nextInterfaceIndex = content.indexOf('\n}', permissionInterfaceIndex) + 2;
      const propsInterface = `
interface Props extends PermissionProps {
  // Add other props here if needed
}`;
      content = content.slice(0, nextInterfaceIndex) + propsInterface + '\n' + content.slice(nextInterfaceIndex);
      modified = true;
    }

    // 4. تحديث Component props
    const componentRegex = /const\s+(\w+):\s*React\.FC<[^>]*>\s*=\s*\(\s*{([^}]*)}\s*\)/;
    const componentMatch = content.match(componentRegex);
    
    if (componentMatch && !componentMatch[2].includes('canAdd')) {
      const existingProps = componentMatch[2].trim();
      const newProps = existingProps ? 
        `${existingProps},\n${PERMISSION_PROPS}` : 
        PERMISSION_PROPS;
      
      content = content.replace(componentMatch[0], 
        componentMatch[0].replace(`{${componentMatch[2]}}`, `{\n${newProps}\n  ...otherProps\n}`)
      );
      modified = true;
    }

    // 5. تحديث الأزرار والعناصر المحمية
    // Add button with permission
    if (content.includes('IconPlus') && !content.includes('canAdd &&')) {
      content = content.replace(
        /<Button([^>]*startIcon={<IconPlus[^>]*>)/g,
        '{canAdd && (\n        <Button$1'
      );
      content = content.replace(
        /(<Button[^>]*IconPlus[^>]*>[^<]*<\/Button>)/g,
        '$1\n        )}'
      );
      modified = true;
    }

    // Edit button with permission  
    if (content.includes('IconEdit') && !content.includes('canEdit &&')) {
      content = content.replace(
        /<IconButton([^>]*onClick[^>]*handleEdit[^>]*>)/g,
        '{canEdit && (\n                    <IconButton$1'
      );
      content = content.replace(
        /(<IconButton[^>]*handleEdit[^>]*>[^<]*<\/IconButton>)/g,
        '$1\n                  )}'
      );
      modified = true;
    }

    // Delete button with permission
    if (content.includes('IconTrash') && !content.includes('canDelete &&')) {
      content = content.replace(
        /<IconButton([^>]*onClick[^>]*handleDelete[^>]*>)/g,
        '{canDelete && (\n                    <IconButton$1'
      );
      content = content.replace(
        /(<IconButton[^>]*handleDelete[^>]*>[^<]*<\/IconButton>)/g,
        '$1\n                  )}'
      );
      modified = true;
    }

    // ImportExportManager with permissions
    if (content.includes('ImportExportManager') && !content.includes('showImport=')) {
      content = content.replace(
        /(<ImportExportManager[^>]*)/g,
        '$1\n          showImport={canImport}\n          showExport={canExport}'
      );
      modified = true;
    }

    // حفظ الملف إذا تم تعديله
    if (modified) {
      writeFileSync(filePath, content);
      console.log(`✅ Updated: ${filePath}`);
    } else {
      console.log(`ℹ️  No changes needed: ${filePath}`);
    }

  } catch (error) {
    console.error(`❌ Error updating ${filePath}:`, error.message);
  }
}

// تشغيل السكريبت
console.log('🚀 Starting automatic page updates...\n');

PAGES_TO_UPDATE.forEach(updatePageFile);

console.log('\n🎉 All pages processed!');
console.log('\n📝 Next steps:');
console.log('1. Review the updated files');
console.log('2. Test each page to ensure permissions work correctly');
console.log('3. Add any missing imports if needed');

===== src/services/posService.ts =====
// src/services/posService.ts
import * as productsApi from '../utils/api/pagesApi/productsApi';
import * as posScreensApi from '../utils/api/pagesApi/posScreensApi';

export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number; // للعرض عندما يكون سعر واحد فقط
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface PosCategory {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  parentId?: string;
  children?: PosCategory[];
  hasChildren: boolean;
  hasProducts?: boolean;
}

// Default images
const DEFAULT_PRODUCT_IMAGE = '/images/img_rectangle_34624462.png';
const DEFAULT_CATEGORY_IMAGE = '/images/img_crepes_1.png';

// جلب كل المنتجات مرة واحدة
export const getAllPosProducts = async (): Promise<PosProduct[]> => {
  try {
    const allProducts: PosProduct[] = [];
    let pageNumber = 1;
    const pageSize = 100;
    let hasMoreData = true;

    // جلب منتجات نوع POS (1)
    while (hasMoreData) {
      const response = await productsApi.getByType(1, pageNumber, pageSize);
      const products = response.data.filter(product => product.isActive);
      
      products.forEach(product => {
        const posProduct = convertProductToPosProduct(product);
        allProducts.push(posProduct);
      });

      hasMoreData = response.pageNumber < response.pageCount;
      pageNumber++;
    }

    // جلب منتجات نوع Addition (3) أيضاً
    pageNumber = 1;
    hasMoreData = true;
    
    while (hasMoreData) {
      const response = await productsApi.getByType(3, pageNumber, pageSize);
      const products = response.data.filter(product => product.isActive);
      
      products.forEach(product => {
        const posProduct = convertProductToPosProduct(product);
        allProducts.push(posProduct);
      });

      hasMoreData = response.pageNumber < response.pageCount;
      pageNumber++;
    }

    return allProducts;
  } catch (error) {
    console.error('Error fetching all POS products:', error);
    return [];
  }
};

// تحويل Product إلى PosProduct
const convertProductToPosProduct = (product: productsApi.Product): PosProduct => {
  const prices: PosPrice[] = product.productPrices.map(price => ({
    id: price.id,
    name: price.posPriceName || 'السعر الافتراضي',
    nameArabic: price.posPriceName || 'السعر الافتراضي',
    price: price.price,
    barcode: price.barcode
  }));

  const hasMultiplePrices = prices.length > 1;
  const displayPrice = !hasMultiplePrices && prices.length > 0 ? prices[0].price : undefined;

  return {
    id: product.id,
    name: product.name,
    nameArabic: product.name,
    image: product.imageUrl || DEFAULT_PRODUCT_IMAGE,
    categoryId: product.posScreenId || 'default',
    productPrices: prices,
    hasMultiplePrices,
    displayPrice
  };
};

// جلب المنتجات حسب الفئة
export const getProductsByScreenId = (allProducts: PosProduct[], screenId: string): PosProduct[] => {
  return allProducts.filter(product => product.categoryId === screenId);
};

// البحث في المنتجات
export const searchProducts = (allProducts: PosProduct[], query: string): PosProduct[] => {
  if (!query.trim()) return [];
  
  const searchTerm = query.toLowerCase();
  return allProducts.filter(product => 
    product.nameArabic.toLowerCase().includes(searchTerm) ||
    product.name.toLowerCase().includes(searchTerm)
  );
};

// التحقق من وجود منتجات في الـ screen
export const getScreenProductsCount = (allProducts: PosProduct[], screenId: string): number => {
  return allProducts.filter(product => product.categoryId === screenId).length;
};

// تحويل PosScreen إلى PosCategory
export const convertScreenToCategory = async (screen: posScreensApi.PosScreen, allProducts: PosProduct[]): Promise<PosCategory> => {
  const productsCount = getScreenProductsCount(allProducts, screen.id);
  
  return {
    id: screen.id,
    name: screen.name,
    nameArabic: screen.name,
    image: DEFAULT_CATEGORY_IMAGE,
    parentId: screen.parentId || undefined,
    children: screen.children ? await Promise.all(screen.children.map(child => convertScreenToCategory(child, allProducts))) : [],
    hasChildren: !!(screen.children && screen.children.length > 0),
    hasProducts: productsCount > 0
  };
};

// جلب كل الـ categories
export const getAllCategories = async (allProducts: PosProduct[]): Promise<PosCategory[]> => {
  try {
    const screens = await posScreensApi.getAll();
    const categories = await Promise.all(
      screens
        .filter(screen => screen.isActive && screen.isVisible)
        .map(screen => convertScreenToCategory(screen, allProducts))
    );
    return categories;
  } catch (error) {
    console.error('Error fetching categories:', error);
    return [];
  }
};

===== src/store/apps/blog/BlogSlice.tsx =====
import axios from 'src/utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';

interface StateType {
  blogposts: any[];
  recentPosts: any[];
  blogSearch: string;
  sortBy: string;
  selectedPost: any;
}

const initialState = {
  blogposts: [],
  recentPosts: [],
  blogSearch: '',
  sortBy: 'newest',
  selectedPost: null,
};

export const BlogSlice = createSlice({
  name: 'Blog',
  initialState,
  reducers: {
    getPosts: (state: StateType, action) => {
      state.blogposts = action.payload;
    },
    getPost: (state: StateType, action) => {
      state.selectedPost = action.payload;
    },
  },
});

export const { getPosts, getPost } = BlogSlice.actions;

export const fetchBlogPosts = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get('/api/data/blog/BlogPosts');
    dispatch(getPosts(response.data));
  } catch (err) {
    throw new Error();
  }
};
export const addComment = (postId: number, comment: any) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.post('/api/data/blog/post/add', { postId, comment });
    dispatch(getPosts(response.data.posts));
  } catch (err: any) {
    throw new Error(err);
  }
};
export const fetchBlogPost = (title: string) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.post('/api/data/blog/post', { title });
    dispatch(getPost(response.data.post));
  } catch (err: any) {
    throw new Error(err);
  }
};
export default BlogSlice.reducer;

===== src/store/apps/chat/ChatSlice.tsx =====
import axios from '../../../utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';
import { uniqueId } from 'lodash';
import { sub } from 'date-fns';

const API_URL = '/api/data/chat/ChatData';

interface StateType {
  chats: any[];
  chatContent: number;
  chatSearch: string;
}

const initialState = {
  chats: [],
  chatContent: 1,
  chatSearch: '',
};

export const ChatSlice = createSlice({
  name: 'chat',
  initialState,
  reducers: {
    getChats: (state, action) => {
      state.chats = action.payload;
    },
    SearchChat: (state, action) => {
      state.chatSearch = action.payload;
    },
    SelectChat: (state: StateType, action) => {
      state.chatContent = action.payload;
    },
    sendMsg: (state: StateType, action) => {
      const conversation = action.payload;
      const { id, msg } = conversation;

      const newMessage = {
        id: id,
        msg: msg,
        type: 'text',
        attachments: [],
        createdAt: sub(new Date(), { seconds: 1 }),
        senderId: uniqueId(),
      };

      state.chats = state.chats.map((chat) =>
        chat.id === action.payload.id
          ? {
              ...chat,
              ...chat.messages.push(newMessage),
            }
          : chat,
      );
    },
  },
});

export const { SearchChat, getChats, sendMsg, SelectChat } = ChatSlice.actions;

export const fetchChats = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getChats(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default ChatSlice.reducer;

===== src/store/apps/contacts/ContactSlice.tsx =====
import axios from '../../../utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';
import type { PayloadAction } from '@reduxjs/toolkit';

const API_URL = '/api/data/contacts/ContactsData';

interface StateType {
  contacts: any[];
  contactContent: number;
  contactSearch: string;
  editContact: boolean;
  currentFilter: string;
}

const initialState = {
  contacts: [],
  contactContent: 1,
  contactSearch: '',
  editContact: false,
  currentFilter: 'show_all',
};

export const ContactSlice = createSlice({
  name: 'contacts',
  initialState,
  reducers: {
    getContacts: (state: StateType, action) => {
      state.contacts = action.payload;
    },
    SearchContact: (state: StateType, action) => {
      state.contactSearch = action.payload;
    },
    SelectContact: (state: StateType, action) => {
      state.contactContent = action.payload;
    },
    DeleteContact: (state: StateType, action) => {
      state.contacts = state.contacts.map((contact) =>
        contact.id === action.payload ? { ...contact, deleted: !contact.deleted } : contact,
      );
    },
    toggleStarredContact: (state: StateType, action) => {
      state.contacts = state.contacts.map((contact) =>
        contact.id === action.payload ? { ...contact, starred: !contact.starred } : contact,
      );
    },
    isEdit: (state: StateType) => {
      state.editContact = !state.editContact;
    },
    setVisibilityFilter: (state: StateType, action) => {
      state.currentFilter = action.payload;
    },

    UpdateContact: {
      reducer: (state: StateType, action: PayloadAction<any>) => {
        state.contacts = state.contacts.map((contact) =>
          contact.id === action.payload.id
            ? { ...contact, [action.payload.field]: action.payload.value }
            : contact,
        );
      },
      prepare: (id, field, value) => {
        return {
          payload: { id, field, value },
        };
      },
    },
    addContact: {
      reducer: (state: StateType, action: PayloadAction<any>) => {
        state.contacts.push(action.payload);
      },
      prepare: (
        id,
        firstname,
        lastname,
        image,
        department,
        company,
        phone,
        email,
        address,
        notes,
      ) => {
        return {
          payload: {
            id,
            firstname,
            lastname,
            image,
            department,
            company,
            phone,
            email,
            address,
            notes,
            frequentlycontacted: false,
            starred: false,
            deleted: false,
          },
        };
      },
    },
  },
});

export const {
  getContacts,
  SearchContact,
  isEdit,
  SelectContact,
  DeleteContact,
  toggleStarredContact,
  UpdateContact,
  addContact,
  setVisibilityFilter,
} = ContactSlice.actions;

export const fetchContacts = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getContacts(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default ContactSlice.reducer;

===== src/store/apps/eCommerce/ECommerceSlice.tsx =====
import axios from '../../../utils/axios';
import { filter, map } from 'lodash';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';

const API_URL = '/api/data/eCommerce/ProductsData';

interface StateType {
  products: any[];
  productSearch: string;
  sortBy: string;
  cart: any[];
  total: number;
  filters: {
    category: string;
    color: string;
    gender: string;
    price: string;
    rating: string;
  };
  error: string;
}

const initialState = {
  products: [],
  productSearch: '',
  sortBy: 'newest',
  cart: [],
  total: 0,
  filters: {
    category: 'All',
    color: 'All',
    gender: 'All',
    price: 'All',
    rating: '',
  },
  error: '',
};

export const EcommerceSlice = createSlice({
  name: 'ecommerce',
  initialState,
  reducers: {
    // HAS ERROR

    hasError(state: StateType, action) {
      state.error = action.payload;
    },

    // GET PRODUCTS
    getProducts: (state, action) => {
      state.products = action.payload;
    },
    SearchProduct: (state, action) => {
      state.productSearch = action.payload;
    },

    //  SORT  PRODUCTS
    sortByProducts(state, action) {
      state.sortBy = action.payload;
    },

    //  SORT  PRODUCTS
    sortByGender(state, action) {
      state.filters.gender = action.payload.gender;
    },

    //  SORT  By Color
    sortByColor(state, action) {
      state.filters.color = action.payload.color;
    },

    //  SORT  By Color
    sortByPrice(state, action) {
      state.filters.price = action.payload.price;
    },

    //  FILTER PRODUCTS
    filterProducts(state, action) {
      state.filters.category = action.payload.category;
    },

    //  FILTER Reset
    filterReset(state) {
      state.filters.category = 'All';
      state.filters.color = 'All';
      state.filters.gender = 'All';
      state.filters.price = 'All';
      state.sortBy = 'newest';
    },

    // ADD TO CART
    addToCart(state: StateType, action) {
      const product = action.payload;
      state.cart = [...state.cart, product];
    },

    // qty increment
    increment(state: StateType, action) {
      const productId = action.payload;
      const updateCart = map(state.cart, (product) => {
        if (product.id === productId) {
          return {
            ...product,
            qty: product.qty + 1,
          };
        }

        return product;
      });

      state.cart = updateCart;
    },

    // qty decrement
    decrement(state: StateType, action) {
      const productId = action.payload;
      const updateCart = map(state.cart, (product) => {
        if (product.id === productId) {
          return {
            ...product,
            qty: product.qty - 1,
          };
        }

        return product;
      });

      state.cart = updateCart;
    },

    // delete Cart
    deleteCart(state: StateType, action) {
      const updateCart = filter(state.cart, (item) => item.id !== action.payload);
      state.cart = updateCart;
    },
  },
});
export const {
  hasError,
  getProducts,
  SearchProduct,
  sortByProducts,
  filterProducts,
  sortByGender,
  increment,
  deleteCart,
  decrement,
  addToCart,
  sortByPrice,
  filterReset,
  sortByColor,
} = EcommerceSlice.actions;

export const fetchProducts = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getProducts(response.data));
  } catch (error) {
    dispatch(hasError(error));
  }
};

export default EcommerceSlice.reducer;

===== src/store/apps/email/EmailSlice.tsx =====
import axios from '../../../utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';

const API_URL = '/api/data/email/EmailData';

interface StateType {
  emails: any[];
  emailContent: number;
  emailSearch: string;
  currentFilter: string;
}

const initialState = {
  emails: [],
  emailContent: 1,
  emailSearch: '',
  currentFilter: 'inbox',
};

export const EmailSlice = createSlice({
  name: 'email',
  initialState,
  reducers: {
    getEmails: (state: StateType, action) => {
      state.emails = action.payload;
    },
    SearchEmail: (state: StateType, action) => {
      state.emailSearch = action.payload;
    },
    SelectEmail: (state: StateType, action) => {
      state.emailContent = action.payload;
    },
    starEmail: (state: StateType, action) => {
      state.emails = state.emails.map((email) =>
        email.id === action.payload ? { ...email, starred: !email.starred } : email,
      );
    },
    importantEmail: (state: StateType, action) => {
      state.emails = state.emails.map((email) =>
        email.id === action.payload ? { ...email, important: !email.important } : email,
      );
    },
    checkEmail: (state: StateType, action) => {
      state.emails = state.emails.map((email) =>
        email.id === action.payload ? { ...email, checked: !email.checked } : email,
      );
    },
    deleteEmail: (state: StateType, action) => {
      state.emails = state.emails.map((email) =>
        email.id === action.payload ? { ...email, trash: !email.trash } : email,
      );
    },
    setVisibilityFilter: (state, action) => {
      state.currentFilter = action.payload;
    },
  },
});

export const {
  SearchEmail,
  SelectEmail,
  getEmails,
  starEmail,
  importantEmail,
  setVisibilityFilter,
  deleteEmail,
  checkEmail,
} = EmailSlice.actions;

export const fetchEmails = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getEmails(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default EmailSlice.reducer;

===== src/store/apps/notes/NotesSlice.tsx =====
import axios from '../../../utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';
import type { PayloadAction } from '@reduxjs/toolkit';

const API_URL = '/api/data/notes/NotesData';

interface StateType {
  notes: any[];
  notesContent: number;
  noteSearch: string;
}

const initialState = {
  notes: [],
  notesContent: 1,
  noteSearch: '',
};

export const NotesSlice = createSlice({
  name: 'notes',
  initialState,
  reducers: {
    getNotes: (state, action) => {
      state.notes = action.payload;
    },
    SearchNotes: (state, action) => {
      state.noteSearch = action.payload;
    },
    SelectNote: (state, action) => {
      state.notesContent = action.payload;
    },

    DeleteNote(state: StateType, action) {
      const index = state.notes.findIndex((note) => note.id === action.payload);
      state.notes.splice(index, 1);
    },

    UpdateNote: {
      reducer: (state: StateType, action: PayloadAction<any>) => {
        state.notes = state.notes.map((note) =>
          note.id === action.payload.id
            ? { ...note, [action.payload.field]: action.payload.value }
            : note,
        );
      },
      prepare: (id, field, value) => {
        return {
          payload: { id, field, value },
        };
      },
    },

    addNote: {
      reducer: (state: StateType, action: PayloadAction<any>) => {
        state.notes.push(action.payload);
      },
      prepare: (id, title, color) => {
        return { payload: { id, title, color, datef: new Date().toDateString(), deleted: false } };
      },
    },
  },
});

export const { SearchNotes, getNotes, SelectNote, DeleteNote, UpdateNote, addNote } =
  NotesSlice.actions;

export const fetchNotes = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getNotes(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default NotesSlice.reducer;

===== src/store/apps/tickets/TicketSlice.tsx =====
import axios from '../../../utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { AppDispatch } from 'src/store/Store';

const API_URL = '/api/data/ticket/TicketData';

interface StateType {
  tickets: any[];
  currentFilter: string;
  ticketSearch: string;
}

const initialState = {
  tickets: [],
  currentFilter: 'total_tickets',
  ticketSearch: '',
};

export const TicketSlice = createSlice({
  name: 'ticket',
  initialState,
  reducers: {
    getTickets: (state, action) => {
      state.tickets = action.payload;
    },
    setVisibilityFilter: (state, action) => {
      state.currentFilter = action.payload;
    },
    SearchTicket: (state, action) => {
      state.ticketSearch = action.payload;
    },
    DeleteTicket: (state: StateType, action) => {
      const index = state.tickets.findIndex((ticket) => ticket.Id === action.payload);
      state.tickets.splice(index, 1);
    },
  },
});

export const { getTickets, setVisibilityFilter, SearchTicket, DeleteTicket } = TicketSlice.actions;

export const fetchTickets = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getTickets(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default TicketSlice.reducer;

===== src/store/apps/userProfile/UserProfileSlice.tsx =====
import axios from 'src/utils/axios';
import { createSlice } from '@reduxjs/toolkit';
import { map } from 'lodash';
import { AppDispatch } from 'src/store/Store';

const API_URL = '/api/data/postData';

interface StateType {
  posts: any[];
  followers: any[];
  gallery: any[];
}

const initialState = {
  posts: [],
  followers: [],
  gallery: [],
};

export const UserProfileSlice = createSlice({
  name: 'UserPost',
  initialState,
  reducers: {
    getPosts: (state, action) => {
      state.posts = action.payload;
    },
    getFollowers: (state, action) => {
      state.followers = action.payload;
    },
    getPhotos: (state, action) => {
      state.gallery = action.payload;
    },
    onToggleFollow(state: StateType, action) {
      const followerId = action.payload;

      const handleToggle = map(state.followers, (follower) => {
        if (follower.id === followerId) {
          return {
            ...follower,
            isFollowed: !follower.isFollowed,
          };
        }

        return follower;
      });

      state.followers = handleToggle;
    },
  },
});

export const { getPosts, getFollowers, onToggleFollow, getPhotos } = UserProfileSlice.actions;

export const fetchPosts = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    dispatch(getPosts(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};
export const likePosts = (postId: number) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.post('/api/data/posts/like', { postId });
    dispatch(getPosts(response.data.posts));
  } catch (err: any) {
    throw new Error(err);
  }
};
export const addComment = (postId: number, comment: any[]) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.post('/api/data/posts/comments/add', { postId, comment });
    dispatch(getPosts(response.data.posts));
  } catch (err: any) {
    throw new Error(err);
  }
};

export const addReply =
  (postId: number, commentId: any[], reply: any[]) => async (dispatch: AppDispatch) => {
    try {
      const response = await axios.post('/api/data/posts/replies/add', {
        postId,
        commentId,
        reply,
      });
      dispatch(getPosts(response.data.posts));
    } catch (err: any) {
      throw new Error(err);
    }
  };

export const fetchFollwores = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`/api/data/users`);
    dispatch(getFollowers(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export const fetchPhotos = () => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`/api/data/gallery`);
    dispatch(getPhotos(response.data));
  } catch (err: any) {
    throw new Error(err);
  }
};

export default UserProfileSlice.reducer;

===== src/store/customizer/CustomizerSlice.tsx =====
import { createSlice } from '@reduxjs/toolkit';

interface StateType {
  activeDir?: string | any;
  activeMode?: string; // This can be light or dark
  activeTheme?: string; // BLUE_THEME, GREEN_THEME, BLACK_THEME, PURPLE_THEME, ORANGE_THEME
  SidebarWidth?: number;
  MiniSidebarWidth?: number;
  TopbarHeight?: number;
  isCollapse?: boolean;
  isLayout?: string;
  isSidebarHover?: boolean;
  isMobileSidebar?: boolean;
  isHorizontal?: boolean;
  isLanguage?: string;
  isCardShadow?: boolean;
  borderRadius?: number | any;
}

const initialState: StateType = {
  activeDir: 'ltr',
  activeMode: 'light', // This can be light or dark
  activeTheme: 'BLUE_THEME', // BLUE_THEME, GREEN_THEME, BLACK_THEME, PURPLE_THEME, ORANGE_THEME
  SidebarWidth: 270,
  MiniSidebarWidth: 87,
  TopbarHeight: 70,
  isLayout: 'full', // This can be full or boxed
  isCollapse: false, // to make sidebar Mini by default
  isSidebarHover: false,
  isMobileSidebar: false,
  isHorizontal: false,
  isLanguage: 'en',
  isCardShadow: true,
  borderRadius: 7,
};

export const CustomizerSlice = createSlice({
  name: 'customizer',
  initialState,
  reducers: {
    setTheme: (state: StateType, action) => {
      state.activeTheme = action.payload;
    },
    setDarkMode: (state: StateType, action) => {
      state.activeMode = action.payload;
    },

    setDir: (state: StateType, action) => {
      state.activeDir = action.payload;
    },
    setLanguage: (state: StateType, action) => {
      state.isLanguage = action.payload;
    },
    setCardShadow: (state: StateType, action) => {
      state.isCardShadow = action.payload;
    },
    toggleSidebar: (state) => {
      state.isCollapse = !state.isCollapse;
    },
    hoverSidebar: (state: StateType, action) => {
      state.isSidebarHover = action.payload;
    },
    toggleMobileSidebar: (state) => {
      state.isMobileSidebar = !state.isMobileSidebar;
    },
    toggleLayout: (state: StateType, action) => {
      state.isLayout = action.payload;
    },
    toggleHorizontal: (state: StateType, action) => {
      state.isHorizontal = action.payload;
    },
    setBorderRadius: (state: StateType, action) => {
      state.borderRadius = action.payload;
    },
  },
});

export const {
  setTheme,
  setDarkMode,
  setDir,
  toggleSidebar,
  hoverSidebar,
  toggleMobileSidebar,
  toggleLayout,
  setBorderRadius,
  toggleHorizontal,
  setLanguage,
  setCardShadow,
} = CustomizerSlice.actions;

export default CustomizerSlice.reducer;

===== src/store/hooks.ts =====
// src/store/hooks.ts
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import type { AppState, AppDispatch } from './Store';

export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;
===== src/store/Store.tsx =====
// File: src/store/Store.ts
import { configureStore } from '@reduxjs/toolkit';
import CustomizerReducer from './customizer/CustomizerSlice';
import EcommerceReducer from './apps/eCommerce/ECommerceSlice';
import ChatsReducer from './apps/chat/ChatSlice';
import NotesReducer from './apps/notes/NotesSlice';
import EmailReducer from './apps/email/EmailSlice';
import TicketReducer from './apps/tickets/TicketSlice';
import ContactsReducer from './apps/contacts/ContactSlice';
import UserProfileReducer from './apps/userProfile/UserProfileSlice';
import BlogReducer from './apps/blog/BlogSlice';
import {
  useDispatch as useAppDispatch,
  useSelector as useAppSelector,
  TypedUseSelectorHook,
} from 'react-redux';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import { combineReducers } from '@reduxjs/toolkit';

// إعداد Redux Persist للحفاظ على حالة Customizer
const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['customizer'], // فقط customizer سيتم حفظه
};

const rootReducer = combineReducers({
  customizer: CustomizerReducer,
  ecommerceReducer: EcommerceReducer,
  chatReducer: ChatsReducer,
  emailReducer: EmailReducer,
  notesReducer: NotesReducer,
  contactsReducer: ContactsReducer,
  ticketReducer: TicketReducer,
  userpostsReducer: UserProfileReducer,
  blogReducer: BlogReducer,
});

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],
      },
    }),
  devTools: process.env.NODE_ENV !== 'production',
});

export const persistor = persistStore(store);

export type AppState = ReturnType<typeof rootReducer>;
export type AppDispatch = typeof store.dispatch;
export const { dispatch } = store;
export const useDispatch = () => useAppDispatch<AppDispatch>();
export const useSelector: TypedUseSelectorHook<AppState> = useAppSelector;

export default store;

===== src/theme/Components.tsx =====
// project imports
import './DefaultColors';
import { Theme } from '@mui/material/styles';

const components: any = (theme: Theme) => {
  return {
    MuiCssBaseline: {
      styleOverrides: {
        '*': {
          boxSizing: 'border-box',
        },
        html: {
          height: '100%',
          width: '100%',
        },
        a: {
          textDecoration: 'none',
        },
        body: {
          height: '100%',
          margin: 0,
          padding: 0,
        },
        '.ql-container.ql-snow, .ql-toolbar.ql-snow': {
          border: '0 !important', borderRadius: '7px'
        },
        '.ql-editor, .ql-snow *': {
          fontFamiy: 'inherit !important'
        },
        '#root': {
          height: '100%',
        },
        "*[dir='rtl'] .buyNowImg": {
          transform: 'scaleX(-1)',
        },
        '.border-none': {
          border: '0px',
          td: {
            border: '0px',
          },
        },
        'pre': {
          background: `${theme.palette.grey[100]} !important`,
        },
        '.btn-xs': {
          minWidth: '30px !important',
          width: '30px',
          height: '30px',
          borderRadius: '6px !important',
          padding: '0px !important',
        },
        '.hover-text-primary:hover .text-hover': {
          color: theme.palette.primary.main,
        },
        '.hoverCard:hover': {
          scale: '1.01',
          transition: ' 0.1s ease-in',
        },
        '.signup-bg': {
          position: 'absolute',
          top: 0,
          right: 0,
          height: '100%',
        },
        '.MuiBox-root': {
          borderRadius: theme.shape.borderRadius,
        },
        '.MuiCardHeader-action': {
          alignSelf: 'center !important',
        },
        '.emoji-picker-react .emoji-scroll-wrapper': {
          overflowX: 'hidden',
        },
        '.scrollbar-container': {
          borderRight: '0 !important',
        },
        '.theme-timeline .MuiTimelineOppositeContent-root': {
          minWidth: '90px',
        },
        '.Mui-root .Mui-icon': {
          color: 'inherit!important',
        },
        '.MuiTimelineConnector-root': {
          width: '1px !important',
        },
        ' .simplebar-scrollbar:before': {
          background: `${theme.palette.grey[300]} !important`,
        },
        '@keyframes gradient': {
          '0%': {
            backgroundPosition: '0% 50%',
          },
          '50%': {
            backgroundPosition: ' 100% 50%',
          },
          '100% ': {
            backgroundPosition: ' 0% 50%',
          },
        },
        '@keyframes slide': {
          '0%': {
            transform: 'translate3d(0, 0, 0)',
          },
          '100% ': {
            transform: 'translate3d(-2086px, 0, 0)',
          },
        },
        '.rounded-bars .apexcharts-bar-series.apexcharts-plot-series .apexcharts-series path': {
          clipPath: 'inset(0 0 5% 0 round 20px)',
        },
      },
    },
    MuiButtonGroup: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
      },
    },
    MuiAccordion: {
      styleOverrides: {
        root: {
          ':before': {
            backgroundColor: theme.palette.grey[100],
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          // border: `1px solid ${theme.palette.divider}`,
          backgroundImage: 'none',
        },
      },
    },
    MuiStepConnector: {
      styleOverrides: {
        line: {
          borderColor: theme.palette.divider,
        },
      },
    },
    MuiFab: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
        sizeSmall: {
          width: 30,
          height: 30,
          minHeight: 30,
        },
      },
    },
    MuiIconButton: {
      styleOverrides: {
        root: {
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        colorPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        colorSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        colorSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        colorError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        colorWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        colorInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          boxShadow: 'none',
        },
        text: {
          padding: '5px 15px',
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        textPrimary: {
          backgroundColor: theme.palette.primary.light,
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        textSecondary: {
          backgroundColor: theme.palette.secondary.light,
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        textSuccess: {
          backgroundColor: theme.palette.success.light,
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        textError: {
          backgroundColor: theme.palette.error.light,
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        textInfo: {
          backgroundColor: theme.palette.info.light,
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        textWarning: {
          backgroundColor: theme.palette.warning.light,
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        outlinedPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        outlinedSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        outlinedError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        outlinedSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        outlinedInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        outlinedWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
      },
    },
    MuiCardHeader: {
      styleOverrides: {
        root: {
          padding: '16px 24px',
        },
        title: {
          fontSize: '1.125rem',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          width: '100%',
          padding: '15px',
          backgroundImage: 'none',
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          padding: '24px',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          borderBottom: `1px solid ${theme.palette.divider}`,
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiGridItem: {
      styleOverrides: {
        root: {
          paddingTop: '30px',
          paddingLeft: '30px !important',
        },
      },
    },
    MuiLinearProgress: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.grey[200],
          borderRadius: '6px',
        },
      },
    },
    MuiTimelineConnector: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.divider,
        },
      },
    },
    MuiDivider: {
      styleOverrides: {
        root: {
          borderColor: theme.palette.divider,
        },
      },
    },

    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 600,
          fontSize: '0.75rem',
        },
      },
    },
    Mui: {
      styleOverrides: {
        filledSuccess: {
          color: 'white',
        },
        filledInfo: {
          color: 'white',
        },
        filledError: {
          color: 'white',
        },
        filledWarning: {
          color: 'white',
        },
        standardSuccess: {
          backgroundColor: theme.palette.success.light,
          color: theme.palette.success.main,
        },
        standardError: {
          backgroundColor: theme.palette.error.light,
          color: theme.palette.error.main,
        },
        standardWarning: {
          backgroundColor: theme.palette.warning.light,
          color: theme.palette.warning.main,
        },
        standardInfo: {
          backgroundColor: theme.palette.info.light,
          color: theme.palette.info.main,
        },
        outlinedSuccess: {
          borderColor: theme.palette.success.main,
          color: theme.palette.success.main,
        },
        outlinedWarning: {
          borderColor: theme.palette.warning.main,
          color: theme.palette.warning.main,
        },
        outlinedError: {
          borderColor: theme.palette.error.main,
          color: theme.palette.error.main,
        },
        outlinedInfo: {
          borderColor: theme.palette.info.main,
          color: theme.palette.info.main,
        },
        successIcon: {
          color: theme.palette.info.main,
        },
      },
    },
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor:
              theme.palette.mode === 'dark' ? theme.palette.grey[200] : theme.palette.grey[300],
          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: theme.palette.grey[300],
          },
        },
        input: {
          padding: '12px 14px',
        },
        inputSizeSmall: {
          padding: '8px 14px',
        },
      },
    },
    MuiAutocomplete: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            padding: '4px 9px'
          }
        }
      }
    },
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          color: theme.palette.background.paper,
          background: theme.palette.text.primary,
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          borderColor: `${theme.palette.divider}`,
        },
      },
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          fontSize: '1.25rem',
        },
      },
    },
    MuiPopover: {
      styleOverrides: {
        paper: {
          boxShadow: theme.shadows[9],
        },
      },
    },
  };
};
export default components;

===== src/theme/DarkThemeColors.tsx =====
const DarkThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#253662',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#1C455D',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
      background: {
        default: '#2A3447',
        dark: '#2A3547',
        paper: '#2A3447',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#103247',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#0C4339',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#26153C',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#09454B',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#05313F',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#282917',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#003638',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#40241C',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#402E32',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#082E45',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { DarkThemeColors };

===== src/theme/DefaultColors.tsx =====
const baselightTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#49BEFF',
      light: '#E8F7FF',
      dark: '#23afdb',
    },
    success: {
      main: '#13DEB9',
      light: '#E6FFFA',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#EBF3FE',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#FDEDE8',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#FEF5E5',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#F2F6FA',
      200: '#EAEFF4',
      300: '#DFE5EF',
      400: '#7C8FAC',
      500: '#5A6A85',
      600: '#2A3547',
    },
    text: {
      primary: '#2A3547',
      secondary: '#2A3547',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#f6f9fc',
    },
    divider: '#e5eaef',
    background: {
      default: '#ffffff',
    },
  },
};

const baseDarkTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#777e89',
      light: '#1C455D',
      dark: '#173f98',
    },
    success: {
      main: '#13DEB9',
      light: '#1B3C48',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#223662',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#4B313D',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#4D3A2A',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#333F55',
      200: '#465670',
      300: '#7C8FAC',
      400: '#DFE5EF',
      500: '#EAEFF4',
      600: '#F2F6FA',
    },
    text: {
      primary: '#EAEFF4',
      secondary: '#7C8FAC',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#333F55',
    },
    divider: '#333F55',
    background: {
      default: '#171c23',
      dark: '#171c23',
      paper: '#171c23',
    },
  },
};

export { baseDarkTheme, baselightTheme };

===== src/theme/LightThemeColors.tsx =====
const LightThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#ECF2FF',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#E8F7FF',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { LightThemeColors };

===== src/theme/Shadows.tsx =====
const shadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 12%) 0px 12px 24px -4px',
  '0px 6px 12px rgba(127, 145, 156, 0.12)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

const darkshadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 2%) 0px 12px 24px -4px',
  '0px 6px 12px rgba(127, 145, 156, 0.12)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

export { shadows, darkshadows };

===== src/theme/Theme.tsx =====
// File: src/theme/Theme.ts
import _ from 'lodash';
import { createTheme } from '@mui/material/styles';
import { useSelector } from 'src/store/Store';
import { useEffect, useMemo } from 'react';
import { AppState } from '../store/Store';
import components from './Components';
import typography from './Typography';
import { shadows, darkshadows } from './Shadows';
import { DarkThemeColors } from './DarkThemeColors';
import { LightThemeColors } from './LightThemeColors';
import { baseDarkTheme, baselightTheme } from './DefaultColors';
import * as locales from '@mui/material/locale';

// Cache للثيمات لتجنب إعادة الإنشاء
const themeCache = new Map();

export const BuildTheme = (config: any = {}) => {
  // إنشاء مفتاح للكاش
  const cacheKey = `${config.theme}-${config.direction}-${config.mode}`;
  
  // التحقق من وجود الثيم في الكاش
  if (themeCache.has(cacheKey)) {
    return themeCache.get(cacheKey);
  }

  const themeOptions = LightThemeColors.find((theme) => theme.name === config.theme);
  const darkthemeOptions = DarkThemeColors.find((theme) => theme.name === config.theme);
  const defaultTheme = config.mode === 'dark' ? baseDarkTheme : baselightTheme;
  const defaultShadow = config.mode === 'dark' ? darkshadows : shadows;
  const themeSelect = config.mode === 'dark' ? darkthemeOptions : themeOptions;
  
  // تحديد الخط حسب الاتجاه
  const fontFamily = config.direction === 'rtl' 
    ? '"Cairo"'
    : '"Cairo"';

  // Typography محسن للـ RTL
  const enhancedTypography = {
    ...typography,
    fontFamily: fontFamily,
    h1: { 
      ...typography.h1, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 700 : 500,
    },
    h2: { 
      ...typography.h2, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 600 : 500,
    },
    h3: { 
      ...typography.h3, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 600 : 500,
    },
    h4: { 
      ...typography.h4, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 600 : 500,
    },
    h5: { 
      ...typography.h5, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 600 : 500,
    },
    h6: { 
      ...typography.h6, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 600 : 500,
    },
    body1: { 
      ...typography.body1, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 400 : 400,
    },
    body2: { 
      ...typography.body2, 
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 400 : 400,
    },
    button: {
      ...typography.button,
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 500 : 500,
    },
    caption: {
      ...typography.caption,
      fontFamily: fontFamily,
    },
    overline: {
      ...typography.overline,
      fontFamily: fontFamily,
    },
    subtitle1: {
      ...typography.subtitle1,
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 500 : 500,
    },
    subtitle2: {
      ...typography.subtitle2,
      fontFamily: fontFamily,
      fontWeight: config.direction === 'rtl' ? 500 : 500,
    },
  };

  const baseMode = {
    palette: {
      mode: config.mode,
    },
    shape: {
      borderRadius: config.borderRadius || 8,
    },
    shadows: defaultShadow,
    typography: enhancedTypography,
  };

  const theme = createTheme(
    _.merge({}, baseMode, defaultTheme, locales, themeSelect, {
      direction: config.direction,
    }),
  );

  // مكونات محسنة للـ RTL
  const enhancedComponents = {
    ...components(theme),
    // تحسين الأيقونات للـ RTL

  };

  theme.components = enhancedComponents;

  // حفظ في الكاش
  themeCache.set(cacheKey, theme);

  return theme;
};

const ThemeSettings = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const activDir = customizer.activeDir;
  const activeTheme = customizer.activeTheme;
  const activeMode = customizer.activeMode;
  const borderRadius = customizer.borderRadius;

  // استخدام useMemo لتحسين الأداء
  const theme = useMemo(() => {
    return BuildTheme({
      direction: activDir,
      theme: activeTheme,
      mode: activeMode,
      borderRadius: borderRadius,
    });
  }, [activDir, activeTheme, activeMode, borderRadius]);

  // تحسين useEffect
  useEffect(() => {
    // استخدام requestAnimationFrame لتحسين الأداء
    requestAnimationFrame(() => {
      document.dir = activDir;
      document.documentElement.dir = activDir;
      
      // تحديث body class
      document.body.classList.remove('rtl', 'ltr');
      document.body.classList.add(activDir);
      
      // تطبيق الخط المناسب على body
      if (activDir === 'rtl') {
        document.body.style.fontFamily = '"Cairo"';
      } else {
        document.body.style.fontFamily = '"Cairo"';
      }
    });
  }, [activDir]);

  return theme;
};

// دالة لتنظيف الكاش عند الحاجة
export const clearThemeCache = () => {
  themeCache.clear();
};

export { ThemeSettings };

===== src/theme/ThemeColors.tsx =====
const ThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
      },
      background: {
        default: '#f8fffc',
        dark: '#ffffff',
        paper: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
      },
    },
  },
];

export default ThemeColors;

===== src/theme/Typography.tsx =====
const typography: any = {
  fontFamily: "'Plus Jakarta Sans', sans-serif;",
  h1: {
    fontWeight: 600,
    fontSize: '2.25rem',
    lineHeight: '2.75rem',
  },
  h2: {
    fontWeight: 600,
    fontSize: '1.875rem',
    lineHeight: '2.25rem',
  },
  h3: {
    fontWeight: 600,
    fontSize: '1.5rem',
    lineHeight: '1.75rem',
  },
  h4: {
    fontWeight: 600,
    fontSize: '1.3125rem',
    lineHeight: '1.6rem',
  },
  h5: {
    fontWeight: 600,
    fontSize: '1.125rem',
    lineHeight: '1.6rem',
  },
  h6: {
    fontWeight: 600,
    fontSize: '1rem',
    lineHeight: '1.2rem',
  },
  button: {
    textTransform: 'capitalize',
    fontWeight: 400,
  },
  body1: {
    fontSize: '0.875rem',
    fontWeight: 400,
    lineHeight: '1.334rem',
  },
  body2: {
    fontSize: '0.75rem',
    letterSpacing: '0rem',
    fontWeight: 400,
    lineHeight: '1rem',
  },
  subtitle1: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
  subtitle2: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
};

export default typography;

===== src/types/apps/blog.ts =====
export type Profile = {
  id?: string | number;
  avatar?: string;
  name?: string;
  time?: string;
};

export interface BlogType {
  id?: string;
  profile?: Profile;
  time?: Date;
  comment?: string;
  replies?: any[];
}

export interface BlogPostType {
  id?: number;
  title?: any;
  content?: string;
  coverImg?: string;
  createdAt?: Date;
  view?: number;
  share?: number;
  category?: string;
  featured?: boolean;
  author?: Profile;
  comments?: any[];
}

===== src/types/apps/chat.ts =====
type attachType = {
  icon?: string;
  file?: string;
  fileSize?: string;
};

type MessageType = {
  createdAt?: any;
  msg: string;
  senderId: number | string;
  type: string;
  attachment: attachType[];
  id: string;
};

export interface ChatsType {
  id: number | string;
  name: string;
  status: string;
  thumb: string;
  recent: boolean;
  excerpt: string;
  chatHistory?: any[];
  messages: MessageType[];
}

===== src/types/apps/contact.ts =====
export interface ContactType {
  id: number | string;
  firstname: string;
  lastname: string;
  image: string;
  department: string;
  company: string;
  phone: string;
  email: string;
  address: string;
  notes: string;
  frequentlycontacted: boolean;
  starred: boolean;
  deleted: boolean;
}

===== src/types/apps/eCommerce.ts =====
import { GeneralIcon } from './icon';

export interface ProductType {
  title: string;
  price: number;
  discount: number;
  related: boolean;
  salesPrice: number;
  category: string[];
  gender: string;
  rating: number;
  stock: boolean;
  qty: number;
  colors: string[];
  photo: string;
  id: number | string;
  created: Date;
  description: string;
}

export interface ProductFiterType {
  id: number;
  filterbyTitle?: string;
  name?: string;
  sort?: string;
  icon?: GeneralIcon | any;
  devider?: boolean;
}

export interface ProductCardProps {
  id?: string | number;
  color?: string;
  like: string;
  star: number;
  value?: string;
}

===== src/types/apps/email.ts =====
type AttachType = {
  id: string;
  image: string;
  title: string;
  fileSize: string;
};

export interface EmailType {
  id: number;
  from: string;
  thumbnail: string;
  subject: string;
  time: any;
  To: string;
  emailExcerpt: string;
  emailContent: string;
  unread: boolean;
  attachment: boolean;
  starred: boolean;
  important: boolean;
  inbox: boolean;
  sent: boolean;
  draft: boolean;
  spam: boolean;
  trash: boolean;
  label: string;
  attchments?: AttachType[];
}

===== src/types/apps/icon.ts =====
import React, { FunctionComponent } from 'react';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { TablerIcon } from '@tabler/icons-react';
import { OverridableComponent } from '@mui/material/OverridableComponent';
import { SvgIconTypeMap } from '@mui/material';

export type GeneralIcon =
  | (OverridableComponent<SvgIconTypeMap<{}, 'svg'>> & {
      muiName: string;
    })
  | React.ComponentClass<any>
  | FunctionComponent<any>
  | TablerIcon;

===== src/types/apps/invoice.ts =====
export interface   order {
    itemName: string ;
    unitPrice: number ;
    units: number;
   unitTotalPrice: number;
  }
  
  export interface  InvoiceList {
   
       id: number;
       billFrom: string ;
       billFromEmail: string;
       billFromAddress: string;
       billFromPhone: number;
       billFromFax: number ;
       billTo: string;
       billToEmail: string;
       billToAddress: string;
       billToPhone: number ;
       billToFax: number;
       orders: order[] ;
       orderDate: Date ;
       totalCost: number;
       vat: number;
       grandTotal: number;
       status: string ;
       completed: boolean ;
       isSelected: boolean ;

  }
===== src/types/apps/kanban.ts =====
export interface TodoTask {
  id: number | any;
  task: string;
  taskImage: string | null | any;
  taskText: string;
  date: string;
  taskProperty: string;
  category?: string | any;
}

export interface TodoCategory {
  id: string | any;
  name: string;
  child: TodoTask[];
}

===== src/types/apps/notes.ts =====
export interface NotesType {
  id: number;
  color?: string;
  title?: string;
  datef?: any | string;
  deleted: boolean;
}

===== src/types/apps/ticket.ts =====
export interface TicketType {
  Id: number;
  ticketTitle: string;
  ticketDescription: string;
  Status: string;
  Label: string;
  thumb: string;
  AgentName: string;
  Date: Date;
  deleted: boolean;
}

===== src/types/apps/userProfile.ts =====
export type ProfileType = {
  id: number | string;
  avatar: string;
  name: string;
  time: string;
};

export type Likes = {
  like: boolean;
  value: number;
};

export type PostImageType = {
  img: string;
  featured?: boolean;
  title?: string;
};

export type CommentDataType = {
  name?: string;
  comment?: string;
  likes?: Likes;
  video?: string;
  replies?: Reply[];
};

export type Reply = {
  id?: string | number;
  profile?: ProfileType;
  data: CommentDataType;
};

export type Comment = {
  id: string | number;
  profile: ProfileType;
  data?: CommentDataType;
};

export type PostDataType = {
  id?: string | number;
  content: string;
  images: PostImageType[];
  video?: string;
  likes: Likes;
  comments?: Comment[];
};

export type PostType = {
  id?: any;
  profile: ProfileType;
  data: PostDataType;
};

===== src/types/apps/users.ts =====
export interface userType {
  id: string;
  avatar: string;
  name: string;
  role: string;
  country: string;
  isFollowed: boolean;
}

export interface GallaryType {
  id: string;
  cover: string;
  name: string;
  time: string;
}

===== src/types/auth/auth.ts =====
export interface registerType {
  title?: string;
  subtitle?: any | any[];
  subtext?: any | any[];
}

export interface loginType {
  title?: string;
  subtitle?: any | any[];
  subtext?: any | any[];
}

export interface signInType {
  title?: string;
}

===== src/types/custom.d.ts =====
// src/types/custom.d.ts
declare module 'arabic-reshaper';
declare module 'bidi-js';

===== src/types/layout/sidebar.ts =====
export interface navItemProps {
  item: {
    icon: string;
    href?: string;
    disabled?: boolean;
    title?: string;
    subtitle?: string;
    chip?: string;
    chipColor?: string;
    variant?: string;
    external?: boolean;
    id: number;
  };
}

export interface listItemType {
  component: any;
  href?: string;
  target?: any;
  to?: any;
}

===== src/utils/api/authApi.ts =====
// File: src/utils/api/authApi.ts
import api from 'src/utils/axios';

export interface LoginResponse {
  token: string;
  expiration: string;
  branches: {
    isvalid: boolean;
    errors: string[] | null;
    data: Branch[];
  };
}

export interface Branch {
  id: string;
  name: string;
  address: string;
  phone: string;
  refCompanyId: string;
  company: Company;
  assignedUsers?: any;
  assignedUserIds?: string[];
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export interface Company {
  id: string;
  name: string;
  address: string;
  phone: string;
  email?: string;
  branches?: Branch[];
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export interface User {
  id: string;
  userName: string;
  email: string;
  phoneNo: string;
  password?: string;
}

export interface UserPage {
  pageId: number;
  pageName: string;
  description: string;
  module: number;
  hasAccess: boolean;
}

export interface PagePermission {
  permissionId: number;
  permissionName: string;
  hasPermission: boolean;
}

// تسجيل الدخول
export const login = async (phoneNo: string, password: string, tenantId: string): Promise<LoginResponse> => {
  // ⭐ إضافة TenantId في الـ headers قبل الطلب
  const response = await api.post(`/login?PhoneNo=${phoneNo}&Password=${password}`, {}, {
    headers: {
      'TenantId': tenantId // ⭐ إرسال TenantId في الـ header
    }
  });
  return response.data;
};

// تسجيل مستخدم جديد
export const register = async (userName: string, phoneNo: string, password: string): Promise<boolean> => {
  const response = await api.post(`/Register?UserName=${userName}&PhoneNo=${phoneNo}&Password=${password}`);
  return response.data;
};

// الحصول على صفحات المستخدم
export const getUserPages = async (): Promise<UserPage[]> => {
  const response = await api.get('/GetUserPages');
  return response.data;
};

// الحصول على صلاحيات صفحة معينة
export const getUserPagePermission = async (pageId: number): Promise<PagePermission[]> => {
  const response = await api.get(`/GetUserPagePermission?pageid=${pageId}`);
  return response.data;
};

// الحصول على جميع المستخدمين
export const getAllUsers = async (): Promise<{isvalid: boolean; errors: string[] | null; data: User[]}> => {
  const response = await api.get('/GetAllUsers');
  return response.data;
};

// الحصول على فروع مستخدم معين
export const getUserBranches = async (userId: string): Promise<{isvalid: boolean; errors: string[] | null; data: Branch[]}> => {
  const response = await api.get(`/GetUserBranches?userid=${userId}`);
  return response.data;
};

===== src/utils/api/helpers.ts =====
// File: src/utils/api/helpers.ts
export const buildUrlWithParams = (baseUrl: string, params: Record<string, string | number>): string => {
  const url = new URL(baseUrl, window.location.origin);
  Object.entries(params).forEach(([key, value]) => {
    url.searchParams.append(key, String(value));
  });
  return url.pathname + url.search;
};

===== src/utils/api/pagesApi/accountsApi.ts =====
// File: src/utils/api/pagesApi/accountsApi.ts
import  api  from '../../axios';

export interface Account {
  id: string;
  name: string;
  safeOrAccountType: number;
  typeName: string;
  accountNumber: string;
  collectionFeePercent: number;
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export interface AddAccountRequest {
  name: string;
  safeOrAccountType: number;
  typeName: string;
  accountNumber: string;
  collectionFeePercent: number;
}

export interface UpdateAccountRequest {
  id: string;
  name: string;
  typeName: string;
  accountNumber: string;
  collectionFeePercent: number;
}

export const getAll = async (): Promise<Account[]> => {
  try {
    const response = await api.get('/getAccounts');
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<Account> => {
  try {
    const response = await api.get(`/getAccount?id=${id}`);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const add = async (data: AddAccountRequest): Promise<Account> => {
  try {
    const response = await api.post('/AddAccount', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const update = async (data: UpdateAccountRequest): Promise<Account> => {
  try {
    const response = await api.put('/UpdateAccount', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/customersApi.ts =====
// File: src/utils/api/pagesApi/customersApi.ts
import api from '../../axios';

export interface CustomerAddress {
  id?: string;
  addressLine: string;
  floor?: string;
  apartment?: string;
  landmark?: string;
  notes?: string;
  zoneId: string;
  zoneName?: string;
  branchId?: string;
  companyID?: string;
  isActive: boolean;
}

export interface Customer {
  id: string;
  name: string;
  phone1: string;
  phone2?: string;
  phone3?: string;
  phone4?: string;
  isBlocked: boolean;
  isVIP: boolean;
  isActive: boolean;
  addresses: CustomerAddress[];
  branchId?: string;
  companyID?: string;
}

export interface CustomersResponse {
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  pageSize: number;
  data: Customer[];
}

const toCustomerAddress = (raw: any): CustomerAddress => ({
  id: raw.id,
  addressLine: raw.addressLine || '',
  floor: raw.floor || '',
  apartment: raw.apartment || '',
  landmark: raw.landmark || '',
  notes: raw.notes || '',
  zoneId: raw.zoneId || '',
  zoneName: raw.zoneName || '',
  branchId: raw.branchId || null,
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});

const toCustomer = (raw: any): Customer => ({
  id: raw.id,
  name: raw.name || '',
  phone1: raw.phone1 || '',
  phone2: raw.phone2 || '',
  phone3: raw.phone3 || '',
  phone4: raw.phone4 || '',
  isBlocked: Boolean(raw.isBlocked),
  isVIP: Boolean(raw.isVIP),
  isActive: Boolean(raw.isActive),
  addresses: raw.addresses?.map(toCustomerAddress) || [],
  branchId: raw.branchId || null,
  companyID: raw.companyID || null
});

export const getAll = async (pageNumber: number = 1, pageSize: number = 25): Promise<CustomersResponse> => {
  try {
    const response = await api.get(`/GetCustomers?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    if (response.data?.isvalid && response.data?.data) {
      return {
        totalCount: response.data.data.totalCount,
        pageCount: response.data.data.pageCount,
        pageNumber: response.data.data.pageNumber,
        pageSize: response.data.data.pageSize,
        data: response.data.data.data.map(toCustomer)
      };
    }
    return {
      totalCount: 0,
      pageCount: 0,
      pageNumber: 1,
      pageSize: 25,
      data: []
    };
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<Customer> => {
  try {
    const response = await api.get(`/GetCustomer?id=${id}`);
    if (response.data?.isvalid && response.data?.data) {
      return toCustomer(response.data.data);
    }
    throw new Error('Customer not found');
  } catch (error) {
    throw error;
  }
};

export const getByPhone = async (phone: string): Promise<Customer> => {
  try {
    const response = await api.get(`/GetCustomerByPhone?phone=${phone}`);
    if (response.data?.isvalid && response.data?.data) {
      return toCustomer(response.data.data);
    }
    throw new Error('Customer not found');
  } catch (error) {
    throw error;
  }
};

export const add = async (body: {
  name: string;
  phone1: string;
  phone2?: string;
  phone3?: string;
  phone4?: string;
  isVIP: boolean;
  isBlocked: boolean;
  isActive: boolean;
  addresses: Array<{
    addressLine: string;
    zoneId: string;
    floor?: string;
    apartment?: string;
    landmark?: string;
    notes?: string;
  }>;
}): Promise<Customer> => {
  try {
    const { data } = await api.post('/AddCustomer', body);
    return toCustomer(data.data);
  } catch (error) {
    throw error;
  }
};

export const update = async (body: {
  id: string;
  name: string;
  phone1: string;
  phone2?: string;
  phone3?: string;
  phone4?: string;
  isBlocked: boolean;
  isVIP: boolean;
  isActive: boolean;
  addresses: Array<{
    id?: string;
    addressLine: string;
    floor?: string;
    apartment?: string;
    landmark?: string;
    notes?: string;
    zoneId: string;
    zoneName?: string;
    branchId?: string;
    companyID?: string;
    isActive: boolean;
  }>;
}): Promise<Customer> => {
  try {
    const { data } = await api.post('/UpdateCustomer', body);
    return toCustomer(data.data);
  } catch (error) {
    throw error;
  }
};

export const deleteCustomer = async (id: string): Promise<void> => {
  try {
    await api.post('/DeleteCustomer', id);
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/deliveryAgentsApi.ts =====
// File: src/utils/api/pagesApi/deliveryAgentsApi.ts
import api from '../../axios';

export interface DeliveryAgent {
  id: string;
  name: string;
  phone: string;
  branchName?: string;
  branchId: string;
  companyID?: string;
  isActive: boolean;
}

const toDeliveryAgent = (raw: any): DeliveryAgent => ({
  id: raw.id,
  name: raw.name || '',
  phone: raw.phone || '',
  branchName: raw.branchName || null,
  branchId: raw.branchId || '',
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});

export const getAll = async (): Promise<DeliveryAgent[]> => {
  try {
    const response = await api.get('/GetAgents');
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toDeliveryAgent);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<DeliveryAgent> => {
  try {
    const response = await api.get(`/GetAgent?id=${id}`);
    if (response.data?.isvalid && response.data?.data) {
      return toDeliveryAgent(response.data.data);
    }
    throw new Error('Agent not found');
  } catch (error) {
    throw error;
  }
};

export const getByBranch = async (branchId: string): Promise<DeliveryAgent[]> => {
  try {
    const response = await api.post('/GetAgentsByBranch', branchId);
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toDeliveryAgent);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const add = async (body: {
  name: string;
  phone: string;
  branchId: string;
}): Promise<DeliveryAgent> => {
  try {
    const { data } = await api.post('/AddAgent', body);
    return toDeliveryAgent(data.data);
  } catch (error) {
    throw error;
  }
};

export const update = async (body: {
  id: string;
  name: string;
  phone: string;
  branchId: string;
}): Promise<DeliveryAgent> => {
  try {
    const { data } = await api.post('/UpdateAgent', body);
    return toDeliveryAgent(data.data);
  } catch (error) {
    throw error;
  }
};

export const deleteAgent = async (id: string): Promise<void> => {
  try {
    await api.post('/DeleteAgent', id);
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/deliveryCompaniesApi.ts =====
// File: src/utils/api/pagesApi/deliveryCompaniesApi.ts
import api from '../../axios';

export type DeliveryCompany = {
  id?: string;
  name: string;
  paymentType: string;
  companySharePercentage: number;
  visaCollectionCommissionPercentage: number;
  taxPercentage: number;
  phone: string;
  email: string;
  contactPerson: string;
  notes?: string;
  isActive: boolean;
  branchId?: string | null;
  companyID?: string | null;
};

export const getAll = async (): Promise<DeliveryCompany[]> => {
  const { data } = await api.get('/GetDeliveryCompanies');
  return data.data;
};

export const getById = async (id: string): Promise<DeliveryCompany> => {
  const { data } = await api.get(`/GetDeliveryCompany?id=${id}`);
  return data.data;
};

export const add = async (body: DeliveryCompany): Promise<DeliveryCompany> => {
  const { data } = await api.post('/AddDeliveryCompany', body);
  return data.data;
};

export const update = async (body: DeliveryCompany): Promise<DeliveryCompany> => {
  const { data } = await api.post('/UpdateDeliveryCompany', body);
  return data.data;
};

===== src/utils/api/pagesApi/deliveryZonesApi.ts =====
// File: src/utils/api/pagesApi/deliveryZonesApi.ts
import api from '../../axios';

export interface DeliveryZone {
  id: string;
  name: string;
  deliveryCharge: number;
  defaultBonus: number;
  branchName?: string;
  branchId?: string;
  companyID?: string;
  isActive: boolean;
}

const toDeliveryZone = (raw: any): DeliveryZone => ({
  id: raw.id,
  name: raw.name || '',
  deliveryCharge: Number(raw.deliveryCharge) || 0,
  defaultBonus: Number(raw.defaultBonus) || 0,
  branchName: raw.branchName || null,
  branchId: raw.branchId || null,
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});

export const getAll = async (): Promise<DeliveryZone[]> => {
  try {
    const response = await api.get('/GetZones');
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toDeliveryZone);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<DeliveryZone> => {
  try {
    const response = await api.get(`/GetZone?id=${id}`);
    if (response.data?.isvalid && response.data?.data) {
      return toDeliveryZone(response.data.data);
    }
    throw new Error('Zone not found');
  } catch (error) {
    throw error;
  }
};

export const add = async (body: {
  name: string;
  deliveryCharge: number;
  defaultBonus: number;
}): Promise<DeliveryZone> => {
  try {
    const { data } = await api.post('/AddZone', body);
    return toDeliveryZone(data.data);
  } catch (error) {
    throw error;
  }
};

export const update = async (body: {
  id: string;
  name: string;
  deliveryCharge: number;
  defaultBonus: number;
  branchId?: string;
  isActive: boolean;
}): Promise<DeliveryZone> => {
  try {
    const { data } = await api.post('/UpdateZone', body);
    return toDeliveryZone(data.data);
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/groupsApi.ts =====
import api from '../../axios';

export type Group = {
  id: string;
  code: number;
  name: string;
  parentId: string | null;
  parentGroup: string | null;
  backgroundColor: string;
  fontColor: string;
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
  children?: Group[];
};

const toGroup = (raw: any): Group => ({
  id: raw.groupID,
  code: raw.groupCode,
  name: raw.groupName,
  parentId: raw.parentID,
  parentGroup: raw.parentGroup,
  backgroundColor: raw.backcolor,
  fontColor: raw.fontColor,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

// تحويل البيانات المسطحة إلى هيكل شجري
const buildTree = (groups: Group[]): Group[] => {
  const groupMap = new Map<string, Group>();
  const roots: Group[] = [];

  // إنشاء خريطة للمجموعات
  groups.forEach(group => {
    groupMap.set(group.id, { ...group, children: [] });
  });

  // بناء الشجرة
  groups.forEach(group => {
    const groupNode = groupMap.get(group.id)!;
    if (group.parentId && groupMap.has(group.parentId)) {
      const parent = groupMap.get(group.parentId)!;
      parent.children!.push(groupNode);
    } else {
      roots.push(groupNode);
    }
  });

  return roots;
};

/* ---------------- API ---------------- */

export const getAll = async () => {
  const response = await api.get('/getGroups');
  const flatGroups = response.data.data.map(toGroup);
  return buildTree(flatGroups);
};

export const getById = async (id: string) => {
  const { data } = await api.get(`/getGroup?GroupID=${id}`);
  return toGroup(data.data);
};

export const add = async (body: { 
  name: string; 
  parentId?: string; 
  backgroundColor?: string; 
  fontColor?: string;
  isActive?: boolean; // إضافة الحقل
}) => {
  const { data } = await api.post(
    '/addGroup',
    null,
    { 
      params: { 
        GroupName: body.name,
        parentid: body.parentId || '',
        backcolor: body.backgroundColor || 'ffffff', // أبيض افتراضي
        FontColor: body.fontColor || '000000',       // أسود افتراضي
        isActive: body.isActive ?? true
      } 
    }
  );
  return toGroup(data.data);
};

export const update = async (group: Group) => {
  const { data } = await api.post(
    '/UpdateGroup',
    null,
    {
      params: {
        GroupID: group.id,
        GroupName: group.name,
        parentid: group.parentId || '',
        backcolor: group.backgroundColor || 'ffffff',
        FontColor: group.fontColor || '000000',
        isActive: group.isActive
      },
    }
  );
  return toGroup(data.data);
};


===== src/utils/api/pagesApi/hallCaptainsApi.ts =====
// File: src/utils/api/pagesApi/hallCaptainsApi.ts
import api from '../../axios';

export interface HallCaptain {
  id: string;
  name: string;
  phone: string;
  notes?: string;
  branchName?: string;
  branchId: string;
  companyID?: string;
  isActive: boolean;
}

const toHallCaptain = (raw: any): HallCaptain => ({
  id: raw.id,
  name: raw.name || '',
  phone: raw.phone || '',
  notes: raw.notes || '',
  branchName: raw.branchName || null,
  branchId: raw.branchId || '',
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});

export const getAll = async (): Promise<HallCaptain[]> => {
  try {
    const response = await api.get('/GetCaptains');
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toHallCaptain);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<HallCaptain> => {
  try {
    const response = await api.get(`/GetCaptain?id=${id}`);
    if (response.data?.isvalid && response.data?.data) {
      return toHallCaptain(response.data.data);
    }
    throw new Error('Captain not found');
  } catch (error) {
    throw error;
  }
};

export const add = async (body: {
  name: string;
  phone: string;
  notes?: string;
  branchId: string;
  isActive: boolean;
}): Promise<HallCaptain> => {
  try {
    const { data } = await api.post('/AddCaptain', body);
    return toHallCaptain(data.data);
  } catch (error) {
    throw error;
  }
};

export const update = async (body: {
  id: string;
  name: string;
  phone: string;
  notes?: string;
  branchId: string;
  isActive: boolean;
}): Promise<HallCaptain> => {
  try {
    const { data } = await api.post('/UpdateCaptain', body);
    return toHallCaptain(data.data);
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/inventoryAdjustmentApi.ts =====
// File: src/utils/api/pagesApi/inventoryAdjustmentApi.ts
import api from 'src/utils/axios';
import * as warehousesApi from './warehousesApi'; // استخدام نفس API المخازن

export type AdjustmentType = 0 | 1 | 2;

export interface AdjustmentDetail {
  barcode: string;
  detailsAdjustmentId: string;
  adjustmentId: string;
  productId: string;
  productPriceId: string;
  productName: string;
  unitName: string;
  oldQuantity: number;
  newQuantity: number;
  unitFactor: number;
  diffQty: number;
  notes: string | null;
  branchID: string | null;
  companyID: string | null;
  isActive: boolean;
}

export interface InventoryAdjustment {
  adjustmentId: string;
  adjustmentType: AdjustmentType;
  adjustmentDate: string;
  reason: string | null;
  referenceNumber: string | null;
  warehouseId: string;
  status: number;
  details: AdjustmentDetail[];
  branchID: string | null;
  companyID: string | null;
  isActive: boolean;
}

export interface AdjustmentListItem {
  [x: string]: any;
  warehouseName: string;
  adjustmentId: string;
  adjustmentType: number;
  adjustmentDate: string;
  reason: string | null;
  referenceNumber: string | null;
  warehouseId: string;
  status: number;
  details: Array<{
    detailsAdjustmentId: string;
    adjustmentId: string;
    productId: string;
    productPriceId: string;
    productName: string;
    unitName: string;
    oldQuantity: number;
    newQuantity: number;
    unitFactor: number;
    diffQty: number;
    notes: string | null;
    branchID: string | null;
    companyID: string | null;
    isActive: boolean;
  }>;
  branchID: string | null;
  companyID: string | null;
  isActive: boolean;
}

export const getAdjustmentById = async (adjustmentId: string): Promise<InventoryAdjustment> => {
  try {
    const response = await api.get(`/getAdjustment?adjustmentid=${adjustmentId}`);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const getAdjustments = async (): Promise<AdjustmentListItem[]> => {
  try {
    // جلب التسويات
    const adjustmentsResponse = await api.get('/getAdjustments');
    const adjustments: AdjustmentListItem[] = adjustmentsResponse.data.data;
    
    // جلب المخازن باستخدام نفس API المخازن المستخدم في التسوية
    const warehouses = await warehousesApi.getAll();
    
    // إنشاء map للمخازن لسهولة البحث
    const warehousesMap = new Map<string, string>();
    warehouses.forEach((warehouse: { id: string; name: string; }) => {
      warehousesMap.set(warehouse.id, warehouse.name);
    });
    
    // ربط أسماء المخازن بالتسويات
    const adjustmentsWithWarehouseNames = adjustments.map(adjustment => ({
      ...adjustment,
      warehouseName: warehousesMap.get(adjustment.warehouseId) || 'مخزن غير معروف'
    }));
    
    return adjustmentsWithWarehouseNames;
  } catch (error) {
    throw error;
  }
};

// GET فقط لجلب البيانات
export const getOrCreatePendingAdjustment = async (warehouseId: string): Promise<InventoryAdjustment> => {
  try {
    const response = await api.post(`/GetOrCreatePendingAdjustment?warehouseid=${warehouseId}`);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

// POST الوحيد لجميع التحديثات
export const updateAdjustment = async (adjustmentData: {
  adjustmentId: string;
  adjustmentType: number;
  reason?: string;
  referenceNumber?: string;
  warehouseId: string;
  status: number; // 1 للحفظ، 3 للتأكيد
  details: any[];
}): Promise<InventoryAdjustment> => {
  try {
    const response = await api.post('/UpdateAdjustment', adjustmentData);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};


===== src/utils/api/pagesApi/offersApi.ts =====
// File: src/utils/api/pagesApi/offersApi.ts
import api from '../../axios';

export type OfferGroup = {
  id?: string;
  offerId?: string;
  title: string;
  minSelection: number;
  maxSelection: number;
  isMandatory: boolean;
  isActive?: boolean;
  branchId?: string | null;
  companyID?: string | null;
};

export type OfferItem = {
  id?: string;
  offerId?: string;
  productPriceId: string;
  offerGroupId?: string | null;
  quantity: number;
  isDefaultSelected: boolean;
  useOriginalPrice: boolean;
  customPrice?: number | null;
  isActive?: boolean;
  branchId?: string | null;
  companyID?: string | null;
};

export type Offer = {
  id?: string;
  name: string;
  priceType: 'Fixed' | 'Dynamic';
  fixedPrice?: number;
  startDate: string;
  endDate: string;
  orderTypeId: string;
  isActive: boolean;
  offerGroups: OfferGroup[];
  offerItems: OfferItem[];
  branchId?: string | null;
  companyID?: string | null;
};

export type OffersResponse = {
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  pageSize: number;
  data: Offer[];
};

export const getAll = async (pageNumber = 1, pageSize = 20): Promise<OffersResponse> => {
  const { data } = await api.get(`/GetOffers?pageNumber=${pageNumber}&pageSize=${pageSize}`);
  return data.data;
};

export const getById = async (id: string): Promise<Offer> => {
  const { data } = await api.get(`/GetOffer?id=${id}`);
  return data.data;
};

export const add = async (body: Offer): Promise<Offer> => {
  const { data } = await api.post('/AddOffer', body);
  return data.data;
};

export const update = async (body: Offer): Promise<Offer> => {
  const { data } = await api.post('/updateoffer', body);
  return data.data;
};

===== src/utils/api/pagesApi/posPaymentMethodsApi.ts =====
// File: src/utils/api/pagesApi/posPaymentMethodsApi.ts
import  api  from '../../axios';

export interface PosPaymentMethodBranch {
  id?: string;
  posPaymentMethodID?: string;
  safeOrAccountID: string;
  isVisible: boolean;
  posPaymentMethod?: any;
  safeOrAccount?: any;
  branchID: string;
  companyID?: string;
  isActive: boolean;
}

export interface PosPaymentMethod {
  type: any;
  createdOn: any;
  id: string;
  name: string;
  safeOrAccountID?: string;
  safeOrAccount?: {
    id: string;
    name: string;
    safeOrAccountType: number;
    typeName: string;
    accountNumber?: string;
    collectionFeePercent: number;
    branchID?: string;
    companyID?: string;
    isActive: boolean;
  };
  branches?: PosPaymentMethodBranch[];
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export interface AddPosPaymentMethodRequest {
  name: string;
  safeOrAccountID: string;
  branches: Array<{
    branchId: string;
    safeOrAccountID: string;
    isVisible: boolean;
  }>;
}

export interface UpdatePosPaymentMethodRequest {
  id: string;
  name: string;
  safeOrAccountID: string;
  safeOrAccount?: any;
  branches: PosPaymentMethodBranch[];
}

export const getAll = async (): Promise<PosPaymentMethod[]> => {
  try {
    const response = await api.get('/GetAllPosPaymentMethods');
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<PosPaymentMethod> => {
  try {
    const response = await api.get(`/GetPosPaymentMethod?id=${id}`);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const add = async (data: AddPosPaymentMethodRequest): Promise<PosPaymentMethod> => {
  try {
    const response = await api.post('/AddPosPaymentMethod', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const update = async (data: UpdatePosPaymentMethodRequest): Promise<PosPaymentMethod> => {
  try {
    const response = await api.post('/UpdatePosPaymentMethod', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/posScreensApi.ts =====
// File: src/utils/api/pagesApi/posScreensApi.ts
import api from '../../axios';

export type PosScreen = {
  id: string;
  name: string;
  parentId: string | null;
  parentScreen: PosScreen | null;
  subScreens: PosScreen[];
  isVisible: boolean;
  displayOrder: number;
  colorHex: string;
  icon: string;
  products: any[];
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
  children?: PosScreen[];
};

const toPosScreen = (raw: any): PosScreen => {
  if (!raw || !raw.screenId) {
    return null as any;
  }

  return {
    id: raw.screenId,
    name: raw.screenName || '',
    parentId: raw.parentScreenId || null,
    parentScreen: raw.parentScreen ? toPosScreen(raw.parentScreen) : null,
    subScreens: (raw.subScreens || []).filter((s: any) => s !== null).map(toPosScreen) || [],
    isVisible: Boolean(raw.isVisible),
    displayOrder: Number(raw.displayOrder) || 0,
    colorHex: raw.colorHex || '#2196F3',
    icon: raw.icon || '📱',
    products: raw.products || [],
    isActive: Boolean(raw.isActive),
    createdOn: raw.createDate || '',
    lastModifiedOn: raw.lastModifyDate || '',
    createUser: raw.createUser || '',
    lastModifyUser: raw.lastModifyUser || '',
    createCompany: raw.createCompany || '',
    createBranch: raw.createBranch || '',
  };
};

const buildTree = (screens: PosScreen[]): PosScreen[] => {
  const validScreens = screens.filter(screen => screen && screen.id);
  
  if (validScreens.length === 0) {
    return [];
  }

  const screenMap = new Map<string, PosScreen>();
  const roots: PosScreen[] = [];

  validScreens.forEach(screen => {
    screenMap.set(screen.id, { ...screen, children: [] });
  });

  validScreens.forEach(screen => {
    const screenNode = screenMap.get(screen.id)!;
    if (screen.parentId && screenMap.has(screen.parentId)) {
      const parent = screenMap.get(screen.parentId)!;
      if (!parent.children) {
        parent.children = [];
      }
      parent.children.push(screenNode);
    } else {
      roots.push(screenNode);
    }
  });

  const sortByDisplayOrder = (items: PosScreen[]): PosScreen[] => {
    return items.sort((a, b) => a.displayOrder - b.displayOrder).map(item => ({
      ...item,
      children: item.children ? sortByDisplayOrder(item.children) : []
    }));
  };

  return sortByDisplayOrder(roots);
};

export const getAll = async (): Promise<PosScreen[]> => {
  try {
    const response = await api.get('/GetAllScreens');
    
    if (!response.data || !response.data.data) {
      return [];
    }

    const rawScreens = response.data.data;
    
    const flatScreens = rawScreens
      .filter((raw: any) => raw && raw.screenId)
      .map(toPosScreen)
      .filter((screen: PosScreen) => screen && screen.id);
    
    return buildTree(flatScreens);
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<PosScreen> => {
  const { data } = await api.get(`/GetScreenById?id=${id}`);
  return toPosScreen(data.data);
};

export const add = async (body: {
  screenName: string;
  ParentScreenId?: string;
  isVisible: boolean;
  displayOrder: number;
  colorHex: string;
  icon: string;
}): Promise<PosScreen> => {
  if (!body.screenName || body.screenName.trim() === '') {
    throw new Error('Screen name is required');
  }
  
  const requestBody = {
    screenName: body.screenName.trim(),
    ...(body.ParentScreenId && { ParentScreenId: body.ParentScreenId }),
    isVisible: Boolean(body.isVisible),
    displayOrder: Number(body.displayOrder),
    colorHex: body.colorHex,
    icon: body.icon
  };
  
  const { data } = await api.post('/AddScreen', requestBody);
  return toPosScreen(data.data);
};

export const update = async (body: {
  Screenid: string;
  screenName: string;
  ParentScreenId?: string;
  isVisible: boolean;
  displayOrder: number;
  colorHex: string;
  icon: string;
}): Promise<PosScreen> => {
  if (!body.screenName || body.screenName.trim() === '') {
    throw new Error('Screen name is required');
  }
  
  const requestBody = {
    Screenid: body.Screenid,
    screenName: body.screenName.trim(),
    ...(body.ParentScreenId && { ParentScreenId: body.ParentScreenId }),
    isVisible: Boolean(body.isVisible),
    displayOrder: Number(body.displayOrder),
    colorHex: body.colorHex,
    icon: body.icon
  };
  
  const { data } = await api.post('/updatescreen', requestBody);
  return toPosScreen(data.data);
};

export const reorderScreens = async (screens: Array<{
  screenId: string;
  displayOrder: number;
  parentScreenId?: string;
  screenName: string;
  isVisible: boolean;
  colorHex: string;
  icon: string;
}>): Promise<void> => {
  await Promise.all(
    screens.map(screen => 
      api.post('/updatescreen', {
        Screenid: screen.screenId,
        screenName: screen.screenName,
        ParentScreenId: screen.parentScreenId,
        isVisible: screen.isVisible,
        displayOrder: screen.displayOrder,
        colorHex: screen.colorHex,
        icon: screen.icon
      })
    )
  );
};

===== src/utils/api/pagesApi/productsApi.ts =====
// File: src/utils/api/pagesApi/productsApi.ts
import api from '../../axios';

export interface ProductOptionItem {
  id?: string;
  name: string;
  productPriceId?: string | null;
  useOriginalPrice: boolean;
  extraPrice: number;
  isCommentOnly: boolean;
  sortOrder: number;
}


export interface BranchPrice {
  id?: string;
  productPriceId: string;
  rawBranchId: string;
  price: number;
  branchId?: string | null;
  companyID?: string | null;
  isActive: boolean;
}


export interface ProductOptionGroup {
  id?: string;
  productId?: string;
  name: string;
  isRequired: boolean;
  allowMultiple: boolean;
  minSelection: number;
  maxSelection: number;
  sortOrder: number;
  optionItems: ProductOptionItem[];
}

export interface ProductComponent {
  componentId: string;
  productPriceId: string;
  rawProductPriceId: string;
  quantity: number;
  notes: string;
  rawProductPrice?: ProductPrice;
}

export interface ProductPrice {
  id: string;
  productPriceId: string;
  barcode: string;
  isGenerated: boolean;
  productID: string;
  product?: Product;
  unitId: string;
  unit?: {
    unitID: string;
    unitName: string;
  };
  posPriceName: string; // ⭐ إضافة posPriceName
  price: number;
  unitFactor: number;
  productComponents: ProductComponent[];
    branchPrices: BranchPrice[]; // ⭐ إضافة branchPrices

}


// إضافة دالة تحويل BranchPrice
const toBranchPrice = (raw: any): BranchPrice => ({
  id: raw.id,
  productPriceId: String(raw.productPriceId || ''),
  rawBranchId: String(raw.rawBranchId || ''),
  price: Number(raw.price) || 0,
  branchId: raw.branchId || null,
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});


export interface Product {
  id: string;
  productID: string;
  productCode: number;
  name: string;
  productName: string;
  code: number;
  groupId: string;
  group?: {
    groupID: string;
    groupCode: number;
    groupName: string;
    name: string;
  };
  productType: number;
  description: string;
  reorderLevel: number;
  cost: number;
  lastPurePrice: number;
  expirationDays: number;
  isActive: boolean; // ⭐ إضافة isActive
  posScreenId?: string;
  posScreen?: {
    id: string;
    name: string;
  };
  productPrices: ProductPrice[];
  productOptionGroups: ProductOptionGroup[]; // ⭐ إضافة productOptionGroups
  imageUrl: string | null;
  createDate: string;
  lastModifyDate: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
}

export interface ProductsResponse {
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  pageSize: number;
  data: Product[];
}

// دالة تحويل ProductOptionItem
const toProductOptionItem = (raw: any): ProductOptionItem => ({
  id: raw.id,
  name: raw.name || '',
  productPriceId: raw.productPriceId || null,
  useOriginalPrice: Boolean(raw.useOriginalPrice),
  extraPrice: Number(raw.extraPrice) || 0,
  isCommentOnly: Boolean(raw.isCommentOnly),
  sortOrder: Number(raw.sortOrder) || 0
});

// دالة تحويل ProductOptionGroup
const toProductOptionGroup = (raw: any): ProductOptionGroup => ({
  id: raw.id,
  productId: raw.productId,
  name: raw.name || '',
  isRequired: Boolean(raw.isRequired),
  allowMultiple: Boolean(raw.allowMultiple),
  minSelection: Number(raw.minSelection) || 0,
  maxSelection: Number(raw.maxSelection) || 1,
  sortOrder: Number(raw.sortOrder) || 0,
  optionItems: raw.optionItems?.map(toProductOptionItem) || []
});

const toProductComponent = (raw: any): ProductComponent => ({
  componentId: String(raw.componentId || ''),
  productPriceId: String(raw.productPriceId || ''),
  rawProductPriceId: String(raw.rawProductPriceId || ''),
  quantity: Number(raw.quantity) || 0,
  notes: String(raw.notes || ''),
  rawProductPrice: raw.rawProductPrice ? toProductPrice(raw.rawProductPrice) : undefined
});

const toProductPrice = (raw: any): ProductPrice => ({
  id: String(raw.productPriceId || ''),
  productPriceId: String(raw.productPriceId || ''),
  barcode: String(raw.barcode || ''),
  isGenerated: Boolean(raw.isGenerated),
  productID: String(raw.productID || ''),
  product: raw.product ? toProduct(raw.product) : undefined,
  unitId: String(raw.unitId || ''),
  unit: raw.unit ? {
    unitID: raw.unit.unitID,
    unitName: raw.unit.unitName
  } : undefined,
  posPriceName: String(raw.posPriceName || ''), // ⭐ إضافة posPriceName
  price: Number(raw.price) || 0,
  unitFactor: Number(raw.unitFactor) || 1,
  productComponents: raw.productComponents?.map(toProductComponent) || [],
  branchPrices: raw.branchPrices?.map(toBranchPrice) || [] // ⭐ إضافة branchPrices
});

const toProduct = (raw: any): Product => ({
  id: String(raw.productID || ''),
  productID: String(raw.productID || ''),
  productCode: Number(raw.productCode) || 0,
  name: String(raw.productName || ''),
  productName: String(raw.productName || ''),
  code: Number(raw.productCode) || 0,
  groupId: String(raw.groupId || ''),
  group: raw.group ? {
    groupID: raw.group.groupID,
    groupCode: raw.group.groupCode,
    groupName: raw.group.groupName,
    name: raw.group.groupName
  } : undefined,
  productType: Number(raw.productType) || 0,
  description: String(raw.description || ''),
  reorderLevel: Number(raw.reorderLevel) || 0,
  cost: Number(raw.cost) || 0,
  lastPurePrice: Number(raw.lastPurePrice) || 0,
  expirationDays: Number(raw.expirationDays) || 0,
  isActive: Boolean(raw.isActive), // ⭐ إضافة isActive
  posScreenId: raw.posScreenId || undefined,
  posScreen: raw.posScreen ? {
    id: raw.posScreen.id,
    name: raw.posScreen.name
  } : undefined,
  productPrices: raw.productPrices?.map(toProductPrice) || [],
  productOptionGroups: raw.productOptionGroups?.map(toProductOptionGroup) || [], // ⭐ إضافة productOptionGroups
  imageUrl: raw.imageUrl || null,
  createDate: String(raw.createDate || ''),
  lastModifyDate: String(raw.lastModifyDate || ''),
  createUser: String(raw.createUser || ''),
  lastModifyUser: String(raw.lastModifyUser || ''),
  createCompany: String(raw.createCompany || ''),
  createBranch: String(raw.createBranch || '')
});

/* ---------------- API Functions ---------------- */

export const getAll = async (pageNumber: number = 1, pageSize: number = 20): Promise<ProductsResponse> => {
  const response = await api.get('/getProducts', {
    params: { pageNumber, pageSize }
  });
  return {
    totalCount: response.data.data.totalCount,
    pageCount: response.data.data.pageCount,
    pageNumber: response.data.data.pageNumber,
    pageSize: response.data.data.pageSize,
    data: response.data.data.data.map(toProduct)
  };
};

export const getByType = async (
  productType: number, 
  pageNumber: number = 1, 
  pageSize: number = 20
): Promise<ProductsResponse> => {
  const response = await api.get('/getProductsByType', {
    params: { pageNumber, pageSize, productType }
  });
  return {
    totalCount: response.data.data.totalCount,
    pageCount: response.data.data.pageCount,
    pageNumber: response.data.data.pageNumber,
    pageSize: response.data.data.pageSize,
    data: response.data.data.data.map(toProduct)
  };
};

export const getById = async (productId: string): Promise<Product> => {
  const response = await api.get('/getProduct', {
    params: { ProductId: productId }
  });
  return toProduct(response.data.data);
};

export const getByBarcode = async (barcode: string): Promise<Product | null> => {
  try {
    const searchResponse = await searchProductPricesByNameOrBarcode(barcode, 1, 1);
    if (searchResponse.data.length > 0) {
      const productPrice = searchResponse.data[0];
      if (productPrice.product) {
        return productPrice.product;
      }
    }
    return null;
  } catch (error) {
    return null;
  }
};

export const searchByName = async (
  name: string, 
  pageNumber: number = 1, 
  pageSize: number = 50
): Promise<ProductsResponse> => {
  const response = await api.get('/getProductPricebyNameOrBarcode', {
    params: { FilterText: name, pageNumber, pageSize }
  });
  
  const uniqueProducts = new Map<string, Product>();
  
  response.data.data.forEach((item: any) => {
    if (item.product && !uniqueProducts.has(item.product.productID)) {
      uniqueProducts.set(item.product.productID, {
        ...item.product,
        id: item.product.productID,
        name: item.product.productName
      });
    }
  });
  
  return {
    totalCount: uniqueProducts.size,
    pageCount: Math.ceil(uniqueProducts.size / pageSize),
    pageNumber,
    pageSize,
    data: Array.from(uniqueProducts.values())
  };
};

export const searchProductPricesByNameOrBarcode = async (
  filterText: string,
  pageNumber: number = 1,
  pageSize: number = 50
) => {
  try {
    const response = await api.get('/getProductPricebyNameOrBarcode', {
      params: { FilterText: filterText, pageNumber, pageSize }
    });
    
    // ⭐ البيانات موجودة في response.data.data.data
    if (response.data && response.data.isvalid && response.data.data && response.data.data.data) {
      return {
        data: response.data.data.data // ⭐ الـ data الفعلي
      };
    }
    
    return { data: [] };
  } catch (error) {
    return { data: [] };
  }
};

// File: src/utils/api/pagesApi/productsApi.ts
// في دالة add:

export const add = async (body: { 
  productName: string; 
  groupId: string;
  productType: number;
  description?: string;
  reorderLevel: number;
  cost: number;
  lastPurePrice: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  productPrices: Array<{
    unitId?: string; // ⭐ اختياري للـ POS/Addition
    unitFactor?: number; // ⭐ اختياري للـ POS/Addition
    barcode: string;
    Price: number;
    posPriceName?: string;
    components?: Array<{
      rawProductPriceId: string;
      quantity: number;
      notes?: string;
    }>;
  }>;
  productOptionGroups?: ProductOptionGroup[];
}) => {
  const bodyWithCorrectFormat = {
    productName: body.productName,
    groupId: body.groupId,
    ProductType: body.productType,
    description: body.description || "",
    reorderLevel: Number(body.reorderLevel),
    cost: Number(body.cost),
    lastPurePrice: Number(body.lastPurePrice),
    expirationDays: Number(body.expirationDays),
    isActive: Boolean(body.isActive),
    // إرسال PosScreenId فقط للمنتجات من نوع POS (1)
    ...(body.productType === 1 && body.posScreenId && { PosScreenId: body.posScreenId }),
    productPrices: body.productPrices.map(price => {
      const priceData: any = {
        barcode: price.barcode,
        Price: Number(price.Price),
        components: price.components?.map(component => ({
          rawProductPriceId: component.rawProductPriceId,
          quantity: Number(component.quantity),
          notes: component.notes || ""
        })) || []
      };

      // ⭐ إضافة unitId و unitFactor فقط للـ Materials (type 2)
      if (body.productType === 2) {
        priceData.unitId = price.unitId;
        priceData.unitFactor = Number(price.unitFactor);
      }

      // ⭐ إضافة PosPriceName فقط للـ POS (1) أو Addition (3)
      if (body.productType === 1 || body.productType === 3) {
        priceData.PosPriceName = price.posPriceName || "";
      }

      return priceData;
    }),
    // إرسال productOptionGroups فقط للمنتجات من نوع POS (1) أو Addition (3)
    ...((body.productType === 1 || body.productType === 3) && 
        body.productOptionGroups && 
        body.productOptionGroups.length > 0 && {
      productOptionGroups: body.productOptionGroups.map(group => ({
        name: group.name,
        isRequired: group.isRequired,
        allowMultiple: group.allowMultiple,
        minSelection: group.minSelection,
        maxSelection: group.maxSelection,
        sortOrder: group.sortOrder,
        optionItems: group.optionItems.map(item => ({
          name: item.name,
          productPriceId: item.productPriceId || null,
          useOriginalPrice: item.useOriginalPrice,
          extraPrice: Number(item.extraPrice),
          isCommentOnly: item.isCommentOnly,
          sortOrder: item.sortOrder
        }))
      }))
    })
  };
  
  try {
    const { data } = await api.post('/addProduct', bodyWithCorrectFormat);
    return toProduct(data.data);
  } catch (error: any) {
    if (error.response?.data) {
      throw {
        ...error,
        response: {
          ...error.response,
          data: error.response.data
        }
      };
    }
    throw error;
  }
};

// في دالة update:
export const update = async (body: {
  ProductId: string;
  productName: string;
  groupId: string;
  ProductType: number;
  description?: string;
  reorderLevel: number;
  lastPurePrice: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  productPrices: Array<{
    productPriceId?: string;
    unitId?: string; // ⭐ اختياري للـ POS/Addition
    unitFactor?: number; // ⭐ اختياري للـ POS/Addition
    barcode: string;
    Price: number;
    posPriceName?: string;
    components?: Array<{
      componentId?: string;
      rawProductPriceId: string;
      quantity: number;
      notes?: string;
    }>;
  }>;
  productOptionGroups?: ProductOptionGroup[];
}) => {
  try {
    const updateBody = {
      ProductId: body.ProductId,
      productName: body.productName,
      groupId: body.groupId,
      ProductType: body.ProductType,
      description: body.description || "",
      reorderLevel: Number(body.reorderLevel),
      expirationDays: Number(body.expirationDays),
      isActive: Boolean(body.isActive),
      // إرسال PosScreenId فقط للمنتجات من نوع POS (1)
      ...(body.ProductType === 1 && body.posScreenId && { PosScreenId: body.posScreenId }),
      productPrices: body.productPrices.map(price => {
        const priceData: any = {
          ...(price.productPriceId && { productPriceId: price.productPriceId }),
          barcode: price.barcode,
          Price: Number(price.Price),
          components: price.components?.map(component => ({
            ...(component.componentId && { componentId: component.componentId }),
            rawProductPriceId: component.rawProductPriceId,
            quantity: Number(component.quantity),
            notes: component.notes || ""
          })) || []
        };

        // ⭐ إضافة unitId و unitFactor فقط للـ Materials (type 2)
        if (body.ProductType === 2) {
          priceData.unitId = price.unitId;
          priceData.unitFactor = Number(price.unitFactor);
        }

        // ⭐ إضافة PosPriceName فقط للـ POS (1) أو Addition (3)
        if (body.ProductType === 1 || body.ProductType === 3) {
          priceData.PosPriceName = price.posPriceName || "";
        }

        return priceData;
      }),
      // إرسال productOptionGroups فقط للمنتجات من نوع POS (1) أو Addition (3)
      ...((body.ProductType === 1 || body.ProductType === 3) && 
          body.productOptionGroups && 
          body.productOptionGroups.length > 0 && {
        productOptionGroups: body.productOptionGroups.map(group => ({
          ...(group.id && { id: group.id }),
          name: group.name,
          isRequired: group.isRequired,
          allowMultiple: group.allowMultiple,
          minSelection: group.minSelection,
          maxSelection: group.maxSelection,
          sortOrder: group.sortOrder,
          optionItems: group.optionItems.map(item => ({
            ...(item.id && { id: item.id }),
            name: item.name,
            productPriceId: item.productPriceId || null,
            useOriginalPrice: item.useOriginalPrice,
            extraPrice: Number(item.extraPrice),
            isCommentOnly: item.isCommentOnly,
            sortOrder: item.sortOrder
          }))
        }))
      })
    };
    
    const { data } = await api.post('/UpdateProduct', updateBody);
    return await getById(body.ProductId);
  } catch (error: any) {
    if (error.response?.data) {
      throw {
        ...error,
        response: {
          ...error.response,
          data: error.response.data
        }
      };
    }
    throw error;
  }
};


===== src/utils/api/pagesApi/purchaseApi.ts =====
// File: src/utils/api/purchaseApi.ts (تحديث)
import api from '../../axios';

export type Purchase = {
  id?: string;
  code?: number;
  referenceDocNumber: string;
  purchaseOrderId?: string | null;
  purchaseOrder?: {
    id: string;
    code: number;
    referenceDocNumber: string;
    date1: string;
    date2: string;
    warehouseId: string;
    supplierId: string;
    discountPercent: number;
    taxPercent: number;
    total: number;
    details: any[];
  } | null;
  date1: string;
  date2: string;
  warehouseId: string;
  warehouse?: {
    id: string;
    code: number;
    name: string;
    address: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  supplierId: string;
  supplier?: {
    id: string;
    code: number;
    name: string;
    phone: string;
    address: string;
    notes: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: PurchaseDetail[];
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

export type PurchaseDetail = {
  id?: string;
  purchaseId?: string;
  purchaseOrderId?: string | null;
  productID: string;
  productPriceID?: string;
  unitId: string;
  unitName?: string;
  productName?: string;
  unitFactor: number;
  quantity: number;
  price: number;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

// دالة لجلب أمر الشراء بالتفاصيل
const fetchPurchaseOrderDetails = async (purchaseOrderId: string) => {
  try {
    const response = await api.get(`/GetPurchaseOrder?id=${purchaseOrderId}`);
    if (response.data.isvalid && response.data.data) {
      const po = response.data.data;
      return {
        id: po.purchaseOrderID,
        code: po.purchaseOrderCode,
        referenceDocNumber: po.referanceDocNumber,
        date1: po.date1,
        date2: po.date2,
        warehouseId: po.warehouseId,
        supplierId: po.supplierId,
        discountPercent: po.discountPercent,
        taxPercent: po.taxPercent,
        total: po.total,
        details: po.details || []
      };
    }
    return null;
  } catch (error) {
    return null;
  }
};

const toPurchase = async (raw: any): Promise<Purchase> => {
  // جلب تفاصيل أمر الشراء إذا كان موجود
  let purchaseOrder = null;
  if (raw.purchaseOrderID && !raw.purchaseOrder) {
    purchaseOrder = await fetchPurchaseOrderDetails(raw.purchaseOrderID);
  } else if (raw.purchaseOrder) {
    purchaseOrder = {
      id: raw.purchaseOrder.purchaseOrderID,
      code: raw.purchaseOrder.purchaseOrderCode,
      referenceDocNumber: raw.purchaseOrder.referanceDocNumber,
      date1: raw.purchaseOrder.date1,
      date2: raw.purchaseOrder.date2,
      warehouseId: raw.purchaseOrder.warehouseId,
      supplierId: raw.purchaseOrder.supplierId,
      discountPercent: raw.purchaseOrder.discountPercent,
      taxPercent: raw.purchaseOrder.taxPercent,
      total: raw.purchaseOrder.total,
      details: raw.purchaseOrder.details || []
    };
  }

  return {
    id: raw.purchaseID,
    code: raw.purchaseCode,
    referenceDocNumber: raw.referanceDocNumber,
    purchaseOrderId: raw.purchaseOrderID,
    purchaseOrder: purchaseOrder,
    date1: raw.date1,
    date2: raw.date2,
    warehouseId: raw.warehouseId,
    warehouse: raw.warehouse ? {
      id: raw.warehouse.warehouseID,
      code: raw.warehouse.warehouseCode,
      name: raw.warehouse.warehouseName,
      address: raw.warehouse.address,
      isActive: raw.warehouse.isActive,
      createdOn: raw.warehouse.createDate,
      lastModifiedOn: raw.warehouse.lastModifyDate,
      createUser: raw.warehouse.createUser,
      lastModifyUser: raw.warehouse.lastModifyUser,
      createCompany: raw.warehouse.createCompany,
      createBranch: raw.warehouse.createBranch,
    } : undefined,
    supplierId: raw.supplierId,
    supplier: raw.supplier ? {
      id: raw.supplier.supplierId,
      code: raw.supplier.supplierCode,
      name: raw.supplier.supplierName,
      phone: raw.supplier.phone,
      address: raw.supplier.address,
      notes: raw.supplier.notes,
      isActive: raw.supplier.isActive,
      createdOn: raw.supplier.createDate,
      lastModifiedOn: raw.supplier.lastModifyDate,
      createUser: raw.supplier.createUser,
      lastModifyUser: raw.supplier.lastModifyUser,
      createCompany: raw.supplier.createCompany,
      createBranch: raw.supplier.createBranch,
    } : undefined,
    discountPercent: raw.discountPercent,
    discountValue: raw.discountValue,
    taxPercent: raw.taxPercent,
    taxValue: raw.taxValue,
    subTotal: raw.subTotal,
    total: raw.total,
    status: raw.status,
    details: raw.details?.map(toPurchaseDetail) || [],
    isActive: raw.isActive,
    createdOn: raw.createDate,
    lastModifiedOn: raw.lastModifyDate,
    createUser: raw.createUser,
    lastModifyUser: raw.lastModifyUser,
    createCompany: raw.createCompany,
    createBranch: raw.createBranch,
  };
};

const toPurchaseDetail = (raw: any): PurchaseDetail => ({
  id: raw.purchaseDetailID,
  purchaseId: raw.purchaseID,
  purchaseOrderId: raw.purchaseOrderID,
  productID: raw.productID,
  productPriceID: raw.productPriceId,
  unitId: raw.unitId,
  unitName: raw.unit?.unitName || raw.productPrice?.unit?.unitName || 'وحدة غير محددة',
  productName: raw.productPrice?.product?.productName || raw.product?.productName || 'منتج غير محدد',
  unitFactor: raw.unitFactor,
  quantity: raw.quantity,
  price: raw.price,
  discountPercent: raw.discountPercent,
  discountValue: raw.discountValue,
  taxPercent: raw.taxPercent,
  taxValue: raw.taxValue,
  subTotal: raw.subTotal,
  total: raw.total,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

/* ---------------- API Functions ---------------- */

export const getAll = async (): Promise<Purchase[]> => {
  try {
    const response = await api.get('/GetAllPurchase');
    const purchases = await Promise.all(
      response.data.data.map(async (item: any) => await toPurchase(item))
    );
    return purchases;
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<Purchase> => {
  try {
    const response = await api.get(`/GetPurchase?id=${id}`);
    return await toPurchase(response.data.data);
  } catch (error) {
    throw error;
  }
};

export const add = async (body: Purchase) => {
  const apiBody = {
    referanceDocNumber: body.referenceDocNumber,
    purchaseOrderID: body.purchaseOrderId,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail) => ({
      productID: detail.productID,
      ProductPriceID: detail.productPriceID,
      unitId: detail.unitId,
      unitFactor: detail.unitFactor,
      quantity: detail.quantity,
      price: detail.price,
      discountPercent: detail.discountPercent,
      discountValue: detail.discountValue,
      taxPercent: detail.taxPercent,
      taxValue: detail.taxValue,
      subTotal: detail.subTotal,
      total: detail.total
    }))
  };

  const { data } = await api.post('/AddPurchase', apiBody);
  return await toPurchase(data.data);
};

export const update = async (body: Purchase & { id: string }) => {
  const apiBody = {
    purchaseID: body.id,
    purchaseOrderID: body.purchaseOrderId,
    referanceDocNumber: body.referenceDocNumber,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail) => {
      const detailData: any = {
        productID: detail.productID,
        ProductPriceID: detail.productPriceID,
        unitId: detail.unitId,
        unitFactor: detail.unitFactor,
        quantity: detail.quantity,
        price: detail.price,
        discountPercent: detail.discountPercent,
        discountValue: detail.discountValue,
        taxPercent: detail.taxPercent,
        taxValue: detail.taxValue,
        subTotal: detail.subTotal,
        total: detail.total
      };

      if (detail.id && detail.id.trim() !== '') {
        detailData.purchaseDetailID = detail.id;
        detailData.purchaseOrderID = detail.purchaseOrderId;
      }

      return detailData;
    })
  };

  const { data } = await api.post('/UpdatePurchase', apiBody);
  return await toPurchase(data.data);
};

===== src/utils/api/pagesApi/purchaseOrdersApi.ts =====
import api from '../../axios';

export type PurchaseOrder = {
  id?: string;
  code?: number;
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  warehouse?: {
    id: string;
    code: number;
    name: string;
    address: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  supplierId: string;
  supplier?: {
    id: string;
    code: number;
    name: string;
    phone: string;
    address: string;
    notes: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: PurchaseOrderDetail[];
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

export type PurchaseOrderDetail = {
  unitName: any;
  id?: string;
  purchaseOrderId?: string;
  productID: string;
  productPriceID?: string; // ← إضافة معرف السعر
  unitId: string;
  unitFactor: number;
  quantity: number;
  price: number;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

const toPurchaseOrder = (raw: any): PurchaseOrder => {
  const converted: PurchaseOrder = {
    id: raw.purchaseOrderID,
    code: raw.purchaseOrderCode,
    referenceDocNumber: raw.referanceDocNumber,
    date1: raw.date1,
    date2: raw.date2,
    warehouseId: raw.warehouseId,
    warehouse: raw.warehouse
      ? {
          id: raw.warehouse.warehouseID,
          code: raw.warehouse.warehouseCode,
          name: raw.warehouse.warehouseName,
          address: raw.warehouse.address,
          isActive: raw.warehouse.isActive,
          createdOn: raw.warehouse.createDate,
          lastModifiedOn: raw.warehouse.lastModifyDate,
          createUser: raw.warehouse.createUser,
          lastModifyUser: raw.warehouse.lastModifyUser,
          createCompany: raw.warehouse.createCompany,
          createBranch: raw.warehouse.createBranch,
        }
      : undefined,
    supplierId: raw.supplierId,
    supplier: raw.supplier
      ? {
          id: raw.supplier.supplierId,
          code: raw.supplier.supplierCode,
          name: raw.supplier.supplierName,
          phone: raw.supplier.phone,
          address: raw.supplier.address,
          notes: raw.supplier.notes,
          isActive: raw.supplier.isActive,
          createdOn: raw.supplier.createDate,
          lastModifiedOn: raw.supplier.lastModifyDate,
          createUser: raw.supplier.createUser,
          lastModifyUser: raw.supplier.lastModifyUser,
          createCompany: raw.supplier.createCompany,
          createBranch: raw.supplier.createBranch,
        }
      : undefined,
    discountPercent: raw.discountPercent,
    discountValue: raw.discountValue,
    taxPercent: raw.taxPercent,
    taxValue: raw.taxValue,
    subTotal: raw.subTotal,
    total: raw.total,
    status: raw.status,
    details: raw.details?.map(toPurchaseOrderDetail) || [],
    isActive: raw.isActive,
    createdOn: raw.createDate,
    lastModifiedOn: raw.lastModifyDate,
    createUser: raw.createUser,
    lastModifyUser: raw.lastModifyUser,
    createCompany: raw.createCompany,
    createBranch: raw.createBranch,
  };

  if (!converted.id) {
    }
  return converted;
};

const toPurchaseOrderDetail = (raw: any): PurchaseOrderDetail => ({
  id: raw.purchaseOrderDetailID,
  purchaseOrderId: raw.purchaseOrderID,
  productID: raw.productID,
  productPriceID: raw.productPriceId, // ← هنا الإصلاح - كان مفقود
  unitId: raw.unitId,
  unitFactor: raw.unitFactor,
  quantity: raw.quantity,
  price: raw.price,
  discountPercent: raw.discountPercent,
  discountValue: raw.discountValue,
  taxPercent: raw.taxPercent,
  taxValue: raw.taxValue,
  subTotal: raw.subTotal,
  total: raw.total,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
  unitName: raw.unit?.unitName || raw.productPrice?.unit?.unitName || 'وحدة غير محددة'
});

/* ---------------- API ---------------- */

export const getAll = async (): Promise<PurchaseOrder[]> => {
  try {
    const response = await api.get('/GetAllPurchaseOrders');
    const converted = response.data.data.map(toPurchaseOrder);
    return converted;
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<PurchaseOrder> => {
  try {
    const response = await api.get(`/GetPurchaseOrder?id=${id}`);
    return toPurchaseOrder(response.data.data);
  } catch (error) {
    throw error;
  }
};

export const add = async (body: PurchaseOrder) => {
  const apiBody = {
    referanceDocNumber: body.referenceDocNumber,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail, index) => {
      // التحقق من البيانات المطلوبة
      if (!detail.productID) {
        throw new Error(`Detail ${index} is missing productID`);
      }
      if (!detail.productPriceID) {
        throw new Error(`Detail ${index} is missing ProductPriceID`);
      }

      return {
        productID: detail.productID,
        ProductPriceID: detail.productPriceID, // ← هنا الإصلاح المهم
        unitId: detail.unitId,
        unitFactor: detail.unitFactor,
        quantity: detail.quantity,
        price: detail.price,
        discountPercent: detail.discountPercent,
        discountValue: detail.discountValue,
        taxPercent: detail.taxPercent,
        taxValue: detail.taxValue,
        subTotal: detail.subTotal,
        total: detail.total
      };
    })
  };

  // التحقق النهائي قبل الإرسال
  apiBody.details.forEach((d, idx) => {
    if (!d.productID) {
      throw new Error(`Detail ${idx} is missing productID`);
    }
    if (!d.ProductPriceID) {
      throw new Error(`Detail ${idx} is missing ProductPriceID`);
    }
  });

  const { data } = await api.post('/AddPurchaseOrder', apiBody);
  return toPurchaseOrder(data.data);
};

export const update = async (body: PurchaseOrder & { id: string }) => {
  const apiBody = {
    purchaseOrderID: body.id,
    referanceDocNumber: body.referenceDocNumber,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail, index) => {
      // التحقق من البيانات المطلوبة
      if (!detail.productID) {
        throw new Error(`Detail ${index} is missing productID`);
      }
      if (!detail.productPriceID) {
        throw new Error(`Detail ${index} is missing ProductPriceID`);
      }

      const detailData: any = {
        productID: detail.productID,
        ProductPriceID: detail.productPriceID,
        unitId: detail.unitId,
        unitFactor: detail.unitFactor,
        quantity: detail.quantity,
        price: detail.price,
        discountPercent: detail.discountPercent,
        discountValue: detail.discountValue,
        taxPercent: detail.taxPercent,
        taxValue: detail.taxValue,
        subTotal: detail.subTotal,
        total: detail.total
      };

      // ← هنا الإصلاح المهم: إضافة purchaseOrderDetailID للسطور الموجودة
      if (detail.id && detail.id.trim() !== '') {
        detailData.purchaseOrderDetailID = detail.id;
        detailData.purchaseOrderID = body.id; // إضافة purchaseOrderID أيضاً
        } else {
        // سطر جديد - لا نضيف purchaseOrderDetailID
        }

      return detailData;
    })
  };

  // التحقق النهائي
  apiBody.details.forEach((d, idx) => {
    });

  const { data } = await api.post('/UpdatePurchaseOrder', apiBody);
  return toPurchaseOrder(data.data);
};

export const getByIdWithDetails = async (id: string): Promise<PurchaseOrder> => {
  try {
    const response = await api.get(`/GetPurchaseOrder?id=${id}`);
    return toPurchaseOrder(response.data.data);
  } catch (error) {
    throw error;
  }
};
===== src/utils/api/pagesApi/purchaseProductsApi.ts =====
import api from '../../axios';

export type Product = {
  id: string;
  code: number;
  name: string;
  groupId: string | null;
  group: {
    id: string;
    code: number;
    name: string;
    parentId: string | null;
    parentGroup: string | null;
    backgroundColor: string;
    fontColor: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  } | null;
  productType: number;
  description: string | null;
  reorderLevel: number;
  cost: number;
  lastPurePrice: number;
  expirationDays: number;
  imageUrl: string | null;
  productPrices: ProductPrice[];
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
};

export type ProductPrice = {
  id: string;
  productId: string;
  productName: string;
  unitId: string | null;
  unitName?: string;
  unitFactor: number;
  barcode: string;
  price: number;
  cost: number;
  posPriceName: string | null;
  isGenerated: boolean;
  isActive: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

export type ProductPricesResponse = {
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  pageSize: number;
  data: ProductPrice[];
};

// تحويل البيانات من API format إلى التطبيق format
const toProductPrice = (raw: any): ProductPrice => ({
  id: raw.productPriceId,
  productId: raw.product?.productID || '',
  productName: raw.product?.productName || '',
  unitId: raw.unit?.unitID || null,
  unitName: raw.unit?.unitName || 'وحدة غير محددة',
  unitFactor: raw.unitFactor,
  barcode: raw.barcode,
  price: raw.price,
  cost: raw.product?.cost || 0,
  posPriceName: raw.posPriceName,
  isGenerated: raw.isGenerated,
  isActive: raw.product?.isActive ?? true,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

/* ---------------- API ---------------- */

// البحث في أسعار المنتجات - الـ API الوحيد المستخدم
export const searchProductPrices = async (
  filterText: string = '', 
  pageNumber: number = 1, 
  pageSize: number = 50
): Promise<ProductPricesResponse> => {
  try {
    let url = `/getProductPricebyNameOrBarcode?pageNumber=${pageNumber}&pageSize=${pageSize}`;
    
    // إضافة FilterText فقط إذا كان موجود
    if (filterText.trim()) {
      url += `&FilterText=${encodeURIComponent(filterText)}`;
    }
    
    const response = await api.get(url);
    
    if (response.data?.data) {
      return {
        totalCount: response.data.data.totalCount || 0,
        pageCount: response.data.data.pageCount || 1,
        pageNumber: response.data.data.pageNumber || 1,
        pageSize: response.data.data.pageSize || pageSize,
        data: response.data.data.data.map(toProductPrice)
      };
    } else {
      return {
        totalCount: 0,
        pageCount: 0,
        pageNumber: pageNumber,
        pageSize: pageSize,
        data: []
      };
    }
  } catch (error) {
    return {
      totalCount: 0,
      pageCount: 0,
      pageNumber: pageNumber,
      pageSize: pageSize,
      data: []
    };
  }
};

// للتوافق مع الكود القديم - استخدام نفس API
export const getProducts = async (pageNumber: number = 1, pageSize: number = 20): Promise<ProductPricesResponse> => {
  return searchProductPrices('', pageNumber, pageSize);
};

===== src/utils/api/pagesApi/safesAndAccountsApi.ts =====
// File: src/utils/api/pagesApi/safesAndAccountsApi.ts
import  api  from '../../axios';

export interface SafeOrAccount {
  id: string;
  name: string;
  safeOrAccountType: number;
  typeName: string;
  accountNumber?: string;
  collectionFeePercent: number;
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export const getAllSafesAndAccounts = async (): Promise<SafeOrAccount[]> => {
  try {
    const response = await api.get('/GetAllSafesAndAccounts');
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/safesApi.ts =====
// File: src/utils/api/pagesApi/safesApi.ts
import api from '../../axios';

export interface Safe {
  id: string;
  name: string;
  safeOrAccountType: number;
  typeName: string;
  accountNumber?: string;
  collectionFeePercent: number;
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export interface AddSafeRequest {
  name: string;
  typeName: string;
}

export interface UpdateSafeRequest {
  id: string;
  name: string;
  typeName: string;
  accountNumber?: string;
  collectionFeePercent: number;
  branchID?: string;
  companyID?: string;
  isActive: boolean;
}

export const getAll = async (): Promise<Safe[]> => {
  try {
    const response = await api.get('/getSafes');
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<Safe> => {
  try {
    const response = await api.get(`/getSafe?id=${id}`);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const add = async (data: AddSafeRequest): Promise<Safe> => {
  try {
    const response = await api.post('/AddSafe', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

export const update = async (data: UpdateSafeRequest): Promise<Safe> => {
  try {
    const response = await api.put('/UpdateSafe', data);
    return response.data.data;
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/suppliersApi.ts =====
import api from '../../axios';

export type Supplier = {
  [x: string]: any;
  id: string;
  code: number;
  name: string;
  phone: string;
  address: string;
  notes: string;
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
};

const toSupplier = (raw: any): Supplier => ({
  id: raw.supplierId,
  code: raw.supplierCode,
  name: raw.supplierName,
  phone: raw.phone,
  address: raw.address,
  notes: raw.notes,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

/* ---------------- API ---------------- */

export const getAll = async () => {
  const response = await api.get('/getSuppliers');
  return response.data.data.map(toSupplier);
};

export const getById = async (id: string) => {
  const { data } = await api.get(`/getsupplier?SupplierId=${id}`);
  return toSupplier(data.data);
};

export const add = async (body: { 
  name: string; 
  phone: string;
  address: string;
  notes: string;
  isActive?: boolean;
}) => {
  const { data } = await api.post(
    '/addsupplier',
    null,
    { 
      params: { 
        SupplierName: body.name,
        Phone: body.phone,
        Address: body.address,
        Notes: body.notes,
        isactive: body.isActive ?? true
      } 
    }
  );
  return toSupplier(data.data);
};

export const update = async (supplier: Supplier) => {
  const { data } = await api.post(
    '/updatesupplier',
    null,
    {
      params: {
        SupplierId: supplier.id,
        SupplierName: supplier.name,
        Phone: supplier.phone,
        Address: supplier.address,
        Notes: supplier.notes,
        IsActive: supplier.isActive
      },
    }
  );
  return toSupplier(data.data);
};

===== src/utils/api/pagesApi/tableSectionsApi.ts =====
// File: src/utils/api/pagesApi/tableSectionsApi.ts
import api from '../../axios';

export interface Table {
  id?: string;
  name: string;
  sectionId: string;
  sectionName?: string;
  capacity: number;
}

export interface TableSection {
  id: string;
  name: string;
  branchName?: string;
  serviceCharge: number;
  tables: Table[];
  branchId: string;
  companyID?: string;
  isActive: boolean;
}

const toTable = (raw: any): Table => ({
  id: raw.id,
  name: raw.name || '',
  sectionId: raw.sectionId || '',
  sectionName: raw.sectionName || '',
  capacity: Number(raw.capacity) || 1
});

const toTableSection = (raw: any): TableSection => ({
  id: raw.id,
  name: raw.name || '',
  branchName: raw.branchName || '',
  serviceCharge: Number(raw.serviceCharge) || 0,
  tables: raw.tables?.map(toTable) || [],
  branchId: raw.branchId || '',
  companyID: raw.companyID || null,
  isActive: Boolean(raw.isActive)
});

export const getAll = async (): Promise<TableSection[]> => {
  try {
    const response = await api.get('/GetSections');
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toTableSection);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const getById = async (id: string): Promise<TableSection> => {
  try {
    const response = await api.get(`/GetSection?id=${id}`);
    if (response.data?.isvalid && response.data?.data) {
      return toTableSection(response.data.data);
    }
    throw new Error('Section not found');
  } catch (error) {
    throw error;
  }
};

export const getByBranch = async (branchId: string): Promise<TableSection[]> => {
  try {
    const response = await api.get(`/GetSectionsByBranch?branchId=${branchId}`);
    if (response.data?.isvalid && response.data?.data) {
      return response.data.data.map(toTableSection);
    }
    return [];
  } catch (error) {
    throw error;
  }
};

export const add = async (body: {
  name: string;
  serviceCharge: number;
  tables: Table[];
}): Promise<TableSection> => {
  try {
    const requestBody = {
      name: body.name,
      serviceCharge: Number(body.serviceCharge),
      tables: body.tables.map(table => ({
        name: table.name,
        capacity: Number(table.capacity)
      }))
    };
    
    const { data } = await api.post('/AddSection', requestBody);
    return toTableSection(data.data);
  } catch (error) {
    throw error;
  }
};

export const update = async (body: {
  id: string;
  name: string;
  serviceCharge: number;
  tables: Table[];
}): Promise<TableSection> => {
  try {
    const requestBody = {
      id: body.id,
      name: body.name,
      serviceCharge: Number(body.serviceCharge),
      tables: body.tables.map(table => ({
        ...(table.id && { id: table.id }),
        name: table.name,
        sectionId: body.id,
        sectionName: body.name,
        capacity: Number(table.capacity)
      }))
    };
    
    const { data } = await api.post('/UpdateSection', requestBody);
    return toTableSection(data.data);
  } catch (error) {
    throw error;
  }
};

===== src/utils/api/pagesApi/unitsApi.ts =====
import api from '../../axios';

export type Unit = {
  id: string;
  code: number;
  name: string;
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
};

const toUnit = (raw: any): Unit => ({
  id: raw.unitID,
  code: raw.unitCode,
  name: raw.unitName,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

/* ---------------- API ---------------- */

export const getAll = async () => (await api.get('/getUnits')).data.data.map(toUnit);

export const add = async (body: { name: string; }) => {
  const { data } = await api.post(
    '/addUnit',
    null,
    { params: { UnitName: body.name, UnitCode: 0, isActive: true } }
  );
  return toUnit(data.data);
};

export const update = async (u: Unit) => {
  const { data } = await api.post(
    '/UpdateUnit',
    null,
    {
      params: {
        UnitID: u.id,
        UnitCode: u.code,
        UnitName: u.name,
        isActive: u.isActive,
      },
    }
  );
  return toUnit(data.data);
};

===== src/utils/api/pagesApi/warehousesApi.ts =====
import api from '../../axios';

export type Warehouse = {
  [x: string]: any;
  id: string;
  /* code موجود لكن لا يُعرَض – نحتاجه فقط أثناء التعديل */
  code: number;
  name: string;
  address: string;
  isActive: boolean;
  createdOn: string;
};

const toWarehouse = (raw: any): Warehouse => ({
  id:        raw.warehouseID,
  code:      raw.warehouseCode,
  name:      raw.warehouseName,
  address:   raw.address,
  isActive:  raw.isActive,
  createdOn: raw.createDate,
});

/* ---------------- API ---------------- */
export const getAll   = async () => (await api.get('/getwarehouses')).data.data.map(toWarehouse);

export const add = async (body: { name: string; address: string; }) => {
  const { data } = await api.post(
    '/addwarehouse',
    null,
    { params: { warehousename: body.name, warehousecode: 0, address: body.address } }
  );
  return toWarehouse(data.data);
};

export const update = async (w: Warehouse) => {
  const { data } = await api.post(
    '/updatewarehouse',
    null,
    {
      params: {
        warehouseid:   w.id,
        warehouseCode: w.code,
        warehousename: w.name,
        address:   w.address,
        isActive:  w.isActive,
      },
    }
  );
  return toWarehouse(data.data);
};

===== src/utils/api/reportsApi.ts =====
// File: src/utils/api/reportsApi.ts
import api from '../axios';

export type ProductBalance = {
  productID: string;
  unitId: string;
  warehouseID: string;
  wareHouseName: string;
  productName: string;
  cost: number;
  lastPurePrice: number;
  unitName: string;
  unitFactor: number;
  unitQuantity: number;
  remainder: number;
};

export type GroupedProductBalance = {
  productID: string;
  productName: string;
  warehouseID: string;
  wareHouseName: string;
  units: {
    unitId: string;
    unitName: string;
    unitFactor: number;
    unitQuantity: number;
    cost: number;
    lastPurePrice: number;
    totalCost: number;
    totalLastPurePrice: number;
  }[];
  totalQuantity: number;
  totalCost: number;
  totalLastPurePrice: number;
};

const toProductBalance = (raw: any): ProductBalance => ({
  productID: raw.productID,
  unitId: raw.unitId,
  warehouseID: raw.warehouseID,
  wareHouseName: raw.wareHouseName,
  productName: raw.productName,
  cost: raw.cost,
  lastPurePrice: raw.lastPurePrice,
  unitName: raw.unitName,
  unitFactor: raw.unitFactor,
  unitQuantity: raw.unitQuantity,
  remainder: raw.remainder,
});

export const getProductBalancesReport = async (): Promise<ProductBalance[]> => {
  try {
    const response = await api.get('/getProductbalancesreport');
    return response.data.data.map(toProductBalance);
  } catch (error) {
    throw error;
  }
};

// دالة لتجميع البيانات حسب المنتج والمخزن
export const groupProductBalances = (balances: ProductBalance[]): GroupedProductBalance[] => {
  const grouped = new Map<string, GroupedProductBalance>();

  balances.forEach(balance => {
    const key = `${balance.productID}-${balance.warehouseID}`;
    
    if (!grouped.has(key)) {
      grouped.set(key, {
        productID: balance.productID,
        productName: balance.productName,
        warehouseID: balance.warehouseID,
        wareHouseName: balance.wareHouseName,
        units: [],
        totalQuantity: 0,
        totalCost: 0,
        totalLastPurePrice: 0,
      });
    }

    const group = grouped.get(key)!;
    
    // حساب إجمالي التكلفة وإجمالي آخر سعر شراء لكل وحدة
    const totalCost = balance.cost * balance.unitQuantity;
    const totalLastPurePrice = balance.lastPurePrice * balance.unitQuantity;
    
    group.units.push({
      unitId: balance.unitId,
      unitName: balance.unitName,
      unitFactor: balance.unitFactor,
      unitQuantity: balance.unitQuantity,
      cost: balance.cost,
      lastPurePrice: balance.lastPurePrice,
      totalCost: totalCost,
      totalLastPurePrice: totalLastPurePrice,
    });

    // حساب الإجماليات
    group.totalQuantity += balance.unitQuantity * balance.unitFactor;
    group.totalCost += totalCost;
    group.totalLastPurePrice += totalLastPurePrice;
  });

  return Array.from(grouped.values());
};

===== src/utils/auth.ts =====
import Cookies from 'js-cookie';

/** هل التوكين موجود وصالح؟ */
export const isAuthValid = () => {
  const token = Cookies.get('token');
  const exp   = Cookies.get('token_exp');
  if (!token || !exp) return false;
  return new Date(exp) > new Date();       // لم ينتهِ بعد
};

/** خزِّن التوكين ووقت انتهاءه بالدقيقة */
export const saveAuth = (token: string, expiration: string) => {
  Cookies.set('token', token, { expires: 7 });
  Cookies.set('token_exp', expiration, { expires: 7 });
};

/** امسح التوكين تمامًا */
export const clearAuth = () => {
  Cookies.remove('token');
  Cookies.remove('token_exp');
};

===== src/utils/axios.ts =====
// File: src/utils/axios.ts
import axios from 'axios';
import Cookies from 'js-cookie';

// Global error handler function - سيتم تعيينها من ErrorProvider
let globalErrorHandler: ((error: any) => void) | null = null;
let globalSuccessHandler: ((message: string) => void) | null = null;

export const setGlobalErrorHandler = (handler: (error: any) => void) => {
  globalErrorHandler = handler;
};

export const setGlobalSuccessHandler = (handler: (message: string) => void) => {
  globalSuccessHandler = handler;
};

const api = axios.create({
  baseURL: 'https://horexapi.watsorder.com',
  headers: { 'Content-Type': 'application/json' }
});

/* ▸ أضف التوكين مع كل Request */
api.interceptors.request.use((config) => {
  // ترتيب الأولوية: localStorage ثم Cookies
  const token = localStorage.getItem('auth_token') || Cookies.get('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  
  // إضافة BranchID و CompanyID من localStorage
  const branchId = localStorage.getItem('branch_id') || 'branch_1';
  const companyId = localStorage.getItem('company_id') || 'company_1';
  const tenantId = localStorage.getItem('tenant_id');
  
  config.headers.BranchID = branchId;
  config.headers.CompanyID = companyId;
  
  if (tenantId) {
    config.headers.TenantId = tenantId;
  }
  
  return config;
});

/* ▸ معالجة الأخطاء والنجاح */
api.interceptors.response.use(
  (response) => {
    // ⭐ فحص الاستجابة للتأكد من صحة البيانات
    if (response.data && typeof response.data === 'object') {
      // إذا كانت الاستجابة تحتوي على isvalid = false
      if (response.data.isvalid === false && response.data.errors) {
        // عرض الأخطاء باستخدام Global Error Handler
        if (globalErrorHandler) {
          globalErrorHandler(response.data.errors);
        }
        
        // رفض الـ Promise مع الأخطاء
        return Promise.reject({
          isApiValidationError: true,
          errors: response.data.errors,
          message: response.data.errors[0]?.errorMessage || 'خطأ في التحقق من البيانات'
        });
      }
      
      // إذا كانت العملية ناجحة وتحتوي على رسالة نجاح
      if (response.data.isvalid === true && response.data.message && globalSuccessHandler) {
        globalSuccessHandler(response.data.message);
      }
    }
    
    return response;
  },
  (err) => {
    // معالجة أخطاء HTTP المختلفة
    if (err.response) {
      const { status, data } = err.response;
      
      // إذا كان خطأ 401، امسح البيانات وارجع للـ login
      if (status === 401) {
        clearAuthHeaders();
        
        if (!window.location.pathname.includes('/auth/login')) {
          window.location.href = '/auth/login';
        }
        return Promise.reject(err);
      }
      
      // معالجة الأخطاء الأخرى
      let errorMessage = 'حدث خطأ غير متوقع';
      let errorCode = status;
      
      if (data && typeof data === 'object') {
        if (data.isvalid === false && data.errors) {
          // خطأ من API مع تفاصيل
          if (globalErrorHandler) {
            globalErrorHandler(data.errors);
          }
          return Promise.reject({
            isApiValidationError: true,
            errors: data.errors,
            message: data.errors[0]?.errorMessage || errorMessage
          });
        } else if (data.message) {
          errorMessage = data.message;
        } else if (typeof data === 'string') {
          errorMessage = data;
        }
      }
      
      // عرض الخطأ باستخدام Global Error Handler
      if (globalErrorHandler) {
        globalErrorHandler([{ errorCode, errorMessage }]);
      }
      
      return Promise.reject({
        status,
        message: errorMessage,
        isNetworkError: false
      });
    }
    
    // خطأ في الشبكة
    const networkError = {
      errorCode: 0,
      errorMessage: 'خطأ في الاتصال بالخادم'
    };
    
    if (globalErrorHandler) {
      globalErrorHandler([networkError]);
    }
    
    return Promise.reject({
      message: 'Network / Server error',
      isNetworkError: true
    });
  }
);

export const setAuthHeaders = (token: string, companyId: string, branchId: string, tenantId: string) => {
  localStorage.setItem('auth_token', token);
  localStorage.setItem('company_id', companyId);
  localStorage.setItem('branch_id', branchId);
  localStorage.setItem('tenant_id', tenantId);
  
  Cookies.set('token', token, { expires: 7 });
  
  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  api.defaults.headers.common['BranchID'] = branchId;
  api.defaults.headers.common['CompanyID'] = companyId;
  api.defaults.headers.common['TenantId'] = tenantId;
};

export const clearAuthHeaders = () => {
  localStorage.removeItem('auth_token');
  localStorage.removeItem('company_id');
  localStorage.removeItem('branch_id');
  localStorage.removeItem('tenant_id');
  localStorage.removeItem('user_data');
  localStorage.removeItem('selected_branch');
  localStorage.removeItem('user_branches');
  
  Cookies.remove('token');
  
  delete api.defaults.headers.common['Authorization'];
  delete api.defaults.headers.common['BranchID'];
  delete api.defaults.headers.common['CompanyID'];
  delete api.defaults.headers.common['TenantId'];
};

export const updateBranchHeaders = (branchId: string, companyId: string) => {
  localStorage.setItem('company_id', companyId);
  localStorage.setItem('branch_id', branchId);
  
  api.defaults.headers.common['BranchID'] = branchId;
  api.defaults.headers.common['CompanyID'] = companyId;
};

export const isAuthenticated = () => {
  const token = localStorage.getItem('auth_token') || Cookies.get('token');
  const branchId = localStorage.getItem('branch_id');
  const companyId = localStorage.getItem('company_id');
  const tenantId = localStorage.getItem('tenant_id');
  const isAuth = !!(token && branchId && companyId && tenantId);
  
  return isAuth;
};

export default api;

===== src/utils/branchUtils.ts =====
// File: src/utils/branchUtils.ts
import { Branch } from './api/authApi';

// الحصول على فروع المستخدم من localStorage
export const getUserBranchesFromStorage = (): Branch[] => {
  try {
    const branches = localStorage.getItem('user_branches');
    return branches ? JSON.parse(branches) : [];
  } catch (error) {
    console.error('Error getting user branches from storage:', error);
    return [];
  }
};

// الحصول على الفرع الافتراضي
export const getDefaultBranch = (): Branch | null => {
  const branches = getUserBranchesFromStorage();
  return branches.length > 0 ? branches[0] : null;
};

// الحصول على الفرع المختار حالياً
export const getCurrentBranch = (): Branch | null => {
  try {
    const currentBranch = localStorage.getItem('selected_branch');
    return currentBranch ? JSON.parse(currentBranch) : getDefaultBranch();
  } catch (error) {
    console.error('Error getting current branch:', error);
    return getDefaultBranch();
  }
};

// الحصول على فرع معين بالـ ID
export const getBranchById = (branchId: string): Branch | null => {
  const branches = getUserBranchesFromStorage();
  return branches.find(branch => branch.id === branchId) || null;
};

// حفظ فروع المستخدم في localStorage (يتم استدعاؤها عند تسجيل الدخول)
export const saveUserBranchesToStorage = (branches: Branch[]): void => {
  try {
    localStorage.setItem('user_branches', JSON.stringify(branches));
  } catch (error) {
    console.error('Error saving user branches to storage:', error);
  }
};

// حفظ الفرع المختار حالياً
export const setCurrentBranch = (branch: Branch): void => {
  try {
    localStorage.setItem('selected_branch', JSON.stringify(branch));
  } catch (error) {
    console.error('Error setting current branch:', error);
  }
};

// مسح فروع المستخدم من localStorage (عند تسجيل الخروج)
export const clearUserBranchesFromStorage = (): void => {
  try {
    localStorage.removeItem('user_branches');
    localStorage.removeItem('selected_branch');
  } catch (error) {
    console.error('Error clearing user branches from storage:', error);
  }
};

// التحقق من وجود فروع للمستخدم
export const hasUserBranches = (): boolean => {
  const branches = getUserBranchesFromStorage();
  return branches.length > 0;
};

// الحصول على أسماء الفروع فقط
export const getBranchNames = (): string[] => {
  const branches = getUserBranchesFromStorage();
  return branches.map(branch => branch.name);
};

// التحقق من صلاحية المستخدم على فرع معين
export const hasAccessToBranch = (branchId: string): boolean => {
  const branches = getUserBranchesFromStorage();
  return branches.some(branch => branch.id === branchId);
};

===== src/utils/date.ts =====
export const extractDate = (iso: string | null | undefined) => {
  if (!iso) return '';               // لا قيمة
  // iso = 2025-05-30T00:46:02.8939049+02:00
  return iso.split('T')[0];          // ← 2025-05-30
};
===== src/utils/i18n.ts =====
// File: src/utils/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import english from 'src/utils/languages/en.json';
import arabic from 'src/utils/languages/ar.json';

const resources = {
  en: {
    translation: english,
  },
  ar: {
    translation: arabic,
  },
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: 'en',
    fallbackLng: 'en',
    debug: false,
    interpolation: {
      escapeValue: false,
    },
    react: {
      useSuspense: false,
      // تحسين للـ RTL
      bindI18n: 'languageChanged',
      bindI18nStore: false,
    },
  });

// تحسين معالجة تغيير اللغة
i18n.on('languageChanged', (lng) => {
  // تطبيق التغييرات بشكل مُحسن
  requestAnimationFrame(() => {
    const isRTL = lng === 'ar';
    const direction = isRTL ? 'rtl' : 'ltr';
    
    document.documentElement.dir = direction;
    document.documentElement.lang = lng;
    document.body.classList.remove('rtl', 'ltr');
    document.body.classList.add(direction);
  });
});

export default i18n;

===== src/utils/languages/ar.json =====
{
    "Modern": "عصري",
    "Ecommerce": "التجارة الإلكترونية",
    "eCommerce": "التجارة الإلكترونية",
    "Contacts": "جهات الاتصال",
    "Blog": "مقالات",
    "Posts": "المشاركات",
    "Detail": "التفاصيل",
    "Shop": "متجر",
    "List": "قائمة",
    "Checkout": "الدفع",
    "Chats": "الدردشات",
    "Users": "المستخدمون",
    "Profile": "الملف الشخصي",
    "Followers": "متابعون",
    "Friends": "أصدقاء",
    "Gallery": "صالة عرض",
    "Notes": "ملاحظات",
    "Calendar": "التقويم",
    "Email": "بريد إلكتروني",
    "Tickets": "تذاكر",
 "header": {
    "print": {
      "tooltip": "خيارات الطباعة",
      "normal": "طباعة عادية",
      "normalDesc": "طباعة باستخدام طابعة النظام",
      "thermal": "طباعة حرارية",
      "printer": "طابعة",
      "test": "اختبار الطباعة",
      "testDesc": "اختبار الطابعة الحرارية",
      "testSuccess": "تم اختبار الطباعة بنجاح",
      "testFailed": "فشل في اختبار الطباعة",
      "testError": "خطأ في اختبار الطباعة",
      "thermalDisabled": "الطباعة الحرارية غير مفعلة",
      "enableThermal": "تفعيل الطباعة الحرارية",
      "goToSettings": "الذهاب للإعدادات",
      "clickToEnable": "اضغط هنا لتفعيل الطباعة الحرارية",
      "settings": "إعدادات الطباعة",
      "manageSettings": "إدارة إعدادات الطابعة",
      "printerSettings": "إعدادات الطابعة",
      "configureOptions": "تكوين خيارات الطباعة"
    },
    "printerSettings": "إعدادات الطابعة"
  },
  "settings": {
    "printer": {
      "title": "إعدادات الطابعة",
      "description": "إدارة إعدادات الطباعة العادية والحرارية",
      "thermalSettings": "إعدادات الطباعة الحرارية",
      "enableThermal": "تفعيل الطباعة الحرارية",
      "quickEnable": "تفعيل سريع",
      "disabledInfo": "الطباعة الحرارية غير مفعلة. يمكنك تفعيلها للحصول على خيارات طباعة إضافية.",
      "type": "نوع الطابعة",
      "network": "شبكة",
      "ip": "عنوان IP",
      "port": "المنفذ",
      "ipHelp": "عنوان IP الخاص بالطابعة الحرارية",
      "portHelp": "منفذ الاتصال (عادة 9100)",
      "testPrint": "اختبار الطباعة",
      "ctrlPInfo": "بعد الحفظ، يمكنك استخدام زرار الطباعة في الشريط العلوي",
      "saved": "تم حفظ الإعدادات بنجاح",
      "saveError": "خطأ في حفظ الإعدادات",
      "testCompleted": "تم إجراء اختبار الطباعة",
        "basicSettings": "الإعدادات الأساسية",
      "advancedSettings": "الإعدادات المتقدمة",
      "systemInfo": "معلومات النظام",
      "testing": "جاري الاختبار...",
      "testConnection": "اختبار الاتصال",
      "connectionSuccess": "تم الاتصال بالطابعة بنجاح",
      "connectionFailed": "فشل الاتصال بالطابعة",
      "connectionError": "خطأ في الاتصال",
      "testSuccess": "تم اختبار الطباعة بنجاح",
      "testFailed": "فشل اختبار الطباعة",
      "testError": "خطأ في اختبار الطباعة",
      "resetSuccess": "تم إعادة تعيين الإعدادات",
      "reset": "إعادة تعيين",
      "autoConnect": "اتصال تلقائي",
      "autoConnectDesc": "الاتصال بالطابعة تلقائياً بدون طلب اختيار البورت",
      "silentPrint": "طباعة صامتة",
      "silentPrintDesc": "طباعة مباشرة بدون عرض نوافذ اختيار",
      "supported": "مدعوم",
      "notSupported": "غير مدعوم",
      "networkPrinting": "الطباعة الشبكية",
      "networkDesc": "طباعة عبر الشبكة المحلية"
    }
  },

  "sidebar": {
    "stock": "المخزون",
     "tableSections": "أقسام الطاولات",
    "posProducts": "منتجات نقاط البيع",
       "hallCaptains": "كباتن الصالة",
            "systemAdmin": "إدارة النظام",
       "deliveryZones": "مناطق التوصيل",
      "offers": "العروض",
      "deliveryCompanies": "شركات التوصيل",
    "deliveryAgents": "مناديب التوصيل",
     "additionProducts": "منتجات الإضافات",
    "userManagement": "إدارة المستخدمين",
    "companySettings": "إعدادات الشركة",
    "permissions": "الصلاحيات",
    "inventory": "المخزون",
    "inventoryadjustments": "تسويات المخزون",
    "sales": "المبيعات",
    "screens": "الشاشات",
    "promo": "العروض",
    "purchases": "المشتريات",
    "finance": "المالية والحسابات",
    "peoples": "الأشخاص",
    "hrm": "الموارد البشرية",
    "reports": "التقارير",
    "data": "البيانات",
    "transactions": "الحركات",
    "products": "المنتجات",
    "createProduct": "إنشاء منتج",
    "expiredProducts": "منتجات منتهية الصلاحية",
    "lowStocks": "مخزون منخفض",
    "category": "الفئات",
    "subCategory": "الفئات الفرعية",
    "brands": "العلامات التجارية",
    "units": "الوحدات",
    "variantAttributes": "سمات المتغير",
    "warranties": "الضمانات",
    "printBarcode": "طباعة الباركود",
    "printQrCode": "طباعة رمز QR",
    "manageStock": "إدارة المخزون",
    "stockAdjustment": "تعديل المخزون",
    "stockTransfer": "تحويل المخزون",
    "invoices": "الفواتير",
    "salesReturn": "مرتجعات المبيعات",
    "quotation": "عرض سعر",
    "pos": "نقطة البيع",
    "coupons": "كوبونات",
    "giftCards": "بطاقات الهدايا",
    "discount": "خصم",
    "purchaseOrders": "أوامر الشراء",
    "purchaseReturn": "مرتجعات المشتريات",
    "expenses": "المصروفات",
    "income": "الإيرادات",
    "bankAccounts": "الحسابات البنكية",
    "moneyTransfer": "تحويل الأموال",
    "balanceSheet": "الميزانية العمومية",
    "trialBalance": "ميزان المراجعة",
    "cashFlow": "التدفق النقدي",
    "accountStatement": "كشف الحساب",
    "customers": "العملاء",
    "billers": "المفوترون",
    "suppliers": "الموردون",
    "stores": "المتاجر",
    "warehouses": "المخازن",
    "employees": "الموظفون",
    "departments": "الأقسام",
    "designation": "المسميات الوظيفية",
    "shifts": "الورديات",
    "attendance": "الحضور",
    "leaves": "الإجازات",
    "holidays": "العطلات",
    "payroll": "الرواتب",
    "salesReport": "تقرير المبيعات",
    "purchaseReport": "تقرير المشتريات",
    "inventoryReport": "تقرير المخزون",
    "invoiceReport": "تقرير الفواتير",
    "supplierReport": "تقرير الموردين",
    "customerReport": "تقرير العملاء",
    "productReport": "تقرير المنتجات",
    "expenseReport": "تقرير المصروفات",
    "incomeReport": "تقرير الإيرادات",
    "taxReport": "تقرير الضرائب",
    "profitLoss": "الأرباح والخسائر",
    "annualReport": "التقرير السنوي",
    "settings": "الإعدادات",
    "productBalance": "أرصدة المنتجات",
    "accounting": "المحاسبة",
    "safes": "الخزائن",
    "accounts": "الحسابات",
    "posPaymentMethods": "طرق دفع نقاط البيع",
    "paymentMethods": "طرق الدفع",
    "safesAndAccounts": "الخزائن والحسابات"
  },
 "products": {
    "title": "المنتجات",
     "pricing": "التسعير",
    "defaultPrices": "الأسعار الافتراضية", 
    "branchPrices": "أسعار الفرع",
    "branchPrice": "سعر الفرع",
    "difference": "الفرق",
    "defaultPrice": "السعر الافتراضي",
    "productPrice": "سعر المنتج",
    "noPricesForBranchPricing": "لا توجد أسعار افتراضية لتسعير الفروع",
    "noBranchesAccess": "لا توجد فروع متاحة للمستخدم",
    "manageBranchPrices": "إدارة أسعار الفروع",
    "selectGroup": "اختر مجموعة",
    "selectPosScreen": "اختر شاشة نقطة البيع",
    "optionGroups": "مجموعات الخيارات",
    "noOptionGroups": "لا توجد مجموعات خيارات",
    "addOptionGroup": "إضافة مجموعة خيارات",
    "basicInfo": "المعلومات الأساسية",
    "tabs": {
      "basicInfoAndPrices": "المعلومات الأساسية والأسعار",
      "basicInfo": "المعلومات الأساسية",
      "prices": "الأسعار",
      "options": "خيارات المنتج"
    },
     "types": {
      "pos": "نقطة بيع",
      "material": "مادة خام",
      "addition": "إضافة",
      "unknown": "غير محدد"
    },
      "form": {
         "isActive": "نشط",
      "posPriceName": "اسم السعر",
      "posNamePlaceholder": "أدخل اسم السعر...",
      "required": "مطلوب",
      "addComment": "إضافة تعليق",
      "comment": "تعليق",
      "product": "منتج",
      "selectProductPrice": "اختر سعر المنتج",
      "selectProductPricePlaceholder": "ابحث عن منتج...",
      "addFromProducts": "إضافة من المنتجات",
      "selectProducts": "اختيار المنتجات",
      "searchProducts": "البحث في المنتجات...",
      "filterByGroup": "فلترة حسب المجموعة",
      "allGroups": "كل المجموعات",
      "productsFound": "تم العثور على {{count}} منتج",
      "selected": "مختار: {{count}}",
      "selectAll": "اختيار الكل",
      "deselectAll": "إلغاء اختيار الكل",
      "priceName": "اسم السعر",
      "noProductsFound": "لا توجد منتجات",
      "addSelected": "إضافة المختار ({{count}})",
      "productName": "اسم المنتج",
      "price": "السعر",
      "barcode": "الباركود",
      "productOptions": "خيارات المنتج",
      "addOptionGroup": "إضافة مجموعة خيارات",
      "noOptionGroups": "لا توجد مجموعات خيارات",
      "optionGroup": "مجموعة خيارات",
      "optionGroupName": "اسم مجموعة الخيارات",
      "isRequired": "مطلوب",
      "allowMultiple": "السماح بالاختيار المتعدد",
      "minSelection": "الحد الأدنى للاختيار",
      "maxSelection": "الحد الأقصى للاختيار",
      "optionItems": "عناصر الخيارات",
      "addOptionItem": "إضافة عنصر",
      "optionItemName": "اسم العنصر",
      "extraPrice": "سعر إضافي",
      "commentOnly": "تعليق فقط",
            "posScreen": "شاشة نقطة البيع",
      "noPosScreen": "بدون شاشة"
    },
  "status": {
      "active": "نشط",
      "title": "الحالة",
      "inactive": "غير نشط"
    },
    "validation": {
      "optionGroupNameRequired": "اسم مجموعة الخيارات مطلوب",
      "optionItemNameRequired": "اسم عنصر الخيار مطلوب"
    },
       "hasBarcode": "يحتوي على باركود",
    "optionGroup": "مجموعة خيارات",
    "subtitle": "إدارة المنتجات والأسعار في النظام",
    "searchPlaceholder": "البحث بالاسم أو الباركود...",
    "searchByBarcode": "البحث بالباركود",
       "components": "المكونات",
           "loadingComponentDetails": "جاري تحميل تفاصيل المكون",
           "selectedComponent": "المكون المحدد",
               "copySuccess": "تم نسخ إعدادات المنتج بنجاح",
    "pasteSuccess": "تم لصق الإعدادات مع {{count}} أسعار",
    "nameRequiredForCopy": "يجب إدخال اسم المنتج أولاً للنسخ",
    "componentsCopySuccess": "تم نسخ المكونات بنجاح",
    "componentsPasteSuccess": "تم لصق المكونات بنجاح",
    "noComponentsToCopy": "لا توجد مكونات للنسخ",
        "addComponentTitle": "إضافة مكون جديد",
        "editComponentTitle": "تعديل المكون",
        "componentName": "اسم المكون",
        "componentCode": "كود المكون",
        "componentGroup": "مجموعة المكون",
        "componentType": "نوع المكون",
        "componentDescription": "وصف المكون",
        "componentReorderLevel": "حد الطلب للمكون",
        "componentCost": "تكلفة المكون",
        "componentLastPurePrice": "آخر سعر شراء للمكون",
        "componentExpirationDays": "أيام انتهاء صلاحية المكون",
    "addComponent": "إضافة مكون",
        "scrollForMore": "مرر لأسفل لتحميل المزيد",
    "noComponents": "لا توجد مكونات",
    "quantity": "الكمية",
        "searchProductPrices": "ابحث في أسعار المنتجات...",
    "noProductPricesFound": "لا توجد أسعار منتجات",
    "selectedPrice": "السعر المحدد",
    "selectComponent": "اختر المكون",
    "componentRequired": "المكون مطلوب",
    "componentProduct": "المنتج المكون",
    "notes": "ملاحظات",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات",
    "name": "اسم المنتج",
    "code": "كود المنتج",
    "group": "المجموعة",
    "type": "نوع المنتج",
    "description": "الوصف",
    "reorderLevel": "حد الطلب",
    "cost": "التكلفة",
    "lastPurePrice": "آخر سعر شراء",
    "expirationDays": "أيام انتهاء الصلاحية",
    "created": "تاريخ الإنشاء",
    "add": "إضافة منتج",
    "edit": "تعديل المنتج",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وجديد",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المنتج مطلوب",
    "groupRequired": "المجموعة مطلوبة",
    "viewPrices": "عرض الأسعار",
    "pricesFor": "أسعار",
    "prices": "أسعار",
    "pricesCount": "عدد الأسعار",
    "unit": "الوحدة",
    "unitFactor": "معامل الوحدة",
    "barcode": "الباركود",
    "price": "السعر",
    "generated": "مولد تلقائياً",
    "autoGenerated": "مولد تلقائياً",
    "yes": "نعم",
    "no": "لا",
    "noPrices": "لا توجد أسعار",
    "selectUnit": "اختر الوحدة",
    "barcodeOptional": "الباركود (اختياري)",
    "addPrice": "إضافة سعر",
      "searchPricesTitle": "البحث في أسعار المنتجات",
    "searchPricesPlaceholder": "البحث بالاسم أو الباركود...",
    "startTypingPrices": "ابدأ بكتابة اسم المنتج أو الباركود للبحث",
    "salePrice": "سعر البيع",
     "product": "منتج",
    "quickSearchPlaceholder": "بحث سريع...",
    "productAdded": "تم إضافة المنتج",
    "noProductFoundWithBarcode": "لم يتم العثور على منتج بهذا الباركود",
    "searchError": "خطأ في البحث",
    "selectPriceTitle": "اختيار سعر المنتج",
    "selected": "محدد",
    "loadingMore": "جاري تحميل المزيد",
    "allResultsLoaded": "تم تحميل جميع النتائج",
    "navigateWithArrows": "التنقل بالأسهم",
    "selectWithEnter": "للاختيار",
     "selectProduct": "اختيار منتج",

    "enterSearchTerm": "أدخل كلمة البحث",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المنتجات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "common": {
    "copy": "نسخ",
    "paste": "لصق",
    "clearCopy": "مسح المنسوخ",
    "currency": "ج.م"
  }
  },


    "reports": {
    "productBalance": {
      "title": "تقرير أرصدة المنتجات",
      "description": "عرض تفصيلي لأرصدة المنتجات في جميع المخازن"
    },
    "filters": {
      "title": "المرشحات",
      "searchProducts": "البحث في المنتجات...",
      "warehouse": "المخزن",
      "allWarehouses": "جميع المخازن",
      "stockStatus": "حالة المخزون",
      "all": "الكل"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المنتجات والمخازن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "stockFilter": {
      "all": "جميع المنتجات",
      "inStock": "متوفر في المخزون",
      "outOfStock": "غير متوفر",
      "lowStock": "مخزون منخفض"
    },
    "stockStatus": {
      "inStock": "متوفر",
      "outOfStock": "غير متوفر",
      "lowStock": "مخزون منخفض"
    },
    "stats": {
      "totalProducts": "إجمالي المنتجات",
      "totalWarehouses": "إجمالي المخازن",
      "inStock": "متوفر في المخزون",
      "outOfStock": "غير متوفر",
      "totalCostValue": "قيمة التكلفة",
      "totalLastPurePriceValue": "قيمة آخر سعر شراء"
    },
    "table": {
      "product": "المنتج",
      "warehouse": "المخزن",
      "totalQuantity": "إجمالي الكمية",
      "remainder": "المتبقي",
      "status": "الحالة",
      "unitBreakdown": "تفصيل الوحدات",
      "unit": "الوحدة",
      "factor": "المعامل",
      "quantity": "الكمية",
      "totalCostValue": "إجمالي قيمة التكلفة",
      "totalLastPurePriceValue": "إجمالي قيمة آخر سعر شراء",
      "cost": "التكلفة",
      "totalCost": "إجمالي التكلفة",
      "lastPurePrice": "آخر سعر شراء",
      "totalLastPurePrice": "إجمالي آخر سعر شراء"
    },
    "noData": "لا توجد بيانات لعرضها",
    "errors": {
      "loadFailed": "فشل في تحميل البيانات"
    }
  },

  "barcode": {
    "scan": "مسح الباركود",
    "scanTitle": "مسح الباركود",
    "pointCamera": "وجه الكاميرا نحو الباركود",
    "clickToStart": "انقر لبدء المسح",
    "startCamera": "تشغيل الكاميرا",
    "simulateScan": "محاكاة المسح"
  },
  "validation": {
    "enterValidNumber": "يرجى إدخال رقم صحيح في حقل",
    "minValue": "القيمة لا يمكن أن تكون أقل من 0",
    "maxPercent": "القيمة لا يمكن أن تزيد عن 100%",
        "supplierRequired": "يجب اختيار المورد",
    "warehouseRequired": "يجب اختيار المخزن",
    "itemsRequired": "يجب إضافة منتج واحد على الأقل"
  },

   "export": {
    "title": "تصدير البيانات",
    "pdf": "تصدير PDF",
    "excel": "تصدير Excel",
    "recordsCount": "{{count}} سجل",
    "exportedOn": "تم التصدير في",
    "subject": "تقرير البيانات",
    "author": "نظام إدارة المخزون",
    "errorPdf": "حدث خطأ أثناء تصدير PDF",
    "errorExcel": "حدث خطأ أثناء تصدير Excel",
        "exportExcel": "تصدير Excel",
    "exportPdf": "تصدير PDF"
  },
   "suppliers": {
    "title": "الموردين",
    "subtitle": "إدارة الموردين والشركات الموردة",
    "name": "اسم المورد",
    "code": "كود المورد",
    "phone": "رقم الهاتف",
    "address": "العنوان",
    "notes": "ملاحظات",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في الموردين...",
    "add": "إضافة مورد",
    "edit": "تعديل المورد",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وجديد",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المورد مطلوب",
    "nameMinLength": "اسم المورد يجب أن يكون على الأقل حرفين",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "addressRequired": "العنوان مطلوب",
      "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الموردين...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
    },
"purchaseOrders": {
    "title": "أوامر الشراء",
    "list": "قائمة أوامر الشراء",
    "add": "إضافة أمر شراء",
    "edit": "تعديل أمر شراء",
    "docNumber": "رقم المستند",
    "docNumberRequired": "رقم المستند مطلوب",
    "date": "التاريخ",
    "dateRequired": "التاريخ مطلوب",
    "supplier": "المورد",
    "supplierRequired": "المورد مطلوب",
    "selectSupplier": "اختر المورد",
    "warehouse": "المخزن",
    "warehouseRequired": "المخزن مطلوب",
    "selectWarehouse": "اختر المخزن",
    "totalDiscount": "إجمالي الخصم",
    "totalTax": "إجمالي الضريبة",
    "items": "الأصناف",
    "addItemWithSearch": "إضافة صنف بالبحث",
    "quantity": "الكمية",
    "price": "السعر",
    "discount": "الخصم",
    "tax": "الضريبة",
    "total": "الإجمالي",
    "subTotal": "المجموع الفرعي",
    "discountValue": "قيمة الخصم",
    "taxValue": "قيمة الضريبة",
    "noItems": "لا توجد أصناف",
    "saveAndNew": "حفظ وجديد",
    "product": "المنتج",
    "unit": "الوحدة",
    "code": "الرمز",
    "itemsCount": "عدد العناصر",
    "pending": "قيد الانتظار",
    "submitted": "مُرسل",
    "active": "نشط",
    "inactive": "غير نشط",
      "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر", 
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في أوامر الشراء...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "status": {
      "title": "حالة أمر الشراء",
      "pending": "معلق",
      "draft": "مسودة", 
      "submitted": "مؤكد",
      "unknown": "غير معروف"
    },
    "table": {
      "docNumber": "رقم المستند",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "date": "التاريخ",
      "total": "الإجمالي",
      "status": "الحالة"
    }
    
  },
    "purchases": {
    "title": "فواتير الشراء",
    "description": "إدارة فواتير الشراء والمدفوعات",
    "addButton": "إضافة فاتورة شراء",
    "searchPlaceholder": "البحث في فواتير الشراء...",
    "listTitle": "فواتير الشراء",
    "noData": "لا توجد فواتير شراء",
     "view": {
      "title": "عرض فاتورة الشراء"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في فواتير الشراء...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "basicInfo": "المعلومات الأساسية",
    "discountsAndTaxes": "الخصومات والضرائب",
    "items": "الأصناف",
    "noItems": "لا توجد أصناف",
    "invoiceNumber": "رقم الفاتورة",
    "invoiceDate": "تاريخ الفاتورة",
    "supplier": "المورد",
    "warehouse": "المخزن",
    "selectSupplier": "اختر المورد",
    "selectWarehouse": "اختر المخزن",
    "quantity": "الكمية",
    "price": "السعر",
    "discount": "الخصم",
    "tax": "الضريبة",
    "total": "الإجمالي",
    "totalDiscount": "إجمالي الخصم",
    "totalTax": "إجمالي الضريبة",
    "savePending": "حفظ معلق",
    "submit": "تأكيد",
    "edit": "تعديل فاتورة الشراء",
    "status": {
      "pending": "معلقة",
      "submitted": "مقدمة"
    },
    
    "table": {
      "invoiceNumber": "رقم الفاتورة",
      "code": "الكود",
      "purchaseOrder": "أمر الشراء",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "invoiceDate": "تاريخ الفاتورة",
      "total": "الإجمالي",
      "itemsCount": "عدد الأصناف",
      "status": "الحالة",
      "items": "صنف",
      "directInvoice": "فاتورة مباشرة"
    },
    "form": {
      "addTitle": "إضافة فاتورة شراء",
      "editTitle": "تعديل فاتورة شراء",
      "invoiceNumber": "رقم الفاتورة",
      "invoiceDate": "تاريخ الفاتورة",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "selectSupplier": "اختر المورد",
      "selectWarehouse": "اختر المخزن",
      "status": "الحالة",
      "totalDiscount": "إجمالي الخصم",
      "totalTax": "إجمالي الضريبة",
      "subTotal": "المجموع الفرعي",
      "discountValue": "قيمة الخصم",
      "taxValue": "قيمة الضريبة",
      "total": "الإجمالي",
      "items": "الأصناف",
      "quickSearch": "البحث السريع في المنتجات...",
      "scanBarcode": "مسح الباركود",
      "addBySearch": "إضافة بالبحث",
      "noItems": "لا توجد أصناف",
      "product": "المنتج",
      "unit": "الوحدة",
      "quantity": "الكمية",
      "price": "السعر",
      "discount": "الخصم",
      "tax": "الضريبة",
      "importFromPO": "استيراد من أمر شراء",
      "savePending": "حفظ معلق",
      "submitInvoice": "تقديم الفاتورة",
      "linkedToPO": "مرتبط بأمر الشراء",
      "poCode": "كود الأمر",
      "poDate": "تاريخ الأمر",
      "poTotal": "إجمالي الأمر",
      "itemsCount": "عدد الأصناف",
      "selectPurchaseOrder": "اختيار أمر شراء",
      "searchPurchaseOrders": "البحث في أوامر الشراء...",
      "noSubmittedPO": "لا توجد أوامر شراء مقدمة",
      "code": "الكود",
      "date": "التاريخ",
      "unknownProduct": "منتج غير محدد",
      "purchaseOrderImported": "تم تحميل أمر الشراء: {{number}}",
      "productAdded": "تم إضافة المنتج: {{name}}",
      "barcodeNotFound": "لم يتم العثور على منتج بهذا الباركود",
      "searchError": "خطأ في البحث عن المنتج",
      "inLine": "في السطر",
      "missingProductId": "مفقود معرف المنتج",
      "missingPriceId": "مفقود معرف السعر",
      "invalidNumber": "يرجى إدخال رقم صحيح في {{field}}",
      "validation": {
        "supplierRequired": "يجب اختيار المورد",
        "warehouseRequired": "يجب اختيار المخزن",
        "itemsRequired": "يجب إضافة منتج واحد على الأقل"
      }
    },
    "errors": {
      "loadFailed": "فشل في تحميل فواتير الشراء",
      "dataLoadFailed": "فشل في تحميل البيانات",
      "addFailed": "فشل في إضافة فاتورة الشراء",
      "updateFailed": "فشل في تحديث فاتورة الشراء",
      "idRequired": "معرف فاتورة الشراء مطلوب",
      "noPurchaseLoaded": "لا توجد فاتورة شراء محملة",
      "purchaseNotFound": "فاتورة الشراء غير موجودة",
      "missingId": "خطأ: معرف فاتورة الشراء غير موجود"
    },
    "messages": {
      "addSuccess": "تم إنشاء فاتورة الشراء بنجاح",
      "updateSuccess": "تم تحديث فاتورة الشراء بنجاح"
    }
  },
  "common": {
    "search": "بحث",
    "update": "تحديث",
    "saveChanges": "حفظ التغييرات",
    "selected": "محدد",
    "active": "نشط",
    "inactive": "غير نشط",
    "currency": "جنيه",
    "hideColumn": "إخفاء العمود",
    "all": "الكل",
    "home": "الرئيسية",
    "add": "إضافة",
        "copy": "نسخ",
    "paste": "لصق",
    "clear": "مسح",
    "expoerDate": "تاريخ التصدير",
    "edit": "تعديل",
    "cancel": "إلغاء",
    "loading": "جاري التحميل...",
    "save": "حفظ",
    "back": "رجوع",
    "saveError": "خطأ في الحفظ",
    "inLine": "في السطر",
    "searching": "جاري البحث",
    "view": "عرض",
    "submit": "تقديم",
    "delete": "حذف",
    "noSearchResults": "لا توجد نتائج للبحث",
    "notSpecified": "غير محدد",
    "required": "مطلوب",
    "refresh": "تحديث",
        "yes": "نعم",
    "no": "لا",
    "exportedOn": "تم التصدير في",
    "actions": "الإجراءات",
       "density": "الكثافة",
    "compact": "مضغوط",
    "standard": "قياسي",
    "comfortable": "مريح",
    "export": "تصدير",
    "exportCSV": "تصدير CSV",
    "print": "طباعة",
    "columns": "الأعمدة",
    "filters": "المرشحات",
    "hideFilters": "إخفاء المرشحات",
    "showFilters": "إظهار المرشحات",
    "findColumn": "البحث عن عمود",
    "columnTitle": "عنوان العمود",
    "reorderColumn": "إعادة ترتيب العمود",
    "showAll": "إظهار الكل",
    "hideAll": "إخفاء الكل",
    "addFilter": "إضافة مرشح",
    "operators": "العوامل",
    "and": "و",
    "or": "أو",
    "value": "القيمة",
    "filterValue": "قيمة المرشح",
    "contains": "يحتوي على",
    "equals": "يساوي",
    "startsWith": "يبدأ بـ",
    "endsWith": "ينتهي بـ",
    "is": "هو",
    "isNot": "ليس",
    "isAfter": "بعد",
    "isOnOrAfter": "في أو بعد",
    "isBefore": "قبل",
    "isOnOrBefore": "في أو قبل",
    "isEmpty": "فارغ",
    "isNotEmpty": "غير فارغ",
    "menu": "القائمة",
    "showColumns": "إظهار الأعمدة",
    "filter": "مرشح",
    "hide": "إخفاء",
    "unsort": "إلغاء الترتيب",
    "sortAsc": "ترتيب تصاعدي",
    "sortDesc": "ترتيب تنازلي",
    "activeFilters": "مرشحات نشطة",
    "activeFilter": "مرشح نشط",
    "sort": "ترتيب",
    "rowsSelected": "صفوف محددة",
    "rowSelected": "صف محدد",
    "totalRows": "إجمالي الصفوف",
    "of": "من",
    "checkboxSelection": "تحديد الصناديق",
    "noResults": "لا توجد نتائج",
    "saveAndNew": "حفظ مع جديد",
       "supported": "مدعوم",
    "notSupported": "غير مدعوم"

    
  },
  "warehouses": {
    "title": "المخازن",
    "subtitle": "إدارة المخزن",
    "save": "حفظ التغييرات",
    "name": "اسم المخزن",
    "code": "رمز المخزن",
    "address": "عنوان المخزن",
    "phone": "رقم الهاتف",
    "email": "البريد الإلكتروني",
    "status": "الحالة",
    "add": "إضافة مخزن",
    "edit": "تعديل المخزن",
    "contact": "شخص الاتصال",
    "workPhone": "رقم الهاتف (العمل)",
    "city": "المدينة",
    "state": "الولاية",
    "country": "البلد",
    "postal": "الرمز البريدي",
    "totalProducts": "إجمالي المنتجات",
    "qty": "الكمية",
    "created": "تاريخ الإنشاء",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المخازن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "active": "نشط"
  },
  "status": {
    "active": "نشط",
    "inactive": "غير نشط"
  },
   "units": {
    "title": "الوحدات",
    "subtitle": "إدارة وحدات القياس في النظام",
    "name": "اسم الوحدة",
    "code": "كود الوحدة",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في الوحدات...",
    "add": "إضافة وحدة",
    "edit": "تعديل الوحدة",
    "save": "حفظ",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم الوحدة مطلوب",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الوحدات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
  },
  "groups": {
    "title": "المجموعات",
    "subtitle": "إدارة المجموعات والتصنيفات في النظام",
    "name": "اسم المجموعة",
    "code": "كود المجموعة",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في المجموعات...",
    "add": "إضافة مجموعة",
    "addChild": "إضافة مجموعة فرعية",
    "edit": "تعديل المجموعة",
    "save": "حفظ",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المجموعة مطلوب",
    "parentGroup": "المجموعة الأب",
    "backgroundColor": "لون الخلفية",
    "fontColor": "لون الخط",
    "preview": "معاينة",
    "sampleText": "نص تجريبي",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المجموعات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "level": "المستوى",
    "childrenCount": "عدد المجموعات الفرعية",
    "noGroups": "لا توجد مجموعات",
    "rootGroups": "المجموعات الرئيسية"
  },




   "adjustment": {
    "title": "تسوية الجرد",
    "types": {
      "openingBalance": "أرصدة أول المدة",
      "manualAdjustment": "تسوية جرد",
      "notSelected": "لم يتم اختيار نوع التسوية"
    },
      "search": {
      "title": "البحث في الأصناف",
      "placeholder": "ابحث بالاسم أو الباركود...",
      "scanBarcode": "مسح الباركود",
      "currentQuantity": "الكمية الحالية",
      "barcode": "الباركود",
      "noResults": "لا توجد نتائج للبحث",
      "filteredFrom": "مفلتر من {total}"
    },
     "barcode": {
      "title": "مسح الباركود",
      "instruction": "امسح الباركود أو أدخله يدوياً",
      "label": "الباركود",
      "placeholder": "أدخل الباركود هنا...",
      "scan": "بحث"
    },
    "form": {
      "warehouse": "المخزن",
      "selectWarehouse": "اختر المخزن",
      "adjustmentType": "نوع التسوية",
      "referenceNumber": "الرقم المرجعي",
      "reason": "السبب",
      "items": "الأصناف",
      "product": "المنتج",
            "barcode": "الباركود",
      "unit": "الوحدة",
      "unitFactor": "معامل التحويل",
      "oldQuantity": "الكمية القديمة",
      "newQuantity": "الكمية الجديدة",
      "difference": "الفرق",
      "notes": "ملاحظات",
      "noItems": "لا توجد أصناف",
      "save": "حفظ",
      "submit": "تأكيد التسوية",
      "validation": {
        "warehouseRequired": "يجب اختيار المخزن"
      }
    },
    "dialog": {
      "newAdjustmentTitle": "تسوية جرد جديدة",
      "newAdjustmentMessage": "تم بدء عملية جرد جديدة",
      "selectAdjustmentType": "يرجى اختيار نوع التسوية:"
    },
    "messages": {
      "newAdjustmentStarted": "تم بدء عملية جرد جديدة بنجاح",
      "saveSuccess": "تم حفظ التسوية بنجاح",
      "submitSuccess": "تم تأكيد التسوية بنجاح",
            "selectWarehouseToStart": "برجاء اختيار المخزن لبدء تسوية جرد جديدة"

    },
    "errors": {
      "loadWarehousesFailed": "فشل في تحميل المخازن",
      "loadAdjustmentFailed": "فشل في تحميل بيانات التسوية",
      "saveFailed": "فشل في حفظ التسوية",
      "submitFailed": "فشل في تأكيد التسوية"
    }
  },
    "adjustments": {
    "list": {
      "title": "قائمة تسويات الجرد",
      "newAdjustment": "تسوية جرد جديدة",
      "noAdjustments": "لا توجد تسويات جرد"
    },
    "view": {
      "title": "عرض تسوية الجرد",
      "adjustmentInfo": "معلومات التسوية"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في التسويات...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "table": {
      "adjustmentId": "معرف التسوية",
      "type": "النوع",
      "date": "التاريخ",
      "referenceNumber": "الرقم المرجعي",
      "reason": "السبب",
      "totalItems": "عدد الأصناف",
      "totalDifference": "إجمالي الفرق",
      "status": "الحالة",
            "warehouse": "المخزن"

    },
    "types": {
      "new": "جديدة",
      "openingBalance": "أرصدة أول المدة",
      "manualAdjustment": "تسوية جرد",
      "unknown": "غير معروف"
    },
    "status": {
      "saved": "محفوظة",
      "submitted": "مقدمة",
      "unknown": "غير معروف"
    },
    "actions": {
      "view": "عرض"
    },
    "errors": {
      "loadFailed": "فشل في تحميل قائمة التسويات",
      "notFound": "التسوية غير موجودة"
    },
    "summary": {
      "totalItems": "إجمالي الأصناف",
      "totalPositive": "إجمالي الزيادة",
      "totalNegative": "إجمالي النقص"
    },
     "common": {
    "all": "الكل",
    "of": "من"
  }
  },




























  "safes": {
    "title": "الخزائن",
    "add": "إضافة خزنة",
    "edit": "تعديل خزنة",
    "name": "اسم الخزنة",
    "type": "النوع",
    "accountNumber": "رقم الحساب",
    "collectionFeePercent": "نسبة رسوم التحصيل",
    "status": "الحالة",
    "isActive": "نشط",
    "active": "نشط",
    "inactive": "غير نشط",
    "noSafes": "لا توجد خزائن",
    "searchPlaceholder": "ابحث في الخزائن...",
    "types": {
      "cash": "نقدي",
        "safe": "خزنة"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الخزائن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم الخزنة مطلوب",
      "typeRequired": "نوع الخزنة مطلوب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الخزائن",
      "addFailed": "فشل في إضافة الخزنة",
      "updateFailed": "فشل في تحديث الخزنة"
    }
  },
  "accounts": {
    "title": "الحسابات",
    "add": "إضافة حساب",
    "edit": "تعديل حساب",
    "name": "اسم الحساب",
    "type": "النوع",
    "accountNumber": "رقم الحساب",
    "collectionFeePercent": "نسبة رسوم التحصيل",
    "status": "الحالة",
    "isActive": "نشط",
    "active": "نشط",
    "inactive": "غير نشط",
    "noAccounts": "لا توجد حسابات",
    "searchPlaceholder": "ابحث في الحسابات...",
    "typePlaceholder": "مثل: Bank, Wallet, Visa, InstaPay, StaffAccount",
    "types": {
      "bank": "بنك",
      "wallet": "محفظة إلكترونية",
      "visa": "فيزا",
      "instapay": "إنستاباي",
      "staffaccount": "حساب موظف",
      "other": "أخرى",
      "cash": "نقدي"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الحسابات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم الحساب مطلوب",
      "typeRequired": "نوع الحساب مطلوب",
      "accountNumberRequired": "رقم الحساب مطلوب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الحسابات",
      "addFailed": "فشل في إضافة الحساب",
      "updateFailed": "فشل في تحديث الحساب"
    }
  },
    "posPaymentMethods": {
    "title": "طرق الدفع",
    "add": "إضافة طريقة دفع",
    "edit": "تعديل طريقة دفع",
    "name": "اسم طريقة الدفع",
    "safeOrAccount": "الخزنة أو الحساب",
    "selectedAccount": "الحساب المحدد",
    "branchesNote": "يمكن ربط طريقة الدفع بفروع مختلفة لاحقاً",
    "status": "الحالة",
    "active": "نشط",
    "inactive": "غير نشط",
    "noPaymentMethods": "لا توجد طرق دفع",
    "searchPlaceholder": "ابحث في طرق الدفع...",
       "accountType": "نوع الحساب",
    "accountNumber": "رقم الحساب",
    "collectionFee": "رسوم التحصيل",
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في طرق الدفع...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم طريقة الدفع مطلوب",
      "accountRequired": "يجب اختيار خزنة أو حساب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل طرق الدفع",
      "addFailed": "فشل في إضافة طريقة الدفع",
      "updateFailed": "فشل في تحديث طريقة الدفع"
    }
  },





 "errors": {
    "title": "خطأ",
    "validationError": "خطأ في البيانات",
    "forbidden": "ممنوع",
    "notFound": "غير موجود",
    "conflict": "تعارض في البيانات",
    "serverError": "خطأ في الخادم",
    "multipleErrors": "أخطاء متعددة",
        "unauthorized": {
      "title": "غير مصرح لك",
      "message": "ليس لديك صلاحية للوصول إلى هذه الصفحة",
      "backToDashboard": "العودة للرئيسية"
    },
    "noBranches": {
      "title": "لا توجد فروع متاحة",
      "message": "لا يوجد فروع مخصصة لهذا المستخدم. يرجى التواصل مع الإدارة لتخصيص الفروع المناسبة."
    }
  },
  "success": {
    "title": "نجح"
  },
  "warning": {
    "title": "تحذير"
  },
  "info": {
    "title": "معلومات"
  },













    "posScreens": {
    "title": "شاشات نقاط البيع",
    "add": "إضافة شاشة",
    "addChild": "إضافة شاشة فرعية",
    "edit": "تعديل شاشة",
    "save": "حفظ",
    "name": "اسم الشاشة",
    "parentScreen": "الشاشة الأب",
    "noParent": "بدون شاشة أب",
    "displayOrder": "ترتيب العرض",
    "visibility": "الرؤية",
    "icon": "الأيقونة",
    "color": "اللون",
    "preview": "معاينة",
    "sampleText": "نص تجريبي",
    "visible": "مرئي",
    "hidden": "مخفي",
    "active": "نشط",
    "inactive": "غير نشط",
    "status": "الحالة",
    "level": "المستوى",
    "noScreens": "لا توجد شاشات",
    "rootScreens": "الشاشات الجذرية",
    "searchPlaceholder": "ابحث في الشاشات...",
    "nameRequired": "اسم الشاشة مطلوب",
    "iconRequired": "الأيقونة مطلوبة",
    "iconHelp": "استخدم رمز تعبيري أو نص قصير",
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الشاشات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
  },


    "import": {
    "import": "استيراد",
    "downloadTemplate": "تحميل القالب",
    "importTitle": "استيراد البيانات",
    "selectFile": "اختر ملف Excel",
    "importing": "جاري الاستيراد",
    "errorsFound": "تم العثور على أخطاء",
    "importComplete": "تم الاستيراد بنجاح",
        "rowError": "الصف {{row}}:",
    "addError": "خطأ في الإضافة",
    "successfulRecords": "السجلات الناجحة",
    "failedRecords": "السجلات الفاشلة",
    "andMore": "و {count} أخطاء أخرى",
    "dataPreview": "معاينة البيانات",
    "records": "سجل",
    "andMoreRecords": "و {count} سجلات أخرى",
    "fileReadError": "خطأ في قراءة الملف",
    "requiredField": "الحقل المطلوب",
    "inRow": "في الصف",
    "validationError": "خطأ في التحقق",
    "importError": "خطأ في الاستيراد"
  },

  "auth": {
    "login": {
      "title": "تسجيل الدخول",
      "tenantId": "كود الشركة",
      "tenantPlaceholder": "أدخل كود الشركة",
      "description": "صفحة تسجيل الدخول",
      "phoneNumber": "رقم الهاتف",
      "password": "كلمة المرور",
      "phonePlaceholder": "01xxxxxxxxx",
      "passwordPlaceholder": "أدخل كلمة المرور",
      "rememberMe": "تذكرني",
      "forgotPassword": "نسيت كلمة المرور؟",
      "signIn": "تسجيل الدخول",
      "signingIn": "جاري تسجيل الدخول...",
      "failed": "فشل في تسجيل الدخول",
      "newUser": "مستخدم جديد؟",
      "createAccount": "إنشاء حساب"
    },
    "branchSelection": {
      "title": "اختيار الفرع",
      "description": "صفحة اختيار الفرع",
      "selectBranch": "اختر الفرع",
      "welcomeMessage": "مرحباً {{userName}}، لديك صلاحية الوصول لأكثر من فرع",
      "selectThisBranch": "اختيار هذا الفرع",
      "selecting": "جاري التحديد...",
      "noBranches": "لا توجد فروع متاحة",
      "noBranchesMessage": "لا يوجد فروع مخصصة لهذا المستخدم. يرجى التواصل مع الإدارة."
    },
    "logout": "تسجيل الخروج",
     "errors": {
      "noBranches": "لا يوجد فروع متاحة لهذا المستخدم"
    }
  },
  "users": {
    "userName": "اسم المستخدم",
    "phoneNo": "رقم الهاتف",
    "email": "البريد الإلكتروني",
    "password": "كلمة المرور",
    "title": "إدارة المستخدمين",
    "noUsers": "لا توجد مستخدمين",
        "validation": {
      "userNameTooShort": "اسم المستخدم يجب أن يكون أكثر من حرفين",
      "userNameTooLong": "اسم المستخدم طويل جداً",
      "invalidPhone": "رقم هاتف غير صحيح",
      "invalidEmail": "بريد إلكتروني غير صحيح",
            "requiredFields": "يرجى إدخال جميع البيانات المطلوبة",
      "passwordRequired": "يرجى إدخال كلمة المرور للمستخدم الجديد",
      "passwordTooShort": "كلمة المرور يجب أن تكون 6 أحرف على الأقل"
    },
    "table": {
      "userName": "اسم المستخدم",
      "phoneNumber": "رقم الهاتف",
      "email": "البريد الإلكتروني",
      "actions": "الإجراءات"
    },
    "actions": {
      "add": "إضافة مستخدم"
    },
    "dialog": {
      "addTitle": "إضافة مستخدم جديد",
      "editTitle": "تعديل مستخدم"
    },
    "form": {
      "userName": "اسم المستخدم",
      "phoneNumber": "رقم الهاتف",
      "password": "كلمة المرور",
      "passwordHelp": "اتركها فارغة إذا كنت لا تريد تغييرها"
    },
    "messages": {
      "addSuccess": "تم إضافة المستخدم بنجاح",
      "addFailed": "فشل في إضافة المستخدم",
      "editComingSoon": "سيتم إضافة وظيفة التعديل قريباً"
    },
    "errors": {
      "loadFailed": "خطأ في تحميل المستخدمين",
      "saveFailed": "خطأ في حفظ المستخدم"
    }
  },
  "company": {
    "title": "إعدادات الشركة والفروع",
    "description": "إدارة بيانات الشركة والفروع التابعة لها",
    "tabs": {
      "companyInfo": "بيانات الشركة",
      "branchManagement": "إدارة الفروع"
    },
    "form": {
      "companyName": "اسم الشركة",
      "companyAddress": "عنوان الشركة",
      "companyPhone": "هاتف الشركة",
      "companyEmail": "بريد الشركة الإلكتروني",
      "branchName": "اسم الفرع",
      "branchAddress": "عنوان الفرع",
      "branchPhone": "هاتف الفرع"
    },
    "info": {
      "currentCompanyInfo": "معلومات الشركة الحالية",
      "companyName": "اسم الشركة",
      "branchCount": "عدد الفروع",
      "branchCountValue": "{{count}} فرع",
      "currentBranch": "الفرع الحالي"
    },
    "branches": {
      "title": "فروع الشركة ({{count}})",
      "currentBranch": "الفرع الحالي",
      "otherBranch": "فرع آخر"
    },
    "table": {
      "branchName": "اسم الفرع",
      "address": "العنوان",
      "phone": "الهاتف",
      "status": "الحالة",
      "actions": "الإجراءات"
    },
    "dialog": {
      "editBranch": "تعديل بيانات الفرع"
    },
    "messages": {
      "updateSuccess": "تم تحديث بيانات الشركة بنجاح",
      "branchUpdateSuccess": "تم تحديث بيانات الفرع بنجاح"
    },
    "errors": {
      "updateFailed": "خطأ في تحديث بيانات الشركة",
      "branchUpdateFailed": "خطأ في تحديث بيانات الفرع"
    }
  },
   "permissions": {
    "title": "إدارة الصلاحيات",
    "description": "إدارة صلاحيات المستخدمين للوصول إلى صفحات ووظائف النظام",
    "loading": "جاري تحميل البيانات...",
    "noData": "لا توجد بيانات مستخدمين",
    "pagesCount": "{{accessible}}/{{total}} صفحة",
    "enabled": "مفعل",
    "disabled": "معطل",
    "subPermissions": "الصلاحيات الفرعية",
    "messages": {
      "updateSuccess": "تم تحديث الصلاحية بنجاح"
    },
    "errors": {
      "loadFailed": "خطأ في تحميل البيانات",
      "updateFailed": "خطأ في تحديث الصلاحية"
    }
  },

  "branch": {
    "selectBranch": "اختر الفرع"
  },
  "profile": {
    "user": "المستخدم",
    "menu": {
      "userManagement": "إدارة المستخدمين",
      "companySettings": "إعدادات الشركة",
      "permissions": "الصلاحيات",
      "inbox": "صندوق الرسائل",
      "taskList": "قائمة المهام"
    }
  },

   "posProducts": {
    "title": "منتجات نقاط البيع",
    "searchPlaceholder": "البحث في منتجات نقاط البيع...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة منتج POS",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات POS",
    "errors": {
      "loadFailed": "فشل في تحميل منتجات نقاط البيع",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المنتج",
      "updateFailed": "فشل في تحديث المنتج"
    }
  },
    "materials": {
    "title": "المواد الخام",
    "searchPlaceholder": "البحث في المواد الخام...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة مادة خام",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noMaterials": "لا توجد مواد خام",
    "errors": {
      "loadFailed": "فشل في تحميل المواد الخام",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المادة",
      "updateFailed": "فشل في تحديث المادة"
    }
  },
    "additionProducts": {
    "title": "منتجات الإضافات",
    "searchPlaceholder": "البحث في منتجات الإضافات...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة منتج إضافة",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات إضافات",
    "errors": {
      "loadFailed": "فشل في تحميل منتجات الإضافات",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المنتج",
      "updateFailed": "فشل في تحديث المنتج"
    }
  },

    "deliveryZones": {
    "title": "مناطق التوصيل",
    "add": "إضافة منطقة",
    "edit": "تعديل منطقة",
    "searchPlaceholder": "البحث في المناطق...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noZones": "لا توجد مناطق توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم المنطقة مطلوب",
    "deliveryChargeRequired": "رسوم التوصيل مطلوبة",
    "defaultBonusRequired": "المكافأة الافتراضية مطلوبة",
    "form": {
      "name": "اسم المنطقة",
      "deliveryCharge": "رسوم التوصيل",
      "defaultBonus": "المكافأة الافتراضية",
      "branch": "الفرع",
      "allBranches": "كل الفروع",
      "status": "الحالة",
      "isActive": "نشط"
    },
    "errors": {
      "loadFailed": "فشل في تحميل المناطق",
      "addFailed": "فشل في إضافة المنطقة",
      "updateFailed": "فشل في تحديث المنطقة"
    }
  },
  "deliveryAgents": {
    "title": "مناديب التوصيل",
    "add": "إضافة مندوب",
    "edit": "تعديل مندوب",
    "searchPlaceholder": "البحث في المناديب...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noAgents": "لا توجد مناديب توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم المندوب مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "branchRequired": "الفرع مطلوب",
    "deleteConfirmTitle": "تأكيد الحذف",
    "deleteConfirmMessage": "هل أنت متأكد من حذف المندوب {{name}}؟",
    "form": {
      "name": "اسم المندوب",
      "phone": "رقم الهاتف",
      "branch": "الفرع",
      "status": "الحالة"
    },
    "errors": {
      "loadFailed": "فشل في تحميل المناديب",
      "addFailed": "فشل في إضافة المندوب",
      "updateFailed": "فشل في تحديث المندوب",
      "deleteFailed": "فشل في حذف المندوب"
    }
  },
   "tableSections": {
    "title": "أقسام الطاولات",
    "add": "إضافة قسم",
    "edit": "تعديل قسم",
    "searchPlaceholder": "البحث في الأقسام والطاولات...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noSections": "لا توجد أقسام",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم القسم مطلوب",
    "serviceChargeRequired": "رسوم الخدمة مطلوبة",
    "tableNameRequired": "اسم الطاولة مطلوب",
    "capacityRequired": "سعة الطاولة مطلوبة",
    "totalTables": "إجمالي الطاولات: {{count}}",
    "form": {
      "name": "اسم القسم",
      "serviceCharge": "رسوم الخدمة",
      "tables": "الطاولات",
      "tablesCount": "عدد الطاولات",
      "totalCapacity": "السعة الإجمالية",
      "branch": "الفرع",
      "status": "الحالة",
      "tableName": "اسم الطاولة",
      "capacity": "السعة",
      "persons": "شخص",
      "addTable": "إضافة طاولة",
      "noTables": "لا توجد طاولات - اضغط لإضافة طاولة"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الأقسام",
      "addFailed": "فشل في إضافة القسم",
      "updateFailed": "فشل في تحديث القسم"
    }
  },

  "hallCaptains": {
    "title": "كباتن الصالة",
    "add": "إضافة كابتن",
    "edit": "تعديل كابتن",
    "searchPlaceholder": "البحث في الكباتن...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCaptains": "لا توجد كباتن",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم الكابتن مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "branchRequired": "الفرع مطلوب",
    "form": {
      "name": "اسم الكابتن",
      "phone": "رقم الهاتف",
      "notes": "ملاحظات",
      "notesPlaceholder": "أدخل أي ملاحظات إضافية...",
      "branch": "الفرع",
      "isActive": "نشط"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الكباتن",
      "addFailed": "فشل في إضافة الكابتن",
      "updateFailed": "فشل في تحديث الكابتن"
    }
  },
  "customers": {
    "title": "العملاء",
    "add": "إضافة عميل",
    "edit": "تعديل عميل",
    "searchPlaceholder": "البحث في العملاء...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCustomers": "لا توجد عملاء",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "pageInfo": "الصفحة {{page}} من {{total}}",
    "nameRequired": "اسم العميل مطلوب",
    "phone1Required": "رقم الهاتف الأساسي مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "addressLineRequired": "عنوان الشارع مطلوب",
    "zoneRequired": "المنطقة مطلوبة",
    "deleteConfirmTitle": "تأكيد الحذف",
    "deleteConfirmMessage": "هل أنت متأكد من حذف العميل {{name}}؟",
    "form": {
      "basicInfo": "البيانات الأساسية",
      "name": "اسم العميل",
      "phone1": "الهاتف الأساسي",
      "phone2": "الهاتف الثاني",
      "phone3": "الهاتف الثالث",
      "phone4": "الهاتف الرابع",
      "isVIP": "عميل مميز",
      "isBlocked": "محظور",
      "isActive": "نشط",
      "type": "نوع العميل",
      "vip": "مميز",
      "blocked": "محظور",
      "regular": "عادي",
      "addresses": "العناوين",
      "addressCount": "عنوان",
      "addressesCount": "عدد العناوين",
      "primaryAddress": "العنوان الأساسي",
      "addAddress": "إضافة عنوان",
      "noAddresses": "لا توجد عناوين - اضغط لإضافة عنوان",
      "address": "العنوان",
      "addressLine": "عنوان الشارع",
      "zone": "المنطقة",
      "floor": "الطابق",
      "apartment": "الشقة",
      "landmark": "علامة مميزة",
      "notes": "ملاحظات"
    },
    "errors": {
      "loadFailed": "فشل في تحميل العملاء",
      "addFailed": "فشل في إضافة العميل",
      "updateFailed": "فشل في تحديث العميل",
      "deleteFailed": "فشل في حذف العميل"
    }
  },
 "offers": {
    "title": "العروض",
    "add": "إضافة عرض",
    "edit": "تعديل عرض",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "searchPlaceholder": "البحث في العروض...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noOffers": "لا توجد عروض",
    "noSearchResults": "لا توجد نتائج للبحث",
    "nameRequired": "اسم العرض مطلوب",
    "startDateRequired": "تاريخ البداية مطلوب",
    "endDateRequired": "تاريخ النهاية مطلوب",
    "form": {
      "name": "اسم العرض",
       "basicInfo": "المعلومات الأساسية",
      "offerGroups": "عدد المجموعات",
      "offerItems": "عناصر العرض",
         "fixedItems": "العناصر الثابتة",
      "noFixedItems": "لا توجد عناصر ثابتة",
      "selectFixedItems": "اختيار عناصر ثابتة",
      "original": "أصلي",
      "addGroup": "إضافة مجموعة",
      "addItem": "إضافة عنصر",
        "generalItems": "العناصر العامة",
      "groupItems": "عناصر المجموعة",
      "noItemsInGroup": "لا توجد عناصر في هذه المجموعة",
      "selectProduct": "اختر منتج",
      "selectProducts": "اختيار المنتجات",
      "selectItemsForGroup": "اختيار عناصر للمجموعة",
      "selectGeneralItems": "اختيار عناصر عامة",
      "searchProducts": "البحث في المنتجات...",
      "filterByGroup": "فلترة حسب المجموعة",
      "selectedItems": "العناصر المختارة ({{count}})",
      "addSelectedItems": "إضافة العناصر المختارة",
      "noProductsFound": "لا توجد منتجات",
            "searchProductsAndPrices": "البحث في المنتجات والأسعار...",
      "allGroups": "كل المجموعات",
      "productsFound": "تم العثور على {{count}} منتج",
      "selected": "مختار ({{count}})",
      "selectAll": "اختيار الكل",
      "deselectAll": "إلغاء اختيار الكل",
      "productName": "اسم المنتج",
      "priceName": "اسم السعر",
      "price": "السعر",
      "barcode": "الباركود",
      "addSelected": "إضافة المختار ({{count}})",
      "noGroups": "لا توجد مجموعات - اضغط لإضافة مجموعة",
      "noItems": "لا توجد عناصر - اضغط لإضافة عنصر",
      "group": "المجموعة",
      "item": "العنصر",
      "groupTitle": "عنوان المجموعة",
      "minSelection": "الحد الأدنى للاختيار",
      "maxSelection": "الحد الأقصى للاختيار",
      "mandatory": "إجباري",
      "active": "نشط",
      "product": "المنتج",
      "quantity": "الكمية",
      "useOriginalPrice": "استخدام السعر الأصلي",
      "customPrice": "سعر مخصص",
      "defaultSelected": "مختار افتراضياً",
      "priceType": "نوع التسعير",
      "fixedPrice": "السعر الثابت",
      "startDate": "تاريخ البداية",
      "endDate": "تاريخ النهاية",
      "orderType": "نوع الطلب",
      "isActive": "نشط",
      "fixed": "ثابت",
      "dynamic": "ديناميكي",
      "dineIn": "تناول في المكان",
      "takeaway": "تيك أواي",
      "delivery": "توصيل",
      "groups": "المجموعات",
      "items": "العناصر",
      "period": "الفترة"
    },
      "groupTitleRequired": "عنوان المجموعة مطلوب",
    "productRequired": "المنتج مطلوب",
    "errors": {
      "loadFailed": "فشل في تحميل العروض",
      "addFailed": "فشل في إضافة العرض",
      "updateFailed": "فشل في تحديث العرض"
    }
  },
"deliveryCompanies": {
    "title": "شركات التوصيل",
    "add": "إضافة شركة",
    "edit": "تعديل شركة",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "searchPlaceholder": "البحث في شركات التوصيل...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCompanies": "لا توجد شركات توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "nameRequired": "اسم الشركة مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "emailRequired": "البريد الإلكتروني مطلوب",
    "emailInvalid": "البريد الإلكتروني غير صحيح",
    "contactPersonRequired": "الشخص المسؤول مطلوب",
    "companyShareRequired": "نسبة الشركة مطلوبة",
    "percentageMin": "النسبة لا يمكن أن تكون أقل من 0",
    "percentageMax": "النسبة لا يمكن أن تكون أكثر من 100",
    "form": {
      "name": "اسم الشركة",
      "paymentType": "طريقة الدفع",
      "companySharePercentage": "نسبة الشركة",
      "companyShare": "نسبة الشركة",
      "visaCollectionCommissionPercentage": "عمولة تحصيل الفيزا",
      "visaCommission": "عمولة الفيزا",
      "taxPercentage": "نسبة الضريبة",
      "tax": "الضريبة",
      "phone": "الهاتف",
      "email": "البريد الإلكتروني",
      "contactPerson": "الشخص المسؤول",
      "notes": "ملاحظات",
      "notesPlaceholder": "أدخل أي ملاحظات إضافية...",
      "isActive": "نشطة",
      "cash": "نقدي",
      "visa": "فيزا",
      "percentages": "النسب المئوية"
    },
    "errors": {
      "loadFailed": "فشل في تحميل شركات التوصيل",
      "addFailed": "فشل في إضافة الشركة",
      "updateFailed": "فشل في تحديث الشركة"
    }
  },
   "pos": {
    "todayOrders": "طلبات اليوم",
    "table": "طاولة", 
    "discount": "خصم",
    "void": "إلغاء",
    "takeaway": "تيك أواي",
    "search": "بحث",
    "extra": "إضافي",
    "without": "بدون", 
    "offer": "عرض",
    "orderDetails": "تفاصيل الطلب",
    "walkInCustomer": "عميل مباشر",
    "subTotal": "المجموع الفرعي",
    "tax": "ضريبة",
    "service": "خدمة", 
    "total": "الإجمالي",
    "send": "إرسال",
    "print": "طباعة",
    "pay": "دفع"
  }



}

===== src/utils/languages/en.json =====
{
    "Modern": "Modern",
    "Ecommerce": "Ecommerce",
    "eCommerce": "eCommerce",
    "Contacts": "Contacts",
    "Blog": "Blog",
    "Posts": "Posts",
    "Detail": "Detail",
    "Shop": "Shop",
    "List": "List",
    "Checkout": "Checkout",
    "Chats": "Chats",
    "Users": "Users",
    "Profile": "Profile",
    "Followers": "Followers",
    "Friends": "Friends",
    "Gallery": "Gallery",
    "Notes": "Notes",
    "Calendar": "Calendar",
    "Email": "Email",
    "Tickets": "Tickets",
  "reports": {
    "productBalance": {
      "title": "Product Balance Report",
      "description": "Detailed view of product balances across all warehouses"
    },
    "filters": {
      "title": "Filters",
      "searchProducts": "Search products...",
      "warehouse": "Warehouse",
      "allWarehouses": "All Warehouses",
      "stockStatus": "Stock Status",
      "all": "All"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search products and warehouses...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "stockFilter": {
      "all": "All Products",
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "lowStock": "Low Stock"
    },
    "stockStatus": {
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "lowStock": "Low Stock"
    },
    "stats": {
      "totalProducts": "Total Products",
      "totalWarehouses": "Total Warehouses",
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "totalCostValue": "Cost Value",
      "totalLastPurePriceValue": "Last Pure Price Value"
    },
    "table": {
      "product": "Product",
      "warehouse": "Warehouse",
      "totalQuantity": "Total Quantity",
      "remainder": "Remainder",
      "status": "Status",
      "unitBreakdown": "Unit Breakdown",
      "unit": "Unit",
      "factor": "Factor",
      "quantity": "Quantity",
      "totalCostValue": "Total Cost Value",
      "totalLastPurePriceValue": "Total Last Pure Price Value",
      "cost": "Cost",
      "totalCost": "Total Cost",
      "lastPurePrice": "Last Pure Price",
      "totalLastPurePrice": "Total Last Pure Price"
    },
    "noData": "No data to display",
    "errors": {
      "loadFailed": "Failed to load data"
    }
  },
      "export": {
    "title": "Export Data",
    "pdf": "Export PDF",
    "excel": "Export Excel",
    "recordsCount": "{{count}} records",
    "exportedOn": "Exported on",
    "subject": "Data Report",
        "exportExcel": "Export Excel",
    "exportPdf": "Export PDF",
    "author": "Inventory Management System",
    "errorPdf": "Error occurred while exporting PDF",
    "errorExcel": "Error occurred while exporting Excel"
  },
 "purchases": {
    "title": "Purchase Invoices",
    "description": "Manage purchase invoices and payments",
    "addButton": "Add Purchase Invoice",
    "searchPlaceholder": "Search purchase invoices...",
    "listTitle": "Purchase Invoices",
    "noData": "No purchase invoices found",
     "view": {
      "title": "View Purchase Invoice"
    },
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search purchase invoices...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "basicInfo": "Basic Information",
    "discountsAndTaxes": "Discounts & Taxes",
    "items": "Items",
    "noItems": "No items",
    "invoiceNumber": "Invoice Number",
    "invoiceDate": "Invoice Date",
    "supplier": "Supplier",
    "warehouse": "Warehouse",
    "selectSupplier": "Select Supplier",
    "selectWarehouse": "Select Warehouse",
    "quantity": "Quantity",
    "price": "Price",
    "discount": "Discount",
    "tax": "Tax",
    "total": "Total",
    "totalDiscount": "Total Discount",
    "totalTax": "Total Tax",
    "savePending": "Save Pending",
    "submit": "Submit",
    "edit": "Edit Purchase Invoice",
    "status": {
      "pending": "Pending",
      "submitted": "Submitted"
    },
    "table": {
      "invoiceNumber": "Invoice Number",
      "code": "Code",
      "purchaseOrder": "Purchase Order",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "invoiceDate": "Invoice Date",
      "total": "Total",
      "itemsCount": "Items Count",
      "status": "Status",
      "items": "items",
      "directInvoice": "Direct Invoice"
    },
    
    "form": {
      "addTitle": "Add Purchase Invoice",
      "editTitle": "Edit Purchase Invoice",
      "invoiceNumber": "Invoice Number",
      "invoiceDate": "Invoice Date",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "selectSupplier": "Select Supplier",
      "selectWarehouse": "Select Warehouse",
      "status": "Status",
      "totalDiscount": "Total Discount",
      "totalTax": "Total Tax",
      "subTotal": "Sub Total",
      "discountValue": "Discount Value",
      "taxValue": "Tax Value",
      "total": "Total",
      "items": "Items",
      "quickSearch": "Quick search in products...",
      "scanBarcode": "Scan Barcode",
      "addBySearch": "Add by Search",
      "noItems": "No items",
      "product": "Product",
      "unit": "Unit",
      "quantity": "Quantity",
      "price": "Price",
      "discount": "Discount",
      "tax": "Tax",
      "importFromPO": "Import from Purchase Order",
      "savePending": "Save as Pending",
      "submitInvoice": "Submit Invoice",
      "linkedToPO": "Linked to Purchase Order",
      "poCode": "PO Code",
      "poDate": "PO Date",
      "poTotal": "PO Total",
      "itemsCount": "Items Count",
      "selectPurchaseOrder": "Select Purchase Order",
      "searchPurchaseOrders": "Search purchase orders...",
      "noSubmittedPO": "No submitted purchase orders",
      "code": "Code",
      "date": "Date",
      "unknownProduct": "Unknown Product",
      "purchaseOrderImported": "Purchase order imported: {{number}}",
      "productAdded": "Product added: {{name}}",
      "barcodeNotFound": "No product found with this barcode",
      "searchError": "Error searching for product",
      "inLine": "in line",
      "missingProductId": "missing product ID",
      "missingPriceId": "missing price ID",
      "invalidNumber": "Please enter a valid number in {{field}}",
      "validation": {
        "supplierRequired": "Supplier is required",
        "warehouseRequired": "Warehouse is required",
        "itemsRequired": "At least one product must be added"
      }
    },
    "errors": {
      "loadFailed": "Failed to load purchase invoices",
      "dataLoadFailed": "Failed to load data",
      "addFailed": "Failed to add purchase invoice",
      "updateFailed": "Failed to update purchase invoice",
      "idRequired": "Purchase invoice ID is required",
      "noPurchaseLoaded": "No purchase invoice loaded",
      "purchaseNotFound": "Purchase invoice not found",
      "missingId": "Error: Purchase invoice ID is missing"
    },
    "messages": {
      "addSuccess": "Purchase invoice created successfully",
      "updateSuccess": "Purchase invoice updated successfully"
    }
  },

    "errors": {
    "title": "Error",
    "validationError": "Validation Error",
    "forbidden": "Forbidden",
    "notFound": "Not Found",
    "conflict": "Data Conflict",
    "serverError": "Server Error",
    "multipleErrors": "Multiple Errors",
        "unauthorized": {
      "title": "Unauthorized",
      "message": "You don't have permission to access this page",
      "backToDashboard": "Back to Dashboard"
    },
    "noBranches": {
      "title": "No Branches Available",
      "message": "No branches are assigned to this user. Please contact administration to assign appropriate branches."
    }
  },
  "success": {
    "title": "Success"
  },
  "warning": {
    "title": "Warning"
  },
  "info": {
    "title": "Information"
  },

  "sidebar": {
    "inventory": "Inventory",
    "posProducts": "POS Products",
        "hallCaptains": "Hall Captains",
       "deliveryZones": "Delivery Zones",
        "tableSections": "Table Sections",
    "deliveryAgents": "Delivery Agents",
     "systemAdmin": "System Administration",
    "offers": "Offers",
    "deliveryCompanies": "Delivery Companies",
     "additionProducts": "Addition Products",
    "userManagement": "User Management",
    "companySettings": "Company Settings",
    "permissions": "Permissions",
    "inventoryadjustments": "Inventory Adjustment",
    "stock": "Stock",
    "sales": "Sales",
    "promo": "Promo",
    "screens": "Screens",
    "purchases": "Purchases",
    "finance": "Finance & Accounts",
    "peoples": "Peoples",
    "hrm": "HRM",
    "data": "Data",
    "transactions": "Transactios",
    "reports": "Reports",
    "purchaseOrder": "Purchase Order",
    "products": "Products",
    "createProduct": "Create Product",
    "expiredProducts": "Expired Products",
    "lowStocks": "Low Stocks",
    "category": "Category",
    "subCategory": "Sub Category",
    "brands": "Brands",
    "units": "Units",
    "variantAttributes": "Variant Attributes",
    "warranties": "Warranties",
    "printBarcode": "Print Barcode",
    "printQrCode": "Print QR Code",
    "manageStock": "Manage Stock",
    "stockAdjustment": "Stock Adjustment",
    "stockTransfer": "Stock Transfer",
    "invoices": "Invoices",
    "salesReturn": "Sales Return",
    "quotation": "Quotation",
    "pos": "POS",
    "coupons": "Coupons",
    "giftCards": "Gift Cards",
    "discount": "Discount",
    "purchaseOrders": "Purchase Orders",
    "purchaseReturn": "Purchase Return",

    "expenses": "Expenses",
    "income": "Income",
    "bankAccounts": "Bank Accounts",
    "moneyTransfer": "Money Transfer",
    "balanceSheet": "Balance Sheet",
    "trialBalance": "Trial Balance",
    "cashFlow": "Cash Flow",
    "accountStatement": "Account Statement",

    "customers": "Customers",
    "billers": "Billers",
    "suppliers": "Suppliers",
    "stores": "Stores",
    "warehouses": "Warehouses",

    "employees": "Employees",
    "departments": "Departments",
    "designation": "Designation",
    "shifts": "Shifts",
    "attendance": "Attendance",
    "leaves": "Leaves",
    "holidays": "Holidays",
    "payroll": "Payroll",

    "salesReport": "Sales Report",
    "purchaseReport": "Purchase Report",
    "inventoryReport": "Inventory Report",
    "invoiceReport": "Invoice Report",
    "supplierReport": "Supplier Report",
    "customerReport": "Customer Report",
    "productReport": "Product Report",
    "expenseReport": "Expense Report",
    "incomeReport": "Income Report",
    "taxReport": "Tax Report",
    "profitLoss": "Profit & Loss",
    "annualReport": "Annual Report",
    "settings": "Settings",
    "productBalance": "Product Balance",
    "productStock": "Product Stock",
    "accounting": "Accounting",
    "safes": "Safes",
    "accounts": "Accounts",
    "posPaymentMethods": "POS Payment Methods",
    "paymentMethods": "Payment Methods",
    "safesAndAccounts": "Safes & Accounts"
  },

 "products": {
    "title": "Products",
        "pricing": "Pricing",
    "defaultPrices": "Default Prices",
    "branchPrices": "Branch Prices", 
    "branchPrice": "Branch Price",
    "difference": "Difference",
    "defaultPrice": "Default Price",
    "productPrice": "Product Price",
    "noPricesForBranchPricing": "No default prices available for branch pricing",
    "noBranchesAccess": "No branches available for user",
    "manageBranchPrices": "Manage Branch Prices",
    "selectGroup": "Select Group",
    "selectPosScreen": "Select POS Screen",
    "optionGroups": "Option Groups",
    "noOptionGroups": "No option groups",
    "addOptionGroup": "Add Option Group",
    "basicInfo": "Basic Information",
  "common": {
    "copy": "Copy",
    "paste": "Paste", 
    "clearCopy": "Clear Copy",
    "currency": "EGP"
  },
  "tabs": {
      "basicInfoAndPrices": "Basic Info & Prices",
      "basicInfo": "Basic Information", 
      "prices": "Prices",
      "options": "Product Options"
    },
      "types": {
      "pos": "POS",
      "material": "Material",
      "addition": "Addition",
      "unknown": "Unknown"
    },
    "form": {
       "isActive": "Active",
      "posPriceName": "Price Name",
      "posNamePlaceholder": "Enter price name...",
      "required": "Required",
      "addComment": "Add Comment",
      "comment": "Comment",
      "product": "Product",
      "selectProductPrice": "Select Product Price",
      "selectProductPricePlaceholder": "Search for product...",
      "addFromProducts": "Add from Products",
      "selectProducts": "Select Products",
      "searchProducts": "Search products...",
      "filterByGroup": "Filter by Group",
      "allGroups": "All Groups",
      "productsFound": "Found {{count}} products",
      "selected": "Selected: {{count}}",
      "selectAll": "Select All",
      "deselectAll": "Deselect All",
      "priceName": "Price Name",
      "noProductsFound": "No products found",
      "addSelected": "Add Selected ({{count}})",
      "productName": "Product Name",
      "price": "Price",
      "barcode": "Barcode",
      "productOptions": "Product Options",
      "addOptionGroup": "Add Option Group",
      "noOptionGroups": "No option groups",
      "optionGroup": "Option Group",
      "optionGroupName": "Option Group Name",
      "isRequired": "Required",
      "allowMultiple": "Allow Multiple Selection",
      "minSelection": "Minimum Selection",
      "maxSelection": "Maximum Selection",
      "optionItems": "Option Items",
      "addOptionItem": "Add Item",
      "optionItemName": "Item Name",
      "extraPrice": "Extra Price",
      "commentOnly": "Comment Only",
            "posScreen": "POS Screen",
      "noPosScreen": "Without Screen"
    },
    "validation": {
      "optionGroupNameRequired": "Option group name is required",
      "optionItemNameRequired": "Option item name is required"
    },
      "status": {
      "title": "Status",
      "active": "Active",
      "inactive": "Inactive"
    },
      "hasBarcode": "Has Barcode",
    "optionGroup": "Option Group",
    "subtitle": "Manage products and prices in the system",
    "searchPlaceholder": "Search by name or barcode...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
        "copySuccess": "Product settings copied successfully",
    "pasteSuccess": "Settings pasted with {{count}} prices",
    "nameRequiredForCopy": "Product name is required for copying",
    "componentsCopySuccess": "Components copied successfully",
    "componentsPasteSuccess": "Components pasted successfully",
    "noComponentsToCopy": "No components to copy",
    "searchResults": "{{count}} results",
    "searching": "Searching...",
        "components": "Components",
    "addComponent": "Add Component",
        "loadingComponentDetails": "Loading component details",
        "selectedComponent": "Selected Component",
    "quantity": "Quantity",
        "scrollForMore": "Scroll down to load more",
    "noComponents": "No components",
      "searchProductPrices": "Search product prices...",
    "noProductPricesFound": "No product prices found",
    "selectedPrice": "Selected Price",
    "selectComponent": "Select Component",
    "componentRequired": "Component is required",
    "componentProduct": "Component Product",
    "notes": "Notes",
    "noSearchResults": "No search results found",
    "noProducts": "No products available",
    "name": "Product Name",
    "code": "Product Code",
    "group": "Group",
    "type": "Product Type",
    "description": "Description",
    "reorderLevel": "Reorder Level",
    "cost": "Cost",
    "lastPurePrice": "Last Pure Price",
    "expirationDays": "Expiration Days",
    "created": "Created Date",
    "add": "Add Product",
    "edit": "Edit Product",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Product name is required",
    "groupRequired": "Group is required",
    "viewPrices": "View Prices",
    "pricesFor": "Prices for",
    "prices": "prices",
    "pricesCount": "Prices Count",
    "unit": "Unit",
    "unitFactor": "Unit Factor",
    "barcode": "Barcode",
    "price": "Price",
    "generated": "Generated",
    "autoGenerated": "Auto Generated",
    "yes": "Yes",
    "no": "No",
    "noPrices": "No prices available",
    "selectUnit": "Select Unit",
    "barcodeOptional": "Barcode (optional)",
    "addPrice": "Add Price",
       "searchPricesTitle": "Search Product Prices",
    "searchPricesPlaceholder": "Search by name or barcode...",
    "startTypingPrices": "Start typing product name or barcode to search",
    "salePrice": "Sale Price",
     "product": "Product",
    "quickSearchPlaceholder": "Quick Search...",
    "productAdded": "Product added",
    "noProductFoundWithBarcode": "No product found with this barcode",
    "searchError": "Search error",
    "selectPriceTitle": "Select Product Price",
    "selected": "selected",
    "loadingMore": "Loading more",
    "allResultsLoaded": "All results loaded",
    "navigateWithArrows": "Navigate with arrows",
    "selectWithEnter": "to select",
     "selectProduct": "Select Product",
    "enterSearchTerm": "Enter search term",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search products...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
   "barcode": {
    "scan": "Scan Barcode",
    "scanTitle": "Scan Barcode",
    "pointCamera": "Point camera towards barcode",
    "clickToStart": "Click to start scanning",
    "startCamera": "Start Camera",
    "simulateScan": "Simulate Scan"
  },
  "validation": {
    "enterValidNumber": "Please enter a valid number in",
    "minValue": "Value cannot be less than 0",
    "maxPercent": "Value cannot be more than 100%",
        "supplierRequired": "Supplier is required",
    "warehouseRequired": "Warehouse is required",
    "itemsRequired": "At least one item is required"
    },
   "suppliers": {
    "title": "Suppliers",
    "subtitle": "Manage suppliers and vendor companies",
    "name": "Supplier Name",
    "code": "Supplier Code",
    "phone": "Phone Number",
    "address": "Address",
    "notes": "Notes",
    "status": "Status",
    "created": "Created Date",
    "search": "Search suppliers...",
    "add": "Add Supplier",
    "edit": "Edit Supplier",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Supplier name is required",
    "nameMinLength": "Supplier name must be at least 2 characters",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number format",
    "addressRequired": "Address is required",
      "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search suppliers...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
 "purchaseOrders": {
    "title": "Purchase Orders",
    "subtitle": "Manage purchase orders from suppliers",
    "search": "Search purchase orders...",
    "add": "Add Purchase Order",
    "edit": "Edit Purchase Order",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "docNumber": "Document Number",
    "docNumberRequired": "Document number is required",
    "code": "Code",
    "date": "Date",
    "dateRequired": "Date is required",
    "supplier": "Supplier",
    "supplierRequired": "Supplier is required",
    "warehouse": "Warehouse",
    "warehouseRequired": "Warehouse is required",
    "totalDiscount": "Total Discount",
    "totalTax": "Total Tax",
    "items": "Items",
    "addItem": "Add Item",
    "noItems": "No items",
    "item": "Item",
    "product": "Product",
    "selectProduct": "Select Product",
    "quantity": "Quantity",
    "price": "Price",
    "discount": "Discount",
    "tax": "Tax",
    "total": "Total",
    "lineTotal": "Line Total",
    "summary": "Invoice Summary",
    "subTotal": "Sub Total",
    "discountValue": "Discount Value",
    "taxValue": "Tax Value",
    "itemsCount": "Items Count",
    "active": "Active",
    "inactive": "Inactive",
    "addItemWithSearch": "Add Item with Search",
    "list": "Purchase Orders List",
    "selectSupplier": "Select Supplier",
    "selectWarehouse": "Select Warehouse",
    "unit": "Unit",
    "pending": "Pending",
    "submitted": "Submitted",
    "savePending": "Save Pending",
    "submit": "Save Submitted",

    "basicInfo": "Basic Information",
    "discountsAndTaxes": "Discounts & Taxes",
    "unitFactor": "Unit Factor",
      "status": {
        "title": "Status",
      "pending": "pending",
      "draft": "draft",
      "submitted": "submitted",
      "unknown": "unknown"
    },
    "table": {
      "docNumber": "Document Number",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "date": "Date",
      "total": "Total",
      "status": "Status"
    },
        "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search purchase orders...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }

  },
  "common": {
    "update": "Update",
    "saveChanges": "Save Changes",
    "search": "Search",
    "all": "All",
        "active": "Active",
    "inactive": "Inactive",
    "home": "Home",
    "currency": "EGP",
    "exportDate": "Export Date",
    "selected": "selected",
    "hideColumn": "Hide Column",
    "loading": "Loading...",
    "cancel": "Cancel",
    "save": "Save",
    "back": "Back",
        "copy": "Copy",
    "paste": "Paste",
    "clear": "Clear",
    "saveError": "Save Error",
    "inLine": "in line",
    "searching": "Searching",
        "edit": "Edit",
    "view": "View",
    "submit": "Submit",
    "delete": "Delete",
    "add": "Add",
    "noSearchResults": "No search results",
    "notSpecified": "Not Specified",
    "noData": "No data available",
    "refresh": "Refresh",
        "yes": "Yes",
    "no": "No",
    "exportedOn": "Exported on",
    "actions": "Actions",
       "density": "Density",
    "compact": "Compact",
    "standard": "Standard",
    "comfortable": "Comfortable",
    "export": "Export",
    "exportCSV": "Export CSV",
    "print": "Print",
    "columns": "Columns",
    "filters": "Filters",
    "hideFilters": "Hide Filters",
    "showFilters": "Show Filters",
    "findColumn": "Find Column",
    "columnTitle": "Column Title",
    "reorderColumn": "Reorder Column",
    "showAll": "Show All",
    "hideAll": "Hide All",
    "addFilter": "Add Filter",
    "operators": "Operators",
    "and": "And",
    "or": "Or",
    "value": "Value",
    "filterValue": "Filter Value",
    "contains": "Contains",
    "equals": "Equals",
    "startsWith": "Starts With",
    "endsWith": "Ends With",
    "is": "Is",
    "isNot": "Is Not",
    "isAfter": "Is After",
    "isOnOrAfter": "Is On Or After",
    "isBefore": "Is Before",
    "isOnOrBefore": "Is On Or Before",
    "isEmpty": "Is Empty",
    "isNotEmpty": "Is Not Empty",
    "menu": "Menu",
    "showColumns": "Show Columns",
    "filter": "Filter",
    "hide": "Hide",
    "unsort": "Unsort",
    "sortAsc": "Sort Ascending",
    "sortDesc": "Sort Descending",
    "activeFilters": "Active Filters",
    "activeFilter": "Active Filter",
    "sort": "Sort",
    "rowsSelected": "Rows Selected",
    "rowSelected": "Row Selected",
    "totalRows": "Total Rows",
    "of": "Of",
    "checkboxSelection": "Checkbox Selection",
    "noResults": "No results found",
    "saveAndNew": "Save & New",
    "supported": "Supported",
    "notSupported": "Not Supported"

  },
    "warehouses": {
    "title": "Warehouses",
    "subtitle": "Manage your warehouses",
    "add": "Add Warehouse",
    "edit": "Edit Warehouse",
    "save": "Save Changes",
    "name": "Warehouse",
    "contact": "Contact Person",
    "email": "Email",
    "phone": "Phone",
    "workPhone": "Phone (Work)",
    "address": "Address",
    "city": "City",
    "state": "State",
    "country": "Country",
    "postal": "Postal Code",
    "status": "Status",
    "totalProducts": "Total Products",
    "qty": "Qty",
      "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search warehouses...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "active": "Active",
    "inactive": "Inactive",
    "code": "Code",
    "created": "Created Date"
  },
  "status": {
    "active": "Active",
    "inactive": "Inactive"
  },
   "units": {
    "title": "Units",
    "subtitle": "Manage measurement units in the system",
    "name": "Unit Name",
    "code": "Unit Code",
    "status": "Status",
    "created": "Created Date",
    "search": "Search units...",
    "add": "Add Unit",
    "edit": "Edit Unit",
    "save": "Save",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Unit name is required",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search units...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
   "groups": {
    "title": "Groups",
    "subtitle": "Manage groups and categories in the system",
    "name": "Group Name",
    "code": "Group Code",
    "status": "Status",
    "created": "Created Date",
    "search": "Search groups...",
    "add": "Add Group",
    "addChild": "Add Child Group",
    "edit": "Edit Group",
    "save": "Save",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Group name is required",
    "parentGroup": "Parent Group",
    "backgroundColor": "Background Color",
    "fontColor": "Font Color",
    "preview": "Preview",
    "sampleText": "Sample Text",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search groups...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "level": "Level",
    "childrenCount": "Children Count",
    "noGroups": "No groups found",
    "rootGroups": "Root Groups"
  },


   "adjustment": {
    "title": "Inventory Adjustment",
    "types": {
      "openingBalance": "Opening Balance",
      "manualAdjustment": "Manual Adjustment",
      "notSelected": "Adjustment Type Not Selected"
    },
    "form": {
      "warehouse": "Warehouse",
      "selectWarehouse": "Select Warehouse",
      "adjustmentType": "Adjustment Type",
      "referenceNumber": "Reference Number",
      "reason": "Reason",
      "items": "Items",
      "product": "Product",
      "unit": "Unit",
      "unitFactor": "Unit Factor",
      "oldQuantity": "Old Quantity",
      "newQuantity": "New Quantity",
      "difference": "Difference",
      "notes": "Notes",
      "noItems": "No items found",
      "save": "Save",
      "submit": "Submit Adjustment",
      "barcode": "Barcode",
      "validation": {
        "warehouseRequired": "Warehouse is required"
      }
    },
    "dialog": {
      "newAdjustmentTitle": "New Inventory Adjustment",
      "newAdjustmentMessage": "A new inventory adjustment has been started",
      "selectAdjustmentType": "Please select adjustment type:"
    },
    "messages": {
      "newAdjustmentStarted": "New inventory adjustment started successfully",
      "saveSuccess": "Adjustment saved successfully",
      "submitSuccess": "Adjustment submitted successfully",
      "selectWarehouseToStart": "Please select a warehouse to start a new inventory adjustment"
    },
      "search": {
      "title": "Search Items",
      "placeholder": "Search by name or barcode...",
      "scanBarcode": "Scan Barcode",
      "currentQuantity": "Current Quantity",
      "barcode": "Barcode",
      "noResults": "No search results found",
      "filteredFrom": "filtered from {total}"
    },
    "barcode": {
      "title": "Barcode Scanner",
      "instruction": "Scan the barcode or enter it manually",
      "label": "Barcode",
      "placeholder": "Enter barcode here...",
      "scan": "Search"
    },
    "errors": {
      "loadWarehousesFailed": "Failed to load warehouses",
      "loadAdjustmentFailed": "Failed to load adjustment data",
      "saveFailed": "Failed to save adjustment",
      "submitFailed": "Failed to submit adjustment"
    }
  },
    "adjustments": {
    "list": {
      "title": "Inventory Adjustments",
      "newAdjustment": "New Adjustment",
      "noAdjustments": "No adjustments found"
    },
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search adjustments...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "view": {
      "title": "View Adjustment",
      "adjustmentInfo": "Adjustment Information"
    },
    "table": {
      "adjustmentId": "Adjustment ID",
      "type": "Type",
      "date": "Date",
      "referenceNumber": "Reference Number",
      "reason": "Reason",
      "totalItems": "Total Items",
      "totalDifference": "Total Difference",
      "status": "Status",
            "warehouse": "Warehouse"

    },
    "types": {
      "new": "New",
      "openingBalance": "Opening Balance",
      "manualAdjustment": "Manual Adjustment",
      "unknown": "Unknown"
    },
    "status": {
      "saved": "Saved",
      "submitted": "Submitted",
      "unknown": "Unknown"
    },
    "actions": {
      "view": "View"
    },
    "errors": {
      "loadFailed": "Failed to load adjustments list",
      "notFound": "Adjustment not found"
    },
      "summary": {
      "totalItems": "Total Items",
      "totalPositive": "Total Increase",
      "totalNegative": "Total Decrease"
    }
  },


   "safes": {
    "title": "Safes",
    "add": "Add Safe",
    "edit": "Edit Safe",
    "name": "Safe Name",
    "type": "Type",
    "accountNumber": "Account Number",
    "collectionFeePercent": "Collection Fee Percent",
    "status": "Status",
    "isActive": "Active",
    "active": "Active",
    "inactive": "Inactive",
    "noSafes": "No safes found",
    "searchPlaceholder": "Search safes...",
    "types": {
      "cash": "Cash",
        "safe": "خزنة"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search safes...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Safe name is required",
      "typeRequired": "Safe type is required"
    },
    "errors": {
      "loadFailed": "Failed to load safes",
      "addFailed": "Failed to add safe",
      "updateFailed": "Failed to update safe"
    }
  },
  "accounts": {
    "title": "Accounts",
    "add": "Add Account",
    "edit": "Edit Account",
    "typePlaceholder": "e.g: Bank, Wallet, Visa, InstaPay, StaffAccount",
    "name": "Account Name",
    "type": "Type",
    "accountNumber": "Account Number",
    "collectionFeePercent": "Collection Fee Percent",
    "status": "Status",
    "isActive": "Active",
    "active": "Active",
    "inactive": "Inactive",
    "noAccounts": "No accounts found",
    "searchPlaceholder": "Search accounts...",
    "types": {
      "bank": "Bank",
      "wallet": "Wallet",
      "visa": "Visa",
      "instapay": "InstaPay",
      "staffaccount": "Staff Account",
      "other": "Other",
      "cash": "Cash"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search accounts...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Account name is required",
      "typeRequired": "Account type is required",
      "accountNumberRequired": "Account number is required"
    },
    "errors": {
      "loadFailed": "Failed to load accounts",
      "addFailed": "Failed to add account",
      "updateFailed": "Failed to update account"
    }
  },
   "posPaymentMethods": {
    "title": "Payment Methods",
    "add": "Add Payment Method",
    "edit": "Edit Payment Method",
    "name": "Payment Method Name",
       "accountType": "Account Type",
    "accountNumber": "Account Number",
    "collectionFee": "Collection Fee",
    "safeOrAccount": "Safe or Account",
    "selectedAccount": "Selected Account",
    "branchesNote": "Payment method can be linked to different branches later",
    "status": "Status",
    "active": "Active",
    "inactive": "Inactive",
    "noPaymentMethods": "No payment methods found",
    "searchPlaceholder": "Search payment methods...",
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search payment methods...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Payment method name is required",
      "accountRequired": "Safe or account must be selected"
    },
    "errors": {
      "loadFailed": "Failed to load payment methods",
      "addFailed": "Failed to add payment method",
      "updateFailed": "Failed to update payment method"
    }
  },

"import": {
    "import": "Import",
    "downloadTemplate": "Download Template",
    "importTitle": "Import Data",
    "selectFile": "Select Excel File",
        "rowError": "Row {{row}}:",
    "addError": "Error adding record",
    "importing": "Importing",
    "errorsFound": "Errors Found",
    "importComplete": "Import Complete",
    "successfulRecords": "Successful Records",
    "failedRecords": "Failed Records",
    "andMore": "and {count} more errors",
    "dataPreview": "Data Preview",
    "records": "records",
    "andMoreRecords": "and {count} more records",
    "fileReadError": "File read error",
    "requiredField": "Required field",
    "inRow": "in row",
    "validationError": "Validation error",
    "importError": "Import error"
  },


   "posScreens": {
    "title": "POS Screens",
    "add": "Add Screen",
    "addChild": "Add Child Screen",
    "edit": "Edit Screen",
    "save": "Save",
    "name": "Screen Name",
    "parentScreen": "Parent Screen",
    "noParent": "No Parent",
    "displayOrder": "Display Order",
    "visibility": "Visibility",
    "icon": "Icon",
    "color": "Color",
    "preview": "Preview",
    "sampleText": "Sample Text",
    "visible": "Visible",
    "hidden": "Hidden",
    "active": "Active",
    "inactive": "Inactive",
    "status": "Status",
    "level": "Level",
    "noScreens": "No screens found",
    "rootScreens": "Root Screens",
    "searchPlaceholder": "Search screens...",
    "nameRequired": "Screen name is required",
    "iconRequired": "Icon is required",
    "iconHelp": "Use emoji or short text",
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search screens...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },

  "auth": {
    "login": {
      "title": "Login",
      "tenantId": "Company Code",
      "tenantPlaceholder": "Enter company code",
      "description": "Login page",
      "phoneNumber": "Phone Number",
      "password": "Password",
      "phonePlaceholder": "01xxxxxxxxx",
      "passwordPlaceholder": "Enter your password",
      "rememberMe": "Remember me",
      "forgotPassword": "Forgot password?",
      "signIn": "Sign In",
      "signingIn": "Signing in...",
      "failed": "Login failed",
      "newUser": "New user?",
      "createAccount": "Create an account"
    },
    "branchSelection": {
      "title": "Branch Selection",
      "description": "Branch selection page",
      "selectBranch": "Select Branch",
      "welcomeMessage": "Welcome {{userName}}, you have access to multiple branches",
      "selectThisBranch": "Select This Branch",
      "selecting": "Selecting...",
      "noBranches": "No Branches Available",
      "noBranchesMessage": "No branches are assigned to this user. Please contact administration."
    },
    "logout": "Logout",
    "errors": {
      "noBranches": "No branches available for this user"
    }
  },


 "users": {
    "userName": "User Name",
    "phoneNo": "Phone Number",
    "email": "Email",
    "password": "Password",
    "title": "User Management",
    "noUsers": "No users found",
    "table": {
      "userName": "User Name",
      "phoneNumber": "Phone Number",
      "email": "Email",
      "actions": "Actions"
    },
    "actions": {
      "add": "Add User"
    },
    "dialog": {
      "addTitle": "Add New User",
      "editTitle": "Edit User"
    },
    "form": {
      "userName": "User Name",
      "phoneNumber": "Phone Number",
      "password": "Password",
      "passwordHelp": "Leave empty if you don't want to change it"
    },
    "validation": {
      "requiredFields": "Please enter all required fields",
      "passwordRequired": "Please enter password for new user",
            "userNameTooShort": "User name must be more than 2 characters",
      "userNameTooLong": "User name is too long",
      "invalidPhone": "Invalid phone number",
      "invalidEmail": "Invalid email address",
      "passwordTooShort": "Password must be at least 6 characters"
    },
    "messages": {
      "addSuccess": "User added successfully",
      "addFailed": "Failed to add user",
      "editComingSoon": "Edit functionality coming soon"
    },
    "errors": {
      "loadFailed": "Error loading users",
      "saveFailed": "Error saving user"
    }
  },
  "company": {
    "title": "Company & Branch Settings",
    "description": "Manage company data and its branches",
    "tabs": {
      "companyInfo": "Company Information",
      "branchManagement": "Branch Management"
    },
    "form": {
      "companyName": "Company Name",
      "companyAddress": "Company Address",
      "companyPhone": "Company Phone",
      "companyEmail": "Company Email",
      "branchName": "Branch Name",
      "branchAddress": "Branch Address",
      "branchPhone": "Branch Phone"
    },
    "info": {
      "currentCompanyInfo": "Current Company Information",
      "companyName": "Company Name",
      "branchCount": "Number of Branches",
      "branchCountValue": "{{count}} branch",
      "branchCountValue_plural": "{{count}} branches",
      "currentBranch": "Current Branch"
    },
    "branches": {
      "title": "Company Branches ({{count}})",
      "currentBranch": "Current Branch",
      "otherBranch": "Other Branch"
    },
    "table": {
      "branchName": "Branch Name",
      "address": "Address",
      "phone": "Phone",
      "status": "Status",
      "actions": "Actions"
    },
    "dialog": {
      "editBranch": "Edit Branch Data"
    },
    "messages": {
      "updateSuccess": "Company data updated successfully",
      "branchUpdateSuccess": "Branch data updated successfully"
    },
    "errors": {
      "updateFailed": "Error updating company data",
      "branchUpdateFailed": "Error updating branch data"
    }
  },
  "permissions": {
    "title": "Permissions Management",
    "description": "Manage user permissions to access system pages and functions",
    "loading": "Loading data...",
    "noData": "No user data available",
    "pagesCount": "{{accessible}}/{{total}} pages",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "subPermissions": "Sub Permissions",
    "messages": {
      "updateSuccess": "Permission updated successfully"
    },
    "errors": {
      "loadFailed": "Error loading data",
      "updateFailed": "Error updating permission"
    }
  },
  "branch": {
    "selectBranch": "Select Branch"
  },
   "profile": {
    "user": "User",
    "menu": {
      "userManagement": "User Management",
      "companySettings": "Company Settings",
      "permissions": "Permissions",
      "inbox": "Inbox",
      "taskList": "Task List"
    }
  },


  "posProducts": {
    "title": "POS Products",
    "searchPlaceholder": "Search in POS products...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add POS Product",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noProducts": "No POS products",
    "errors": {
      "loadFailed": "Failed to load POS products",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add product",
      "updateFailed": "Failed to update product"
    }
  },
    "materials": {
    "title": "Raw Materials",
    "searchPlaceholder": "Search in raw materials...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add Raw Material",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noMaterials": "No raw materials",
    "errors": {
      "loadFailed": "Failed to load raw materials",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add material",
      "updateFailed": "Failed to update material"
    }
  },
    "additionProducts": {
    "title": "Addition Products",
    "searchPlaceholder": "Search in addition products...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add Addition Product",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noProducts": "No addition products",
    "errors": {
      "loadFailed": "Failed to load addition products",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add product",
      "updateFailed": "Failed to update product"
    }
  },



    "deliveryZones": {
    "title": "Delivery Zones",
    "add": "Add Zone",
    "edit": "Edit Zone",
    "searchPlaceholder": "Search zones...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noZones": "No delivery zones",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Zone name is required",
    "deliveryChargeRequired": "Delivery charge is required",
    "defaultBonusRequired": "Default bonus is required",
    "form": {
      "name": "Zone Name",
      "deliveryCharge": "Delivery Charge",
      "defaultBonus": "Default Bonus",
      "branch": "Branch",
      "allBranches": "All Branches",
      "status": "Status",
      "isActive": "Active"
    },
    "errors": {
      "loadFailed": "Failed to load zones",
      "addFailed": "Failed to add zone",
      "updateFailed": "Failed to update zone"
    }
  },
  "deliveryAgents": {
    "title": "Delivery Agents",
    "add": "Add Agent",
    "edit": "Edit Agent",
    "searchPlaceholder": "Search agents...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noAgents": "No delivery agents",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Agent name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "branchRequired": "Branch is required",
    "deleteConfirmTitle": "Confirm Delete",
    "deleteConfirmMessage": "Are you sure you want to delete agent {{name}}?",
    "form": {
      "name": "Agent Name",
      "phone": "Phone Number",
      "branch": "Branch",
      "status": "Status"
    },
    "errors": {
      "loadFailed": "Failed to load agents",
      "addFailed": "Failed to add agent",
      "updateFailed": "Failed to update agent",
      "deleteFailed": "Failed to delete agent"
    }
  },
  "header": {
    "print": {
      "instantPrint": "Instant Print",
      "printSuccess": "Print completed successfully",
      "fallbackToNormal": "Switched to normal printing",
      "printError": "Print error",
      "tooltip": "Print Options",
      "normal": "Normal Print",
      "normalDesc": "Print using system printer",
      "thermal": "Thermal Print",
      "printer": "printer",
      "test": "Test Print",
      "testDesc": "Test thermal printer",
      "testSuccess": "Print test completed successfully",
      "testFailed": "Print test failed",
      "testError": "Print test error",
      "thermalDisabled": "Thermal printing is disabled",
      "enableThermal": "Enable Thermal Printing",
      "goToSettings": "Go to Settings",
      "clickToEnable": "Click here to enable thermal printing",
      "settings": "Print Settings",
      "manageSettings": "Manage printer settings",
      "printerSettings": "Printer Settings",
      "configureOptions": "Configure print options"
    },
    "printerSettings": "Printer Settings"
  },
  "settings": {
    "printer": {
      "title": "Printer Settings",
      "description": "Manage normal and thermal printing settings",
      "thermalSettings": "Thermal Printing Settings",
      "enableThermal": "Enable Thermal Printing",
      "quickEnable": "Quick Enable",
      "disabledInfo": "Thermal printing is disabled. You can enable it to get additional printing options.",
      "type": "Printer Type",
      "network": "Network",
      "ip": "IP Address",
      "port": "Port",
      "ipHelp": "IP address of the thermal printer",
      "portHelp": "Connection port (usually 9100)",
      "testPrint": "Test Print",
      "ctrlPInfo": "After saving, you can use the print button in the top bar",
      "saved": "Settings saved successfully",
      "saveError": "Error saving settings",
      "testCompleted": "Print test completed",
      "basicSettings": "Basic Settings",
      "advancedSettings": "Advanced Settings",
      "systemInfo": "System Information",
      "testing": "Testing...",
      "testConnection": "Test Connection",
      "connectionSuccess": "Successfully connected to printer",
      "connectionFailed": "Failed to connect to printer",
      "connectionError": "Connection error",
      "testSuccess": "Print test completed successfully",
      "testFailed": "Print test failed",
      "testError": "Print test error",
      "resetSuccess": "Settings reset successfully",
      "reset": "Reset",
      "autoConnect": "Auto Connect",
      "autoConnectDesc": "Connect to printer automatically without requesting port selection",
      "silentPrint": "Silent Print",
      "silentPrintDesc": "Print directly without showing selection dialogs",
      "supported": "Supported",
      "notSupported": "Not Supported",
      "networkPrinting": "Network Printing",
      "networkDesc": "Print via local network"
    }
  },
    "tableSections": {
    "title": "Table Sections",
    "add": "Add Section",
    "edit": "Edit Section",
    "searchPlaceholder": "Search sections and tables...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noSections": "No sections",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Section name is required",
    "serviceChargeRequired": "Service charge is required",
    "tableNameRequired": "Table name is required",
    "capacityRequired": "Table capacity is required",
    "totalTables": "Total Tables: {{count}}",
    "form": {
      "name": "Section Name",
      "serviceCharge": "Service Charge",
      "tables": "Tables",
      "tablesCount": "Tables Count",
      "totalCapacity": "Total Capacity",
      "branch": "Branch",
      "status": "Status",
      "tableName": "Table Name",
      "capacity": "Capacity",
      "persons": "persons",
      "addTable": "Add Table",
      "noTables": "No tables - Click to add table"
    },
    "errors": {
      "loadFailed": "Failed to load sections",
      "addFailed": "Failed to add section",
      "updateFailed": "Failed to update section"
    }
  },
   "hallCaptains": {
    "title": "Hall Captains",
    "add": "Add Captain",
    "edit": "Edit Captain",
    "searchPlaceholder": "Search captains...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCaptains": "No captains",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Captain name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "branchRequired": "Branch is required",
    "form": {
      "name": "Captain Name",
      "phone": "Phone Number",
      "notes": "Notes",
      "notesPlaceholder": "Enter any additional notes...",
      "branch": "Branch",
      "isActive": "Active"
    },
    "errors": {
      "loadFailed": "Failed to load captains",
      "addFailed": "Failed to add captain",
      "updateFailed": "Failed to update captain"
    }
  },
  "customers": {
    "title": "Customers",
    "add": "Add Customer",
    "edit": "Edit Customer",
    "searchPlaceholder": "Search customers...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCustomers": "No customers",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "pageInfo": "Page {{page}} of {{total}}",
    "nameRequired": "Customer name is required",
    "phone1Required": "Primary phone is required",
    "phoneInvalid": "Invalid phone number",
    "addressLineRequired": "Address line is required",
    "zoneRequired": "Zone is required",
    "deleteConfirmTitle": "Confirm Delete",
    "deleteConfirmMessage": "Are you sure you want to delete customer {{name}}?",
    "form": {
      "basicInfo": "Basic Information",
      "name": "Customer Name",
      "phone1": "Primary Phone",
      "phone2": "Secondary Phone",
      "phone3": "Third Phone",
      "phone4": "Fourth Phone",
      "isVIP": "VIP Customer",
      "isBlocked": "Blocked",
      "isActive": "Active",
      "type": "Customer Type",
      "vip": "VIP",
      "blocked": "Blocked",
      "regular": "Regular",
      "addresses": "Addresses",
      "addressCount": "addresses",
      "addressesCount": "Addresses Count",
      "primaryAddress": "Primary Address",
      "addAddress": "Add Address",
      "noAddresses": "No addresses - Click to add address",
      "address": "Address",
      "addressLine": "Address Line",
      "zone": "Zone",
      "floor": "Floor",
      "apartment": "Apartment",
      "landmark": "Landmark",
      "notes": "Notes"
    },
    "errors": {
      "loadFailed": "Failed to load customers",
      "addFailed": "Failed to add customer",
      "updateFailed": "Failed to update customer",
      "deleteFailed": "Failed to delete customer"
    }
  },
 "offers": {
    "title": "Offers",
    "add": "Add Offer",
    "edit": "Edit Offer",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "searchPlaceholder": "Search offers...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noOffers": "No offers",
    "noSearchResults": "No search results",
    "nameRequired": "Offer name is required",
    "startDateRequired": "Start date is required",
    "endDateRequired": "End date is required",
    "form": {
      "name": "Offer Name",
      "priceType": "Price Type",
      "fixedPrice": "Fixed Price",
      "startDate": "Start Date",
      "endDate": "End Date",
      "orderType": "Order Type",
         "generalItems": "General Items",
      "groupItems": "Group Items",
      "noItemsInGroup": "No items in this group",
      "selectProduct": "Select Product",
      "selectProducts": "Select Products",
      "selectItemsForGroup": "Select Items for Group",
      "selectGeneralItems": "Select General Items",
      "searchProducts": "Search products...",
      "filterByGroup": "Filter by Group",
      "selectedItems": "Selected Items ({{count}})",
         "searchProductsAndPrices": "Search products and prices...",
      "allGroups": "All Groups",
      "productsFound": "{{count}} products found",
      "selected": "Selected ({{count}})",
      "selectAll": "Select All",
      "deselectAll": "Deselect All",
      "productName": "Product Name",
      "priceName": "Price Name",
      "price": "Price",
      "barcode": "Barcode",
      "addSelected": "Add Selected ({{count}})",
      "addSelectedItems": "Add Selected Items",
      "noProductsFound": "No products found",
      "isActive": "Active",
      "fixed": "Fixed",
        "basicInfo": "Basic Information",
      "offerGroups": "Offer Groups Count",
      "offerItems": "Offer Items",
      "addGroup": "Add Group",
      "addItem": "Add Item",
      "noGroups": "No groups - Click to add group",
      "noItems": "No items - Click to add item",
      "group": "Group",
      "item": "Item",
           "fixedItems": "Fixed Items",
      "noFixedItems": "No fixed items",
      "selectFixedItems": "Select Fixed Items",
      "original": "Original",
      "groupTitle": "Group Title",
      "minSelection": "Min Selection",
      "maxSelection": "Max Selection",
      "mandatory": "Mandatory",
      "active": "Active",
      "product": "Product",
      "quantity": "Quantity",
      "useOriginalPrice": "Use Original Price",
      "customPrice": "Custom Price",
      "defaultSelected": "Default Selected",
      "dynamic": "Dynamic",
      "dineIn": "Dine In",
      "takeaway": "Takeaway",
      "delivery": "Delivery",
      "groups": "Groups",
      "items": "Items",
      "period": "Period"
    },
     "groupTitleRequired": "Group title is required",
    "productRequired": "Product is required",
    "errors": {
      "loadFailed": "Failed to load offers",
      "addFailed": "Failed to add offer",
      "updateFailed": "Failed to update offer"
    }
  },
 "deliveryCompanies": {
    "title": "Delivery Companies",
    "add": "Add Company",
    "edit": "Edit Company",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "searchPlaceholder": "Search delivery companies...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCompanies": "No delivery companies",
    "noSearchResults": "No search results",
    "nameRequired": "Company name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "emailRequired": "Email is required",
    "emailInvalid": "Invalid email address",
    "contactPersonRequired": "Contact person is required",
    "companyShareRequired": "Company share percentage is required",
    "percentageMin": "Percentage cannot be less than 0",
    "percentageMax": "Percentage cannot be more than 100",
    "form": {
      "name": "Company Name",
      "paymentType": "Payment Type",
      "companySharePercentage": "Company Share %",
      "companyShare": "Company Share",
      "visaCollectionCommissionPercentage": "Visa Commission %",
      "visaCommission": "Visa Commission",
      "taxPercentage": "Tax %",
      "tax": "Tax",
      "phone": "Phone",
      "email": "Email",
      "contactPerson": "Contact Person",
      "notes": "Notes",
      "notesPlaceholder": "Enter any additional notes...",
      "isActive": "Active",
      "cash": "Cash",
      "visa": "Visa",
      "percentages": "Percentages"
    },
    "errors": {
      "loadFailed": "Failed to load delivery companies",
      "addFailed": "Failed to add company",
      "updateFailed": "Failed to update company"
    }
  },

  "pos": {
    "todayOrders": "Today Orders",
    "table": "Table",
    "discount": "Discount", 
    "void": "Void",
    "takeaway": "Takeaway",
    "search": "Search",
    "extra": "Extra",
    "without": "Without",
    "offer": "Offer", 
    "orderDetails": "Order Details",
    "walkInCustomer": "Walk in Customer",
    "subTotal": "Sub Total",
    "tax": "Tax",
    "service": "Service",
    "total": "Total", 
    "send": "Send",
    "print": "Print", 
    "pay": "Pay"
  }
}
===== src/utils/pageWrapper.tsx =====
// File: src/utils/pageWrapper.tsx
import React from 'react';
import withPermissions from 'src/hoc/withPermissions';
import { PAGE_PERMISSIONS } from 'src/config/pagePermissions';

// ⭐ مفتاح تعطيل مؤقت
const DISABLE_PROTECTION = true;

export const createProtectedPage = (
  Component: React.ComponentType<any>,
  permissionKey: keyof typeof PAGE_PERMISSIONS
) => {
  // إذا التحكم معطل، ارجع المكون بدون حماية
  if (DISABLE_PROTECTION) {
    const UnprotectedWrapper: React.FC<any> = (props) => {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };
      
      return <Component {...props} {...allPermissions} />;
    };
    
    return UnprotectedWrapper;
  }
  
  // الحماية العادية
  const config = PAGE_PERMISSIONS[permissionKey];
  return withPermissions(Component, config);
};

export const createCustomProtectedPage = (
  Component: React.ComponentType<any>,
  config: {
    pageId?: number;
    pageName?: string;
    moduleId?: number;
    requiredPermissions?: string[];
  }
) => {
  if (DISABLE_PROTECTION) {
    const UnprotectedWrapper: React.FC<any> = (props) => {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };
      
      return <Component {...props} {...allPermissions} />;
    };
    
    return UnprotectedWrapper;
  }
  
  return withPermissions(Component, config);
};

===== src/views/apps/blog/Blog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import BlogListing from 'src/components/apps/blog/BlogListing';

const Blog = () => {
  return (
    <PageContainer title="Blog" description="this is Blog page">
      <Breadcrumb title="Blog app" subtitle="Get the latest news" />
      {/* ------------------------------------------- */}
      {/* Blog Listing */}
      {/* ------------------------------------------- */}
      <BlogListing />
    </PageContainer>
  );
};

export default Blog;

===== src/views/apps/blog/BlogPost.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import BlogDetail from 'src/components/apps/blog/detail/BlogDetail';
import PageContainer from 'src/components/container/PageContainer';

const BlogPost = () => {
  return (
    <PageContainer title="Blog" description="this is Blog page">
      {/* ------------------------------------------- */}
      {/* Blog Listing */}
      {/* ------------------------------------------- */}
      <BlogDetail />
    </PageContainer>
  );
};

export default BlogPost;

===== src/views/apps/calendar/BigCalendar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  Fab,
  TextField,
  Typography } from '@mui/material';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import moment from 'moment';
import Events from './EventData';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import dayjs from 'dayjs';
import './Calendar.css';
import PageContainer from 'src/components/container/PageContainer';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { IconCheck } from '@tabler/icons-react';
import BlankCard from 'src/components/shared/BlankCard';

moment.locale('en-GB');
const localizer = momentLocalizer(moment);

type EvType = {
  title: string;
  allDay?: boolean;
  start?: Date;
  end?: Date;
  color?: string;
};

const BigCalendar = () => {
  const [calevents, setCalEvents] = React.useState<any>(Events);
  const [open, setOpen] = React.useState<boolean>(false);
  const [title, setTitle] = React.useState<string>("");
  const [slot, setSlot] = React.useState<EvType>();
  const [start, setStart] = React.useState<any | null>(dayjs());
  const [end, setEnd] = React.useState<any | null>(dayjs());
  const [color, setColor] = React.useState<string>("default");
  const [update, setUpdate] = React.useState<EvType | undefined | any>();
  // Example function to set and format the date

  const ColorVariation = [
    {
      id: 1,
      eColor: "#1a97f5",
      value: "default",
    },
    {
      id: 2,
      eColor: "#39b69a",
      value: "green",
    },
    {
      id: 3,
      eColor: "#fc4b6c",
      value: "red",
    },
    {
      id: 4,
      eColor: "#615dff",
      value: "azure",
    },
    {
      id: 5,
      eColor: "#fdd43f",
      value: "warning",
    },
  ];
  const addNewEvent= (slotInfo: EvType) => {
    setOpen(true);
    setSlot(slotInfo);
    setStart(dayjs(slotInfo.start));
    setEnd(dayjs(slotInfo.end));
  };

  const editEvent = (event: any) => {
    const newEditEvent = calevents.find(
      (elem: any) => elem.title === event.title
    );

    setTitle(newEditEvent.title);
    setColor(newEditEvent.color);
    setStart(dayjs(newEditEvent.start));
    setEnd(dayjs(newEditEvent.end));
    setUpdate(event);
    setOpen(true);
  };

  const updateEvent = (e: any) => {
    e.preventDefault();
    setCalEvents(
      calevents.map((elem: EvType) => {
        if (elem.title === update.title) {
          return { ...elem, title, start: start?.toISOString(), end: end?.toISOString(), color };
        }
        return elem;
      })
    );
    setOpen(false);
    setTitle("");
    setStart(dayjs());
    setEnd(dayjs());
    setUpdate(null);
  };
  const inputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) =>
    setTitle(e.target.value);
  const selectinputChangeHandler = (id: string) => setColor(id);

  // When submitting or updating the event
  const submitHandler = (e: React.ChangeEvent<any>) => {
    e.preventDefault();
    const newEvents = [...calevents];
    newEvents.push({
      title,
      start: start ? start.toISOString() : "",
      end: end ? end.toISOString() : "",
      color,
    });
    setCalEvents(newEvents);
    setOpen(false);
    setTitle("");
    setStart(dayjs());
    setEnd(dayjs());
  };

  const deleteHandler = (event: EvType) => {
    const updatecalEvents = calevents.filter(
      (ind: EvType) => ind.title !== event.title
    );
    setCalEvents(updatecalEvents);
  };

  const handleClose = () => {
    // eslint-disable-line newline-before-return
    setOpen(false);
    setTitle("");
    setStart(dayjs());
    setEnd(dayjs());
    setUpdate(null);
  };

  const eventColors = (event: EvType) => {
    if (event.color) {
      return { className: `event-${event.color}` };
    }

    return { className: `event-default` };
  };

  const handleStartChange = (newValue: any) => {
    if (newValue instanceof Date) {
      // Convert the native Date object to a dayjs object
      setStart(dayjs(newValue));
    } else {
      setStart(newValue);
    }
  };

  const handleEndChange = (newValue: any) => {
    if (newValue instanceof Date) {
      // Convert the native Date object to a dayjs object
      setEnd(dayjs(newValue));
    } else {
      setEnd(newValue);
    }
  };

  return (
    <PageContainer title="Calendar" description="this is Calendar">
      <BlankCard>
        {/* ------------------------------------------- */}
        {/* Calendar */}
        {/* ------------------------------------------- */}
        <CardContent>
          <Calendar
            selectable
            events={calevents}
            defaultView="month"
            scrollToTime={new Date(1970, 1, 1, 6)}
            defaultDate={new Date()}
            localizer={localizer}
            style={{ height: "calc(100vh - 350px" }}
            onSelectEvent={(event: any) => editEvent(event)}
            onSelectSlot={(slotInfo: any) => addNewEvent(slotInfo)}
            eventPropGetter={(event: any) => eventColors(event)}
          />
        </CardContent>
      </BlankCard>

      {/* ------------------------------------------- */}
      {/* Add Calendar Event Dialog */}
      {/* ------------------------------------------- */}
      <Dialog open={open} onClose={handleClose} fullWidth maxWidth="xs">
        <form onSubmit={update ? updateEvent : submitHandler}>
          <DialogContent>
            {/* ------------------------------------------- */}
            {/* Add Edit title */}
            {/* ------------------------------------------- */}
            <Typography variant="h4" sx={{ mb: 2 }}>
              {update ? "Update Event" : "Add Event"}
            </Typography>
            <Typography mb={3} variant="subtitle2">
              {!update
                ? "To add Event kindly fillup the title and choose the event color and press the add button"
                : "To Edit/Update Event kindly change the title and choose the event color and press the update button"}
              {slot?.title}
            </Typography>

            <TextField
              id="Event Title"
              placeholder="Enter Event Title"
              variant="outlined"
              fullWidth
              label="Event Title"
              value={title}
              sx={{ mb: 3 }}
              onChange={inputChangeHandler}
            />
            {/* ------------------------------------------- */}
            {/* Selection of Start and end date */}
            {/* ------------------------------------------- */}
            <LocalizationProvider dateAdapter={AdapterDayjs}>

              <DatePicker
                value={start}
                onChange={handleStartChange}
                slotProps={{
                  textField: {
                    label: "Start Date",
                    fullWidth: true,
                    sx: { mb: 3 },
                  },
                }}
              />

              <DatePicker
                value={end}
                onChange={handleEndChange}
                slotProps={{
                  textField: {
                    label: "End Date",
                    fullWidth: true,
                    sx: { mb: 3 },
                    error: start && end && start > end,
                    helperText: start && end && start > end ? "End date must be later than start date" : "",
                  },
                }}
              />

            </LocalizationProvider>

            {/* ------------------------------------------- */}
            {/* Calendar Event Color*/}
            {/* ------------------------------------------- */}
            <Typography variant="h6" fontWeight={600} my={2}>
              Select Event Color
            </Typography>
            {/* ------------------------------------------- */}
            {/* colors for event */}
            {/* ------------------------------------------- */}
            {ColorVariation.map((mcolor) => {
              return (
                <Fab
                  color="primary"
                  style={{ backgroundColor: mcolor.eColor }}
                  sx={{
                    marginRight: "3px",
                    transition: "0.1s ease-in",
                    scale: mcolor.value === color ? "0.9" : "0.7",
                  }}
                  size="small"
                  key={mcolor.id}
                  onClick={() => selectinputChangeHandler(mcolor.value)}
                >
                  {mcolor.value === color ? <IconCheck width={16} /> : ""}
                </Fab>
              );
            })}
          </DialogContent>
          {/* ------------------------------------------- */}
          {/* Action for dialog */}
          {/* ------------------------------------------- */}
          <DialogActions sx={{ p: 3 }}>
            <Button onClick={handleClose}>Cancel</Button>

            {update ? (
              <Button
                type="submit"
                color="error"
                variant="contained"
                onClick={() => deleteHandler(update)}
              >
                Delete
              </Button>
            ) : (
              ""
            )}
            <Button type="submit" disabled={!title} variant="contained">
              {update ? "Update Event" : "Add Event"}
            </Button>
          </DialogActions>
          {/* ------------------------------------------- */}
          {/* End Calendar */}
          {/* ------------------------------------------- */}
        </form>
      </Dialog>
    </PageContainer>
  );
};

export default BigCalendar;

===== src/views/apps/calendar/Calendar.css =====
.rbc-event.event-azure {
  background-color: #1a97f5;
}

.rbc-event.event-default {
  background-color: #615dff;
}
.rbc-event.event-red {
  background-color: #fc4b6c;
}
.rbc-event.event-green {
  background-color: #39b69a;
}
.rbc-event.event-warning {
  background-color: #fdd43f;
}
.rbc-off-range-bg {
  background-color: #d2d2d20d;
}
.darkbg .rbc-today {
  background-color: #8fbece;
}
.rbc-month-row + .rbc-month-row,
.rbc-day-bg + .rbc-day-bg,
.rbc-header,
.rbc-month-view,
.rbc-toolbar button,
.rbc-time-content > * + * > * {
  border-color: #f6f6f6;
}
.darkbg .rbc-month-row + .rbc-month-row,
.darkbg .rbc-day-bg + .rbc-day-bg,
.darkbg .rbc-header,
.darkbg .rbc-month-view,
.darkbg .rbc-toolbar button,
.darkbg .rbc-time-content > * + * > * {
  border-color: #343e54;
}
.rbc-event:focus,
.rbc-day-slot .rbc-background-event:focus {
  outline: none;
}
.darkbg .rbc-toolbar button {
  color: rgba(255, 255, 255, 0.5);
}
.darkbg .rbc-toolbar button:active,
.darkbg .rbc-toolbar button.rbc-active {
  background-color: rgba(0, 0, 0, 0.5);
  border-color: #d2d2d20d;
}
.form-control {
  height: 50px;
  line-height: 40px;
  font-size: 18px;
  width: 100%;
  border-width: 1px;
  padding: 5px;
  border-color: rgba(0, 0, 0, 0.2);
  border-radius: 5px;
}
.btn {
  padding: 10px 15px;
  box-shadow: none !important;
  border-radius: 5px;
  text-decoration: none;
  color: white;
}
.btn-primary {
  background-color: #2b2b2b;
}
.btn-secondary {
  background-color: #1a97f5;
}

@media (max-width: 767px) {
  .rbc-btn-group {
    width: 100%;
    text-align: center;
    margin-bottom: 15px;
  }
  .rbc-toolbar .rbc-toolbar-label {
    margin-bottom: 15px;
    display: block;
  }
  .rbc-calendar {
    height: 100vh !important;
  }
}

.rbc-calendar {
  min-height: 600px;
}

===== src/views/apps/calendar/EventData.ts =====
const today = new Date();
const y = today.getFullYear();
const m = today.getMonth();
const d = today.getDate();

export interface EventType {
  title?: string;
  allDay?: boolean;
  start?: Date;
  end?: Date;
  color?: string;
}

const Events: EventType[] = [
  {
    title: 'Twice event For two Days',
    allDay: true,
    start: new Date(y, m, 3),
    end: new Date(y, m, 5),
    color: 'default',
  },
  {
    title: 'Learn ReactJs',
    start: new Date(y, m, d + 3, 10, 30),
    end: new Date(y, m, d + 3, 11, 30),
    allDay: false,
    color: 'green',
  },
  {
    title: 'Launching MaterialArt Angular',
    start: new Date(y, m, d + 7, 12, 0),
    end: new Date(y, m, d + 7, 14, 0),
    allDay: false,
    color: 'red',
  },
  {
    title: 'Lunch with Mr.Raw',
    start: new Date(y, m, d - 2),
    end: new Date(y, m, d - 2),
    allDay: true,
    color: 'azure',
  },
  {
    title: 'Going For Party of Sahs',
    start: new Date(y, m, d + 1, 19, 0),
    end: new Date(y, m, d + 1, 22, 30),
    allDay: false,
    color: 'azure',
  },
  {
    title: 'Learn Ionic',
    start: new Date(y, m, 23),
    end: new Date(y, m, 25),
    color: 'warning',
  },
  {
    title: 'Research of making own Browser',
    start: new Date(y, m, 19),
    end: new Date(y, m, 22),
    color: 'default',
  },
];

export default Events;

===== src/views/apps/chat/Chat.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Divider, Box } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ChatSidebar from 'src/components/apps/chats/ChatSidebar';
import ChatContent from 'src/components/apps/chats/ChatContent';
import ChatMsgSent from 'src/components/apps/chats/ChatMsgSent';
import AppCard from 'src/components/shared/AppCard';

const Chats = () => {
  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(false);

  return (
    <PageContainer title="Chat ui" description="this is Chat page">
      <Breadcrumb title="Chat app" subtitle="Messenger" />
      <AppCard>
        {/* ------------------------------------------- */}
        {/* Left part */}
        {/* ------------------------------------------- */}

        <ChatSidebar
          isMobileSidebarOpen={isMobileSidebarOpen}
          onSidebarClose={() => setMobileSidebarOpen(false)}
        />
        {/* ------------------------------------------- */}
        {/* Right part */}
        {/* ------------------------------------------- */}

        <Box flexGrow={1}>
          <ChatContent toggleChatSidebar={() => setMobileSidebarOpen(true)} />
          <Divider />
          <ChatMsgSent />
        </Box>
      </AppCard>
    </PageContainer>
  );
};

export default Chats;

===== src/views/apps/contacts/Contacts.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Button, Box, Drawer, useMediaQuery, Theme } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import ContactDetails from 'src/components/apps/contacts/ContactDetails';
import ContactList from 'src/components/apps/contacts/ContactList';
import ContactSearch from 'src/components/apps/contacts/ContactSearch';
import ContactFilter from 'src/components/apps/contacts/ContactFilter';
import AppCard from 'src/components/shared/AppCard';

const drawerWidth = 240;
const secdrawerWidth = 320;

const Contacts = () => {
  const [isLeftSidebarOpen, setLeftSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setRightSidebarOpen] = useState(false);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const mdUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('md'));

  return (
    <PageContainer title="Contact App" description="this is Contact page">
      <Breadcrumb title="Contact app" subtitle="List Your Contacts" />
      <AppCard>
        {/* ------------------------------------------- */}
        {/* Left Part */}
        {/* ------------------------------------------- */}

        <Drawer
          open={isLeftSidebarOpen}
          onClose={() => setLeftSidebarOpen(false)}
          sx={{
            width: drawerWidth,
            [`& .MuiDrawer-paper`]: { width: drawerWidth, position: 'relative', zIndex: 2 },
            flexShrink: 0,
          }}
          variant={lgUp ? 'permanent' : 'temporary'}
        >
          <ContactFilter />
        </Drawer>
        {/* ------------------------------------------- */}
        {/* Middle part */}
        {/* ------------------------------------------- */}
        <Box
          sx={{
            minWidth: secdrawerWidth,
            width: { xs: '100%', md: secdrawerWidth, lg: secdrawerWidth },
            flexShrink: 0,
          }}
        >
          <ContactSearch onClick={() => setLeftSidebarOpen(true)} />
          <ContactList showrightSidebar={() => setRightSidebarOpen(true)} />
        </Box>
        {/* ------------------------------------------- */}
        {/* Right part */}
        {/* ------------------------------------------- */}
        <Drawer
          anchor="right"
          open={isRightSidebarOpen}
          onClose={() => setRightSidebarOpen(false)}
          variant={mdUp ? 'permanent' : 'temporary'}
          sx={{
            width: mdUp ? secdrawerWidth : '100%',
            zIndex: lgUp ? 0 : 1,
            flex: mdUp ? 'auto' : '',
            [`& .MuiDrawer-paper`]: { width: '100%', position: 'relative' },
          }}
        >
          {/* back btn Part */}
          {mdUp ? (
            ''
          ) : (
            <Box sx={{ p: 3 }}>
              <Button
                variant="outlined"
                color="primary"
                size="small"
                onClick={() => setRightSidebarOpen(false)}
                sx={{ mb: 3, display: { xs: 'block', md: 'none', lg: 'none' } }}
              >
                Back{' '}
              </Button>
            </Box>
          )}
          <ContactDetails />
        </Drawer>
      </AppCard>
    </PageContainer>
  );
};

export default Contacts;

===== src/views/apps/email/Email.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Button, Box, Drawer, useMediaQuery, Theme } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import EmailLists from 'src/components/apps/email/EmailList';
import EmailFilter from 'src/components/apps/email/EmailFilter';
import EmailSearch from 'src/components/apps/email/EmailSearch';
import EmailContent from 'src/components/apps/email/EmailContent';
import PageContainer from 'src/components/container/PageContainer';
import AppCard from 'src/components/shared/AppCard';
import emailIcon from 'src/assets/images/breadcrumb/emailSv.png';

const drawerWidth = 240;
const secdrawerWidth = 340;

const Email = () => {
  const [isLeftSidebarOpen, setLeftSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setRightSidebarOpen] = useState(false);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const mdUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('md'));

  return (
    <PageContainer title="Email App" description="this is email page">
      <Breadcrumb title="Email app" subtitle="Look at Inbox">
        <img src={emailIcon} alt={emailIcon} width={'165px'} />
      </Breadcrumb>

      <AppCard>
        {/* ------------------------------------------- */}
        {/* Left part */}
        {/* ------------------------------------------- */}

        <Drawer
          open={isLeftSidebarOpen}
          onClose={() => setLeftSidebarOpen(false)}
          sx={{
            width: drawerWidth,
            [`& .MuiDrawer-paper`]: { width: drawerWidth, position: 'relative', zIndex: 2 },
            flexShrink: 0,
          }}
          variant={lgUp ? 'permanent' : 'temporary'}
        >
          <EmailFilter />
        </Drawer>

        {/* ------------------------------------------- */}
        {/* Middle part */}
        {/* ------------------------------------------- */}

        <Box
          sx={{
            minWidth: secdrawerWidth,
            width: { xs: '100%', md: secdrawerWidth, lg: secdrawerWidth },
            flexShrink: 0,
          }}
        >
          <EmailSearch onClick={() => setLeftSidebarOpen(true)} />

          <EmailLists showrightSidebar={() => setRightSidebarOpen(true)} />
        </Box>

        {/* ------------------------------------------- */}
        {/* Right part */}
        {/* ------------------------------------------- */}

        {mdUp ? (
          <Drawer
            anchor="right"
            variant="permanent"
            sx={{
              zIndex: 0,
              width: '200px',
              flex: '1 1 auto',
              [`& .MuiDrawer-paper`]: { position: 'relative' },
            }}
          >
            <Box>
              <EmailContent />
            </Box>
          </Drawer>
        ) : (
          <Drawer
            anchor="right"
            open={isRightSidebarOpen}
            onClose={() => setRightSidebarOpen(false)}
            sx={{
              width: drawerWidth,
              flexShrink: 0,
              [`& .MuiDrawer-paper`]: { width: '85%' },
            }}
            variant="temporary"
          >
            <Box p={3}>
              <Button
                variant="outlined"
                color="primary"
                size="small"
                onClick={() => setRightSidebarOpen(false)}
                sx={{ mb: 3, display: { xs: 'block', md: 'none', lg: 'none' } }}
              >
                {' '}
                Back{' '}
              </Button>
              <EmailContent />
            </Box>
          </Drawer>
        )}
      </AppCard>
    </PageContainer>
  );
};

export default Email;

===== src/views/apps/invoice/Create.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import CreateInvoiceApp from 'src/components/apps/invoice/Add-invoice';
import BlankCard from 'src/components/shared/BlankCard';
import { CardContent } from '@mui/material';
import { InvoiceProvider } from 'src/context/InvoiceContext';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Invoice Create',
  },
];

const CreateInvoice = () => {
  return (
    <InvoiceProvider>
      <PageContainer title="Create Invoice" description="this is Create Invoice">
        <Breadcrumb title="Create Invoice" items={BCrumb} />

        <BlankCard>
          <CardContent>
            <CreateInvoiceApp />
          </CardContent>
        </BlankCard>
      </PageContainer>
    </InvoiceProvider>
  );
};
export default CreateInvoice;

===== src/views/apps/invoice/Detail.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { InvoiceProvider } from 'src/context/InvoiceContext/index';
import InvoiceDetail from 'src/components/apps/invoice/Invoice-detail/index';
import BlankCard from 'src/components/shared/BlankCard';
import { CardContent } from '@mui/material';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Invoice Details',
  },
];

const InvoiceDetailPage = () => {
  return (
    <InvoiceProvider>
      <PageContainer title="Invoice Detail" description="this is Invoice Detail">
        <Breadcrumb title="Invoice Detail" items={BCrumb} />
        <BlankCard>
          <CardContent>
            <InvoiceDetail />
          </CardContent>
        </BlankCard>
      </PageContainer>
    </InvoiceProvider>
  );
};
export default InvoiceDetailPage;

===== src/views/apps/invoice/Edit.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import EditInvoicePage from 'src/components/apps/invoice/Edit-invoice/index';
import { InvoiceProvider } from 'src/context/InvoiceContext/index';
import BlankCard from 'src/components/shared/BlankCard';
import { CardContent } from '@mui/material';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Invoice Edit',
  },
];

const InvoiceEdit = () => {
  return (
    <InvoiceProvider>
      <PageContainer title="Edit Invoice" description="this is Edit Invoice">
        <Breadcrumb title="Edit Invoice" items={BCrumb} />
        <BlankCard>
          <CardContent>
            <EditInvoicePage />
          </CardContent>
        </BlankCard>
      </PageContainer>
    </InvoiceProvider>
  );
};

export default InvoiceEdit;

===== src/views/apps/invoice/List.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import InvoiceList from 'src/components/apps/invoice/Invoice-list/index';
import { InvoiceProvider } from 'src/context/InvoiceContext/index';
import BlankCard from 'src/components/shared/BlankCard';
import { CardContent } from '@mui/material';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Invoice List',
  },
];

const InvoiceListing = () => {
  return (
    <InvoiceProvider>
      <PageContainer title="Invoice List" description="this is Invoice List">
        <Breadcrumb title="Invoice List" items={BCrumb} />
        <BlankCard>
          <CardContent>
            <InvoiceList />
          </CardContent>
        </BlankCard>
      </PageContainer>
    </InvoiceProvider>
  );
};
export default InvoiceListing;

===== src/views/apps/kanban/Kanban.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import TaskManager from 'src/components/apps/kanban/TaskManager';
import { KanbanDataContextProvider } from 'src/context/kanbancontext/index';
import BlankCard from 'src/components/shared/BlankCard';
import { CardContent } from '@mui/material';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Kanban',
  },
];

const Kanban = () => {
  return (
    <KanbanDataContextProvider>
      <PageContainer title="Kanban App" description="this is Kanban App">
        <Breadcrumb title="Kanban app" items={BCrumb} />
        <BlankCard>
          <CardContent>
            <TaskManager />
          </CardContent>
        </BlankCard>
      </PageContainer>
    </KanbanDataContextProvider>
  );
};

export default Kanban;

===== src/views/apps/notes/Notes.tsx =====
import { useState } from 'react';
import { Box, useMediaQuery } from '@mui/material';
import Breadcrumb from '../../../layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from '../../../components/container/PageContainer';
import NoteSidebar from '../../../components/apps/notes/NoteSidebar';
import NoteContent from '../../../components/apps/notes/NoteContent';
import AppCard from 'src/components/shared/AppCard';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Notes',
  },
];

const Notes = () => {
  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(true);
  const lgDown = useMediaQuery((theme: any) => theme.breakpoints.down('lg'));


  return (
    <PageContainer title="Note App" description="this is Note App">
      <Breadcrumb title="Note app" items={BCrumb} />
      <AppCard>
        {lgDown ?
          <NoteSidebar
            isMobileSidebarOpen={isMobileSidebarOpen}
            onSidebarClose={() => setMobileSidebarOpen(false)}
          />
          : <NoteSidebar
            isMobileSidebarOpen={true}
            onSidebarClose={() => setMobileSidebarOpen(false)}
          />}

        <Box flexGrow={1}>
          <NoteContent toggleNoteSidebar={() => setMobileSidebarOpen(!isMobileSidebarOpen)} />
        </Box>
      </AppCard>
    </PageContainer>
  );
};

export default Notes;

===== src/views/apps/tickets/Tickets.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import TicketListing from 'src/components/apps/tickets/TicketListing';
import TicketFilter from 'src/components/apps/tickets/TicketFilter';
import ChildCard from 'src/components/shared/ChildCard';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Tickets',
  },
];

const TicketList = () => {
  return (
    <PageContainer title="Tickets App" description="this is Note page">
      <Breadcrumb title="Tickets app" items={BCrumb} />
      <ChildCard>
        <TicketFilter />
        <TicketListing />
      </ChildCard>
    </PageContainer>
  );
};

export default TicketList;

===== src/views/apps/user-profile/Followers.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import PageContainer from 'src/components/container/PageContainer';
import ProfileBanner from 'src/components/apps/userprofile/profile/ProfileBanner';
import FollowerCard from 'src/components/apps/userprofile/followers/FollowerCard';


const Followers = () => {
  return (
    (<PageContainer title="User Profile" description="this is User Profile page">
      <Grid container spacing={3}>
        <Grid
          size={{
            sm: 12
          }}>
          <ProfileBanner />
        </Grid>
        <Grid
          size={{
            sm: 12
          }}>
          <FollowerCard />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default Followers;

===== src/views/apps/user-profile/Friends.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import PageContainer from 'src/components/container/PageContainer';
import ProfileBanner from 'src/components/apps/userprofile/profile/ProfileBanner';
import FriendsCard from 'src/components/apps/userprofile/friends/FriendsCard';

const Friends = () => {
  return (
    (<PageContainer title="User Profile" description="this is User Profile page">
      <Grid container spacing={3}>
        <Grid
          size={{
            sm: 12
          }}>
          <ProfileBanner />
        </Grid>
        <Grid
          size={{
            sm: 12
          }}>
          <FriendsCard />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default Friends;

===== src/views/apps/user-profile/Gallery.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import PageContainer from 'src/components/container/PageContainer';
import ProfileBanner from 'src/components/apps/userprofile/profile/ProfileBanner';
import GalleryCard from 'src/components/apps/userprofile/gallery/GalleryCard';


const Gallery = () => {
  return (
    (<PageContainer title="User Profile" description="this is User Profile page">
      <Grid container spacing={3}>
        <Grid
          size={{
            sm: 12
          }}>
          <ProfileBanner />
        </Grid>
        <Grid
          size={{
            sm: 12
          }}>
          <GalleryCard />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default Gallery;

===== src/views/apps/user-profile/UserProfile.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import PageContainer from 'src/components/container/PageContainer';

import ProfileBanner from 'src/components/apps/userprofile/profile/ProfileBanner';
import IntroCard from 'src/components/apps/userprofile/profile/IntroCard';
import PhotosCard from 'src/components/apps/userprofile/profile/PhotosCard';
import Post from 'src/components/apps/userprofile/profile/Post';

const UserProfile = () => {
  return (
    (<PageContainer title="User Profile" description="this is User Profile page">
      <Grid container spacing={3}>
        <Grid
          size={{
            sm: 12
          }}>
          <ProfileBanner />
        </Grid>

        {/* intro and Photos Card */}
        <Grid
          size={{
            sm: 12,
            lg: 4,
            xs: 12
          }}>
          <Grid container spacing={3}>
            <Grid
              size={{
                sm: 12
              }}>
              <IntroCard />
            </Grid>
            <Grid
              size={{
                sm: 12
              }}>
              <PhotosCard />
            </Grid>
          </Grid>
        </Grid>
        {/* Posts Card */}
        <Grid
          size={{
            sm: 12,
            lg: 8,
            xs: 12
          }}>
          <Post />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default UserProfile;

===== src/views/authentication/auth1/ForgotPassword.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import img1 from 'src/assets/images/backgrounds/login-bg.svg';

import AuthForgotPassword from '../authForms/AuthForgotPassword';

const ForgotPassword = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Grid container justifyContent="center" spacing={0} sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 8,
          xl: 9
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 4,
          xl: 3
        }}>
        <Box p={4}>
          <Typography variant="h4" fontWeight="700">
            Forgot your password?
          </Typography>

          <Typography color="textSecondary" variant="subtitle2" fontWeight="400" mt={2}>
            Please enter the email address associated with your account and We will email you a link
            to reset your password.
          </Typography>
          <AuthForgotPassword />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default ForgotPassword;

===== src/views/authentication/auth1/Login.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Link } from 'react-router';
import { Grid2 as Grid, Box, Stack, Typography } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from '../authForms/AuthLogin';

const Login = () => (
  <PageContainer title="Login" description="this is Login page">
    <Grid container spacing={0} sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 7,
          xl: 8
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 5,
          xl: 4
        }}>
        <Box p={4}>
          <AuthLogin
            title="Welcome to Modernize"
            subtext={<Typography variant="subtitle1" color="textSecondary" mb={1}>
              Your Admin Dashboard
            </Typography>}
            subtitle={<Stack direction="row" spacing={1} mt={3}>
              <Typography color="textSecondary" variant="h6" fontWeight="500">
                New to Modernize?
              </Typography>
              <Typography
                component={Link}
                to="/auth/register"
                fontWeight="500"
                sx={{
                  textDecoration: 'none',
                  color: 'primary.main',
                }}
              >
                Create an account
              </Typography>
            </Stack>} onSubmit={function (_phone: string): void {
              throw new Error('Function not implemented.');
            } }          />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default Login;

===== src/views/authentication/auth1/Register.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Link } from 'react-router';
import { Grid2 as Grid, Box, Typography, Stack } from '@mui/material';

import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthRegister from '../authForms/AuthRegister';

const Register = () => (
  <PageContainer title="Register" description="this is Register page">
    <Grid container spacing={0} justifyContent="center" sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 7,
          xl: 8
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 5,
          xl: 4
        }}>
        <Box p={4}>
          <AuthRegister
            title="Welcome to Modernize"
            subtext={
              <Typography variant="subtitle1" color="textSecondary" mb={1}>
                Your Admin Dashboard
              </Typography>
            }
            subtitle={
              <Stack direction="row" spacing={1} mt={3}>
                <Typography color="textSecondary" variant="h6" fontWeight="400">
                  Already have an Account?
                </Typography>
                <Typography
                  component={Link}
                  to="/auth/login"
                  fontWeight="500"
                  sx={{
                    textDecoration: 'none',
                    color: 'primary.main',
                  }}
                >
                  Sign In
                </Typography>
              </Stack>
            }
          />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default Register;

===== src/views/authentication/auth1/TwoSteps.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Typography } from '@mui/material';

import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthTwoSteps from '../authForms/AuthTwoSteps';

const TwoSteps = () => (
  <PageContainer title="Two Steps" description="this is Two Steps page">
    <Grid container spacing={0} justifyContent="center" sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 8,
          xl: 9
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 4,
          xl: 3
        }}>
        <Box p={4}>
          <Typography variant="h4" fontWeight="700">
            Two Step Verification
          </Typography>

          <Typography variant="subtitle1" color="textSecondary" mt={2} mb={1}>
            We sent a verification code to your mobile. Enter the code from the mobile in the field
            below.
          </Typography>
          <Typography variant="subtitle1" fontWeight="700" mb={1}>
            ******1234
          </Typography>
          <AuthTwoSteps />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default TwoSteps;

===== src/views/authentication/auth2/ForgotPassword2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import AuthForgotPassword from '../authForms/AuthForgotPassword';

const ForgotPassword2 = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 4,
            xl: 3
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '500px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <Typography
              color="textSecondary"
              textAlign="center"
              variant="subtitle2"
              fontWeight="400"
            >
              Please enter the email address associated with your account and We will email you a
              link to reset your password.
            </Typography>
            <AuthForgotPassword />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default ForgotPassword2;

===== src/views/authentication/auth2/Login2.tsx =====
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Grid, Box, Card, Stack, Typography} from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from '../authForms/AuthLogin';
import api from 'src/utils/axios';
import { saveAuth } from 'src/utils/auth';

const Login2: React.FC = () => {
  const navigate = useNavigate();
  const [msg, setMsg] = React.useState('');

  /* هذه الدالة يستدعيها AuthLogin عبر prop */
  const handleLogin = async (phone: string, password: string) => {
    try {
      const { data } = await api.post('/login?PhoneNo=' + phone + '&Password=' + password, {
      });
      saveAuth(data.token, data.expiration);
      navigate('/dashboards/modern', { replace: true });
    } catch (err: any) {
      setMsg(err?.message || 'Login failed');
    }
  };

  return (
    <PageContainer title="Login" description="Login page">
      <Box sx={{ position: 'relative', '&:before': {
        content: '""',
        background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
        backgroundSize: '400% 400%',
        animation: 'gradient 15s ease infinite',
        position: 'absolute', inset: 0, opacity: 0.3 }}}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={8} md={5} lg={4} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={2}><Logo /></Box>

              <AuthLogin
                onSubmit={handleLogin}
                subtitle={
                  <Stack direction="row" spacing={1} justifyContent="center" mt={3}>
                    <Typography color="textSecondary" variant="h6">
                      New user?
                    </Typography>
                    <Typography component={Link} to="/auth/register" sx={{ color: 'primary.main' }}>
                      Create an account
                    </Typography>
                  </Stack>
                }
              />
            </Card>
          </Grid>
        </Grid>
      </Box>

      <open={!!msg} autoHideDuration={4000} onClose={() => setMsg('')}>
        <severity="error" onClose={() => setMsg('')}>{msg}</>
      </>
    </PageContainer>
  );
};

export default Login2;

===== src/views/authentication/auth2/Register2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography, Stack } from '@mui/material';
import { Link } from 'react-router';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthRegister from '../authForms/AuthRegister';

const Register2 = () => (
  <PageContainer title="Register" description="this is Register page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 5,
            xl: 4
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '450px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <AuthRegister
              subtext={
                <Typography variant="subtitle1" textAlign="center" color="textSecondary" mb={1}>
                  Your Social Campaigns
                </Typography>
              }
              subtitle={
                <Stack direction="row" spacing={1} mt={3}>
                  <Typography color="textSecondary" variant="h6" fontWeight="400">
                    Already have an Account?
                  </Typography>
                  <Typography
                    component={Link}
                    to="/auth/login2"
                    fontWeight="500"
                    sx={{
                      textDecoration: 'none',
                      color: 'primary.main',
                    }}
                  >
                    Sign In
                  </Typography>
                </Stack>
              }
            />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default Register2;

===== src/views/authentication/auth2/TwoSteps2.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import AuthTwoSteps from '../authForms/AuthTwoSteps';

const TwoSteps2 = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 5,
            xl: 4
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '450px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <Typography variant="subtitle1" textAlign="center" color="textSecondary" mb={1}>
              We sent a verification code to your mobile. Enter the code from the mobile in the
              field below.
            </Typography>
            <Typography variant="subtitle1" textAlign="center" fontWeight="700" mb={1}>
              ******1234
            </Typography>
            <AuthTwoSteps />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default TwoSteps2;

===== src/views/authentication/authForms/AuthForgotPassword.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Button, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';

const AuthForgotPassword = () => (
  <>
    <Stack mt={4} spacing={2}>
      <CustomFormLabel htmlFor="reset-email">Email Adddress</CustomFormLabel>
      <CustomTextField id="reset-email" variant="outlined" fullWidth />

      <Button color="primary" variant="contained" size="large" fullWidth component={Link} to="/">
        Forgot Password
      </Button>
      <Button color="primary" size="large" fullWidth component={Link} to="/auth/login">
        Back to Login
      </Button>
    </Stack>
  </>
);

export default AuthForgotPassword;

===== src/views/authentication/authForms/AuthLogin.tsx =====
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React from 'react';
import { Box, Stack, Button, Typography, FormGroup, FormControlLabel } from '@mui/material';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import { Link } from 'react-router';

interface Props {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  subtext?: React.ReactNode;
  onSubmit: (phone: string, password: string) => void;   // <── هنا
}

const AuthLogin: React.FC<Props> = ({ subtitle, subtext, onSubmit }) => {
  const [phone, setPhone] = React.useState('');
  const [password, setPassword] = React.useState('');

  const handle = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(phone, password);
  };

  return (
    <>
      {subtext}

      <form onSubmit={handle}>
        <Stack spacing={2}>
          <Box>
            <CustomFormLabel htmlFor="phone">Phone</CustomFormLabel>
            <CustomTextField id="phone" fullWidth value={phone} onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPhone(e.target.value)} />
          </Box>
          <Box>
            <CustomFormLabel htmlFor="password">Password</CustomFormLabel>
            <CustomTextField id="password" type="password" fullWidth value={password} onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPassword(e.target.value)} />
          </Box>

          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <FormGroup>
              <FormControlLabel control={<CustomCheckbox defaultChecked />} label="Remember me" />
            </FormGroup>
            <Typography component={Link} to="/auth/forgot-password" sx={{ color: 'primary.main', textDecoration: 'none' }}>
              Forgot password?
            </Typography>
          </Stack>

          <Button variant="contained" type="submit" fullWidth>Sign In</Button>
        </Stack>
      </form>

      {subtitle}
    </>
  );
};

export default AuthLogin;

===== src/views/authentication/authForms/AuthRegister.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Button, Divider, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';
import { registerType } from 'src/types/auth/auth';
import AuthSocialButtons from './AuthSocialButtons';


const AuthRegister = ({ title, subtitle, subtext }: registerType) => (
  <>
    {title ? (
      <Typography fontWeight="700" variant="h3" mb={1}>
        {title}
      </Typography>
    ) : null}

    {subtext}
    <AuthSocialButtons title="Sign up with" />

    <Box mt={3}>
      <Divider>
        <Typography
          component="span"
          color="textSecondary"
          variant="h6"
          fontWeight="400"
          position="relative"
          px={2}
        >
          or sign up with
        </Typography>
      </Divider>
    </Box>

    <Box>
      <Stack mb={3}>
        <CustomFormLabel htmlFor="name">Name</CustomFormLabel>
        <CustomTextField id="name" variant="outlined" fullWidth />
        <CustomFormLabel htmlFor="email">Email Adddress</CustomFormLabel>
        <CustomTextField id="email" variant="outlined" fullWidth />
        <CustomFormLabel htmlFor="password">Password</CustomFormLabel>
        <CustomTextField id="password" variant="outlined" fullWidth />
      </Stack>
      <Button color="primary" variant="contained" size="large" fullWidth component={Link} to="/auth/login">
        Sign Up
      </Button>
    </Box>
    {subtitle}
  </>
);

export default AuthRegister;

===== src/views/authentication/authForms/AuthSocialButtons.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import icon1 from 'src/assets/images/svgs/google-icon.svg';
import icon2 from 'src/assets/images/svgs/facebook-icon.svg';
import CustomSocialButton from '../../../components/forms/theme-elements/CustomSocialButton';
import { Avatar, Box, Stack } from '@mui/material';
import { signInType } from 'src/types/auth/auth';

const AuthSocialButtons = ({ title }: signInType) => (
  <>
    <Stack direction="row" justifyContent="center" spacing={2} mt={3}>
      <CustomSocialButton>
        <Avatar
          src={icon1}
          alt={icon1}
          sx={{
            width: 16,
            height: 16,
            borderRadius: 0,
            mr: 1,
          }}
        />
        <Box sx={{ display: { xs: 'none', sm: 'flex' }, whiteSpace: 'nowrap', mr: { sm: '3px' } }}>
          {title}{' '}
        </Box>{' '}
        Google
      </CustomSocialButton>
      <CustomSocialButton>
        <Avatar
          src={icon2}
          alt={icon2}
          sx={{
            width: 25,
            height: 25,
            borderRadius: 0,
            mr: 1,
          }}
        />
        <Box sx={{ display: { xs: 'none', sm: 'flex' }, whiteSpace: 'nowrap', mr: { sm: '3px' } }}>
          {title}{' '}
        </Box>{' '}
        FB
      </CustomSocialButton>
    </Stack>
  </>
);

export default AuthSocialButtons;

===== src/views/authentication/authForms/AuthTwoSteps.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Button, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';

const AuthTwoSteps = () => (
    <>
        <Box mt={4} >
            <Stack mb={3}>
                <CustomFormLabel htmlFor="code">Type your 6 digits security code </CustomFormLabel>
                <Stack spacing={2} direction="row">
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                </Stack>

            </Stack>
            <Button
                color="primary"
                variant="contained"
                size="large"
                fullWidth
                component={Link}
                to="/">
                Verify My Account
            </Button>



            <Stack direction="row" spacing={1} mt={3}>
                <Typography
                    color="textSecondary"
                    variant="h6"
                    fontWeight="400"
                >
                    Didn't get the code?
                </Typography>
                <Typography
                    component={Link}
                    to="/"
                    fontWeight="500"
                    sx={{
                        textDecoration: 'none',
                        color: 'primary.main',
                    }}
                >
                    Resend
                </Typography>
            </Stack>
        </Box>
    </>
);

export default AuthTwoSteps;

===== src/views/authentication/Error.tsx =====
import { Box, Container, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import ErrorImg from 'src/assets/images/backgrounds/errorimg.svg';

const Error = () => (
  <Box
    display="flex"
    flexDirection="column"
    height="100vh"
    textAlign="center"
    justifyContent="center"
  >
    <Container maxWidth="md">
      <img src={ErrorImg} alt="404" />
      <Typography align="center" variant="h1" mb={4}>
        Opps!!!
      </Typography>
      <Typography align="center" variant="h4" mb={4}>
        This page you are looking for could not be found.
      </Typography>
      <Button
        color="primary"
        variant="contained"
        component={Link}
        to="/dashboards/modern"
        disableElevation
      >
        Go Back to Home
      </Button>
    </Container>
  </Box>
);

export default Error;

===== src/views/authentication/Maintenance.tsx =====
import { Box, Container, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import MaintenanceImg from 'src/assets/images/backgrounds/maintenance.svg';

const Maintenance = () => (
  <Box
    display="flex"
    flexDirection="column"
    height="100vh"
    textAlign="center"
    justifyContent="center"
  >
    <Container maxWidth="md">
      <img src={MaintenanceImg} alt="404" style={{ width: '100%', maxWidth: '500px' }} />
      <Typography align="center" variant="h1" mb={4}>
        Maintenance Mode!!!
      </Typography>
      <Typography align="center" variant="h4" mb={4}>
        Website is Under Construction. Check back later!
      </Typography>
      <Button color="primary" variant="contained" component={Link} to="/" disableElevation>
        Go Back to Home
      </Button>
    </Container>
  </Box>
);

export default Maintenance;

===== src/views/charts/AreaChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import AreaChartCode from 'src/components/charts/Area Chart/code/AreaChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Area Chart',
  },
];

const AreaChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionsareachart: Props = {
    chart: {
      id: 'area-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        enabled: true,
      },
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      width: '3',
      curve: 'smooth',
    },
    colors: [primary, secondary],
    xaxis: {
      type: 'datetime',
      categories: [
        '2018-09-19T00:00:00',
        '2018-09-19T01:30:00',
        '2018-09-19T02:30:00',
        '2018-09-19T03:30:00',
        '2018-09-19T04:30:00',
        '2018-09-19T05:30:00',
        '2018-09-19T06:30:00',
      ],
    },
    yaxis: {
      opposite: false,
      labels: {
        show: true,
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    grid: {
      show: false,
    },
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesareachart = [
    {
      name: 'Sales Summery 1',
      data: [31, 40, 28, 51, 42, 109, 100],
    },
    {
      name: 'Sales Summery 2',
      data: [11, 32, 45, 32, 34, 52, 41],
    },
  ];

  return (
    <PageContainer title="Area Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Area Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Area Chart" codeModel={<AreaChartCode />}>
        <Chart options={optionsareachart} series={seriesareachart} type="area" height="300px" />
      </ParentCard>
    </PageContainer>
  );
};

export default AreaChart;
===== src/views/charts/CandlestickChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import CandlestickChartCode from 'src/components/charts/Candlestick Chart/code/CandlestickChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Candlestick Chart',
  },
];

const CandlestickChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionscandlestickchart: Props = {
    chart: {
      height: 350,
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    xaxis: {
      type: 'datetime',
    },
    yaxis: {
      tooltip: {
        enabled: true,
      },
    },
    plotOptions: {
      candlestick: {
        colors: {
          upward: primary,
          downward: secondary,
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriecandlestickchart: any = [
    {
      data: [
        { x: new Date(1538778600000), y: [6629.81, 6650.5, 6623.04, 6633.33] },
        { x: new Date(1538780400000), y: [6632.01, 6643.59, 6620, 6630.11] },
        { x: new Date(1538782200000), y: [6630.71, 6648.95, 6623.34, 6635.65] },
        { x: new Date(1538784000000), y: [6635.65, 6651, 6629.67, 6638.24] },
        { x: new Date(1538785800000), y: [6638.24, 6640, 6620, 6624.47] },
        { x: new Date(1538787600000), y: [6624.53, 6636.03, 6621.68, 6624.31] },
        { x: new Date(1538789400000), y: [6624.61, 6632.2, 6617, 6626.02] },
        { x: new Date(1538791200000), y: [6627, 6627.62, 6584.22, 6603.02] },
        { x: new Date(1538793000000), y: [6605, 6608.03, 6598.95, 6604.01] },
        { x: new Date(1538794800000), y: [6604.5, 6614.4, 6602.26, 6608.02] },
        { x: new Date(1538796600000), y: [6608.02, 6610.68, 6601.99, 6608.91] },
        { x: new Date(1538798400000), y: [6608.91, 6618.99, 6608.01, 6612] },
        { x: new Date(1538800200000), y: [6612, 6615.13, 6605.09, 6612] },
        { x: new Date(1538802000000), y: [6612, 6624.12, 6608.43, 6622.95] },
        { x: new Date(1538803800000), y: [6623.91, 6623.91, 6615, 6615.67] },
        { x: new Date(1538805600000), y: [6618.69, 6618.74, 6610, 6610.4] },
        { x: new Date(1538807400000), y: [6611, 6622.78, 6610.4, 6614.9] },
        { x: new Date(1538809200000), y: [6614.9, 6626.2, 6613.33, 6623.45] },
        { x: new Date(1538811000000), y: [6623.48, 6627, 6618.38, 6620.35] },
        { x: new Date(1538812800000), y: [6619.43, 6620.35, 6610.05, 6615.53] },
        { x: new Date(1538814600000), y: [6615.53, 6617.93, 6610, 6615.19] },
        { x: new Date(1538816400000), y: [6615.19, 6621.6, 6608.2, 6620] },
        { x: new Date(1538818200000), y: [6619.54, 6625.17, 6614.15, 6620] },
        { x: new Date(1538820000000), y: [6620.33, 6634.15, 6617.24, 6624.61] },
        { x: new Date(1538821800000), y: [6625.95, 6626, 6611.66, 6617.58] },
        { x: new Date(1538823600000), y: [6619, 6625.97, 6595.27, 6598.86] },
        { x: new Date(1538825400000), y: [6598.86, 6598.88, 6570, 6587.16] },
        { x: new Date(1538827200000), y: [6588.86, 6600, 6580, 6593.4] },
        { x: new Date(1538829000000), y: [6593.99, 6598.89, 6585, 6587.81] },
        { x: new Date(1538830800000), y: [6587.81, 6592.73, 6567.14, 6578] },
        { x: new Date(1538832600000), y: [6578.35, 6581.72, 6567.39, 6579] },
        { x: new Date(1538834400000), y: [6579.38, 6580.92, 6566.77, 6575.96] },
        { x: new Date(1538836200000), y: [6575.96, 6589, 6571.77, 6588.92] },
        { x: new Date(1538838000000), y: [6588.92, 6594, 6577.55, 6589.22] },
        { x: new Date(1538839800000), y: [6589.3, 6598.89, 6589.1, 6596.08] },
        { x: new Date(1538841600000), y: [6597.5, 6600, 6588.39, 6596.25] },
        { x: new Date(1538843400000), y: [6598.03, 6600, 6588.73, 6595.97] },
        { x: new Date(1538845200000), y: [6595.97, 6602.01, 6588.17, 6602] },
        { x: new Date(1538847000000), y: [6602, 6607, 6596.51, 6599.95] },
        { x: new Date(1538848800000), y: [6600.63, 6601.21, 6590.39, 6591.02] },
        { x: new Date(1538850600000), y: [6591.02, 6603.08, 6591, 6591] },
        { x: new Date(1538852400000), y: [6591, 6601.32, 6585, 6592] },
        { x: new Date(1538854200000), y: [6593.13, 6596.01, 6590, 6593.34] },
        { x: new Date(1538856000000), y: [6593.34, 6604.76, 6582.63, 6593.86] },
        { x: new Date(1538857800000), y: [6593.86, 6604.28, 6586.57, 6600.01] },
        { x: new Date(1538859600000), y: [6601.81, 6603.21, 6592.78, 6596.25] },
        { x: new Date(1538861400000), y: [6596.25, 6604.2, 6590, 6602.99] },
        { x: new Date(1538863200000), y: [6602.99, 6606, 6584.99, 6587.81] },
        { x: new Date(1538865000000), y: [6587.81, 6595, 6583.27, 6591.96] },
        { x: new Date(1538866800000), y: [6591.97, 6596.07, 6585, 6588.39] },
        { x: new Date(1538868600000), y: [6587.6, 6598.21, 6587.6, 6594.27] },
        { x: new Date(1538870400000), y: [6596.44, 6601, 6590, 6596.55] },
        { x: new Date(1538872200000), y: [6598.91, 6605, 6596.61, 6600.02] },
        { x: new Date(1538874000000), y: [6600.55, 6605, 6589.14, 6593.01] },
        { x: new Date(1538875800000), y: [6593.15, 6605, 6592, 6603.06] },
        { x: new Date(1538877600000), y: [6603.07, 6604.5, 6599.09, 6603.89] },
        { x: new Date(1538879400000), y: [6604.44, 6604.44, 6600, 6603.5] },
        { x: new Date(1538881200000), y: [6603.5, 6603.99, 6597.5, 6603.86] },
        { x: new Date(1538883000000), y: [6603.85, 6605, 6600, 6604.07] },
        { x: new Date(1538884800000), y: [6604.98, 6606, 6604.07, 6606] },
      ],
    },
  ];

  return (
    <PageContainer title="Candlestick Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Candlestick Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Candlestick Chart" codeModel={<CandlestickChartCode />}>
        <Chart
          options={optionscandlestickchart}
          series={seriecandlestickchart}
          type="candlestick"
          height="308px"
          width={'95%'}
        />
      </ParentCard>
    </PageContainer>
  );
};

export default CandlestickChart;

===== src/views/charts/ColumnChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import ColumnChartCode from 'src/components/charts/Column Chart/code/ColumnChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Column Chart',
  },
];

const ColumnChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const error = theme.palette.error.main;

  const optionscolumnchart: Props = {
    chart: {
      id: 'column-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, error],
    plotOptions: {
      bar: {
        horizontal: false,
        endingShape: 'rounded',
        columnWidth: '20%',
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2,
      colors: ['transparent'],
    },
    xaxis: {
      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],
    },
    yaxis: {
      title: {
        text: '$ (thousands)',
      },
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      y: {
        formatter(val: any) {
          return `$ ${val} thousands`;
        },
      },
      theme: 'dark',
    },
    grid: {
      show: false,
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
  };
  const seriescolumnchart: any = [
    {
      name: 'Desktop',
      data: [44, 55, 57, 56, 61, 58, 63, 60, 66],
    },
    {
      name: 'Mobile',
      data: [76, 85, 101, 98, 87, 105, 91, 114, 94],
    },
    {
      name: 'Other',
      data: [35, 41, 36, 26, 45, 48, 52, 53, 41],
    },
  ];

  return (
    <PageContainer title="Column Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Column Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title='Column Chart' codeModel={<ColumnChartCode />}>
        <Chart
          options={optionscolumnchart}
          series={seriescolumnchart}
          type="bar"
          height="300px"
        />
      </ParentCard>
    </PageContainer>
  );
};

export default ColumnChart;

===== src/views/charts/DoughnutChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import Grid from '@mui/material/Grid2';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import DoughnutChartsCode from 'src/components/charts/Doughnut Charts/code/DoughnutChartsCode';
import PieChartsCode from 'src/components/charts/Pie Charts/code/PieChartsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Doughtnut Chart',
  },
];

const DoughnutChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const warning = theme.palette.warning.main;

  // 1
  const optionsdoughnutchart: Props = {
    chart: {
      id: 'donut-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesdoughnutchart = [45, 15, 27, 18, 35];

  // 2
  const optionspiechart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      fillSeriesColor: false,
    },
  };
  const seriespiechart = [45, 15, 27, 18, 35];

  return (
    (<PageContainer title="Doughnut & Pie Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Doughtnut Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Doughnut Charts" codeModel={<DoughnutChartsCode />}>
            <Chart
              options={optionsdoughnutchart}
              series={seriesdoughnutchart}
              type="donut"
              height="300px"
            />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title='Pie Charts' codeModel={<PieChartsCode />}>
            <Chart options={optionspiechart} series={seriespiechart} type="pie" height="300px" />
          </ParentCard>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default DoughnutChart;

===== src/views/charts/GredientChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import GradientChartCode from 'src/components/charts/Gradient Chart/code/GradientChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Gradient Chart',
  },
];

const GredientChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  
  const optionsgredientchart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      dropShadow: {
        enabled: true,
        color: 'rgba(0,0,0,0.2)',
        top: 12,
        left: 4,
        blur: 3,
        opacity: 0.4,
      },
    },
    stroke: {
      width: 7,
      curve: 'smooth',
    },

    xaxis: {
      type: 'datetime',
      categories: [
        '1/11/2000',
        '2/11/2000',
        '3/11/2000',
        '4/11/2000',
        '5/11/2000',
        '6/11/2000',
        '7/11/2000',
        '8/11/2000',
        '9/11/2000',
        '10/11/2000',
        '11/11/2000',
        '12/11/2000',
        '1/11/2001',
        '2/11/2001',
        '3/11/2001',
        '4/11/2001',
        '5/11/2001',
        '6/11/2001',
      ],
    },
    fill: {
      type: 'gradient',
      gradient: {
        shade: 'dark',
        gradientToColors: [primary],
        shadeIntensity: 1,
        type: 'horizontal',
        opacityFrom: 1,
        opacityTo: 0.9,
        stops: [0, 100, 100, 100],
      },
    },
    markers: {
      size: 4,
      opacity: 0.9,
      colors: [primary],
      strokeColor: '#fff',
      strokeWidth: 2,

      hover: {
        size: 7,
      },
    },
    yaxis: {
      min: 0,
      max: 40,
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriesgredientchart: any = [
    {
      name: 'Likes',
      data: [4, 3, 10, 9, 35, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5],
    },
  ];

  return (
    <PageContainer title="Gredient Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Gradient Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title='Gradient Chart' codeModel={<GradientChartCode />} >
        <Chart
          options={optionsgredientchart}
          series={seriesgredientchart}
          type="line"
          height="300px"
        />
      </ParentCard>
    </PageContainer>
  );
};

export default GredientChart;

===== src/views/charts/LineChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import LineChartCode from 'src/components/charts/Line Chart/code/LineChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Line Chart',
  },
];

const LineChart = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionslinechart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        type: 'x',
        enabled: true,
      },
      toolbar: {
        show: false,
      },
      shadow: {
        enabled: true,
        color: '#000',
        top: 18,
        left: 7,
        blur: 10,
        opacity: 1,
      },
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
      title: {
        text: 'Month',
      },
    },
    grid: {
      show: false,
    },
    colors: [primary, secondary],
    dataLabels: {
      enabled: true,
    },
    stroke: {
      curve: 'straight',
      width: '2',
    },
    legend: {
      position: 'top',
      horizontalAlign: 'right',
      floating: true,
      offsetY: -25,
      offsetX: -5,
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const serieslinechart: any = [
    {
      name: 'High - 2013',
      data: [28, 29, 33, 36, 32, 32, 33],
    },
    {
      name: 'Low - 2013',
      data: [12, 11, 14, 18, 17, 13, 13],
    },
  ];

  return (
    <PageContainer title="Line Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Line Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Line Chart" codeModel={<LineChartCode />}>
        <Chart
          options={optionslinechart}
          series={serieslinechart}
          type="line"
          height="308px"
          width={'90%'}
        />
      </ParentCard>
    </PageContainer>
  );
};

export default LineChart;

===== src/views/charts/RadialbarChart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import Grid from '@mui/material/Grid2';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import RadialbarChartsCode from 'src/components/charts/Radialbar Charts/code/RadialbarChartsCode';
import RadarChartsCode from 'src/components/charts/Radar Charts/code/RadarChartsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radialbar Chart',
  },
];

const RadialbarChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const success = theme.palette.success.main;
  const warning = theme.palette.warning.main;

  const optionsradialchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, success, warning],
    plotOptions: {
      radialBar: {
        dataLabels: {
          name: {
            fontSize: '22px',
          },
          value: {
            fontSize: '16px',
          },
          total: {
            show: true,
            label: 'Total',
            formatter() {
              return 249;
            },
          },
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradialchart: any = [44, 55, 67, 83];

  // 2
  const optionsradarchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      toolbar: {
        show: false,
      },
    },
    colors: [primary],
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradarchart: any = [
    {
      name: 'Sales',
      data: [80, 50, 30, 40, 100, 20],
    },
  ];

  return (
    (<PageContainer title="Radialbar & Radar Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Radialbar Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Radialbar Charts" codeModel={<RadialbarChartsCode />}>
            <Chart
              options={optionsradialchart}
              series={seriesradialchart}
              type="radialBar"
              height="338px"
            />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Radar Charts" codeModel={<RadarChartsCode />}>
            <Chart
              options={optionsradarchart}
              series={seriesradarchart}
              type="radar"
              height="300px"
            />
          </ParentCard>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default RadialbarChart;
===== src/views/dashboard/Ecommerce.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Grid2 as Grid } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';

import WeeklyStats from 'src/components/dashboards/modern/WeeklyStats';
import YearlySales from 'src/components/dashboards/ecommerce/YearlySales';
import PaymentGateways from 'src/components/dashboards/ecommerce/PaymentGateways';
import WelcomeCard from 'src/components/dashboards/ecommerce/WelcomeCard';
import Expence from 'src/components/dashboards/ecommerce/Expence';
import Growth from 'src/components/dashboards/ecommerce/Growth';
import RevenueUpdates from 'src/components/dashboards/ecommerce/RevenueUpdates';
import SalesOverview from 'src/components/dashboards/ecommerce/SalesOverview';
import SalesTwo from 'src/components/dashboards/ecommerce/SalesTwo';
import Sales from 'src/components/dashboards/ecommerce/Sales';
import MonthlyEarnings from 'src/components/dashboards/ecommerce/MonthlyEarnings';
import ProductPerformances from 'src/components/dashboards/ecommerce/ProductPerformances';
import RecentTransactions from 'src/components/dashboards/ecommerce/RecentTransactions';

const Ecommerce = () => {
  return (
    (<PageContainer title="eCommerce Dashboard" description="this is eCommerce Dashboard page">
      <Box mt={3}>
        <Grid container spacing={3}>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <WelcomeCard />
          </Grid>

          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Expence />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Sales />
              </Grid>
            </Grid>
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <RevenueUpdates />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <SalesOverview />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <SalesTwo />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Growth />
              </Grid>
              <Grid size={12}>
                <MonthlyEarnings />
              </Grid>
            </Grid>
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <WeeklyStats />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <YearlySales />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <PaymentGateways />
          </Grid>
          {/* column */}

          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <RecentTransactions />
          </Grid>
          {/* column */}

          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <ProductPerformances />
          </Grid>
        </Grid>
      </Box>
    </PageContainer>)
  );
};

export default Ecommerce;

===== src/views/dashboard/Modern.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Grid2 as Grid } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';

import TopCards from 'src/components/dashboards/modern/TopCards';
import RevenueUpdates from 'src/components/dashboards/modern/RevenueUpdates';
import YearlyBreakup from 'src/components/dashboards/modern/YearlyBreakup';
import MonthlyEarnings from 'src/components/dashboards/modern/MonthlyEarnings';
import EmployeeSalary from 'src/components/dashboards/modern/EmployeeSalary';
import Customers from 'src/components/dashboards/modern/Customers';
import Projects from 'src/components/dashboards/modern/Projects';
import Social from 'src/components/dashboards/modern/Social';
import SellingProducts from 'src/components/dashboards/modern/SellingProducts';
import WeeklyStats from 'src/components/dashboards/modern/WeeklyStats';
import TopPerformers from 'src/components/dashboards/modern/TopPerformers';
import Welcome from 'src/layouts/full/shared/welcome/Welcome';

const Modern = () => {
  return (
    (<PageContainer title="Foodify" description="this is Modern Dashboard page">
      <Box>
        <Grid container spacing={3}>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 12
            }}>
            <TopCards />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <RevenueUpdates />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 12
                }}>
                <YearlyBreakup />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 12
                }}>
                <MonthlyEarnings />
              </Grid>
            </Grid>
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <EmployeeSalary />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Customers />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Projects />
              </Grid>
              <Grid size={12}>
                <Social />
              </Grid>
            </Grid>
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <SellingProducts />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <WeeklyStats />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <TopPerformers />
          </Grid>
        </Grid>
        {/* column */}
        <Welcome />
      </Box>
    </PageContainer>)
  );
};

export default Modern;

===== src/views/forms/form-elements/MuiAutoComplete.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';

import ComboBoxAutocomplete from 'src/components/forms/form-elements/autoComplete/ComboBoxAutocomplete';
import CountrySelectAutocomplete from 'src/components/forms/form-elements/autoComplete/CountrySelectAutocomplete';
import ControlledStateAutocomplete from 'src/components/forms/form-elements/autoComplete/ControlledStateAutocomplete';
import FreeSoloAutocomplete from 'src/components/forms/form-elements/autoComplete/FreeSoloAutocomplete';
import MultipleValuesAutocomplete from 'src/components/forms/form-elements/autoComplete/MultipleValuesAutocomplete';
import CheckboxesAutocomplete from 'src/components/forms/form-elements/autoComplete/CheckboxesAutocomplete';
import SizesAutocomplete from 'src/components/forms/form-elements/autoComplete/SizesAutocomplete';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

// codeModel
import ComboBoxCode from 'src/components/forms/form-elements/autoComplete/code/ComboBoxCode';
import CountrySelectCode from 'src/components/forms/form-elements/autoComplete/code/CountrySelectCode';
import ControlledStateCode from 'src/components/forms/form-elements/autoComplete/code/ControlledStateCode';
import FreeSoloCode from 'src/components/forms/form-elements/autoComplete/code/FreeSoloCode';
import MultipleValuesCode from 'src/components/forms/form-elements/autoComplete/code/MultipleValuesCode';
import CheckboxesCode from 'src/components/forms/form-elements/autoComplete/code/CheckboxesCode';
import SizesCode from 'src/components/forms/form-elements/autoComplete/code/SizesCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'AutoComplete',
  },
];

const MuiAutoComplete = () => (
  <PageContainer title="Autocomplete" description="this is Autocomplete page">
    {/* breadcrumb */}
    <Breadcrumb title="AutoComplete" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Autocomplete">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Combo Box" codeModel={<ComboBoxCode />}>
            <ComboBoxAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Country Select" codeModel={<CountrySelectCode />}>
            <CountrySelectAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Controlled State" codeModel={<ControlledStateCode />}>
            <ControlledStateAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Free Solo" codeModel={<FreeSoloCode />}>
            <FreeSoloAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Multiple Values" codeModel={<MultipleValuesCode />}>
            <MultipleValuesAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Checkboxes" codeModel={<CheckboxesCode />}>
            <CheckboxesAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Sizes" codeModel={<SizesCode />}>
            <SizesAutocomplete />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiAutoComplete;

===== src/views/forms/form-elements/MuiButton.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import DefaultButtons from 'src/components/forms/form-elements/button/DefaultButtons';
import ColorButtons from 'src/components/forms/form-elements/button/ColorButtons';
import IconLoadingButtons from 'src/components/forms/form-elements/button/IconLoadingButtons';
import SizeButton from 'src/components/forms/form-elements/button/SizeButton';

import OutlinedIconButtons from 'src/components/forms/form-elements/button/OutlinedIconButtons';
import OutlinedSizeButton from 'src/components/forms/form-elements/button/OutlinedSizeButton';

import TextDefaultButtons from 'src/components/forms/form-elements/button/TextDefaultButtons';
import TextColorButtons from 'src/components/forms/form-elements/button/TextColorButtons';
import TextIconButtons from 'src/components/forms/form-elements/button/TextIconButtons';
import TextSizeButton from 'src/components/forms/form-elements/button/TextSizeButton';

import IconColorButtons from 'src/components/forms/form-elements/button/IconColorButtons';
import IconSizeButtons from 'src/components/forms/form-elements/button/IconSizeButtons';

import FabDefaultButton from 'src/components/forms/form-elements/button/FabDefaultButton';
import FabColorButtons from 'src/components/forms/form-elements/button/FabColorButtons';
import FabSizeButtons from 'src/components/forms/form-elements/button/FabSizeButtons';

import DefaultButtonGroup from 'src/components/forms/form-elements/button/DefaultButtonGroup';
import SizeButtonGroup from 'src/components/forms/form-elements/button/SizeButtonGroup';
import VerticalButtonGroup from 'src/components/forms/form-elements/button/VerticalButtonGroup';
import ColorButtonGroup from 'src/components/forms/form-elements/button/ColorButtonGroup';
import TextButtonGroup from 'src/components/forms/form-elements/button/TextButtonGroup';
import OutlinedColorButtons from '../../../components/forms/form-elements/button/OutlinedColorButtons';

// codeModel
import DefaultCode from 'src/components/forms/form-elements/button/code/DefaultCode';
import ColorsCode from 'src/components/forms/form-elements/button/code/ColorsCode';
import LoadingButtonsCode from 'src/components/forms/form-elements/button/code/LoadingButtonsCode';
import SizesCode from 'src/components/forms/form-elements/button/code/SizesCode';
import OutlinedCode from 'src/components/forms/form-elements/button/code/OutlinedCode';
import OutlinedIconCode from 'src/components/forms/form-elements/button/code/OutlinedIconCode';
import OutlineSizeCode from 'src/components/forms/form-elements/button/code/OutlineSizeCode';
import TextCode from 'src/components/forms/form-elements/button/code/TextCode';
import TextColorCode from 'src/components/forms/form-elements/button/code/TextColorCode';
import TextIconColor from 'src/components/forms/form-elements/button/code/TextIconColor';
import TextSizesCode from 'src/components/forms/form-elements/button/code/TextSizesCode';
import IconColorCode from 'src/components/forms/form-elements/button/code/IconColorCode';
import IconSizesCode from 'src/components/forms/form-elements/button/code/IconSizesCode';
import FABCode from 'src/components/forms/form-elements/button/code/FABCode';
import FABColorCode from 'src/components/forms/form-elements/button/code/FABColorCode';
import FABSizeCode from 'src/components/forms/form-elements/button/code/FABSizeCode';
import DefaultButtonGroupCode from 'src/components/forms/form-elements/button/code/DefaultButtonGroupCode';
import SizeButtonGroupCode from 'src/components/forms/form-elements/button/code/SizeButtonGroupCode';
import VerticalButtonGroupCode from 'src/components/forms/form-elements/button/code/VerticalButtonGroupCode';
import TextButtonGroupCode from 'src/components/forms/form-elements/button/code/TextButtonGroupCode';
import ColorButtonGroupCode from 'src/components/forms/form-elements/button/code/ColorButtonGroupCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Button',
  },
];

const MuiButton = () => (
  <PageContainer title="Buttons" description="this is Buttons page">
    {/* breadcrumb */}
    <Breadcrumb title="Button" items={BCrumb} />
    {/* end breadcrumb */}
    <Grid container spacing={3}>
      <Grid size={12}>
        <ParentCard title='Buttons'>
          <Grid container spacing={3}>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Default" codeModel={<DefaultCode />}>
                <DefaultButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Colors" codeModel={<ColorsCode />}>
                <ColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Loading Buttons" codeModel={<LoadingButtonsCode />}>
                <IconLoadingButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Sizes" codeModel={<SizesCode />}>
                <SizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outlined" codeModel={<OutlinedCode />}>
                <OutlinedColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outlined Icon" codeModel={<OutlinedIconCode />}>
                <OutlinedIconButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outline Size" codeModel={<OutlineSizeCode />}>
                <OutlinedSizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text" codeModel={<TextCode />}>
                <TextDefaultButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Color" codeModel={<TextColorCode />}>
                <TextColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Icon" codeModel={<TextIconColor />}>
                <TextIconButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Sizes" codeModel={<TextSizesCode />}>
                <TextSizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Icon Color" codeModel={<IconColorCode />}>
                <IconColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Icon Sizes" codeModel={<IconSizesCode />}>
                <IconSizeButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB" codeModel={<FABCode />}>
                <FabDefaultButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB Color" codeModel={<FABColorCode />}>
                <FabColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB Size" codeModel={<FABSizeCode />}>
                <FabSizeButtons />
              </ChildCard>
            </Grid>
          </Grid>
        </ParentCard>
      </Grid>
      <Grid size={12}>
        <ParentCard title='Button Group'>
          <Grid container spacing={3}>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Default" codeModel={<DefaultButtonGroupCode />}>
                <DefaultButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Sizes" codeModel={<SizeButtonGroupCode />}>
                <SizeButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Verical" codeModel={<VerticalButtonGroupCode />}>
                <VerticalButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text" codeModel={<TextButtonGroupCode />}>
                <TextButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid display="flex" alignItems="stretch" size={12}>
              <ChildCard title="Color" codeModel={<ColorButtonGroupCode />}>
                <ColorButtonGroup />
              </ChildCard>
            </Grid>
          </Grid>
        </ParentCard>
      </Grid>
    </Grid>
  </PageContainer >
);
export default MuiButton;

===== src/views/forms/form-elements/MuiCheckbox.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import Grid from '@mui/material/Grid2';

// custom components
import PositionCheckbox from "src/components/forms/form-elements/checkbox/Position";
import SizesCheckbox from "src/components/forms/form-elements/checkbox/Sizes";
import DefaultcolorsCheckbox from "src/components/forms/form-elements/checkbox/DefaultColors"
import CustomEleCheckbox from "src/components/forms/form-elements/checkbox/Custom";
import DefaultCheckbox from "src/components/forms/form-elements/checkbox/Default";
import ColorsCheckbox from "src/components/forms/form-elements/checkbox/Colors";

// codeModel
import CustomEleCheckboxCode from 'src/components/forms/form-elements/checkbox/code/CustomEleCheckboxCode';
import ColorsCheckboxCode from 'src/components/forms/form-elements/checkbox/code/ColorsCheckboxCode';
import DefaultCheckboxCode from 'src/components/forms/form-elements/checkbox/code/DefaultCheckboxCode';
import DefaultcolorsCheckboxCode from 'src/components/forms/form-elements/checkbox/code/DefaultcolorsCheckboxCode';
import SizesCheckboxCode from 'src/components/forms/form-elements/checkbox/code/SizesCheckboxCode';
import PositionCheckboxCode from 'src/components/forms/form-elements/checkbox/code/PositionCheckboxCode';
const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Checkbox',
  },
];

const MuiCheckbox = () => {

  return (
    (<PageContainer title="Checkbox" description="this is Checkbox page">
      {/* breadcrumb */}
      <Breadcrumb title="Checkbox" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Checkbox">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom  */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomEleCheckboxCode />}>
              <CustomEleCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Colors  */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Colors" codeModel={<ColorsCheckboxCode />}>
              <ColorsCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default Checkbox */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultCheckboxCode />}>
              <DefaultCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default with colors */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default with Colors" codeModel={<DefaultcolorsCheckboxCode />}>
              <DefaultcolorsCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Sizes */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Sizes & Custom Icon" codeModel={<SizesCheckboxCode />}>
              <SizesCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Position */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Position" codeModel={<PositionCheckboxCode />}>
              <PositionCheckbox />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiCheckbox;

===== src/views/forms/form-elements/MuiDateTime.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import dayjs, { Dayjs } from 'dayjs';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers'

// codeModel
import BasicDateTimeCode from 'src/components/forms/form-elements/date-time/code/BasicDateTimeCode';
import DifferentDesignCode from 'src/components/forms/form-elements/date-time/code/DifferentDesignCode';
import TimepickerCode from 'src/components/forms/form-elements/date-time/code/TimepickerCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Date Time',
  },
];

const MuiDateTime = () => {
  const [value, setValue] = React.useState<Dayjs | null>(null);
  const [value2, setValue2] = React.useState<Dayjs | null>(null);

  // date time
  const [value3, setValue3] = React.useState<Dayjs | null>(dayjs('2018-01-01T00:00:00.000Z'));

  return (
    (<PageContainer title="Date Time" description="this is Date Time page">
      {/* breadcrumb */}
      <Breadcrumb title="Date Picker" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Date Time">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Basic */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Basic" codeModel={<BasicDateTimeCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <MobileDateTimePicker
                  onChange={(newValue) => {
                    setValue3(newValue);
                  }}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      variant: 'outlined',
                      size: 'small',
                      inputProps: { 'aria-label': 'basic date picker' },
                    },
                  }}
                  value={value3}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Different */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Different Design" codeModel={<DifferentDesignCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DateTimePicker
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      size: 'small',
                      sx: {
                        '& .MuiSvgIcon-root': {
                          width: '18px',
                          height: '18px',
                        },
                        '& .MuiFormHelperText-root': {
                          display: 'none',
                        },
                      },
                    },
                  }}
                  value={value}
                  onChange={(newValue) => {
                    setValue(newValue)
                  }}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Timepicker */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Timepicker" codeModel={<TimepickerCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <TimePicker
                  value={value2}
                  onChange={(newValue) => {
                    setValue2(newValue)
                  }}
                  viewRenderers={{
                    hours: renderTimeViewClock,
                    minutes: renderTimeViewClock,
                    seconds: renderTimeViewClock,
                  }}
                  slotProps={{
                    textField: {
                      size: 'small',
                      fullWidth: true,
                      sx: {
                        '& .MuiSvgIcon-root': {
                          width: '18px',
                          height: '18px',
                        },
                        '& .MuiFormHelperText-root': {
                          display: 'none',
                        },
                      },
                    },
                  }}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiDateTime;

===== src/views/forms/form-elements/MuiRadio.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ColorLabelRadio from "src/components/forms/form-elements/radio/ColorLabel";
import DefaultRadio from "src/components/forms/form-elements/radio/Default";
import ColorsRadio from "src/components/forms/form-elements/radio/Colors";
import SizesRadio from "src/components/forms/form-elements/radio/Sizes";
import CustomExRadio from "src/components/forms/form-elements/radio/Custom";
import PositionRadio from "src/components/forms/form-elements/radio/Position";

// codeModel
import CustomExRadioCode from 'src/components/forms/form-elements/radio/code/CustomExRadioCode';
import ColorLabelRadioCode from 'src/components/forms/form-elements/radio/code/ColorLabelRadioCode';
import DefaultRadioCode from 'src/components/forms/form-elements/radio/code/DefaultRadioCode';
import ColorsRadioCode from 'src/components/forms/form-elements/radio/code/ColorsRadioCode';
import SizesRadioCode from 'src/components/forms/form-elements/radio/code/SizesRadioCode';
import PositionRadioCode from 'src/components/forms/form-elements/radio/code/PositionRadioCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radio',
  },
];

const ExRadio = () => {

  return (
    (<PageContainer title="Radio" description="this is Radio page">
      {/* breadcrumb */}
      <Breadcrumb title="Radio" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Radio">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomExRadioCode />}>
              <CustomExRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Color with label */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Color with Label" codeModel={<ColorLabelRadioCode />}>
              <ColorLabelRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultRadioCode />}>
              <DefaultRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default Colors */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default Colors" codeModel={<ColorsRadioCode />}>
              <ColorsRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Sizes */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Sizes" codeModel={<SizesRadioCode />}>
              <SizesRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Position */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Position" codeModel={<PositionRadioCode />}>
              <PositionRadio />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default ExRadio;

===== src/views/forms/form-elements/MuiSlider.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Slider, Typography, SliderThumb, SliderValueLabelProps, Stack } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import CustomRangeSlider from 'src/components/forms/theme-elements/CustomRangeSlider';
import CustomSlider from 'src/components/forms/theme-elements/CustomSlider';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';

// codeModel
import CustomSliderCode from 'src/components/forms/form-elements/slider/code/CustomSliderCode';
import VolumesliderCode from 'src/components/forms/form-elements/slider/code/VolumesliderCode';
import RangesliderCode from 'src/components/forms/form-elements/slider/code/RangesliderCode';
import DefaultsliderCode from 'src/components/forms/form-elements/slider/code/DefaultsliderCode';
import DisabledSliderCode from 'src/components/forms/form-elements/slider/code/DisabledSliderCode';
import DiscreteSliderCode from 'src/components/forms/form-elements/slider/code/DiscreteSliderCode';
import TemperatureRangeCode from 'src/components/forms/form-elements/slider/code/TemperatureRangeCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Slider',
  },
];

const valuetext = (value: any) => `${value}°C`;

function valuetext2(value: any) {
  return `${value}°C`;
}

function AirbnbThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}

const MuiSlider = () => {
  const [value, setValue] = React.useState(30);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (event: any, newValue: any) => {
    setValue(newValue);
  };
  const [value2, setValue2] = React.useState([20, 37]);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange2 = (event2: any, newValue2: any) => {
    setValue2(newValue2);
  };

  return (
    (<PageContainer title="Slider" description="this is Slider page">
      {/* breadcrumb */}
      <Breadcrumb title="Slider" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Slider">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomSliderCode />}>
              <CustomSlider defaultValue={[30]} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Volume */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Volume" codeModel={<VolumesliderCode />}>
              <CustomSlider defaultValue={30} aria-label="volume slider" />
              <Box display="flex" alignItems="center">
                <Typography>
                  <IconVolume2 width={20} />
                </Typography>
                <Box ml="auto">
                  <Typography>
                    <IconVolume width={20} />
                  </Typography>
                </Box>
              </Box>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Range */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Range" codeModel={<RangesliderCode />}>
              <CustomRangeSlider
                slots={{ thumb: AirbnbThumbComponent }}
                getAriaLabel={(index: any) => (index === 0 ? 'Minimum price' : 'Maximum price')}
                defaultValue={[20, 40]}
              />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultsliderCode />}>
              <Slider defaultValue={30} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Disabled */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Disabled" codeModel={<DisabledSliderCode />}>
              <Slider disabled defaultValue={30} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Volume */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Volume">
              <Stack direction="row" spacing={1}>
                <IconVolume2 width={20} />
                <Slider aria-label="Volume" value={value} onChange={handleChange} />
                <IconVolume width={20} />
              </Stack>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Discrete */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Discrete" codeModel={<DiscreteSliderCode />}>
              <Slider
                aria-label="Temperature"
                defaultValue={30}
                getAriaValueText={valuetext}
                valueLabelDisplay="auto"
                step={10}
                marks
                min={10}
                max={110}
              />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Range Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Range Default" codeModel={<TemperatureRangeCode />}>
              <Slider
                getAriaLabel={() => 'Temperature range'}
                value={value2}
                onChange={handleChange2}
                valueLabelDisplay="auto"
                getAriaValueText={valuetext2}
              />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiSlider;

===== src/views/forms/form-elements/MuiSwitch.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import CustomExSwitch from 'src/components/forms/form-elements/switch/Custom';
import DefaultSwitch from 'src/components/forms/form-elements/switch/Default';
import DefaultLabelSwitch from 'src/components/forms/form-elements/switch/DefaultLabel';
import SizesSwitch from 'src/components/forms/form-elements/switch/Sizes';
import ColorsSwitch from 'src/components/forms/form-elements/switch/Colors';
import PositionSwitch from 'src/components/forms/form-elements/switch/Position';

import CustomSwitchCode from 'src/components/forms/form-elements/switch/code/ColorsSwitchCode';
import DefaultSwitchCode from 'src/components/forms/form-elements/switch/code/DefaultSwitchCode';
import DefaultLabelSwitchCode from 'src/components/forms/form-elements/switch/code/DefaultLabelSwitchCode';
import SizesSwitchCode from 'src/components/forms/form-elements/switch/code/SizesSwitchCode';
import ColorsSwitchCode from 'src/components/forms/form-elements/switch/code/ColorsSwitchCode';
import PositionSwitchCode from 'src/components/forms/form-elements/switch/code/PositionSwitchCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Switch',
  },
];

const MuiSwitch = () => (
  <PageContainer title="Switch" description="this is Switch page">
    {/* breadcrumb */}
    <Breadcrumb title="Switch" items={BCrumb} />
    {/* end breadcrumb */}
    <ParentCard title="Switch">
      <Grid container spacing={3}>
        {/* ------------------------------------------------------------------- */}
        {/* Custom */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Custom" codeModel={<CustomSwitchCode />}>
            <CustomExSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default" codeModel={<DefaultSwitchCode />}>
            <DefaultSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default with label */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default with Label" codeModel={<DefaultLabelSwitchCode />}>
            <DefaultLabelSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Sizes */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Sizes" codeModel={<SizesSwitchCode />}>
            <SizesSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default Colors */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default Colors" codeModel={<ColorsSwitchCode />}>
            <ColorsSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Placement */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Placement" codeModel={<PositionSwitchCode />}>
            <PositionSwitch />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiSwitch;

===== src/views/forms/FormCustom.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Grid2 as Grid,
  Box,
  Typography,
  FormControl,
  MenuItem,
  RadioGroup,
  FormControlLabel,
  Button,
  SliderValueLabelProps,
  Stack
} from '@mui/material';
import { SliderThumb } from '@mui/material/Slider';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';

import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import CustomSlider from 'src/components/forms/theme-elements/CustomSlider';
import CustomRangeSlider from 'src/components/forms/theme-elements/CustomRangeSlider';
import CustomSwitch from 'src/components/forms/theme-elements/CustomSwitch';
import CustomDisabledButton from 'src/components/forms/theme-elements/CustomDisabledButton';
import CustomOutlinedButton from 'src/components/forms/theme-elements/CustomOutlinedButton';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomRadio from 'src/components/forms/theme-elements/CustomRadio';
import ParentCard from 'src/components/shared/ParentCard';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';

import FormCustomCode from 'src/components/forms/form-custom/code/FormCustomCode';

function CustomThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}

const FormCustom = () => {
  const [age, setAge] = React.useState('1');
  const [select1, setSelect] = React.useState('1');
  const [select2, setSelect2] = React.useState('1');

  const handleChange = (event: any) => {
    setAge(event.target.value);
  };
  const handleChange4 = (event2: any) => {
    setSelect(event2.target.value);
  };

  const handleChange5 = (event3: any) => {
    setSelect2(event3.target.value);
  };

  const [value, setValue] = React.useState<any | null>(null);
  const [value2, setValue2] = React.useState<any | null>(null);

  const [value3, setValue3] = React.useState(30);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    (<PageContainer title="Custom Form" description="this is Custom Form page">
      {/* breadcrumb */}
      <Breadcrumb title="Custom Form" subtitle="custom designed element" />
      {/* end breadcrumb */}
      <ParentCard title="Custom Form" codeModel={<FormCustomCode />}>
        <Grid container spacing={3}>
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="name">Name</CustomFormLabel>
            <CustomTextField id="name" placeholder="Enter text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="demo-simple-select">Select Dropdown</CustomFormLabel>
            <CustomSelect
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              value={age}
              onChange={handleChange}
              fullWidth
            >
              <MenuItem value={1}>One</MenuItem>
              <MenuItem value={2}>Two</MenuItem>
              <MenuItem value={3}>Three</MenuItem>
            </CustomSelect>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 2 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="cname">Company Name</CustomFormLabel>
            <CustomTextField id="cname" placeholder="Enter text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="time">Time</CustomFormLabel>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <TimePicker
                value={value2}
                onChange={(newValue) => {
                  setValue2(newValue);
                }}
                slotProps={{
                  textField: {
                    fullWidth: true,

                    sx: {
                      '& .MuiSvgIcon-root': {
                        width: '18px',
                        height: '18px',
                      },
                      '& .MuiFormHelperText-root': {
                        display: 'none',
                      },
                    },
                  },
                }}
              />
            </LocalizationProvider>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 3 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="disabled">Industry Type</CustomFormLabel>
            <CustomTextField
              id="disabled"
              placeholder="Disabled filled"
              variant="outlined"
              fullWidth
              disabled
              sx={{
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: (theme: any) =>
                    `${theme.palette.mode === 'dark'
                      ? 'rgba(255, 255, 255, 0.12) !important'
                      : '#dee3e9 !important'
                    }`,
                },
              }}
            />
            <CustomFormLabel htmlFor="date">Date</CustomFormLabel>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DateTimePicker
                slotProps={{
                  textField: {
                    fullWidth: true,

                    sx: {
                      '& .MuiSvgIcon-root': {
                        width: '18px',
                        height: '18px',
                      },
                      '& .MuiFormHelperText-root': {
                        display: 'none',
                      },
                    },
                  },
                }}
                value={value}
                onChange={(newValue) => {
                  setValue(newValue);
                }}
              />
            </LocalizationProvider>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 4 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Lorem ipsum dolor sit amet</CustomFormLabel>
            <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
              <Grid container>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel value="radio1" control={<CustomRadio />} label="Male" />
                  </FormControl>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel value="radio2" control={<CustomRadio />} label="Female" />
                  </FormControl>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel
                      value="radio3"
                      control={<CustomRadio disabled />}
                      label="Disabled"
                    />
                  </FormControl>
                </Grid>
              </Grid>
            </RadioGroup>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 5 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Industry Type</CustomFormLabel>
            <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
              <Grid container>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel
                    control={<CustomCheckbox defaultChecked />}
                    label="Enter text"
                  />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel control={<CustomCheckbox />} label="Enter text" />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel
                    disabled
                    control={<CustomCheckbox disabled />}
                    label="Disabled"
                  />
                </Grid>
              </Grid>
            </RadioGroup>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 6 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel>Slider</CustomFormLabel>
            <CustomRangeSlider
              slots={{ thumb: CustomThumbComponent }}
              getAriaLabel={(index) => (index === 0 ? 'Minimum price' : 'Maximum price')}
              defaultValue={[20, 40]}
            />
            <Grid container spacing={2} mt={1}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 6
                }}>
                <CustomSelect id="range1" value={select1} onChange={handleChange4} fullWidth>
                  <MenuItem value={1}>750</MenuItem>
                  <MenuItem value={2}>850</MenuItem>
                  <MenuItem value={3}>950</MenuItem>
                </CustomSelect>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 6
                }}>
                <CustomSelect id="rang2" value={select2} onChange={handleChange5} fullWidth>
                  <MenuItem value={1}>950</MenuItem>
                  <MenuItem value={2}>1050</MenuItem>
                  <MenuItem value={3}>1150</MenuItem>
                </CustomSelect>
              </Grid>
            </Grid>
            <CustomFormLabel sx={{ mt: 3 }}>Volume</CustomFormLabel>
            <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            <Box display="flex" alignItems="stretch">
              <Typography>
                <IconVolume2 width={20} />
              </Typography>
              <Box ml="auto">
                <Typography>
                  <IconVolume width={20} />
                </Typography>
              </Box>
            </Box>
          </Grid>

          {/* ----------------------------------- */}
          {/* column 7 */}
          {/* ----------------------------------- */}

          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Switch</CustomFormLabel>
            <Grid container spacing={0}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel control={<CustomSwitch />} label="Enter text" />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel control={<CustomSwitch defaultChecked />} label="Enter text" />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel
                  control={
                    <CustomSwitch
                      disabled
                      sx={{
                        '& .MuiSwitch-switchBase.Mui-disabled+.MuiSwitch-track': {
                          opacity: 1,
                        },
                      }}
                    />
                  }
                  label="Disabled"
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel
                  control={
                    <CustomSwitch
                      defaultChecked
                      disabled
                      sx={{
                        '& .MuiSwitch-switchBase.Mui-checked.Mui-disabled': {
                          opacity: 0.5,
                        },
                      }}
                    />
                  }
                  label="Disabled"
                />
              </Grid>
            </Grid>
            {/* button */}
            <Stack
              direction={{ xs: 'column', sm: 'row' }}
              spacing={2}
              justifyContent="space-between"
              mt={2}
            >
              <Stack spacing={1} direction="row">
                <Button variant="contained" color="primary">
                  Add New
                </Button>
                <CustomDisabledButton variant="contained" disabled>
                  Add New
                </CustomDisabledButton>
                <CustomOutlinedButton variant="outlined">Add New</CustomOutlinedButton>
              </Stack>
              <Stack direction="row" spacing={1}>
                <Button variant="contained" color="secondary">
                  Add New
                </Button>
                <Button variant="contained" color="success">
                  Add New
                </Button>
              </Stack>
            </Stack>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default FormCustom;




===== src/views/forms/FormHorizontal.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';

// components
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import BasicLayout from '../../components/forms/form-horizontal/BasicLayout';
import BasicIcons from '../../components/forms/form-horizontal/BasicIcons';
import FormSeparator from '../../components/forms/form-horizontal/FormSeparator';
import FormLabelAlignment from '../../components/forms/form-horizontal/FormLabelAlignment';
import CollapsibleForm from '../../components/forms/form-horizontal/CollapsibleForm';
import FormTabs from '../../components/forms/form-horizontal/FormTabs';

import BasicLayoutCode from 'src/components/forms/form-horizontal/code/BasicIconsCode';
import BasicIconsCode from 'src/components/forms/form-horizontal/code/BasicIconsCode';
import FormSeparatorCode from 'src/components/forms/form-horizontal/code/FormSeparatorCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Horizontal Form',
  },
];

const FormHorizontal = () => {
  return (
    (<PageContainer title="Horizontal Form" description="this is Horizontal Form">
      {/* breadcrumb */}
      <Breadcrumb title="Horizontal Form" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid size={12}>
          <ParentCard title="Basic Layout" codeModel={<BasicLayoutCode />}>
            <BasicLayout />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Basic with Icons" codeModel={<BasicIconsCode />}>
            <BasicIcons />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Form Separator" codeModel={<FormSeparatorCode />}>
            <FormSeparator />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Form Label Alignment">
            <FormLabelAlignment />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Collapsible Section</Typography>
          <CollapsibleForm />
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Form with Tabs</Typography>
          <FormTabs />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default FormHorizontal;

===== src/views/forms/FormLayouts.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import {
  FbOrdinaryForm,
  FbDefaultForm,
  FbBasicHeaderForm,
  FbReadonlyForm,
  FbDisabledForm,
  FbLeftIconForm,
  FbRightIconForm,
  FbInputVariants,
} from 'src/components/forms/form-layouts/index';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Form Layouts',
  },
];

const FormLayouts = () => (
  <PageContainer title="Form Layouts" description="this is innerpage">
    {/* breadcrumb */}
    <Breadcrumb title="Form Layouts" items={BCrumb} />
    {/* end breadcrumb */}

    <Grid container spacing={3}>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbOrdinaryForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbInputVariants />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbDefaultForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbBasicHeaderForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbReadonlyForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbDisabledForm />
      </Grid>
      <Grid
        size={{
          lg: 6,
          md: 12,
          xs: 12
        }}>
        <FbLeftIconForm />
      </Grid>
      <Grid
        size={{
          lg: 6,
          md: 12,
          xs: 12
        }}>
        <FbRightIconForm />
      </Grid>
    </Grid>
  </PageContainer>
);

export default FormLayouts;

===== src/views/forms/FormValidation.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
    CardContent,
    Grid2 as Grid
} from '@mui/material';

// common components
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import ChildCard from 'src/components/shared/ChildCard';
import BlankCard from 'src/components/shared/BlankCard';
import Logo from "src/layouts/full/shared/logo/Logo";

// custom components
import FVLogin from 'src/components/forms/form-validation/FVLogin';
import FVRegister from 'src/components/forms/form-validation/FVRegister';
import FVOnLeave from 'src/components/forms/form-validation/FVOnLeave';
import FVRadio from 'src/components/forms/form-validation/FVRadio';
import FVCheckbox from 'src/components/forms/form-validation/FVCheckbox';
import FVSelect from 'src/components/forms/form-validation/FVSelect';

import OnLeaveCode from "src/components/forms/form-validation/code/OnLeaveCode";
import SelectCode from "src/components/forms/form-validation/code/SelectCode";
import RadioCode from "src/components/forms/form-validation/code/RadioCode";
import CheckboxCode from "src/components/forms/form-validation/code/CheckboxCode";

const BCrumb = [
    {
        to: '/',
        title: 'Home',
    },
    {
        title: 'Form Validation',
    },
];

const FormValidation = () => {
    return (
        (<PageContainer title="Form Validation" description="this is Form Validation page">
            <Breadcrumb title="Form Validation" items={BCrumb} />
            <Grid container spacing={3}>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <BlankCard>
                        <CardContent sx={{ pt: 0 }}>
                            <Logo />
                            <FVRegister />
                        </CardContent>
                    </BlankCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <BlankCard>
                        <CardContent sx={{ pt: 0 }}>
                            <Logo />
                            <FVLogin />
                        </CardContent>
                    </BlankCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="On Leave" codeModel={<OnLeaveCode />}>
                        <FVOnLeave />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Select" codeModel={<SelectCode />}>
                        <FVSelect />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Radio" codeModel={<RadioCode />}>
                        <FVRadio />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Checkboxes" codeModel={<CheckboxCode />}>
                        <FVCheckbox />
                    </ChildCard>
                </Grid>
            </Grid>
        </PageContainer>)
    );
};

export default FormValidation;

===== src/views/forms/FormVertical.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';

// components
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';


import BasicLayout from '../../components/forms/form-vertical/BasicLayout';

import BasicIcons from '../../components/forms/form-vertical/BasicIcons';
import FormSeparator from '../../components/forms/form-vertical/FormSeparator';
import CollapsibleForm from '../../components/forms/form-vertical/CollapsibleForm';
import FormTabs from '../../components/forms/form-vertical/FormTabs';

import BasicLayoutCode from 'src/components/forms/form-vertical/code/BasicLayoutCode';
import BasicIconsCode from 'src/components/forms/form-vertical/code/BasicIconsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Vertical Form',
  },
];

const FormVertical = () => {
  return (
    (<PageContainer title="Vertical Form" description="this is Vertical Form page">
      {/* breadcrumb */}
      <Breadcrumb title="Vertical Form" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            lg: 6
          }}>
          <ParentCard title="Basic Layout" codeModel={<BasicLayoutCode />}>
            <BasicLayout />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 6
          }}>
          <ParentCard title="Basic with Icons" codeModel={<BasicIconsCode />}>
            <BasicIcons />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Multi Column with Form Separator">
            <FormSeparator />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Collapsible Section</Typography>
          <CollapsibleForm />
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Form with Tabs</Typography>
          <FormTabs />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default FormVertical;

===== src/views/forms/FormWizard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  FormControlLabel
  Stack
} from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import FormWizardCode from 'src/components/forms/form-wizard/code/FormWizardCode';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import ParentCard from 'src/components/shared/ParentCard';

const steps = ['Account', 'Profile', 'Finish'];

const FormWizard = () => {
  const [activeStep, setActiveStep] = React.useState(0);
  const [skipped, setSkipped] = React.useState(new Set());

  const isStepOptional = (step:any) => step === 1;

  const isStepSkipped = (step:any) => skipped.has(step);

  const handleNext = () => {
    let newSkipped = skipped;
    if (isStepSkipped(activeStep)) {
      newSkipped = new Set(newSkipped.values());
      newSkipped.delete(activeStep);
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped(newSkipped);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this,
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.");
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values());
      newSkipped.add(activeStep);

      return newSkipped;
    });
  };

  // eslint-disable-next-line consistent-return
  const handleSteps = (step: any) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <CustomFormLabel htmlFor="Name">Name</CustomFormLabel>
            <CustomTextField id="Name" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Email">Email</CustomFormLabel>
            <CustomTextField id="Email" type="email" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Password">Password</CustomFormLabel>
            <CustomTextField id="Password" type="password" variant="outlined" fullWidth />
          </Box>
        );
      case 1:
        return (
          <Box>
            <CustomFormLabel htmlFor="Fname">First Name</CustomFormLabel>
            <CustomTextField id="Fname" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Lname">Last Name</CustomFormLabel>
            <CustomTextField id="Lname" type="text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Address">Address</CustomFormLabel>
            <CustomTextField id="Address" multiline rows={4} variant="outlined" fullWidth />
          </Box>
        );
      case 2:
        return (
          <Box pt={3}>
            <Typography variant="h5">Terms and condition</Typography>
            <Typography variant="body2" sx={{ mt: 1 }}>
              Sard about this site or you have been to it, but you cannot figure out what it is or
              what it can do. MTA web directory isSard about this site or you have been to it, but
              you cannot figure out what it is or what it can do. MTA web directory is
            </Typography>
            <FormControlLabel
              control={<CustomCheckbox defaultChecked />}
              label="Agree with terms?"
            />
          </Box>
        );
      default:
        break;
    }
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  return (
    <PageContainer>
      <Breadcrumb title="Form Wizard" subtitle="this is Form Wizard page" />
      <ParentCard title="Form Wizard" codeModel={<FormWizardCode />}>
        <Box width="100%">
          <Stepper activeStep={activeStep}>
            {steps.map((label, index) => {
              const stepProps: { completed?: boolean } = {};
              const labelProps: {
                optional?: React.ReactNode;
              } = {};
              if (isStepOptional(index)) {
                labelProps.optional = <Typography variant="caption">Optional</Typography>;
              }
              if (isStepSkipped(index)) {
                stepProps.completed = false;
              }

              return (
                <Step key={label} {...stepProps}>
                  <StepLabel {...labelProps}>{label}</StepLabel>
                </Step>
              );
            })}
          </Stepper>
          {activeStep === steps.length ? (
            <>
              <Stack spacing={2} mt={3}>
                <severity="success">
                  All steps completed - you&apos;re finished
                </>

                <Box textAlign="right">
                  <Button onClick={handleReset} variant="contained" color="error">
                    Reset
                  </Button>
                </Box>
              </Stack>
            </>
          ) : (
            <>
              <Box>{handleSteps(activeStep)}</Box>

              <Box display="flex" flexDirection="row" mt={3}>
                <Button
                  color="inherit"
                  variant="contained"
                  disabled={activeStep === 0}
                  onClick={handleBack}
                  sx={{ mr: 1 }}
                >
                  Back
                </Button>
                <Box flex="1 1 auto" />
                {isStepOptional(activeStep) && (
                  <Button color="inherit" onClick={handleSkip} sx={{ mr: 1 }}>
                    Skip
                  </Button>
                )}

                <Button
                  onClick={handleNext}
                  variant="contained"
                  color={activeStep === steps.length - 1 ? 'success' : 'secondary'}
                >
                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
                </Button>
              </Box>
            </>
          )}
        </Box>
      </ParentCard>
    </PageContainer>
  );
};

export default FormWizard;

===== src/views/forms/from-tiptap/Tiptap.css =====
.MuiTiptap-FieldContainer-root{
  min-height: 250px;
 }

===== src/views/forms/from-tiptap/TiptapEdit.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { useEditor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import {
  MenuButtonBold,
  MenuButtonItalic,
  MenuControlsContainer,
  MenuDivider,
  MenuSelectHeading,
  RichTextEditorProvider,
  RichTextField,
  MenuButtonStrikethrough,
  MenuButtonOrderedList,
  MenuButtonBulletedList,
  MenuButtonBlockquote,
  MenuButtonCode,
  MenuButtonHorizontalRule,
  MenuButtonUndo,
  MenuButtonRedo,
  MenuButtonRemoveFormatting,
} from "mui-tiptap";
import './Tiptap.css';


const TiptapEdit = () => {

  const editor = useEditor({
    extensions: [StarterKit],
    content: "<p>Type here...</p>",
  });



  return (

    <RichTextEditorProvider editor={editor} >
      <RichTextField
        controls={
          <MenuControlsContainer>
            <MenuSelectHeading />
            <MenuDivider />
            <MenuButtonBold />
            <MenuButtonItalic />

            <MenuButtonStrikethrough />
            <MenuDivider />

            <MenuButtonOrderedList />
            <MenuButtonBulletedList />
            <MenuDivider />
            <MenuButtonBlockquote />
            <MenuButtonCode />
            <MenuButtonHorizontalRule />
            <MenuDivider />

            <MenuButtonUndo />
            <MenuButtonRedo />
            <MenuDivider />

            <MenuButtonRemoveFormatting />

          </MenuControlsContainer>
        }

      />
    </RichTextEditorProvider>

  );
};
export default TiptapEdit;

===== src/views/forms/from-tiptap/TiptapEditor.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import TiptapEdit from './TiptapEdit';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Tiptap Editor',
  },
];

const TiptapEditor = () => {
  return (
    <PageContainer title="Tiptap Editor" description="this is Tiptap Editor page">
      {/* breadcrumb */}
      <Breadcrumb title="Tiptap Editor" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Tiptap Editor">
        <TiptapEdit />
      </ParentCard>
    </PageContainer>
  );
};

export default TiptapEditor;


===== src/views/muicharts/barcharts/page.tsx =====

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import TinyBarChart from 'src/components/muicharts/barcharts/SimpleBarChart'
import StackedBarChart from 'src/components/muicharts/barcharts/StackedBarChart'
import SimpleBarChart from "src/components/muicharts/barcharts/SimpleBarChart";
import MixedBarChart from 'src/components/muicharts/barcharts/MixedBarChart'
import PositiveAndNegativeBarChart from "src/components/muicharts/barcharts/PositiveAndNegativeBarChart";
import BarChartStackedBySignChart from "src/components/muicharts/barcharts/BarChartStackedBySignChart";
import { Grid2 as Grid } from "@mui/material";
import BiaxialBarChart from "src/components/muicharts/barcharts/BiaxialBarChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Bar Charts",
    },
];

const BarChart = () => {
    return (
        <PageContainer title="Bar Chart" description="this is Bar Chart">
            <Breadcrumb title="Bar Chart" items={BCrumb} />
            <Grid container spacing={3}>
                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <SimpleBarChart />
                </Grid>

                <Grid size={{
                    md: 6
                }} >
                    <MixedBarChart />
                </Grid>
                <Grid size={{

                    md: 6
                }}>
                    <PositiveAndNegativeBarChart />
                </Grid>
                <Grid size={{

                    md: 6
                }} >
                    <BarChartStackedBySignChart />
                </Grid>
                <Grid size={{
                    md: 6
                }}>
                    <BiaxialBarChart />
                </Grid>
                <Grid
                    size={{
                        md: 6
                    }}>
                    <StackedBarChart />

                </Grid>
                <Grid size={{
                    md: 6
                }}>
                    <TinyBarChart />
                </Grid>
            </Grid>
        </PageContainer>
    );
};

export default BarChart;

===== src/views/muicharts/gaugecharts/page.tsx =====
"use client"

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { Grid2 as Grid } from "@mui/material";
import BasicGaugesChart from "src/components/muicharts/gaugecharts/BasicGaugesChart";
import ArcDesignChart from "src/components/muicharts/gaugecharts/ArcDesignChart";
import GaugePointerChart from "src/components/muicharts/gaugecharts/GaugePointerChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "GaugeCharts ",
    },
];

const GaugeCharts = () => {
    return (
        <PageContainer title="GaugeCharts" description="this is GaugeCharts ">

            <Breadcrumb title="GaugeCharts" items={BCrumb} />
            <Grid container spacing={3}>
                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <BasicGaugesChart />
                </Grid>
                <Grid
                    size={{
                        md: 6
                    }}
                >

                    <ArcDesignChart />
                </Grid>
                <Grid
                    size={{
                        md: 6
                    }}
                >

                    <GaugePointerChart />
                </Grid>


            </Grid>
        </PageContainer>
    );
};

export default GaugeCharts;

===== src/views/muicharts/linecharts/area/page.tsx =====

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { Grid2 as Grid } from "@mui/material";
import SimpleAreaChart from "src/components/muicharts/linescharts/areacharts/SimpleAreaChart";
import StackedAreaChart from "src/components/muicharts/linescharts/areacharts/StackedAreaChart";
import TinyAreaChart from "src/components/muicharts/linescharts/areacharts/TinyAreaChart";
import PercentAreaChart from "src/components/muicharts/linescharts/areacharts/PercentAreaChart";
import AreaChartConnectNulls from "src/components/muicharts/linescharts/areacharts/AreaChartConnectNullsChart";
import AreaChartFillByValueChart from "src/components/muicharts/linescharts/areacharts/AreaChartFillByValueChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Mui Area Charts",
    },
];

const AreaCharts = () => {
    return (
        <PageContainer title="Mui Area Chart" description="this is Mui Area Chart">
            <Breadcrumb title="Mui Area  Chart" items={BCrumb} />
            <Grid container spacing={3}>

                <SimpleAreaChart />


                <StackedAreaChart />


                <TinyAreaChart />


                <PercentAreaChart />


                <AreaChartConnectNulls />


                <AreaChartFillByValueChart />



            </Grid>
        </PageContainer>
    );
};

export default AreaCharts;

===== src/views/muicharts/linecharts/line/page.tsx =====

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { Grid2 as Grid } from "@mui/material";
import SimpleLineChart from "src/components/muicharts/linescharts/linechart/SimpleLineChart";
import TinyLineChart from "src/components/muicharts/linescharts/linechart/TinyLineChart";
import DashedLineChart from "src/components/muicharts/linescharts/linechart/DashedLineChart";
import BiaxialLineChart from "src/components/muicharts/linescharts/linechart/BiaxialLineChart";
import LineChartWithReferenceLines from "src/components/muicharts/linescharts/linechart/LineChartWithReferenceLinesChart";
import LinewithforecastChart from "src/components/muicharts/linescharts/linechart/LinewithforecastChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Mui Line Charts",
    },
];

const LineChart = () => {
    return (
        <PageContainer title="Mui Line Chart" description="this is Mui Line Chart">
            <Breadcrumb title="Mui Line  Chart" items={BCrumb} />
            <Grid container spacing={3}>

                <SimpleLineChart />


                <TinyLineChart />


                <DashedLineChart />


                <BiaxialLineChart />


                <LineChartWithReferenceLines />


                <LinewithforecastChart />


            </Grid>
        </PageContainer>
    );
};

export default LineChart;

===== src/views/muicharts/piecharts/page.tsx =====

"use client"
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { Grid2 as Grid } from "@mui/material";
import BasicPieChart from "src/components/muicharts/piecharts/BasicPieChart";
import TwoLevelPieChart from "src/components/muicharts/piecharts/TwoLevelPieChart";
import StraightAnglePieChart from "src/components/muicharts/piecharts/StraightAnglePieChart";
import TwoSimplePieChart from "src/components/muicharts/piecharts/TwoSimplePieChart";
import PieChartWithCustomizedLabel from "src/components/muicharts/piecharts/PieChartWithCustomizedLabel";
import PieChartWithPaddingAngleChart from "src/components/muicharts/piecharts/PieChartWithPaddingAngleChart";
import PieChartWithCenterLabelChart from "src/components/muicharts/piecharts/PieChartWithCenterLabelChart";
import OnSeriesItemClickChart from "src/components/muicharts/piecharts/OnSeriesItemClickChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "PieCharts ",
    },
];

const PieCharts = () => {
    return (
        <PageContainer title="PieCharts" description="this is PieCharts ">

            <Breadcrumb title="PieCharts" items={BCrumb} />
            <Grid container spacing={3}>

                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <BasicPieChart />
                </Grid>
                <Grid
                    size={{
                        md: 6
                    }}
                >

                    <TwoLevelPieChart />
                </Grid>

                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <StraightAnglePieChart />
                </Grid>


                <Grid
                    size={{
                        md: 6
                    }}
                >

                    <TwoSimplePieChart />
                </Grid>
                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <PieChartWithCustomizedLabel />
                </Grid>

                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <PieChartWithCenterLabelChart />
                </Grid>

                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <PieChartWithPaddingAngleChart />

                </Grid>


                <Grid
                    size={{
                        md: 6
                    }}
                >
                    <OnSeriesItemClickChart />
                </Grid>



            </Grid>
        </PageContainer>
    );
};

export default PieCharts;

===== src/views/muicharts/scattercharts/page.tsx =====
"use client"
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { Grid2 as Grid } from "@mui/material";
import BasicScatterChart from "src/components/muicharts/scattercharts/BasicScatterChart";
import ScatterDatasetChart from "src/components/muicharts/scattercharts/ScatterDatasetChart";
import VoronoiInteractionChart from "src/components/muicharts/scattercharts/VoronoiInteractionChart";
import ScatterClickNoSnapChart from "src/components/muicharts/scattercharts/ScatterClickNoSnapChart";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "ScatterCharts ",
    },
];

const ScatterCharts = () => {
    return (
        <PageContainer title="ScatterCharts" description="this is ScatterCharts ">

            <Breadcrumb title="ScatterCharts" items={BCrumb} />
            <Grid container spacing={3}>

                <BasicScatterChart />

                <ScatterDatasetChart />

                <VoronoiInteractionChart />

                <ScatterClickNoSnapChart />


            </Grid>
        </PageContainer>
    );
};

export default ScatterCharts;

===== src/views/muicharts/sparklinecharts/page.tsx =====
"use client"
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { Grid2 as Grid } from "@mui/material";
import BasicSparkLine from "src/components/muicharts/sparklinecharts/BasicSparkLine";
import AreaSparkLineChart from "src/components/muicharts/sparklinecharts/AreaSparkLineChart";
import BasicSparkLineCustomizationChart from "src/components/muicharts/sparklinecharts/BasicSparkLineCustomizationChart";


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "SparkLineCharts ",
    },
];

const SparkLineCharts = () => {
    return (
        <PageContainer title="SparkLineCharts" description="this is SparkLineCharts ">

            <Breadcrumb title="SparkLineCharts" items={BCrumb} />
            <Grid container spacing={3}>
                <BasicSparkLine />
                <AreaSparkLineChart />
                <BasicSparkLineCustomizationChart />
            </Grid>
        </PageContainer>
    );
};

export default SparkLineCharts;

===== src/views/pages/account-setting/AccountSetting.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import { Grid2 as Grid, Tabs, Tab, Box, CardContent, Divider } from '@mui/material';

// components
import AccountTab from '../../../components/pages/account-setting/AccountTab';
import { IconArticle, IconBell, IconLock, IconUserCircle } from '@tabler/icons-react';
import BlankCard from '../../../components/shared/BlankCard';
import NotificationTab from '../../../components/pages/account-setting/NotificationTab';
import BillsTab from '../../../components/pages/account-setting/BillsTab';
import SecurityTab from '../../../components/pages/account-setting/SecurityTab';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Account Setting',
  },
];

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box>{children}</Box>}
    </div>
  );
}

function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  };
}

const AccountSetting = () => {
  const [value, setValue] = React.useState(0);

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
  };

  return (
    (<PageContainer title="Account Setting" description="this is Account Setting page">
      {/* breadcrumb */}
      <Breadcrumb title="Account Setting" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid size={12}>
          <BlankCard>
            <Box sx={{ maxWidth: { xs: 320, sm: 480 } }}>
              <Tabs
                value={value}
                onChange={handleChange}
                variant="scrollable"
                scrollButtons="auto"
                aria-label="basic tabs example"
              >
                <Tab
                  iconPosition="start"
                  icon={<IconUserCircle size="22" />}
                  label="Account"
                  {...a11yProps(0)}
                />

                <Tab
                  iconPosition="start"
                  icon={<IconBell size="22" />}
                  label="Notifications"
                  {...a11yProps(1)}
                />
                <Tab
                  iconPosition="start"
                  icon={<IconArticle size="22" />}
                  label="Bills"
                  {...a11yProps(2)}
                />
                <Tab
                  iconPosition="start"
                  icon={<IconLock size="22" />}
                  label="Security"
                  {...a11yProps(3)}
                />
              </Tabs>
            </Box>
            <Divider />
            <CardContent>
              <TabPanel value={value} index={0}>
                <AccountTab />
              </TabPanel>
              <TabPanel value={value} index={1}>
                <NotificationTab />
              </TabPanel>
              <TabPanel value={value} index={2}>
                <BillsTab />
              </TabPanel>
              <TabPanel value={value} index={3}>
                <SecurityTab />
              </TabPanel>
            </CardContent>
          </BlankCard>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default AccountSetting;

===== src/views/pages/faq/Faq.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import Grid from '@mui/material/Grid2';

import Questions from '../../../components/pages/faq/Questions';
import StillQuestions from '../../../components/pages/faq/StillQuestions';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'FAQ',
  },
];

const Faq = () => {
  return (
    (<PageContainer title="Faq" description="this is Faq page">
      {/* breadcrumb */}
      <Breadcrumb title="FAQ" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid size={12}>
          <Questions />
          <StillQuestions />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default Faq;

===== src/views/pages/frontend-pages/About.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';
import Leadership from '../../../components/frontend-pages/shared/leadership';
import Reviews from '../../../components/frontend-pages/shared/reviews';
import Pricing from '../../../components/frontend-pages/shared/pricing';
import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/about/banner';
import Process from '../../../components/frontend-pages/about/process';
import KeyMetric from '../../../components/frontend-pages/about/key-metric';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';

const About = () => {
  return (
    <PageContainer title="About" description="this is About">
      <Header/>
      <HpHeader />
      <Banner />
      <Process />
      <KeyMetric />
      <Leadership />
      <Reviews />
      <Pricing />
      <C2a />
      <Footer />
      <ScrollToTop />
    </PageContainer>
  );
};

export default About;

===== src/views/pages/frontend-pages/Blog.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';
import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/blog/banner';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';
import BlogListing from 'src/components/apps/blog/BlogListing';
import { Container } from '@mui/system';

const BlogPage = () => {
  return (
    <>
      <PageContainer title="Blog" description="this is Blog">
        <Header/>
        <HpHeader />
        <Banner />
        <Container maxWidth="lg" sx={{ mt: 5 }}>
          <BlogListing />
        </Container>
        <C2a />
        <Footer />
        <ScrollToTop />
      </PageContainer>
    </>
  );
};

export default BlogPage;

===== src/views/pages/frontend-pages/BlogPost.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';
import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/blog/banner';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';
import BlogDetail from 'src/components/apps/blog/detail/BlogDetail';
import { Container } from '@mui/system';

const BlogPost = () => {
  return (
    <PageContainer title="Blog" description="this is Blog">
      <Header/>
      <HpHeader />
      <Banner />
      <Container maxWidth="lg" sx={{ mt: 5 }}>
        <BlogDetail />
      </Container>
      <C2a />
      <Footer />
      <ScrollToTop />
    </PageContainer>
  );
};

export default BlogPost;

===== src/views/pages/frontend-pages/Contact.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';

import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/contact/banner';
import Form from '../../../components/frontend-pages/contact/form';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';

const Contact = () => {
    return (
        <PageContainer title="Contact" description="this is Contact">

            <Header/>
            <HpHeader />
            <Banner />
            <Form />
            <C2a />
            <Footer />
            <ScrollToTop />
        </PageContainer>
    );
};

export default Contact;

===== src/views/pages/frontend-pages/Homepage.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Banner from 'src/components/frontend-pages/homepage/banner/Banner';
import Headerfrom 'src/components/frontend-pages/shared/header/Header';
import HpHeader from 'src/components/frontend-pages/shared/header/HpHeader';
import Features from 'src/components/frontend-pages/homepage/features/Features';
import DefendFocus from 'src/components/frontend-pages/homepage/defend-focus';
import Leadership from 'src/components/frontend-pages/shared/leadership';
import PowerfulDozens from 'src/components/frontend-pages/homepage/powerful-dozens';
import Reviews from 'src/components/frontend-pages/shared/reviews';
import ExceptionalFeature from 'src/components/frontend-pages/homepage/exceptional-feature';
import Pricing from 'src/components/frontend-pages/shared/pricing';
import FAQ from 'src/components/frontend-pages/homepage/faq';
import C2a from 'src/components/frontend-pages/shared/c2a';
import Footer from 'src/components/frontend-pages/shared/footer';
import ScrollToTop from 'src/components/frontend-pages/shared/scroll-to-top';

const HomePage = () => {
  return (
    <PageContainer title="Homepage" description="this is Homepage">
      <Header/>
      <HpHeader />
      <Banner />
      <Features />
      <DefendFocus />
      <Leadership />
      <PowerfulDozens />
      <Reviews />
      <ExceptionalFeature />
      <Pricing />
      <FAQ />
      <C2a />
      <Footer />
      <ScrollToTop />
    </PageContainer>
  );
};

export default HomePage;

===== src/views/pages/frontend-pages/Portfolio.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';
import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/portfolio/Banner';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';
import GalleryCard from '../../../components/apps/userprofile/gallery/GalleryCard';
import { Box, Container } from '@mui/material';

const PricingPage = () => {
  return (
    <PageContainer title="Portfolio" description="this is Portfolio">
      <Header/>
      <HpHeader />
      <Banner />
      <Box my={3}>
        <Container maxWidth="lg">
          <GalleryCard />
        </Container>
      </Box>
      <C2a />
      <Footer />
      <ScrollToTop />
    </PageContainer>
  );
};

export default PricingPage;

===== src/views/pages/frontend-pages/Pricing.tsx =====
import PageContainer from 'src/components/container/PageContainer';
import Headerfrom '../../../components/frontend-pages/shared/header/Header';
import HpHeader from '../../../components/frontend-pages/shared/header/HpHeader';
import Pricing from '../../../components/frontend-pages/shared/pricing';
import C2a from '../../../components/frontend-pages/shared/c2a';
import Footer from '../../../components/frontend-pages/shared/footer';
import Banner from '../../../components/frontend-pages/pricing/Banner';
import ScrollToTop from '../../../components/frontend-pages/shared/scroll-to-top';

const PricingPage = () => {
    return (
        <PageContainer title="Pricing" description="this is Pricing">

            <Header/>
            <HpHeader />
            <Banner />
            <Pricing />
            <C2a />
            <Footer />
            <ScrollToTop />
        </PageContainer>
    );
};

export default PricingPage;

===== src/views/pages/landingpage/Landingpage.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import PageContainer from 'src/components/container/PageContainer';

// components
import Banner from '../../../components/landingpage/banner/Banner';
import C2a from '../../../components/landingpage/c2a/C2a';
import C2a2 from '../../../components/landingpage/c2a/C2a2';
import DemoSlider from '../../../components/landingpage/demo-slider/DemoSlider';
import Features from '../../../components/landingpage/features/Features';
import Footer from '../../../components/landingpage/footer/Footer';
import Frameworks from '../../../components/landingpage/frameworks/Frameworks';
import LpHeader from '../../../components/landingpage/header/Header';
import Testimonial from '../../../components/landingpage/testimonial/Testimonial';

const Landingpage = () => {
  return (
    <PageContainer title="Landingpage" description="this is Landingpage">
      <LpHeader />
      <Banner />
      <DemoSlider />
      <Frameworks />
      <Testimonial />
      <Features />
      <C2a />
      <C2a2 />
      <Footer />
    </PageContainer>
  );
};

export default Landingpage;

===== src/views/pages/pricing/Pricing.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Grid2 as Grid,
  Typography,
  Box,
  List,
  ListItem,
  ListItemText,
  Button,
  CardContent,
  ListItemIcon,
  Chip,
  Switch,
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { styled } from '@mui/material/styles';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { IconCheck, IconX } from '@tabler/icons-react';
import BlankCard from '../../../components/shared/BlankCard';

import pck1 from 'src/assets/images/backgrounds/silver.png';
import pck2 from 'src/assets/images/backgrounds/bronze.png';
import pck3 from 'src/assets/images/backgrounds/gold.png';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Pricing',
  },
];

interface PricingPlan {
  id: number;
  package: string;
  plan?: string;
  monthlyplan: string | number;
  avatar: string;
  badge: boolean;
  btntext: string;
  rules: {
    limit: boolean;
    title: string;
  }[];
}

const pricing: PricingPlan[] = [
  {
    id: 1,
    package: 'Silver',
    plan: 'Free',
    monthlyplan: 'Free',
    avatar: pck1,
    badge: false,
    btntext: 'Choose Silver',
    rules: [
      {
        limit: true,
        title: '3 Members',
      },
      {
        limit: true,
        title: 'Single Device',
      },
      {
        limit: false,
        title: '50GB Storage',
      },
      {
        limit: false,
        title: 'Monthly Backups',
      },
      {
        limit: false,
        title: 'Permissions & workflows',
      },
    ],
  },
  {
    id: 2,
    package: 'Bronze',
    monthlyplan: 10.99,
    avatar: pck2,
    badge: true,
    btntext: 'Choose Bronze',
    rules: [
      {
        limit: true,
        title: '5 Members',
      },
      {
        limit: true,
        title: 'Multiple Device',
      },
      {
        limit: true,
        title: '80GB Storage',
      },
      {
        limit: false,
        title: 'Monthly Backups',
      },
      {
        limit: false,
        title: 'Permissions & workflows',
      },
    ],
  },
  {
    id: 3,
    package: 'Gold',
    monthlyplan: 22.99,
    avatar: pck3,
    badge: false,
    btntext: 'Choose Gold',
    rules: [
      {
        limit: true,
        title: 'Unlimited Members',
      },
      {
        limit: true,
        title: 'Multiple Device',
      },
      {
        limit: true,
        title: '150GB Storage',
      },
      {
        limit: true,
        title: 'Monthly Backups',
      },
      {
        limit: true,
        title: 'Permissions & workflows',
      },
    ],
  },
];

const Pricing = () => {
  const [show, setShow] = React.useState(false);

  const yearlyPrice = (a: any, b: number) => a * b;

  const theme = useTheme();
  const warninglight = theme.palette.warning.light;
  const warning = theme.palette.warning.main;

  const StyledChip = styled(Chip)({
    position: 'absolute',
    top: '15px',
    right: '30px',
    backgroundColor: warninglight,
    color: warning,
    textTransform: 'uppercase',
    fontSize: '11px',
  });

  return (
    (<PageContainer title="Pricing" description="this is Pricing page">
      {/* breadcrumb */}
      <Breadcrumb title="Pricing" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3} justifyContent="center" mt={3}>
        <Grid
          textAlign="center"
          size={{
            xs: 12,
            sm: 10,
            lg: 8
          }}>
          <Typography variant="h2">
            Flexible Plans Tailored to Fit Your Community's Unique Needs!
          </Typography>
          <Box display="flex" alignItems="center" mt={3} justifyContent="center">
            <Typography variant="subtitle1">Monthly</Typography>
            <Switch onChange={() => setShow(!show)} />
            <Typography variant="subtitle1">Yearly</Typography>
          </Box>
        </Grid>
      </Grid>
      <Grid container spacing={3} mt={5}>
        {pricing.map((price, i) => (
          <Grid
            key={i}
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                {price.badge ? <StyledChip label="Popular" size="small"></StyledChip> : null}

                <Typography
                  variant="subtitle1"
                  fontSize="12px"
                  mb={3}
                  color="textSecondary"
                  textTransform="uppercase"
                >
                  {price.package}
                </Typography>
                <img src={price.avatar} alt={price.avatar} width={90} />
                <Box my={4}>
                  {price.plan == 'Free' ? (
                    <Box fontSize="50px" mt={5} fontWeight="600">
                      {price.plan}
                    </Box>
                  ) : (
                    <Box display="flex">
                      <Typography variant="h6" mr="8px" mt="-12px">
                        $
                      </Typography>
                      {show ? (
                        <>
                          <Typography fontSize="48px" fontWeight="600">
                            {yearlyPrice(`${price.monthlyplan}`, 12)}
                          </Typography>
                          <Typography
                            fontSize="15px"
                            fontWeight={400}
                            ml={1}
                            color="textSecondary"
                            mt={1}
                          >
                            /yr
                          </Typography>
                        </>
                      ) : (
                        <>
                          <Typography fontSize="48px" fontWeight="600">
                            {price.monthlyplan}
                          </Typography>
                          <Typography
                            fontSize="15px"
                            fontWeight={400}
                            ml={1}
                            color="textSecondary"
                            mt={1}
                          >
                            /mo
                          </Typography>
                        </>
                      )}
                    </Box>
                  )}
                </Box>

                <Box mt={3}>
                  <List>
                    {price.rules.map((rule, i) => (
                      <Box key={i}>
                        {rule.limit ? (
                          <>
                            <ListItem disableGutters>
                              <ListItemIcon sx={{ color: 'primary.main', minWidth: '32px' }}>
                                <IconCheck width={18} />
                              </ListItemIcon>
                              <ListItemText>{rule.title}</ListItemText>
                            </ListItem>
                          </>
                        ) : (
                          <ListItem disableGutters sx={{ color: 'grey.400' }}>
                            <ListItemIcon sx={{ color: 'grey.400', minWidth: '32px' }}>
                              <IconX width={18} />
                            </ListItemIcon>
                            <ListItemText>{rule.title}</ListItemText>
                          </ListItem>
                        )}
                      </Box>
                    ))}
                  </List>
                </Box>

                <Button
                  sx={{ width: '100%', mt: 3 }}
                  variant="contained"
                  size="large"
                  color="primary"
                >
                  {price.btntext}
                </Button>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </PageContainer>)
  );
};

export default Pricing;

===== src/views/pages/rollbaseCASL/RollbaseCASL.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { defineAbility } from '@casl/ability';
import { Can } from '@casl/react';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { Box, Button, List, ListItem, Stack } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'CASL',
  },
];

interface actionType {
  action: string;
  subject: string;
}

interface PermissionType {
  CanEdit: actionType;
  CanDelete: actionType;
}

const permissions: PermissionType | any = {
  CanEdit: {
    action: 'Can-edit',
    subject: 'address',
  },
  CanDelete: {
    action: 'Can-delete',
    subject: 'address',
  },
};

interface userType {
  Admin: {
    permissions: Array<string>;
  };
  Manager: {
    permissions: Array<string>;
  };
  Subscriber: {
    permissions: Array<string>;
  };
}

const users: userType | any = {
  Admin: {
    permissions: ['CanEdit', 'CanDelete'],
  },
  Manager: {
    permissions: ['CanEdit'],
  },
  Subscriber: {
    permissions: [],
  },
};

interface addressType {
  city: string;
  street: string;
  type: string;
}

const addresses: addressType[] = [
  {
    city: 'New York',
    street: '5684 Max Summit',
    type: 'address',
  },
  {
    city: 'Manhatten York',
    street: '5684 Max Summit',
    type: 'address',
  },
  {
    city: 'Canada street York',
    street: '5684 Max Summit',
    type: 'address',
  },
  {
    city: 'Delhi street',
    street: '5684 Max Summit',
    type: 'address',
  },
  {
    city: 'UP Chawk',
    street: '5684 Max Summit',
    type: 'address',
  },
];

const RollbaseCASL = () => {
  const [userId, setUserId] = React.useState(Object.keys(users)[0]);
  const userPermissions = users[userId].permissions.map((id: number) => permissions[id]);

  const actions = [
    ...userPermissions.reduce((collection: any, { action }: { action: any }) => {
      collection.add(action);

      return collection;
    }, new Set()),
  ];

  const ability = defineAbility((can) => {
    userPermissions.forEach(({ action, subject }: { action: any; subject: any }) => {
      can(action, subject);
    });
  });

  return (
    <PageContainer title="Rollbase Access" description="this is Rollbase Access">
      {/* breadcrumb */}
      <Breadcrumb title="Pricing" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Permission Base Access with CASL">
        <>
          <Stack direction={'row'} gap={1}>
            {Object.entries(users).map(([id]) => (
              <Button
                key={id}
                variant={userId !== id ? 'outlined' : 'contained'}
                color="primary"
                onClick={() => setUserId(id)}
              >
                {id}
              </Button>
            ))}
          </Stack>
          <Box p={2} mt={2} bgcolor={'primary.light'}>
            {users[userId].permissions.map((permission: string) => (
              <Box key={permission}>{permission}</Box>
            ))}
          </Box>

          <List>
            {addresses.map(({ city, street, type }) => (
              <ListItem key={city}>
                <Stack direction={'row'} gap={1} alignItems="center">
                  {city}, {street}
                  {actions.map((action) => (
                    <Can I={action} a={type} ability={ability} key={action}>
                      <Button size="small">{action}</Button>
                    </Can>
                  ))}
                </Stack>
              </ListItem>
            ))}
          </List>
        </>
      </ParentCard>
    </PageContainer>
  );
};

export default RollbaseCASL;

===== src/views/react-tables/basic/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ReactBasicTables from 'src/components/react-tables/basic/page';


const BCrumb = [
    {
        to: '/',
        title: 'Home',
    },
    {
        title: ' React Basic Table',
    },
];


function page() {
    return (
        <>
            <PageContainer title="React Basic Table" description="this is React  Basic Table page">
                <Breadcrumb title="React Basic Table" items={BCrumb} />
                <div>
                    <ReactBasicTables />
                </div>
            </PageContainer>
        </>
    )
}

export default page

===== src/views/react-tables/columnvisibility/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ReactColumnVisibilityTable from 'src/components/react-tables/column-visiblity/page'


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "column visibility Table ",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React column visibility Table" description="this is React column visibility Table page">
                <Breadcrumb title="React column visibility Table" items={BCrumb} />
                <div>
                    <ReactColumnVisibilityTable />
                </div>
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/dense/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ReactDenseTable from 'src/components/react-tables/dense/page';


const BCrumb = [
  {
    to: "/",
    title: "Home",
  },
  {
    title: "Dense Table ",
  },
];
function page() {
  return (
    <>
      <PageContainer title="React Dense Table" description="this is React Dense Table page">

        <Breadcrumb title="Dense Table " items={BCrumb} />
        <div>
          <ReactDenseTable />
        </div>
      </PageContainer>
    </>
  );
}

export default page;

===== src/views/react-tables/drag-drop/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import Rowdragdrop from 'src/components/react-tables/drag-drop/Rowdragdrop';
import Columndragdrop from 'src/components/react-tables/drag-drop/Columndragdrop'
import Grid from '@mui/material/Grid2';


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Drag & Drop Table ",
    },
];

function page() {
    return (<>
        <PageContainer title="React Drag & Drop Table" description="this is React  Drag & Drop Table page">
            <Breadcrumb title="Drag & Drop Table " items={BCrumb} />
            <Grid container spacing={3}>
                <Grid sx={{ padding: 2 }} size={12}>
                    <Rowdragdrop />
                </Grid>
                <Grid sx={{ padding: 2 }} size={12}>
                    <Columndragdrop />
                </Grid>
            </Grid>
        </PageContainer>
    </>);
}

export default page;

===== src/views/react-tables/editable/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import Editable from "src/components/react-tables/editable/page";


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Editable Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Editable Table" description="this is React Editable Table page">
                <Breadcrumb title="Editable Table " items={BCrumb} />
                <Editable />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/empty/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import EmptyTable from "src/components/react-tables/empty/page";


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Empty Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Empty Table" description="this is React Empty Table page">
                <Breadcrumb title="Empty Table " items={BCrumb} />
                <EmptyTable />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/expanding/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ExpandingTable from "src/components/react-tables/expanding/page";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Expanding Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Expanding Table" description="this is React  Expanding Table page">
                <Breadcrumb title="Expanding Table " items={BCrumb} />
                <ExpandingTable />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/filtering/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import FilteringTable from "src/components/react-tables/filter/page";

const BCrumb = [
  {
    to: "/",
    title: "Home",
  },
  {
    title: "Filter Table",
  },
];
function page() {
  return (
    <>
      <PageContainer title="React Filter Table" description="this is React  Filter Table page">
        <Breadcrumb title="Filter Table " items={BCrumb} />
        <FilteringTable />
      </PageContainer>
    </>
  );
}

export default page;

===== src/views/react-tables/pagination/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import PaginationTable from "src/components/react-tables/pagination/page";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Pagination Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Pagination Table" description="this is React  Pagination Table page">
                <Breadcrumb title="Pagination Table " items={BCrumb} />
                <PaginationTable />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/row-selection/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import RowSelection from "src/components/react-tables/row-selection/page";


const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Row Selection Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Row Selection  Table" description="this is React Row Selection  Table page">
                <Breadcrumb title="Row Selection Table " items={BCrumb} />
                <RowSelection />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/react-tables/sorting/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import SortingTable from "src/components/react-tables/sorting/page";



const BCrumb = [
  {
    to: "/",
    title: "Home",
  },
  {
    title: "Sorting Table",
  },
];
function page() {
  return (
    <>
      <PageContainer title="React Sorting Table" description="this is React Sorting Table page">
        <Breadcrumb title="Sorting Table" items={BCrumb} />
        <SortingTable />
      </PageContainer>
    </>
  );
}

export default page;

===== src/views/react-tables/sticky/page.tsx =====
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import StickyTable from "src/components/react-tables/sticky/page";

const BCrumb = [
    {
        to: "/",
        title: "Home",
    },
    {
        title: "Sticky Table",
    },
];
function page() {
    return (
        <>
            <PageContainer title="React Sticky Table" description="this is React Sticky Table page">
                <Breadcrumb title="Sticky Table" items={BCrumb} />
                <StickyTable />
            </PageContainer>
        </>
    );
}

export default page;

===== src/views/spinner/Spinner.tsx =====
import { FC } from "react";
// import "./spinner.css";

const Spinner: FC = () => (
  <div className="fallback-spinner">
    <div className="loading component-loader">
      <div className="effect-1 effects" />
      <div className="effect-2 effects" />
      <div className="effect-3 effects" />
    </div>
  </div>
);
export default Spinner;

===== src/views/tables/BasicTable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Grid2 as Grid } from '@mui/material';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import Table2 from '../../components/tables/Table2';
import Table3 from '../../components/tables/Table3';
import Table1 from '../../components/tables/Table1';
import Table4 from '../../components/tables/Table4';
import Table5 from '../../components/tables/Table5';

import BasicTableCode from 'src/components/tables/code/BasicTableCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Basic Table',
  },
];

const BasicTable = () => (
  <PageContainer title="Basic Table" description="this is Basic Table page">
    {/* breadcrumb */}
    <Breadcrumb title="Basic Table" items={BCrumb} />
    {/* end breadcrumb */}
    <ParentCard title="Basic Table" codeModel={<BasicTableCode />}>
      <Grid container spacing={3}>
        <Grid size={12}>
          <Box>
            <Table5 />
          </Box>
        </Grid>
        <Grid size={12}>
          <Box>
            <Table2 />
          </Box>
        </Grid>
        <Grid size={12}>
          <Box>
            <Table3 />
          </Box>
        </Grid>
        <Grid size={12}>
          <Box>
            <Table1 />
          </Box>
        </Grid>
        <Grid size={12}>
          <Box>
            <Table4 />
          </Box>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);

export default BasicTable;

===== src/views/tables/CollapsibleTable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import {
  Typography,
  Box,
  Avatar,
  Chip,
  Paper,
  Collapse,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Stack,
} from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import BlankCard from 'src/components/shared/BlankCard';

import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';

import img1 from 'src/assets/images/products/s1.jpg';
import img2 from 'src/assets/images/products/s2.jpg';
import img3 from 'src/assets/images/products/s3.jpg';
import img4 from 'src/assets/images/products/s4.jpg';

function createData(
  imgsrc?: string,
  pname?: string,
  customer?: string,
  inventory?: boolean,
  price?: number,
  items?: string,
) {
  return {
    imgsrc,
    pname,
    customer,
    inventory,
    price,
    items,
    history: [
      { date: '2021-02-05', customerId: '15202410', price: 250, amount: 3 },
      { date: '2021-02-02', customerId: 'Anonymous', price: 600, amount: 1 },
    ],
  };
}

function Row(props: { row: ReturnType<typeof createData> }) {
  const { row } = props;
  const [open, setOpen] = React.useState(false);

  return (
    <>
      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>
        <TableCell>
          <IconButton aria-label="expand row" size="small" onClick={() => setOpen(!open)}>
            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </TableCell>
        <TableCell>
          <Stack direction="row" spacing={2} alignItems="center">
            <Avatar
              src={row.imgsrc}
              alt={row.imgsrc}
              sx={{
                width: 90,
                height: 70,
                borderRadius: '10px',
              }}
            />
            <Typography variant="h6" fontWeight="600">
              {row.pname}
            </Typography>
          </Stack>
        </TableCell>
        <TableCell>
          <Typography color="textSecondary" variant="h6">
            {row.customer}
          </Typography>
        </TableCell>
        <TableCell>
          <Chip
            size="small"
            label={row.inventory ? 'In Stock' : 'Out of Stock'}
            color={row.inventory ? 'success' : 'error'}
            sx={{ borderRadius: '6px' }}
          />
        </TableCell>
        <TableCell>
          <Typography color="textSecondary" variant="h6" fontWeight="400">
            ${row.price}
          </Typography>
        </TableCell>
        <TableCell>
          <Typography color="textSecondary" fontWeight="400">
            {row.items}
          </Typography>
        </TableCell>
      </TableRow>
      <TableRow>
        <TableCell sx={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
          <Collapse in={open} timeout="auto" unmountOnExit>
            <Box margin={1}>
              <Typography
                gutterBottom
                variant="h5"
                sx={{
                  mt: 2,
                  backgroundColor: (theme) => theme.palette.grey[100],
                  p: '5px 15px',
                  color: (theme) =>
                    `${
                      theme.palette.mode === 'dark'
                        ? theme.palette.grey.A200
                        : 'rgba(0, 0, 0, 0.87)'
                    }`,
                }}
              >
                History
              </Typography>
              <Table size="small" aria-label="purchases">
                <TableHead>
                  <TableRow>
                    <TableCell>
                      <Typography variant="h6">Date</Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="h6">Customer</Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="h6">Amount</Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="h6">Total price ($)</Typography>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {row.history.map((historyRow: any) => (
                    <TableRow key={historyRow.date}>
                      <TableCell>
                        <Typography color="textSecondary" fontWeight="400">
                          {historyRow.date}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography color="textSecondary" fontWeight="400">
                          {historyRow.customerId}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography color="textSecondary" fontWeight="400">
                          {historyRow.amount}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography fontWeight="600">
                          {Math.round(historyRow.amount * historyRow.price * 100) / 100}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </>
  );
}

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Collapsible Table',
  },
];

const rows = [
  createData(img1, 'Good butterscotch ice-cream', 'Sunil Joshi', true, 250, '2'),
  createData(img2, 'Supreme fresh tomato available', 'John Deo', false, 450, '1'),
  createData(img3, 'Red color candy from Gucci', 'Andrew McDownland', false, 150, '2'),
  createData(img4, 'Stylish night lamp for night', 'Christopher Jamil', true, 550, '6'),
];

const CollapsibleTable = () => (
  <PageContainer title="Collapsible Table" description="this is Collapsible Table page">
    {/* breadcrumb */}
    <Breadcrumb title="Collapsible Table" items={BCrumb} />
    {/* end breadcrumb */}
    <ParentCard title="Collapsible">
      <BlankCard>
        <TableContainer component={Paper}>
          <Table
            aria-label="collapsible table"
            sx={{
              whiteSpace: {
                xs: 'nowrap',
                sm: 'unset',
              },
            }}
          >
            <TableHead>
              <TableRow>
                <TableCell />
                <TableCell>
                  <Typography variant="h6">Product</Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6">Customer</Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6">Inventory</Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6">Price</Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="h6">Items</Typography>
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row) => (
                <Row key={row.pname} row={row} />
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </BlankCard>
    </ParentCard>
  </PageContainer>
);

export default CollapsibleTable;

===== src/views/tables/EnhanceTable.tsx =====
/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { alpha } from '@mui/material/styles';
import {
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
  TableSortLabel,
  Toolbar,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  Paper,
  IconButton,
  Tooltip,
  FormControlLabel,
  Typography,
  Avatar,
  AvatarGroup,
  Badge,
  Stack
} from '@mui/material';
import { visuallyHidden } from '@mui/utils';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomSwitch from 'src/components/forms/theme-elements/CustomSwitch';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import { IconTrash, IconFilter } from '@tabler/icons-react';
import { EnhancedTableData, EnTableType } from 'src/components/tables/tableData';
import BlankCard from '../../components/shared/BlankCard';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Enhanced Table',
  },
];

function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }
  if (b[orderBy] > a[orderBy]) {
    return 1;
  }

  return 0;
}
const rows: EnTableType[] = EnhancedTableData;

type Order = 'asc' | 'desc';

function getComparator<Key extends keyof any>(
  order: Order,
  orderBy: Key,
): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {
  return order === 'desc'
    ? (a, b) => descendingComparator(a, b, orderBy)
    : (a, b) => -descendingComparator(a, b, orderBy);
}

function stableSort<T>(array: any[], comparator: (a: T, b: T) => number) {
  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);
  stabilizedThis.sort((a, b) => {
    const order = comparator(a[0], b[0]);
    if (order !== 0) {
      return order;
    }

    return a[1] - b[1];
  });

  return stabilizedThis.map((el) => el[0]);
}

interface HeadCell {
  disablePadding: boolean;
  id: any;
  label: string;
  numeric: boolean;
}

const headCells: HeadCell[] = [
  {
    id: 'name',
    numeric: false,
    disablePadding: false,
    label: 'Team Lead',
  },
  {
    id: 'pname',
    numeric: false,
    disablePadding: false,
    label: 'Project Name',
  },
  {
    id: 'team',
    numeric: false,
    disablePadding: false,
    label: 'Team',
  },
  {
    id: 'status',
    numeric: false,
    disablePadding: false,
    label: 'Status',
  },
  {
    id: 'weeks',
    numeric: false,
    disablePadding: false,
    label: 'Weeks',
  },
  {
    id: 'budget',
    numeric: false,
    disablePadding: false,
    label: 'Budget',
  },
];

interface EnhancedTableProps {
  numSelected: number;
  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof []) => void;
  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;
  order: Order;
  orderBy: string;
  rowCount: number;
}

function EnhancedTableHead(props: EnhancedTableProps) {
  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;
  const createSortHandler = (property: keyof []) => (event: React.MouseEvent<unknown>) => {
    onRequestSort(event, property);
  };

  return (
    <TableHead>
      <TableRow>
        <TableCell padding="checkbox">
          <CustomCheckbox
            checked={rowCount > 0 && numSelected === rowCount}
            onChange={onSelectAllClick}
            tabIndex={-1}
            inputProps={{
              'aria-labelledby': 'select all desserts',
            }}
          />
        </TableCell>
        {headCells.map((headCell) => (
          <TableCell
            key={headCell.id}
            align={headCell.numeric ? 'right' : 'left'}
            padding={headCell.disablePadding ? 'none' : 'normal'}
            sortDirection={orderBy === headCell.id ? order : false}
          >
            <TableSortLabel
              active={orderBy === headCell.id}
              direction={orderBy === headCell.id ? order : 'asc'}
              onClick={createSortHandler(headCell.id)}
            >
              <Typography variant="subtitle1" fontWeight="500">
                {headCell.label}
              </Typography>
              {orderBy === headCell.id ? (
                <Box component="span" sx={visuallyHidden}>
                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}
                </Box>
              ) : null}
            </TableSortLabel>
          </TableCell>
        ))}
      </TableRow>
    </TableHead>
  );
}

interface EnhancedTableToolbarProps {
  numSelected: number;
}

function EnhancedTableToolbar(props: EnhancedTableToolbarProps) {
  const { numSelected } = props;

  return (
    <Toolbar
      sx={{
        pl: { sm: 2 },
        pr: { xs: 1, sm: 1 },
        ...(numSelected > 0 && {
          bgcolor: (theme) =>
            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),
        }),
      }}
    >
      {numSelected > 0 ? (
        <Typography sx={{ flex: '1 1 100%' }} color="inherit" variant="subtitle2" component="div">
          {numSelected} selected
        </Typography>
      ) : (
        <Typography sx={{ flex: '1 1 100%' }} variant="h6" id="tableTitle" component="div">
          Filter
        </Typography>
      )}

      {numSelected > 0 ? (
        <Tooltip title="Delete">
          <IconButton>
            <IconTrash width={18} />
          </IconButton>
        </Tooltip>
      ) : (
        <Tooltip title="Filter list">
          <IconButton>
            <IconFilter width={18} />
          </IconButton>
        </Tooltip>
      )}
    </Toolbar>
  );
}

const EnhanceTable = () => {
  const [order, setOrder] = React.useState<Order>('asc');
  const [orderBy, setOrderBy] = React.useState<any>('calories');
  const [selected, setSelected] = React.useState<readonly string[]>([]);
  const [page, setPage] = React.useState(0);
  const [dense, setDense] = React.useState(false);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
  const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof []) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.checked) {
      const newSelecteds = rows.map((n) => n.name);
      setSelected(newSelecteds);

      return;
    }
    setSelected([]);
  };
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected: readonly string[] = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(
        selected.slice(0, selectedIndex),
        selected.slice(selectedIndex + 1),
      );
    }

    setSelected(newSelected);
  };

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDense(event.target.checked);
  };

  const isSelected = (name: string) => selected.indexOf(name) !== -1;

  // Avoid a layout jump when reaching the last page with empty rows.
  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;

  return (
    <PageContainer title="Enhanced Table" description="this is Enhanced Table page">
      {/* breadcrumb */}
      <Breadcrumb title="Enhanced Table" items={BCrumb} />
      <ParentCard title="Enhanced Table">
        <BlankCard>
          <Box mb={2} sx={{ mb: 2 }}>
            <EnhancedTableToolbar numSelected={selected.length} />
            <TableContainer>
              <Table
                sx={{ minWidth: 750 }}
                aria-labelledby="tableTitle"
                size={dense ? 'small' : 'medium'}
              >
                <EnhancedTableHead
                  numSelected={selected.length}
                  order={order}
                  orderBy={orderBy}
                  onSelectAllClick={handleSelectAllClick}
                  onRequestSort={handleRequestSort}
                  rowCount={rows.length}
                />
                <TableBody>
                  {stableSort(rows, getComparator(order, orderBy))
                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                    .map((row: any, index) => {
                      const isItemSelected = isSelected(row.name);
                      const labelId = `enhanced-table-checkbox-${index}`;

                      return (
                        <TableRow
                          hover
                          onClick={(event) => handleClick(event, row.name)}
                          role="checkbox"
                          aria-checked={isItemSelected}
                          tabIndex={-1}
                          key={row.id}
                          selected={isItemSelected}
                        >
                          <TableCell padding="checkbox">
                            <CustomCheckbox
                              checked={isItemSelected}
                              inputProps={{
                                'aria-labelledby': labelId,
                              }}
                            />
                          </TableCell>
                          <TableCell>
                            <Stack spacing={2} direction="row">
                              <Avatar
                                alt="text"
                                src={row.imgsrc}
                                sx={{
                                  width: '35px',
                                  height: '35px',
                                }}
                              />
                              <Box>
                                <Typography variant="h6" fontWeight="600">
                                  {row.name}
                                </Typography>
                                <Typography color="textSecondary" variant="subtitle2">
                                  {row.email}
                                </Typography>
                              </Box>
                            </Stack>
                          </TableCell>
                          <TableCell>
                            <Typography color="textSecondary" variant="subtitle2" fontWeight="400">
                              {row.pname}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Stack direction="row">
                              <AvatarGroup>
                                {row.teams.map((team: any) => (
                                  <Avatar
                                    key={team.id}
                                    sx={{
                                      width: '35px',
                                      height: '35px',
                                      bgcolor: team.color,
                                    }}
                                  >
                                    {team.text}
                                  </Avatar>
                                ))}
                              </AvatarGroup>
                            </Stack>
                          </TableCell>
                          <TableCell>
                            <Stack spacing={1} direction="row" alignItems="center">
                              <Badge
                                color={
                                  row.status === 'Active'
                                    ? 'success'
                                    : row.status === 'Pending'
                                    ? 'warning'
                                    : row.status === 'Completed'
                                    ? 'primary'
                                    : row.status === 'Cancel'
                                    ? 'error'
                                    : 'secondary'
                                }
                                variant="dot"
                              ></Badge>
                              <Typography color="textSecondary" variant="body1">
                                {row.status}
                              </Typography>
                            </Stack>
                          </TableCell>
                          <TableCell>
                            <Typography color="textSecondary" variant="body1">
                              {row.weeks}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="h6">${row.budget}k</Typography>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  {emptyRows > 0 && (
                    <TableRow
                      style={{
                        height: (dense ? 33 : 53) * emptyRows,
                      }}
                    >
                      <TableCell colSpan={6} />
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            <TablePagination
              rowsPerPageOptions={[5, 10, 25]}
              component="div"
              count={rows.length}
              rowsPerPage={rowsPerPage}
              page={page}
              onPageChange={handleChangePage}
              onRowsPerPageChange={handleChangeRowsPerPage}
            />
          </Box>
          <Box p={2}>
            <FormControlLabel
              control={<CustomSwitch checked={dense} onChange={handleChangeDense} />}
              label="Dense padding"
            />
          </Box>
        </BlankCard>
      </ParentCard>
    </PageContainer>
  );
};

export default EnhanceTable;

===== src/views/tables/FixedHeaderTable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Typography,
  Box,
  Avatar,
  LinearProgress,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Stack
} from '@mui/material';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import img1 from 'src/assets/images/products/s1.jpg';
import img2 from 'src/assets/images/products/s2.jpg';
import img3 from 'src/assets/images/products/s3.jpg';
import img4 from 'src/assets/images/products/s4.jpg';
import ParentCard from 'src/components/shared/ParentCard';
import BlankCard from 'src/components/shared/BlankCard';
import { IconTrash } from '@tabler/icons-react';


interface columnType {
  id: string;
  label: string;
  minWidth: number;
}

interface rowType {
  id: number;
  imgsrc: string;
  name: string;
  tags: string;
  review: string;
  percent: number;
  earnings: string;
}

const columns: columnType[] = [
  { id: 'pname', label: 'Products', minWidth: 170 },
  { id: 'review', label: 'Review', minWidth: 100 },
  {
    id: 'earnings',
    label: 'Earnings',
    minWidth: 170,
  },
  {
    id: 'action',
    label: 'Action',
    minWidth: 170,
  },
];

const rows: rowType[] = [
  {
    id: 1,
    imgsrc: img1,
    name: 'Is it good butterscotch ice-cream?',
    tags: 'Ice-Cream, Milk, Powder',
    review: 'good',
    percent: 65,
    earnings: '546,000',
  },
  {
    id: 2,
    imgsrc: img2,
    name: 'Supreme fresh tomato available',
    tags: 'Market, Mall',
    review: 'excellent',
    percent: 98,
    earnings: '780,000',
  },
  {
    id: 3,
    imgsrc: img3,
    name: 'Red color candy from Gucci',
    tags: 'Chocolate, Yummy',
    review: 'average',
    percent: 46,
    earnings: '457,000',
  },
  {
    id: 4,
    imgsrc: img4,
    name: 'Stylish night lamp for night',
    tags: 'Elecric, Wire, Current',
    review: 'poor',
    percent: 23,
    earnings: '125,000',
  },
];

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Fixed Header Table',
  },
];

const FixedHeaderTable = () => {
  const Capitalize = (str:any) => str.charAt(0).toUpperCase() + str.slice(1);

  return (
    <PageContainer title="Fixed Header Table" description="this is Fixed Header Table page">
      {/* breadcrumb */}
      <Breadcrumb title="Fixed Header Table" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Fixed Header Table">
        <BlankCard>
          <TableContainer
            sx={{
              maxHeight: 440,
            }}
          >
            <Table stickyHeader aria-label="sticky table">
              <TableHead>
                <TableRow>
                  {columns.map((column) => (
                    <TableCell
                      key={column.id}
                      style={{ minWidth: column.minWidth }}
                    >
                      <Typography variant="h6" fontWeight="500">
                        {column.label}
                      </Typography>
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row) => {
                  return (
                    <TableRow hover key={row.id}>
                      <TableCell>
                        <Stack spacing={2} direction="row" alignItems="center">
                          <Avatar
                            src={row.imgsrc}
                            alt={row.imgsrc}
                            sx={{
                              borderRadius: '10px',
                              height: '70px',
                              width: '90px',
                            }}
                          />
                          <Box>
                            <Typography variant="h6">{row.name}</Typography>
                            <Typography color="textSecondary" variant="h6" mt={1} fontWeight="400">
                              {row.tags}
                            </Typography>
                          </Box>
                        </Stack>
                      </TableCell>
                      <TableCell>
                        <Stack spacing={1}>
                          <Typography
                            variant="subtitle2" fontWeight="500">
                            {Capitalize(row.review)}
                          </Typography>
                          <LinearProgress
                            value={row.percent}
                            variant="determinate" color={row.review === 'good' ? 'primary' : row.review === 'excellent' ? 'success' : row.review === 'average' ? 'warning' : row.review === 'poor' ? 'error' : 'secondary'}
                          />
                          <Typography
                            color="textSecondary"
                            variant="subtitle2"
                            fontWeight="400" whiteSpace="nowrap">
                            {row.percent}% sold
                          </Typography>
                        </Stack>

                      </TableCell>
                      <TableCell>
                        <Stack spacing={1}>
                          <Typography color="textSecondary" variant="subtitle2">
                            Earnings
                          </Typography>
                          <Typography variant="h6">${row.earnings}</Typography>
                        </Stack>
                      </TableCell>
                      <TableCell>
                        <IconButton>
                          <IconTrash width={18} />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        </BlankCard>

      </ParentCard>
    </PageContainer>
  );
};

export default FixedHeaderTable;

===== src/views/tables/PaginationTable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';

import { useTheme } from '@mui/material/styles';
import {
  Typography,
  TableHead,
  Avatar,
  Chip,
  Box,
  Table,
  TableBody,
  TableCell,
  TablePagination,
  TableRow,
  TableFooter,
  IconButton,
  TableContainer,
  Stack
} from '@mui/material';

import FirstPageIcon from '@mui/icons-material/FirstPage';
import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';
import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';
import LastPageIcon from '@mui/icons-material/LastPage';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import img5 from 'src/assets/images/profile/user-5.jpg';
import ParentCard from 'src/components/shared/ParentCard';
import BlankCard from '../../components/shared/BlankCard';

interface TablePaginationActionsProps {
  count: number;
  page: number;
  rowsPerPage: number;
  onPageChange: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;
}

function TablePaginationActions(props: TablePaginationActionsProps) {
  const theme = useTheme();
  const { count, page, rowsPerPage, onPageChange } = props;

  const handleFirstPageButtonClick = (event: any) => {
    onPageChange(event, 0);
  };

  const handleBackButtonClick = (event: any) => {
    onPageChange(event, page - 1);
  };

  const handleNextButtonClick = (event: any) => {
    onPageChange(event, page + 1);
  };

  const handleLastPageButtonClick = (event: any) => {
    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
  };

  return (
    <Box sx={{ flexShrink: 0, ml: 2.5 }}>
      <IconButton
        onClick={handleFirstPageButtonClick}
        disabled={page === 0}
        aria-label="first page"
      >
        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}
      </IconButton>
      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label="previous page">
        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}
      </IconButton>
      <IconButton
        onClick={handleNextButtonClick}
        disabled={page >= Math.ceil(count / rowsPerPage) - 1}
        aria-label="next page"
      >
        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}
      </IconButton>
      <IconButton
        onClick={handleLastPageButtonClick}
        disabled={page >= Math.ceil(count / rowsPerPage) - 1}
        aria-label="last page"
      >
        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}
      </IconButton>
    </Box>
  );
}


interface OrderType {
  orderno: string;
  items: string;
  imgsrc: any;
  customer: string;
  total: string;
  status: string;
  date: string;
}

const rows: OrderType[] = [
  {
    orderno: 'ORD - 0120145',
    items: '5',
    imgsrc: img1,
    customer: 'Sunil Joshi',
    total: '550,000',
    status: 'Completed',
    date: '10 Jun, 2021 09:51:40',
  },
  {
    orderno: 'ORD - 0120146',
    items: '1',
    imgsrc: img2,
    customer: 'John Deo',
    total: '45,000',
    status: 'Pending',
    date: '10 Jun, 2021 07:46:00',
  },
  {
    orderno: 'ORD - 0120460',
    items: '3',
    imgsrc: img3,
    customer: 'Mily Peter',
    total: '57,000',
    status: 'Cancel',
    date: '10 Jun, 2021 04:19:38',
  },
  {
    orderno: 'ORD - 0124060',
    items: '11',
    imgsrc: img4,
    customer: 'Andrew McDownland',
    total: '457,000',
    status: 'Completed',
    date: '10 Jun, 2021 04:12:29',
  },
  {
    orderno: 'ORD - 0124568',
    items: '4',
    imgsrc: img5,
    customer: 'Christopher Jamil',
    total: '120,000',
    status: 'Pending',
    date: '15 Apr, 2021 04:12:50',
  },
  {
    orderno: 'ORD - 0120146',
    items: '1',
    imgsrc: img2,
    customer: 'John Deo',
    total: '45,000',
    status: 'Pending',
    date: '10 Jun, 2021 07:46:00',
  },
  {
    orderno: 'ORD - 0120460',
    items: '3',
    imgsrc: img3,
    customer: 'Mily Peter',
    total: '57,000',
    status: 'Cancel',
    date: '10 Jun, 2021 04:19:38',
  },
  {
    orderno: 'ORD - 0124060',
    items: '11',
    imgsrc: img4,
    customer: 'Andrew McDownland',
    total: '457,000',
    status: 'Completed',
    date: '10 Jun, 2021 04:12:29',
  },
  {
    orderno: 'ORD - 0124568',
    items: '4',
    imgsrc: img5,
    customer: 'Christopher Jamil',
    total: '120,000',
    status: 'Pending',
    date: '15 Apr, 2021 04:12:50',
  },
  {
    orderno: 'ORD - 0120145',
    items: '5',
    imgsrc: img1,
    customer: 'Sunil Joshi',
    total: '550,000',
    status: 'Completed',
    date: '10 Jun, 2021 09:51:40',
  },
  {
    orderno: 'ORD - 0124060',
    items: '11',
    imgsrc: img4,
    customer: 'Andrew McDownland',
    total: '457,000',
    status: 'Completed',
    date: '10 Jun, 2021 04:12:29',
  },
  {
    orderno: 'ORD - 0124568',
    items: '4',
    imgsrc: img5,
    customer: 'Christopher Jamil',
    total: '120,000',
    status: 'Pending',
    date: '15 Apr, 2021 04:12:50',
  },
].sort((a, b) => (a.customer < b.customer ? -1 : 1));

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Pagination Table',
  },
];

const PaginationTable = () => {
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);

  // Avoid a layout jump when reaching the last page with empty rows.
  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChangePage = (event: any, newPage: any) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: any) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  return (
    <PageContainer title="Pagination Table" description="this is Pagination Table page">
      {/* breadcrumb */}
      <Breadcrumb title="Pagination Table" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Pagination Table">
        <BlankCard>
          <TableContainer>
            <Table
              aria-label="custom pagination table"
              sx={{
                whiteSpace: 'nowrap',
              }}
            >
              <TableHead>
                <TableRow>
                  <TableCell>
                    <Typography variant="h6">Order No.</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6">Customer</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6">Items</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6">Total</Typography>
                  </TableCell>

                  <TableCell>
                    <Typography variant="h6">Date</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="h6">Status</Typography>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {(rowsPerPage > 0
                  ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  : rows
                ).map((row, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <Typography variant="subtitle2">{row.orderno}</Typography>
                    </TableCell>
                    <TableCell>
                      <Stack direction="row" spacing={2} alignItems="center">
                        <Avatar src={row.imgsrc} alt={row.imgsrc} sx={{ width: 30, height: 30 }} />
                        <Typography variant="subtitle2" fontWeight="600">
                          {row.customer}
                        </Typography>
                      </Stack>
                    </TableCell>
                    <TableCell>
                      <Typography color="textSecondary" variant="h6" fontWeight="400">
                        {row.items}
                      </Typography>
                    </TableCell>

                    <TableCell>
                      <Typography color="textSecondary" variant="h6" fontWeight="400">
                        ${row.total}
                      </Typography>
                    </TableCell>

                    <TableCell>
                      <Typography variant="subtitle2">{row.date}</Typography>
                    </TableCell>
                    <TableCell>
                      <Chip
                        color={
                          row.status === 'Completed'
                            ? 'success'
                            : row.status === 'Pending'
                              ? 'warning'
                              : row.status === 'Cancel'
                                ? 'error'
                                : 'secondary'
                        }
                        sx={{
                          borderRadius: '6px',
                        }}
                        size="small"
                        label={row.status}
                      />
                    </TableCell>
                  </TableRow>
                ))}

                {emptyRows > 0 && (
                  <TableRow style={{ height: 53 * emptyRows }}>
                    <TableCell colSpan={6} />
                  </TableRow>
                )}
              </TableBody>
              <TableFooter>
                <TableRow>
                  <TablePagination
                    rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}
                    colSpan={6}
                    count={rows.length}
                    rowsPerPage={rowsPerPage}
                    page={page}
                    SelectProps={{
                      native: true,
                    }}
                    onPageChange={handleChangePage}
                    onRowsPerPageChange={handleChangeRowsPerPage}
                    ActionsComponent={TablePaginationActions}
                  />
                </TableRow>
              </TableFooter>
            </Table>
          </TableContainer>
        </BlankCard>
      </ParentCard>
    </PageContainer>
  );
};

export default PaginationTable;

===== src/views/tables/SearchTable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';

import { Box } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ProductTableList from 'src/components/apps/ecommerce/ProductTableList/ProductTableList';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Search Table',
  },
];

const SearchTable = () => {
  return (
    <PageContainer title="Search Table" description="this is Search Table page">
      {/* breadcrumb */}
      <Breadcrumb title="Search Table" items={BCrumb} />
      {/* end breadcrumb */}
      <Box>
        <ProductTableList />
      </Box>
    </PageContainer>
  );
};

export default SearchTable;

===== src/views/ui-components/MuiAccordion.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import {
  Grid2 as Grid,
  Accordion,
  AccordionSummary,
  Typography,
  AccordionDetails,
  Divider,
} from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import BasicCode from 'src/components/material-ui/accordion/code/BasicCode';
import ControlledCode from 'src/components/material-ui/accordion/code/ControlledCode';
import { IconChevronDown } from '@tabler/icons-react';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Accordion',
  },
];

const MuiAccordion = () => {
  // controlled accodion
  const [expanded, setExpanded] = React.useState<string | false>(false);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (panel: string) => (event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpanded(isExpanded ? panel : false);
  };

  return (
    <PageContainer title="Accordion" description="this is Accordion page">
      {/* breadcrumb */}
      <Breadcrumb title="Accordion" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Accordion">
        <Grid container spacing={3}>
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Basic" codeModel={<BasicCode />}>
              <Accordion>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel1a-content"
                  id="panel1a-header"
                >
                  <Typography variant="h6">Accordion 1</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
                    lacus ex, sit amet blandit leo lobortis eget.
                  </Typography>
                </AccordionDetails>
              </Accordion>
              <Divider />
              <Accordion>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel2a-content"
                  id="panel2a-header"
                >
                  <Typography variant="h6">Accordion 2</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
                    lacus ex, sit amet blandit leo lobortis eget.
                  </Typography>
                </AccordionDetails>
              </Accordion>
              <Divider />
              <Accordion disabled>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel3a-content"
                  id="panel3a-header"
                >
                  <Typography variant="h6">Disabled Accordion</Typography>
                </AccordionSummary>
              </Accordion>
            </ChildCard>
          </Grid>
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Controlled" codeModel={<ControlledCode />}>
              <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel1bh-content"
                  id="panel1bh-header"
                >
                  <Typography variant="h6" sx={{ width: '33%', flexShrink: 0 }}>
                    General settings
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    I am an accordion
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam
                    eget maximus est, id dignissim quam.
                  </Typography>
                </AccordionDetails>
              </Accordion>
              <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel2bh-content"
                  id="panel2bh-header"
                >
                  <Typography variant="h6" sx={{ width: '33%', flexShrink: 0 }}>
                    Users
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    You are currently not an owner
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Donec placerat, lectus sed mattis semper, neque lectus feugiat lectus, varius
                    pulvinar diam eros in elit. Pellentesque convallis laoreet laoreet.
                  </Typography>
                </AccordionDetails>
              </Accordion>
              <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel3bh-content"
                  id="panel3bh-header"
                >
                  <Typography variant="h6" sx={{ width: '33%', flexShrink: 0 }}>
                    Advanced settings
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    Filtering has been entirely disabled for whole web server
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit amet
                    egestas eros, vitae egestas augue. Duis vel est augue.
                  </Typography>
                </AccordionDetails>
              </Accordion>
              <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>
                <AccordionSummary
                  expandIcon={<IconChevronDown />}
                  aria-controls="panel4bh-content"
                  id="panel4bh-header"
                >
                  <Typography variant="h6" sx={{ width: '33%', flexShrink: 0 }}>
                    Personal data
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="subtitle1" color="textSecondary">
                    Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit amet
                    egestas eros, vitae egestas augue. Duis vel est augue.
                  </Typography>
                </AccordionDetails>
              </Accordion>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>
  );
};
export default MuiAccordion;

===== src/views/ui-components/MuiAlert.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { IconX } from "@tabler/icons-react";
import { Grid2 as Grid, Stack, Button, IconButton, CollapseTitle } from '@mui/material';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import FilledCode from "src/components/material-ui/alert/code/FilledCode";
import OutlinedCode from "src/components/material-ui/alert/code/OutlinedCode";
import DescriptionCode from "src/components/material-ui/alert/code/DescriptionCode";
import ActionCode from "src/components/material-ui/alert/code/ActionCode";
import TransitionCode from "src/components/material-ui/alert/code/TransitionCode";

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: '',
  },
];

const Ex= () => {
  const [open, setOpen] = React.useState(true);

  return (
    (<PageContainer title="" description="this ispage">
      {/* breadcrumb */}
      <Breadcrumb title="" items={BCrumb} />
      {/* end breadcrumb */}
      {/* ------------------------- row 1 ------------------------- */}
      <ParentCard title="">
        <Grid container spacing={3}>
          {/* --------------------------------------------------------------------------------- */}
          {/* Filled*/}
          {/* --------------------------------------------------------------------------------- */}
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Filled" codeModel={<FilledCode />}>
              <Stack spacing={1}>
                <variant="filled" severity="error">
                  This is an error alert — check it out!
                </>
                <variant="filled" severity="warning">
                  This is a warning alert — check it out!
                </>
                <variant="filled" severity="info">
                  This is an info alert — check it out!
                </>
                <variant="filled" severity="success">
                  This is a success alert — check it out!
                </>
              </Stack>
            </ChildCard>
          </Grid>
          {/* --------------------------------------------------------------------------------- */}
          {/* Outlined*/}
          {/* --------------------------------------------------------------------------------- */}
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Outlined" codeModel={<OutlinedCode />}>
              <Stack spacing={1}>
                <variant="outlined" severity="error">
                  This is an error alert — check it out!
                </>
                <variant="outlined" severity="warning">
                  This is a warning alert — check it out!
                </>
                <variant="outlined" severity="info">
                  This is an info alert — check it out!
                </>
                <variant="outlined" severity="success">
                  This is a success alert — check it out!
                </>
              </Stack>
            </ChildCard>
          </Grid>
          {/* --------------------------------------------------------------------------------- */}
          {/* Description*/}
          {/* --------------------------------------------------------------------------------- */}
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Description" codeModel={<DescriptionCode />}>
              <Stack spacing={1}>
                <variant="filled" severity="error">
                  <Title>Error</Title>
                  This is an error alert — <strong>check it out!</strong>
                </>
                <variant="filled" severity="warning">
                  <Title>Warning</Title>
                  This is a warning alert — <strong>check it out!</strong>
                </>
                <variant="filled" severity="info">
                  <Title>Info</Title>
                  This is an info alert — <strong>check it out!</strong>
                </>
                <variant="filled" severity="success">
                  <Title>Success</Title>
                  This is a success alert — <strong>check it out!</strong>
                </>
              </Stack>
            </ChildCard>
          </Grid>
          {/* --------------------------------------------------------------------------------- */}
          {/* Action*/}
          {/* --------------------------------------------------------------------------------- */}
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Action" codeModel={<ActionCode />}>
              <Stack spacing={1}>
                <variant="filled" severity="warning">
                  This is a success alert — check it out!
                </>
                <variant="filled"
                  severity="info"
                  action={
                    <Button color="inherit" size="small">
                      UNDO
                    </Button>
                  }
                >
                  This is a success alert — check it out!
                </>
              </Stack>
            </ChildCard>
          </Grid>
          {/* --------------------------------------------------------------------------------- */}
          {/* Transition*/}
          {/* --------------------------------------------------------------------------------- */}
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Transition" codeModel={<TransitionCode />}>
              <Stack spacing={1}>
                <Collapse in={open}>
                  <variant="filled"
                    severity="info"
                    sx={{ mb: 1 }}
                    action={
                      <IconButton
                        aria-label="close"
                        color="inherit"
                        size="small"
                        onClick={() => {
                          setOpen(false);
                        }}
                      >
                        <IconX width={20} />
                      </IconButton>
                    }
                  >
                    Close me!
                  </>
                </Collapse>
              </Stack>
              <Button
                disabled={open}
                variant="contained"
                onClick={() => {
                  setOpen(true);
                }}
              >
                Re-open
              </Button>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default Ex;

===== src/views/ui-components/MuiAvatar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Avatar, AvatarGroup, Badge, Stack } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import User1 from 'src/assets/images/profile/user-1.jpg';
import User2 from 'src/assets/images/profile/user-2.jpg';
import User3 from 'src/assets/images/profile/user-3.jpg';
import User4 from 'src/assets/images/profile/user-4.jpg';
import User5 from 'src/assets/images/profile/user-5.jpg';
import { IconMoodSmile } from '@tabler/icons-react';

import VariantCode from "src/components/material-ui/avatar/code/VariantCode";
import GroupedCode from "src/components/material-ui/avatar/code/GroupedCode";
import GroupedSizeCode from "src/components/material-ui/avatar/code/GroupedSizeCode";
import WithBadgeCode from "src/components/material-ui/avatar/code/WithBadgeCode";
import SizesCode from "src/components/material-ui/avatar/code/SizesCode";
import ImageAvatarsCode from "src/components/material-ui/avatar/code/ImageAvatarsCode";
import LetterAvatarsCode from "src/components/material-ui/avatar/code/LetterAvatarsCode";
import IconAvatarsCode from "src/components/material-ui/avatar/code/IconAvatarsCode";

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Avatar',
  },
];

const MuiAvatar = () => (
  <PageContainer title="Avatar" description="this is Avatar page">
    {/* breadcrumb */}
    <Breadcrumb title="Avatar" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Avatar">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Image avatars" codeModel={<ImageAvatarsCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <Avatar alt="Remy Sharp" src={User1} />
              <Avatar alt="Travis Howard" src={User2} />
              <Avatar alt="Cindy Baker" src={User3} />
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Letter avatars" codeModel={<LetterAvatarsCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <Avatar sx={{ bgcolor: 'primary.main' }}>A</Avatar>
              <Avatar sx={{ bgcolor: 'secondary.main' }}>B</Avatar>
              <Avatar sx={{ bgcolor: 'error.main' }}>C</Avatar>
              <Avatar sx={{ bgcolor: 'warning.main' }}>D</Avatar>
              <Avatar sx={{ bgcolor: 'success.main' }}>E</Avatar>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Icon avatars" codeModel={<IconAvatarsCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <Avatar sx={{ bgcolor: 'primary.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'secondary.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'error.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'warning.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'success.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Variant" codeModel={<VariantCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <Avatar sx={{ bgcolor: 'primary.main' }}>
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'primary.main' }} variant="square">
                <IconMoodSmile width={24} />
              </Avatar>
              <Avatar sx={{ bgcolor: 'primary.main' }} variant="rounded">
                <IconMoodSmile width={24} />
              </Avatar>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Grouped" codeModel={<GroupedCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <AvatarGroup max={4}>
                <Avatar alt="Remy Sharp" src={User1} />
                <Avatar alt="Travis Howard" src={User2} />
                <Avatar alt="Cindy Baker" src={User3} />
              </AvatarGroup>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Grouped Size" codeModel={<GroupedSizeCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <AvatarGroup max={4}>
                <Avatar alt="Remy Sharp" sx={{ width: 56, height: 56 }} src={User1} />
                <Avatar alt="Travis Howard" sx={{ width: 56, height: 56 }} src={User2} />
                <Avatar alt="Cindy Baker" sx={{ width: 56, height: 56 }} src={User3} />
              </AvatarGroup>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="With Badge" codeModel={<WithBadgeCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <AvatarGroup>
                <Badge
                  overlap="circular"
                  anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                  badgeContent={
                    <Avatar sx={{ width: 22, height: 22 }} alt="Remy Sharp" src={User1} />
                  }
                >
                  <Avatar alt="Travis Howard" src={User2} />
                </Badge>
              </AvatarGroup>
              {/* 2 */}
              <Badge
                overlap="circular"
                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                variant="dot"
                color="success"
              >
                <Avatar alt="Remy Sharp" src={User3} />
              </Badge>
              {/* 3 */}
              <Badge
                overlap="circular"
                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                variant="dot"
                color="warning"
              >
                <Avatar alt="Remy Sharp" src={User4} />
              </Badge>
              {/* 4 */}
              <Badge
                overlap="circular"
                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                variant="dot"
                color="error"
              >
                <Avatar alt="Remy Sharp" src={User5} />
              </Badge>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 8,
            sm: 6
          }}>
          <ChildCard title="Sizes" codeModel={<SizesCode />}>
            <Stack direction="row" spacing={1} justifyContent="center">
              <Avatar alt="Remy Sharp" src={User1} sx={{ width: 24, height: 24 }} />
              <Avatar alt="Remy Sharp" src={User1} sx={{ width: 32, height: 32 }} />
              <Avatar alt="Remy Sharp" src={User1} />
              <Avatar alt="Remy Sharp" src={User1} sx={{ width: 50, height: 50 }} />
              <Avatar alt="Remy Sharp" src={User1} sx={{ width: 60, height: 60 }} />
              <Avatar alt="Remy Sharp" src={User1} sx={{ width: 65, height: 65 }} />
            </Stack>
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiAvatar;

===== src/views/ui-components/MuiChip.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Avatar, Chip, Grid2 as Grid } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import InlineItemCard from "src/components/shared/InlineItemCard";
import User1 from "src/assets/images/profile/user-1.jpg"
import User2 from "src/assets/images/profile/user-2.jpg"
import User3 from "src/assets/images/profile/user-5.jpg"

import FilledCode from 'src/components/material-ui/chip/code/FilledCode';
import OutlinedCode from 'src/components/material-ui/chip/code/OutlinedCode';
import CustomIconCode from 'src/components/material-ui/chip/code/CustomIconCode';
import CustomOutlinedIcon from 'src/components/material-ui/chip/code/CustomOutlinedIcon';
import DisabledCode from 'src/components/material-ui/chip/code/DisabledCode';
import SizesCode from 'src/components/material-ui/chip/code/SizesCode';

import { IconCheck, IconChecks, IconMoodHappy } from '@tabler/icons-react';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Chip',
  },
];

const MuiChip = () => {
  const handleDelete = () => {
    };

  return (
    (<PageContainer title="Chip" description="this is Chip page">
      {/* breadcrumb */}
      <Breadcrumb title="Chip" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Accordion">
        <Grid container spacing={3}>
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Filled" codeModel={<FilledCode />}>
              <InlineItemCard>
                <Chip avatar={<Avatar>M</Avatar>} label="Default Filled" />
                <Chip avatar={<Avatar>M</Avatar>} label="Default Deletable" onDelete={handleDelete} />
                <Chip avatar={<Avatar alt="Natacha" src={User1} />} label="Primary Filled" color="primary" />
                <Chip avatar={<Avatar alt="Natacha" src={User1} />} label="Primary Deletable" color="primary" onDelete={handleDelete} />
                <Chip icon={<IconMoodHappy />} label="Secondary Filled" color="secondary" />
                <Chip icon={<IconMoodHappy />} label="Secondary Deletable" color="secondary" onDelete={handleDelete} />
                <Chip avatar={<Avatar alt="Natacha" src={User2} />} label="Default Filled" color="success" />
                <Chip avatar={<Avatar alt="Natacha" src={User2} />} label="Default Deletable" color="success" onDelete={handleDelete} />
                <Chip icon={<IconMoodHappy />} label="Default Filled" color="warning" />
                <Chip icon={<IconMoodHappy />} label="Default Deletable" color="warning" onDelete={handleDelete} />
                <Chip avatar={<Avatar alt="Natacha" src={User3} />} label="Default Filled" color="error" />
                <Chip avatar={<Avatar alt="Natacha" src={User3} />} label="Default Deletable" color="error" onDelete={handleDelete} />
              </InlineItemCard>
            </ChildCard>
          </Grid>
          <Grid display="flex" alignItems="stretch" size={12}>
            <ChildCard title="Outlined" codeModel={<OutlinedCode />}>
              <InlineItemCard>
                <Chip variant="outlined" avatar={<Avatar>M</Avatar>} label="Default Filled" />
                <Chip variant="outlined" avatar={<Avatar>M</Avatar>} label="Default Deletable" onDelete={handleDelete} />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User1} />} label="Default Filled" color="primary" />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User1} />} label="Default Deletable" color="primary" onDelete={handleDelete} />
                <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Filled" color="secondary" />
                <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Deletable" color="secondary" onDelete={handleDelete} />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User2} />} label="Default Filled" color="success" />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User2} />} label="Default Deletable" color="success" onDelete={handleDelete} />
                <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Filled" color="warning" />
                <Chip variant="outlined" icon={<IconMoodHappy />} label="Default Deletable" color="warning" onDelete={handleDelete} />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User3} />} label="Default Filled" color="error" />
                <Chip variant="outlined" avatar={<Avatar alt="Natacha" src={User3} />} label="Default Deletable" color="error" onDelete={handleDelete} />
              </InlineItemCard>
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Custom Icon" codeModel={<CustomIconCode />}>
              <InlineItemCard>
                <Chip
                  label="Custom Icon" color="primary" avatar={<Avatar >M</Avatar>}
                  onDelete={handleDelete}
                  deleteIcon={<IconCheck width={20} />}
                />
                <Chip
                  label="Custom Icon" color="secondary" avatar={<Avatar >S</Avatar>}
                  onDelete={handleDelete}
                  deleteIcon={<IconChecks width={20} />}
                />
              </InlineItemCard>
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Custom outlined Icon" codeModel={<CustomOutlinedIcon />}>
              <InlineItemCard>
                <Chip
                  label="Custom Icon" variant="outlined" color="primary" avatar={<Avatar >M</Avatar>}
                  onDelete={handleDelete}
                  deleteIcon={<IconCheck width={20} />}
                />
                <Chip
                  label="Custom Icon" variant="outlined" color="secondary" avatar={<Avatar >S</Avatar>}
                  onDelete={handleDelete}
                  deleteIcon={<IconChecks width={20} />}
                />
              </InlineItemCard>
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Disabled" codeModel={<DisabledCode />}>
              <InlineItemCard>
                <Chip
                  label="Custom Icon" disabled avatar={<Avatar >M</Avatar>}
                  onDelete={handleDelete}
                />
                <Chip
                  label="Custom Icon" color="primary" disabled avatar={<Avatar >S</Avatar>}
                  onDelete={handleDelete}
                />
              </InlineItemCard>
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Sizes" codeModel={<SizesCode />}>
              <InlineItemCard>
                <Chip label="Small" size="small" color="primary" />
                <Chip label="Normal" color="primary" />
              </InlineItemCard>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
}
export default MuiChip;

===== src/views/ui-components/MuiDialog.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import SimpleDialog from 'src/components/material-ui/dialog/SimpleDialog';
importDialog from 'src/components/material-ui/dialog/Dialog';
import TransitionDialog from 'src/components/material-ui/dialog/TransitionDialog';
import FormDialog from 'src/components/material-ui/dialog/FormDialog';
import FullscreenDialog from 'src/components/material-ui/dialog/FullscreenDialog';
import MaxWidthDialog from 'src/components/material-ui/dialog/MaxWidthDialog';
import ScrollContentDialog from 'src/components/material-ui/dialog/ScrollContentDialog';
import ResponsiveDialog from 'src/components/material-ui/dialog/ResponsiveDialog';

import SimpleCode from 'src/components/material-ui/dialog/code/SimpleCode';
importCode from 'src/components/material-ui/dialog/code/Code';
import TransitionCode from 'src/components/material-ui/dialog/code/TransitionCode';
import FormCode from 'src/components/material-ui/dialog/code/FormCode';
import FullScreenCode from 'src/components/material-ui/dialog/code/FullScreenCode';
import MaxWidthCode from 'src/components/material-ui/dialog/code/MaxWidthCode';
import ScrollingContentCode from 'src/components/material-ui/dialog/code/ScrollingContentCode';
import ResponsiveFullscreenCode from 'src/components/material-ui/dialog/code/ResponsiveFullscreenCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Dialog',
  },
];

const MuiDialog = () => (
  <PageContainer title="Dialog" description="this is Dialog page">
    {/* breadcrumb */}
    <Breadcrumb title="Dialog" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Dialog">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Simple" codeModel={<SimpleCode />}>
            <SimpleDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="" codeModel={<Code />}>
            <Dialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Transition" codeModel={<TransitionCode />}>
            <TransitionDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Form" codeModel={<FormCode />}>
            <FormDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Full screen" codeModel={<FullScreenCode />}>
            <FullscreenDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Max width" codeModel={<MaxWidthCode />}>
            <MaxWidthDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Scrolling Content" codeModel={<ScrollingContentCode />}>
            <ScrollContentDialog />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Responsive Fullscreen" codeModel={<ResponsiveFullscreenCode />}>
            <ResponsiveDialog />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiDialog;

===== src/views/ui-components/MuiList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import SimpleList from 'src/components/material-ui/lists/SimpleList';
import NestedList from 'src/components/material-ui/lists/NestedList';
import FolderList from 'src/components/material-ui/lists/FolderList';
import SelectedList from 'src/components/material-ui/lists/SelectedList';
import ControlsList from 'src/components/material-ui/lists/ControlsList';
import SwitchList from 'src/components/material-ui/lists/SwitchList';

import SimpleListCode from 'src/components/material-ui/lists/code/SimpleListCode';
import NestedListCode from 'src/components/material-ui/lists/code/NestedListCode';
import FolderListCode from 'src/components/material-ui/lists/code/FolderListCode';
import SelectedListCode from 'src/components/material-ui/lists/code/SelectedListCode';
import ControlsListCode from 'src/components/material-ui/lists/code/ControlsListCode';
import SwitchListCode from 'src/components/material-ui/lists/code/SwitchListCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'List',
  },
];

const MuiList = () => (
  <PageContainer title="List" description="this is List page">
    {/* breadcrumb */}
    <Breadcrumb title="List" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="List">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Simple" codeModel={<SimpleListCode />}>
            <SimpleList />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Nested" codeModel={<NestedListCode />}>
            <NestedList />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Folder" codeModel={<FolderListCode />}>
            <FolderList />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Selected" codeModel={<SelectedListCode />}>
            <SelectedList />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Controls" codeModel={<ControlsListCode />}>
            <ControlsList />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Switch" codeModel={<SwitchListCode />}>
            <SwitchList />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiList;

===== src/views/ui-components/MuiPopover.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import ClickPopover from 'src/components/material-ui/popover/ClickPopover';
import HoverPopover from 'src/components/material-ui/popover/HoverPopover';
import ClickPopoverCode from 'src/components/material-ui/popover/code/ClickPopoverCode';
import HoverPopoverCode from 'src/components/material-ui/popover/code/HoverPopoverCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Popover',
  },
];

const MuiPopover = () => {
  return (
    (<PageContainer title="Popover" description="this is Popover page">
      {/* breadcrumb */}
      <Breadcrumb title="Popover" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Popover">
        <Grid container spacing={3}>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Click" codeModel={<ClickPopoverCode />}>
              <ClickPopover />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Hover" codeModel={<HoverPopoverCode />}>
              <HoverPopover />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
}
export default MuiPopover;

===== src/views/ui-components/MuiRating.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { Grid2 as Grid, Rating, Box, Stack } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import { IconContainerProps } from '@mui/material/Rating';
import { IconStar } from '@tabler/icons-react';
import { styled } from '@mui/material/styles';
import FavoriteIcon from '@mui/icons-material/Favorite';
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied';
import SentimentDissatisfiedIcon from '@mui/icons-material/SentimentDissatisfied';
import SentimentSatisfiedIcon from '@mui/icons-material/SentimentSatisfied';
import SentimentSatisfiedAltIcon from '@mui/icons-material/SentimentSatisfiedAltOutlined';
import SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Rating',
  },
];
const labels: { [index: string]: string } = {
  0.5: 'Useless',
  1: 'Useless+',
  1.5: 'Poor',
  2: 'Poor+',
  2.5: 'Ok',
  3: 'Ok+',
  3.5: 'Good',
  4: 'Good+',
  4.5: 'Excellent',
  5: 'Excellent+',
};
function getLabelText(value: number) {
  return `${value} Star${value !== 1 ? 's' : ''}, ${labels[value]}`;
}
const StyledRating = styled(Rating)({
  '& .MuiRating-iconFilled': {
    color: '#ff6d75',
  },
  '& .MuiRating-iconHover': {
    color: '#ff3d47',
  },
});
const RadioRating = styled(Rating)(({ theme }) => ({
  '& .MuiRating-iconEmpty .MuiSvgIcon-root': {
    color: theme.palette.action.disabled,
  },
}));
const customIcons: {
  [index: string]: {
    icon: React.ReactElement;
    label: string;
  };
} = {
  1: {
    icon: <SentimentVeryDissatisfiedIcon color="error" />,
    label: 'Very Dissatisfied',
  },
  2: {
    icon: <SentimentDissatisfiedIcon color="error" />,
    label: 'Dissatisfied',
  },
  3: {
    icon: <SentimentSatisfiedIcon color="warning" />,
    label: 'Neutral',
  },
  4: {
    icon: <SentimentSatisfiedAltIcon color="success" />,
    label: 'Satisfied',
  },
  5: {
    icon: <SentimentVerySatisfiedIcon color="success" />,
    label: 'Very Satisfied',
  },
};
function IconContainer(props: IconContainerProps) {
  const { value, ...other } = props;

  return <span {...other}>{customIcons[value].icon}</span>;
}

const MuiRating = () => {
  const [value, setValue] = React.useState<number | null>(2);
  const [hover, setHover] = React.useState(-1);

  return (
    (<PageContainer title="Rating" description="this is Rating page">
      {/* breadcrumb */}
      <Breadcrumb title="Rating" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Rating">
        <Grid container spacing={3}>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Controlled">
              <Rating
                name="simple-controlled"
                value={value}
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                onChange={(event, newValue) => {
                  setValue(newValue);
                }}
              />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Read Only">
              <Rating name="read-only" value={value} readOnly />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Disabled">
              <Rating name="disabled" value={value} disabled />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="No Rating">
              <Rating name="no-value" value={null} />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Rating precision">
              <Rating name="half-rating" defaultValue={2.5} precision={0.5} />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Hover feedback">
              <Stack direction="row" spacing={2} alignItems="center">
                <Rating
                  name="hover-feedback"
                  value={value}
                  precision={0.5}
                  getLabelText={getLabelText}
                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                  // @ts-ignore
                  onChange={(event, newValue) => {
                    setValue(newValue);
                  }}
                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                  // @ts-ignore
                  onChangeActive={(event, newHover) => {
                    setHover(newHover);
                  }}
                  emptyIcon={<IconStar width={20} style={{ opacity: 0.55 }} fontSize="inherit" />}
                />
                {value !== null && <Box>{labels[hover !== -1 ? hover : value]}</Box>}
              </Stack>
            </ChildCard>
          </Grid>

          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Custom Icon Set">
              <Stack spacing={2}>
                <StyledRating
                  name="customized-color"
                  defaultValue={2}
                  getLabelText={(value) => `${value} Heart${value !== 1 ? 's' : ''}`}
                  precision={0.5}
                  icon={<FavoriteIcon fontSize="inherit" />}
                  emptyIcon={<FavoriteBorderIcon fontSize="inherit" />}
                />
              </Stack>
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="10 Stars">
              <Rating name="customized-10" defaultValue={2} max={10} />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Radio Group">
              <RadioRating
                name="highlight-selected-only"
                defaultValue={2}
                IconContainerComponent={IconContainer}
                getLabelText={(value: number) => customIcons[value].label}
                highlightSelectedOnly
              />
            </ChildCard>
          </Grid>
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Sizes">
              <Stack spacing={2}>
                <Rating name="size-small" defaultValue={2} size="small" />
                <Rating name="size-medium" defaultValue={2} />
                <Rating name="size-large" defaultValue={2} size="large" />
              </Stack>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};
export default MuiRating;

===== src/views/ui-components/MuiTabs.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { Grid2 as Grid, Box, Divider } from '@mui/material';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import TextCode from 'src/components/material-ui/tabs/code/TextCode';
import IconCode from 'src/components/material-ui/tabs/code/IconCode';
import IconWithLabelCode from 'src/components/material-ui/tabs/code/IconWithLabelCode';
import IconBottomCode from 'src/components/material-ui/tabs/code/IconBottomCode';
import IconLeftCode from 'src/components/material-ui/tabs/code/IconLeftCode';
import IconRightCode from 'src/components/material-ui/tabs/code/IconRightCode';
import ScrollableCode from 'src/components/material-ui/tabs/code/ScrollableCode';
import VerticalCode from 'src/components/material-ui/tabs/code/VerticalCode';

import { IconHeart, IconPhone, IconUser } from "@tabler/icons-react";

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Tabs',
  },
];

interface TabType {
  value: string;
  icon: any;
  label: string;
  disabled?: boolean;
}

const COMMON_TAB: TabType[] = [
  { value: '1', icon: <IconPhone width={20} height={20} />, label: 'Item One', disabled: false },
  { value: '2', icon: <IconHeart width={20} height={20} />, label: 'Item Two', disabled: false },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item Three', disabled: true }
];

const SCROLLABLE_TAB: TabType[] = [
  { value: '1', icon: <IconUser width={20} height={20} />, label: 'Item 1' },
  { value: '2', icon: <IconUser width={20} height={20} />, label: 'Item 2' },
  { value: '3', icon: <IconUser width={20} height={20} />, label: 'Item 3' },
  { value: '4', icon: <IconUser width={20} height={20} />, label: 'Item 4' },
  { value: '5', icon: <IconUser width={20} height={20} />, label: 'Item 5' },
  { value: '6', icon: <IconUser width={20} height={20} />, label: 'Item 6' },
  { value: '7', icon: <IconUser width={20} height={20} />, label: 'Item 7' }
];

const MuiTabs = () => {
  const [value, setValue] = React.useState('1');
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  return (
    (<PageContainer title="Tabs" description="this is Tabs page">
      {/* breadcrumb */}
      <Breadcrumb title="Tabs" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Tabs">
        <Grid container spacing={3}>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Text */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Text" codeModel={<TextCode />}>
              <TabContext value={value} >
                <Box>
                  <TabList onChange={handleChange} aria-label="lab API tabs example">
                    {COMMON_TAB.map((tab, index) => (
                      <Tab key={tab.value} label={tab.label} value={String(index + 1)} />
                    ))}
                  </TabList>
                </Box>
                <Divider />
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel, index) => (
                    <TabPanel key={panel.value} value={String(index + 1)}>
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>

              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Icon */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Icon" codeModel={<IconCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
                  {COMMON_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} value={tab.value} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Icon with Label */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Icon with Label" codeModel={<IconWithLabelCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
                  {COMMON_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} label={tab.label} value={tab.value} disabled={tab.disabled} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Icon Bottom */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Icon Bottom" codeModel={<IconBottomCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
                  {COMMON_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="bottom" value={tab.value} disabled={tab.disabled} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Icon Left */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Icon Left" codeModel={<IconLeftCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
                  {COMMON_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="start" value={tab.value} disabled={tab.disabled} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Icon Right */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Icon Right" codeModel={<IconRightCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example">
                  {COMMON_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="end" value={tab.value} disabled={tab.disabled} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {COMMON_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Scrollable  */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Scrollable" codeModel={<ScrollableCode />}>
              <TabContext value={value}>
                <Tabs value={value} onChange={handleChange} aria-label="icon tabs example" variant="scrollable" scrollButtons="auto">
                  {SCROLLABLE_TAB.map((tab) => (
                    <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="top" value={tab.value} />
                  ))}

                </Tabs>
                <Box bgcolor="grey.200" mt={2}>
                  {SCROLLABLE_TAB.map((panel) => (
                    <TabPanel key={panel.value} value={panel.value} >
                      {panel.label}
                    </TabPanel>
                  ))}
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
          {/* ---------------------------------------------------------------------------------- */}
          {/* Vertical */}
          {/* ---------------------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              sm: 6
            }}>
            <ChildCard title="Vertical" codeModel={<VerticalCode />}>
              <TabContext value={value}>
                <Box width="100%" gap={2} display="flex" flexGrow={1}
                  sx={{ height: 224 }}
                >
                  <Tabs value={value} orientation="vertical" onChange={handleChange} variant="scrollable" scrollButtons="auto">
                    {SCROLLABLE_TAB.map((tab) => (
                      <Tab key={tab.value} icon={tab.icon} label={tab.label} iconPosition="top" value={tab.value} />
                    ))}

                  </Tabs>
                  <Box bgcolor="grey.200" width="100%">
                    {SCROLLABLE_TAB.map((panel) => (
                      <TabPanel key={panel.value} value={panel.value} >
                        {panel.label}
                      </TabPanel>
                    ))}
                  </Box>
                </Box>
              </TabContext>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
}
export default MuiTabs;

===== src/views/ui-components/MuiTooltip.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { styled } from '@mui/material/styles';
import { Grid2 as Grid, IconButton, Button, Stack, Fab, Box } from '@mui/material';
import Tooltip, { TooltipProps, tooltipClasses } from '@mui/material/Tooltip';
import Fade from '@mui/material/Fade';
import Zoom from '@mui/material/Zoom';
import InlineItemCard from "src/components/shared/InlineItemCard";

// common component
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

// CodeModels
import SimpleTooltipCode from 'src/components/material-ui/tooltip/code/SimpleTooltipCode';
import ArrowTooltipCode from 'src/components/material-ui/tooltip/code/ArrowTooltipCode';
import VariableWidthCode from 'src/components/material-ui/tooltip/code/VariableWidthCode';
import TransitionsCode from 'src/components/material-ui/tooltip/code/TransitionsCode';
import PositionsTooltipCode from 'src/components/material-ui/tooltip/code/PositionsTooltipCode';

import { IconPlus, IconTrash } from '@tabler/icons-react';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Tooltip',
  },
];

// variable width
const CustomWidthTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} classes={{ popper: className }} />
))({
  [`& .${tooltipClasses.tooltip}`]: {
    maxWidth: 500,
  },
});

const NoMaxWidthTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} classes={{ popper: className }} />
))({
  [`& .${tooltipClasses.tooltip}`]: {
    maxWidth: 'none',
  },
});

const longText = `
Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus.
Praesent non nunc mollis, fermentum neque at, semper arcu.
Nullam eget est sed sem iaculis gravida eget vitae justo.
`;

const MuiTooltip = () => (
  <PageContainer title="Tooltip" description="this is Tooltip page">
    {/* breadcrumb */}
    <Breadcrumb title="Tooltip" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Tooltip">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Simple" codeModel={<SimpleTooltipCode />}>
            <Stack direction="row" spacing={2} alignItems="center">
              <Tooltip title="Delete">
                <IconButton>
                  <IconTrash width={20} height={20} />
                </IconButton>
              </Tooltip>
              <Tooltip title="Add">
                <Button variant="outlined" color="primary">
                  Button
                </Button>
              </Tooltip>
              <Tooltip title="Delete">
                <IconButton color="error">
                  <IconTrash width={20} height={20} />
                </IconButton>
              </Tooltip>
              <Tooltip title="Add">
                <Fab color="secondary">
                  <IconPlus width={20} height={20} />
                </Fab>
              </Tooltip>
            </Stack>
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Arrow" codeModel={<ArrowTooltipCode />}>
            <Box textAlign="center">
              <Tooltip title="Delete" arrow>
                <Fab color="secondary">
                  <IconPlus width={20} height={20} />
                </Fab>
              </Tooltip>
            </Box>

          </ChildCard>
        </Grid>

        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Variable Width" codeModel={<VariableWidthCode />}>
            <Stack spacing={1} direction="row">
              <Tooltip title={longText}>
                <Button variant="outlined">Default Width [300px]</Button>
              </Tooltip>
              <CustomWidthTooltip title={longText}>
                <Button color="secondary" variant="outlined">Custom Width [500px]</Button>
              </CustomWidthTooltip>
              <NoMaxWidthTooltip title={longText}>
                <Button color="warning" variant="outlined">No wrapping</Button>
              </NoMaxWidthTooltip>
            </Stack>

          </ChildCard>
        </Grid>

        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            sm: 6
          }}>
          <ChildCard title="Transitions" codeModel={<TransitionsCode />}>
            <Stack spacing={1} direction="row">
              <Tooltip title="Add">
                <Button variant="outlined" color="primary">Grow</Button>
              </Tooltip>
              <Tooltip
                TransitionComponent={Fade}
                TransitionProps={{ timeout: 600 }}
                title="Add"
              >
                <Button variant="outlined" color="secondary">Fade</Button>
              </Tooltip>
              <Tooltip TransitionComponent={Zoom} title="Add">
                <Button variant="outlined" color="warning">Zoom</Button>
              </Tooltip>
            </Stack>

          </ChildCard>
        </Grid>
        <Grid display="flex" alignItems="stretch" size={12}>
          <ChildCard title="Positions" codeModel={<PositionsTooltipCode />}>
            <InlineItemCard>
              <Tooltip title="Top Start" placement="top-start">
                <Button variant="outlined" color="primary">Top Start</Button>
              </Tooltip>
              <Tooltip title="Top" placement="top">
                <Button variant="outlined" color="secondary">Top</Button>
              </Tooltip>
              <Tooltip title="Top End" placement="top-end">
                <Button variant="outlined" color="warning">Top End</Button>
              </Tooltip>
              <Tooltip title="Left Start" placement="left-start">
                <Button variant="outlined" color="success">Left Start</Button>
              </Tooltip>
              <Tooltip title="Left" placement="left">
                <Button variant="outlined" color="error">Left</Button>
              </Tooltip>
              <Tooltip title="Left End" placement="left-end">
                <Button variant="outlined" color="primary">Left End</Button>
              </Tooltip>
              <Tooltip title="Right Start" placement="right-start">
                <Button variant="outlined" color="secondary">Right Start</Button>
              </Tooltip>
              <Tooltip title="Right" placement="right">
                <Button variant="outlined" color="warning">Right</Button>
              </Tooltip>
              <Tooltip title="Right End" placement="right-end">
                <Button variant="outlined" color="success">Right End</Button>
              </Tooltip>
              <Tooltip title="Bottom Start" placement="bottom-start">
                <Button variant="outlined" color="error">Bottom Start</Button>
              </Tooltip>
              <Tooltip title="Bottom" placement="bottom">
                <Button variant="outlined" color="primary">Bottom</Button>
              </Tooltip>
              <Tooltip title="Bottom End" placement="bottom-end">
                <Button variant="outlined" color="secondary">Bottom End</Button>
              </Tooltip>
            </InlineItemCard>
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiTooltip;

===== src/views/ui-components/MuiTransferList.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import BasicTransferList from 'src/components/material-ui/transfer-list/BasicTransferList';
import EnhancedTransferList from 'src/components/material-ui/transfer-list/EnhancedTransferList';

import BasicTransferListCode from 'src/components/material-ui/transfer-list/code/BasicTransferListCode';
import EnhancedTransferListCode from 'src/components/material-ui/transfer-list/code/EnhancedTransferListCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Transfer List',
  },
];

const MuiTransferList = () => (
  <PageContainer title="Transfer List" description="this is Transfer List page">
    {/* breadcrumb */}
    <Breadcrumb title="Transfer List" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Transfer List">
      <Grid container spacing={3}>
        <Grid display="flex" alignItems="stretch" size={12}>
          <ChildCard title="Basic" codeModel={<BasicTransferListCode />}>
            <BasicTransferList />
          </ChildCard>
        </Grid>
        <Grid display="flex" alignItems="stretch" size={12}>
          <ChildCard title="Enhanced" codeModel={<EnhancedTransferListCode />}>
            <EnhancedTransferList />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiTransferList;

===== src/views/ui-components/MuiTypography.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Typography, Grid2 as Grid } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

// CodeModels
import Heading1Code from 'src/components/material-ui/typography/code/Heading1Code';
import Heading2Code from 'src/components/material-ui/typography/code/Heading2Code';
import Heading3Code from 'src/components/material-ui/typography/code/Heading3Code';
import Heading4Code from 'src/components/material-ui/typography/code/Heading4Code';
import Heading5Code from 'src/components/material-ui/typography/code/Heading5Code';
import Heading6Code from 'src/components/material-ui/typography/code/Heading6Code';
import Subtitle1Code from 'src/components/material-ui/typography/code/Subtitle1Code';
import Subtitle2Code from 'src/components/material-ui/typography/code/Subtitle2Code';
import TextPrimaryCode from 'src/components/material-ui/typography/code/TextPrimaryCode';
import TextSecondaryCode from 'src/components/material-ui/typography/code/TextSecondaryCode';
import TextInfoCode from 'src/components/material-ui/typography/code/TextInfoCode';
import TextWarningCode from 'src/components/material-ui/typography/code/TextWarningCode';
import TextErrorCode from 'src/components/material-ui/typography/code/TextErrorCode';
import TextSuccessCode from 'src/components/material-ui/typography/code/TextSuccessCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Typography',
  },
];

const CustomTypography = () => {
  return (
    (<PageContainer title="Typography" description="this is Typography page">
      {/* breadcrumb */}
      <Breadcrumb title="Typography" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            sm: 12
          }}>
          <ParentCard title="Default Text">
            <Grid container spacing={3}>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading " codeModel={<Heading1Code />}>
                  <Typography variant="h1">h1. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 30 | line-height: 45 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading " codeModel={<Heading2Code />}>
                  <Typography variant="h2">h2. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 24 | line-height: 36 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading " codeModel={<Heading3Code />}>
                  <Typography variant="h3">h3. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 21 | line-height: 31.5 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading " codeModel={<Heading4Code />}>
                  <Typography variant="h4">h4. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 18 | line-height: 27 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading" codeModel={<Heading5Code />}>
                  <Typography variant="h5">h5. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 16 | line-height: 24 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Heading " codeModel={<Heading6Code />}>
                  <Typography variant="h6">h6. Heading</Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 14 | line-height: 21 | font weight: 500
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Subtitle" codeModel={<Subtitle1Code />}>
                  <Typography variant="subtitle1">
                    subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
                    tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 16 | line-height: 28 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Subtitle" codeModel={<Subtitle2Code />}>
                  <Typography variant="subtitle2">
                    subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
                    tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 14 | line-height: 21 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard>
                  <Typography variant="body1">
                    body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 16 | line-height: 24 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard>
                  <Typography variant="body2">
                    body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 14 | line-height: 20 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard>
                  <Typography variant="caption">
                    caption. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
                    tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 12 | line-height: 19 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard>
                  <Typography variant="overline">
                    overline. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis
                    tenetur
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    font size: 12 | line-height: 31 | font weight: 400
                  </Typography>
                </ChildCard>
              </Grid>
            </Grid>

          </ParentCard>
        </Grid>
        <Grid
          size={{
            sm: 12
          }}>
          <ParentCard title="Default Text">
            <Grid container spacing={3}>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard>
                  <Typography variant="h5" color="textprimary">
                    Text Primary
                  </Typography>

                  <Typography variant="body1" color="textprimary">
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Secondary" codeModel={<TextSecondaryCode />}>
                  <Typography variant="h5" color="textSecondary">
                    Text Secondary
                  </Typography>

                  <Typography variant="body1" color="textSecondary">
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Info" codeModel={<TextInfoCode />}>
                  <Typography variant="h5" sx={{ color: (theme) => theme.palette.info.main }}>
                    Text Info
                  </Typography>

                  <Typography variant="body1" sx={{ color: (theme) => theme.palette.info.main }}>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Primary" codeModel={<TextPrimaryCode />}>
                  <Typography variant="h5" sx={{ color: (theme) => theme.palette.primary.main }}>
                    Text Primary
                  </Typography>

                  <Typography variant="body1" sx={{ color: (theme) => theme.palette.primary.main }}>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Warning" codeModel={<TextWarningCode />}>
                  <Typography variant="h5" sx={{ color: (theme) => theme.palette.warning.main }}>
                    Text Warning
                  </Typography>

                  <Typography variant="body1" sx={{ color: (theme) => theme.palette.warning.main }}>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Error" codeModel={<TextErrorCode />}>
                  <Typography variant="h5" sx={{ color: (theme) => theme.palette.error.main }}>
                    Text Error
                  </Typography>

                  <Typography variant="body1" sx={{ color: (theme) => theme.palette.error.main }}>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
              <Grid
                size={{
                  sm: 12
                }}>
                <ChildCard title="Text Success" codeModel={<TextSuccessCode />}>
                  <Typography variant="h5" sx={{ color: (theme) => theme.palette.success.main }}>
                    Text Success
                  </Typography>

                  <Typography variant="body1" sx={{ color: (theme) => theme.palette.success.main }}>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur
                  </Typography>
                </ChildCard>
              </Grid>
            </Grid>
          </ParentCard>
        </Grid>
      </Grid >
    </PageContainer >)
  );
};

export default CustomTypography;

===== src/views/widgets/banners/WidgetBanners.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import WelcomeCard from '../../../components/dashboards/ecommerce/WelcomeCard';
import Banner1 from '../../../components/widgets/banners/Banner1';
import Banner2 from '../../../components/widgets/banners/Banner2';
import Banner3 from '../../../components/widgets/banners/Banner3';
import Banner4 from '../../../components/widgets/banners/Banner4';
import Banner5 from '../../../components/widgets/banners/Banner5';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Banner',
  },
];

const WidgetBanners = () => {
  return (
    (<PageContainer title="Banner" description="this is Banner page">
      {/* breadcrumb */}
      <Breadcrumb title="Banner" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            lg: 8
          }}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <WelcomeCard />
            </Grid>
            <Grid size={12}>
              <Banner1 />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <Banner4 />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <Banner5 />
            </Grid>
          </Grid>
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 4
          }}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <Banner2 />
            </Grid>
            <Grid size={12}>
              <Banner3 />
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default WidgetBanners;

===== src/views/widgets/cards/WidgetCards.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import PaymentGateways from '../../../components/dashboards/ecommerce/PaymentGateways';
import RecentTransactions from '../../../components/dashboards/ecommerce/RecentTransactions';
import TopCards from '../../..//components/dashboards/modern/TopCards';
import UpcomingAcitivity from '../../../components/widgets/cards/UpcomingActivity';
import ComplexCard from '../../../components/widgets/cards/ComplexCard';
import MusicCard from '../../../components/widgets/cards/MusicCard';
import EcommerceCard from '../../../components/widgets/cards/EcommerceCard';
import FollowerCard from '../../../components/widgets/cards/FollowerCard';
import FriendCard from '../../../components/widgets/cards/FriendCard';
import ProfileCard from '../../../components/widgets/cards/ProfileCard';

import Settings from '../../../components/widgets/cards/Settings';
import GiftCard from '../../../components/widgets/cards/GiftCard';


const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Cards',
  },
];

const WidgetCards = () => {
  return (
    (<PageContainer title="Cards" description="this is Cards page">
      {/* breadcrumb */}
      <Breadcrumb title="Cards" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid size={12}>
          <TopCards />
        </Grid>
        <Grid size={12}>
          <ComplexCard />
        </Grid>
        <Grid size={12}>
          <EcommerceCard />
        </Grid>
        <Grid size={12}>
          <MusicCard />
        </Grid>
        <Grid size={12}>
          <FollowerCard />
        </Grid>
        <Grid size={12}>
          <FriendCard />
        </Grid>
        <Grid size={12}>
          <ProfileCard />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 4
          }}>
          <Settings />
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 8
          }}>
          <GiftCard />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 4
          }}>
          <PaymentGateways />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 4
          }}>
          <UpcomingAcitivity />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 6,
            lg: 4
          }}>
          <RecentTransactions />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default WidgetCards;

===== src/views/widgets/charts/WidgetCharts.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import YearlyBreakup from '../../../components/dashboards/modern/YearlyBreakup';
import Projects from '../../../components/dashboards/modern/Projects';
import Customers from '../../../components/dashboards/modern/Customers';
import SalesTwo from '../../../components/dashboards/ecommerce/SalesTwo';
import MonthlyEarnings from '../../../components/dashboards/ecommerce/MonthlyEarnings';
import SalesOverview from '../../../components/dashboards/ecommerce/SalesOverview';
import RevenueUpdates from '../../../components/dashboards/ecommerce/RevenueUpdates';
import YearlySales from '../../../components/dashboards/ecommerce/YearlySales';
import MostVisited from '../../../components/widgets/charts/MostVisited';
import PageImpressions from '../../../components/widgets/charts/PageImpressions';
import Followers from '../../../components/widgets/charts/Followers';
import Views from '../../../components/widgets/charts/Views';
import Earned from '../../../components/widgets/charts/Earned';
import CurrentValue from '../../../components/widgets/charts/CurrentValue';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Charts',
  },
];

const WidgetCharts = () => {
  return (
    (<PageContainer title="Charts" description="this is Charts page">
      {/* breadcrumb */}
      <Breadcrumb title="Charts" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}>
          <Followers />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}>
          <Views />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}>
          <Earned />
        </Grid>
        <Grid
          size={{
            xs: 12,
            sm: 3
          }}>
          <SalesTwo />
        </Grid>
        <Grid size={12}>
          <CurrentValue />
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 4
          }}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <YearlyBreakup />
            </Grid>
            <Grid size={12}>
              <MonthlyEarnings />
            </Grid>
            <Grid size={12}>
              <MostVisited />
            </Grid>
          </Grid>
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 4
          }}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <YearlySales />
            </Grid>
            <Grid size={12}>
              <PageImpressions />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <Customers />
            </Grid>
            <Grid
              size={{
                xs: 12,
                sm: 6
              }}>
              <Projects />
            </Grid>
          </Grid>
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 4
          }}>
          <Grid container spacing={3}>
            <Grid size={12}>
              <RevenueUpdates />
            </Grid>
            <Grid size={12}>
              <SalesOverview />
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default WidgetCharts;

===== src/vite-env.d.ts =====
/// <reference types="vite/client" />

===== src/_mockApis/blog/blogData.ts =====
import mock from '../mock';
import { Chance } from 'chance';
import { random } from 'lodash';
import { sub } from 'date-fns';
import s1 from 'src/assets/images/blog/blog-img1.jpg';
import s2 from 'src/assets/images/blog/blog-img2.jpg';
import s3 from 'src/assets/images/blog/blog-img3.jpg';
import s4 from 'src/assets/images/blog/blog-img4.jpg';
import s5 from 'src/assets/images/blog/blog-img5.jpg';
import s6 from 'src/assets/images/blog/blog-img6.jpg';
import s7 from 'src/assets/images/blog/blog-img11.jpg';
import s8 from 'src/assets/images/blog/blog-img8.jpg';
import s9 from 'src/assets/images/blog/blog-img9.jpg';
import s10 from 'src/assets/images/blog/blog-img10.jpg';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import user6 from 'src/assets/images/profile/user-1.jpg';
import { uniqueId } from 'lodash';
import { BlogType, BlogPostType } from 'src/types/apps/blog';

const chance = new Chance();

const BlogComment: BlogType[] = [
  {
    id: uniqueId('#comm_'),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user2,
      name: chance.name(),
    },
    time: chance.date(),
    comment: chance.paragraph({ sentences: 2 }),
    replies: [],
  },
  {
    id: uniqueId('#comm_'),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user3,
      name: chance.name(),
    },
    time: chance.date(),
    comment: chance.paragraph({ sentences: 2 }),
    replies: [
      {
        id: uniqueId('#comm_'),
        profile: {
          id: chance.integer({ min: 1, max: 2000 }),
          avatar: user3,
          name: chance.name(),
        },
        time: chance.date(),
        comment: chance.paragraph({ sentences: 2 }),
      },
    ],
  },
  {
    id: uniqueId('#comm_'),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user4,
      name: chance.name(),
    },
    time: chance.date(),
    comment: chance.paragraph({ sentences: 2 }),
    replies: [],
  },
];

const BlogPost: BlogPostType[] = [
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Garmins Instinct Crossover is a rugged hybrid smartwatch',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s1,
    createdAt: sub(new Date(), { days: 8, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Gadget',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user1,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'After Twitter Staff Cuts, Survivors Face ‘Radio Silence',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s2,
    createdAt: sub(new Date(), { days: 7, hours: 3, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Lifestyle',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user2,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Apple is apparently working on a new ‘streamlined’ accessibility for iOS',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s3,
    createdAt: sub(new Date(), { days: 5, hours: 2, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Design',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user3,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Why Figma is selling to Adobe for $20 billion',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s4,
    createdAt: sub(new Date(), { days: 7, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Design',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user4,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Streaming video way before it was cool, go dark tomorrow',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s5,
    createdAt: sub(new Date(), { days: 4, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Lifestyle',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user5,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'As yen tumbles, gadget-loving Japan goes for secondhand iPhones ',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s6,
    createdAt: sub(new Date(), { days: 2, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Gadget',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user6,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Intel loses bid to revive antitrust case against patent foe Fortress',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s7,
    createdAt: sub(new Date(), { days: 3, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Social',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user2,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'COVID outbreak deepens as more lockdowns loom in China',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s8,
    createdAt: sub(new Date(), { days: 4, hours: 6, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Health',
    featured: false,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user3,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Early Black Friday Amazon deals: cheap TVs, headphones, laptops',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s9,
    createdAt: sub(new Date(), { days: 5, hours: 3, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Gadget',
    featured: true,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user4,
      name: chance.name(),
    },
    comments: BlogComment,
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    title: 'Presented by Max Rushden with Barry Glendenning, Philippe Auclair',
    content: chance.paragraph({ sentences: 2 }),
    coverImg: s10,
    createdAt: sub(new Date(), { days: 0, hours: 1, minutes: 20 }),
    view: random(9999),
    share: random(9999),
    category: 'Health',
    featured: true,
    author: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user5,
      name: chance.name(),
    },
    comments: BlogComment,
  },
];

mock.onGet('/api/data/blog/BlogPosts').reply(() => {
  return [200, BlogPost];
});

// ----------------------------------------------------------------------
mock.onPost('/api/data/blog/post').reply((config) => {
  try {
    const { title } = JSON.parse(config.data);
    const paramCase = (t: string) =>
      t
        .toLowerCase()
        .replace(/ /g, '-')
        .replace(/[^\w-]+/g, '');

    const post = BlogPost.find((_post) => paramCase(_post.title) === title);

    if (!post) {
      return [404, { message: 'Post not found' }];
    }

    return [200, { post }];
  } catch (error) {
    return [500, { message: 'Internal server error' }];
  }
});

mock.onPost('/api/data/blog/post/add').reply((config) => {
  try {
    const { postId, comment } = JSON.parse(config.data);
    const postIndex = BlogPost.findIndex((x) => x.id === postId);
    const post = BlogPost[postIndex];
    const cComments = post.comments || [];
    post.comments = [comment, ...cComments];

    return [200, { posts: [...BlogPost] }];
  } catch (err) {
    return [500, { message: 'Internal server error' }];
  }
});

===== src/_mockApis/chat/Chatdata.ts =====
import mock from '../mock';
import bg1 from 'src/assets/images/blog/blog-img1.jpg';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import adobe from 'src/assets/images/chat/icon-adobe.svg';
import chrome from 'src/assets/images/chat/icon-chrome.svg';
import figma from 'src/assets/images/chat/icon-figma.svg';
import java from 'src/assets/images/chat/icon-javascript.svg';
import zip from 'src/assets/images/chat/icon-zip-folder.svg';
import { Chance } from 'chance';
import type { ChatsType } from 'src/types/apps/chat';
import { sub } from 'date-fns';
import { uniqueId } from 'lodash';

const chance = new Chance();

const ChatData: ChatsType[] = [
  {
    id: 1,
    name: 'James Johnson',
    status: 'online',
    thumb: user1,
    recent: false,
    excerpt: 'Theme Developer',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: chrome, file: 'homepage-design.fig', fileSize: '3MB' },
          { icon: figma, file: 'about-us.htmlf', fileSize: '1KB' },
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 30 }),
        msg: chance.sentence({ words: 10 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: uniqueId(),
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        msg: bg1,
        senderId: uniqueId(),
        type: 'image',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 5 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 2,
    name: 'Maria Hernandez',
    status: 'away',
    thumb: user2,
    recent: true,
    excerpt: 'Doctor',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: uniqueId(),
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: chrome, file: 'homepage-design.fig', fileSize: '3MB' },
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 30 }),
        msg: chance.sentence({ words: 10 }),
        senderId: uniqueId(),
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 2,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        msg: bg1,
        senderId: 2,
        type: 'image',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: uniqueId(),
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 3,
    name: 'David Smith',
    status: 'busy',
    thumb: user3,
    recent: false,
    excerpt: 'Hacker',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 30 }),
        msg: chance.sentence({ words: 10 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },

    ],
  },
  {
    id: 4,
    name: 'Maria Rodriguez',
    status: 'offline',
    thumb: user4,
    recent: true,
    excerpt: 'Please wait outside of the house',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 4,
        type: 'text',
        attachment: [
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 11 }),
        msg: bg1,
        senderId: uniqueId(),
        type: 'image',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 4,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 1 }),
        msg: chance.sentence({ words: 7 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 5,
    name: 'Robert Smith',
    status: 'online',
    thumb: user5,
    recent: true,
    excerpt: 'Front End Developer',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: chrome, file: 'homepage-design.fig', fileSize: '3MB' },
          { icon: figma, file: 'about-us.htmlf', fileSize: '1KB' },
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 30 }),
        msg: chance.sentence({ words: 10 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: uniqueId(),
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        msg: bg1,
        senderId: 5,
        type: 'image',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 5 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 5,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 6,
    name: 'Joseph Sarah',
    status: 'busy',
    thumb: user1,
    recent: false,
    excerpt: 'Graphics Designer',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: chrome, file: 'homepage-design.fig', fileSize: '3MB' },
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        msg: bg1,
        senderId: uniqueId(),
        type: 'image',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 5 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 2 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 6,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 7,
    name: 'Thomas Smith',
    status: 'away',
    thumb: user2,
    recent: true,
    excerpt: 'Back End Developer',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: chrome, file: 'homepage-design.fig', fileSize: '3MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 1 }),
        msg: chance.sentence({ words: 10 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 15 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 7,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 7,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 8,
    name: 'David Elizabeth',
    status: 'offline',
    thumb: user3,
    recent: false,
    excerpt: 'Theme Developer',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 1 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 8,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 9,
    name: 'Charles Martha',
    status: 'online',
    thumb: user4,
    recent: false,
    excerpt: 'Administrator',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: java, file: 'work-project.zip', fileSize: '20MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 8 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 8 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 5 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 9,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 2 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 9,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
  {
    id: 10,
    name: 'Samuel Eliza',
    status: 'online',
    thumb: user5,
    recent: false,
    excerpt: 'Doctor',
    messages: [
      {
        createdAt: sub(new Date(), { hours: 10 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 1,
        type: 'text',
        attachment: [
          { icon: adobe, file: 'service-task.pdf', fileSize: '2MB' },
          { icon: zip, file: 'custom.js', fileSize: '2MB' },
        ],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 11 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { hours: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 3,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
      {
        createdAt: sub(new Date(), { minutes: 6 }),
        msg: chance.sentence({ words: 5 }),
        senderId: 10,
        type: 'text',
        attachment: [],
        id: uniqueId(),
      },
    ],
  },
];

mock.onGet('/api/data/chat/ChatData').reply(() => {
  return [200, ChatData];
});

export default ChatData;

===== src/_mockApis/contacts/ContactsData.tsx =====
import mock from '../mock';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import type { ContactType } from 'src/types/apps/contact';
import { Chance } from 'chance';

const chance = new Chance();

export const ContactList: ContactType[] = [
  {
    id: 1,
    firstname: 'Georgeanna',
    lastname: 'Ramero',
    image: user2,
    department: 'Sales',
    company: 'Muller Inc',
    phone: '456-485-5623',
    email: 'qq739v47ggn@claimab.com',
    address: '19214 110th Rd, Saint Albans, NY, 1141',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 2,
    firstname: 'Cami',
    lastname: 'Macha',
    image: user3,
    department: 'Support',
    company: 'Zboncak LLC',
    phone: '999-895-9652',
    email: 'Camisad@claimab.com',
    address: '76 Hamilton Ave, Yonkers, NY, 10705',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: false,
  },
  {
    id: 3,
    firstname: 'Alda',
    lastname: 'Ziemer',
    image: user4,
    department: 'Engineering',
    company: 'Lehner-Jacobson',
    phone: '789-854-8950',
    email: 'Ziemer234@claimab.com',
    address: '930 Fruit Ave, Farrell, PA, 16121',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: false,
  },
  {
    id: 4,
    firstname: 'Luciano',
    lastname: 'Macpherson',
    image: user5,
    department: 'Support',
    company: 'Champlin',
    phone: '452-652-5230',
    email: 'Macpherson34@claimab.com',
    address: '19103 Stefani Ave, Cerritos, CA, 90703',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: true,
  },
  {
    id: 5,
    firstname: 'Dalton',
    lastname: 'Paden',
    image: user1,
    department: 'Engineering',
    company: 'Balistreri',
    phone: '985-985-7850',
    email: 'Dalton321@claimab.com',
    address: '3059 Edgewood Park Ct, Commerce Township',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: false,
  },
  {
    id: 6,
    firstname: 'Juan',
    lastname: 'Granado',
    image: user2,
    department: 'Support',
    company: 'Bernier-Ankunding',
    phone: '230-541-5231',
    email: 'Granado567@claimab.com',
    address: '1330 N Douglas Ave, Arlington Heights',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: true,
  },
  {
    id: 7,
    firstname: 'Reva',
    lastname: 'Allen',
    image: user3,
    department: 'Support',
    company: 'Rosenbaum Inc',
    phone: '478-582-6520',
    email: 'Allen326@claimab.com',
    address: '180 Topp Ln, Tupelo, MS',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 8,
    firstname: 'Jule',
    lastname: 'Huseman',
    image: user4,
    department: 'Sales',
    company: 'Smith-Romaguera',
    phone: '123-652-2301',
    email: 'Huseman458@claimab.com',
    address: '33 Caraway Rd, Reisterstown, MD',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: true,
  },
  {
    id: 9,
    firstname: 'Bridgette',
    lastname: 'Phung',
    image: user5,
    department: 'Engineering',
    company: 'Corwin-Kassulke',
    phone: '652-452-6521',
    email: 'Bridgette890@claimab.com',
    address: '#RR, Bruceton Mills, WV',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: true,
  },
  {
    id: 10,
    firstname: 'Ernest',
    lastname: 'Cousins',
    image: user2,
    department: 'Support',
    company: 'Homenick-Hartmann',
    phone: '785-985-6541',
    email: 'Ernest6543@claimab.com',
    address: 'Michael I. Days 3756 Preston Street Wichita',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 11,
    firstname: 'Nicolette',
    lastname: 'Trapani',
    image: user1,
    department: 'Engineering',
    company: 'Gleason',
    phone: '652-632-6520',
    email: 'Nicoletteesdasd4@claimab.com',
    address: 'Carol J. Stephens 1635 Franklin Street Montgomery',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 12,
    firstname: 'Virginia',
    lastname: 'Bourdeau',
    image: user2,
    department: 'Support',
    company: 'McKenzie and Sons',
    phone: '125-985-3210',
    email: 'Bourdeauerwe@claimab.com',
    address: 'Donald M. Palmer 2595 Pearlman Avenue',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: false,
  },
  {
    id: 13,
    firstname: 'Janita',
    lastname: 'Vogl',
    image: user3,
    department: 'Sales',
    company: 'Erdman-Moen',
    phone: '541-521-6320',
    email: 'Janitafdaa@claimab.com',
    address: 'Micheal R. Porterfield 508 Virginia Street',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 14,
    firstname: 'Jeneva',
    lastname: 'Bridgeforth',
    image: user4,
    department: 'Engineering',
    company: 'Fay LLC',
    phone: '975-895-5240',
    email: 'Bridgeforth564@claimab.com',
    address: 'Nathan K. Flores 1516 Holt Street West Palm',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 15,
    firstname: 'Roselia',
    lastname: 'Principe',
    image: user5,
    department: 'Sales',
    company: 'Bode-Oberbrunner',
    phone: '874-546-6521',
    email: 'Principe326@claimab.com',
    address: '2915 Auburn Creek LnLeague City',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: false,
  },
  {
    id: 16,
    firstname: 'Elvira',
    lastname: 'Hylton',
    image: user1,
    department: 'Support',
    company: 'Pagac Group',
    phone: '652-542-5200',
    email: 'Elviraoknsss@claimab.com',
    address: '2725 Cottage Rd Alpine',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: false,
  },
  {
    id: 17,
    firstname: 'Maragaret',
    lastname: 'Pecor',
    image: user2,
    department: 'Sales',
    company: 'Predovic and Sons',
    phone: '326-984-1200',
    email: 'Maragaret4352@mediafire.com',
    address: '307 Hardy St Aberdeen',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 18,
    firstname: 'Willena',
    lastname: 'Sugrue',
    image: user3,
    department: 'Support',
    company: 'Graham Group',
    phone: '265-632-4521',
    email: 'Willena75637@claimab.com',
    address: '15919 Golf Club Dr Crosby',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 19,
    firstname: 'Eura',
    lastname: 'Solley',
    image: user4,
    department: 'Sales',
    company: 'Toy-Ryan',
    phone: '645-647-4800',
    email: 'Solley6472@claimab.com',
    address: 'Po Box 144 Rhome',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 20,
    firstname: 'Velva',
    lastname: 'Brockett',
    image: user5,
    department: 'Support',
    company: 'Walsh Ltd',
    phone: '654-985-6520',
    email: 'Brocketterewgdb@claimab.com',
    address: '34 Fairview Ln Palm Coast',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: true,
  },
  {
    id: 21,
    firstname: 'Anya',
    lastname: 'Snapp',
    image: user3,
    department: 'Support',
    company: 'Romaguera Inc',
    phone: '456-652-3210',
    email: 'Snapp76848@claimab.com',
    address: '17919 Barney Dr Accokeek',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: false,
  },
  {
    id: 22,
    firstname: 'Latoria',
    lastname: 'Penaloza',
    image: user1,
    department: 'Engineering',
    company: 'Leuschke',
    phone: '459-985-4520',
    email: 'Penaloza3546@claimab.com',
    address: '14 Huntington Dr Greenbrier',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: true,
  },
  {
    id: 23,
    firstname: 'Tamika',
    lastname: 'Inman',
    image: user2,
    department: 'Sales',
    company: 'Schumm',
    phone: '645-978-4150',
    email: 'Tamikadfdf45@claimab.com',
    address: '1341 Mentionville Rd Darien',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: false,
    deleted: true,
  },
  {
    id: 24,
    firstname: 'Erich',
    lastname: 'Aragon',
    image: user3,
    department: 'Business Development',
    company: 'Brakus',
    phone: '450-980-6520',
    email: 'Aragondfdf4567@claimab.com',
    address: '13 Pent Rd Branford',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 25,
    firstname: 'Johanna',
    lastname: 'Randel',
    image: user4,
    department: 'Sales',
    company: 'Goyette',
    phone: '120-320-4520',
    email: 'Johanna456@claimab.com',
    address: '5791 S Staghorn Cholla Ct Apache Junction',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: true,
  },
  {
    id: 26,
    firstname: 'Victorina',
    lastname: 'Heinze',
    image: user4,
    department: 'Business Development',
    company: 'Fritsch',
    phone: '452-521-1230',
    email: 'Victorina4545@claimab.com',
    address: '69 El Molino Dr Clayton',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: true,
  },
  {
    id: 27,
    firstname: 'Kiley',
    lastname: 'Light',
    image: user5,
    department: 'Sales',
    company: 'Langosh',
    phone: '652-452-1230',
    email: 'Kileydfdfd45@claimab.com',
    address: '215 Waterfront Ct Noblesville',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: false,
  },
  {
    id: 28,
    firstname: 'Sanford',
    lastname: 'Delorenzo',
    image: user1,
    department: 'Engineering',
    company: 'Huels',
    phone: '963-652-1230',
    email: 'Delorenzo3456@claimab.com',
    address: '11212 Amber Rd Manistee',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: true,
    starred: true,
    deleted: false,
  },
  {
    id: 29,
    firstname: 'Hans',
    lastname: 'Strebel',
    image: user2,
    department: 'Sales',
    company: 'Kohler',
    phone: '546-654-1230',
    email: 'Strebel345@claimab.com',
    address: '2009 W Azalea Ave Baker',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: false,
    deleted: false,
  },
  {
    id: 30,
    firstname: 'Roger',
    lastname: 'Trinidad',
    image: user1,
    department: 'Sales',
    company: 'Kling-Hintz',
    phone: '123-456-7890',
    email: '3mcrz8gmymd@claimab.com',
    address: '203 Dawn Dr, Mount Holly, NC, 28120',
    notes: chance.paragraph({ sentences: 2 }),
    frequentlycontacted: false,
    starred: true,
    deleted: true,
  },
];

mock.onGet('/api/data/contacts/ContactsData').reply(() => {
  const contacts = ContactList;

  return [200, JSON.parse(JSON.stringify(contacts))];
});
export default ContactList;

===== src/_mockApis/eCommerce/ProductsData.ts =====
import mock from '../mock';
import { sub } from 'date-fns';
import { Chance } from 'chance';
import s1 from 'src/assets/images/products/s1.jpg';
import s2 from 'src/assets/images/products/s2.jpg';
import s3 from 'src/assets/images/products/s3.jpg';
import s4 from 'src/assets/images/products/s4.jpg';
import s5 from 'src/assets/images/products/s5.jpg';
import s6 from 'src/assets/images/products/s6.jpg';
import s7 from 'src/assets/images/products/s7.jpg';
import s8 from 'src/assets/images/products/s8.jpg';
import s9 from 'src/assets/images/products/s9.jpg';
import s10 from 'src/assets/images/products/s10.jpg';
import s11 from 'src/assets/images/products/s11.jpg';
import s12 from 'src/assets/images/products/s12.jpg';

const chance = new Chance();

const ProductsData = [
  {
    title: 'How Innovation Works',
    price: 275,
    discount: 25,
    related: false,
    salesPrice: 350,
    category: ['books'],
    gender: 'Men',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#1890FF'],
    photo: s1,
    id: 1,
    created: sub(new Date(), { days: 8, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Psalms Book for Growth',
    price: 89,
    discount: 10,
    related: true,
    salesPrice: 99,
    category: ['books'],
    gender: 'Women',
    rating: 3,
    stock: false,
    qty: 1,
    colors: ['#1890FF', '#94D82D', '#FF4842'],
    photo: s2,
    id: 2,
    created: sub(new Date(), { days: 10, hours: 8, minutes: 69 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'The Psychology of Money',
    price: 125,
    discount: 12,
    related: false,
    salesPrice: 137,
    category: ['fashion', 'books'],
    gender: 'Kids',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#FF4842', '#1890FF', '#94D82D'],
    photo: s3,
    id: 3,
    created: sub(new Date(), { days: 8, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Boat Headphone',
    price: 50,
    discount: 15,
    related: true,
    salesPrice: 65,
    category: ['electronics'],
    gender: 'Men',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#1890FF', '#94D82D', '#FFC107'],
    photo: s4,
    id: 4,
    created: sub(new Date(), { days: 4, hours: 9, minutes: 40 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'MacBook Air Pro',
    price: 650,
    discount: 250,
    related: true,
    salesPrice: 900,
    category: ['fashion', 'electronics'],
    gender: 'Women',
    rating: 3,
    stock: false,
    qty: 1,
    colors: ['#00AB55', '#000000'],
    photo: s5,
    id: 5,
    created: sub(new Date(), { days: 2, hours: 5, minutes: 50 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Gaming Console',
    price: 25,
    discount: 6,
    related: true,
    salesPrice: 31,
    category: ['electronics'],
    gender: 'Men',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#FFC0CB', '#FF4842'],
    photo: s6,
    id: 6,
    created: sub(new Date(), { days: 2, hours: 9, minutes: 45 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Red Valvet Dress',
    price: 150,
    discount: 50,
    related: false,
    salesPrice: 200,
    category: ['fashion'],
    gender: 'Women',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#FF4842', '#1890FF', '#94D82D'],
    photo: s7,
    id: 7,
    created: sub(new Date(), { days: 6, hours: 10, minutes: 0 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Shoes for Girls',
    price: 300,
    discount: 80,
    related: false,
    salesPrice: 380,
    category: ['fashion', 'toys'],
    gender: 'Women',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#1890FF', '#94D82D', '#FFC107'],
    photo: s8,
    id: 8,
    created: sub(new Date(), { days: 7, hours: 5, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Short & Sweet Purse',
    price: 175,
    discount: 25,
    related: false,
    salesPrice: 200,
    category: ['fashion'],
    gender: 'Women',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#00AB55', '#000000'],
    photo: s9,
    id: 9,
    created: sub(new Date(), { days: 8, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Toy Dino for Fun',
    price: 210,
    discount: 40,
    related: false,
    salesPrice: 250,
    category: ['toys'],
    gender: 'Kids',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#FFC0CB', '#FF4842'],
    photo: s10,
    id: 10,
    created: sub(new Date(), { days: 6, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Cute Soft Teddybear',
    price: 285,
    discount: 60,
    related: false,
    salesPrice: 345,
    category: ['toys'],
    gender: 'Kids',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#FF4842', '#1890FF', '#94D82D'],
    photo: s11,
    id: 11,
    created: sub(new Date(), { days: 1, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
  {
    title: 'Little Angel Toy',
    price: 5,
    discount: 5,
    related: false,
    salesPrice: 10,
    category: ['toys'],
    gender: 'Kids',
    rating: 3,
    stock: true,
    qty: 1,
    colors: ['#1890FF', '#94D82D', '#FFC107'],
    photo: s12,
    id: 12,
    created: sub(new Date(), { days: 9, hours: 6, minutes: 20 }),
    description: chance.paragraph({ sentences: 2 }),
  },
];

mock.onGet('/api/data/eCommerce/ProductsData').reply(() => {
  return [200, ProductsData];
});

export default ProductsData;

===== src/_mockApis/email/EmailData.tsx =====
import mock from '../mock';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import user6 from 'src/assets/images/profile/user-1.jpg';
import user7 from 'src/assets/images/profile/user-2.jpg';
import user8 from 'src/assets/images/profile/user-3.jpg';
import type { EmailType } from 'src/types/apps/email';
import adobe from 'src/assets/images/chat/icon-adobe.svg';
import chrome from 'src/assets/images/chat/icon-chrome.svg';
import figma from 'src/assets/images/chat/icon-figma.svg';
import java from 'src/assets/images/chat/icon-javascript.svg';
import zip from 'src/assets/images/chat/icon-zip-folder.svg';

import { sub } from 'date-fns';

const EmailData: EmailType[] = [
  {
    id: 1,
    from: 'James Smith',
    thumbnail: user1,
    subject: 'Kindly check this latest updated',
    time: sub(new Date(), { days: 0, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Contrary to popular belief, Lorem Ipsum is not simply random text. ',
    emailContent: `<p>Hello Andrew, </p>
       <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque bibendum hendrerit lobortis. Nullam ut lacus eros. Sed at luctus urna, eu fermentum diam. In et tristique mauris.</p>
       <p>Ut id ornare metus, sed auctor enim. Pellentesque nisi magna, laoreet a augue eget, 
       tempor volutpat diam.</p>
       <p>Regards,<br/> <b>James Smith</b></p>
       `,
    unread: true,
    attachment: false,
    starred: true,
    important: false,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Promotional',
    attchments: [
      {
        id: '#1Attach',
        image: adobe,
        title: 'adobe.pdf',
        fileSize: '2MB',
      },
      {
        id: '#2Attach',
        image: chrome,
        title: 'abouts.html',
        fileSize: '2MB',
      },
      {
        id: '#3Attach',
        image: zip,
        title: 'cheese.zip',
        fileSize: '2MB',
      },
    ],
  },
  {
    id: 2,
    from: 'Michael Smith',
    thumbnail: user2,
    subject: 'Fact that a reader will be distracted.',
    time: sub(new Date(), { days: 0, hours: 3, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'It has roots in a piece of classical Latin literature from 45 BC',
    emailContent: `<p>Hello Andrew, </p>
       <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque bibendum hendrerit lobortis. Nullam ut lacus eros. Sed at luctus urna, eu fermentum diam. In et tristique mauris.</p>
       <p>Ut id ornare metus, sed auctor enim. Pellentesque nisi magna, laoreet a augue eget, 
       tempor volutpat diam.</p>
       <p>Regards,<br/> <b>Michael Smith</b></p>
       `,
    unread: true,
    attachment: false,
    starred: true,
    important: false,
    inbox: false,
    sent: false,
    draft: true,
    spam: false,
    trash: false,
    label: 'Social',
    attchments: [],
  },
  {
    id: 3,
    from: 'Robert Smith',
    thumbnail: user3,
    subject: 'The point of using Lorem Ipsum is that it has a more-or-less normal',
    time: sub(new Date(), { days: 0, hours: 11, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Richard McClintock, a Latin professor at Hampden-Sydney',
    emailContent:
      '<p>Dummy text is also used to demonstrate the appearance of different typefaces and layouts, and in general the content of dummy text is nonsensical. ',
    unread: false,
    attachment: false,
    starred: false,
    important: true,
    inbox: false,
    sent: true,
    draft: false,
    spam: false,
    trash: false,
    label: 'Promotional',
    attchments: [
      {
        id: '#4Attach',
        image: figma,
        title: 'service.fig',
        fileSize: '2MB',
      },
      {
        id: '#5Attach',
        image: java,
        title: 'abouts.js',
        fileSize: '2MB',
      },
    ],
  },
  {
    id: 4,
    from: 'Maria Garcia',
    thumbnail: user4,
    subject: 'Contrary to popular belief, Lorem Ipsum is.',
    time: sub(new Date(), { days: 1, hours: 2, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Lorem Ipsum passage, and going through',
    emailContent:
      '<p>Furthermore, it is advantageous when the dummy text is relatively realistic so that the layout impression of the final publication is not compromised.</p>',
    unread: false,
    attachment: true,
    starred: true,
    important: false,
    inbox: false,
    sent: false,
    draft: true,
    spam: false,
    trash: false,
    label: 'Social',
    attchments: [],
  },
  {
    id: 5,
    from: 'David Smith',
    thumbnail: user5,
    subject: 'Literature from 45 BC, making',
    time: sub(new Date(), { days: 1, hours: 8, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'The standard chunk of Lorem Ipsum used since the 1500s',
    emailContent:
      '<p>One disadvantage of Lorum Ipsum is that in Latin certain letters appear more frequently than others which creates a distinct visual impression.</p>',
    unread: false,
    attachment: false,
    starred: false,
    important: true,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Social',
    attchments: [],
  },
  {
    id: 6,
    from: 'Maria Rodriguez',
    thumbnail: user6,
    subject: 'Latin professor at Hampden-Sydney College.',
    time: sub(new Date(), { days: 1, hours: 10, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Cicero are also reproduced in their exact original form',
    emailContent:
      '<p>Thus, Lorem Ipsum has only limited suitability as a visual filler for German texts. If the fill text is intended to illustrate the characteristics of different typefaces.</p>',
    unread: false,
    attachment: true,
    starred: false,
    important: true,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Health',
    attchments: [],
  },
  {
    id: 7,
    from: 'Mary Smith',
    thumbnail: user7,
    subject: 'the cites of the word in classical.',
    time: sub(new Date(), { days: 1, hours: 11, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'There are many variations of passages of Lorem Ipsum available',
    emailContent:
      '<p>There is now an abundance of readable dummy texts. These are usually used when a text is required purely to fill a space.These alternatives to the classic Lorem Ipsum texts are often amusing and tell short, funny or nonsensical stories.</p>',
    unread: true,
    attachment: true,
    starred: false,
    important: false,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Social',
    attchments: [],
  },
  {
    id: 8,
    from: 'Maria Hernandez',
    thumbnail: user8,
    subject: ' This book is a treatise on the theory of ethics.',
    time: sub(new Date(), { days: 2, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'the majority have suffered alteration in some form, by injected ',
    emailContent:
      '<p>According to most sources, Lorum Ipsum can be traced back to a text composed by Cicero in 45 BC. Allegedly, a Latin scholar established the origin of the text.</p>',
    unread: false,
    attachment: true,
    starred: false,
    important: true,
    inbox: false,
    sent: false,
    draft: false,
    spam: true,
    trash: false,
    label: 'Social',
    attchments: [],
  },
  {
    id: 9,
    from: 'Maria Martinez',
    thumbnail: user1,
    subject: 'Lorem Ipsum used since the 1500s is reproduced.',
    time: sub(new Date(), { days: 2, hours: 3, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'If you are going to use a passage of Lorem Ipsum',
    emailContent:
      '<p>It seems that only fragments of the original text remain in the Lorem Ipsum texts used today. One may speculate that over the course of time certain letters.</p>',
    unread: false,
    attachment: true,
    starred: false,
    important: false,
    inbox: false,
    sent: false,
    draft: false,
    spam: false,
    trash: true,
    label: 'Promotional',
    attchments: [],
  },
  {
    id: 10,
    from: 'James Johnson',
    thumbnail: user2,
    subject: 'accompanied by English versions from the 1914 translation.',
    time: sub(new Date(), { days: 2, hours: 8, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: "you need to be sure there isn't anything",
    emailContent:
      '<p>This might also explain why one can now find slightly different versions. Due to the age of the Lorem Ipsum text there are no copyright issues to contend with.</p>',
    unread: false,
    attachment: true,
    starred: true,
    important: false,
    inbox: false,
    sent: true,
    draft: false,
    spam: false,
    trash: false,
    label: 'Health',
    attchments: [],
  },
  {
    id: 11,
    from: 'James Smith',
    thumbnail: user3,
    subject: 'All the Lorem Ipsum generators on the Internet.',
    time: sub(new Date(), { days: 2, hours: 9, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'All the Lorem Ipsum generators on the Internet tend to repeat predefined',
    emailContent:
      '<p>The spread of computers and layout programmes thus made dummy text better known. While in earlier times several lines of the Lorem Ipsum text were repeated in the creation of dummy texts.</p>',
    unread: false,
    attachment: false,
    starred: true,
    important: false,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Promotional',
    attchments: [],
  },
  {
    id: 12,
    from: 'Michael Smith',
    thumbnail: user1,
    subject: 'Latin words, combined with a handful.',
    time: sub(new Date(), { days: 2, hours: 11, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'combined with a handful of model sentence structures',
    emailContent:
      "<p>basis for many dummy text or Lorem Ipsum generators. Based on 'De finibus', these generators automatically create longer sections of the Lorem Ipsum text or various other filler texts.</p>",
    unread: false,
    attachment: false,
    starred: false,
    important: false,
    inbox: true,
    sent: false,
    draft: true,
    spam: false,
    trash: true,
    label: 'Social',
    attchments: [],
  },
  {
    id: 13,
    from: 'Robert Smith',
    thumbnail: user2,
    subject: 'If you are going to use a passage.',
    time: sub(new Date(), { days: 3, hours: 2, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Lorem Ipsum is therefore always free from repetition, injected humour',
    emailContent:
      '<p>The phrasal sequence of the Lorem Ipsum text is now so widespread and commonplace that many DTP programmes can generate dummy text using the starting sequence.</p>',
    unread: false,
    attachment: true,
    starred: true,
    important: true,
    inbox: false,
    sent: true,
    draft: false,
    spam: false,
    trash: false,
    label: 'Health',
    attchments: [],
  },
  {
    id: 14,
    from: 'Maria Garcia',
    thumbnail: user3,
    subject: 'piece of classical Latin literature.',
    time: sub(new Date(), { days: 3, hours: 11, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Lorem Ipsum passage, and going through the cites',
    emailContent:
      '<p>now recognized by electronic pre-press systems and, when found, an alarm can be raised. This avoids a publication going to print with overlooked dummy text.</p>',
    unread: false,
    attachment: false,
    starred: true,
    important: false,
    inbox: false,
    sent: false,
    draft: false,
    spam: false,
    trash: true,
    label: 'Social',
    attchments: [],
  },
  {
    id: 15,
    from: 'David Smith',
    thumbnail: user4,
    subject: 'first true generator on the Internet.',
    time: sub(new Date(), { days: 3, hours: 4, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
    emailContent:
      '<p>Certain internet providers exploit the fact that fill text cannot be recognized by automatic search engines - meaningful information cannot be distinguished from meaningless.</p>',
    unread: false,
    attachment: true,
    starred: false,
    important: false,
    inbox: false,
    sent: false,
    draft: false,
    spam: false,
    trash: true,
    label: 'Promotional',
    attchments: [],
  },
  {
    id: 16,
    from: 'Maria Rodriguez',
    thumbnail: user5,
    subject: 'combined with a handful of model sentence structure.',
    time: sub(new Date(), { days: 4, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
    emailContent:
      "<p>Target-generated dummy text mixed with a certain combination of search terms can lead to an increased frequency of visits by search machine users. As a consequence, advertising revenues, which rely on website 'hits', are increased.</p>",
    unread: true,
    attachment: false,
    starred: false,
    important: true,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: true,
    label: 'Social',
    attchments: [],
  },
  {
    id: 17,
    from: 'Mary Smith',
    thumbnail: user6,
    subject: "randomised words which don't look even.",
    time: sub(new Date(), { days: 4, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'when an unknown printer took a galley of type',
    emailContent:
      '<p>Vitae purus faucibus ornare suspendisse sed nisi lacus sed viverra. Amet nisl suscipit adipiscing bibendum est ultricies integer.</p>',
    unread: true,
    attachment: false,
    starred: false,
    important: false,
    inbox: false,
    sent: false,
    draft: false,
    spam: true,
    trash: false,
    label: 'Health',
    attchments: [],
  },
  {
    id: 18,
    from: 'Maria Hernandez',
    thumbnail: user7,
    subject: 'Lorem Ipsum generators on the Internet tend.',
    time: sub(new Date(), { days: 4, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'scrambled it to make a type specimen book',
    emailContent:
      '<p>Volutpat diam ut venenatis tellus in metus vulputate eu. Id aliquet lectus proin nibh nisl condimentum id venenatis. Risus quis varius quam quisque id diam vel. Pulvinar pellentesque habitant morbi tristique senectus et netus et.</p>',
    unread: false,
    attachment: false,
    starred: false,
    important: true,
    inbox: false,
    sent: true,
    draft: false,
    spam: false,
    trash: false,
    label: 'Promotional',
    attchments: [],
  },
  {
    id: 19,
    from: 'Maria Martinez',
    thumbnail: user8,
    subject: 'combined with a handful of model.',
    time: sub(new Date(), { days: 4, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'It has survived not only five centuries',
    emailContent:
      '<p>Scelerisque purus semper eget duis at. Tempus imperdiet nulla malesuada pellentesque elit. Vitae semper quis lectus nulla at volutpat. Ac tortor vitae purus faucibus ornare suspendisse.</p>',
    unread: true,
    attachment: false,
    starred: false,
    important: false,
    inbox: false,
    sent: false,
    draft: true,
    spam: false,
    trash: false,
    label: 'Health',
    attchments: [],
  },
  {
    id: 20,
    from: 'James Johnson',
    thumbnail: user1,
    subject: 'The Extremes of Good and Evil.',
    time: sub(new Date(), { days: 4, hours: 1, minutes: 45 }),
    To: 'abc@company.com',
    emailExcerpt: 'the 1960s with the release of Letraset sheets containings',
    emailContent:
      '<p>Ultrices in iaculis nunc sed augue lacus viverra. Tellus cras adipiscing enim eu turpis egestas. Libero enim sed faucibus turpis in eu mi bibendum neque. Consectetur adipiscing elit ut aliquam. Mattis nunc sed blandit libero volutpat sed cras. </p>',
    unread: false,
    attachment: true,
    starred: true,
    important: true,
    inbox: true,
    sent: false,
    draft: false,
    spam: false,
    trash: false,
    label: 'Social',
    attchments: [],
  },
];

mock.onGet('/api/data/email/EmailData').reply(() => {
  const emails = EmailData;

  return [200, JSON.parse(JSON.stringify(emails))];
});

export default EmailData;

===== src/_mockApis/index.ts =====
import mock from './mock';
import './blog/blogData';
import './contacts/ContactsData';
import './chat/Chatdata';
import './notes/NotesData';
import './ticket/TicketData';
import './eCommerce/ProductsData';
import './email/EmailData';
import './userprofile/PostData';
import './userprofile/UsersData';
import './invoice/invoceLists';
import './kanban/KanbanData';

mock.onAny().passThrough();

===== src/_mockApis/invoice/invoceLists.tsx =====
import { InvoiceList } from 'src/types/apps/invoice';
import mock from '../mock';

export const invoceLists: InvoiceList[] = [
    {
        id: 101,
        billFrom: 'PineappleInc.',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'Redq Inc.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date(),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Shipped',
        completed: false,
        isSelected: false,
    },
    {
        id: 102,
        billFrom: 'Pineapple.',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'ME Inc.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date(),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Delivered',
        completed: false,
        isSelected: false,
    },
    {
        id: 103,
        billFrom: 'Incorporation.',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'Redirwed.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date(),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Pending',
        completed: false,
        isSelected: false,
    },
    {
        id: 104,
        billFrom: 'PineappleTimes.',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'RFc.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date(),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Shipped',
        completed: false,
        isSelected: false,
    },
    {
        id: 105,
        billFrom: 'FortuneCreation',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'Soft solution.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date('2020-10-15'),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Delivered',
        completed: false,
        isSelected: false,
    },
    {
        id: 106,
        billFrom: 'PineappleTimes.',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'RFc.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date(),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Shipped',
        completed: false,
        isSelected: false,
    },
    {
        id: 107,
        billFrom: 'FortuneCreation',
        billFromEmail: 'first@xabz.com',
        billFromAddress: 'Ganesh glory,Godrej garden city,Ahmedabad.',
        billFromPhone: 979796786,
        billFromFax: 13,
        billTo: 'Soft solution.',
        billToEmail: 'toFirst@agth.com',
        billToAddress: 'Godrej garden city,Ahmedabad.',
        billToPhone: 757575233,
        billToFax: 76,
        orders: [
            {
                itemName: 'Courge',
                unitPrice: 10,
                units: 9,
                unitTotalPrice: 90,
            },
        ],
        orderDate: new Date('2020-10-15'),
        totalCost: 90,
        vat: 9,
        grandTotal: 99,
        status: 'Delivered',
        completed: false,
        isSelected: false,
    },
];

mock.onGet('/api/data/invoicedata').reply(() => {
    return [200, invoceLists];
});

mock.onDelete('/api/data/invoicedata/deleteinvoice').reply((config) => {
    const { invoiceId } = JSON.parse(config.data);
    const invoiceIndex = invoceLists.findIndex(invoice => invoice.id === invoiceId);
    if (invoiceIndex !== -1) {
        invoceLists.splice(invoiceIndex, 1);
        return [200, invoceLists];
    } else {
        return [404, { message: 'invoice not found' }];
    }
})
// Function to find the next available ID
const getNextId = () => {
    const maxId = Math.max(...invoceLists.map(invoice => invoice.id));
    return maxId + 1;
};
// New endpoint to add an invoice
mock.onPost('/api/data/invoicedata/addinvoice').reply((config) => {
    const newInvoice = JSON.parse(config.data);
    newInvoice.id = getNextId();
    invoceLists.push(newInvoice);
    return [201, newInvoice];
});

// Mock API endpoint to update an invoice
mock.onPut('/api/data/invoicedata/updateinvoice').reply((config) => {
    const updatedInvoice = JSON.parse(config.data);
    const invoiceIndex = invoceLists.findIndex((invoice) => invoice.id === updatedInvoice.id);

    if (invoiceIndex !== -1) {
        invoceLists[invoiceIndex] = { ...updatedInvoice };
        return [200, invoceLists[invoiceIndex]];
    } else {
        return [404, { message: 'Invoice not found' }];
    }
});
===== src/_mockApis/kanban/KanbanData.tsx =====
import { TodoCategory } from '../../types/apps/kanban';
import mock from '../mock';
import img1 from '../../assets/images/kanban/kanban-img-1.jpg';
import img2 from '../../assets/images/kanban/kanban-img-2.jpg';
import img3 from '../../assets/images/kanban/kanban-img-3.jpg';
import img4 from '../../assets/images/kanban/kanban-img-4.jpg';

const KanbanData: TodoCategory[] = [
  {
    id: '1',
    name: 'Todo',
    child: [
      {
        id: '101',
        task: 'This is first task',
        taskImage: img1,
        taskText: '',
        date: '24 july',
        taskProperty: 'Design',
      },
      {
        id: '102',
        task: 'lets do some task on pd',
        taskImage: '',
        taskText:
          'Lorem ipsum dolor sit amet, consectetur adipisicing elit, o eiusmod tempor incid.',
        date: '24 july',
        taskProperty: 'Mobile',
      },
      {
        id: '103',
        task: 'Do some projects on React Native with Flutter',
        taskImage: '',
        taskText: '',
        date: '24 july',
        taskProperty: 'Mobile',
      },
    ],
  },
  {
    id: '2',
    name: 'Progress',
    child: [
      {
        id: '104',
        task: 'Design navigation changes',
        taskImage: '',
        taskText: '',
        date: '24 july',
        taskProperty: 'Mobile',
        category: '',
      },
      {
        id: '105',
        task: 'Battle with fire',
        taskImage: img2,
        taskText: '',
        date: '24 july',
        taskProperty: 'Design',
        category: '',
      },
      {
        id: '106',
        task: 'First design concept',
        taskImage: '',
        taskText: '',
        date: '24 july',
        taskProperty: 'Mobile',
        category: '',
      },
    ],
  },
  {
    id: '3',
    name: 'Pending',
    child: [
      {
        id: '107',
        task: 'Persona development',
        taskImage: '',
        taskText:
          'Create user personas based on the research data to represent different user groups and their characteristics, gols, and behaviors..',
        date: '24 july',
        taskProperty: 'UX Stage',
        category: 'Pending',
      },
      {
        id: '108',
        task: 'Redesign overview',
        taskImage: img3,
        taskText: '',
        date: '14 july',
        taskProperty: 'Design',
        category: 'Pending',
      },
    ],
  },
  {
    id: '4',
    name: 'Done',
    child: [
      {
        id: '109',
        task: 'Usability testing',
        taskImage: img4,
        taskText: '',
        date: '24 july',
        taskProperty: 'Research',
        category: 'Done',
      },
      {
        id: '110',
        task: 'Introduce new navigation',
        taskImage: '',
        taskText: '',
        date: '24 july',
        taskProperty: 'Data Science',
        category: 'Done',
      },
      {
        id: '111',
        task: 'Branding visual identity',
        taskImage: '',
        taskText: '',
        date: '4 july',
        taskProperty: 'Branding',
        category: 'Done',
      },
      {
        id: '112',
        task: 'Competitor research',
        taskImage: '',
        taskText:
          'research competitors and identify weakness and strengths each of them. comparing their product features, quelity...',
        date: '14 july',
        taskProperty: 'UX Stage',
        category: 'Done',
      },
    ],
  },
];

// Extracting unique task properties from TodoData
const taskPropertiesSet = new Set<string>();

// Using forEach loops instead of flatMap
KanbanData.forEach((category) => {
  category.child.forEach((task) => {
    taskPropertiesSet.add(task.taskProperty);
  });
});

// Convert Set to array
export const TaskProperties = Array.from(taskPropertiesSet);

// Mock API endpoint to fetch TodoData
mock.onGet('/api/TodoData').reply(200, KanbanData);

// Mock API endpoint to delete a category
mock.onDelete('/api/TodoData').reply((config) => {
  const { id } = JSON.parse(config.data);
  const updatedTodoData = KanbanData.filter((category) => category.id !== id);
  return [200, updatedTodoData];
});

// Mock API endpoint to clear all tasks from a category
mock.onDelete('/api/TodoData/clearTasks').reply((config) => {
  const { categoryId } = JSON.parse(config.data);
  const updatedTodoData = KanbanData.map((category) => {
    if (category.id === categoryId) {
      return { ...category, child: [] };
    }
    return category;
  });
  return [200, updatedTodoData];
});

// Mock API endpoint to add a new task
mock.onPost('/api/TodoData/addTask').reply((config) => {
  const { categoryId, newTaskData } = JSON.parse(config.data);
  const updatedTodoData = KanbanData.map((category) => {
    if (category.id === categoryId) {
      return { ...category, child: [...category.child, newTaskData] };
    }
    return category;
  });
  return [200, updatedTodoData];
});

// Mock API endpoint to add a new category
mock.onPost('/api/TodoData/addCategory').reply((config) => {
  const { categoryName } = JSON.parse(config.data);
  const newCategory = {
    id: Math.random(),
    name: categoryName,
    child: [],
  };
  KanbanData.push(newCategory);
  return [200, newCategory];
});

// Mock API endpoint to update the name of a category
mock.onPost('/api/TodoData/updateCategory').reply((config) => {
  const { categoryId, categoryName } = JSON.parse(config.data);
  const updatedTodoData = KanbanData.map((category) => {
    if (category.id === categoryId) {
      return { ...category, name: categoryName };
    }
    return category;
  });
  return [200, updatedTodoData];
});

// Mock API endpoint to edit a task
mock.onPut('/api/TodoData/editTask').reply((config) => {
  const { taskId, newData } = JSON.parse(config.data);
  KanbanData.forEach((category) => {
    category.child.forEach((task) => {
      if (task.id === taskId) {
        Object.assign(task, newData);
      }
    });
  });
  return [200, KanbanData];
});

// Mock API endpoint to delete a task
mock.onDelete('/api/TodoData/deleteTask').reply((config) => {
  const { taskId } = JSON.parse(config.data);
  const updatedTodoData = KanbanData.filter((task) => task.id !== taskId);
  return [200, updatedTodoData];
});

export default KanbanData;

===== src/_mockApis/language/LanguageData.js =====
import mock from '../mock';

import FlagEn from 'src/assets/images/svgs/icon-flag-en.svg';
import FlagFr from 'src/assets/images/svgs/icon-flag-fr.svg';
import FlagCn from 'src/assets/images/svgs/icon-flag-cn.svg';
import FlagSa from 'src/assets/images/svgs/icon-flag-sa.svg';
import FlagVn from 'src/assets/images/svgs/icon-flag-vn.svg';

const LanguageData = [
    {
        id: 1,
        flagname: 'English',
        icon: FlagEn,
      },
      {
        id: 2,
        flagname: 'French',
        icon: FlagFr,
      },
      {
        id: 3,
        flagname: 'Vietnamese',
        icon: FlagVn,
      },
      {
        id: 4,
        flagname: 'Chinese',
        icon: FlagCn,
      },
      {
        id: 5,
        flagname: 'Arabic (Sudan)',
        icon: FlagSa,
      },
];

mock.onGet('/api/data/language/LanguageData').reply(() => {
  return [200, LanguageData];
});
export default LanguageData;

===== src/_mockApis/mock.ts =====
import AxiosMockAdapter from 'axios-mock-adapter';
import axios from '../utils/axios';

const mock = new AxiosMockAdapter(axios, { delayResponse: 0 });
export default mock;

===== src/_mockApis/notes/NotesData.ts =====
import mock from '../mock';

interface notesType {
  id: number;
  color: string;
  title: string;
  datef: string;
  deleted: boolean;
}

const NotesData: notesType[] = [
  {
    id: 1,
    color: 'info',
    title:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
    datef: '2023-06-03T23:28:56.782Z',
    deleted: false,
  },
  {
    id: 2,
    color: 'error',
    title:
      'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,',
    datef: '2023-06-02T23:28:56.782Z',
    deleted: false,
  },
  {
    id: 3,
    color: 'warning',
    title:
      'consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?',
    datef: '2023-06-01T23:28:56.782Z',
    deleted: false,
  },
  {
    id: 4,
    color: 'success',
    title:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
    datef: '2023-06-03T23:28:56.782Z',
    deleted: false,
  },
];
mock.onGet('/api/data/notes/NotesData').reply(() => {
  return [200, NotesData];
});
export default NotesData;

===== src/_mockApis/ticket/TicketData.ts =====
import mock from '../mock';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import { Chance } from 'chance';
import { TicketType } from 'src/types/apps/ticket';

const chance = new Chance();

const TicketData: TicketType[] = [
  {
    Id: 1,
    ticketTitle: 'Sed ut perspiciatis unde omnis iste',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Closed',
    Label: 'error',
    thumb: user1,
    AgentName: 'Liam',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 2,
    ticketTitle: 'Consequuntur magni dolores eos qui ratione',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Pending',
    Label: 'warning',
    thumb: user2,
    AgentName: 'Steve',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 3,
    ticketTitle: 'Exercitationem ullam corporis',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Open',
    Label: 'success',
    thumb: user3,
    AgentName: 'Jack',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 4,
    ticketTitle: 'Sed ut perspiciatis unde omnis iste',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Closed',
    Label: 'error',
    thumb: user4,
    AgentName: 'Steve',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 5,
    ticketTitle: 'Exercitationem ullam corporis',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Closed',
    Label: 'error',
    thumb: user5,
    AgentName: 'Liam',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 6,
    ticketTitle: 'Consequuntur magni dolores eos qui ratione',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Pending',
    Label: 'warning',
    thumb: user1,
    AgentName: 'Jack',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 7,
    ticketTitle: 'Sed ut perspiciatis unde omnis iste',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Open',
    Label: 'success',
    thumb: user2,
    AgentName: 'Steve',
    Date: chance.date(),
    deleted: false,
  },
  {
    Id: 8,
    ticketTitle: 'Consequuntur magni dolores eos qui ratione',
    ticketDescription:
      'ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos',
    Status: 'Closed',
    Label: 'error',
    thumb: user3,
    AgentName: 'John',
    Date: chance.date(),
    deleted: false,
  },
];

mock.onGet('/api/data/ticket/TicketData').reply(() => {
  return [200, TicketData];
});
export default TicketData;

===== src/_mockApis/userprofile/PostData.ts =====
import mock from '../mock';
import image1 from 'src/assets/images/products/s1.jpg';
import image2 from 'src/assets/images/products/s2.jpg';
import image4 from 'src/assets/images/products/s4.jpg';

import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import user6 from 'src/assets/images/profile/user-1.jpg';
import { Chance } from 'chance';
import { PostType } from 'src/types/apps/userProfile';

const chance = new Chance();

// social profile
const posts: PostType[] = [
  {
    id: chance.integer({ min: 1, max: 2000 }),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user1,
      name: 'Mathew Anderson',
      time: '15 min ago',
    },
    data: {
      content: chance.paragraph({ sentences: 2 }),
      images: [
        {
          img: image1,
          featured: true,
        },
      ],
      likes: {
        like: true,
        value: 67,
      },
      comments: [
        {
          id: chance.integer({ min: 1, max: 2000 }),
          profile: {
            id: chance.integer({ min: 1, max: 2000 }),
            avatar: user3,
            name: 'Deran Mac',
            time: '8 min ago ',
          },
          data: {
            comment: chance.paragraph({ sentences: 2 }),
            likes: {
              like: true,
              value: 55,
            },
            replies: [],
          },
        },
        {
          id: chance.integer({ min: 1, max: 2000 }),
          profile: {
            id: chance.integer({ min: 1, max: 2000 }),
            avatar: user4,
            name: 'Jonathan Bg',
            time: '5 min ago ',
          },
          data: {
            comment: chance.paragraph({ sentences: 2 }),
            likes: {
              like: false,
              value: 68,
            },
            replies: [
              {
                id: chance.integer({ min: 1, max: 2000 }),
                profile: {
                  id: chance.integer({ min: 1, max: 2000 }),
                  avatar: user5,
                  name: 'Carry minati',
                  time: 'just now ',
                },
                data: {
                  comment: chance.paragraph({ sentences: 2 }),
                  likes: {
                    like: true,
                    value: 10,
                  },
                },
              },
            ],
          },
        },
      ],
    },
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user5,
      name: 'Carry Minati',
      time: 'now',
    },
    data: {
      content: chance.paragraph({ sentences: 2 }),
      images: [],
      likes: {
        like: true,
        value: 1,
      },
      comments: [],
    },
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user2,
      name: 'Genelia Desouza',
      time: '15 min ago ',
    },
    data: {
      content: chance.paragraph({ sentences: 2 }),
      images: [
        {
          img: image2,
          title: 'Image Title',
        },
        {
          img: image4,
          title: 'Painter',
        },
      ],
      likes: {
        like: false,
        value: 320,
      },
      comments: [
        {
          id: chance.integer({ min: 1, max: 2000 }),
          profile: {
            id: chance.integer({ min: 1, max: 2000 }),
            avatar: user3,
            name: 'Ritesh Deshmukh',
            time: '15 min ago ',
          },
          data: {
            comment: chance.paragraph({ sentences: 2 }),
            likes: {
              like: true,
              value: 65,
            },
            replies: [],
          },
        },
      ],
    },
  },
  {
    id: chance.integer({ min: 1, max: 2000 }),
    profile: {
      id: chance.integer({ min: 1, max: 2000 }),
      avatar: user6,
      name: 'Mathew Anderson',
      time: '15 min ago ',
    },
    data: {
      content: chance.paragraph({ sentences: 2 }),
      images: [],
      video: 'd1-FRj20WBE',
      likes: {
        like: true,
        value: 129,
      },
    },
  },
];

mock.onGet('/api/data/postData').reply(() => {
  return [200, posts];
});

mock.onPost('/api/data/posts/like').reply((config) => {
  try {
    const { postId } = JSON.parse(config.data);
    const postIndex = posts.findIndex((x) => x.id === postId);
    const post = { ...posts[postIndex] };
    post.data = { ...post.data };
    post.data.likes = { ...post.data.likes };
    post.data.likes.like = !post.data.likes.like;
    post.data.likes.value = post.data.likes.like
      ? post.data.likes.value + 1
      : post.data.likes.value - 1;
    posts[postIndex] = post;

    return [200, { posts: [...posts] }];
  } catch (err) {
    return [500, { message: 'Internal server error' }];
  }
});

mock.onPost('/api/data/posts/comments/add').reply((config) => {
  try {
    const { postId, comment } = JSON.parse(config.data);
    const postIndex = posts.findIndex((x) => x.id === postId);
    const post = posts[postIndex];
    const cComments = post.data.comments || [];
    post.data.comments = [...cComments, comment];

    return [200, { posts: [...posts] }];
  } catch (err) {
    return [500, { message: 'Internal server error' }];
  }
});

mock.onPost('/api/data/posts/replies/add').reply((config) => {
  try {
    const { postId, commentId, reply } = JSON.parse(config.data);
    const postIndex = posts.findIndex((x) => x.id === postId);
    const post = posts[postIndex];
    const cComments = post.data.comments || [];
    const commentIndex = cComments.findIndex((x) => x.id === commentId);
    const comment = cComments[commentIndex];
    if (comment && comment.data && comment.data.replies)
      comment.data.replies = [...comment.data.replies, reply];

    return [200, { posts: [...posts] }];
  } catch (err) {
    return [500, { message: 'Internal server error' }];
  }
});

mock.onPost('/api/data/posts/replies/like').reply((config) => {
  try {
    const { postId, commentId } = JSON.parse(config.data);
    const postIndex = posts.findIndex((x) => x.id === postId);
    const post = posts[postIndex];
    const cComments = post.data.comments || [];
    const commentIndex = cComments.findIndex((x) => x.id === commentId);
    const comment = { ...cComments[commentIndex] };

    if (comment && comment.data && comment.data.likes)
      comment.data.likes.like = !comment.data.likes.like;
    if (comment && comment.data && comment.data.likes)
      comment.data.likes.value = comment.data.likes.like
        ? comment.data.likes.value + 1
        : comment.data.likes.value - 1;
    if (post && post.data && post.data.comments) post.data.comments[commentIndex] = comment;

    return [200, { posts: [...posts] }];
  } catch (err) {
    return [500, { message: 'Internal server error' }];
  }
});

export default posts;

===== src/_mockApis/userprofile/UsersData.ts =====
import mock from '../mock';
import { sub } from 'date-fns';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import user4 from 'src/assets/images/profile/user-4.jpg';
import user5 from 'src/assets/images/profile/user-5.jpg';
import user6 from 'src/assets/images/profile/user-6.jpg';
import user7 from 'src/assets/images/profile/user-7.jpg';
import user8 from 'src/assets/images/profile/user-8.jpg';
import user9 from 'src/assets/images/profile/user-9.jpg';
import user10 from 'src/assets/images/profile/user-10.jpg';

import s1 from 'src/assets/images/products/s1.jpg';
import s2 from 'src/assets/images/products/s2.jpg';
import s3 from 'src/assets/images/products/s3.jpg';
import s4 from 'src/assets/images/products/s4.jpg';
import s5 from 'src/assets/images/products/s5.jpg';
import s6 from 'src/assets/images/products/s6.jpg';
import s7 from 'src/assets/images/products/s7.jpg';
import s8 from 'src/assets/images/products/s8.jpg';
import s9 from 'src/assets/images/products/s9.jpg';
import s10 from 'src/assets/images/products/s10.jpg';
import s11 from 'src/assets/images/products/s11.jpg';
import s12 from 'src/assets/images/products/s12.jpg';
import { Chance } from 'chance';
import { uniqueId } from 'lodash';
import type { userType } from 'src/types/apps/users';

const chance = new Chance();

const users: userType[] = [
  {
    id: uniqueId('#follow_'),
    avatar: user1,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user2,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user3,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user4,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user5,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user6,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user7,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user8,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user9,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user10,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user1,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user2,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user3,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user4,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user5,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user6,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user7,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user8,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user9,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
  {
    id: uniqueId('#follow_'),
    avatar: user10,
    name: chance.name(),
    role: chance.profession(),
    country: chance.country({ full: true }),
    isFollowed: chance.bool(),
  },
];

const gallery = [
  {
    id: uniqueId('#gallery_'),
    cover: s1,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 8, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s2,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 8, hours: 4, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s3,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 8, hours: 3, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s4,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 8, hours: 2, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s5,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 8, hours: 1, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s6,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 7, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s7,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 6, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s8,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 5, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s9,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 4, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s10,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 3, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s11,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 2, hours: 6, minutes: 20 }),
  },
  {
    id: uniqueId('#gallery_'),
    cover: s12,
    name: chance.sentence({ words: 3 }),
    time: sub(new Date(), { days: 1, hours: 6, minutes: 20 }),
  },
];

mock.onGet('/api/data/users').reply(() => {
  return [200, users];
});

mock.onGet('/api/data/gallery').reply(() => {
  return [200, gallery];
});
