
===== src/Pages/pos/newSales/components/common/Header.tsx =====
import React, { useState } from 'react';

const Header: React.FC = () => {
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');

  const orderTypes = ['Takeaway', 'Dine In', 'Delivery'];

  return (
    <div className="header-content">
      {/* Logo */}
      <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />

      {/* Navigation */}
      <nav className="nav-items">
        <a href="#" className="nav-item">
          <img src="/images/img_sending_order.svg" alt="" />
          Today Orders
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_table_02.svg" alt="" />
          Table
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_discount_tag_01.svg" alt="" />
          Discount
        </a>
        <a href="#" className="nav-item">
          <img src="/images/img_delete_01.svg" alt="" />
          Void
        </a>
        <select 
          value={selectedOrderType}
          onChange={(e) => setSelectedOrderType(e.target.value)}
          style={{ 
            padding: '0.8rem 1.6rem', 
            borderRadius: '0.4rem',
            border: '0.1rem solid #ccc',
            fontSize: '1.6rem',
            fontFamily: 'Nunito, sans-serif'
          }}
        >
          {orderTypes.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        <button style={{ 
          padding: '0.8rem',
          background: 'none',
          border: 'none',
          cursor: 'pointer'
        }}>
          <img src="/images/img_menu_01.svg" alt="Menu" style={{ width: '2.8rem', height: '2.8rem' }} />
        </button>
      </nav>
    </div>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/PriceSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';

interface PriceSelectionPopupProps {
  product: PosProduct;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  quantity,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  // إقفال الـ popup عند الضغط خارجه
  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  // إقفال الـ popup عند الضغط على Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="popup-overlay" ref={overlayRef}>
      <div className="popup-content">
        <div className="popup-header">
          <h3 className="popup-title">{product.nameArabic}</h3>
          <button className="popup-close" onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className="popup-body">
          <div className="quantity-display">
            الكمية: {quantity}
          </div>
          
          <div className="prices-grid">
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className="price-card"
                onClick={() => onSelectPrice(price)}
              >
                <div className="price-name">{price.nameArabic}</div>
                <div className="price-value">
                  <span className="price">{price.price}</span>
                  <span className="currency">EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/index.tsx =====
// src/Pages/pos/newSales/index.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary, OrderItem, PosPrice } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('1');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  
  // API States
  const [allProducts, setAllProducts] = useState<PosProduct[]>([]);
  const [categories, setCategories] = useState<CategoryItem[]>([]);
  const [displayedProducts, setDisplayedProducts] = useState<PosProduct[]>([]);
  const [loading, setLoading] = useState(false);
  
  // إضافة states جديدة للتحكم في عرض الأطفال
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [parentCategory, setParentCategory] = useState<CategoryItem | null>(null);
  const [allCategories, setAllCategories] = useState<CategoryItem[]>([]);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // Load all data on mount
  useEffect(() => {
    loadAllData();
  }, []);

  // Update displayed products when category or search changes
  useEffect(() => {
    if (searchQuery.trim()) {
      const searchResults = posService.searchProducts(allProducts, searchQuery);
      setDisplayedProducts(searchResults);
    } else if (selectedCategory) {
      const categoryProducts = posService.getProductsByScreenId(allProducts, selectedCategory);
      setDisplayedProducts(categoryProducts);
    } else {
      setDisplayedProducts([]);
    }
  }, [selectedCategory, searchQuery, allProducts]);

  const loadAllData = async () => {
    try {
      setLoading(true);
      
      // جلب كل المنتجات أولاً
      const products = await posService.getAllPosProducts();
      setAllProducts(products);
      
      // ثم جلب الفئات
      const apiCategories = await posService.getAllCategories(products);
      setAllCategories(apiCategories); // حفظ جميع الفئات
      const rootCategories = apiCategories.filter(cat => !cat.parentId);
      setCategories(rootCategories);
      
      if (rootCategories.length > 0) {
        setSelectedCategory(rootCategories[0].id);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  // تحديث handleCategorySelect للمنطق الجديد
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      // إخفاء كل الفئات وإظهار الأطفال فقط
      setShowingChildren(categoryId);
      setParentCategory(category);
      setCategories(category.children);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // دالة الرجوع للفئة الأب
  const handleBackToParent = useCallback(async () => {
    setShowingChildren(null);
    setParentCategory(null);
    
    // إعادة تحميل الفئات الأساسية
    const rootCategories = allCategories.filter(cat => !cat.parentId);
    setCategories(rootCategories);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [allCategories]);

  // التعامل مع ضغط المنتج
  const handleProductClick = useCallback((product: PosProduct) => {
    if (product.hasMultiplePrices) {
      // فتح الـ popup لاختيار السعر
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      // إضافة للفاتورة مباشرة
      addToOrder(product, product.productPrices[0]);
    }
  }, [keypadValue]);

  // إضافة منتج للفاتورة
  const addToOrder = useCallback((product: PosProduct, price: PosPrice) => {
    const quantity = parseInt(keypadValue) || 1;
    const totalPrice = price.price * quantity;
    
    const orderItem: OrderItem = {
      id: `${product.id}_${price.id}_${Date.now()}`,
      product,
      selectedPrice: price,
      quantity,
      totalPrice,
    };

    setOrderItems(prev => [...prev, orderItem]);
    setKeypadValue('1'); // إعادة تعيين الكمية
  }, [keypadValue]);

  // التعامل مع اختيار السعر من الـ popup
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      addToOrder(selectedProduct, price);
    }
    setShowPricePopup(false);
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder]);

  // حساب ملخص الطلب
  const orderSummary: OrderSummary = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const discount = 0;
    const tax = 0;
    const service = 0;
    const total = subtotal - discount + tax + service;

    return {
      items: orderItems,
      subtotal,
      discount,
      tax,
      service,
      total
    };
  }, [orderItems]);

  // حذف منتج من الطلب
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  const handleNumberClick = useCallback((number: string) => {
    if (keypadValue === '1' && number !== '.') {
      setKeypadValue(number);
    } else if (keypadValue !== '0') {
      setKeypadValue(prev => prev + number);
    }
  }, [keypadValue]);

  const handleClearClick = useCallback(() => {
    setKeypadValue('1');
  }, []);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  return (
    <div className="pos-system">
      {/* Top Header Bar */}
      <header className="top-bar">
        <div className="top-bar-content">
          <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="logo" />
          <nav className="nav-items">
            <a href="#" className="nav-item active">
              <img src="/images/img_sending_order.svg" alt="" />
              <span>Today Orders</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_table_02.svg" alt="" />
              <span>Table</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_discount_tag_01.svg" alt="" />
              <span>Discount</span>
            </a>
            <a href="#" className="nav-item">
              <img src="/images/img_delete_01.svg" alt="" />
              <span>Void</span>
            </a>
            <select className="order-type-select">
              <option>Takeaway</option>
              <option>Dine In</option>
              <option>Delivery</option>
            </select>
            <button className="menu-button">
              <img src="/images/img_menu_01.svg" alt="Menu" />
            </button>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="main-content">
        {/* Left Section - Products Area */}
        <section className="products-section">
          {/* Number Pad Bar */}
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          {/* Action Buttons Bar */}
          <div className="action-buttons-bar">
            <div className="action-chips">
              <button 
                className={`action-chip extra ${selectedChips.includes('extra') ? 'active' : ''}`}
                onClick={() => handleChipClick('extra')}
              >
                <img src="/images/img_addcircle.svg" alt="" />
                <span>Extra</span>
              </button>
              <button 
                className={`action-chip without ${selectedChips.includes('without') ? 'active' : ''}`}
                onClick={() => handleChipClick('without')}
              >
                <img src="/images/img_removecircle.svg" alt="" />
                <span>Without</span>
              </button>
              <button 
                className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
                onClick={() => handleChipClick('offer')}
              >
                <img src="/images/img_tags.svg" alt="" />
                <span>Offer</span>
              </button>
            </div>
            
            <div className="search-container">
              <img src="/images/img_search01.svg" alt="search" className="search-icon" />
              <input
                type="text"
                placeholder="Search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
              <button className="filter-button">
                <img src="/images/img_group_7.svg" alt="Filter" />
              </button>
            </div>
          </div>

          {/* Products Grid */}
          <div className="product-grid">
            {loading ? (
              <div className="loading-message">Loading...</div>
            ) : (
              displayedProducts.map((product) => (
                <button
                  key={product.id}
                  onClick={() => handleProductClick(product)}
                  className="product-card"
                >
                  <img src={product.image} alt={product.name} className="product-image" />
                  <div className="product-info">
                    <div className="product-name">{product.nameArabic}</div>
                    {!product.hasMultiplePrices && product.displayPrice && (
                      <div className="product-price">
                        <span className="price">{product.displayPrice}</span>
                        <span className="currency">EGP</span>
                      </div>
                    )}
                  </div>
                </button>
              ))
            )}
          </div>
        </section>

 {/* Categories Sidebar */}
      <aside className="categories-sidebar">
        <div className="categories-list">
          {/* زر الرجوع إذا كنا نعرض الأطفال */}
          {showingChildren && (
            <button
              onClick={handleBackToParent}
              className="category-item back-button"
            >
              <ArrowBackIcon />
              <span>رجوع</span>
            </button>
          )}
          
          {/* عرض الفئات */}
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
              className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
            >
              <img src={category.image} alt={category.name} />
              <span>{category.nameArabic}</span>
            </button>
          ))}
        </div>
      </aside>

        {/* Order Summary */}
        <aside className="order-summary">
          <div className="order-header">
            <div className="order-number">#123</div>
            <div className="order-total">
              <span className="amount">{orderSummary.total.toFixed(2)}</span>
              <span className="currency">EGP</span>
            </div>
          </div>

          <div className="order-content">
            <h3 className="order-title">Order Details</h3>

            <div className="customer-input">
              <input
                type="text"
                placeholder="Walk in Customer"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                className="customer-field"
              />
              <button className="customer-button">
                <img src="/images/img_group_1000004320.svg" alt="Add customer" />
              </button>
            </div>

            <div className="order-items">
              {orderSummary.items.map((item) => (
                <div key={item.id} className="order-item">
                  <div className="item-details">
                    <button 
                      className="delete-button"
                      onClick={() => removeOrderItem(item.id)}
                    >
                      <img src="/images/img_delete_02.svg" alt="Remove" />
                    </button>
                    <div className="item-info">
                      <div className="item-name">
                        {item.quantity} X {item.product.nameArabic}
                        {/* إضافة اسم الحجم جنب اسم الصنف */}
                        {item.product.hasMultiplePrices && (
                          <span className="item-size-inline"> - {item.selectedPrice.nameArabic}</span>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="item-prices">
                    <div className="item-price">{item.selectedPrice.price}</div>
                    <div className="item-total">{item.totalPrice}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="order-footer">
            <div className="summary-rows">
              <div className="summary-row">
                <span>Sub Total</span>
                <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Discount</span>
                <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Tax</span>
                <span>{orderSummary.tax.toFixed(2)} <small>EGP</small></span>
              </div>
              <div className="summary-row">
                <span>Service</span>
                <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
              </div>
            </div>

            <div className="total-row">
              <span>Total</span>
              <span>{orderSummary.total.toFixed(2)} <small>EGP</small></span>
            </div>

            <div className="action-buttons">
              <button className="action-button send">
                <img src="/images/img_tabler_send.svg" alt="Send" />
                <span>Send</span>
              </button>
              <button className="action-button print">
                <img src="/images/img_printer.svg" alt="Print" />
                <span>Print</span>
              </button>
              <button className="action-button pay">
                <img src="/images/img_payment_02.svg" alt="Pay" />
                <span>Pay</span>
              </button>
            </div>
          </div>
        </aside>
      </main>

      {/* Price Selection Popup */}
      <PriceSelectionPopup
        product={selectedProduct!}
        quantity={parseInt(keypadValue) || 1}
        isOpen={showPricePopup}
        onClose={() => setShowPricePopup(false)}
        onSelectPrice={handlePriceSelect}
      />
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/popup.css =====
/* src/Pages/pos/newSales/styles/popup.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.popup-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.popup-title {
  font-size: 20px;
  font-weight: 700;
  color: var(--text-primary);
  margin: 0;
}

.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
}


.popup-close:hover {
  background: #f0f0f0;
  transform: scale(1.1);
}

.popup-close img {
  width: 20px;
  height: 20px;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
  transition: color 0.2s ease;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

.popup-body {
  padding: 20px;
}

.quantity-display {
  text-align: center;
  font-size: 18px;
  font-weight: 600;
  color: var(--primary-blue);
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 8px;
}

.prices-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
}

.price-card {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.price-card:hover {
  border-color: var(--primary-blue);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.price-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  text-align: center;
}

.price-value {
  display: flex;
  align-items: baseline;
  gap: 5px;
}

.price-value .price {
  font-size: 20px;
  font-weight: 700;
  color: var(--primary-blue);
}

.price-value .currency {
  font-size: 14px;
  color: var(--text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .popup-content {
    width: 95%;
    margin: 20px;
  }
  
  .prices-grid {
    grid-template-columns: 1fr;
  }
  
  .popup-header {
    padding: 15px;
  }
  
  .popup-body {
    padding: 15px;
  }
}



@media (max-width: 768px) {
  .popup-close {
    width: 32px;
    height: 32px;
    padding: 6px;
  }
  
  .popup-close .MuiSvgIcon-root {
    font-size: 18px !important;
  }
}
===== src/Pages/pos/newSales/styles/responsive.css =====
/* src/Pages/pos/newSales/styles/responsive.css */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');


html[dir="rtl"] .pos-system,
html[dir="rtl"] .pos-system * {
  direction: ltr !important;
}


/* تحديد نظام الوحدات المرن */
:root {
  --base-font-size: clamp(10px, 0.8vw, 16px);
  --scale-factor: clamp(0.8, 1vw, 1.2);
  
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
  --spacing-xxl: calc(3rem * var(--scale-factor));
  
  /* Component heights */
  --header-height: clamp(60px, 8vh, 100px);
  --keypad-height: clamp(80px, 10vh, 120px);
  --action-bar-height: clamp(50px, 7vh, 80px);
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: var(--base-font-size);
  height: 100%;
}

body {
  font-family: 'Nunito', sans-serif;
  background-color: var(--bg-main);
  color: var(--text-primary);
  height: 100%;
  overflow: hidden;
    direction: ltr !important;

}

/* Main container */
.pos-system {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
    direction: ltr !important;
}

/* Top Bar */
.top-bar {
  height: var(--header-height);
  background: var(--bg-white);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.top-bar-content {
  height: 100%;
  padding: 0 var(--spacing-xl);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  text-decoration: none;
  color: var(--text-primary);
  font-size: clamp(12px, 1.2vw, 18px);
  font-weight: 500;
  transition: all 0.2s ease;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: var(--primary-blue);
}

.nav-item img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

.order-type-select {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: clamp(12px, 1.2vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: var(--bg-white);
  min-width: 120px;
}

.menu-button {
  padding: var(--spacing-sm);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(20px, 2vw, 28px);
  height: clamp(20px, 2vw, 28px);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  overflow: hidden;
}

/* Products Section */
.products-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  overflow: hidden;
}

/* Number Pad Bar */
.number-pad-bar {
  height: var(--keypad-height);
  display: flex;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1px;
  background: var(--border-color);
}

.keypad-key {
  background: var(--bg-white);
  border: none;
  font-size: clamp(18px, 2.5vw, 32px);
  font-weight: 600;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypad-key:hover {
  background: #f8f9fa;
}

.keypad-display {
  width: clamp(120px, 15vw, 200px);
  background: var(--primary-blue);
  color: white;
  font-size: clamp(20px, 2.8vw, 36px);
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Action Buttons Bar */
.action-buttons-bar {
  height: var(--action-bar-height);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  flex-shrink: 0;
}

.action-chips {
  display: flex;
  gap: var(--spacing-md);
}

.action-chip {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-md) var(--spacing-md);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(12px, 1.4vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.action-chip img {
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
}

.action-chip.extra { background: var(--primary-green); }
.action-chip.without { background: var(--primary-red); }
.action-chip.offer { background: var(--primary-orange); }

.action-chip:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.search-container {
  position: relative;
  display: flex;
  background: var(--bg-white);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  height: 85%;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
  z-index: 1;
}

.search-input {
  width: clamp(200px, 25vw, 350px);
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: calc(var(--spacing-md) * 2 + 20px);
  border: none;
  font-size: clamp(12px, 1.4vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
  height: 100%;
}

.search-input:focus {
  outline: none;
}

.filter-button {
  width: clamp(40px, 5vw, 60px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.filter-button:hover {
  background: #025bb5;
}

.filter-button img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

/* Product Grid */
.product-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: var(--spacing-sm);
  padding: var(--spacing-xs);
    overflow-y: auto;
  scrollbar-width: none; /* Firefox */
}


.product-grid::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-grid::-webkit-scrollbar-track {
  background: transparent;
}

.product-grid::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.product-card {
  aspect-ratio: 3/4;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: none;
  display: flex;
  flex-direction: column;
    min-width: 0; /* للسماح بالتقلص */

}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 70%;
  object-fit: cover;
    flex-shrink: 0;

}

.product-info {
  height: 30%;
  padding: clamp(4px, 0.8vw, 12px);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: clamp(4px, 0.6vw, 8px);
  width: 100%;
  min-height: 0;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1.2vw, 16px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
  text-align: right; /* محاذاة لليمين للنص العربي */
  flex: 1; /* يأخذ المساحة المتاحة */
  min-width: 0; /* يسمح بالتقلص */
  word-wrap: break-word;
    flex-direction: row; /* تغيير من column إلى row */

  overflow-wrap: break-word;
  hyphens: auto;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* السماح بسطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: clamp(2px, 0.3vw, 4px);
  width: 100%;
}

.product-price .price {
  font-size: clamp(9px, 1.4vw, 18px);
  font-weight: 700;
  color: var(--text-primary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}
.product-price .currency {
  font-size: clamp(7px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-secondary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}

/* Categories Sidebar */
.categories-sidebar {
  width: clamp(80px, 10vw, 120px);
  background: transparent;
  flex-shrink: 0;
}

.categories-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  height: 100%;
  overflow-y: auto;
  padding: var(--spacing-sm);
 scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.categories-list::-webkit-scrollbar {
  width: 4px;
}

.categories-list::-webkit-scrollbar-track {
  background: transparent;
}

.categories-list::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.category-item {
  aspect-ratio: 1;
  background: var(--bg-white);
  border-radius: 8px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-sm);
  text-align: center;
}

.category-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border-color: var(--primary-blue);
}

.category-item img {
  width: clamp(24px, 3vw, 48px);
  height: clamp(24px, 3vw, 48px);
  object-fit: contain;
}

.category-item span {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
}

/* Order Summary */
.order-summary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.order-header {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.order-total {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.order-total .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.order-total .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

.order-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.order-content::-webkit-scrollbar {
  width: 6px;
}

.order-content::-webkit-scrollbar-track {
  background: transparent;
}

.order-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.order-title {
  font-size: clamp(14px, 1.6vw, 20px);
  font-weight: 700;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  
}

.customer-input {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customer-field {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
}

.customer-field:focus {
  outline: none;
}

.customer-button {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customer-button:hover {
  background: #025bb5;
}

.customer-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.order-items {
  max-height: 50vh; /* زيادة من 40vh إلى 50vh */
  overflow-y: auto;
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.order-items::-webkit-scrollbar {
  width: 4px;
}

.order-items::-webkit-scrollbar-track {
  background: transparent;
}

.order-items::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.item-details {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0; /* للسماح بالتقلص */
}

.delete-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.delete-button:hover {
  background: rgba(229, 57, 53, 0.1);
}

.delete-button img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.item-info {
  flex: 1;
  min-width: 0;
}

.item-name {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
}

.item-extra {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.extra-price,
.extra-total {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
}

.item-prices {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  min-width: fit-content;
}

.item-price::after {
  content: "|";
  margin-left: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: normal;
}

.item-price {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
}

.item-total {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
}

.order-footer {
  padding: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm); /* كان var(--spacing-md) */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px); /* كان 11px, 1.3vw, 16px */
  font-weight: 500;
  line-height: 1.3; /* إضافة line-height للوضوح */
}

.summary-row span:last-child {
  font-weight: 700;
  color: var(--text-primary); /* تأكيد اللون */
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px); /* كان 14px, 1.6vw, 20px */
  font-weight: 700;
  padding-top: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.action-button {
  height: clamp(40px, 6vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
}

.action-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.action-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.action-button.send { background: var(--primary-red); }
.action-button.print { background: var(--primary-blue); }
.action-button.pay { background: var(--primary-green); }

/* Responsive breakpoints */
@media (max-width: 1366px) {
  :root {
    --scale-factor: 0.9;
  }
    .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.8);
  }
  
  .order-items {
    max-height: 45vh;
  }
  
}

@media (max-width: 1024px) {
  :root {
    --scale-factor: 0.8;
  }
  
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .order-items {
    max-height: 42vh;
  }
}

@media (min-width: 1920px) {
  :root {
    --scale-factor: 1.1;
  }
}

@media (min-width: 2560px) {
  :root {
    --scale-factor: 1.3;
  }
}

/* Print styles */
@media print {
  .pos-system {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
}



/* إضافة media query لمنطقة 1400-1600px */
@media (min-width: 1400px) and (max-width: 1600px) {
  :root {
    --scale-factor: 0.95; /* قيمة وسط */
    --base-font-size: clamp(12px, 1vw, 18px); /* تحسين الخط */
  }
  
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: var(--spacing-md);
  }
  
  /* تثبيت ارتفاعات العناصر */
  .action-buttons-bar {
    height: clamp(55px, 8vh, 85px);
  }
  
  .number-pad-bar {
    height: clamp(85px, 11vh, 125px);
  }
  
  .top-bar {
    height: clamp(65px, 9vh, 105px);
  }
}

.loading-message {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  font-size: 1.6rem;
  color: var(--text-secondary);
}

.item-size {
  font-size: clamp(9px, 1vw, 12px);
  color: var(--primary-blue);
  font-weight: 500;
}

.product-card .product-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-xs);
}

.product-card .product-name {
  order: 1;
}

.product-card .product-price {
  order: 2;
}


.item-size-inline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em; /* أصغر قليلاً من اسم الصنف */
}

.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

/* تحسين responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .product-name {
    font-size: clamp(7px, 1.1vw, 14px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(8px, 1.3vw, 16px);
  }
  
  .product-price .currency {
    font-size: clamp(6px, 0.9vw, 12px);
  }
}

@media (max-width: 1024px) {
  .product-name {
    font-size: clamp(6px, 1vw, 12px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(7px, 1.2vw, 14px);
  }
  
  .product-price .currency {
    font-size: clamp(5px, 0.8vw, 10px);
  }
  
  .item-prices {
    flex-direction: column;
    gap: 2px;
    align-items: flex-end;
  }
  
  .item-price::after {
    display: none;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .product-name {
    font-size: clamp(10px, 1.4vw, 20px);
  }
  
  .product-price .price {
    font-size: clamp(12px, 1.6vw, 22px);
  }
  
  .product-price .currency {
    font-size: clamp(9px, 1.2vw, 18px);
  }
}

/* جعل الصفحة دائماً LTR */
.pos-system {
  direction: ltr !important;
}

.pos-system * {
  direction: ltr !important;
}

/* تحسين شكل الـ Material UI Icons */
.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

.back-button .MuiSvgIcon-root {
  font-size: 18px !important;
  color: var(--text-primary) !important;
}

/* تحسين شكل زر الإغلاق في الـ popup */
.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup-close:hover {
  background: #f0f0f0;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

/* التأكد من أن الـ popup overlay يمكن الضغط عليه */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  cursor: pointer; /* إضافة cursor للإشارة أنه قابل للضغط */
}

.popup-content {
  cursor: default; /* إزالة cursor من المحتوى */
  /* باقي الـ styles كما هي */
}

/* إضافة animation للـ popup */
.popup-overlay {
  animation: fadeIn 0.2s ease-out;
}

.popup-content {
  animation: slideIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  notes?: string;
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}
