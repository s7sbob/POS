
===== src/Pages/pos/newSales/components/ActionButtons.tsx =====
// src/Pages/pos/newSales/components/ActionButtons.tsx
import React from 'react';

interface ActionButtonsProps {
  selectedChips: string[];
  onChipClick: (chipType: string) => void;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  onExtraClick: () => void;
  onWithoutClick: () => void;
  searchQuery: string;
  onSearchChange: (query: string) => void;
    hasSelectedOrderItem: boolean; // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©

}

const ActionButtons: React.FC<ActionButtonsProps> = ({
  selectedChips,
  onChipClick,
  isExtraMode,
  isWithoutMode,
  onExtraClick,
  onWithoutClick,
  searchQuery,
  onSearchChange,
  hasSelectedOrderItem

}) => {
  return (
    <div className="action-buttons-bar">
      <div className="action-chips">
        <button 
          className={`action-chip extra ${selectedChips.includes('extra') || isExtraMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onExtraClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÜÿ™ÿ¨ ŸÖŸÜ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ£ŸàŸÑÿßŸã' : ''}
        >
          <img src="/images/img_addcircle.svg" alt="" />
          <span>Extra</span>
        </button>
        <button 
          className={`action-chip without ${selectedChips.includes('without') || isWithoutMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onWithoutClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÜÿ™ÿ¨ ŸÖŸÜ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ£ŸàŸÑÿßŸã' : ''}
        >
          <img src="/images/img_removecircle.svg" alt="" />
          <span>Without</span>
        </button>
        <button 
          className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
          onClick={() => onChipClick('offer')}
        >
          <img src="/images/img_tags.svg" alt="" />
          <span>Offer</span>
        </button>
      </div>
      
      <div className="search-container">
        <img src="/images/img_search01.svg" alt="search" className="search-icon" />
        <input
          type="text"
          placeholder="Search"
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          className="search-input"
        />
        <button className="filter-button">
          <img src="/images/img_group_7.svg" alt="Filter" />
        </button>
      </div>
    </div>
  );
};

export default ActionButtons;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
// src/Pages/pos/newSales/components/Header.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import { DeliveryCompany } from '../../../../../utils/api/pagesApi/deliveryCompaniesApi';
import { Invoice } from '../../../../../utils/api/pagesApi/invoicesApi'; // ÿ•ÿ∂ÿßŸÅÿ© ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ Invoice type
import '../../styles/Header.css';
import TodayOrdersPopup from '../TodayOrdersPopup';

interface HeaderProps {
  selectedOrderType: string;
  onOrderTypeChange: (type: string) => void;
  onResetOrder?: () => void;
  onTableClick?: () => void;
  tableDisplayName?: string;
  deliveryCompanies?: DeliveryCompany[];
  selectedDeliveryCompany?: DeliveryCompany | null;
  onDeliveryCompanySelect?: (company: DeliveryCompany) => void;
  selectedCustomer?: Customer | null;
  selectedAddress?: CustomerAddress | null;
  // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© prop ŸÖÿ∑ŸÑŸàÿ® ŸÑÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ®
  onViewOrder?: (invoiceData: Invoice & { isEditMode: boolean }) => void;
}

const Header: React.FC<HeaderProps> = ({ 
  selectedOrderType, 
  onOrderTypeChange, 
  onResetOrder,
  onTableClick,
  tableDisplayName = 'Table',
  deliveryCompanies = [],
  selectedDeliveryCompany,
  onDeliveryCompanySelect,
  selectedCustomer,
  selectedAddress,
  onViewOrder // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© ŸÅŸä destructuring
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [showTodayOrders, setShowTodayOrders] = useState(false);

  const orderTypes = [
    { id: 1, name: 'Takeaway', displayName: 'Takeaway', icon: '/images/takeaway.png', color: '#28a745', description: 'ÿπŸÖŸäŸÑ Ÿäÿ£ÿÆÿ∞ ÿßŸÑÿ∑ŸÑÿ®' },
    { id: 2, name: 'Dine-in', displayName: 'Dine-in', icon: '/images/dine-in.png', color: '#007bff', description: 'ÿ™ŸÜÿßŸàŸÑ ŸÅŸä ÿßŸÑŸÖÿ∑ÿπŸÖ' },
    { id: 3, name: 'Delivery', displayName: 'Delivery', icon: '/images/delivery.png', color: '#dc3545', description: 'ÿ™ŸàÿµŸäŸÑ ŸÑŸÑŸÖŸÜÿ≤ŸÑ' },
    { id: 4, name: 'Pickup', displayName: 'Pickup', icon: '/images/pickup.png', color: '#ffc107', description: 'ÿßÿ≥ÿ™ŸÑÿßŸÖ ŸÖŸÜ ÿßŸÑŸÖÿ∑ÿπŸÖ' }
  ];

  const handleDeliveryCompanySelect = (company: DeliveryCompany) => {
    if (onDeliveryCompanySelect) {
      onDeliveryCompanySelect(company);
    }
    setIsDropdownOpen(false);
  };

  const activeDeliveryCompanies = deliveryCompanies.filter(company => company.isActive);

  // ŸÖÿπÿßŸÑÿ¨ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿ≤ÿ± Today Orders
  const handleTodayOrdersClick = (e: React.MouseEvent) => {
    e.preventDefault();
    setShowTodayOrders(true);
  };

  // ŸÖÿπÿßŸÑÿ¨ ÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ® - ÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
  const handleViewOrder = (invoiceData: Invoice & { isEditMode: boolean }) => {
    console.log('Header: ÿ™ŸÖ ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ® ŸÑŸÑÿπÿ±ÿ∂:', invoiceData);
    
    // ÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
    if (onViewOrder) {
      onViewOrder(invoiceData);
    } else {
      console.warn('Header: onViewOrder prop ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±');
    }
    
    // ÿ•ÿ∫ŸÑÿßŸÇ ŸÜÿßŸÅÿ∞ÿ© Today Orders
    setShowTodayOrders(false);
  };

  // ÿ•ÿ∫ŸÑÿßŸÇ dropdown ÿπŸÜÿØ ÿßŸÑŸÜŸÇÿ± ÿÆÿßÿ±ÿ¨Ÿá
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <>
      <header className="pos-header">
        <div className="header-content">
          <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="header-logo" />

          {/* Customer Info Section */}
          {selectedCustomer && (
            <div className="customer-info-section">
              <div className="customer-info-card">
                <div className="customer-basic-info">
                  <div className="customer-name">
                    <span className="customer-icon">üë§</span>
                    <span>{selectedCustomer.name}</span>
                    {selectedCustomer.isVIP && <span className="vip-badge">VIP</span>}
                  </div>
                  <div className="customer-phone">
                    <span className="phone-icon">üìû</span>
                    <span>{selectedCustomer.phone1}</span>
                  </div>
                </div>

                {selectedAddress && selectedAddress.addressLine && (
                  <div className="customer-address">
                    <span className="address-icon">üìç</span>
                    <span className="address-text">
                      {selectedAddress.addressLine}
                      {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
                    </span>
                  </div>
                )}
              </div>
            </div>
          )}

          <nav className="header-nav">
            <a
              href="#"
              className="nav-item active today-orders-btn"
              onClick={handleTodayOrdersClick}
              title="ÿπÿ±ÿ∂ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸäŸàŸÖ"
            >
              <img src="/images/img_sending_order.svg" alt="Today Orders" />
              <span>Today Orders</span>
            </a>

            <a 
              href="#" 
              className="nav-item" 
              onClick={(e) => { 
                e.preventDefault(); 
                if (onTableClick) onTableClick(); 
              }}
            >
              <img src="/images/img_table_02.svg" alt="Table" />
              <span>{tableDisplayName}</span>
            </a>

            <a href="#" className="nav-item">
              <img src="/images/img_discount_tag_01.svg" alt="Discount" />
              <span>Discount</span>
            </a>

            <a href="#" className="nav-item">
              <img src="/images/img_delete_01.svg" alt="Void" />
              <span>Void</span>
            </a>

            <button 
              className="order-type-display clickable" 
              onClick={onResetOrder}
            >
              {selectedOrderType}
            </button>

            <div className="menu-dropdown-container" ref={dropdownRef}>
              <button 
                className="menu-button" 
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                aria-expanded={isDropdownOpen}
                title="ÿßŸÑŸÇÿßÿ¶ŸÖÿ©"
              >
                <img src="/images/img_menu_01.svg" alt="Menu" />
              </button>

              {isDropdownOpen && (
                <div className="professional-dropdown">
                  <div className="dropdown-section">
                    <div className="section-header">
                      <h3 className="section-title">ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®</h3>
                      <div className="section-divider"></div>
                    </div>

                    <div className="order-types-grid">
                      {orderTypes.map((type) => (
                        <button
                          key={type.id}
                          className={`order-type-card ${selectedOrderType === type.name ? 'selected' : ''}`}
                          onClick={() => { 
                            onOrderTypeChange(type.name); 
                            setIsDropdownOpen(false); 
                          }}
                          style={{ '--accent-color': type.color } as React.CSSProperties}
                          title={type.description}
                        >
                          <div className="card-icon-container">
                            <img src={type.icon} alt={type.displayName} className="card-icon" />
                          </div>
                          <div className="card-content">
                            <div className="card-title">{type.displayName}</div>
                          </div>
                          <div className="card-check">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                              <path d="M13 4L6 11L3 8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {activeDeliveryCompanies.length > 0 && (
                    <div className="dropdown-section">
                      <div className="section-header">
                        <h3 className="section-title">ÿ¥ÿ±ŸÉÿßÿ° ÿßŸÑÿ™ŸàÿµŸäŸÑ</h3>
                        <div className="section-divider"></div>
                      </div>

                      <div className="delivery-partners-grid">
                        {activeDeliveryCompanies.map((company) => (
                          <button
                            key={company.id}
                            className={`delivery-partner-card ${selectedDeliveryCompany?.id === company.id ? 'selected' : ''}`}
                            onClick={() => handleDeliveryCompanySelect(company)}
                            style={{
                              '--partner-color': '#0373ed',
                              '--partner-bg': '#f8f9fa'
                            } as React.CSSProperties}
                            title={`ÿßÿÆÿ™Ÿäÿßÿ± ${company.name} - ${company.paymentType}`}
                          >
                            <div className="partner-icon-container">
                              <img src="/images/default-delivery.png" alt={company.name} className="partner-icon" />
                            </div>
                            <div className="partner-content">
                              <div className="partner-name">{company.name}</div>
                              <div className="partner-status">{company.paymentType}</div>
                            </div>
                            <div className="partner-badge">
                              <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                                <circle cx="6" cy="6" r="6" fill="currentColor" />
                              </svg>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </nav>
        </div>
      </header>

      {/* Today Orders Popup */}
      <TodayOrdersPopup
        isOpen={showTodayOrders}
        onClose={() => setShowTodayOrders(false)}
        currentOrderType={selectedOrderType}
        onViewOrder={handleViewOrder}
      />
    </>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx =====
// src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  TextField, Button, Box, Typography, Card, CardContent,
  Radio, RadioGroup, FormControlLabel, Divider, IconButton
} from '@mui/material';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import { Edit as EditIcon, LocationOn as LocationIcon } from '@mui/icons-material';
import CustomerForm from '../../customers/components/CustomerForm';

interface CustomerDetailsPopupProps {
  open: boolean;
  customer: Customer | null;
  onClose: () => void;
  onSelectCustomer: (customer: Customer, address: CustomerAddress) => void;
}

const CustomerDetailsPopup: React.FC<CustomerDetailsPopupProps> = ({
  open,
  customer,
  onClose,
  onSelectCustomer
}) => {
  const [selectedAddressId, setSelectedAddressId] = useState<string>('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [zones, setZones] = useState<any[]>([]);
  const [updatedCustomer, setUpdatedCustomer] = useState<Customer | null>(null);

  useEffect(() => {
    if (customer) {
      setUpdatedCustomer(customer);
      setSelectedAddressId('');
    }
  }, [customer]);

  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    if (open) {
      loadZones();
    }
  }, [open]);

  const handleAddressSelect = (addressId: string) => {
    setSelectedAddressId(addressId);
  };

  const handleConfirmSelection = () => {
    if (updatedCustomer && selectedAddressId) {
      const selectedAddress = updatedCustomer.addresses.find(
        addr => addr.id === selectedAddressId
      );
      if (selectedAddress) {
        onSelectCustomer(updatedCustomer, selectedAddress);
        onClose();
      }
    }
  };

  const handleEditCustomer = () => {
    setShowEditForm(true);
  };

  const handleCustomerUpdate = async (data: any) => {
    try {
      const updated = await customersApi.update(data);
      setUpdatedCustomer(updated);
      setShowEditForm(false);
    } catch (error) {
      console.error('Error updating customer:', error);
    }
  };

  const getZoneName = (zoneId: string): string => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.name : 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ';
  };

  const getDeliveryCharge = (zoneId: string): number => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.deliveryCharge : 0;
  };

  if (!updatedCustomer) return null;

  return (
    <>
      <Dialog 
        open={open && !showEditForm} 
        onClose={onClose} 
        maxWidth="md" 
        fullWidth
        PaperProps={{
          style: { minHeight: '600px' }
        }}
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6">ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ</Typography>
            <IconButton onClick={handleEditCustomer} color="primary">
              <EditIcon />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          {/* Customer Basic Info */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
              </Typography>
              <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 2 }}>
                <TextField
                  label="ÿßŸÑÿßÿ≥ŸÖ"
                  value={updatedCustomer.name}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                <TextField
                  label="ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä"
                  value={updatedCustomer.phone1}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                {updatedCustomer.phone2 && (
                  <TextField
                    label="ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ´ÿßŸÜŸä"
                    value={updatedCustomer.phone2}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
                {updatedCustomer.phone3 && (
                  <TextField
                    label="ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ´ÿßŸÑÿ´"
                    value={updatedCustomer.phone3}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
              </Box>
              
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                {updatedCustomer.isVIP && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: 'gold', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    ÿπŸÖŸäŸÑ VIP
                  </Typography>
                )}
                {updatedCustomer.isBlocked && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: '#f44336', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    ŸÖÿ≠ÿ∏Ÿàÿ±
                  </Typography>
                )}
              </Box>
            </CardContent>
          </Card>

          <Divider sx={{ my: 2 }} />

          {/* Address Selection */}
          <Typography variant="h6" sx={{ mb: 2 }}>
            ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÜŸàÿßŸÜ ŸÑŸÑÿ∑ŸÑÿ® ({updatedCustomer.addresses.length})
          </Typography>
          
          <RadioGroup
            value={selectedAddressId}
            onChange={(e) => handleAddressSelect(e.target.value)}
          >
            {updatedCustomer.addresses.map((address) => (
              <FormControlLabel
                key={address.id}
                value={address.id}
                control={<Radio />}
                label={
                  <Card 
                    sx={{ 
                      width: '100%', 
                      ml: 1,
                      border: selectedAddressId === address.id ? '2px solid #1976d2' : '1px solid #e0e0e0'
                    }}
                  >
                    <CardContent sx={{ py: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                        <LocationIcon color="primary" />
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body1" fontWeight="bold">
                            {address.addressLine}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©: {getZoneName(address.zoneId)}
                          </Typography>
                          <Typography variant="body2" color="primary">
                            ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ: {getDeliveryCharge(address.zoneId)} ÿ¨ŸÜŸäŸá
                          </Typography>
                          
                          {address.floor && (
                            <Typography variant="body2" color="text.secondary">
                              ÿßŸÑÿØŸàÿ±: {address.floor}
                            </Typography>
                          )}
                          {address.apartment && (
                            <Typography variant="body2" color="text.secondary">
                              ÿßŸÑÿ¥ŸÇÿ©: {address.apartment}
                            </Typography>
                          )}
                          {address.landmark && (
                            <Typography variant="body2" color="text.secondary">
                              ÿπŸÑÿßŸÖÿ© ŸÖŸÖŸäÿ≤ÿ©: {address.landmark}
                            </Typography>
                          )}
                          {address.notes && (
                            <Typography variant="body2" color="text.secondary">
                              ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™: {address.notes}
                            </Typography>
                          )}
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                }
                sx={{ 
                  alignItems: 'flex-start',
                  mb: 1,
                  ml: 0,
                  mr: 0
                }}
              />
            ))}
          </RadioGroup>

          {updatedCustomer.addresses.length === 0 && (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿπŸÜÿßŸàŸäŸÜ ŸÖÿ≥ÿ¨ŸÑÿ© ŸÑŸáÿ∞ÿß ÿßŸÑÿπŸÖŸäŸÑ
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            ÿ•ŸÑÿ∫ÿßÿ°
          </Button>
          <Button 
            variant="contained" 
            onClick={handleConfirmSelection}
            disabled={!selectedAddressId}
          >
            ÿ≠ŸÅÿ∏ ŸàÿßÿÆÿ™Ÿäÿßÿ±
          </Button>
        </DialogActions>
      </Dialog>

      {/* Customer Edit Form */}
      {showEditForm && (
        <CustomerForm
          open={showEditForm}
          mode="edit"
          initialValues={updatedCustomer}
          onClose={() => setShowEditForm(false)}
          onSubmit={handleCustomerUpdate}
        />
      )}
    </>
  );
};

export default CustomerDetailsPopup;

===== src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx =====
// src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OrderItem } from '../types/PosSystem';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import styles from '../styles/OrderItemDetailsPopup.module.css';

interface OrderItemDetailsPopupProps {
  orderItem: OrderItem | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdateItem: (itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => void;
  onRemoveItem: (itemId: string) => void;
}

const OrderItemDetailsPopup: React.FC<OrderItemDetailsPopupProps> = ({
  orderItem,
  isOpen,
  onClose,
  onUpdateItem
}) => {
  const [quantity, setQuantity] = useState(1);
  const [notes, setNotes] = useState('');
  const [discountPercentage, setDiscountPercentage] = useState(0);
  const [discountAmount, setDiscountAmount] = useState(0);
  
  // States ŸÖÿ§ŸÇÿ™ÿ© ŸÑŸÑÿ™ÿ≠ŸÉŸÖ ŸÅŸä ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
  const [tempDiscountPercentage, setTempDiscountPercentage] = useState('0');
  const [tempDiscountAmount, setTempDiscountAmount] = useState('0');
  
  // Refs ŸÑŸÑŸÄ inputs
  const percentageInputRef = useRef<HTMLInputElement>(null);
  const amountInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (orderItem) {
      setQuantity(orderItem.quantity);
      setNotes(orderItem.notes || '');
      const currentDiscount = orderItem.discountAmount || 0;
      const baseTotal = orderItem.selectedPrice.price * orderItem.quantity;
      const currentDiscountPercentage = baseTotal > 0 ? (currentDiscount / baseTotal) * 100 : 0;
      setDiscountAmount(currentDiscount);
      setDiscountPercentage(currentDiscountPercentage);
      setTempDiscountAmount(currentDiscount.toFixed(2));
      setTempDiscountPercentage(currentDiscountPercentage.toFixed(1));
    }
  }, [orderItem]);

  if (!isOpen || !orderItem) return null;

  const unitPrice = orderItem.selectedPrice.price;
  const subItemsTotal = orderItem.subItems?.reduce((sum, item) => sum + item.price, 0) || 0;
  const baseTotal = (unitPrice * quantity) + subItemsTotal;
  const finalTotal = baseTotal - discountAmount;

  const handleQuantityChange = (change: number) => {
    const newQuantity = Math.max(1, quantity + change);
    setQuantity(newQuantity);
    
    const newBaseTotal = (unitPrice * newQuantity) + subItemsTotal;
    const newDiscountAmount = (newBaseTotal * discountPercentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ∫ŸäŸäÿ± ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿÆÿµŸÖ
  const handleDiscountPercentageChange = (value: number) => {
    const percentage = Math.max(0, Math.min(100, value));
    setDiscountPercentage(percentage);
    const newDiscountAmount = (baseTotal * percentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ∫ŸäŸäÿ± ŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ
  const handleDiscountAmountChange = (value: number) => {
    const amount = Math.max(0, Math.min(baseTotal, value));
    setDiscountAmount(amount);
    const newDiscountPercentage = baseTotal > 0 ? (amount / baseTotal) * 100 : 0;
    setDiscountPercentage(newDiscountPercentage);
    setTempDiscountPercentage(newDiscountPercentage.toFixed(1));
  };

  // ŸÖÿπÿßŸÑÿ¨ Focus ŸÑŸÑŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÖÿ¶ŸàŸäÿ©
  const handlePercentageFocus = () => {
    if (percentageInputRef.current) {
      percentageInputRef.current.select();
    }
  };

  // ŸÖÿπÿßŸÑÿ¨ Focus ŸÑŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ
  const handleAmountFocus = () => {
    if (amountInputRef.current) {
      amountInputRef.current.select();
    }
  };

  // ŸÖÿπÿßŸÑÿ¨ Blur ŸÑŸÑŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÖÿ¶ŸàŸäÿ©
  const handlePercentageBlur = () => {
    const value = parseFloat(tempDiscountPercentage) || 0;
    handleDiscountPercentageChange(value);
  };

  // ŸÖÿπÿßŸÑÿ¨ Blur ŸÑŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ
  const handleAmountBlur = () => {
    const value = parseFloat(tempDiscountAmount) || 0;
    handleDiscountAmountChange(value);
  };

  // ŸÖÿπÿßŸÑÿ¨ Enter ŸÑŸÑŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÖÿ¶ŸàŸäÿ©
  const handlePercentageKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountPercentage) || 0;
      handleDiscountPercentageChange(value);
      percentageInputRef.current?.blur();
    }
  };

  // ŸÖÿπÿßŸÑÿ¨ Enter ŸÑŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ
  const handleAmountKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountAmount) || 0;
      handleDiscountAmountChange(value);
      amountInputRef.current?.blur();
    }
  };

  const handleConfirm = () => {
    onUpdateItem(orderItem.id, {
      quantity,
      notes,
      discountPercentage,
      discountAmount
    });
    onClose();
  };

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.orderItemDetails}>
        
        {/* ÿ≥ÿ∑ÿ± Ÿàÿßÿ≠ÿØ ŸÅŸÇÿ∑: ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ + ÿßŸÑÿ≥ÿπÿ± + ÿßŸÑŸÉŸÖŸäÿ© + ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä */}
        <div className={styles.mainRow}>
          {/* ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸàÿßŸÑÿ≥ÿπÿ± ÿπŸÑŸâ ÿßŸÑŸäŸÖŸäŸÜ */}
          <div className={styles.productInfo}>
            <span className={styles.productName}>{orderItem.product.nameArabic}</span>
            {orderItem.product.hasMultiplePrices && (
              <span className={styles.productSize}> - {orderItem.selectedPrice.nameArabic}</span>
            )}
            <span className={styles.unitPrice}>{unitPrice} EGP</span>
          </div>

          {/* ÿßŸÑŸÉŸÖŸäÿ© ŸÅŸä ÿßŸÑŸÜÿµ */}
          <div className={styles.quantityControls}>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(-1)}
              disabled={quantity <= 1}
            >
              <RemoveIcon />
            </button>
            <span className={styles.quantityDisplay}>{quantity}</span>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(1)}
            >
              <AddIcon />
            </button>
          </div>
          
          {/* ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä ÿπŸÑŸâ ÿßŸÑÿ¥ŸÖÿßŸÑ */}
          <div className={styles.totalDisplay}>
            <span className={styles.totalAmount}>{finalTotal.toFixed(2)} EGP</span>
          </div>
        </div>

        {/* ÿ≠ŸÇŸÑ ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ */}
        <div className={styles.notesSection}>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßŸÑÿµŸÜŸÅ..."
            className={styles.notesInput}
            rows={3}
          />
        </div>

        {/* ŸÇÿ≥ŸÖ ÿßŸÑÿÆÿµŸÖ */}
        <div className={styles.discountSection}>
          <div className={styles.discountInputs}>
            <div className={styles.discountField}>
              <label>ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿÆÿµŸÖ %</label>
              <input
                ref={percentageInputRef}
                type="number"
                value={tempDiscountPercentage}
                onChange={(e) => setTempDiscountPercentage(e.target.value)}
                onFocus={handlePercentageFocus}
                onBlur={handlePercentageBlur}
                onKeyDown={handlePercentageKeyDown}
                min="0"
                max="100"
                step="0.1"
                className={styles.discountInput}
              />
            </div>
            
            <div className={styles.discountField}>
              <label>ŸÇŸäŸÖÿ© ÿßŸÑÿÆÿµŸÖ</label>
              <input
                ref={amountInputRef}
                type="number"
                value={tempDiscountAmount}
                onChange={(e) => setTempDiscountAmount(e.target.value)}
                onFocus={handleAmountFocus}
                onBlur={handleAmountBlur}
                onKeyDown={handleAmountKeyDown}
                min="0"
                max={baseTotal}
                step="0.01"
                className={styles.discountInput}
              />
            </div>
          </div>
        </div>

        {/* ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ÿ£ŸÉŸäÿØ ŸàÿßŸÑÿ•ŸÑÿ∫ÿßÿ° */}
        <div className={styles.actionButtons}>
          <button className={styles.confirmBtn} onClick={handleConfirm}>
            ÿ™ÿ£ŸÉŸäÿØ
          </button>
          <button className={styles.cancelBtn} onClick={onClose}>
            ÿ•ŸÑÿ∫ÿßÿ°
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderItemDetailsPopup;

===== src/Pages/pos/newSales/components/OrderManager.tsx =====
// src/Pages/pos/newSales/components/OrderManager.tsx - ÿßŸÑŸÉŸàÿØ ÿßŸÑŸÉÿßŸÖŸÑ ÿßŸÑŸÖŸèÿ≠ÿØÿ´
import React from 'react';
import { PosProduct, PosPrice, SelectedOption, OrderItem, SubItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface OrderManagerProps {
  keypadValue: string;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  selectedOrderItemId: string | null;
  onOrderAdd: (orderItem: OrderItem) => void;
  onOrderUpdate: (itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => void;
  onModeReset: () => void;
  onLoadNormalProducts: () => void;
}

export const useOrderManager = ({
  keypadValue,
  isExtraMode,
  isWithoutMode,
  selectedOrderItemId,
  onOrderAdd,
  onOrderUpdate,
  onModeReset,
  onLoadNormalProducts
}: OrderManagerProps) => {
  
  const addToOrder = React.useCallback((
    product: PosProduct, 
    price: PosPrice, 
    selectedOptions: SelectedOption[]
  ) => {
  const quantity = parseFloat(keypadValue) || 1; // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ parseFloat ÿ®ÿØŸÑÿßŸã ŸÖŸÜ parseInt
    const basePrice = posService.calculateTotalPrice(price.price, selectedOptions, quantity);
    
    // ÿ•ÿ∞ÿß ŸÉÿßŸÜ Extra ÿ£Ÿà Without mode ŸÖÿπ ŸÖŸÜÿ™ÿ¨ ŸÖÿ≠ÿØÿØ
    if ((isExtraMode || isWithoutMode) && selectedOrderItemId) {
      const subItem: SubItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        type: isExtraMode ? 'extra' : 'without',
        name: `${product.nameArabic}${price.nameArabic ? ` - ${price.nameArabic}` : ''}`,
        quantity,
        price: isWithoutMode ? 0 : basePrice,
        productId: product.id
      };
      
      onOrderUpdate(selectedOrderItemId, 'addSubItem', subItem);
    } else {
      // ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ (ÿ≥Ÿàÿßÿ° ÿπÿßÿØŸä ÿ£Ÿà Extra/Without ŸÖŸÜŸÅÿµŸÑ)
      const subItems: SubItem[] = [];
      
      // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ÿ•ŸÑŸâ sub-items
      selectedOptions.forEach(option => {
        subItems.push({
          id: `option_${option.itemId}_${Date.now()}`,
          type: 'option',
          name: option.itemName,
          quantity: option.quantity,
          price: option.extraPrice * option.quantity,
          isRequired: true,
          groupId: option.groupId
        });
      });
      
      const orderItem: OrderItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        product,
        selectedPrice: price,
        quantity,
        totalPrice: basePrice,
        subItems: subItems.length > 0 ? subItems : undefined,
        // ÿ•ÿ∂ÿßŸÅÿ© ŸÉŸÖŸÜÿ™ÿ¨ Extra/Without ŸÖŸÜŸÅÿµŸÑ ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸáŸÜÿßŸÉ ŸÖŸÜÿ™ÿ¨ ŸÖÿ≠ÿØÿØ
        isExtra: isExtraMode && !selectedOrderItemId,
        isWithout: isWithoutMode && !selectedOrderItemId,
      };

      onOrderAdd(orderItem);
    }
    
    onModeReset();
    onLoadNormalProducts();
  }, [
    keypadValue, 
    isExtraMode, 
    isWithoutMode, 
    selectedOrderItemId, 
    onOrderAdd,
    onOrderUpdate,
    onModeReset, 
    onLoadNormalProducts
  ]);

  const removeSubItem = React.useCallback((orderItemId: string, subItemId: string) => {
    onOrderUpdate(orderItemId, 'removeSubItem', subItemId);
  }, [onOrderUpdate]);

  return { addToOrder, removeSubItem };
};

===== src/Pages/pos/newSales/components/OrderSummary.tsx =====
// src/Pages/pos/newSales/components/OrderSummary.tsx - ÿ™ÿµÿ≠Ÿäÿ≠ ŸÖÿ¥ŸÉŸÑÿ© ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÄ dropdown
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { OrderSummary as OrderSummaryType, OrderItem, SubItem } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import CustomerDetailsPopup from './CustomerDetailsPopup';
import CustomerForm from '../../customers/components/CustomerForm';
import styles from '../styles/OrderSummary.module.css';
import PaymentPopup from './PaymentPopup';

interface OrderSummaryProps {
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: OrderItem) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  readOnly: boolean;
  onOrderCompleted?: (result: any) => void;
  selectedTable?: any;
  selectedDeliveryCompany?: any;
  // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÄ props ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÑŸàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  isEditMode?: boolean;
  currentInvoiceId?: string | null;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick,
  selectedCustomer,
  selectedAddress,
  onCustomerSelect,
  onOrderCompleted,
  orderType,
  onDeliveryChargeChange,
  readOnly = false,
  selectedTable,
  selectedDeliveryCompany,
  // ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿßŸÑŸÄ props ÿßŸÑÿ¨ÿØŸäÿØÿ© ŸÖÿπ ŸÇŸäŸÖ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
  isEditMode = false,
  currentInvoiceId = null
}) => {
  const [selectedSubItemId, setSelectedSubItemId] = useState<string | null>(null);
  const [phoneInput, setPhoneInput] = useState('');
  const [searchResults, setSearchResults] = useState<Customer[]>([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [showCustomerForm, setShowCustomerForm] = useState(false);
  const [showCustomerDetails, setShowCustomerDetails] = useState(false);
  const [selectedCustomerForDetails, setSelectedCustomerForDetails] = useState<Customer | null>(null);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [zones, setZones] = useState<any[]>([]);
  const [selectedResultIndex, setSelectedResultIndex] = useState(-1);
  const [searchCache, setSearchCache] = useState<{[key: string]: Customer[]}>({});
  const [inputHasFocus, setInputHasFocus] = useState(false);
  const [showPaymentPopup, setShowPaymentPopup] = useState(false);
  const [pendingEnterAction, setPendingEnterAction] = useState<string | null>(null);

  // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ useRef ÿ®ÿØŸÑÿßŸã ŸÖŸÜ state ŸÑŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©
  const searchDebounceTimer = useRef<NodeJS.Timeout | null>(null);
  const searchAbortController = useRef<AbortController | null>(null);
  const lastSearchQuery = useRef<string>('');
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    loadZones();
  }, []);

  // ÿ≠ÿ≥ÿßÿ® ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿπŸÜŸàÿßŸÜ ÿ£Ÿà ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
  useEffect(() => {
    if (orderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      const zone = zones.find(z => z.id === selectedAddress.zoneId);
      const charge = zone ? zone.deliveryCharge : 0;
      setDeliveryCharge(charge);
      onDeliveryChargeChange(charge);
    } else {
      setDeliveryCharge(0);
      onDeliveryChargeChange(0);
    }
  }, [orderType, selectedAddress, zones, onDeliveryChargeChange]);

  // ÿØÿßŸÑÿ© ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿµÿ≠ÿ≠ÿ©
  const searchCustomers = useCallback(async (query: string): Promise<Customer[]> => {
    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÉÿßÿ¥
    if (searchCache[query]) {
      return searchCache[query];
    }

    // ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ≥ÿßÿ®ŸÇ
    if (searchAbortController.current) {
      searchAbortController.current.abort();
    }

    const newController = new AbortController();
    searchAbortController.current = newController;

    try {
      const results = await customersApi.searchByPhone(query);
      
      // ÿ≠ŸÅÿ∏ ŸÅŸä ÿßŸÑŸÉÿßÿ¥
      setSearchCache(prev => ({
        ...prev,
        [query]: results
      }));
      
      return results;
    } catch (error: any) {
      if (error.name === 'AbortError') {
        throw error;
      }
      console.error('Error searching customers:', error);
      throw error;
    }
  }, [searchCache]);

  // useEffect ŸÑŸÑÿ®ÿ≠ÿ´ ŸÖÿπ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿπÿ±ÿ∂ ÿßŸÑŸÄ dropdown
  useEffect(() => {
    // ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ§ŸÇÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇ
    if (searchDebounceTimer.current) {
      clearTimeout(searchDebounceTimer.current);
    }

    const query = phoneInput.trim();
    
    // ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÅÿßÿ∂Ÿäÿå ÿßŸÖÿ≥ÿ≠ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸàŸÑŸÉŸÜ ŸÑÿß ÿ™ŸèÿÆŸÅŸä ÿßŸÑŸÄ dropdown ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus
    if (!query) {
      setSearchResults([]);
      if (!inputHasFocus) {
        setShowDropdown(false);
      }
      setSelectedResultIndex(-1);
      setIsSearching(false);
      return;
    }

    // ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ÿ£ŸÇŸÑ ŸÖŸÜ 3 ÿ£ÿ≠ÿ±ŸÅÿå ŸÖÿß ÿ™ÿ®ÿ≠ÿ´ÿ¥ ŸàŸÑŸÉŸÜ ÿ£ÿ∏Ÿáÿ± ÿ±ÿ≥ÿßŸÑÿ©
    if (query.length < 3) {
      setSearchResults([]);
      setSelectedResultIndex(-1);
      // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ŸÖÿπ ÿ±ÿ≥ÿßŸÑÿ© "ÿßŸÉÿ™ÿ® 3 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ" ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // ÿ•ÿ∞ÿß ŸáŸà ŸÜŸÅÿ≥ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ≥ÿßÿ®ŸÇ ŸàÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸàÿ¨ŸàÿØÿ©ÿå ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÅŸÇÿ∑
    if (query === lastSearchQuery.current && searchResults.length >= 0) {
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // ÿ®ÿØÿ° ÿßŸÑÿ®ÿ≠ÿ´ ŸÖÿπ ÿ™ÿ£ÿÆŸäÿ±
    const performSearch = async () => {
      // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ•ŸÜ ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá (ŸÖÿ¥ ÿßÿ™ÿ∫Ÿäÿ± ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ£ÿÆŸäÿ±)
      if (phoneInput.trim() !== query) {
        return;
      }

      setIsSearching(true);
      lastSearchQuery.current = query;
      
      try {
        const results = await searchCustomers(query);
        
        // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ•ŸÜ ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá ÿ®ÿπÿØ ÿßŸÑÿ®ÿ≠ÿ´
        if (phoneInput.trim() === query) {
          setSearchResults(results);
          // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus ÿ£Ÿà ŸÉÿßŸÜ ŸÖŸÅÿ™Ÿàÿ≠ ŸÖŸÜ ŸÇÿ®ŸÑ
          if (inputHasFocus || showDropdown) {
            setShowDropdown(true);
          }
          setSelectedResultIndex(-1);
        }
      } catch (error: any) {
        if (error.name !== 'AbortError') {
          console.error('Search failed:', error);
          // ÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿßÿ±ÿ∫ÿ© ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá ŸàÿßŸÑŸÄ input ŸÑŸá focus
          if (phoneInput.trim() === query && inputHasFocus) {
            setSearchResults([]);
            setShowDropdown(true);
          }
        }
      } finally {
        // ÿ•ŸäŸÇÿßŸÅ ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá
        if (phoneInput.trim() === query) {
          setIsSearching(false);
        }
      }
    };

    // ÿ™ÿ£ÿÆŸäÿ± ÿßŸÑÿ®ÿ≠ÿ´ 500ms
    searchDebounceTimer.current = setTimeout(performSearch, 500);

    // ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™ ÿπŸÜÿØ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±
    return () => {
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, [phoneInput, searchCustomers, inputHasFocus, showDropdown, searchResults.length]);

  // ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÄ dropdown ÿπŸÜÿØ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿÆÿßÿ±ÿ¨Ÿá
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        setInputHasFocus(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // ÿ™ŸÜÿ∏ŸäŸÅ ÿπŸÜÿØ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖŸÉŸàŸÜ
  useEffect(() => {
    return () => {
      if (searchAbortController.current) {
        searchAbortController.current.abort();
      }
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, []);

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setPhoneInput(value);
    onCustomerNameChange(value);
    
    // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÜÿµ
    setSelectedResultIndex(-1);
    
    // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ÿπŸÜÿØ ÿßŸÑŸÉÿ™ÿßÿ®ÿ©
    if (value.trim().length > 0) {
      setShowDropdown(true);
    }
  }, [onCustomerNameChange]);

  // ŸÖÿπÿßŸÑÿ¨ Focus ŸÑŸÑŸÄ input
  const handleInputFocus = useCallback(() => {
    setInputHasFocus(true);
    // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ŸÜÿµ ÿ£Ÿà ŸÜÿ™ÿßÿ¶ÿ¨
    if (phoneInput.trim().length > 0 || searchResults.length > 0) {
      setShowDropdown(true);
    }
  }, [phoneInput, searchResults.length]);

  const canOpenPayment = orderSummary.items.length > 0;

  // ŸÖÿπÿßŸÑÿ¨ Blur ŸÑŸÑŸÄ input
  const handleInputBlur = useCallback(() => {
    // ÿ™ÿ£ÿÆŸäÿ± ÿ•ÿÆŸÅÿßÿ° ÿßŸÑŸÄ dropdown ŸÑŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨
    setTimeout(() => {
      setInputHasFocus(false);
    }, 200);
  }, []);

  const handleCustomerSelect = useCallback((customer: Customer) => {
    setSelectedCustomerForDetails(customer);
    setShowCustomerDetails(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);


const handleKeyDown = useCallback(async (e: React.KeyboardEvent<HTMLInputElement>) => {
  if (showDropdown && searchResults.length > 0) {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedResultIndex(prev => 
          prev < searchResults.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedResultIndex(prev => prev > 0 ? prev - 1 : -1);
        break;
      case 'Enter':
        e.preventDefault();
        
        // ÿßÿÆÿ™Ÿäÿßÿ± ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ÿπŸÜÿµÿ± ŸÖÿ≠ÿØÿØ ÿ®ÿßŸÑÿ£ÿ≥ŸáŸÖ
        if (selectedResultIndex >= 0 && selectedResultIndex < searchResults.length) {
          handleCustomerSelect(searchResults[selectedResultIndex]);
        } else {
          // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ∑ÿßÿ®ŸÇÿ© ÿ™ÿßŸÖÿ© ŸÑŸÑÿ±ŸÇŸÖ ÿßŸÑŸÉÿßŸÖŸÑ
          const query = phoneInput.trim();
          const exactMatch = searchResults.find(customer => 
            customer.phone1 === query || 
            customer.phone2 === query ||
            customer.phone3 === query ||
            customer.phone4 === query
          );
          
          if (exactMatch) {
            handleCustomerSelect(exactMatch);
          } else if (!isSearching) {
            // ŸÖŸÅŸäÿ¥ ŸÖÿ∑ÿßÿ®ŸÇÿ© ÿ™ÿßŸÖÿ© ŸàÿßŸÜÿ™ŸáŸâ ÿßŸÑÿ®ÿ≠ÿ´ÿå ÿßŸÅÿ™ÿ≠ dialog ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©
            setShowCustomerForm(true);
            setShowDropdown(false);
          }
        }
        break;
      case 'Escape':
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        inputRef.current?.blur();
        break;
    }
  } else if (e.key === 'Enter') {
    e.preventDefault();
    
    const query = phoneInput.trim();
    if (query.length >= 3) {
      // ÿ•ÿ∞ÿß ÿßŸÑÿ®ÿ≠ÿ´ ŸÑÿ≥Ÿá ÿ¥ÿ∫ÿßŸÑÿå ÿßÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ° ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸàÿßŸÜÿ™ÿ∏ÿ±
      if (isSearching) {
        setPendingEnterAction(query);
        return;
      }

      // ÿ•ÿ∞ÿß ÿßŸÑÿ®ÿ≠ÿ´ ÿÆŸÑÿµÿå ÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ∑ŸÑÿ®
      await handleEnterAction(query);
    }
  }
}, [showDropdown, searchResults, selectedResultIndex, phoneInput, isSearching, searchCustomers, handleCustomerSelect]);

// ÿ£ÿ∂ŸÅ ÿØÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ Enter:
const handleEnterAction = useCallback(async (query: string) => {
  try {
    setIsSearching(true);
    const results = await searchCustomers(query);
    
    if (results.length > 0) {
      // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ∑ÿßÿ®ŸÇÿ© ÿ™ÿßŸÖÿ© ŸÑŸÑÿ±ŸÇŸÖ ÿßŸÑŸÉÿßŸÖŸÑ
      const exactMatch = results.find(customer => 
        customer.phone1 === query || 
        customer.phone2 === query ||
        customer.phone3 === query ||
        customer.phone4 === query
      );
      
      setSearchResults(results);
      setShowDropdown(true);
      setSelectedResultIndex(-1);
      
      if (exactMatch) {
        // ÿ•ÿ∞ÿß Ÿàÿ¨ÿØÿ™ ŸÖÿ∑ÿßÿ®ŸÇÿ© ÿ™ÿßŸÖÿ©ÿå ÿßÿÆÿ™ÿßÿ±Ÿáÿß ŸÖÿ®ÿßÿ¥ÿ±ÿ©
        handleCustomerSelect(exactMatch);
      } else {
        // ÿ•ÿ∞ÿß ŸÖŸÅŸäÿ¥ ŸÖÿ∑ÿßÿ®ŸÇÿ© ÿ™ÿßŸÖÿ©ÿå ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÅŸÇÿ∑
        // ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸäÿÆÿ™ÿßÿ± ÿ®ŸÜŸÅÿ≥Ÿá ÿ£Ÿà Ÿäÿ∂ŸäŸÅ ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ ŸÖŸÜ ÿßŸÑÿ≤ÿ±
      }
    } else {
      // ŸÖŸÅŸäÿ¥ ŸÜÿ™ÿßÿ¶ÿ¨ÿå ÿßŸÅÿ™ÿ≠ ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ
      setShowCustomerForm(true);
    }
  } catch (error) {
    console.error('Search failed:', error);
    setShowCustomerForm(true);
  } finally {
    setIsSearching(false);
  }
}, [searchCustomers, handleCustomerSelect]);

// ÿ£ÿ∂ŸÅ useEffect ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÖÿπŸÑŸÇÿ©:
useEffect(() => {
  // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ÿ•ÿ¨ÿ±ÿßÿ° ŸÖÿπŸÑŸÇ ŸàÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÜÿ™ŸáŸâ
  if (pendingEnterAction && !isSearching) {
    const query = pendingEnterAction;
    setPendingEnterAction(null);
    
    // ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ° ÿßŸÑŸÖÿπŸÑŸÇ
    handleEnterAction(query);
  }
}, [isSearching, pendingEnterAction, handleEnterAction]);

// ÿπÿØŸÑ useEffect ÿßŸÑÿÆÿßÿµ ÿ®ÿßŸÑÿ®ÿ≠ÿ´ ŸÑŸäŸÖŸÜÿπ ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ®ÿ≠ÿ´:
useEffect(() => {
  // ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ§ŸÇÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇ
  if (searchDebounceTimer.current) {
    clearTimeout(searchDebounceTimer.current);
  }

  const query = phoneInput.trim();
  
  // ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÅÿßÿ∂Ÿäÿå ÿßŸÖÿ≥ÿ≠ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸàŸÑŸÉŸÜ ŸÑÿß ÿ™ŸèÿÆŸÅŸä ÿßŸÑŸÄ dropdown ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus
  if (!query) {
    setSearchResults([]);
    if (!inputHasFocus) {
      setShowDropdown(false);
    }
    setSelectedResultIndex(-1);
    setIsSearching(false);
    // ÿ•ŸÑÿ∫ÿßÿ° ÿ£Ÿä ÿ•ÿ¨ÿ±ÿßÿ° ŸÖÿπŸÑŸÇ
    setPendingEnterAction(null);
    return;
  }

  // ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ÿ£ŸÇŸÑ ŸÖŸÜ 3 ÿ£ÿ≠ÿ±ŸÅÿå ŸÖÿß ÿ™ÿ®ÿ≠ÿ´ÿ¥ ŸàŸÑŸÉŸÜ ÿ£ÿ∏Ÿáÿ± ÿ±ÿ≥ÿßŸÑÿ©
  if (query.length < 3) {
    setSearchResults([]);
    setSelectedResultIndex(-1);
    setPendingEnterAction(null);
    // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ŸÖÿπ ÿ±ÿ≥ÿßŸÑÿ© "ÿßŸÉÿ™ÿ® 3 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ" ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus
    if (inputHasFocus) {
      setShowDropdown(true);
    }
    return;
  }

  // ÿ•ÿ∞ÿß ŸáŸà ŸÜŸÅÿ≥ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ≥ÿßÿ®ŸÇ ŸàÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸàÿ¨ŸàÿØÿ©ÿå ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÅŸÇÿ∑
  if (query === lastSearchQuery.current && searchResults.length >= 0) {
    if (inputHasFocus) {
      setShowDropdown(true);
    }
    return;
  }

  // ÿ®ÿØÿ° ÿßŸÑÿ®ÿ≠ÿ´ ŸÖÿπ ÿ™ÿ£ÿÆŸäÿ±
  const performSearch = async () => {
    // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ•ŸÜ ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá (ŸÖÿ¥ ÿßÿ™ÿ∫Ÿäÿ± ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ£ÿÆŸäÿ±)
    if (phoneInput.trim() !== query) {
      return;
    }

    setIsSearching(true);
    lastSearchQuery.current = query;
    
    try {
      const results = await searchCustomers(query);
      
      // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ•ŸÜ ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá ÿ®ÿπÿØ ÿßŸÑÿ®ÿ≠ÿ´
      if (phoneInput.trim() === query) {
        setSearchResults(results);
        // ÿ£ÿ∏Ÿáÿ± ÿßŸÑŸÄ dropdown ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÄ input ŸÑŸá focus ÿ£Ÿà ŸÉÿßŸÜ ŸÖŸÅÿ™Ÿàÿ≠ ŸÖŸÜ ŸÇÿ®ŸÑ
        if (inputHasFocus || showDropdown) {
          setShowDropdown(true);
        }
        setSelectedResultIndex(-1);
      }
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        console.error('Search failed:', error);
        // ÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿßÿ±ÿ∫ÿ© ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá ŸàÿßŸÑŸÄ input ŸÑŸá focus
        if (phoneInput.trim() === query && inputHasFocus) {
          setSearchResults([]);
          setShowDropdown(true);
        }
      }
    } finally {
      // ÿ•ŸäŸÇÿßŸÅ ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ÿßŸÑŸÜÿµ ŸÑÿ≥Ÿá ŸÜŸÅÿ≥Ÿá
      if (phoneInput.trim() === query) {
        setIsSearching(false);
      }
    }
  };

  // ÿ™ÿ£ÿÆŸäÿ± ÿßŸÑÿ®ÿ≠ÿ´ 500ms
  searchDebounceTimer.current = setTimeout(performSearch, 500);

  // ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™ ÿπŸÜÿØ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±
  return () => {
    if (searchDebounceTimer.current) {
      clearTimeout(searchDebounceTimer.current);
    }
  };
}, [phoneInput, searchCustomers, inputHasFocus, showDropdown, searchResults.length]);
  const handleCustomerDetailsSelect = useCallback((customer: Customer, address: CustomerAddress) => {
    onCustomerSelect(customer, address);
    
    // ÿ•ŸÅÿ±ÿßÿ∫ ÿ≠ŸÇŸÑ ÿßŸÑÿ®ÿ≠ÿ´
    setPhoneInput('');
    setShowCustomerDetails(false);
    
    // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑŸÄ dropdown
    setShowDropdown(false);
    setSearchResults([]);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, [onCustomerSelect]);

  const handleAddCustomerClick = useCallback(() => {
    setShowCustomerForm(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);

  const handleCustomerFormSubmit = useCallback(async (data: any) => {
    try {
      const newCustomer = await customersApi.add(data);
      if (newCustomer.addresses.length > 0) {
        onCustomerSelect(newCustomer, newCustomer.addresses[0]);
        // ÿ•ŸÅÿ±ÿßÿ∫ ÿ≠ŸÇŸÑ ÿßŸÑÿ®ÿ≠ÿ´
        setPhoneInput('');
      }
      setShowCustomerForm(false);
      
      // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑŸÄ dropdown
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    } catch (error) {
      console.error('Error creating customer:', error);
    }
  }, [onCustomerSelect]);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ÿ•ÿ∫ŸÑÿßŸÇ ŸÜŸÖŸàÿ∞ÿ¨ ÿßŸÑÿπŸÖŸäŸÑ
  const handleCustomerFormClose = useCallback(() => {
    setShowCustomerForm(false);
  }, []);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ÿ•ÿ∫ŸÑÿßŸÇ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ
  const handleCustomerDetailsClose = useCallback(() => {
    setShowCustomerDetails(false);
  }, []);

  useEffect(() => {
    if (selectedCustomer) {
      // ÿ•ŸÅÿ±ÿßÿ∫ ÿ≠ŸÇŸÑ ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜÿØ ÿßÿÆÿ™Ÿäÿßÿ± ÿπŸÖŸäŸÑ ŸÅŸÇÿ∑
      setPhoneInput('');
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    }
  }, [selectedCustomer]);

  // ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÜŸáÿßÿ¶Ÿä
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // ÿØŸàÿßŸÑ ÿßŸÑÿπÿ±ÿ∂
  const renderSubItem = (subItem: SubItem, orderItemId: string) => {
    const canDelete = subItem.type === 'extra' || subItem.type === 'without';
    const isSelected = selectedSubItemId === subItem.id && canDelete;
    
    return (
      <div 
        key={subItem.id} 
        className={`${styles.subItem} ${isSelected ? styles.selectedSubItem : ''}`}
        onClick={(e) => {
          e.stopPropagation();
          
          if (canDelete) {
            const rect = e.currentTarget.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            
            if (isSelected && clickX <= 30) {
              onRemoveSubItem(orderItemId, subItem.id);
              setSelectedSubItemId(null);
            } else {
              setSelectedSubItemId(isSelected ? null : subItem.id);
            }
          }
        }}
        style={{
          cursor: canDelete ? 'pointer' : 'default'
        }}
      >
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            {!isSelected && (
              <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
                {subItem.type === 'extra' && '+'}
                {subItem.type === 'without' && '-'}
                {subItem.type === 'option' && '‚Ä¢'}
              </span>
            )}
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>üí¨</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  // ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÄ dropdown
  const renderDropdownContent = () => {
    const query = phoneInput.trim();
    
    if (isSearching) {
      return (
        <div className={styles.searchingMessage}>
          <div className={styles.loadingSpinner}></div>
          <span>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ®ÿ≠ÿ´...</span>
        </div>
      );
    }
    
    if (query.length < 3) {
      return (
        <div className={styles.minLengthMessage}>
          <span>ÿßŸÉÿ™ÿ® 3 ÿ£ÿ±ŸÇÿßŸÖ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÑŸÑÿ®ÿ≠ÿ´</span>
        </div>
      );
    }
    
    if (searchResults.length > 0) {
      return (
        <>
          <div className={styles.dropdownHeader}>
            <span>ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ®ÿ≠ÿ´ ({searchResults.length})</span>
          </div>
          {searchResults.map((customer, index) => (
            <div
              key={customer.id}
              className={`${styles.customerOption} ${
                index === selectedResultIndex ? styles.selectedOption : ''
              }`}
              onClick={() => handleCustomerSelect(customer)}
            >
              <div className={styles.customerInfo}>
                <div className={styles.customerName}>{customer.name}</div>
                <div className={styles.customerPhone}>
                  {customer.phone1}
                  {customer.phone2 && ` - ${customer.phone2}`}
                </div>
                <div className={styles.customerDetails}>
                  {customer.addresses.length} ÿπŸÜŸàÿßŸÜ
                  {customer.isVIP && ' ‚Ä¢ VIP'}
                  {customer.isBlocked && ' ‚Ä¢ ŸÖÿ≠ÿ∏Ÿàÿ±'}
                </div>
              </div>
            </div>
          ))}
        </>
      );
    }
    
    return (
      <div className={styles.noResults}>
        <span>ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸáÿ∞ÿß ÿßŸÑÿ±ŸÇŸÖ</span>
        <button 
          className={styles.addNewCustomerBtn}
          onClick={handleAddCustomerClick}
          disabled={isSearching}
        >
          ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ
        </button>
      </div>
    );
  };

  const shouldShowAllButtons = orderType !== 'Takeaway';
  const shouldShowPayOnly = orderType === 'Takeaway';

  return (
    <aside className={styles.orderSummary}>
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>
          {isEditMode && currentInvoiceId ? 
            `#${currentInvoiceId.substring(0, 8)}...` : 
            '#123'
          }
        </div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      <div className={styles.orderContent}>
        {/* Customer Search Input with Enhanced Dropdown */}
        <div className={styles.customerInputContainer} ref={dropdownRef}>
          <div className={styles.customerInput}>
            <input
              ref={inputRef}
              type="text"
              placeholder="Customer Phone Number - ÿ±ŸÇŸÖ Ÿáÿßÿ™ŸÅ ÿßŸÑÿπŸÖŸäŸÑ"
              value={phoneInput}
              onChange={handleInputChange}
              onFocus={handleInputFocus}
              onBlur={handleInputBlur}
              onKeyDown={handleKeyDown}
              className={styles.customerField}
            />
            <button 
              className={styles.customerButton}
              onClick={handleAddCustomerClick}
              disabled={isSearching}
            >
              <img src="/images/img_group_1000004320.svg" alt="Add customer" />
            </button>
          </div>

          {/* Search Results Dropdown */}
          {showDropdown && (
            <div className={styles.customerDropdown}>
              {renderDropdownContent()}
            </div>
          )}
        </div>

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div 
                className={`${styles.orderItem} ${selectedOrderItemId === item.id ? styles.selected : ''} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}
                onClick={(e) => {
                  const rect = e.currentTarget.getBoundingClientRect();
                  const clickX = e.clientX - rect.left;
                  
                  if (selectedOrderItemId === item.id && clickX <= 30) {
                    onRemoveOrderItem(item.id);
                  } else {
                    onOrderItemSelect(item.id);
                  }
                }}
                onDoubleClick={() => onOrderItemDoubleClick?.(item)}
              >
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem, item.id))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>

        {!readOnly && (
          <div className={`${styles.actionButtons} ${shouldShowPayOnly ? styles.takeawayButtons : ''}`}>
            {shouldShowAllButtons && (
              <>
                <button className={`${styles.actionButton} ${styles.send}`}>
                  <img src="/images/img_tabler_send.svg" alt="Send" />
                  <span>Send</span>
                </button>
                <button onClick={() => canOpenPayment && setShowPaymentPopup(true)}
                        disabled={!canOpenPayment}
                        className={`${styles.actionButton} ${styles.print} ${!canOpenPayment ? styles.disabledBtn : ''}`}>
                  <img src="/images/img_printer.svg" alt="Print" />
                  <span>Print</span>
                </button>
              </>
            )}
            <button
              onClick={() => canOpenPayment && setShowPaymentPopup(true)}
              disabled={!canOpenPayment}
              className={`${styles.actionButton} ${styles.pay} ${shouldShowPayOnly ? styles.fullWidth : ''} ${!canOpenPayment ? styles.disabledBtn : ''}`}
              title={!canOpenPayment ? "ŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿØŸÅÿπ ÿ®ÿØŸàŸÜ ÿ•ÿ∂ÿßŸÅÿ© ÿ£ÿµŸÜÿßŸÅ" : undefined}
            >
              <img src="/images/img_payment_02.svg" alt="Pay" />
              <span>{isEditMode ? 'ÿ™ÿ≠ÿØŸäÿ´' : 'Pay'}</span>
            </button>
          </div>
        )}
      </div>

      {/* Customer Details Popup */}
      <CustomerDetailsPopup
        open={showCustomerDetails}
        customer={selectedCustomerForDetails}
        onClose={handleCustomerDetailsClose}
        onSelectCustomer={handleCustomerDetailsSelect}
      />

      {/* Payment Popup ŸÖÿπ ÿßŸÑŸÄ props ÿßŸÑŸÖÿµÿ≠ÿ≠ÿ© */}
      <PaymentPopup
        isOpen={showPaymentPopup}
        onClose={() => setShowPaymentPopup(false)}
        orderSummary={orderSummary}
        customerName={customerName}
        onCustomerNameChange={onCustomerNameChange}
        onRemoveOrderItem={onRemoveOrderItem}
        onRemoveSubItem={onRemoveSubItem}
        selectedOrderItemId={selectedOrderItemId}
        onOrderItemSelect={onOrderItemSelect}
        onOrderItemDoubleClick={onOrderItemDoubleClick}
        selectedCustomer={selectedCustomer}
        selectedAddress={selectedAddress}
        onCustomerSelect={onCustomerSelect}
        orderType={orderType}
        onDeliveryChargeChange={onDeliveryChargeChange}
        selectedTable={selectedTable}
        selectedDeliveryCompany={selectedDeliveryCompany}
        isEditMode={isEditMode} // ‚úÖ ÿ™ŸÖÿ±Ÿäÿ± ÿµÿ≠Ÿäÿ≠
        currentInvoiceId={currentInvoiceId} // ‚úÖ ÿ™ŸÖÿ±Ÿäÿ± ÿµÿ≠Ÿäÿ≠
        onPaymentComplete={(result) => {
          if (result.success) {
            console.log('ÿ™ŸÖ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ®ŸÜÿ¨ÿßÿ≠:', result.invoice);
            console.log('ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿØŸÅÿπ:', result.payments);
            
            setShowPaymentPopup(false);
            
            // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿßÿ±ÿ© ŸÑŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÑÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿπŸäŸäŸÜ
            if (onOrderCompleted) {
              onOrderCompleted(result);
            }
          }
        }}
      />

      {/* Customer Form Popup */}
      {showCustomerForm && (
        <CustomerForm
          key={phoneInput}
          open={showCustomerForm}
          mode="add"
          onClose={handleCustomerFormClose}
          onSubmit={handleCustomerFormSubmit}
          initialValues={{
            id: '',
            name: '',
            phone1: phoneInput.trim(),
            phone2: '',
            phone3: '',
            phone4: '',
            isVIP: false,
            isBlocked: false,
            isActive: true,
            addresses: []
          }}
        />
      )}
    </aside>
  );
};

export default OrderSummary;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx
import React from 'react';
import styles from './styles/PaymentCenter.module.css';

interface PaymentCenterProps {
  totalAmount: number;
  paidAmount: string;
  cashAmount: number;
  remainingForCustomer: number;
  selectedPaymentMethod: string | null;
  onAmountChange: (amount: string) => void;
  onQuickAmountSelect: (amount: number) => void;
  isFirstInput: boolean;
  nonCashTotal: number;
}

const PaymentCenter: React.FC<PaymentCenterProps> = ({
  totalAmount,
  paidAmount,
  cashAmount,
  remainingForCustomer,
  selectedPaymentMethod,
  onAmountChange,
  onQuickAmountSelect,
  isFirstInput,
  nonCashTotal
}) => {
  // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿÆÿ™ÿßÿ±ÿ© ŸáŸä ÿßŸÑŸÉÿßÿ¥
  const isCashSelected = selectedPaymentMethod?.toLowerCase().includes('ŸÉÿßÿ¥') || 
                        selectedPaymentMethod?.toLowerCase().includes('cash');

  const handleKeypadClick = (value: string) => {
    if (value === 'c') {
      onAmountChange('0');
    } else if (value === 'erase') {
      const newValue = paidAmount.slice(0, -1);
      onAmountChange(newValue || '0');
    } else if (value === '.') {
      if (paidAmount === '0' || paidAmount === '0.00' || !paidAmount.includes('.')) {
        onAmountChange(paidAmount === '0' || paidAmount === '0.00' ? '0.' : paidAmount + '.');
      }
    } else {
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ£ŸàŸÑÿå ÿßÿ®ÿØÿ£ ŸÖŸÜ ÿßŸÑÿµŸÅÿ±
      if (isFirstInput || paidAmount === '0' || paidAmount === '0.00') {
        onAmountChange(value);
      } else {
        onAmountChange(paidAmount + value);
      }
    }
  };

  // ÿ™ÿπÿØŸäŸÑ ÿØÿßŸÑÿ© ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ≥ÿ±Ÿäÿπÿ© ŸÑŸÑÿ¨ŸÖÿπ
  const handleQuickAmountClick = (amount: number) => {
    const currentAmount = parseFloat(paidAmount) || 0;
    
    // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ£ŸàŸÑ (ŸÇŸäŸÖÿ© ÿ™ŸÑŸÇÿßÿ¶Ÿäÿ©)ÿå ÿßÿ®ÿØÿ£ ŸÖŸÜ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑŸÖÿ∂ÿßŸÅÿ© ŸÅŸÇÿ∑
    if (isFirstInput) {
      onQuickAmountSelect(amount);
    } else {
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖŸèÿØÿÆŸÑ ŸäÿØŸàŸäÿßŸãÿå ÿßÿ¨ŸÖÿπ ÿπŸÑŸâ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
      const newAmount = currentAmount + amount;
      onQuickAmountSelect(newAmount);
    }
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.headerRow}>
        <h2 className={styles.balanceTitle}>
          ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©: {totalAmount.toFixed(2)} ÿ¨ŸÜŸäŸá
        </h2>
      </div>

      <div className={styles.fieldsRow}>
        <div className={styles.fieldBlock}>
          <label className={styles.label}>ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä (ŸÉÿßÿ¥)</label>
          <div className={styles.remainingBox}>
            {remainingForCustomer.toFixed(2)}
          </div>
        </div>

        <div className={styles.fieldBlock}>
          <label className={styles.label}>ÿßŸÑŸÖÿØŸÅŸàÿπ ŸÉÿßÿ¥</label>
          <div className={styles.cashPaidBox}>
            {cashAmount.toFixed(2)}
          </div>
        </div>
      </div>

      <div className={styles.quickButtons}>
        {[5, 10, 15, 20].map(val => (
          <button 
            key={val} 
            className={`${styles.quickBtn} ${!selectedPaymentMethod ? styles.disabled : ''}`}
            onClick={() => handleQuickAmountClick(val)}
            disabled={!selectedPaymentMethod}
          >
            {val} EGP
          </button>
        ))}
      </div>

      <div className={styles.keypad}>
        {[
          ['1','2','3','50'],
          ['4','5','6','100'],
          ['7','8','9','200'],
          ['c','0','.','erase']
        ].map((row, rowIndex) => (
          <div key={rowIndex} className={styles.keypadRow}>
            {row.map(key => (
              <button
                key={key}
                className={`${styles.keypadBtn} ${['50','100','200'].includes(key) ? styles.gray : ''} ${!selectedPaymentMethod ? styles.disabled : ''}`}
                onClick={() => selectedPaymentMethod && (
                  key === 'erase' ? handleKeypadClick('erase') : 
                  ['50','100','200'].includes(key) ? handleQuickAmountClick(parseInt(key)) : 
                  handleKeypadClick(key)
                )}
                disabled={!selectedPaymentMethod}
              >
                {key === 'erase' ? '√ó' : 
                 key === 'c' ? 'C' : 
                 ['50','100','200'].includes(key) ? `${key} EGP` : key}
              </button>
            ))}
          </div>
        ))}
      </div>

      {!selectedPaymentMethod && (
        <div className={styles.noSelectionMessage}>
          ÿßÿÆÿ™ÿ± ÿ∑ÿ±ŸäŸÇÿ© ÿØŸÅÿπ ŸÖŸÜ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸäŸÖŸäŸÜ ŸÑÿ®ÿØÿ° ÿßŸÑÿ•ÿØÿÆÿßŸÑ
        </div>
      )}
    </div>
  );
};

export default PaymentCenter;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx
import React from 'react';
import PaymentOrderSummary from './PaymentOrderSummary';
import styles from './styles/PaymentLeft.module.css';

interface PaymentLeftProps {
  orderSummary: any;
  selectedCustomer: any;
  selectedAddress: any;
  orderType: string;
  deliveryCharge: number;
}

const PaymentLeft: React.FC<PaymentLeftProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  orderType,
  deliveryCharge,
}) => {
  return (
    <div className={styles.container}>
        <PaymentOrderSummary 
          orderSummary={orderSummary}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          orderType={orderType}
          deliveryCharge={deliveryCharge} onGoBack={function (): void {
            throw new Error('Function not implemented.');
          } }        />
    </div>
  );
};

export default PaymentLeft;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx
import React from 'react';
import { OrderSummary as OrderSummaryType, SubItem } from '../../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import styles from './styles/PaymentOrderSummary.module.css';

interface PaymentOrderSummaryProps {
  orderSummary: OrderSummaryType;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  orderType: string;
  deliveryCharge: number;
    onGoBack: () => void;

}

const PaymentOrderSummary: React.FC<PaymentOrderSummaryProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  deliveryCharge}) => {
  // ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÜŸáÿßÿ¶Ÿä
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // ÿØÿßŸÑÿ© ÿπÿ±ÿ∂ SubItem
  const renderSubItem = (subItem: SubItem) => {
    return (
      <div key={subItem.id} className={styles.subItem}>
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
              {subItem.type === 'extra' && '+'}
              {subItem.type === 'without' && '-'}
              {subItem.type === 'option' && '‚Ä¢'}
            </span>
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  // ÿØÿßŸÑÿ© ÿπÿ±ÿ∂ Options
  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  // ÿØÿßŸÑÿ© ÿπÿ±ÿ∂ Notes
  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>üí¨</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.orderSummary}>
      {/* Header */}
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      {/* Content */}
      <div className={styles.orderContent}>
        {/* Customer Info */}
        {selectedCustomer && (
          <div className={styles.customerInfo}>
            <div className={styles.customerName}>
              üë§ {selectedCustomer.name}
              {selectedCustomer.isVIP && <span className={styles.vipBadge}>VIP</span>}
            </div>
            <div className={styles.customerPhone}>
              üìû {selectedCustomer.phone1}
            </div>
            {selectedAddress && selectedAddress.addressLine && (
              <div className={styles.customerAddress}>
                üìç {selectedAddress.addressLine}
                {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
              </div>
            )}
          </div>
        )}

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div className={`${styles.orderItem} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}>
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice.toFixed(2)}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>

              {/* <div className={styles.backButtonContainer}>
        <button className={styles.backButton} onClick={onGoBack}>
          ÿ±ÿ¨Ÿàÿπ
        </button>
      </div> */}
      </div>
    </div>
  );
};

export default PaymentOrderSummary;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentRight.tsx =====
import React from 'react';
import styles from './styles/PaymentRight.module.css';

interface PaymentMethodData {
  method: string;
  amount: number;
  isSelected: boolean;
}

interface PaymentRightProps {
  availablePaymentMethods: string[];
  selectedPayments: PaymentMethodData[];
  selectedPaymentMethod: string | null;
  onPaymentMethodSelect: (method: string) => void;
  onPaymentMethodToggle: (method: string) => void;
  onFinishPayment: () => void;
  canFinish: boolean;
  totalPaidAllMethods: number;
  totalAmount: number;
  nonCashTotal: number;
  onShowWarning?: (message: string) => void;
  // ÿ•ÿ∂ÿßŸÅÿ© prop ÿ¨ÿØŸäÿØ ŸÑÿØÿπŸÖ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  isEditMode?: boolean;
  isSubmitting?: boolean; // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
}

const PaymentRight: React.FC<PaymentRightProps> = ({
  availablePaymentMethods = [],
  selectedPayments,
  selectedPaymentMethod,
  onPaymentMethodSelect,
  onPaymentMethodToggle,
  onFinishPayment,
  canFinish,
  totalAmount,
  nonCashTotal,
  onShowWarning,
  isEditMode = false, // ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© false
  isSubmitting = false // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
}) => {
  const getPaymentData = (methodName: string) => {
    return selectedPayments.find(payment => payment.method === methodName);
  };

  // ÿØÿßŸÑÿ© ŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÅÿπŸÑŸä ÿßŸÑŸÖÿ≥ÿßŸáŸÖ ŸÅŸä ÿßŸÑÿ£Ÿàÿ±ÿØÿ± ŸÑŸÉŸÑ ÿ∑ÿ±ŸäŸÇÿ© ÿØŸÅÿπ
  const getActualContributionAmount = (method: string, amount: number) => {
    const isCash = method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                   method.toLowerCase().includes('cash');
    
    if (!isCash) {
      // ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßÿ¥: ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÅÿπŸÑŸä ŸÅŸÇÿ∑
      return Math.min(amount, totalAmount);
    } else {
      // ŸÑŸÑŸÉÿßÿ¥: ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≥ÿßŸáŸÖÿ© ÿßŸÑŸÅÿπŸÑŸäÿ© ŸÅŸä ÿßŸÑÿ£Ÿàÿ±ÿØÿ± ŸÅŸÇÿ∑
      const actualCashContribution = Math.max(0, totalAmount - nonCashTotal);
      return Math.min(amount, actualCashContribution);
    }
  };

  // ÿØÿßŸÑÿ© ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑŸÉÿßÿ±ÿØ ŸÖÿπ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ
  const handleCardClick = (method: string) => {
    const paymentData = getPaymentData(method);
    const isCurrentlyActive = paymentData?.isSelected || false;
    const isCash = method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                   method.toLowerCase().includes('cash');
    
    if (!isCurrentlyActive && !isCash) {
      // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØÿØ ÿßŸÑÿ∑ÿ±ŸÇ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ©
      const activeNonCashCount = selectedPayments.filter(p => {
        const isNonCash = !(p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                           p.method.toLowerCase().includes('cash'));
        return isNonCash && p.isSelected && p.amount > 0;
      }).length;
      
      if (activeNonCashCount >= 2) {
        onShowWarning?.('ŸÑÿß ŸäŸÖŸÉŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ Ÿàÿ≥ŸäŸÑÿ™Ÿä ÿØŸÅÿπ ÿ∫Ÿäÿ± ŸÜŸÇÿØŸäÿ©');
        return;
      }
    }
    
    if (!isCurrentlyActive) {
      onPaymentMethodToggle(method);
      onPaymentMethodSelect(method);
    } else {
      onPaymentMethodSelect(method);
    }
  };

  // ÿØÿßŸÑÿ© ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÄ checkbox
  const handleCheckboxChange = (method: string, event: React.ChangeEvent<HTMLInputElement>) => {
    event.stopPropagation();
    
    const isCash = method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                   method.toLowerCase().includes('cash');
    const paymentData = getPaymentData(method);
    const isCurrentlyActive = paymentData?.isSelected || false;
    
    if (!isCurrentlyActive && !isCash) {
      // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØÿØ ÿßŸÑÿ∑ÿ±ŸÇ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ©
      const activeNonCashCount = selectedPayments.filter(p => {
        const isNonCash = !(p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                           p.method.toLowerCase().includes('cash'));
        return isNonCash && p.isSelected && p.amount > 0;
      }).length;
      
      if (activeNonCashCount >= 2) {
        onShowWarning?.('ŸÑÿß ŸäŸÖŸÉŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ Ÿàÿ≥ŸäŸÑÿ™Ÿä ÿØŸÅÿπ ÿ∫Ÿäÿ± ŸÜŸÇÿØŸäÿ©');
        return;
      }
    }
    
    onPaymentMethodToggle(method);
    
    const willBeSelected = !isCurrentlyActive;
    
    if (!willBeSelected && selectedPaymentMethod === method) {
      const otherActiveMethod = selectedPayments.find(p => 
        p.method !== method && p.isSelected && p.amount > 0
      );
      if (otherActiveMethod) {
        onPaymentMethodSelect(otherActiveMethod.method);
      } else {
        const cashMethod = selectedPayments.find(p => 
          (p.method.toLowerCase().includes('ŸÉÿßÿ¥') || p.method.toLowerCase().includes('cash')) && 
          p.method !== method &&
          p.isSelected
        );
        if (cashMethod) {
          onPaymentMethodSelect(cashMethod.method);
        }
      }
    }
  };

  const isLongName = (name: string) => name.length > 15;

  // ÿ™ÿ≠ÿØŸäÿØ ŸÜÿµ ÿßŸÑÿ≤ÿ± ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  const getButtonText = () => {
    if (isEditMode) {
      return 'ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ∑ŸÑÿ®';
    }
    return 'ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿØŸÅÿπ';
  };

  // ÿ™ÿ≠ÿØŸäÿØ ÿπŸÜŸàÿßŸÜ ÿßŸÑŸÇÿ≥ŸÖ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  const getSectionTitle = () => {
    if (isEditMode) {
      return 'ÿ™ÿπÿØŸäŸÑ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ';
    }
    return 'ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©';
  };

  if (availablePaymentMethods.length === 0) {
    return (
      <div className={styles.container}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100%',
          fontFamily: 'Cairo, sans-serif',
          color: '#666'
        }}>
          ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ...
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÜŸàÿßŸÜ ŸÑŸÑŸÇÿ≥ŸÖ */}
      {isEditMode && (
        <div className={styles.sectionHeader}>
          <h3 className={styles.sectionTitle}>
            {getSectionTitle()}
          </h3>
        </div>
      )}
      
<button 
  className={`${styles.finishBtn} ${!canFinish || isSubmitting ? styles.disabled : ''} ${isEditMode ? styles.editMode : ''}`}
  onClick={onFinishPayment}
  disabled={!canFinish || isSubmitting}
  title={isEditMode ? 'ÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ® ŸÖÿπ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑÿ¨ÿØŸäÿØÿ©' : 'ÿ•ŸÜŸáÿßÿ° ÿπŸÖŸÑŸäÿ© ÿßŸÑÿØŸÅÿπ'}
>
  {isSubmitting ? (
    <>
      <span className={styles.loadingSpinner}></span>
      {isEditMode ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ÿØŸäÿ´...' : 'ÿ¨ÿßÿ±Ÿä ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿ©...'}
    </>
  ) : (
    <>
      {getButtonText()}
      {isEditMode && (
        <span className={styles.editIcon}>
          ‚úèÔ∏è
        </span>
      )}
    </>
  )}
</button>
      
      <div className={styles.methodsList}>
        {availablePaymentMethods.map((method) => {
          const paymentData = getPaymentData(method);
          const amount = paymentData?.amount || 0;
          const isActive = paymentData?.isSelected || false;
          const isSelectedForEdit = selectedPaymentMethod === method;
          const longName = isLongName(method);
          
          // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÅÿπŸÑŸä ÿßŸÑŸÖÿ≥ÿßŸáŸÖ ŸÅŸä ÿßŸÑÿ£Ÿàÿ±ÿØÿ±
          const actualContribution = getActualContributionAmount(method, amount);
          const hasAmount = actualContribution > 0;
          
          return (
            <div 
              key={method} 
              className={`${styles.methodItem} ${isActive ? styles.active : ''} ${isSelectedForEdit ? styles.selectedForEdit : ''} ${hasAmount ? styles.hasAmount : ''} ${longName ? styles.longName : ''} ${isEditMode ? styles.editModeItem : ''}`}
              onClick={() => handleCardClick(method)}
            >
              <div className={styles.methodHeader}>
                <input
                  type="checkbox"
                  checked={isActive}
                  onChange={(e) => handleCheckboxChange(method, e)}
                  className={styles.methodCheckbox}
                />
                <span className={styles.methodName}>{method}</span>
              </div>
              
              {hasAmount && (
                <div className={styles.methodAmount}>
                  {actualContribution.toFixed(2)} ÿ¨ŸÜŸäŸá
                  {isEditMode && (
                    <span className={styles.editLabel}>
                      (ŸÇÿßÿ®ŸÑ ŸÑŸÑÿ™ÿπÿØŸäŸÑ)
                    </span>
                  )}
                </div>
              )}
              
              {isSelectedForEdit && (
                <div className={styles.editIndicator}>
                  {isEditMode ? 'Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß ÿßŸÑÿ¢ŸÜ' : 'Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿπÿØŸäŸÑ ÿπŸÑŸäŸáÿß ÿßŸÑÿ¢ŸÜ'}
                  {isEditMode && (
                    <span className={styles.editingIcon}>
                      üîÑ
                    </span>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      <div className={styles.paymentSummary}>
        <div className={styles.summaryRow}>
          <span>
            {isEditMode ? 'ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿ≠ÿØÿ´ÿ©:' : 'ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©:'}
          </span>
          <span className={styles.methodsCount}>
            {selectedPayments.filter(p => p.isSelected && getActualContributionAmount(p.method, p.amount) > 0).length}
          </span>
        </div>
      </div>
    </div>
  );
};

export default PaymentRight;

===== src/Pages/pos/newSales/components/PaymentPopup.tsx =====
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { OrderSummary as OrderSummaryType } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import PaymentLeft from './paymentPopup components/PaymentLeft';
import PaymentCenter from './paymentPopup components/PaymentCenter';
import PaymentRight from './paymentPopup components/PaymentRight';
import styles from '../styles/PaymentPopup.module.css';
import { usePosPaymentMethods } from '../hooks/usePosPaymentMethods';
import { Snackbar, Alert } from '@mui/material';
import * as invoicesApi from 'src/utils/api/pagesApi/invoicesApi';
import { useInvoiceManager } from '../hooks/useInvoiceManager';

interface PaymentMethodData {
  method: string;
  amount: number;
  isSelected: boolean;
  wasModified?: boolean;
}

interface PaymentPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentComplete: (result: {
    success: boolean;
    invoice?: any;
    payments: PaymentMethodData[];
    error?: string;
  }) => void;
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: any) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  selectedTable?: any;
  selectedDeliveryCompany?: any;
  // ÿ•ÿ∂ÿßŸÅÿ© props ÿ¨ÿØŸäÿØÿ© ŸÑÿØÿπŸÖ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  isEditMode?: boolean;
  currentInvoiceId?: string | null;
}

const PaymentPopup: React.FC<PaymentPopupProps> = ({
  isOpen,
  onClose,
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick,
  selectedCustomer,
  selectedAddress,
  onCustomerSelect,
  orderType,
  onDeliveryChargeChange,
  onPaymentComplete,
  selectedTable,
  selectedDeliveryCompany,
  isEditMode = false, // ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© false
  currentInvoiceId = null // ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© null
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);
  const { paymentMethods, loading, error } = usePosPaymentMethods();
  
  // ÿ•ÿ∂ÿßŸÅÿ© state ŸÑŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
  const [localAlert, setLocalAlert] = useState({
    open: false,
    message: '',
    severity: 'warning' as 'warning' | 'error' | 'success' | 'info'
  });

  const [selectedPayments, setSelectedPayments] = useState<PaymentMethodData[]>([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string | null>(null);
  const [paidAmount, setPaidAmount] = useState('0');
  const [lastNonCashTotal, setLastNonCashTotal] = useState(0);
  const [isFirstInput, setIsFirstInput] = useState(true);
  const { saveInvoice, isSubmitting: isInvoiceSubmitting } = useInvoiceManager();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // ÿØŸàÿßŸÑ ÿπÿ±ÿ∂ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
  const showLocalSuccess = (message: string) => {
    setLocalAlert({
      open: true,
      message,
      severity: 'success'
    });
  };

  const showLocalWarning = (message: string) => {
    setLocalAlert({
      open: true,
      message,
      severity: 'warning'
    });
  };

  const showLocalError = (message: string) => {
    setLocalAlert({
      open: true,
      message,
      severity: 'error'
    });
  };

  // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ÿßŸÑÿ∫
  const deliveryCharge = 0;
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const totalAmount = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ∑ÿ±ŸäŸÇÿ© ÿØŸÅÿπ ÿßŸÑŸÉÿßÿ¥
  const getCashMethod = () => {
    return paymentMethods.find(
      m => m.name.toLowerCase().includes('ŸÉÿßÿ¥') || m.name.toLowerCase().includes('cash')
    );
  };

  // ÿØÿßŸÑÿ© ŸÑÿ≠ÿ≥ÿßÿ® ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßÿ¥
  const getActiveNonCashPayments = () => {
    return selectedPayments.filter(payment => {
      const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                     payment.method.toLowerCase().includes('cash');
      return !isCash && payment.isSelected && payment.amount > 0;
    });
  };

  // ÿ≠ÿ≥ÿßÿ® ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿØŸÅŸàÿπ ÿ®ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßÿ¥
  const nonCashTotal = selectedPayments
    .filter(payment => {
      const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                     payment.method.toLowerCase().includes('cash');
      return !isCash && payment.amount > 0;
    })
    .reduce((sum, payment) => sum + payment.amount, 0);

  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÉÿßÿ¥ ÿßŸÑÿ≠ÿßŸÑŸä
  const getCurrentCashAmount = () => {
    const cashPayment = selectedPayments.find(payment => {
      const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                     payment.method.toLowerCase().includes('cash');
      return isCash;
    });
    return cashPayment?.amount || 0;
  };

  const cashAmount = getCurrentCashAmount();
  
  // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ŸÑŸÑÿπŸÖŸäŸÑ (ŸÅŸÇÿ∑ ŸÖŸÜ ÿßŸÑŸÉÿßÿ¥)
  const remainingForCustomer = Math.max(0, cashAmount - Math.max(0, totalAmount - nonCashTotal));

  // ÿØÿßŸÑÿ© ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ŸÖÿπ ŸÖŸÜÿ∑ŸÇ ÿßŸÑŸÜŸÇŸÑ ÿßŸÑÿ∞ŸÉŸä
  const handlePaymentMethodToggle = (method: string) => {
    const isCash = method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                   method.toLowerCase().includes('cash');
    
    // ŸÑŸÑÿ∑ÿ±ŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ©: ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿπÿØÿØ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠
    if (!isCash) {
      const activeNonCashPayments = getActiveNonCashPayments();
      const isCurrentlyActive = selectedPayments.find(p => p.method === method)?.isSelected || false;
      
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ Ÿäÿ≠ÿßŸàŸÑ ÿ™ŸÅÿπŸäŸÑ ÿ∑ÿ±ŸäŸÇÿ© ÿ´ÿßŸÑÿ´ÿ© ÿ∫Ÿäÿ± ŸÜŸÇÿØŸäÿ©
      if (!isCurrentlyActive && activeNonCashPayments.length >= 2) {
        showLocalWarning('ŸÑÿß ŸäŸÖŸÉŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ Ÿàÿ≥ŸäŸÑÿ™Ÿä ÿØŸÅÿπ ÿ∫Ÿäÿ± ŸÜŸÇÿØŸäÿ©');
        return;
      }
    }

    setSelectedPayments(prevPayments => {
      return prevPayments.map(payment => {
        if (payment.method === method) {
          const newIsSelected = !payment.isSelected;
          
          if (isCash && newIsSelected) {
            // ŸÑŸÑŸÉÿßÿ¥: ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ŸÅŸÇÿ∑
            const currentNonCashTotal = prevPayments
              .filter(p => {
                const isOtherCash = p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                                 p.method.toLowerCase().includes('cash');
                return !isOtherCash && p.isSelected && p.amount > 0;
              })
              .reduce((sum, p) => sum + p.amount, 0);
            
            const remainingAmount = Math.max(0, totalAmount - currentNonCashTotal);
            
            return {
              ...payment,
              isSelected: true,
              amount: remainingAmount,
              wasModified: false
            };
          } else if (!isCash && newIsSelected) {
            // ŸÑŸÑÿ∑ÿ±ŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©: ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸÖŸÜÿ∑ŸÇ ÿßŸÑÿ∞ŸÉŸä
            const currentActiveNonCash = prevPayments.find(p => {
              const isOtherCash = p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                               p.method.toLowerCase().includes('cash');
              return !isOtherCash && p.method !== method && p.isSelected && p.amount > 0;
            });
            
            let amountToAssign = 0;
            
            if (currentActiveNonCash) {
              // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ÿ∑ÿ±ŸäŸÇÿ© ŸÜÿ¥ÿ∑ÿ© ÿ£ÿÆÿ±Ÿâ
              if (currentActiveNonCash.wasModified) {
                // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß: ÿ£ÿÆÿ∞ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ŸÖŸÜ ÿßŸÑŸÉÿßÿ¥
                const currentCash = prevPayments.find(p => {
                  const isCashPayment = p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                                       p.method.toLowerCase().includes('cash');
                  return isCashPayment;
                });
                amountToAssign = currentCash?.amount || 0;
              } else {
                // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß: ŸÜŸÇŸÑ ŸÉÿßŸÖŸÑ ÿßŸÑŸÇŸäŸÖÿ©
                amountToAssign = currentActiveNonCash.amount;
              }
            } else {
              // ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ÿ±ŸäŸÇÿ© ŸÜÿ¥ÿ∑ÿ© ÿ£ÿÆÿ±Ÿâ: ÿ£ÿÆÿ∞ ŸÉÿßŸÖŸÑ ÿßŸÑŸÖÿ®ŸÑÿ∫
              amountToAssign = totalAmount;
            }
            
            return {
              ...payment,
              isSelected: true,
              amount: amountToAssign,
              wasModified: false
            };
          } else {
            // ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ™ŸÅÿπŸäŸÑ
            return {
              ...payment,
              isSelected: false,
              amount: 0,
              wasModified: false
            };
          }
        } else {
          // ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ∑ÿ±ŸÇ ÿßŸÑÿ£ÿÆÿ±Ÿâ ÿπŸÜÿØ ÿ™ŸÅÿπŸäŸÑ ÿ∑ÿ±ŸäŸÇÿ© ÿ¨ÿØŸäÿØÿ©
          const newMethodData = prevPayments.find(p => p.method === method);
          const isNewMethodBeingActivated = newMethodData && !newMethodData.isSelected;
          
          if (isNewMethodBeingActivated && !isCash) {
            const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                           payment.method.toLowerCase().includes('cash');
            const isCurrentNonCash = !(payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                                     payment.method.toLowerCase().includes('cash'));
            
            // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© ÿ∫Ÿäÿ± ŸÜŸÇÿØŸäÿ© ŸàŸÜÿ¥ÿ∑ÿ©
            if (isCurrentNonCash && payment.isSelected) {
              if (payment.wasModified) {
                // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß: ÿßÿ≠ÿ™ŸÅÿ∏ ÿ®Ÿáÿß ŸàŸÇŸÑŸÑ ŸÖŸÜ ÿßŸÑŸÉÿßÿ¥
                return payment;
              } else {
                // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß: ÿßŸÜŸÇŸÑ ŸÇŸäŸÖÿ™Ÿáÿß ŸÑŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
                return {
                  ...payment,
                  isSelected: false,
                  amount: 0,
                  wasModified: false
                };
              }
            } else if (isCash) {
              // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÉÿßÿ¥ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ≠ÿßŸÑÿ©
              const currentActiveNonCash = prevPayments.find(p => {
                const isOtherCash = p.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                                   p.method.toLowerCase().includes('cash');
                return !isOtherCash && p.method !== method && p.isSelected && p.amount > 0;
              });
              
              if (currentActiveNonCash?.wasModified) {
                // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÜÿ¥ÿ∑ÿ© ŸÖÿπÿØŸÑÿ©: ÿßŸÑŸÉÿßÿ¥ ŸäŸÅŸÇÿØ ŸÇŸäŸÖÿ™Ÿá ŸÑŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
                const newMethodAmount = payment.amount;
                return {
                  ...payment,
                  amount: Math.max(0, payment.amount - newMethodAmount),
                  isSelected: Math.max(0, payment.amount - newMethodAmount) > 0
                };
              } else {
                // ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ŸÖÿπÿØŸÑÿ©: ÿßŸÑŸÉÿßÿ¥ Ÿäÿ£ÿÆÿ∞ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä
                const newAmount = Math.max(0, totalAmount - (currentActiveNonCash?.amount || totalAmount));
                return {
                  ...payment,
                  amount: newAmount,
                  isSelected: newAmount > 0
                };
              }
            }
          }
          
          return payment;
        }
      });
    });
  };

  // ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÉÿßÿ¥ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßÿ¥
  useEffect(() => {
    const cashMethod = getCashMethod();
    if (!cashMethod) return;

    if (nonCashTotal !== lastNonCashTotal) {
      const autoCalculatedCashAmount = Math.max(0, totalAmount - nonCashTotal);

      setSelectedPayments(prevPayments => {
        return prevPayments.map(payment => {
          const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                         payment.method.toLowerCase().includes('cash');
          
          if (isCash) {
            return {
              ...payment,
              amount: autoCalculatedCashAmount,
              isSelected: autoCalculatedCashAmount > 0
            };
          }
          return payment;
        });
      });

      const selectedCash = selectedPaymentMethod?.toLowerCase().includes('ŸÉÿßÿ¥') || 
                          selectedPaymentMethod?.toLowerCase().includes('cash');
      if (selectedCash) {
        setPaidAmount(autoCalculatedCashAmount === 0 ? '0' : autoCalculatedCashAmount.toFixed(2));
        setIsFirstInput(true);
      }

      setLastNonCashTotal(nonCashTotal);
    }
  }, [nonCashTotal, totalAmount, selectedPaymentMethod, lastNonCashTotal]);

  // ÿ™ŸáŸäÿ¶ÿ© ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ
  useEffect(() => {
    if (!isOpen || !paymentMethods?.length) return;
    
    const cashMethod = getCashMethod();
    const initialPayments = paymentMethods.map(method => {
      const isCash = method.name.toLowerCase().includes('ŸÉÿßÿ¥') || 
                     method.name.toLowerCase().includes('cash');
      
      return {
        method: method.name,
        amount: isCash ? totalAmount : 0,
        isSelected: isCash,
        wasModified: false
      };
    });
    
    setSelectedPayments(initialPayments);
    
    if (cashMethod) {
      setSelectedPaymentMethod(cashMethod.name);
      setPaidAmount(totalAmount.toFixed(2));
      setIsFirstInput(true);
    }
    
    setLastNonCashTotal(0);
  }, [isOpen, paymentMethods, totalAmount]);

  // ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖÿ®ŸÑÿ∫ ŸÖÿπ ÿ™ÿ≠ÿØŸäÿØ flag ÿßŸÑÿ™ÿπÿØŸäŸÑ
  const handleAmountChange = (amount: string) => {
    setIsFirstInput(false);
    setPaidAmount(amount);
    
    if (selectedPaymentMethod) {
      const numericAmount = parseFloat(amount) || 0;
      const isCashSelected = selectedPaymentMethod.toLowerCase().includes('ŸÉÿßÿ¥') || 
                            selectedPaymentMethod.toLowerCase().includes('cash');
      
      if (!isCashSelected) {
        // ŸÑŸÑÿ∑ÿ±ŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ©: ŸÖŸÜÿπ ÿßŸÑÿ™ÿ¨ÿßŸàÿ≤ ÿπŸÜ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä Ÿàÿ™ÿ≠ÿØŸäÿØ wasModified
        const currentOtherNonCashTotal = selectedPayments
          .filter(payment => {
            const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                           payment.method.toLowerCase().includes('cash');
            return !isCash && payment.method !== selectedPaymentMethod && payment.amount > 0;
          })
          .reduce((sum, payment) => sum + payment.amount, 0);
        
        const maxAllowed = Math.max(0, totalAmount - currentOtherNonCashTotal);
        const finalAmount = Math.min(numericAmount, maxAllowed);
        
        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿØÿÆŸÑ ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ŸÇŸÑŸäŸÑŸá
        if (finalAmount !== numericAmount) {
          setPaidAmount(finalAmount.toFixed(2));
        }
        
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: finalAmount,
                isSelected: finalAmount > 0,
                wasModified: true // ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸÜŸá ÿ™ŸÖ ÿßŸÑÿ™ÿπÿØŸäŸÑ
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                const remainingAmount = Math.max(0, totalAmount - currentOtherNonCashTotal - finalAmount);
                return {
                  ...payment,
                  amount: remainingAmount,
                  isSelected: remainingAmount > 0
                };
              }
              return payment;
            }
          });
        });
      } else {
        // ŸÑŸÑŸÉÿßÿ¥: ŸäŸÖŸÉŸÜ ÿ£Ÿä ŸÖÿ®ŸÑÿ∫
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: numericAmount,
                isSelected: numericAmount > 0,
                wasModified: true // ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸÜŸá ÿ™ŸÖ ÿßŸÑÿ™ÿπÿØŸäŸÑ
              };
            }
            return payment;
          });
        });
      }
    }
  };

  const handleQuickAmountSelect = (amount: number) => {
    setIsFirstInput(false);
    
    if (selectedPaymentMethod) {
      const isCashSelected = selectedPaymentMethod.toLowerCase().includes('ŸÉÿßÿ¥') || 
                            selectedPaymentMethod.toLowerCase().includes('cash');
      
      setPaidAmount(amount.toFixed(2));
      
      if (!isCashSelected) {
        // ŸÑŸÑÿ∑ÿ±ŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÜŸÇÿØŸäÿ©: ŸÖŸÜÿπ ÿßŸÑÿ™ÿ¨ÿßŸàÿ≤ Ÿàÿ™ÿ≠ÿØŸäÿØ wasModified
        const currentOtherNonCashTotal = selectedPayments
          .filter(payment => {
            const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                           payment.method.toLowerCase().includes('cash');
            return !isCash && payment.method !== selectedPaymentMethod && payment.amount > 0;
          })
          .reduce((sum, payment) => sum + payment.amount, 0);
        
        const maxAllowed = Math.max(0, totalAmount - currentOtherNonCashTotal);
        const finalAmount = Math.min(amount, maxAllowed);
        
        if (finalAmount !== amount) {
          setPaidAmount(finalAmount.toFixed(2));
        }
        
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: finalAmount,
                isSelected: true,
                wasModified: true // ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸÜŸá ÿ™ŸÖ ÿßŸÑÿ™ÿπÿØŸäŸÑ
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                const remainingAmount = Math.max(0, totalAmount - currentOtherNonCashTotal - finalAmount);
                return {
                  ...payment,
                  amount: remainingAmount,
                  isSelected: remainingAmount > 0
                };
              }
              return payment;
            }
          });
        });
      } else {
        // ŸÑŸÑŸÉÿßÿ¥: ŸÑÿß ÿ™ÿ£ÿ´Ÿäÿ± ÿπŸÑŸâ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑÿ£ÿÆÿ±Ÿâ Ÿàÿ™ÿ≠ÿØŸäÿØ wasModified
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: amount,
                isSelected: true,
                wasModified: true // ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸÜŸá ÿ™ŸÖ ÿßŸÑÿ™ÿπÿØŸäŸÑ
              };
            }
            return payment;
          });
        });
      }
    }
  };

  const handlePaymentMethodSelect = (method: string) => {
    setSelectedPaymentMethod(method);
    
    const isCashSelected = method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                          method.toLowerCase().includes('cash');
    
    if (!isCashSelected) {
      // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ŸÑŸÑÿ£Ÿàÿ±ÿØÿ±
      const currentNonCashTotal = selectedPayments
        .filter(payment => {
          const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                         payment.method.toLowerCase().includes('cash');
          return !isCash && payment.method !== method && payment.amount > 0;
        })
        .reduce((sum, payment) => sum + payment.amount, 0);
      
      const remainingAmountForOrder = Math.max(0, totalAmount - currentNonCashTotal);
      
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸäÿå ÿ∂ÿπŸá ŸÅŸä ÿßŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÖÿÆÿ™ÿßÿ±ÿ©
      if (remainingAmountForOrder > 0) {
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === method) {
              return {
                ...payment,
                amount: remainingAmountForOrder,
                isSelected: true,
                wasModified: false // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿπŸÜÿØ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                // ÿµŸÅÿ± ÿßŸÑŸÉÿßÿ¥ ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ∫ÿ∑Ÿäÿ© ÿßŸÑÿ£Ÿàÿ±ÿØÿ± ÿ®ÿßŸÑŸÉÿßŸÖŸÑ
                return {
                  ...payment,
                  amount: 0,
                  isSelected: false
                };
              }
              return payment;
            }
          });
        });
        
        setPaidAmount(remainingAmountForOrder.toFixed(2));
      } else {
        const currentPayment = selectedPayments.find(p => p.method === method);
        const amount = currentPayment?.amount || 0;
        setPaidAmount(amount === 0 ? '0' : amount.toFixed(2));
      }
      
      setIsFirstInput(true);
    } else {
      const currentPayment = selectedPayments.find(p => p.method === method);
      const amount = currentPayment?.amount || 0;
      setPaidAmount(amount === 0 ? '0' : amount.toFixed(2));
      setIsFirstInput(true);
    }
  };
  const canFinish = (nonCashTotal + cashAmount) >= totalAmount;

  // ÿßŸÑÿØÿßŸÑÿ© ÿßŸÑŸÖÿ≠ÿØÿ´ÿ© ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿØŸÅÿπ
const handleFinishPayment = useCallback(async () => {
  if (isSubmitting) return; // ŸÖŸÜÿπ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±
  if (!canFinish) return;

  try {
    setIsSubmitting(true);

    // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÄ hook ÿßŸÑÿ¨ÿØŸäÿØ
    const invoiceResult = await saveInvoice(
      orderSummary,
      orderType,
      selectedPayments,
      {
        isEditMode,
        invoiceId: currentInvoiceId,
        selectedCustomer,
        selectedAddress,
        selectedDeliveryCompany,
        selectedTable,
        servicePercentage: 0, // ŸäŸÖŸÉŸÜ ÿ™ÿÆÿµŸäÿµŸá
        taxPercentage: 0, // ŸäŸÖŸÉŸÜ ÿ™ÿÆÿµŸäÿµŸá
        discountPercentage: 0, // ŸäŸÖŸÉŸÜ ÿ™ÿÆÿµŸäÿµŸá
        notes: customerName
      }
    );

    showLocalSuccess(
      isEditMode 
        ? `ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠!`
        : `ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠! ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©: ${invoiceResult.invoiceNumber}`
    );

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ŸÑŸÑŸÖŸÉŸàŸÜ ÿßŸÑÿ£ÿµŸÑŸä
    onPaymentComplete({
      success: true,
      invoice: invoiceResult,
      payments: selectedPayments.filter(p => p.isSelected && p.amount > 0)
    });

  } catch (error: any) {
    console.error('Error processing payment:', error);
    showLocalError(error.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿØŸÅÿπ');
    
    onPaymentComplete({
      success: false,
      payments: selectedPayments,
      error: error.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿØŸÅÿπ'
    });
  } finally {
    setIsSubmitting(false);
  }
}, [
  canFinish,
  orderSummary,
  orderType,
  selectedPayments,
  selectedCustomer,
  selectedAddress,
  selectedDeliveryCompany,
  selectedTable,
  customerName,
  isEditMode,
  currentInvoiceId,
  saveInvoice,
  onPaymentComplete
]);


  if (!isOpen) return null;

  return (
    <div className={styles.overlay} ref={overlayRef}>
      <div className={styles.popup}>
        <div className={styles.header}>
          <div className={styles.logo}>
            <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify" />
          </div>
          <h2 className={styles.title}>
            {isEditMode ? 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®' : 'ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿØŸÅÿπ'}
          </h2>
          <button className={styles.closeBtn} onClick={onClose}>√ó</button>
        </div>

        <div className={styles.content}>
          <div className={styles.leftSection}>
            <PaymentLeft
              orderSummary={orderSummary}
              selectedCustomer={selectedCustomer}
              selectedAddress={selectedAddress}
              orderType={orderType}
              deliveryCharge={deliveryCharge}
            />
          </div>
          <div className={styles.centerSection}>
            <PaymentCenter
              totalAmount={totalAmount}
              paidAmount={paidAmount}
              cashAmount={cashAmount}
              remainingForCustomer={remainingForCustomer}
              selectedPaymentMethod={selectedPaymentMethod}
              onAmountChange={handleAmountChange}
              onQuickAmountSelect={handleQuickAmountSelect}
              isFirstInput={isFirstInput}
              nonCashTotal={nonCashTotal}
            />
          </div>
          <div className={styles.rightSection}>
            {loading ? (
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
                fontFamily: 'Cairo, sans-serif'
              }}>
                ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ...
              </div>
            ) : error ? (
              <div style={{ color: 'red', textAlign: 'center', marginTop: 20 }}>{error}</div>
            ) : (
              <PaymentRight
                availablePaymentMethods={paymentMethods.map(m => m.name)}
                selectedPayments={selectedPayments}
                selectedPaymentMethod={selectedPaymentMethod}
                onPaymentMethodSelect={handlePaymentMethodSelect}
                onPaymentMethodToggle={handlePaymentMethodToggle}
                onFinishPayment={handleFinishPayment}
                canFinish={canFinish}
                totalPaidAllMethods={nonCashTotal + cashAmount}
                totalAmount={totalAmount}
                nonCashTotal={nonCashTotal}
                onShowWarning={showLocalWarning}
                isEditMode={isEditMode} // ÿ™ŸÖÿ±Ÿäÿ± ŸÖÿπŸÑŸàŸÖÿ© Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
                  isSubmitting={isInvoiceSubmitting} // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©

              />
            )}
          </div>
        </div>

        {/* ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÄ Snackbar ÿßŸÑŸÖÿ≠ŸÑŸä ÿØÿßÿÆŸÑ ÿßŸÑŸÄ popup */}
        <Snackbar
          open={localAlert.open}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
          autoHideDuration={4000}
          onClose={() => setLocalAlert(prev => ({ ...prev, open: false }))}
          sx={{ 
            position: 'absolute', // ŸÖŸáŸÖ: ŸÜÿ≥ÿ®Ÿä ŸÑŸÖŸàÿ∂ÿπ ÿßŸÑŸÄ popup
            zIndex: 10 // ŸÅŸàŸÇ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÄ popup
          }}
        >
          <Alert
            onClose={() => setLocalAlert(prev => ({ ...prev, open: false }))}
            severity={localAlert.severity}
            variant="filled"
            sx={{ 
              width: '100%',
              fontFamily: 'Cairo, sans-serif'
            }}
          >
            {localAlert.message}
          </Alert>
        </Snackbar>
      </div>
    </div>
  );
};

export default PaymentPopup;

===== src/Pages/pos/newSales/components/PriceSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/PriceSelectionPopup.module.css';

interface PriceSelectionPopupProps {
  product: PosProduct | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen || !product) return null;

  return (
    <div className={styles.popupOverlay} ref={overlayRef}>
      <div className={styles.popupContent}>
        <div className={styles.popupHeader}>
          <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
          <button className={styles.popupClose} onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className={styles.popupBody}>
          
          <div className={styles.pricesGrid}>
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className={styles.priceCard}
                onClick={() => onSelectPrice(price)}
              >
                <div className={styles.priceName}>{price.nameArabic}</div>
                <div className={styles.priceValue}>
                  <span className={styles.price}>{price.price}</span>
                  <span className={styles.currency}>EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;

===== src/Pages/pos/newSales/components/ProductCard.tsx =====
// src/Pages/pos/newSales/components/ProductCard.tsx
import React from 'react';
import { PosProduct } from '../types/PosSystem';
import styles from '../styles/ProductCard.module.css';

interface ProductCardProps {
  product: PosProduct;
  onClick: (product: PosProduct) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onClick }) => {
  const handleClick = () => {
    onClick(product);
  };

  // ÿ™ÿ≠ÿØŸäÿØ ŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸá ÿ≥ÿπÿ± Ÿàÿßÿ≠ÿØ ÿ£ŸÖ ÿ£ŸÉÿ´ÿ±
  const hasMultiplePrices = product.hasMultiplePrices;
  const singlePrice = !hasMultiplePrices && product.productPrices.length > 0 
    ? product.productPrices[0].price 
    : null;

  return (
    <div className={styles.productCard} onClick={handleClick}>
      <div className={styles.productImageContainer}>
        <img 
          src={product.image} 
          alt={product.nameArabic} 
          className={styles.productImage}
        />
        
        {/* ÿπÿ±ÿ∂ ÿßŸÑÿ≥ÿπÿ± ÿπŸÑŸâ ÿßŸÑÿµŸàÿ±ÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸá ÿ≥ÿπÿ± Ÿàÿßÿ≠ÿØ */}
        {singlePrice !== null && (
          <div className={styles.priceOverlay}>
            {singlePrice.toFixed(2)} EGP
          </div>
        )}
      </div>
      
      <div className={styles.productInfo}>
        <h3 className={styles.productName}>
          {product.nameArabic}
        </h3>
      </div>
    </div>
  );
};

export default ProductCard;

===== src/Pages/pos/newSales/components/ProductOptionsPopup.tsx =====
// src/Pages/pos/newSales/components/ProductOptionsPopup.tsx
import React, { useState, useEffect } from 'react';
import { PosProduct, PosPrice, ProductOptionGroup, ProductOptionItem, SelectedOption } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import CheckIcon from '@mui/icons-material/Check';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import styles from '../styles/ProductOptionsPopup.module.css';

interface ProductOptionsPopupProps {
  product: PosProduct | null;
  selectedPrice: PosPrice | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onComplete: (selectedOptions: SelectedOption[]) => void;
}

const ProductOptionsPopup: React.FC<ProductOptionsPopupProps> = ({
  product,
  selectedPrice,
  quantity,
  isOpen,
  onClose,
  onComplete
}) => {
  const [selectedOptions, setSelectedOptions] = useState<SelectedOption[]>([]);
  const [groupSelections, setGroupSelections] = useState<{[groupId: string]: {[itemId: string]: number}}>({});
  const [currentGroupIndex, setCurrentGroupIndex] = useState(0);

  useEffect(() => {
    if (isOpen && product) {
      setSelectedOptions([]);
      setGroupSelections({});
      setCurrentGroupIndex(0);
    }
  }, [isOpen, product]);

  if (!isOpen || !product || !selectedPrice) return null;

  const optionGroups = product.productOptionGroups || [];

  if (optionGroups.length === 0) {
    onComplete([]);
    return null;
  }

  const currentGroup = optionGroups[currentGroupIndex];

  const handleItemSelection = (group: ProductOptionGroup, item: ProductOptionItem, change: number) => {
    const newSelections = { ...groupSelections };
    
    if (!newSelections[group.id]) {
      newSelections[group.id] = {};
    }
    
    const currentCount = newSelections[group.id][item.id] || 0;
    const newCount = Math.max(0, currentCount + change);
    
    const totalSelected = Object.values(newSelections[group.id]).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      if (newCount + otherItemsTotal <= group.maxSelection) {
        newSelections[group.id][item.id] = newCount;
      }
    } else {
      if (newCount > 0) {
        newSelections[group.id] = { [item.id]: 1 };
      } else {
        newSelections[group.id][item.id] = 0;
      }
    }
    
    setGroupSelections(newSelections);
  };

  const handleCardClick = (group: ProductOptionGroup, item: ProductOptionItem) => {
    const currentCount = groupSelections[group.id]?.[item.id] || 0;
    const totalSelected = Object.values(groupSelections[group.id] || {}).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      // ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿßŸÑŸÖÿ™ÿπÿØÿØÿ©: ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÉŸÖŸäÿ©
      if (otherItemsTotal < group.maxSelection) {
        handleItemSelection(group, item, 1);
      }
    } else {
      // ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿßŸÑŸÅÿ±ÿØŸäÿ©: ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ≠ÿßŸÑÿ©
      handleItemSelection(group, item, currentCount > 0 ? -1 : 1);
    }
  };

  const isCurrentGroupValid = (): boolean => {
    const selections = groupSelections[currentGroup.id] || {};
    const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
    
    if (currentGroup.isRequired) {
      return totalSelected >= currentGroup.minSelection;
    }
    
    return true; // ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ÿµÿ≠Ÿäÿ≠ÿ© ÿØÿßÿ¶ŸÖÿß
  };

  const isAllGroupsValid = (): boolean => {
    return optionGroups.every(group => {
      const selections = groupSelections[group.id] || {};
      const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
      
      if (group.isRequired) {
        return totalSelected >= group.minSelection;
      }
      
      return totalSelected === 0 || totalSelected >= group.minSelection;
    });
  };

  const handleNext = () => {
    if (currentGroupIndex < optionGroups.length - 1) {
      setCurrentGroupIndex(currentGroupIndex + 1);
    }
  };

  const handlePrevious = () => {
    if (currentGroupIndex > 0) {
      setCurrentGroupIndex(currentGroupIndex - 1);
    }
  };

  const handleComplete = () => {
    const allSelectedOptions: SelectedOption[] = [];
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            allSelectedOptions.push({
              groupId: group.id,
              itemId: itemId,
              itemName: item.name,
              quantity: count,
              extraPrice: item.extraPrice,
              isCommentOnly: item.isCommentOnly
            });
          }
        }
      });
    });
    
    onComplete(allSelectedOptions);
  };

  const calculateTotalPrice = () => {
    let total = selectedPrice.price * quantity;
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            total += item.extraPrice * count * quantity;
          }
        }
      });
    });
    
    return total;
  };

  const selections = groupSelections[currentGroup.id] || {};
  const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContent}>
<div className={styles.popupHeader}>
  <div className={styles.popupTitleSection}>
    <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
    <div className={styles.popupSubtitle}>
      {selectedPrice.nameArabic} - ÿßŸÑŸÉŸÖŸäÿ©: {quantity}
    </div>
  </div>
  <div style={{ display: 'flex', gap: '8px' }}>
    {currentGroupIndex > 0 && (
      <button 
        className={styles.popupClose} 
        onClick={handlePrevious}
        title="ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©"
      >
        <ArrowBackIcon />
      </button>
    )}
    <button className={styles.popupClose} onClick={onClose}>
      <CloseIcon />
    </button>
  </div>
</div>
        
        <div className={styles.popupBody}>
          {/* ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿ™ŸÇÿØŸÖ */}
          <div className={styles.progressIndicator}>
            <div className={styles.progressText}>
              ŸÖÿ¨ŸÖŸàÿπÿ© {currentGroupIndex + 1} ŸÖŸÜ {optionGroups.length}
            </div>
            <div className={styles.progressBar}>
              <div 
                className={styles.progressFill} 
                style={{ width: `${((currentGroupIndex + 1) / optionGroups.length) * 100}%` }}
              />
            </div>
          </div>

          <div className={styles.optionsContainer}>
            <div className={styles.optionGroup}>
              <div className={styles.groupHeader}>
                <div className={styles.groupTitle}>
                  <span className={styles.groupName}>{currentGroup.name}</span>
                  {currentGroup.isRequired && (
                    <span className={styles.requiredBadge}>ŸÖÿ∑ŸÑŸàÿ®</span>
                  )}
                </div>
                <div className={styles.groupInfo}>
                  <span className={styles.selectionCount}>
                    {totalSelected} ŸÖŸÜ {currentGroup.maxSelection}
                  </span>
                  {currentGroup.minSelection > 0 && (
                    <span className={styles.minSelection}>
                      (ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ: {currentGroup.minSelection})
                    </span>
                  )}
                </div>
              </div>
              
              <div className={styles.optionsGrid}>
                {currentGroup.optionItems
                  .sort((a, b) => a.sortOrder - b.sortOrder)
                  .map((item) => {
                    const itemCount = selections[item.id] || 0;
                    const canAdd = currentGroup.allowMultiple 
                      ? totalSelected < currentGroup.maxSelection
                      : itemCount === 0;
                    
                    return (
                      <div 
                        key={item.id} 
                        className={`${styles.optionCard} ${itemCount > 0 ? styles.selected : ''}`}
                        onClick={() => handleCardClick(currentGroup, item)}
                      >
                        <div className={styles.optionContent}>
                          <div className={styles.optionInfo}>
                            <div className={styles.optionName}>{item.name}</div>
                            {item.extraPrice > 0 && (
                              <div className={styles.optionPrice}>
                                +{item.extraPrice} EGP
                              </div>
                            )}
                          </div>
                          
                          <div className={styles.optionControls}>
                            {currentGroup.allowMultiple ? (
                              <div className={styles.quantitySection}>
                                {itemCount > 0 && (
                                  <button
                                    className={styles.removeBtn}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleItemSelection(currentGroup, item, -1);
                                    }}
                                  >
                                    <RemoveIcon />
                                  </button>
                                )}
                                
                                {itemCount > 0 ? (
                                  <div className={styles.quantityBadge}>
                                    {itemCount}
                                  </div>
                                ) : canAdd ? (
                                  <div className={styles.addIcon}>
                                    <AddIcon />
                                  </div>
                                ) : (
                                  <div className={styles.maxReached}>
                                    <span>ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ</span>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className={styles.singleSelect}>
                                {itemCount > 0 ? (
                                  <div className={styles.selectedIcon}>
                                    <CheckIcon />
                                  </div>
                                ) : (
                                  <div className={styles.unselectedIcon}>
                                    <AddIcon />
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
          
          <div className={styles.totalSection}>
            <div className={styles.totalRow}>
              <span className={styles.totalLabel}>ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä:</span>
              <span className={styles.totalValue}>{calculateTotalPrice().toFixed(2)} EGP</span>
            </div>
          </div>
        </div>
        
        <div className={styles.popupFooter}>
          <button className={styles.btnCancel} onClick={onClose}>
            ÿ•ŸÑÿ∫ÿßÿ°
          </button>
          
          {currentGroupIndex < optionGroups.length - 1 ? (
            <button
              className={styles.btnConfirm}
              onClick={handleNext}
              disabled={currentGroup.isRequired && !isCurrentGroupValid()}
            >
              ÿßŸÑÿ™ÿßŸÑŸä
              <ArrowForwardIcon />
            </button>
          ) : (
            <button
              className={styles.btnConfirm}
              onClick={handleComplete}
              disabled={!isAllGroupsValid()}
            >
              ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductOptionsPopup;

===== src/Pages/pos/newSales/components/TableSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/TableSelectionPopup.tsx
import React, { useState, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/TableSelectionPopup.module.css';

interface TableSelectionPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSelectTable: (selection: TableSelection) => void;
  tableSections: TableSection[];
}

const TableSelectionPopup: React.FC<TableSelectionPopupProps> = ({
  isOpen,
  onClose,
  onSelectTable,
  tableSections
}) => {
  const [selectedSection, setSelectedSection] = useState<TableSection | null>(null);

  useEffect(() => {
    if (isOpen && tableSections.length > 0) {
      setSelectedSection(tableSections[0]);
    }
  }, [isOpen, tableSections]);

  if (!isOpen) return null;

  const handleSectionClick = (section: TableSection) => {
    setSelectedSection(section);
  };

  const handleTableClick = (table: Table) => {
    if (selectedSection && !table.isOccupied) {
      onSelectTable({
        section: selectedSection,
        table: table
      });
    }
  };

  const displayedTables = selectedSection?.tables || [];

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContainer}>
        <div className={styles.posSystem}>
          {/* ÿ≤ÿ± ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ */}
          <button className={styles.closeBtn} onClick={onClose}>
            <CloseIcon />
            <span>ÿ•ÿ∫ŸÑÿßŸÇ</span>
          </button>

          <main className={styles.mainContent}>
            {/* ŸÇÿ≥ŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿßÿ™ */}
            <section className={styles.productsSection}>
              <div className={styles.productGrid}>
                {displayedTables.map((table) => (
                  <div
                    key={table.id}
                    className={`${styles.productItem} ${table.isOccupied ? styles.occupied : ''}`}
                    onClick={() => handleTableClick(table)}
                  >
                    <div className={styles.productImage}>
                      <img 
                        src="/images/default-table.png" 
                        alt={table.name}
                        onError={(e) => {
                          e.currentTarget.src = '/images/placeholder.png';
                        }}
                      />
                    </div>
                    <div className={styles.productName}>
                      <span>{table.name}</span>
                      <small>{table.capacity} ÿ£ÿ¥ÿÆÿßÿµ</small>
                      <div className={`${styles.status} ${table.isOccupied ? styles.occupied : styles.available}`}>
                        {table.isOccupied ? 'ŸÖÿ¥ÿ∫ŸàŸÑÿ©' : 'ŸÖÿ™ÿßÿ≠ÿ©'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>

            {/* ÿßŸÑÿ¥ÿ±Ÿäÿ∑ ÿßŸÑÿ¨ÿßŸÜÿ®Ÿä ŸÑŸÑÿ£ŸÇÿ≥ÿßŸÖ */}
            <aside className={styles.categoriesSidebar}>
              <div className={styles.categoriesList}>
                {tableSections.map((section) => (
                  <div
                    key={section.id}
                    className={`${styles.categoryItem} ${selectedSection?.id === section.id ? styles.active : ''}`}
                    onClick={() => handleSectionClick(section)}
                  >
                    <img 
                      src="/images/default-section.png" 
                      alt={section.name}
                      onError={(e) => {
                        e.currentTarget.src = '/images/placeholder.png';
                      }}
                    />
                    <div>
                      <span>{section.name}</span>
                      <br />
                      <small>{section.serviceCharge}% ÿÆÿØŸÖÿ©</small>
                    </div>
                  </div>
                ))}
              </div>
            </aside>
          </main>
        </div>
      </div>
    </div>
  );
};

export default TableSelectionPopup;

===== src/Pages/pos/newSales/components/TodayOrdersPopup.tsx =====
// src/Pages/pos/newSales/components/TodayOrdersPopup.tsx
import React, { useState, useEffect, useMemo } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Box,
  Typography,
  CircularProgress,
  Alert,
  Pagination
} from '@mui/material';
import {
  Visibility as VisibilityIcon,
  Close as CloseIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon
} from '@mui/icons-material';
import {
  getAllInvoices,
  getInvoiceById, // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿßŸÑŸÖŸÅŸÇŸàÿØ
  getInvoiceTypeText,
  getInvoiceStatusText,
  formatDate,
  Invoice,
  InvoicesResponse
} from '../../../../utils/api/pagesApi/invoicesApi';
import styles from '../styles/TodayOrdersPopup.module.css';

interface TodayOrdersPopupProps {
  isOpen: boolean;
  onClose: () => void;
  currentOrderType: string; // ŸÑŸÑŸÅŸÑÿ™ÿ±ÿ© ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ® ÿßŸÑÿ≠ÿßŸÑŸä
  onViewOrder: (invoice: Invoice & { isEditMode: boolean }) => void; // ŸÑÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ® ŸÅŸä ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
}

const TodayOrdersPopup: React.FC<TodayOrdersPopupProps> = ({
  isOpen,
  onClose,
  currentOrderType,
  onViewOrder
}) => {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);
  const pageSize = 20;

  // States ŸÑŸÑŸÅŸÑÿßÿ™ÿ±
  const [statusFilter, setStatusFilter] = useState<number | ''>('');
  const [searchFilter, setSearchFilter] = useState('');
  const [typeFilter, setTypeFilter] = useState<number | ''>('');

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
  const loadInvoices = async (pageNumber: number = 1) => {
    try {
      setLoading(true);
      setError(null);
      
      const response: InvoicesResponse = await getAllInvoices(pageNumber, pageSize);
      
      setInvoices(response.data);
      setTotalPages(response.pageCount);
      setTotalCount(response.totalCount);
      setPage(pageNumber);
    } catch (err: any) {
      setError(err.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™');
      console.error('Error loading invoices:', err);
    } finally {
      setLoading(false);
    }
  };

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÜÿØ ŸÅÿ™ÿ≠ ÿßŸÑŸÜÿßŸÅÿ∞ÿ©
  useEffect(() => {
    if (isOpen) {
      loadInvoices(1);
      
      // ÿ™ÿ∑ÿ®ŸäŸÇ ŸÅŸÑÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ® ÿßŸÑÿ≠ÿßŸÑŸä
      const orderTypeMap: { [key: string]: number } = {
        'Takeaway': 1,
        'Dine-in': 2,
        'Delivery': 3,
        'Pickup': 4
      };
      
      if (currentOrderType && orderTypeMap[currentOrderType]) {
        setTypeFilter(orderTypeMap[currentOrderType]);
      } else {
        setTypeFilter('');
      }
    }
  }, [isOpen, currentOrderType]);

  // ŸÅŸÑÿ™ÿ±ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
  const filteredInvoices = useMemo(() => {
    return invoices.filter(invoice => {
      // ŸÅŸÑÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
      if (typeFilter !== '' && invoice.invoiceType !== typeFilter) {
        return false;
      }
      
      // ŸÅŸÑÿ™ÿ± ÿßŸÑÿ≠ÿßŸÑÿ©
      if (statusFilter !== '' && invoice.invoiceStatus !== statusFilter) {
        return false;
      }
      
      // ŸÅŸÑÿ™ÿ± ÿßŸÑÿ®ÿ≠ÿ´ (ŸÅŸä ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£Ÿà ID)
      if (searchFilter.trim() !== '') {
        const searchTerm = searchFilter.toLowerCase();
        const searchInNotes = invoice.notes?.toLowerCase().includes(searchTerm) || false;
        const searchInId = invoice.id.toLowerCase().includes(searchTerm);
        const searchInCustomer = invoice.customerName?.toLowerCase().includes(searchTerm) || false;
        
        if (!searchInNotes && !searchInId && !searchInCustomer) {
          return false;
        }
      }
      
      return true;
    });
  }, [invoices, typeFilter, statusFilter, searchFilter]);

  // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÅŸÑÿßÿ™ÿ±
  const clearFilters = () => {
    setStatusFilter('');
    setSearchFilter('');
    setTypeFilter('');
  };

  // ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿµŸÅÿ≠ÿ©
  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {
    loadInvoices(value);
  };

  // ŸÖÿπÿßŸÑÿ¨ ÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ® ŸÖÿπ ŸÖÿπÿßŸÑÿ¨ÿ© ÿ£ŸÅÿ∂ŸÑ ŸÑŸÑÿ£ÿÆÿ∑ÿßÿ°
  const handleViewOrder = async (invoice: Invoice) => {
    try {
      setLoading(true);
      setError(null); // ŸÖÿ≥ÿ≠ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©
      
      // ÿ¨ŸÑÿ® ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿßŸÑŸÉÿßŸÖŸÑÿ©
      const fullInvoiceData = await getInvoiceById(invoice.id);
      
      // ÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÖÿπ ÿ•ÿ¥ÿßÿ±ÿ© ÿ£ŸÜŸáÿß ŸÑŸÑÿ™ÿπÿØŸäŸÑ
      onViewOrder({
        ...fullInvoiceData,
        isEditMode: true // ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿπÿØŸäŸÑ
      });
      
      onClose();
    } catch (error: any) {
      const errorMessage = error.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ®';
      setError(errorMessage);
      console.error('Error loading invoice details:', error);
      
      // ÿπÿØŸÖ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ŸÅŸä ÿ≠ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£ ŸÑŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿ±ÿ§Ÿäÿ© ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£
    } finally {
      setLoading(false);
    }
  };

  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ© ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
  const getAdditionalInfo = (invoice: Invoice) => {
    switch (invoice.invoiceType) {
      case 2: // Dine-in
        return {
          label: 'ÿßŸÑÿ∑ÿßŸàŸÑÿ©',
          value: invoice.tableId ? `ÿ∑ÿßŸàŸÑÿ© ${invoice.tableId.substring(0, 8)}...` : '--'
        };
      case 3: // Delivery
        return {
          label: 'ÿ¥ÿ±ŸÉÿ© ÿßŸÑÿ™ŸàÿµŸäŸÑ',
          value: invoice.deliveryCompanyId ? `ÿ¥ÿ±ŸÉÿ© ${invoice.deliveryCompanyId.substring(0, 8)}...` : '--'
        };
      default:
        return null;
    }
  };

  // ÿØÿßŸÑÿ© ŸÑÿ™ÿ≠ÿØŸäÿØ ŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ÿπÿØŸäŸÑ
  const canEditInvoice = (invoice: Invoice) => {
    // ŸäŸÖŸÉŸÜ ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖŸÉÿ™ŸÖŸÑÿ© ŸàÿßŸÑŸÖÿπŸÑŸÇÿ© ŸÅŸÇÿ∑ÿå ŸÑŸäÿ≥ ÿßŸÑŸÖŸÑÿ∫ÿßÿ©
    return invoice.invoiceStatus === 1 || invoice.invoiceStatus === 2;
  };

  return (
    <Dialog
      open={isOpen}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{
        className: styles.dialogPaper
      }}
    >
      <DialogTitle className={styles.dialogTitle}>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6" component="div">
            ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸäŸàŸÖ ({totalCount} ÿ∑ŸÑÿ®)
          </Typography>
          <IconButton onClick={onClose} size="small">
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent className={styles.dialogContent}>
        {/* ÿ¥ÿ±Ÿäÿ∑ ÿßŸÑŸÅŸÑÿßÿ™ÿ± */}
        <Box className={styles.filtersBar}>
          <TextField
            label="ÿßŸÑÿ®ÿ≠ÿ´"
            variant="outlined"
            size="small"
            value={searchFilter}
            onChange={(e) => setSearchFilter(e.target.value)}
            placeholder="ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£Ÿà ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®..."
            className={styles.searchField}
          />
          
          <FormControl size="small" className={styles.filterSelect}>
            <InputLabel>ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®</InputLabel>
            <Select
              value={typeFilter}
              onChange={(e) => setTypeFilter(e.target.value as number | '')}
              label="ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®"
            >
              <MenuItem value="">ÿßŸÑŸÉŸÑ</MenuItem>
              <MenuItem value={1}>Takeaway</MenuItem>
              <MenuItem value={2}>Dine-in</MenuItem>
              <MenuItem value={3}>Delivery</MenuItem>
              <MenuItem value={4}>Pickup</MenuItem>
            </Select>
          </FormControl>

          <FormControl size="small" className={styles.filterSelect}>
            <InputLabel>ÿßŸÑÿ≠ÿßŸÑÿ©</InputLabel>
            <Select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value as number | '')}
              label="ÿßŸÑÿ≠ÿßŸÑÿ©"
            >
              <MenuItem value="">ÿßŸÑŸÉŸÑ</MenuItem>
              <MenuItem value={1}>ŸÖŸÉÿ™ŸÖŸÑÿ©</MenuItem>
              <MenuItem value={2}>ŸÖÿπŸÑŸÇÿ©</MenuItem>
              <MenuItem value={3}>ŸÖŸÑÿ∫Ÿäÿ©</MenuItem>
            </Select>
          </FormControl>

          <Button
            startIcon={<ClearIcon />}
            onClick={clearFilters}
            variant="outlined"
            size="small"
          >
            ŸÖÿ≥ÿ≠ ÿßŸÑŸÅŸÑÿßÿ™ÿ±
          </Button>
        </Box>

        {/* ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£ */}
        {error && (
          <Alert 
            severity="error" 
            className={styles.errorAlert}
            onClose={() => setError(null)}
          >
            {error}
          </Alert>
        )}

        {/* ÿßŸÑÿ¨ÿØŸàŸÑ */}
        <TableContainer component={Paper} className={styles.tableContainer}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>ŸÉŸàÿØ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©</TableCell>
                <TableCell>ÿßŸÑŸÜŸàÿπ</TableCell>
                <TableCell>ÿßŸÑÿ≠ÿßŸÑÿ©</TableCell>
                <TableCell>ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°</TableCell>
                <TableCell>ÿ¢ÿÆÿ± ÿ™ÿ≠ÿØŸäÿ´</TableCell>
                <TableCell>ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä</TableCell>
                <TableCell>ÿßŸÑÿπŸÖŸäŸÑ</TableCell>
                <TableCell>ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©</TableCell>
                <TableCell align="center">ÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={9} align="center" className={styles.loadingCell}>
                    <CircularProgress size={40} />
                    <Typography variant="body2" sx={{ mt: 1 }}>
                      ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™...
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : filteredInvoices.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={9} align="center" className={styles.emptyCell}>
                    <Typography variant="body1" color="text.secondary">
                      ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ŸÑÿ®ÿßÿ™ ŸÑŸÑÿπÿ±ÿ∂
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                filteredInvoices.map((invoice) => {
                  const additionalInfo = getAdditionalInfo(invoice);
                  const isEditable = canEditInvoice(invoice);
                  
                  return (
                    <TableRow key={invoice.id} className={styles.tableRow}>
                      <TableCell>
                        <Typography variant="body2" className={styles.invoiceId}>
                          {invoice.id.substring(0, 8)}...
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Chip
                          label={getInvoiceTypeText(invoice.invoiceType)}
                          size="small"
                          color={invoice.invoiceType === 1 ? 'success' : 
                                 invoice.invoiceType === 2 ? 'primary' : 
                                 invoice.invoiceType === 3 ? 'warning' : 'info'}
                        />
                      </TableCell>
                      
                      <TableCell>
                        <Chip
                          label={getInvoiceStatusText(invoice.invoiceStatus)}
                          size="small"
                          color={invoice.invoiceStatus === 1 ? 'success' : 
                                 invoice.invoiceStatus === 2 ? 'warning' : 'error'}
                        />
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {formatDate(invoice.createdAt)}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {formatDate(invoice.completedAt)}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2" className={styles.totalAmount}>
                          {invoice.totalAfterTaxAndService.toFixed(2)} ÿ¨ŸÜŸäŸá
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {invoice.customerName || '--'}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        {additionalInfo ? (
                          <Box>
                            <Typography variant="caption" color="text.secondary">
                              {additionalInfo.label}:
                            </Typography>
                            <Typography variant="body2">
                              {additionalInfo.value}
                            </Typography>
                          </Box>
                        ) : (
                          '--'
                        )}
                      </TableCell>
                      
                      <TableCell align="center">
                        <IconButton
                          size="small"
                          onClick={() => handleViewOrder(invoice)}
                          className={`${styles.viewButton} ${!isEditable ? styles.disabledViewButton : ''}`}
                          title={isEditable ? "ÿπÿ±ÿ∂ Ÿàÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®" : "ÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ® (ÿ∫Ÿäÿ± ŸÇÿßÿ®ŸÑ ŸÑŸÑÿ™ÿπÿØŸäŸÑ)"}
                          disabled={loading}
                        >
                          <VisibilityIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  );
                })
              )}
            </TableBody>
          </Table>
        </TableContainer>

        {/* ÿπÿ±ÿ∂ ÿßŸÑÿµŸÅÿ≠ÿßÿ™ */}
        {totalPages > 1 && (
          <Box className={styles.paginationContainer}>
            <Pagination
              count={totalPages}
              page={page}
              onChange={handlePageChange}
              color="primary"
              showFirstButton
              showLastButton
              disabled={loading}
            />
          </Box>
        )}
      </DialogContent>

      <DialogActions className={styles.dialogActions}>
        <Button onClick={onClose} variant="outlined">
          ÿ•ÿ∫ŸÑÿßŸÇ
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default TodayOrdersPopup;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/hooks/useDataManager.tsx =====
// src/Pages/pos/newSales/hooks/useDataManager.tsx
import { useState, useEffect, useCallback } from 'react';
import { PosProduct, CategoryItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface DataState {
  mainProducts: PosProduct[];
  mainCategories: CategoryItem[];
  additionProducts: PosProduct[];
  additionCategories: CategoryItem[];
  normalModeProducts: PosProduct[];
  normalModeCategories: CategoryItem[];
  loading: boolean;
  error: string | null;
  defaultCategoryId: string | null;
}

export const useDataManager = () => {
  const [dataState, setDataState] = useState<DataState>({
    mainProducts: [],
    mainCategories: [],
    additionProducts: [],
    additionCategories: [],
    normalModeProducts: [],
    normalModeCategories: [],
    loading: true,
    error: null,
    defaultCategoryId: null
  });

  const loadAllData = useCallback(async () => {
    try {
      setDataState(prev => ({ ...prev, loading: true, error: null }));

      // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ posService (ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ productType)
      const [mainProducts, additionProducts] = await Promise.all([
        posService.getAllPosProducts(),
        posService.getAdditionProducts()
      ]);

      // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸÑŸâ ÿßŸÑŸÜŸàÿπ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®
      const convertedMainProducts: PosProduct[] = mainProducts.map(product => ({
        ...product,
        productType: product.productType || 1 // ÿ∂ŸÖÿßŸÜ Ÿàÿ¨ŸàÿØ productType
      }));

      const convertedAdditionProducts: PosProduct[] = additionProducts.map(product => ({
        ...product,
        productType: product.productType || 3 // ÿ∂ŸÖÿßŸÜ Ÿàÿ¨ŸàÿØ productType
      }));

      const [mainCategories, additionCategories] = await Promise.all([
        posService.getAllCategories(mainProducts),
        posService.getCategoriesByProductType(3)
      ]);

      // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÅÿ¶ÿßÿ™ ÿ•ŸÑŸâ ÿßŸÑŸÜŸàÿπ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®
      const convertedMainCategories: CategoryItem[] = mainCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const convertedAdditionCategories: CategoryItem[] = additionCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 3
        }))
      }));

      // ÿØŸÖÿ¨ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÑŸÑÿπÿ±ÿ∂ ÿßŸÑÿπÿßÿØŸä
      const normalModeProducts = [...convertedMainProducts, ...convertedAdditionProducts];
      const normalModeCategories = await posService.getAllCategories([...mainProducts, ...additionProducts]);
      
      const convertedNormalModeCategories: CategoryItem[] = normalModeCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const rootMainCategories = convertedNormalModeCategories.filter(cat => !cat.parentId);
      const defaultCategoryId = rootMainCategories.length > 0 ? rootMainCategories[0].id : null;

      setDataState({
        mainProducts: convertedMainProducts,
        mainCategories: convertedMainCategories,
        additionProducts: convertedAdditionProducts,
        additionCategories: convertedAdditionCategories,
        normalModeProducts,
        normalModeCategories: convertedNormalModeCategories,
        loading: false,
        error: null,
        defaultCategoryId
      });

    } catch (error) {
      console.error('Error loading data:', error);
      setDataState(prev => ({
        ...prev,
        loading: false,
        error: 'ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™'
      }));
    }
  }, []);

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // ÿØÿßŸÑÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖŸÅŸÑÿ™ÿ±ÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸàÿ∂ÿπ
  const getProducts = useCallback((isAdditionMode: boolean): PosProduct[] => {
    if (isAdditionMode) {
      return dataState.additionProducts.filter(product => product.productType === 3);
    }
    return dataState.normalModeProducts;
  }, [dataState.additionProducts, dataState.normalModeProducts]);

  // ÿØÿßŸÑÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÅÿ¶ÿßÿ™ ÿßŸÑŸÖŸÅŸÑÿ™ÿ±ÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸàÿ∂ÿπ
  const getCategories = useCallback((isAdditionMode: boolean): CategoryItem[] => {
    if (isAdditionMode) {
      return dataState.additionCategories.filter(category => 
        category.products && category.products.some(product => product.productType === 3)
      );
    }
    return dataState.normalModeCategories;
  }, [dataState.additionCategories, dataState.normalModeCategories]);

  // ÿ•ÿ∂ÿßŸÅÿ© ÿØŸàÿßŸÑ ŸÖÿ≥ÿßÿπÿØÿ© ŸÖÿ™ŸàÿßŸÅŸÇÿ© ŸÖÿπ posService

const searchProducts = useCallback((products: PosProduct[], query: string): PosProduct[] => {
  if (!query.trim()) return [];
  
  const searchTerm = query.toLowerCase();
  return products.filter(product => 
    product.nameArabic.toLowerCase().includes(searchTerm) ||
    product.name.toLowerCase().includes(searchTerm)
  );
}, []);

  const getProductsByScreenId = useCallback((products: PosProduct[], screenId: string): PosProduct[] => {
    return products.filter(product => product.categoryId === screenId);
  }, []);

  const hasProductOptions = useCallback((product: PosProduct): boolean => {
    return !!(product.productOptionGroups && product.productOptionGroups.length > 0);
  }, []);

  return {
    ...dataState,
    loadAllData,
    getProducts,
    getCategories,
    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©
    searchProducts,
    getProductsByScreenId,
    hasProductOptions,
    // ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ≠ÿßŸÑÿ©
    isLoading: dataState.loading,
    hasError: !!dataState.error,
    isDataReady: !dataState.loading && !dataState.error && dataState.normalModeProducts.length > 0
  };
};

===== src/Pages/pos/newSales/hooks/useInvoiceManager.tsx =====
// File: src/Pages/pos/newSales/hooks/useInvoiceManager.tsx
import { useState } from 'react';
import { OrderSummary, OrderItem } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';
import { TableSelection } from '../types/TableSystem';
import * as invoicesApi from '../../../../utils/api/pagesApi/invoicesApi';
import { useError } from '../../../../contexts/ErrorContext';

interface PaymentMethodData {
  method: string;
  amount: number;
  isSelected: boolean;
}

export const useInvoiceManager = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { showSuccess, showError } = useError();

  const getInvoiceType = (orderType: string): number => {
    // ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
    switch (orderType) {
      case 'Takeaway': return 1;
      case 'Dine-in': return 2;
      case 'Delivery': return 3;
      case 'Pickup': return 4;
      default: return 1;
    }
  };

  const getWareHouseId = (): string => {
    // ŸäŸÖŸÉŸÜ ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸäŸá ŸÖŸÜ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ÿ£Ÿà localStorage
    return localStorage.getItem('warehouse_id') || 'e81866c0-791d-449f-bc04-c5d65bb3820c';
  };

  const getRawBranchId = (): string => {
    return localStorage.getItem('branch_id') || 'branch_1';
  };


const convertOrderItemToInvoiceItem = (item: OrderItem): invoicesApi.CreateInvoiceItem => {
  // ‚úÖ ÿ™ÿ≠ŸàŸäŸÑ subItems Ÿà selectedOptions ÿ•ŸÑŸâ Components ŸÖÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
  const components: any[] = [];
  
  // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÄ subItems (Extra/Without)
  if (item.subItems && item.subItems.length > 0) {
    item.subItems.forEach(subItem => {
      components.push({
        // ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©
        id: subItem.id,
        name: subItem.name,
        quantity: subItem.quantity,
        extraPrice: subItem.type === 'without' ? 0 : subItem.price,
        price: subItem.price,
        type: subItem.type,
        groupId: subItem.groupId,
        isRequired: subItem.isRequired || false,
        isCommentOnly: false,
        useOriginalPrice: false,
        sortOrder: 0,
        
        // ‚úÖ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
        WareHouseId: localStorage.getItem('warehouse_id') || 'e81866c0-791d-449f-bc04-c5d65bb3820c',
        ComponentName: subItem.name, // ŸÜŸÅÿ≥ ÿßŸÑÿßÿ≥ŸÖ
        ProductComponentId: subItem.productId || item.product.id // ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ£Ÿà ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä
      });
    });
  }
  
  // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÄ selectedOptions
  if (item.selectedOptions && item.selectedOptions.length > 0) {
    item.selectedOptions.forEach(option => {
      components.push({
        // ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©
        id: option.itemId,
        name: option.itemName,
        quantity: option.quantity,
        extraPrice: option.extraPrice,
        price: option.extraPrice,
        type: 'option',
        groupId: option.groupId,
        isCommentOnly: option.isCommentOnly,
        isRequired: false,
        useOriginalPrice: false,
        sortOrder: 0,
        
        // ‚úÖ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
        WareHouseId: localStorage.getItem('warehouse_id') || 'e81866c0-791d-449f-bc04-c5d65bb3820c',
        ComponentName: option.itemName, // ŸÜŸÅÿ≥ ÿßŸÑÿßÿ≥ŸÖ
        ProductComponentId: item.product.id // ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä ŸÑŸÑÿÆŸäÿßÿ±ÿßÿ™
      });
    });
  }

  return {
    ProductId: item.product.id,
    ProductPriceId: item.selectedPrice.id,
    Barcode: item.selectedPrice.barcode || '1234567890123',
    UnitId: null,
    PosPriceName: item.selectedPrice.nameArabic,
    UnitFactor: 1,
    Qty: item.quantity,
    UnitPrice: item.selectedPrice.price,
    UnitCost: 45,
    ItemDiscountPercentage: item.discountPercentage || 0,
    ItemTaxPercentage: 14,
    ServicePercentage: 10,
    WareHouseId: localStorage.getItem('warehouse_id') || 'e81866c0-791d-449f-bc04-c5d65bb3820c',
    Components: components // ‚úÖ ÿßŸÑÿ¢ŸÜ ŸÖÿπ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
  };
};


  const convertPaymentsToInvoicePayments = (payments: PaymentMethodData[]): invoicesApi.CreateInvoicePayment[] => {
    return payments
      .filter(payment => payment.isSelected && payment.amount > 0)
      .map(payment => ({
        Amount: payment.amount,
        PaymentMethodId: payment.method.toLowerCase().includes('ŸÉÿßÿ¥') || 
                        payment.method.toLowerCase().includes('cash') ? 'cash' : 
                        payment.method.toLowerCase()
      }));
  };

  // ÿØÿßŸÑÿ© ÿ•ŸÜÿ¥ÿßÿ° ŸÅÿßÿ™Ÿàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©
  const createInvoice = async (
    orderSummary: OrderSummary,
    orderType: string,
    payments: PaymentMethodData[],
    selectedCustomer?: Customer | null,
    selectedAddress?: CustomerAddress | null,
    selectedDeliveryCompany?: DeliveryCompany | null,
    selectedTable?: TableSelection | null,
    servicePercentage: number = 0,
    taxPercentage: number = 0,
    discountPercentage: number = 0,
    notes?: string
  ): Promise<invoicesApi.InvoiceResponse> => {
    setIsSubmitting(true);
    
    try {
      const invoiceData: invoicesApi.CreateInvoiceRequest = {
        InvoiceType: getInvoiceType(orderType),
        InvoiceStatus: 1, // ÿ≠ÿßŸÑÿ© ŸÜÿ¥ÿ∑ÿ©
        WareHouseId: getWareHouseId(),
        RawBranchId: getRawBranchId(),
        CustomerId: selectedCustomer?.id || null,
        TableId: selectedTable?.table.id || null,
        HallCaptainId: null, // ŸäŸÖŸÉŸÜ ÿ•ÿ∂ÿßŸÅÿ™Ÿá ŸÑÿßÿ≠ŸÇÿßŸã
        DeliveryCompanyId: selectedDeliveryCompany?.id || null,
        DeliveryAgentId: null, // ŸäŸÖŸÉŸÜ ÿ•ÿ∂ÿßŸÅÿ™Ÿá ŸÑÿßÿ≠ŸÇÿßŸã
        TaxPercentage: taxPercentage,
        ServicePercentage: servicePercentage,
        HeaderDiscountPercentage: discountPercentage,
        PreparedAt: new Date().toISOString(),
        CompletedAt: new Date().toISOString(),
        Notes: notes || `ÿ∑ŸÑÿ® ${orderType}`,
        Items: orderSummary.items.map(convertOrderItemToInvoiceItem),
        Payments: convertPaymentsToInvoicePayments(payments)
      };

      const result = await invoicesApi.addInvoice(invoiceData);
      
      showSuccess(`ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ±ŸÇŸÖ ${result.invoiceNumber} ÿ®ŸÜÿ¨ÿßÿ≠`);
      
      return result;
    } catch (error: any) {
      console.error('Error creating invoice:', error);
      
      let errorMessage = 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©';
      
      if (error.isApiValidationError && error.errors) {
        errorMessage = error.errors.map((err: any) => err.errorMessage).join(', ');
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      showError(errorMessage);
      throw error;
    } finally {
      setIsSubmitting(false);
    }
  };

  // ÿØÿßŸÑÿ© ÿ™ÿ≠ÿØŸäÿ´ ŸÅÿßÿ™Ÿàÿ±ÿ© ŸÖŸàÿ¨ŸàÿØÿ©
  const updateInvoice = async (
    invoiceId: string,
    orderSummary: OrderSummary,
    orderType: string,
    payments: PaymentMethodData[],
    selectedCustomer?: Customer | null,
    selectedAddress?: CustomerAddress | null,
    selectedDeliveryCompany?: DeliveryCompany | null,
    selectedTable?: TableSelection | null,
    servicePercentage: number = 0,
    taxPercentage: number = 0,
    discountPercentage: number = 0,
    notes?: string
  ): Promise<invoicesApi.InvoiceResponse> => {
    setIsSubmitting(true);
    
    try {
      const updateData: invoicesApi.CreateInvoiceRequest & { invoiceId: string } = {
        invoiceId: invoiceId,
        InvoiceType: getInvoiceType(orderType),
        InvoiceStatus: 1, // ÿ≠ÿßŸÑÿ© ŸÜÿ¥ÿ∑ÿ©
        WareHouseId: getWareHouseId(),
        RawBranchId: getRawBranchId(),
        CustomerId: selectedCustomer?.id || null,
        TableId: selectedTable?.table.id || null,
        HallCaptainId: null,
        DeliveryCompanyId: selectedDeliveryCompany?.id || null,
        DeliveryAgentId: null,
        TaxPercentage: taxPercentage,
        ServicePercentage: servicePercentage,
        HeaderDiscountPercentage: discountPercentage,
        PreparedAt: new Date().toISOString(),
        CompletedAt: new Date().toISOString(),
        Notes: notes || `ÿ∑ŸÑÿ® ${orderType} - ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´`,
        Items: orderSummary.items.map(convertOrderItemToInvoiceItem),
        Payments: convertPaymentsToInvoicePayments(payments)
      };

      const result = await invoicesApi.updateInvoice(updateData);
      
      showSuccess(`ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ±ŸÇŸÖ ${result.invoiceNumber} ÿ®ŸÜÿ¨ÿßÿ≠`);
      
      return result;
    } catch (error: any) {
      console.error('Error updating invoice:', error);
      
      let errorMessage = 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©';
      
      if (error.isApiValidationError && error.errors) {
        errorMessage = error.errors.map((err: any) => err.errorMessage).join(', ');
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      showError(errorMessage);
      throw error;
    } finally {
      setIsSubmitting(false);
    }
  };

  // ÿØÿßŸÑÿ© ŸÖŸàÿ≠ÿØÿ© ŸÑŸÑÿ•ŸÜÿ¥ÿßÿ° ŸàÿßŸÑÿ™ÿ≠ÿØŸäÿ´
  const saveInvoice = async (
    orderSummary: OrderSummary,
    orderType: string,
    payments: PaymentMethodData[],
    options: {
      isEditMode?: boolean;
      invoiceId?: string | null;
      selectedCustomer?: Customer | null;
      selectedAddress?: CustomerAddress | null;
      selectedDeliveryCompany?: DeliveryCompany | null;
      selectedTable?: TableSelection | null;
      servicePercentage?: number;
      taxPercentage?: number;
      discountPercentage?: number;
      notes?: string;
    } = {}
  ): Promise<invoicesApi.InvoiceResponse> => {
    const {
      isEditMode = false,
      invoiceId = null,
      selectedCustomer = null,
      selectedAddress = null,
      selectedDeliveryCompany = null,
      selectedTable = null,
      servicePercentage = 0,
      taxPercentage = 0,
      discountPercentage = 0,
      notes
    } = options;

    if (isEditMode && invoiceId) {
      return await updateInvoice(
        invoiceId,
        orderSummary,
        orderType,
        payments,
        selectedCustomer,
        selectedAddress,
        selectedDeliveryCompany,
        selectedTable,
        servicePercentage,
        taxPercentage,
        discountPercentage,
        notes
      );
    } else {
      return await createInvoice(
        orderSummary,
        orderType,
        payments,
        selectedCustomer,
        selectedAddress,
        selectedDeliveryCompany,
        selectedTable,
        servicePercentage,
        taxPercentage,
        discountPercentage,
        notes
      );
    }
  };

  return {
    createInvoice,
    updateInvoice,
    saveInvoice,
    isSubmitting
  };
};

===== src/Pages/pos/newSales/hooks/usePosPaymentMethods.tsx =====
// src/Pages/pos/newSales/hooks/usePosPaymentMethods.ts
import { useState, useEffect } from "react";
import * as posPaymentMethodsApi from 'src/utils/api/pagesApi/posPaymentMethodsApi';

export interface PaymentMethod {
  id: string;
  name: string;
  safeOrAccountID?: string | null;
  safeOrAccount?: any;
}

function isUUID(id: string) {
  // detect uuid-like
  return !!id && id.length > 20 && id.includes("-");
}

function isManualMethod(method: PaymentMethod) {
  // methods added by restaurant (id is uuid)
  return isUUID(method.id);
}
function isDefaultCash(method: PaymentMethod) {
  return method.id.toLowerCase() === 'cash' || method.name.toLowerCase() === 'ŸÉÿßÿ¥';
}
function isDefaultVisa(method: PaymentMethod) {
  return method.id.toLowerCase() === 'visa' || method.name.toLowerCase() === 'ŸÅŸäÿ≤ÿß';
}
function isDefaultBuiltIn(method: PaymentMethod) {
  // ids like visa/cash/instapay/wallet/isntapay/etc (not pure uuid)
  return !isManualMethod(method) && !isDefaultCash(method) && !isDefaultVisa(method);
}

function sortPaymentMethods(methods: PaymentMethod[]): PaymentMethod[] {
  const cash = methods.find(isDefaultCash);
  const visa = methods.find(isDefaultVisa);

  // Exclude cash/visa for building the rest
  const rest = methods.filter(
    m => !isDefaultCash(m) && !isDefaultVisa(m)
  );
  const builtIn = rest.filter(isDefaultBuiltIn);
  const manual = rest.filter(isManualMethod);

  const result: PaymentMethod[] = [];
  if (cash) result.push(cash);
  if (visa) result.push(visa);
  result.push(...builtIn);
  result.push(...manual);
  return result;
}

export function usePosPaymentMethods() {
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    async function fetch() {
      try {
        setLoading(true);
        const res = await posPaymentMethodsApi.getAll();
        const usable = Array.isArray(res)
          ? res.filter((m) =>
              !['CL', 'ÿ∂ŸäÿßŸÅÿ©', 'ŸÜŸÇÿßÿ∑'].includes(m.id)
            )
          : [];
        const sorted = sortPaymentMethods(usable);
        if (mounted) {
          setMethods(sorted);
          setLoading(false);
        }
      } catch (err: any) {
        setError('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ŸÖŸäŸÑ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ');
        setLoading(false);
        setMethods([]);
      }
    }
    fetch();
    return () => {
      mounted = false;
    };
  }, []);

  return { paymentMethods: methods, loading, error };
}

===== src/Pages/pos/newSales/hooks/useTableManager.tsx =====
// src/Pages/pos/newSales/hooks/useTableManager.tsx
import { useState, useCallback, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import * as tableSectionsApi from '../../../../utils/api/pagesApi/tableSectionsApi';
import { useError } from '../../../../contexts/ErrorContext';

export const useTableManager = () => {
  const [tableSections, setTableSections] = useState<TableSection[]>([]);
  const [selectedTable, setSelectedTable] = useState<TableSelection | null>(null);
  const [isChooseTable] = useState<boolean>(true); // ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿá ŸÖŸÜ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ŸÑÿßÿ≠ŸÇÿßŸã
  const [loading, setLoading] = useState(false);
  const { showSuccess, showWarning } = useError();

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ ŸàÿßŸÑÿ∑ÿßŸàŸÑÿßÿ™
const loadTableSections = useCallback(async () => {
  try {
    setLoading(true);
    const sections = await tableSectionsApi.getAll();
    
    // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑŸÜŸàÿπ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®
    const convertedSections: TableSection[] = sections.map(section => ({
      ...section,
      image: '/images/default-section.png', // ÿµŸàÿ±ÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ŸÑŸÑŸÇÿ≥ŸÖ
      tables: section.tables.map(table => ({
        ...table,
        isOccupied: false, // ŸáŸÜÿß ŸäŸÖŸÉŸÜ ÿ¨ŸÑÿ® ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ŸÇŸäŸÇŸäÿ© ŸÖŸÜ API ÿ¢ÿÆÿ±
        image: '/images/default-table.png' // ÿµŸàÿ±ÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ŸÑŸÑÿ∑ÿßŸàŸÑÿ©
      }))
    }));
    
    setTableSections(convertedSections);
  } catch (error) {
    console.error('Error loading table sections:', error);
    setTableSections([]);
  } finally {
    setLoading(false);
  }
}, []);

  useEffect(() => {
    loadTableSections();
  }, [loadTableSections]);

  const selectTable = useCallback((selection: TableSelection) => {
    setSelectedTable(selection);
        showSuccess(`ÿ™ŸÖ ÿßÿÆÿ™Ÿäÿßÿ± ÿ∑ÿßŸàŸÑÿ© ${selection.table.name} - ${selection.section.name}`);

  }, []);

  const clearSelectedTable = useCallback(() => {
    setSelectedTable(null);
  }, []);

  const getTableDisplayName = useCallback((): string => {
    if (!selectedTable) return 'Table';
    return `${selectedTable.section.name} / ${selectedTable.table.name}`;
  }, [selectedTable]);

  const getServiceCharge = useCallback((): number => {
    if (!selectedTable) return 0;
    return selectedTable.section.serviceCharge;
  }, [selectedTable]);

  const isTableRequired = useCallback((orderType: string): boolean => {
    return isChooseTable && orderType === 'Dine-in';
  }, [isChooseTable]);

  const canAddProduct = useCallback((orderType: string): boolean => {
    if (!isTableRequired(orderType)) return true;
    return selectedTable !== null;
  }, [selectedTable, isTableRequired]);


  // ÿ•ÿ∂ÿßŸÅÿ© ÿØÿßŸÑÿ© ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖÿπ ÿπÿ±ÿ∂ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
  const checkTableSelection = useCallback((orderType: string): boolean => {
    if (!canAddProduct(orderType)) {
      showWarning('Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ∑ÿßŸàŸÑÿ© ÿ£ŸàŸÑÿßŸã');
      return false;
    }
    return true;
  }, [canAddProduct, showWarning]);

  return {
    tableSections,
    selectedTable,
    isChooseTable,
    loading,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct,
    checkTableSelection, // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿØÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
    loadTableSections
  };
};






===== src/Pages/pos/newSales/hooks/useTodayOrders.ts =====
// src/Pages/pos/newSales/hooks/useTodayOrders.ts
import { useState, useEffect, useCallback } from 'react';
import {
  getAllInvoices,
  Invoice,
  InvoicesResponse
} from '../../../../utils/api/pagesApi/invoicesApi';

export const useTodayOrders = () => {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [totalPages, setTotalPages] = useState(1);

  const loadInvoices = useCallback(async (page: number = 1, pageSize: number = 50) => {
    try {
      setLoading(true);
      setError(null);
      
      const response: InvoicesResponse = await getAllInvoices(page, pageSize);
      
      setInvoices(response.data);
      setTotalCount(response.totalCount);
      setTotalPages(response.pageCount);
      
      return response;
    } catch (err: any) {
      const errorMessage = err.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const refreshInvoices = useCallback(() => {
    return loadInvoices(1);
  }, [loadInvoices]);

  return {
    invoices,
    loading,
    error,
    totalCount,
    totalPages,
    loadInvoices,
    refreshInvoices
  };
};

===== src/Pages/pos/newSales/index.tsx =====
// src/Pages/pos/newSales/index.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary as OrderSummaryType, OrderItem, PosPrice, SelectedOption } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import ProductOptionsPopup from './components/ProductOptionsPopup';
import ProductCard from './components/ProductCard';
import Header from './components/common/Header';
import ActionButtons from './components/ActionButtons';
import OrderSummary from './components/OrderSummary';
import { useOrderManager } from './components/OrderManager';
import { useDataManager } from './hooks/useDataManager';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import OrderItemDetailsPopup from './components/OrderItemDetailsPopup';
import TableSelectionPopup from './components/TableSelectionPopup';
import { useTableManager } from './hooks/useTableManager';
import { TableSelection } from './types/TableSystem';
import { useError } from '../../../contexts/ErrorContext';
import * as deliveryCompaniesApi from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { DeliveryCompany } from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import InvoiceDataConverter from '../../../utils/invoiceDataConverter';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('0');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');
  const [showTablePopup, setShowTablePopup] = useState(false);
const { showWarning, showError } = useError();
  const [deliveryCompanies, setDeliveryCompanies] = useState<DeliveryCompany[]>([]);
  const [selectedDeliveryCompany, setSelectedDeliveryCompany] = useState<DeliveryCompany | null>(null);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [selectedAddress, setSelectedAddress] = useState<CustomerAddress | null>(null);
  const [taxRate, setTaxRate] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);

  // ÿ•ÿ∂ÿßŸÅÿ© Table Manager Hook
  const {
    tableSections,
    selectedTable,
    isChooseTable,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct
  } = useTableManager();

  // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Data Manager ÿßŸÑÿ¨ÿØŸäÿØ
  const {
    loading,
    error,
    getProducts,
    getCategories,
    defaultCategoryId,
    searchProducts,
    getProductsByScreenId,
    hasProductOptions
  } = useDataManager();

  // ÿØÿßŸÑÿ© ŸÑÿ¨ŸÑÿ® ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸÖŸÜ ÿßŸÑŸÄ zone
  const getDeliveryCharge = useCallback((): number => {
    if (selectedOrderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      return 15; // ŸäŸÖŸÉŸÜ ÿ™ÿ≠ÿØŸäÿ´Ÿáÿß ŸÖŸÜ API
    }
    return 0;
  }, [selectedOrderType, selectedAddress]);


  const handleDeliveryChargeChange = useCallback((charge: number) => {
    setDeliveryCharge(charge);
  }, []);

  // Extra/Without States
  const [isExtraMode, setIsExtraMode] = useState(false);
  const [isWithoutMode, setIsWithoutMode] = useState(false);
  const [selectedOrderItemId, setSelectedOrderItemId] = useState<string | null>(null);
  
  // Categories States
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [, setParentCategory] = useState<CategoryItem | null>(null);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  const [selectedProductForOptions, setSelectedProductForOptions] = useState<PosProduct | null>(null);
  const [selectedPriceForOptions, setSelectedPriceForOptions] = useState<PosPrice | null>(null);
  
  // Order Details Popup States
  const [showOrderDetailsPopup, setShowOrderDetailsPopup] = useState(false);
  const [selectedOrderItemForDetails, setSelectedOrderItemForDetails] = useState<OrderItem | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ©
  const isAdditionMode = isExtraMode || isWithoutMode;
  const currentProducts = getProducts(isAdditionMode);
  const currentCategories = getCategories(isAdditionMode);
  const rootCategories = currentCategories.filter(cat => !cat.parentId);
  const categories = showingChildren 
    ? currentCategories.find(cat => cat.id === showingChildren)?.children || []
    : rootCategories;

  const [isEditMode, setIsEditMode] = useState(false);
  const [currentInvoiceId, setCurrentInvoiceId] = useState<string | null>(null);
const [isLoadingOrder, setIsLoadingOrder] = useState(false);

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿ±ÿ© Ÿàÿßÿ≠ÿØÿ©
  useEffect(() => {
    const loadDeliveryCompanies = async () => {
      try {
        const companies = await deliveryCompaniesApi.getAll();
        setDeliveryCompanies(companies);
      } catch (error) {
        console.error('Error loading delivery companies:', error);
      }
    };
    loadDeliveryCompanies();
  }, []);

  // ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖÿπÿ±Ÿàÿ∂ÿ©
  const displayedProducts = useMemo(() => {
    if (searchQuery.trim()) {
      return searchProducts(currentProducts, searchQuery);
    }
    
    if (selectedCategory) {
      return getProductsByScreenId(currentProducts, selectedCategory);
    }
    
    return [];
  }, [currentProducts, selectedCategory, searchQuery, searchProducts, getProductsByScreenId]);

  // ÿ™ÿ≠ÿØŸäÿ´ ÿØÿßŸÑÿ© updateOrderItem
  const updateOrderItem = useCallback((itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        if (updateType === 'addSubItem') {
          const newSubItems = [...(item.subItems || []), data];
          
          const priceImpact = data.type === 'without' ? 0 : data.price;
          const newTotalPrice = item.totalPrice + priceImpact;
          
          return {
            ...item,
            subItems: newSubItems,
            totalPrice: newTotalPrice
          };
        } else if (updateType === 'removeSubItem') {
          const removedSubItem = item.subItems?.find(sub => sub.id === data);
          const newSubItems = item.subItems?.filter(sub => sub.id !== data) || [];
          
          const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
          const newTotalPrice = item.totalPrice - priceImpact;
          
          return {
            ...item,
            subItems: newSubItems.length > 0 ? newSubItems : undefined,
            totalPrice: newTotalPrice
          };
        }
      }
      return item;
    }));
  }, []);

  // Order Manager Hook
  const { addToOrder, removeSubItem } = useOrderManager({
    keypadValue,
    isExtraMode,
    isWithoutMode,
    selectedOrderItemId,
    onOrderAdd: (orderItem) => setOrderItems(prev => [...prev, orderItem]),
    onOrderUpdate: updateOrderItem,
    onModeReset: () => {
      setIsExtraMode(false);
      setIsWithoutMode(false);
      setSelectedOrderItemId(null);
      setKeypadValue('0');
    },
    onLoadNormalProducts: () => {
      // ŸÑÿß ŸÜÿ≠ÿ™ÿßÿ¨ ŸÑÿ•ÿπÿßÿØÿ© ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑÿ£ŸÜŸáÿß ŸÖÿ≠ŸÖŸÑÿ© ŸÖÿ≥ÿ®ŸÇÿßŸã
    }
  });

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ double click
  const handleOrderItemDoubleClick = useCallback((item: OrderItem) => {
    setSelectedOrderItemForDetails(item);
    setShowOrderDetailsPopup(true);
  }, []);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸÑŸÄ OrderItemDetailsPopup
  const handleUpdateOrderItem = useCallback((itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        const updatedItem = { ...item };
        
        if (updates.quantity !== undefined) {
          updatedItem.quantity = updates.quantity;
        }
        
        if (updates.notes !== undefined) {
          updatedItem.notes = updates.notes;
        }
        
        if (updates.discountPercentage !== undefined) {
          updatedItem.discountPercentage = updates.discountPercentage;
        }
        
        if (updates.discountAmount !== undefined) {
          updatedItem.discountAmount = updates.discountAmount;
        }
        
        const basePrice = item.selectedPrice.price * (updates.quantity || item.quantity);
        const subItemsTotal = item.subItems?.reduce((sum, subItem) => {
          return sum + (subItem.type === 'without' ? 0 : subItem.price);
        }, 0) || 0;
        
        const totalBeforeDiscount = basePrice + subItemsTotal;
        const discountAmount = updates.discountAmount || item.discountAmount || 0;
        updatedItem.totalPrice = totalBeforeDiscount - discountAmount;
        
        return updatedItem;
      }
      return item;
    }));
  }, []);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ÿ≠ÿ∞ŸÅ sub-item
  const handleRemoveSubItem = useCallback((orderItemId: string, subItemId: string) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === orderItemId && item.subItems) {
        const removedSubItem = item.subItems.find(sub => sub.id === subItemId);
        const newSubItems = item.subItems.filter(sub => sub.id !== subItemId);
        
        const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
        const newTotalPrice = item.totalPrice - priceImpact;
        
        return {
          ...item,
          subItems: newSubItems.length > 0 ? newSubItems : undefined,
          totalPrice: newTotalPrice
        };
      }
      return item;
    }));
  }, []);

  // ÿ•ÿ∂ÿßŸÅÿ© useEffect ŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
  useEffect(() => {
    if (defaultCategoryId && !selectedCategory && !isAdditionMode) {
      setSelectedCategory(defaultCategoryId);
    }
  }, [defaultCategoryId, selectedCategory, isAdditionMode]);

  // ŸÖÿπÿßŸÑÿ¨ ÿ≤ÿ± Extra - ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¨ÿØŸäÿØ
  const handleExtraClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsExtraMode(true);
    setIsWithoutMode(false);
    setSelectedChips(prev => prev.includes('extra') ? prev : [...prev.filter(chip => chip !== 'without'), 'extra']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // ŸÖÿπÿßŸÑÿ¨ ÿ≤ÿ± Without - ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¨ÿØŸäÿØ
  const handleWithoutClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsWithoutMode(true);
    setIsExtraMode(false);
    setSelectedChips(prev => prev.includes('without') ? prev : [...prev.filter(chip => chip !== 'extra'), 'without']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // ŸÖÿπÿßŸÑÿ¨ ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
  const handleBackToMainProducts = useCallback(() => {
    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedOrderItemId(null);
    setSelectedChips(prev => prev.filter(chip => chip !== 'extra' && chip !== 'without'));
    
    if (defaultCategoryId) {
      setSelectedCategory(defaultCategoryId);
    }
    
    setShowingChildren(null);
    setParentCategory(null);
  }, [defaultCategoryId]);

  // ŸÖÿπÿßŸÑÿ¨ ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÜÿ™ÿ¨ ŸÅŸä ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©
  const handleOrderItemSelect = useCallback((itemId: string) => {
    if (selectedOrderItemId === itemId) {
      setSelectedOrderItemId(null);
    } else {
      setSelectedOrderItemId(itemId);
    }
  }, [selectedOrderItemId]);

  // ŸÖÿπÿßŸÑÿ¨ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÅÿ¶ÿ©
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      setShowingChildren(categoryId);
      setParentCategory(category);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // ÿØÿßŸÑÿ© ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸÅÿ¶ÿ© ÿßŸÑÿ£ÿ®
  const handleBackToParent = useCallback(() => {
    setShowingChildren(null);
    setParentCategory(null);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [rootCategories]);

  // ŸÖÿπÿßŸÑÿ¨ ÿ∂ÿ∫ÿ∑ ÿßŸÑŸÖŸÜÿ™ÿ¨
  const handleProductClick = useCallback((product: PosProduct) => {
    if (!canAddProduct(selectedOrderType)) {
      showWarning('Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ∑ÿßŸàŸÑÿ© ÿ£ŸàŸÑÿßŸã');
      return;
    }

    if (product.hasMultiplePrices) {
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      const price = product.productPrices[0];
      
      if (hasProductOptions(product)) {
        setSelectedProductForOptions(product);
        setSelectedPriceForOptions(price);
        setShowOptionsPopup(true);
      } else {
        addToOrder(product, price, []);
      }
    }
  }, [addToOrder, showWarning, hasProductOptions, selectedOrderType, canAddProduct]);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ∑ÿßŸàŸÑÿ©
  const handleTableSelect = useCallback((selection: TableSelection) => {
    selectTable(selection);
    setShowTablePopup(false);
  }, [selectTable]);

  // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπÿßŸÑÿ¨ ŸÅÿ™ÿ≠ popup ÿßŸÑÿ∑ÿßŸàŸÑÿ©
  const handleTableClick = useCallback(() => {
    setShowTablePopup(true);
  }, []);

  // ÿ™ÿπÿØŸäŸÑ ŸÖÿπÿßŸÑÿ¨ ÿ™ÿ∫ŸäŸäÿ± ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
  const handleOrderTypeChange = useCallback((type: string) => {
    setSelectedOrderType(type);
    
    if (type === 'Dine-in' && isTableRequired(type)) {
      setShowTablePopup(true);
    }
    
    if (type !== 'Dine-in') {
      clearSelectedTable();
    }
  }, [isTableRequired, clearSelectedTable]);

  // ŸÖÿπÿßŸÑÿ¨ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ≥ÿπÿ±
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      if (hasProductOptions(selectedProduct)) {
        setSelectedProductForOptions(selectedProduct);
        setSelectedPriceForOptions(price);
        setShowPricePopup(false);
        setShowOptionsPopup(true);
      } else {
        addToOrder(selectedProduct, price, []);
      }
    }
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder, hasProductOptions]);

  // ŸÖÿπÿßŸÑÿ¨ ÿ•ŸÉŸÖÿßŸÑ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™
  const handleOptionsComplete = useCallback((selectedOptions: SelectedOption[]) => {
    if (selectedProductForOptions && selectedPriceForOptions) {
      addToOrder(selectedProductForOptions, selectedPriceForOptions, selectedOptions);
    }
    setShowOptionsPopup(false);
    setSelectedProductForOptions(null);
    setSelectedPriceForOptions(null);
  }, [selectedProductForOptions, selectedPriceForOptions, addToOrder]);

  // ÿ™ÿπÿØŸäŸÑ ÿ≠ÿ≥ÿßÿ® ŸÖŸÑÿÆÿµ ÿßŸÑÿ∑ŸÑÿ® ŸÑŸäÿ¥ŸÖŸÑ ÿßŸÑÿÆÿØŸÖÿ©
  const orderSummary: OrderSummaryType = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const serviceCharge = getServiceCharge();
    const service = (subtotal * serviceCharge) / 100;
    const discountPercentage = 0;
    const discount = (subtotal * discountPercentage) / 100;
    
    return {
      items: orderItems,
      subtotal,
      discount,
      tax: 0,
      service,
      total: subtotal + service + deliveryCharge - discount
    };
  }, [orderItems, getServiceCharge, deliveryCharge]);



// ŸÖÿπÿßŸÑÿ¨ ÿπÿ±ÿ∂ ÿßŸÑÿ∑ŸÑÿ® ŸÖŸÜ popup
const handleViewOrderFromPopup = useCallback(async (invoiceData: any) => {
  console.log('üîÑ ÿ®ÿØÿ° ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ∑ŸÑÿ® ŸÑŸÑÿπÿ±ÿ∂:', invoiceData);
  
  try {
    setIsLoadingOrder(true); // ‚úÖ ÿßÿ≥ÿ™ÿ®ÿØŸÑ setLoading ÿ®ŸÄ setIsLoadingOrder
    
    // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ≠ŸàŸÑ ÿßŸÑÿ¨ÿØŸäÿØ
    const convertedData = await InvoiceDataConverter.convertInvoiceForEdit(invoiceData);
    
    // ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÑŸâ ÿßŸÑŸàÿßÿ¨Ÿáÿ©
    setOrderItems(convertedData.orderItems);
    setDeliveryCharge(convertedData.deliveryCharge);
    
    // ÿ™ÿ∑ÿ®ŸäŸÇ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ
    if (convertedData.selectedCustomer) {
      setSelectedCustomer(convertedData.selectedCustomer);
      setCustomerName(`${convertedData.selectedCustomer.name} - ${convertedData.selectedCustomer.phone1}`);
      
      // ÿ™ÿ∑ÿ®ŸäŸÇ ÿ£ŸàŸÑ ÿπŸÜŸàÿßŸÜ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ™ŸàŸÅÿ±
      if (convertedData.selectedCustomer.addresses.length > 0) {
        setSelectedAddress(convertedData.selectedCustomer.addresses[0]);
      }
    }
    
    // ÿ™ÿ∑ÿ®ŸäŸÇ ŸÜŸàÿπ ÿßŸÑÿ∑ŸÑÿ®
    const orderTypeMap: { [key: number]: string } = {
      1: 'Takeaway',
      2: 'Dine-in', 
      3: 'Delivery',
      4: 'Pickup'
    };
    
    const newOrderType = orderTypeMap[invoiceData.invoiceType] || 'Takeaway';
    setSelectedOrderType(newOrderType);
    
    // ÿ™ŸÅÿπŸäŸÑ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
    setIsEditMode(true);
    setCurrentInvoiceId(invoiceData.id);
    
    console.log('‚úÖ ÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠');
    
  } catch (error) {
    console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸàŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ®:', error);
    showError('ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ® ŸÑŸÑÿ™ÿπÿØŸäŸÑ');
  } finally {
    setIsLoadingOrder(false); // ‚úÖ ÿßÿ≥ÿ™ÿ®ÿØŸÑ setLoading ÿ®ŸÄ setIsLoadingOrder
  }
}, [setOrderItems, setSelectedCustomer, setCustomerName, setSelectedAddress, 
    setSelectedOrderType, setIsEditMode, setCurrentInvoiceId, showError]);


    useEffect(() => {
  // ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖŸÑÿ© ŸÅŸä ŸÉÿßÿ¥ ÿßŸÑŸÖÿ≠ŸàŸÑ
  const allProducts = getProducts(false); // ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿπÿßÿØŸäÿ©
  allProducts.forEach(product => {
    InvoiceDataConverter.cacheProduct(product);
  });
}, [getProducts]);

// ÿ£ÿ∂ŸÅ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿπŸÖŸäŸÑ
const handleCustomerSelect = useCallback((customer: Customer, address: CustomerAddress) => {
  // ÿ≠ŸÅÿ∏ ÿßŸÑÿπŸÖŸäŸÑ ŸÅŸä ÿßŸÑŸÉÿßÿ¥
  InvoiceDataConverter.cacheCustomer(customer);
  
  setSelectedCustomer(customer);
  setSelectedAddress(address);
  setCustomerName(`${customer.name} - ${customer.phone1}`);
}, []);

  // ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ™ÿ¨ ŸÖŸÜ ÿßŸÑÿ∑ŸÑÿ®
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  // ÿØÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿµÿ≠ÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑ
  const validateKeypadInput = useCallback((value: string): boolean => {
    if (!value || value.trim() === '') return false;
    if (value === '.') return true;
    
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return false;
    if (numValue < 0) return false;
    
    const decimalPlaces = value.split('.')[1]?.length || 0;
    if (decimalPlaces > 3) return false;
    if (numValue > 999999) return false;
    
    return true;
  }, []);

  // ŸÖÿπÿßŸÑÿ¨ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÖÿ≠ÿ≥ŸÜ
  const handleNumberClick = useCallback((number: string) => {
    let newValue = keypadValue;
    
    if (number === '.') {
      if (!keypadValue.includes('.')) {
        newValue = keypadValue + '.';
      } else {
        return;
      }
    } else {
      if (keypadValue === '0' && number !== '0') {
        newValue = number;
      } else {
        newValue = keypadValue + number;
      }
    }
    
    if (validateKeypadInput(newValue)) {
      setKeypadValue(newValue);
    }
  }, [keypadValue, validateKeypadInput]);

  // ÿØÿßŸÑÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ©
  const getNumericValue = useCallback((): number => {
    const value = parseFloat(keypadValue);
    return isNaN(value) || value <= 0 ? 1 : value;
  }, [keypadValue]);

  // ÿØÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿ≠
  const handleClearClick = useCallback(() => {
    setKeypadValue('0');
  }, []);

  // ‚úÖ ÿ•ÿµŸÑÿßÿ≠ ÿØÿπŸÖ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿπÿßÿØŸäÿ© ŸÖÿπ ÿ≠ŸÑ ÿÆÿ∑ÿ£ contentEditable
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ popup ŸÖŸÅÿ™Ÿàÿ≠
      const isAnyPopupOpen = showPricePopup || showOptionsPopup || showOrderDetailsPopup || showTablePopup;
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ input ŸÖÿ±ŸÉÿ≤ ÿπŸÑŸäŸá - ŸÖÿπ ÿ•ÿµŸÑÿßÿ≠ ÿÆÿ∑ÿ£ contentEditable
      const activeElement = document.activeElement;
      const isInputFocused = activeElement?.tagName === 'INPUT' || 
                            activeElement?.tagName === 'TEXTAREA' || 
                            (activeElement as HTMLElement)?.contentEditable === 'true';
      
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ popup ŸÖŸÅÿ™Ÿàÿ≠ ÿ£Ÿà input ŸÖÿ±ŸÉÿ≤ ÿπŸÑŸäŸáÿå ŸÑÿß ŸÜÿ™ÿØÿÆŸÑ
      if (isAnyPopupOpen || isInputFocused) {
        return;
      }
      
      const key = event.key;
      
      // ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸàÿßŸÑŸÜŸÇÿ∑ÿ© ÿßŸÑÿπÿ¥ÿ±Ÿäÿ©
      if (/^[0-9]$/.test(key)) {
        event.preventDefault();
        handleNumberClick(key);
      } else if (key === '.') {
        event.preventDefault();
        handleNumberClick('.');
      } else if (key === 'Backspace') {
        event.preventDefault();
        // ÿ≠ÿ∞ŸÅ ÿ¢ÿÆÿ± ÿ±ŸÇŸÖ
        if (keypadValue.length > 1) {
          const newValue = keypadValue.slice(0, -1);
          if (validateKeypadInput(newValue)) {
            setKeypadValue(newValue);
          }
        } else {
          setKeypadValue('0');
        }
      } else if (key === 'Delete' || key === 'Escape') {
        event.preventDefault();
        handleClearClick();
      } else if (key === 'Enter') {
        event.preventDefault();
        // ŸäŸÖŸÉŸÜ ÿ•ÿ∂ÿßŸÅÿ© Ÿàÿ∏ŸäŸÅÿ© ŸÖÿπŸäŸÜÿ© ÿπŸÜÿØ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ Enter
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [
    keypadValue, 
    handleNumberClick, 
    handleClearClick, 
    validateKeypadInput,
    showPricePopup,
    showOptionsPopup,
    showOrderDetailsPopup,
    showTablePopup
  ]);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);





const handleResetOrder = useCallback(() => {
  setOrderItems([]);
  setSelectedOrderItemId(null);
  setCustomerName('');
  setKeypadValue('0');
  
  setSelectedCustomer(null);
  setSelectedAddress(null);
  setDeliveryCharge(0);
  
  // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿπÿØŸäŸÑ
  setIsEditMode(false);
  setCurrentInvoiceId(null);
  
  clearSelectedTable();

  setIsExtraMode(false);
  setIsWithoutMode(false);
  setSelectedChips([]);
  
  handleBackToMainProducts();
  setSearchQuery('');
  
  // ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÉÿßÿ¥ ÿπŸÜÿØ ÿßŸÑÿ≠ÿßÿ¨ÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)
  // InvoiceDataConverter.clearCache();
  
  console.log('Order reset successfully');
}, [handleBackToMainProducts, clearSelectedTable]);

    const handleOrderCompleted = useCallback((result: any) => {
  console.log('ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠:', result);
  
  // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ŸÉŸÖÿß ŸÑŸà ÿ™ŸÖ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ Reset
  handleResetOrder();
  
  // ŸäŸÖŸÉŸÜŸÉ ÿ•ÿ∂ÿßŸÅÿ© ÿ£Ÿä ŸÖŸÜÿ∑ŸÇ ÿ•ÿ∂ÿßŸÅŸä ŸáŸÜÿß ŸÖÿ´ŸÑ ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ŸÜÿ¨ÿßÿ≠
  console.log('ÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿ®ŸÜÿ¨ÿßÿ≠');
}, [handleResetOrder]);

  // ÿπÿ±ÿ∂ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
  if (loading) {
    return (
      <div className="pos-system loading">
        <div className="loading-spinner">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™...</div>
      </div>
    );
  }

  // ÿπÿ±ÿ∂ ÿ≠ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£
  if (error) {
    return (
      <div className="pos-system error">
        <div className="error-message">{error}</div>
        <button onClick={() => window.location.reload()}>ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©</button>
      </div>
    );
  }


  return (
    <div className="pos-system">
      <Header
        selectedOrderType={selectedOrderType}
        onOrderTypeChange={handleOrderTypeChange}
        onResetOrder={handleResetOrder}
        onTableClick={handleTableClick}
        tableDisplayName={getTableDisplayName()}
        deliveryCompanies={deliveryCompanies}
        selectedDeliveryCompany={selectedDeliveryCompany}
        onDeliveryCompanySelect={setSelectedDeliveryCompany}
        selectedCustomer={selectedCustomer}
        selectedAddress={selectedAddress}
        onViewOrder={handleViewOrderFromPopup} // ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß

      />

      <main className="main-content">
        <section className="products-section">
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          <ActionButtons
            selectedChips={selectedChips}
            onChipClick={handleChipClick}
            isExtraMode={isExtraMode}
            isWithoutMode={isWithoutMode}
            onExtraClick={handleExtraClick}
            onWithoutClick={handleWithoutClick}
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            hasSelectedOrderItem={true}
          />

          <div className="product-grid">
            {displayedProducts.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                onClick={handleProductClick}
              />
            ))}
          </div>
        </section>

        <aside className="categories-sidebar">
          <div className="categories-list">
            {isAdditionMode && (
              <button
                onClick={handleBackToMainProducts}
                className="category-item back-button main-back"
              >
                <ArrowBackIcon />
                <span>ÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©</span>
              </button>
            )}
            
            {showingChildren && (
              <button
                onClick={handleBackToParent}
                className="category-item back-button"
              >
                <ArrowBackIcon />
                <span>ÿ±ÿ¨Ÿàÿπ</span>
              </button>
            )}
            
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
                className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
              >
                <img src={category.image} alt={category.name} />
                <span>{category.nameArabic}</span>
              </button>
            ))}
          </div>
        </aside>

        <OrderSummary
          orderSummary={orderSummary}
          customerName={customerName}
          onCustomerNameChange={setCustomerName}
          onRemoveOrderItem={removeOrderItem}
          onRemoveSubItem={handleRemoveSubItem}
          selectedOrderItemId={selectedOrderItemId}
          onOrderItemSelect={handleOrderItemSelect}
          onOrderItemDoubleClick={handleOrderItemDoubleClick}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          onCustomerSelect={handleCustomerSelect}
          orderType={selectedOrderType}
          onDeliveryChargeChange={handleDeliveryChargeChange} readOnly={false}   onOrderCompleted={handleOrderCompleted} 
          selectedTable={selectedTable} // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß
          selectedDeliveryCompany={selectedDeliveryCompany} // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß// ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿπÿßŸÑÿ¨ ÿßŸÑÿ¨ÿØŸäÿØ
          isEditMode={isEditMode}
  currentInvoiceId={currentInvoiceId}
       />
      </main>

      <PriceSelectionPopup
        product={selectedProduct}
        quantity={getNumericValue()}
        isOpen={showPricePopup}
        onClose={() => {
          setShowPricePopup(false);
          setSelectedProduct(null);
        }}
        onSelectPrice={handlePriceSelect}
      />

      <ProductOptionsPopup
        product={selectedProductForOptions}
        selectedPrice={selectedPriceForOptions}
        quantity={getNumericValue()}
        isOpen={showOptionsPopup}
        onClose={() => {
          setShowOptionsPopup(false);
          setSelectedProductForOptions(null);
          setSelectedPriceForOptions(null);
        }}
        onComplete={handleOptionsComplete}
      />

      <OrderItemDetailsPopup
        orderItem={selectedOrderItemForDetails}
        isOpen={showOrderDetailsPopup}
        onClose={() => {
          setShowOrderDetailsPopup(false);
          setSelectedOrderItemForDetails(null);
        }}
        onUpdateItem={handleUpdateOrderItem}
        onRemoveItem={removeOrderItem}
      />

      <TableSelectionPopup
        isOpen={showTablePopup}
        onClose={() => setShowTablePopup(false)}
        onSelectTable={handleTableSelect}
        tableSections={tableSections}
      />

      
    </div>
  );
};

export default PosSystem;


===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productType: number; // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß ÿßŸÑÿ≠ŸÇŸÑ
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
  productOptionGroups?: ProductOptionGroup[]; // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™
}


export interface ProductOptionGroup {
  id: string;
  name: string;
  isRequired: boolean;
  allowMultiple: boolean;
  minSelection: number;
  maxSelection: number;
  sortOrder: number;
  optionItems: ProductOptionItem[];
}

export interface ProductOptionItem {
  id: string;
  name: string;
  productPriceId?: string | null; // Change this line to support null
  useOriginalPrice: boolean;
  extraPrice: number;
  isCommentOnly: boolean;
  sortOrder: number;
}

export interface SelectedOption {
  groupId: string;
  itemId: string;
  itemName: string;
  quantity: number;
  extraPrice: number;
  isCommentOnly: boolean;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  products?: PosProduct[]; // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß ÿßŸÑÿ≠ŸÇŸÑ
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  selectedOptions?: SelectedOption[]; // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿÆÿ™ÿßÿ±ÿ©
  notes?: string;
    isExtra?: boolean;        // ÿ¨ÿØŸäÿØ
  isWithout?: boolean;      // ÿ¨ÿØŸäÿØ
  parentItemId?: string;    // ÿ¨ÿØŸäÿØ - ŸÑŸÑÿ±ÿ®ÿ∑ ÿ®ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑÿ£ÿµŸÑŸä
  subItems?: SubItem[]; // ÿ¨ÿØŸäÿØ - ŸÑŸÑÿπŸÜÿßÿµÿ± ÿßŸÑŸÅÿ±ÿπŸäÿ©
  discountPercentage?: number; // ÿ¨ÿØŸäÿØ
  discountAmount?: number; // ÿ¨ÿØŸäÿØ
}


export interface SubItem {
  id: string;
  type: 'option' | 'extra' | 'without';
  name: string;
  quantity: number;
  price: number;
  isRequired?: boolean; // ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
  groupId?: string; // ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™
  productId?: string; // ŸÑŸÑÿ•ÿ∂ÿßŸÅÿßÿ™/ÿ®ÿØŸàŸÜ
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}
===== src/Pages/pos/newSales/types/TableSystem.ts =====
// src/Pages/pos/newSales/types/TableSystem.ts
export interface Table {
  id?: string;
  name: string;
  sectionId: string;
  sectionName?: string;
  capacity: number;
  isOccupied?: boolean;
  currentOrderId?: string;
    image?: string; // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
}

export interface TableSection {
  id: string;
  name: string;
  branchName?: string;
  serviceCharge: number;
  tables: Table[];
  branchId: string;
  companyID?: string;
  isActive: boolean;
    image?: string; // ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
}

export interface TableSelection {
  section: TableSection;
  table: Table;
}
