The following is a digest of the repository "POS".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: POS
Files Analyzed: 461
Total Text Size: 2.56 MB
Estimated Tokens (text only): ~643,754

--- DIRECTORY STRUCTURE ---
POS/
├── .firebase/
│   ├── hosting.cHVibGlj.cache [binary]
│   └── hosting.ZGlzdA.cache [binary]
├── src/
│   ├── components/
│   │   ├── container/
│   │   │   └── PageContainer.tsx
│   │   ├── custom-scroll/
│   │   │   └── Scrollbar.tsx
│   │   ├── dashboards/
│   │   │   └── ecommerce/
│   │   │       ├── Expence.tsx
│   │   │       ├── Growth.tsx
│   │   │       ├── MonthlyEarnings.tsx
│   │   │       ├── PaymentGateways.tsx
│   │   │       ├── ProductPerformances.tsx
│   │   │       ├── RecentTransactions.tsx
│   │   │       ├── RevenueUpdates.tsx
│   │   │       ├── Sales.tsx
│   │   │       ├── SalesOverview.tsx
│   │   │       ├── SalesTwo.tsx
│   │   │       ├── WelcomeCard.tsx
│   │   │       └── YearlySales.tsx
│   │   ├── forms/
│   │   │   └── theme-elements/
│   │   │       ├── CustomCheckbox.tsx
│   │   │       ├── CustomFormLabel.tsx
│   │   │       └── CustomTextField.tsx
│   │   ├── shared/
│   │   │   ├── AppCard.tsx
│   │   │   ├── BaseCard.tsx
│   │   │   ├── BlankCard.tsx
│   │   │   ├── ChildCard.tsx
│   │   │   ├── CodeDialog.tsx
│   │   │   ├── DashboardCard.tsx
│   │   │   ├── DashboardWidgetCard.tsx
│   │   │   ├── DownloadCard.tsx
│   │   │   ├── InlineItemCard.tsx
│   │   │   ├── ParentCard.tsx
│   │   │   ├── ScrollToTop.tsx
│   │   │   └── ThreeColumn.tsx
│   │   ├── widgets/
│   │   │   ├── banners/
│   │   │   │   ├── code/
│   │   │   │   │   ├── EmptyCartCode.tsx
│   │   │   │   │   ├── ErrorBannerCode.tsx
│   │   │   │   │   ├── FriendCardCode.tsx
│   │   │   │   │   ├── NotificationCode.tsx
│   │   │   │   │   └── TransectionCode.tsx
│   │   │   │   ├── Banner1.tsx
│   │   │   │   ├── Banner2.tsx
│   │   │   │   ├── Banner3.tsx
│   │   │   │   ├── Banner4.tsx
│   │   │   │   └── Banner5.tsx
│   │   │   ├── cards/
│   │   │   │   ├── code/
│   │   │   │   │   ├── ComplexCardCode.tsx
│   │   │   │   │   ├── EcommerceCardCode.tsx
│   │   │   │   │   ├── FollowerCardCode.tsx
│   │   │   │   │   ├── FriendCardCode.tsx
│   │   │   │   │   ├── GiftCardCode.tsx
│   │   │   │   │   ├── MusicCardCode.tsx
│   │   │   │   │   ├── ProfileCardCode.tsx
│   │   │   │   │   ├── SettingsCode.tsx
│   │   │   │   │   └── UpcomingActivityCode.tsx
│   │   │   │   ├── ComplexCard.tsx
│   │   │   │   ├── EcommerceCard.tsx
│   │   │   │   ├── FollowerCard.tsx
│   │   │   │   ├── FriendCard.tsx
│   │   │   │   ├── GiftCard.tsx
│   │   │   │   ├── MusicCard.tsx
│   │   │   │   ├── ProfileCard.tsx
│   │   │   │   ├── Settings.tsx
│   │   │   │   └── UpcomingActivity.tsx
│   │   │   └── charts/
│   │   │       ├── CurrentValue.tsx
│   │   │       ├── Earned.tsx
│   │   │       ├── Followers.tsx
│   │   │       ├── MostVisited.tsx
│   │   │       ├── PageImpressions.tsx
│   │   │       └── Views.tsx
│   │   ├── BranchSelector.tsx
│   │   ├── ErrorBoundary.tsx
│   │   ├── GlobalLoading.tsx
│   │   ├── GlobalPrintHandler.tsx
│   │   ├── PermissionGuard.tsx
│   │   └── ProtectedRoute.tsx
│   ├── config/
│   │   ├── env.ts [binary]
│   │   └── pagePermissions.ts [binary]
│   ├── contexts/
│   │   ├── AuthContext.tsx
│   │   ├── ErrorContext.tsx
│   │   ├── POSContext.tsx
│   │   └── ProductCopyPasteContext.tsx
│   ├── hoc/
│   │   └── withPermissions.tsx
│   ├── hooks/
│   │   ├── useCopyPaste.ts [binary]
│   │   ├── useGlobalErrorHandler.ts [binary]
│   │   ├── usePermissions.ts [binary]
│   │   └── useThermalPrint.ts [binary]
│   ├── layouts/
│   │   ├── blank/
│   │   │   └── BlankLayout.tsx
│   │   └── full/
│   │       ├── horizontal/
│   │       │   ├── header/
│   │       │   │   └── Header.tsx
│   │       │   └── navbar/
│   │       │       ├── NavCollapse/
│   │       │       │   └── NavCollapse.tsx
│   │       │       ├── NavItem/
│   │       │       │   └── NavItem.tsx
│   │       │       ├── NavListing/
│   │       │       │   └── NavListing.tsx
│   │       │       ├── Menudata.ts [binary]
│   │       │       └── Navigation.tsx
│   │       ├── shared/
│   │       │   ├── breadcrumb/
│   │       │   │   └── Breadcrumb.tsx
│   │       │   ├── customizer/
│   │       │   │   ├── Customizer.tsx
│   │       │   │   ├── RTL.tsx
│   │       │   │   └── typings.d.ts [binary]
│   │       │   ├── loadable/
│   │       │   │   └── Loadable.tsx
│   │       │   ├── logo/
│   │       │   │   └── Logo.tsx
│   │       │   └── welcome/
│   │       │       └── Welcome.tsx
│   │       ├── vertical/
│   │       │   ├── header/
│   │       │   │   ├── AppLinks.tsx
│   │       │   │   ├── Cart.tsx
│   │       │   │   ├── CartItem.tsx
│   │       │   │   ├── data.ts [binary]
│   │       │   │   ├── Header.tsx
│   │       │   │   ├── Language.tsx
│   │       │   │   ├── Message.tsx
│   │       │   │   ├── MobileRightSidebar.tsx
│   │       │   │   ├── Navigation.tsx
│   │       │   │   ├── Notification.tsx
│   │       │   │   ├── PrintButton.tsx
│   │       │   │   ├── Profile.tsx
│   │       │   │   ├── QuickLinks.tsx
│   │       │   │   └── Search.tsx
│   │       │   └── sidebar/
│   │       │       ├── NavCollapse/
│   │       │       │   └── index.tsx
│   │       │       ├── NavGroup/
│   │       │       │   └── NavGroup.tsx
│   │       │       ├── NavItem/
│   │       │       │   └── index.tsx
│   │       │       ├── SidebarProfile/
│   │       │       │   └── Profile.tsx
│   │       │       ├── MenuItems.ts [binary]
│   │       │       ├── module-name.d.ts [binary]
│   │       │       ├── Sidebar.tsx
│   │       │       └── SidebarItems.tsx
│   │       └── FullLayout.tsx
│   ├── Pages/
│   │   ├── accounts/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   ├── AccountsCards.tsx
│   │   │   │   │   └── MobileAccountsFilter.tsx
│   │   │   │   ├── AccountForm.tsx
│   │   │   │   ├── AccountsTable.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   └── PageHeader.tsx
│   │   │   └── AccountsPage.tsx
│   │   ├── auth/
│   │   │   ├── components/
│   │   │   │   └── AuthLogin.tsx
│   │   │   ├── BranchSelectionPage.tsx
│   │   │   ├── LoginPage.tsx
│   │   │   └── RegisterPage.tsx
│   │   ├── company/
│   │   │   └── CompanySettingsPage.tsx
│   │   ├── components/
│   │   │   ├── configs/
│   │   │   │   └── importExportConfigs.ts [binary]
│   │   │   ├── CopyPasteButtons.tsx
│   │   │   ├── ExportButtons.tsx
│   │   │   ├── ImportExportManager.tsx
│   │   │   ├── PageHeader.tsx
│   │   │   └── SearchableSelect.tsx
│   │   ├── errors/
│   │   │   ├── NoBranchesPage.tsx
│   │   │   └── UnauthorizedPage.tsx
│   │   ├── Groups/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   ├── GroupCards.tsx
│   │   │   │   │   └── MobileGroupsFilter.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── GroupForm.tsx
│   │   │   │   ├── GroupTree.tsx
│   │   │   │   ├── GroupTreeSelect.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   └── StatusPill.tsx
│   │   │   └── GroupsPage.tsx
│   │   ├── inventory/
│   │   │   └── adjustments-list/
│   │   │       ├── components/
│   │   │       │   ├── mobile/
│   │   │       │   │   └── MobileAdjustmentsFilter.tsx
│   │   │       │   ├── AdjustmentForm.tsx
│   │   │       │   ├── AdjustmentHeader.tsx
│   │   │       │   ├── AdjustmentItemsCards.tsx
│   │   │       │   ├── AdjustmentItemsTable.tsx
│   │   │       │   ├── AdjustmentsCards.tsx
│   │   │       │   ├── AdjustmentsListHeader.tsx
│   │   │       │   ├── AdjustmentsTable.tsx
│   │   │       │   ├── AdjustmentViewCards.tsx
│   │   │       │   ├── AdjustmentViewPage.tsx
│   │   │       │   ├── AdjustmentViewTable.tsx
│   │   │       │   ├── BarcodeScanner.tsx
│   │   │       │   ├── NewAdjustmentDialog.tsx
│   │   │       │   ├── PageHeader.tsx
│   │   │       │   └── ProductSearchBox.tsx
│   │   │       ├── AdjustmentsListPage.tsx
│   │   │       └── InventoryAdjustmentPage.tsx
│   │   ├── permissions/
│   │   │   └── PermissionsPage.tsx
│   │   ├── pos/
│   │   │   ├── additions/
│   │   │   │   └── AdditionProductsPage.tsx
│   │   │   ├── customers/
│   │   │   │   ├── components/
│   │   │   │   │   ├── mobile/
│   │   │   │   │   │   └── MobileCustomersFilter.tsx
│   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   ├── CustomerForm.tsx
│   │   │   │   │   ├── CustomerRow.tsx
│   │   │   │   │   ├── CustomerTable.tsx
│   │   │   │   │   └── PageHeader.tsx
│   │   │   │   └── CustomersPage.tsx
│   │   │   ├── delivery/
│   │   │   │   ├── agents/
│   │   │   │   │   ├── components/
│   │   │   │   │   │   ├── mobile/
│   │   │   │   │   │   │   └── MobileAgentsFilter.tsx
│   │   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   │   ├── AgentForm.tsx
│   │   │   │   │   │   ├── AgentRow.tsx
│   │   │   │   │   │   ├── AgentTable.tsx
│   │   │   │   │   │   └── PageHeader.tsx
│   │   │   │   │   └── DeliveryAgentsPage.tsx
│   │   │   │   ├── companies/
│   │   │   │   │   ├── components/
│   │   │   │   │   │   ├── mobile/
│   │   │   │   │   │   │   └── MobileCompaniesFilter.tsx
│   │   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   │   ├── CompanyForm.tsx
│   │   │   │   │   │   ├── CompanyRow.tsx
│   │   │   │   │   │   ├── CompanyTable.tsx
│   │   │   │   │   │   └── PageHeader.tsx
│   │   │   │   │   └── DeliveryCompaniesPage.tsx
│   │   │   │   └── zones/
│   │   │   │       ├── components/
│   │   │   │       │   ├── mobile/
│   │   │   │       │   │   └── MobileZonesFilter.tsx
│   │   │   │       │   ├── ActionsBar.tsx
│   │   │   │       │   ├── PageHeader.tsx
│   │   │   │       │   ├── ZoneForm.tsx
│   │   │   │       │   ├── ZoneRow.tsx
│   │   │   │       │   └── ZoneTable.tsx
│   │   │   │       └── DeliveryZonesPage.tsx
│   │   │   ├── hall-captains/
│   │   │   │   ├── components/
│   │   │   │   │   ├── mobile/
│   │   │   │   │   │   └── MobileCaptainsFilter.tsx
│   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   ├── CaptainForm.tsx
│   │   │   │   │   ├── CaptainRow.tsx
│   │   │   │   │   ├── CaptainTable.tsx
│   │   │   │   │   └── PageHeader.tsx
│   │   │   │   └── HallCaptainsPage.tsx
│   │   │   ├── newSales/
│   │   │   │   ├── components/
│   │   │   │   │   ├── common/
│   │   │   │   │   │   └── Header.tsx
│   │   │   │   │   ├── paymentPopup components/
│   │   │   │   │   │   ├── styles/
│   │   │   │   │   │   │   ├── PaymentCenter.module.css
│   │   │   │   │   │   │   ├── PaymentLeft.module.css
│   │   │   │   │   │   │   ├── PaymentOrderSummary.module.css
│   │   │   │   │   │   │   └── PaymentRight.module.css
│   │   │   │   │   │   ├── PaymentCenter.tsx
│   │   │   │   │   │   ├── PaymentLeft.tsx
│   │   │   │   │   │   ├── PaymentOrderSummary.tsx
│   │   │   │   │   │   └── PaymentRight.tsx
│   │   │   │   │   ├── ui/
│   │   │   │   │   │   ├── Button.tsx
│   │   │   │   │   │   ├── ChipView.tsx
│   │   │   │   │   │   ├── Dropdown.tsx
│   │   │   │   │   │   ├── EditText.tsx
│   │   │   │   │   │   └── SearchView.tsx
│   │   │   │   │   ├── ActionButtons.tsx
│   │   │   │   │   ├── CustomerDetailsPopup.tsx
│   │   │   │   │   ├── OrderItemDetailsPopup.tsx
│   │   │   │   │   ├── OrderManager.tsx
│   │   │   │   │   ├── OrderSummary.tsx
│   │   │   │   │   ├── PaymentPopup.tsx
│   │   │   │   │   ├── PriceSelectionPopup.tsx
│   │   │   │   │   ├── ProductCard.tsx
│   │   │   │   │   ├── ProductOptionsPopup.tsx
│   │   │   │   │   └── TableSelectionPopup.tsx
│   │   │   │   ├── hooks/
│   │   │   │   │   ├── useDataManager.tsx
│   │   │   │   │   ├── usePosPaymentMethods.tsx
│   │   │   │   │   └── useTableManager.tsx
│   │   │   │   ├── srcdhiwise/
│   │   │   │   │   └── component-tagger.tsx
│   │   │   │   ├── srcvitejs/
│   │   │   │   │   └── plugin-react.tsx
│   │   │   │   ├── styles/
│   │   │   │   │   ├── ActionButtons.css
│   │   │   │   │   ├── Header.css
│   │   │   │   │   ├── OrderItemDetailsPopup.module.css
│   │   │   │   │   ├── OrderSummary.module.css
│   │   │   │   │   ├── PaymentPopup.module.css
│   │   │   │   │   ├── popup.css
│   │   │   │   │   ├── PriceSelectionPopup.module.css
│   │   │   │   │   ├── ProductCard.module.css
│   │   │   │   │   ├── ProductOptionsPopup.module.css
│   │   │   │   │   ├── responsive.css
│   │   │   │   │   ├── TableSelectionPopup.module.css
│   │   │   │   │   └── tailwind.css
│   │   │   │   ├── types/
│   │   │   │   │   ├── PosSystem.tsx
│   │   │   │   │   └── TableSystem.ts [binary]
│   │   │   │   └── index.tsx
│   │   │   ├── offers/
│   │   │   │   ├── components/
│   │   │   │   │   ├── mobile/
│   │   │   │   │   │   └── MobileOffersFilter.tsx
│   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   ├── OfferForm.tsx
│   │   │   │   │   ├── OfferRow.tsx
│   │   │   │   │   ├── OfferTable.tsx
│   │   │   │   │   ├── PageHeader.tsx
│   │   │   │   │   └── ProductMultiSelectDialog.tsx
│   │   │   │   └── OffersPage.tsx
│   │   │   ├── payment-methods/
│   │   │   │   ├── components/
│   │   │   │   │   ├── mobile/
│   │   │   │   │   │   ├── MobilePosPaymentMethodsFilter.tsx
│   │   │   │   │   │   └── PosPaymentMethodsCards.tsx
│   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   ├── PageHeader.tsx
│   │   │   │   │   ├── PosPaymentMethodForm.tsx
│   │   │   │   │   └── PosPaymentMethodsTable.tsx
│   │   │   │   └── PosPaymentMethodsPage.tsx
│   │   │   ├── products/
│   │   │   │   └── PosProductsPage.tsx
│   │   │   ├── screens/
│   │   │   │   ├── components/
│   │   │   │   │   ├── mobile/
│   │   │   │   │   │   ├── MobileScreensFilter.tsx
│   │   │   │   │   │   └── ScreenCards.tsx
│   │   │   │   │   ├── ActionsBar.tsx
│   │   │   │   │   ├── OptimizedScreenTree.tsx
│   │   │   │   │   ├── PageHeader.tsx
│   │   │   │   │   ├── ScreenForm.tsx
│   │   │   │   │   ├── ScreenTreeSelect.tsx
│   │   │   │   │   ├── SimpleScreenTree.tsx
│   │   │   │   │   ├── SmoothScreenTree.tsx
│   │   │   │   │   ├── StatusPill.tsx
│   │   │   │   │   └── VisibilityPill.tsx
│   │   │   │   └── PosScreensPage.tsx
│   │   │   └── table-sections/
│   │   │       ├── components/
│   │   │       │   ├── mobile/
│   │   │       │   │   └── MobileSectionsFilter.tsx
│   │   │       │   ├── ActionsBar.tsx
│   │   │       │   ├── PageHeader.tsx
│   │   │       │   ├── SectionForm.tsx
│   │   │       │   ├── SectionRow.tsx
│   │   │       │   └── SectionTable.tsx
│   │   │       └── TableSectionsPage.tsx
│   │   ├── Products/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   └── MobileProductsFilter.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── GroupTreeSelect.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── ProductForm.tsx
│   │   │   │   ├── ProductMultiSelectDialog.tsx
│   │   │   │   ├── ProductPricesDrawer.tsx
│   │   │   │   ├── ProductPriceSearchSelect.tsx
│   │   │   │   ├── ProductsRow.tsx
│   │   │   │   └── ProductTable.tsx
│   │   │   └── ProductsPage.tsx
│   │   ├── purchase-orders/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   ├── MobileProductSearch.tsx
│   │   │   │   │   ├── MobilePurchaseOrderForm.tsx
│   │   │   │   │   ├── MobilePurchaseOrdersFilter.tsx
│   │   │   │   │   └── MobileSearchableSelect.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── BarcodeScanner.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── ProductPriceSearchDialog.tsx
│   │   │   │   ├── PurchaseOrderForm.tsx
│   │   │   │   ├── PurchaseOrderRow.tsx
│   │   │   │   ├── PurchaseOrderTable.tsx
│   │   │   │   └── SearchableSelect.tsx
│   │   │   ├── AddPurchaseOrderPage.tsx
│   │   │   ├── EditPurchaseOrderPage.tsx
│   │   │   └── PurchaseOrdersPage.tsx
│   │   ├── purchases/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   ├── MobilePurchaseForm.tsx
│   │   │   │   │   └── MobilePurchasesFilter.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── PurchaseForm.tsx
│   │   │   │   ├── PurchaseOrderSelectDialog.tsx
│   │   │   │   ├── PurchaseRow.tsx
│   │   │   │   ├── PurchaseTable.tsx
│   │   │   │   └── ViewPurchasePage.tsx
│   │   │   ├── AddPurchasePage.tsx
│   │   │   ├── EditPurchasePage.tsx
│   │   │   └── PurchasesPage.tsx
│   │   ├── safes/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   ├── MobileSafesFilter.tsx
│   │   │   │   │   └── SafesCards.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── SafeForm.tsx
│   │   │   │   └── SafesTable.tsx
│   │   │   └── SafesPage.tsx
│   │   ├── settings/
│   │   │   └── components/
│   │   │       └── PrinterSettings.tsx
│   │   ├── Suppliers/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   └── MobileSuppliersFilter.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── SupplierForm.tsx
│   │   │   │   ├── SupplierRow.tsx
│   │   │   │   └── SupplierTable.tsx
│   │   │   └── SuppliersPage.tsx
│   │   ├── Units/
│   │   │   ├── components/
│   │   │   │   ├── mobile/
│   │   │   │   │   └── MobileUnitsFilter.tsx
│   │   │   │   ├── ActionsBar.tsx
│   │   │   │   ├── PageHeader.tsx
│   │   │   │   ├── StatusPill.tsx
│   │   │   │   ├── types.ts [binary]
│   │   │   │   ├── UnitForm.tsx
│   │   │   │   ├── UnitRow.tsx
│   │   │   │   └── UnitTable.tsx
│   │   │   └── UnitsPage.tsx
│   │   ├── users/
│   │   │   └── UsersManagementPage.tsx
│   │   └── warehouses/
│   │       ├── components/
│   │       │   ├── mobile/
│   │       │   │   └── MobileWarehousesFilter.tsx
│   │       │   ├── ActionsBar.tsx
│   │       │   ├── PageHeader.tsx
│   │       │   ├── StatusPill.tsx
│   │       │   ├── types.ts [binary]
│   │       │   ├── WarehouseForm.tsx
│   │       │   ├── WarehouseRow.tsx
│   │       │   └── WarehouseTable.tsx
│   │       └── WarehousesPage.tsx
│   ├── routes/
│   │   ├── authLoader.ts [binary]
│   │   └── Router.tsx
│   ├── services/
│   │   └── posService.ts [binary]
│   ├── store/
│   │   ├── customizer/
│   │   │   └── CustomizerSlice.tsx
│   │   ├── hooks.ts [binary]
│   │   └── Store.tsx
│   ├── theme/
│   │   ├── Components.tsx
│   │   ├── DarkThemeColors.tsx
│   │   ├── DefaultColors.tsx
│   │   ├── LightThemeColors.tsx
│   │   ├── Shadows.tsx
│   │   ├── Theme.tsx
│   │   ├── ThemeColors.tsx
│   │   └── Typography.tsx
│   ├── types/
│   │   ├── auth/
│   │   │   └── auth.ts [binary]
│   │   ├── layout/
│   │   │   └── sidebar.ts [binary]
│   │   └── custom.d.ts [binary]
│   ├── utils/
│   │   ├── api/
│   │   │   ├── pagesApi/
│   │   │   │   ├── accountsApi.ts [binary]
│   │   │   │   ├── customersApi.ts [binary]
│   │   │   │   ├── deliveryAgentsApi.ts [binary]
│   │   │   │   ├── deliveryCompaniesApi.ts [binary]
│   │   │   │   ├── deliveryZonesApi.ts [binary]
│   │   │   │   ├── groupsApi.ts [binary]
│   │   │   │   ├── hallCaptainsApi.ts [binary]
│   │   │   │   ├── inventoryAdjustmentApi.ts [binary]
│   │   │   │   ├── offersApi.ts [binary]
│   │   │   │   ├── posPaymentMethodsApi.ts [binary]
│   │   │   │   ├── posScreensApi.ts [binary]
│   │   │   │   ├── productsApi.ts [binary]
│   │   │   │   ├── purchaseApi.ts [binary]
│   │   │   │   ├── purchaseOrdersApi.ts [binary]
│   │   │   │   ├── purchaseProductsApi.ts [binary]
│   │   │   │   ├── safesAndAccountsApi.ts [binary]
│   │   │   │   ├── safesApi.ts [binary]
│   │   │   │   ├── suppliersApi.ts [binary]
│   │   │   │   ├── tableSectionsApi.ts [binary]
│   │   │   │   ├── unitsApi.ts [binary]
│   │   │   │   └── warehousesApi.ts [binary]
│   │   │   ├── authApi.ts [binary]
│   │   │   ├── helpers.ts [binary]
│   │   │   └── reportsApi.ts [binary]
│   │   ├── languages/
│   │   │   ├── ar.json
│   │   │   └── en.json
│   │   ├── auth.ts [binary]
│   │   ├── axios.ts [binary]
│   │   ├── branchUtils.ts [binary]
│   │   ├── date.ts [binary]
│   │   ├── i18n.ts [binary]
│   │   └── pageWrapper.tsx
│   ├── views/
│   │   ├── authentication/
│   │   │   ├── auth1/
│   │   │   │   ├── ForgotPassword.tsx
│   │   │   │   ├── Login.tsx
│   │   │   │   ├── Register.tsx
│   │   │   │   └── TwoSteps.tsx
│   │   │   ├── auth2/
│   │   │   │   ├── ForgotPassword2.tsx
│   │   │   │   ├── Login2.tsx
│   │   │   │   ├── Register2.tsx
│   │   │   │   └── TwoSteps2.tsx
│   │   │   ├── authForms/
│   │   │   │   ├── AuthForgotPassword.tsx
│   │   │   │   ├── AuthLogin.tsx
│   │   │   │   ├── AuthRegister.tsx
│   │   │   │   ├── AuthSocialButtons.tsx
│   │   │   │   └── AuthTwoSteps.tsx
│   │   │   ├── Error.tsx
│   │   │   └── Maintenance.tsx
│   │   ├── charts/
│   │   │   ├── AreaChart.tsx
│   │   │   ├── CandlestickChart.tsx
│   │   │   ├── ColumnChart.tsx
│   │   │   ├── DoughnutChart.tsx
│   │   │   ├── GredientChart.tsx
│   │   │   ├── LineChart.tsx
│   │   │   └── RadialbarChart.tsx
│   │   ├── dashboard/
│   │   │   └── Ecommerce.tsx
│   │   ├── forms/
│   │   │   ├── form-elements/
│   │   │   │   ├── MuiAutoComplete.tsx
│   │   │   │   ├── MuiButton.tsx
│   │   │   │   ├── MuiCheckbox.tsx
│   │   │   │   ├── MuiDateTime.tsx
│   │   │   │   ├── MuiRadio.tsx
│   │   │   │   ├── MuiSlider.tsx
│   │   │   │   └── MuiSwitch.tsx
│   │   │   ├── from-tiptap/
│   │   │   │   ├── Tiptap.css
│   │   │   │   ├── TiptapEdit.tsx
│   │   │   │   └── TiptapEditor.tsx
│   │   │   ├── FormCustom.tsx
│   │   │   ├── FormHorizontal.tsx
│   │   │   ├── FormLayouts.tsx
│   │   │   ├── FormValidation.tsx
│   │   │   ├── FormVertical.tsx
│   │   │   └── FormWizard.tsx
│   │   └── spinner/
│   │       └── Spinner.tsx
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── LoadingBar.tsx
│   ├── main.tsx
│   └── vite-env.d.ts [binary]
├── .firebaserc
├── dark-logo.png [binary]
├── export-src-to-txt.js
├── export-src-to-txt2.js
├── firebase.json
├── light-logo.png [binary]
├── package.json
├── postcss.config.js
├── README.md
├── src-files.txt
├── tailwind.config.js
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts [binary]


--- FILE CONTENTS ---
============================================================
FILE: src/components/container/PageContainer.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Helmet } from 'react-helmet';

type Props = {
  description?: string;
  children: any | any[]
  title?: string;
};

const PageContainer = ({ title, description, children }: Props) => (
  <div>
    <Helmet>
      <title>{title}</title>
      <meta name="description" content={description} />
    </Helmet>
    {children}
  </div>
);

export default PageContainer;


============================================================
FILE: src/components/custom-scroll/Scrollbar.tsx
============================================================
import SimpleBar from 'simplebar-react';
import 'simplebar/dist/simplebar.min.css';
import { Box, styled, SxProps } from '@mui/material';

const SimpleBarStyle = styled(SimpleBar)(() => ({
  maxHeight: '100%',
}));

interface PropsType {
  children: React.ReactElement | React.ReactNode;
  sx: SxProps;
}

const Scrollbar = (props: PropsType) => {
  const { children, sx, ...other } = props;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent,
  );

  if (isMobile) {
    return <Box sx={{ overflowX: 'auto' }}>{children}</Box>;
  }

  return (
    <SimpleBarStyle sx={sx} {...other}>
      {children}
    </SimpleBarStyle>
  );
};

export default Scrollbar;


============================================================
FILE: src/components/dashboards/ecommerce/Expence.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const Expence = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const error = theme.palette.error.main;

  // chart
  const optionsexpencechart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 120,
    },
    labels: ["Profit", "Revenue", "Expance"],
    colors: [primary, error, secondary],
    plotOptions: {
      pie: {
        
        donut: {
          size: '70%',
          background: 'transparent'
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriesexpencechart = [60, 25, 15];

  return (
    <DashboardCard>
      <>
        <Typography variant="h4">$10,230</Typography>
        <Typography variant="subtitle2" color="textSecondary" mb={2}>
          Expense
        </Typography>
        <Chart
          options={optionsexpencechart}
          series={seriesexpencechart}
          type="donut"
          height="120"
        />
      </>
    </DashboardCard>
  );
};

export default Expence;


============================================================
FILE: src/components/dashboards/ecommerce/Growth.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography, Avatar } from '@mui/material';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';
import { IconArrowUpRight } from '@tabler/icons-react';

import icon1 from 'src/assets/images/svgs/icon-bars.svg';

const Growth = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      height: 25,
      fontFamily: `inherit`,
      foreColor: '#a1aab2',
      toolbar: {
        show: false,
      },
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    colors: [secondary],
    stroke: {
      curve: 'straight',
      width: 2,
    },
    fill: {
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: 'dark',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 10, 10, 10, 35, 45, 30, 30, 30, 50, 52, 30, 25, 45, 50, 80, 60, 65],
    },
  ];

  return (
    <DashboardCard>
      <>
        <Box
          width={38}
          height={38}
          bgcolor="secondary.light"
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <Avatar src={icon1} alt="img" sx={{ width: 25, height: 25 }} />
        </Box>

        <Box mt={3} mb={2}>
          <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="25px" />
        </Box>

        <Typography variant="h4">
          24%
          <span>
            <IconArrowUpRight width={18} color="#39B69A" />
          </span>
        </Typography>
        <Typography variant="subtitle2" color="textSecondary">
          Growth
        </Typography>
      </>
    </DashboardCard>
  );
};

export default Growth;


============================================================
FILE: src/components/dashboards/ecommerce/MonthlyEarnings.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar } from '@mui/material';
import { IconArrowUpLeft } from '@tabler/icons-react';

import DashboardCard from '../../shared/DashboardCard';
import icon1Img from 'src/assets/images/svgs/icon-master-card-2.svg';
import { Props } from 'react-apexcharts';

const MonthlyEarnings = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const successlight = theme.palette.success.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 70,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      color: primary,
      data: [25, 66, 20, 40, 12, 58, 20],
    },
  ];

  return (
    <DashboardCard
      title="Monthly Earnings"
      action={
        <Avatar
          variant="rounded"
          sx={{ bgcolor: (theme) => theme.palette.primary.light, width: 40, height: 40 }}
        >
          <Avatar src={icon1Img} alt={icon1Img} sx={{ width: 24, height: 24 }} />
        </Avatar>
      }
      footer={
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="70px" />
      }
    >
      <>
        <Stack direction="row" spacing={1} alignItems="center" mb={3}>
          <Typography variant="h3" fontWeight="700">
            $6,820
          </Typography>
          <Stack direction="row" spacing={1} mt={1} mb={2} alignItems="center">
            <Avatar sx={{ bgcolor: successlight, width: 20, height: 20 }}>
              <IconArrowUpLeft width={18} color="#13DEB9" />
            </Avatar>
            <Typography variant="subtitle2" color="textSecondary">
              +9%
            </Typography>
          </Stack>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default MonthlyEarnings;


============================================================
FILE: src/components/dashboards/ecommerce/PaymentGateways.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box, Button } from '@mui/material';
import DashboardCard from '../../shared/DashboardCard';

import icon1Img from "src/assets/images/svgs/icon-paypal.svg"
import icon2Img from "src/assets/images/svgs/icon-office-bag.svg"
import icon3Img from "src/assets/images/svgs/icon-master-card.svg"
import icon4Img from "src/assets/images/svgs/icon-pie.svg"


interface statType {
  title: string;
  subtitle: string;
  price: number;
  color: string;
  lightcolor: string;
  icon: string;
  }

  const PaymentGateways: React.FC = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.success.main;
  const secondarylight = theme.palette.success.light;


    const stats: statType[] = [
    {
      title: 'Paypal',
      subtitle: 'Big Brands',
      price: 6235,
      color: primary,
      lightcolor: primarylight,
      icon: icon1Img,
    },
    {
      title: 'Wallet',
      subtitle: 'Bill payment',
      price: 345,
      color: secondary,
      lightcolor: secondarylight,
      icon: icon2Img,
    },
    {
      title: 'Credit Card',
      subtitle: 'Money reversed',
      price: 2235,
      color: warning,
      lightcolor: warninglight,
      icon: icon3Img,
    },
    {
      title: 'Refund',
      subtitle: 'Bill Payment',
      price: 32,
      color: error,
      lightcolor: errorlight,
      icon: icon4Img,
    },
  ];

  return (
    <DashboardCard title="Payment Gateways" subtitle="Platform For Income">
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                    <Avatar src={stat.icon} alt={stat.icon} sx={{ width: 24, height: 24 }} />
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>
              {stat.price < 400 ? (
                <Typography variant="subtitle2" color="textSecondary" fontWeight="600">
                  -${stat.price}
                </Typography>
              ) : (
                <Typography variant="subtitle2" fontWeight="600">
                  +${stat.price}
                </Typography>
              )}
            </Stack>
          ))}
          <Button variant="outlined" color="primary" sx={{mt: "40px !important"}}>
            View all transactions
          </Button>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default PaymentGateways;


============================================================
FILE: src/components/dashboards/ecommerce/ProductPerformances.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';
import {
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Avatar,
  Chip,
  TableContainer,
  Stack,
} from '@mui/material';

import img1 from 'src/assets/images/products/s6.jpg';
import img2 from 'src/assets/images/products/s9.jpg';
import img3 from 'src/assets/images/products/s7.jpg';
import img4 from 'src/assets/images/products/s4.jpg';

const ProductPerformances = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const grey = theme.palette.grey[300];
  const primarylight = theme.palette.primary.light;
  const greylight = theme.palette.grey[100];

  //   // chart 1
  const optionsrow1chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow1chart = [
    {
      name: 'Customers',
      color: primary,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 2
  const optionsrow2chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [greylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow2chart = [
    {
      name: 'Customers',
      color: grey,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 3
  const optionsrow3chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [primarylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow3chart = [
    {
      name: 'Customers',
      color: primary,
      data: [30, 25, 35, 20, 30],
    },
  ];

  // chart 4
  const optionsrow4chart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 35,
      width: 100,
      sparkline: {
        enabled: true,
      },
      group: 'sparklines',
    },
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      colors: [greylight],
      type: 'solid',
      opacity: 0.05,
    },
    markers: {
      size: 0,
    },
    tooltip: {
      enabled: false,
    },
  };
  const seriesrow4chart = [
    {
      color: grey,
      data: [30, 25, 35, 20, 30],
    },
  ];

  return (
    <DashboardCard
      title="Product Performance"
    >
      <TableContainer>
        <Table
          aria-label="simple table"
          sx={{
            whiteSpace: 'nowrap',
          }}
        >
          <TableHead>
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Typography variant="subtitle2" fontWeight={600}>
                  Product
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Progress
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Status
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Sales
                </Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2" fontWeight={600}>
                  Growth
                </Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img1} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Gaming Console
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Electronics
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  78.5%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.success.light,
                    color: (theme) => theme.palette.success.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Low"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.9k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow1chart}
                  series={seriesrow1chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 2 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img2} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Leather Purse
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Fashion
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  58.6%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.warning.light,
                    color: (theme) => theme.palette.warning.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Medium"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow2chart}
                  series={seriesrow2chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 3 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img3} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Red Velvate Dress
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Womens Fashion
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  25%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.primary.light,
                    color: (theme) => theme.palette.primary.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="Very High"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow3chart}
                  series={seriesrow3chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
            {/* 4 */}
            <TableRow>
              <TableCell sx={{ pl: 0 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar src={img4} variant="rounded" alt={img1} sx={{ width: 48, height: 48 }} />
                  <Box>
                    <Typography variant="subtitle2" fontWeight={600}>
                      Headphone Boat
                    </Typography>
                    <Typography color="textSecondary" fontSize="12px" variant="subtitle2">
                      Electronics
                    </Typography>
                  </Box>
                </Stack>
              </TableCell>
              <TableCell>
                <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                  96.3%
                </Typography>
              </TableCell>
              <TableCell>
                <Chip
                  sx={{
                    bgcolor: (theme) => theme.palette.error.light,
                    color: (theme) => theme.palette.error.main,
                    borderRadius: '6px',
                    width: 80,
                  }}
                  size="small"
                  label="High"
                />
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">$3.5k</Typography>
              </TableCell>
              <TableCell>
                <Chart
                  options={optionsrow4chart}
                  series={seriesrow4chart}
                  type="area"
                  height="35px"
                  width="100px"
                />
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    </DashboardCard>
  );
};

export default ProductPerformances;


============================================================
FILE: src/components/dashboards/ecommerce/RecentTransactions.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import DashboardCard from '../../shared/DashboardCard';
import {
  TimelineItem,
  TimelineOppositeContent,
  TimelineSeparator,
  TimelineDot,
  TimelineConnector,
  TimelineContent,
  timelineOppositeContentClasses,
} from '@mui/lab';
import { Link, Typography } from '@mui/material';
import Timeline from '@mui/lab/Timeline';

const RecentTransactions = () => {
  return (
    <DashboardCard title="Recent Transactions">
      <>
        <Timeline
          className="theme-timeline"
          nonce={undefined}
          onResize={undefined}
          onResizeCapture={undefined}
          sx={{
            p: 0,
            mb: '-40px',
            [`& .${timelineOppositeContentClasses.root}`]: {
              flex: 0.5,
              paddingLeft: 0,
            },
          }}
        >
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="primary" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>Payment received from John Doe of $385.90</TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>10:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="secondary" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New sale recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>12:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="success" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>Payment was made of $64.95 to Michael</TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="warning" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New sale recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>09:30 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="error" variant="outlined" />
              <TimelineConnector />
            </TimelineSeparator>
            <TimelineContent>
              <Typography fontWeight="600">New arrival recorded</Typography>{' '}
              <Link href="/" underline="none">
                #ML-3467
              </Link>
            </TimelineContent>
          </TimelineItem>
          <TimelineItem>
            <TimelineOppositeContent>12:00 am</TimelineOppositeContent>
            <TimelineSeparator>
              <TimelineDot color="success" variant="outlined" />
            </TimelineSeparator>
            <TimelineContent>Payment Done</TimelineContent>
          </TimelineItem>
        </Timeline>
      </>
    </DashboardCard>
  );
};

export default RecentTransactions;


============================================================
FILE: src/components/dashboards/ecommerce/RevenueUpdates.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';

const RevenueUpdates: React.FC = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 320,
      offsetX: -20,
      stacked: true,
    },
    colors: [primary, secondary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,

    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      }
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: 'Footware',
      data: [2.5, 3.7, 3.2, 2.6, 1.9],
    },
    {
      name: 'Fashionware',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9],
    },
  ];

  return (
    <DashboardCard
      title="Revenue Updates"
      subtitle="Overview of Profit">
      <>
        <Stack direction="row" spacing={3}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Avatar
              sx={{ width: 9, height: 9, bgcolor: primary, svg: { display: 'none' } }}
            ></Avatar>
            <Box>
              <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
                Footware
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Avatar
              sx={{ width: 9, height: 9, bgcolor: secondary, svg: { display: 'none' } }}
            ></Avatar>
            <Box>
              <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
                Fashionware
              </Typography>
            </Box>
          </Stack>
        </Stack>
        <Box className="rounded-bars">
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="320px" />
        </Box>
      </>
    </DashboardCard>
  );
};

export default RevenueUpdates;


============================================================
FILE: src/components/dashboards/ecommerce/Sales.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography } from '@mui/material';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const Sales = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      width:'100%',
      stacked: true,
      stackType: '100%',
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary, secondary, '#EAEFF4'],
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '50%',
        borderRadius: [3],
        borderRadiusApplication: 'around',
        borderRadiusWhenStacked: 'around',
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
      width: 1,
      colors: ['rgba(0,0,0,0.01)'],
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
      x: {
        show: false,
      },
    },
    responsive: [{ breakpoint: 1025, options: { chart: { height: 150, width: 250 } } }],
  };
  const seriescolumnchart = [
    {
      color: primary,
      name: '',
      data: [25, 35, 20, 25, 40, 25],
    },
    {
      color: secondary,
      name: '',
      data: [35, 40, 20, 35, 40, 35],
    },
    {
      color: '#EAEFF4',
      name: '',
      data: [40, 25, 60, 40, 20, 40],
    },
  ];

  return (
    <DashboardCard>
      <>
        <Typography variant="h4">$65,432</Typography>
        <Typography variant="subtitle2" color="textSecondary" mb={3}>
          Sales
        </Typography>
        <Box className="rounded-bars">
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="90px" />
        </Box>
      </>
    </DashboardCard>
  );
};

export default Sales;


============================================================
FILE: src/components/dashboards/ecommerce/SalesOverview.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Box } from '@mui/material';
import { IconGridDots } from '@tabler/icons-react';
import { Props } from 'react-apexcharts';

import DashboardCard from '../../shared/DashboardCard';

const SalesOverview = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const primarylight = theme.palette.primary.light;
  const textColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : '#2A3547';

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 275,
    },
    labels: ["Profit", "Revenue", "Expance"],
    colors: [primary, primarylight, secondary],
    plotOptions: {
      pie: {
        
        donut: {
          size: '89%',
          background: 'transparent',

          labels: {
            show: true,
            name: {
              show: true,
              offsetY: 7,
            },
            value: {
              show: false,
            },
            total: {
              show: true,
              color: textColor,
              fontSize: '20px',
              fontWeight: '600',
              label: '$500,458',
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [55, 55, 55];

  return (
    <DashboardCard title="Sales Overview" subtitle="Every month">
      <>
        <Box mt={3}>
          <Chart
            options={optionscolumnchart}
            series={seriescolumnchart}
            type="donut"
            height="275px"
          />
        </Box>

        <Stack direction="row" spacing={2} justifyContent="space-between" mt={7}>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="primary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="h6" fontWeight="600">
                $23,450
              </Typography>
              <Typography variant="subtitle2" color="textSecondary">
                Profit
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="secondary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="secondary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="h6" fontWeight="600">
                $23,450
              </Typography>
              <Typography variant="subtitle2" color="textSecondary">
                Expance
              </Typography>
            </Box>
          </Stack>
        </Stack>
      </>
    </DashboardCard>
  );
};

export default SalesOverview;


============================================================
FILE: src/components/dashboards/ecommerce/SalesTwo.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Typography } from '@mui/material';

import DashboardCard from '../../shared/DashboardCard';
import { Props } from 'react-apexcharts';
import { IconArrowUpRight, IconShoppingCart } from '@tabler/icons-react';

const SalesTwo = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 25,
      resize: true,
      barColor: '#fff',
      offsetX: -15,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],
    grid: {
      show: false,
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '100%',
        borderRadius: 3,
        distributed: true,
    }
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 5,
      colors: ['rgba(0,0,0,0.01)']
  },
    xaxis: {
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    axisBorder: {
      show: false,
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      x: {
        show: false,
      },
      responsive: [
        {
            breakpoint: 767,
            options: {
                chart: { height: 60 },
                plotOptions: {
                    bar: { columnWidth: "60%" }
                }
                
            }
        }
    ],
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [100, 60, 35, 90, 35, 100]
    },
  ];

  return (
    <DashboardCard>
      <>
        <Box
          width={38}
          height={38}
          bgcolor="primary.light"
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <Typography
            color="primary.main"
            display="flex"
            alignItems="center"
            justifyContent="center"
          >
            <IconShoppingCart width={22} />
          </Typography>
        </Box>

        <Box mt={3} mb={2}>
          <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="25px" />
        </Box>

        <Typography variant="h4">$16.5k<span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
        <Typography variant="subtitle2" color="textSecondary">
          Sales
        </Typography>
      </>
    </DashboardCard>
  );
};

export default SalesTwo;


============================================================
FILE: src/components/dashboards/ecommerce/WelcomeCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Avatar, Typography, Card, CardContent, Grid2 as Grid, Divider, Stack } from '@mui/material';
import { IconArrowUpRight } from '@tabler/icons-react';

import welcomeImg from 'src/assets/images/backgrounds/welcome-bg2.png';
import userImg from 'src/assets/images/profile/user-1.jpg';

const WelcomeCard = () => {
  return (
    (<Card elevation={0} sx={{ backgroundColor: (theme) => theme.palette.primary.light, py: 0 }}>
      <CardContent sx={{ py: 4, px: 2 }}>
        <Grid container justifyContent="space-between">
          <Grid
            display="flex"
            alignItems="center"
            size={{
              sm: 6
            }}>
            <Box>
              <Box
                gap="16px" mb={5}
                sx={{
                  display: {
                    xs: 'block',
                    sm: 'flex',
                  },
                  alignItems: 'center',
                }}
              >
                <Avatar src={userImg} alt="img" sx={{ width: 40, height: 40 }} />
                <Typography variant="h5" whiteSpace="nowrap">
                  Welcome back Mathew Anderson!
                </Typography>
              </Box>

              <Stack spacing={2} direction="row" divider={<Divider orientation="vertical" flexItem />}>
                <Box>
                  <Typography variant="h2" whiteSpace="nowrap">$2,340 <span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
                  <Typography variant="subtitle1" whiteSpace="nowrap">Today’s Sales</Typography>
                </Box>
                <Box>
                  <Typography variant="h2" whiteSpace="nowrap">35%<span><IconArrowUpRight width={18} color="#39B69A" /></span></Typography>
                  <Typography variant="subtitle1" whiteSpace="nowrap">Performance</Typography>
                </Box>
              </Stack>
            </Box>
          </Grid>
          <Grid
            size={{
              sm: 6
            }}>
            <Box mb="-88px" textAlign="right">
              <img src={welcomeImg} alt={welcomeImg} width={'300px'} />
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>)
  );
};

export default WelcomeCard;


============================================================
FILE: src/components/dashboards/ecommerce/YearlySales.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';

import DashboardWidgetCard from '../../shared/DashboardWidgetCard';
import { Props } from 'react-apexcharts';

const YearlySales = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.grey[100];

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 295,
    },
    colors: [primarylight, primarylight, primary, primarylight, primarylight, primarylight],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '45%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    xaxis: {
      categories: [['Apr'], ['May'], ['June'], ['July'], ['Aug'], ['Sept']],
      axisBorder: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10, 15],
    },
  ];

  return (
    <DashboardWidgetCard
      title="Yearly Sales"
      subtitle="Total Sales"
      dataLabel1="Salary"
      dataItem1="$36,358"
      dataLabel2="Expance"
      dataItem2="$5,296"
    >
      <>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="295px" />
      </>
    </DashboardWidgetCard>
  );
};

export default YearlySales;


============================================================
FILE: src/components/forms/theme-elements/CustomCheckbox.tsx
============================================================

import { styled } from '@mui/material/styles';
import Checkbox, { CheckboxProps } from '@mui/material/Checkbox';
import React from 'react';
const BpIcon = styled('span')(({ theme }) => ({
  borderRadius: 3,
  width: 19,
  height: 19,
  marginLeft: '4px',
  boxShadow:
    theme.palette.mode === 'dark'
      ? `0 0 0 1px ${theme.palette.grey[200]}`
      : `inset 0 0 0 1px ${theme.palette.grey[300]}`,
  backgroundColor: 'transparent',

  '.Mui-focusVisible &': {
    outline:
      theme.palette.mode === 'dark'
        ? `0px auto ${theme.palette.grey[200]}`
        : `0px auto  ${theme.palette.grey[300]}`,
    outlineOffset: 2,
  },
  'input:hover ~ &': {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,
  },
  'input:disabled ~ &': {
    boxShadow: 'none',
    background: theme.palette.grey[100],
  },
}));

const BpCheckedIcon = styled(BpIcon)({
  boxShadow: 'none',
  width: 19,
  height: 19,
  '&:before': {
    display: 'block',
    width: 19,
    height: 19,
    backgroundImage:
      "url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath" +
      " fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 " +
      "1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\")",
    content: '""',
  },
});

// Use React.forwardRef to forward the ref
const CustomCheckbox = React.forwardRef<HTMLButtonElement, CheckboxProps>((props, ref) => (
  <Checkbox
    disableRipple
    color={props.color || 'default'}
    checkedIcon={
      <BpCheckedIcon
        sx={{
          backgroundColor: props.color ? `${props.color}.main` : 'primary.main',
        }}
      />
    }
    icon={<BpIcon />}
    inputProps={{ 'aria-label': 'Checkbox demo' }}
    ref={ref}
    {...props}
  />
));

// Set displayName to help with debugging
CustomCheckbox.displayName = 'CustomCheckbox';


export default CustomCheckbox;

============================================================
FILE: src/components/forms/theme-elements/CustomFormLabel.tsx
============================================================
'use client'

import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';

const CustomFormLabel = styled((props: any) => (
  <Typography
    variant="subtitle1"
    fontWeight={600}
    {...props}
    component="label"
    htmlFor={props.htmlFor}
  />
))(() => ({
  marginBottom: '5px',
  marginTop: '25px',
  display: 'block',
}));

export default CustomFormLabel;


============================================================
FILE: src/components/forms/theme-elements/CustomTextField.tsx
============================================================
'use client'

import { styled } from '@mui/material/styles';
import { TextField } from '@mui/material';

const CustomTextField = styled((props: any) => <TextField {...props} />)(({ theme }) => ({
  '& .MuiOutlinedInput-input::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '0.8',
  },
  '& .MuiOutlinedInput-input.Mui-disabled::-webkit-input-placeholder': {
    color: theme.palette.text.secondary,
    opacity: '1',
  },
  '& .Mui-disabled .MuiOutlinedInput-notchedOutline': {
    borderColor: theme.palette.grey[200],
  },
}));

export default CustomTextField;


============================================================
FILE: src/components/shared/AppCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  children: any | any[]
};

const AppCard = ({ children }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  return (
    <Card
      sx={{ display: 'flex', p: 0 }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {children}
    </Card>
  );
};

export default AppCard;


============================================================
FILE: src/components/shared/BaseCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card, CardHeader, CardContent, Divider } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title: string;
  children: any | any[]
};

const BaseCard = ({ title, children }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  return (
    <Card
      sx={{ padding: 0 }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader title={title} />
      <Divider />
      <CardContent>{children}</CardContent>
    </Card>
  );
};

export default BaseCard;


============================================================
FILE: src/components/shared/BlankCard.tsx
============================================================
import { Card } from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { AppState, useSelector } from 'src/store/Store';

type Props = {
  className?: string;
  children: any | any[]
  sx?: any;
};

const BlankCard = ({ children, className, sx }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ p: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none', position: 'relative', sx }}
      className={className}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {children}
    </Card>
  );
};

export default BlankCard;


============================================================
FILE: src/components/shared/ChildCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card, CardHeader, CardContent, Divider } from '@mui/material';

type Props = {
  title?: string;
  children: any | any[]
  codeModel?: any | any[]
};

const ChildCard = ({ title, children, codeModel }: Props) => (
  <Card sx={{ padding: 0, borderColor: (theme: any) => theme.palette.divider }} variant="outlined">
    {title ? (
      <>
        <CardHeader title={title} action={codeModel} />
        <Divider />{' '}
      </>
    ) : (
      ''
    )}

    <CardContent>{children}</CardContent>
  </Card>
);

export default ChildCard;


============================================================
FILE: src/components/shared/CodeDialog.tsx
============================================================
import React from "react";
import { IconCode, IconX } from "@tabler/icons-react";
import SyntaxHighlighter from "react-syntax-highlighter";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

import Dialog from "@mui/material/Dialog";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import Tooltip from "@mui/material/Tooltip";
import IconButton from "@mui/material/IconButton";
import Box from "@mui/material/Box";

const CodeDialog = ({ children }: any) => {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };
  return (
    <div>
      <Tooltip title="View Code" placement="top">
        <IconButton color="inherit" onClick={handleClickOpen}>
          <IconCode size="18" />
        </IconButton>
      </Tooltip>
      <Dialog
        open={open}
        sx={{
          ".MuiPaper-root" : {
            minWidth: "700px"
          }
        }}
        onClose={handleClose} 
      >
        <DialogTitle>
          <Box
            display="flex"
            alignItems="center"
            justifyContent="space-between"
          >
            Sample Code
            <IconButton aria-label="close" onClick={handleClose}>
              <IconX />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent className="code-dialog">
          <SyntaxHighlighter language="typescript" style={docco}>
            {children}
          </SyntaxHighlighter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CodeDialog;


============================================================
FILE: src/components/shared/DashboardCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Stack, Box } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title?: string;
  subtitle?: string;
  action?: any;
  footer?: any;
  cardheading?: string | any;
  headtitle?: string | any;
  headsubtitle?: string | any;
  children?: any;
  middlecontent?: string | any;
};

const DashboardCard = ({
  title,
  subtitle,
  children,
  action,
  footer,
  cardheading,
  headtitle,
  headsubtitle,
  middlecontent,
}: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {cardheading ? (
        <CardContent>
          <Typography variant="h5">{headtitle}</Typography>
          <Typography variant="subtitle2" color="textSecondary">
            {headsubtitle}
          </Typography>
        </CardContent>
      ) : (
        <CardContent sx={{ p: "30px" }}>
          {title ? (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems={'center'}
              mb={3}
            >
              <Box>
                {title ? <Typography variant="h5">{title}</Typography> : ''}

                {subtitle ? (
                  <Typography variant="subtitle2" color="textSecondary">
                    {subtitle}
                  </Typography>
                ) : (
                  ''
                )}
              </Box>
              {action}
            </Stack>
          ) : null}

          {children}
        </CardContent>
      )}

      {middlecontent}
      {footer}
    </Card>
  );
};

export default DashboardCard;


============================================================
FILE: src/components/shared/DashboardWidgetCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Box, Stack } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';
import { IconGridDots } from '@tabler/icons-react';

type Props = {
  title: string;
  subtitle: string;
  dataLabel1: string;
  dataItem1: string;
  dataLabel2: string;
  dataItem2: string;
  children: any;
};

const DashboardWidgetCard = ({
  title,
  subtitle,
  children,
  dataLabel1,
  dataItem1,
  dataLabel2,
  dataItem2,
}: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardContent sx={{ p: '30px' }}>
        {title ? (
          <Box>
            {title ? <Typography variant="h5">{title}</Typography> : ''}

            {subtitle ? (
              <Typography variant="subtitle2" color="textSecondary">
                {subtitle}
              </Typography>
            ) : (
              ''
            )}
          </Box>
        ) : null}

        {children}

        <Stack direction="row" spacing={2} justifyContent="space-between" mt={2}>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="primary.light"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="primary.main"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" color="textSecondary">
                {dataLabel1}
              </Typography>
              <Typography variant="h6" fontWeight="600">
                {dataItem1}
              </Typography>
            </Box>
          </Stack>
          <Stack direction="row" spacing={2} alignItems="center">
            <Box
              width={38}
              height={38}
              bgcolor="grey.200"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Typography
                color="grey.400"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <IconGridDots width={22} />
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" color="textSecondary">
                {dataLabel2}
              </Typography>
              <Typography variant="h6" fontWeight="600">
                {dataItem2}
              </Typography>
            </Box>
          </Stack>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default DashboardWidgetCard;


============================================================
FILE: src/components/shared/DownloadCard.tsx
============================================================
import { useTheme } from '@mui/material/styles';
import { Card, CardHeader, Tooltip, Divider, IconButton } from '@mui/material';
import { useSelector } from 'react-redux';
import { IconDownload } from '@tabler/icons-react';

const DownloadCard = ({ title, children, onDownload }: any) => {
  const customizer = useSelector((state: any) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader
        sx={{
          padding: '16px',
        }}
        title={title}
        action={
          <Tooltip title="Download" placement="left">
            <IconButton onClick={onDownload}>
              <IconDownload />
            </IconButton>
          </Tooltip>
        }
      />
      <Divider />
      {children}
    </Card>
  );
};

export default DownloadCard;


============================================================
FILE: src/components/shared/InlineItemCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Box } from '@mui/material';

type Props = {
  children: any | any[];
};

const InlineItemCard = ({ children }: Props) => (
  <Box
    sx={{
      display: {
        xs: 'flex',
        sm: 'inline-block',
      },
      flexDirection: {
        xs: 'column',
        sm: 'unset',
      },
      '.MuiChip-root, .MuiButton-root': {
        m: '5px',
      },
    }}
  >
    {children}
  </Box>
);

export default InlineItemCard;


============================================================
FILE: src/components/shared/ParentCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardHeader, CardContent, Divider, Box } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title: string;
  footer?: string | any;
  codeModel?: any | any[]
  children: any;
};

const ParentCard = ({ title, children, footer, codeModel }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.divider;

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader title={title} action={codeModel} />
      <Divider />

      <CardContent>{children}</CardContent>
      {footer ? (
        <>
          <Divider />
          <Box p={3}>{footer}</Box>
        </>
      ) : (
        ''
      )}
    </Card>
  );
};

export default ParentCard;


============================================================
FILE: src/components/shared/ScrollToTop.tsx
============================================================
import { useEffect, ReactElement } from 'react';
import { useLocation } from 'react-router';

export default function ScrollToTop({ children }: { children: ReactElement | null }) {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    });
  }, [pathname]);

  return children || null;
}


============================================================
FILE: src/components/shared/ThreeColumn.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Button, Box, Drawer, useMediaQuery, Paper, Theme } from '@mui/material';


const drawerWidth = 240;
const secdrawerWidth = 320;

type Props = {
  middleChild: any | string;
  leftChild: any | string;
  rightChild: any;
};

const ThreeColumn = ({ leftChild, middleChild, rightChild }: Props) => {
  const [isLeftSidebarOpen, setLeftSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setRightSidebarOpen] = useState(false);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const mdUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('md'));

  return (
    <Paper sx={{ display: 'flex', p: 0 }} variant="outlined">
      {/* ------------------------------------------- */}
      {/* Left Part */}
      {/* ------------------------------------------- */}

      <Drawer
        open={isLeftSidebarOpen}
        onClose={() => setLeftSidebarOpen(false)}
        sx={{
          width: drawerWidth,
          [`& .MuiDrawer-paper`]: { width: drawerWidth, position: 'relative' },
          flexShrink: 0,
        }}
        variant={lgUp ? 'permanent' : 'temporary'}
      >
        {leftChild}
      </Drawer>
      {/* ------------------------------------------- */}
      {/* Middle part */}
      {/* ------------------------------------------- */}
      <Box
        sx={{
          minWidth: secdrawerWidth,
          width: { xs: '100%', md: secdrawerWidth, lg: secdrawerWidth },
          flexShrink: 0,
        }}
      >
        {middleChild}
      </Box>
      {/* ------------------------------------------- */}
      {/* Right part */}
      {/* ------------------------------------------- */}
      <Drawer
        anchor="right"
        open={isRightSidebarOpen}
        onClose={() => setRightSidebarOpen(false)}
        sx={{
          flexShrink: 0,
          width: drawerWidth,
          flex: mdUp ? 'auto' : '',
          [`& .MuiDrawer-paper`]: { width: '100%', position: 'relative' },
        }}
        variant={mdUp ? 'permanent' : 'temporary'}
      >
        {/* back btn Part */}
        {mdUp ? (
          ''
        ) : (
          <Box sx={{ p: 3 }}>
            <Button
              variant="outlined"
              color="primary"
              size="small"
              onClick={() => setRightSidebarOpen(false)}
              sx={{ mb: 3, display: { xs: 'block', md: 'none', lg: 'none' } }}
            >
              Back{' '}
            </Button>
          </Box>
        )}
        {rightChild}
      </Drawer>
    </Paper>
  );
};

export default ThreeColumn;


============================================================
FILE: src/components/widgets/banners/code/EmptyCartCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const EmptyCartCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner5 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={"/images/products/empty-shopping-cart.svg"} width={200} />

          <Typography variant="h5" mt={3}>Oop, Your cart is empty!</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Get back to shopping and get<br /> rewards from it.
          </Typography>

          <Button color="primary" variant="contained" size="large">
            Go for shopping!
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner5;

`}
      </CodeDialog>
    </>
  );
};

export default EmptyCartCode;


============================================================
FILE: src/components/widgets/banners/code/ErrorBannerCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const ErrorBannerCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner4 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={"/images/backgrounds/maintenance2.svg"} alt="star" width={200} />

          <Typography variant="h5" mt={3}>Oops something went wrong!</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Trying again to bypasses these<br /> temporary error.
          </Typography>

          <Button color="error" variant="contained" size="large">
            Retry
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner4;
`}
      </CodeDialog>
    </>
  );
};

export default ErrorBannerCode;


============================================================
FILE: src/components/widgets/banners/code/FriendCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const FriendCard = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Avatar, Badge, Card } from '@mui/material';
import { Box, Stack } from '@mui/system';

const Banner3 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5" textAlign="center" mb={3}>
          Mutual Friend Revealed
        </Typography>
        <Box textAlign="center">
          <Badge badgeContent={1} color="error" overlap="circular">
            <Avatar src={"/images/profile/user-3.jpg"} alt="userBg" sx={{ width: 140, height: 140 }} />
          </Badge>

          <Typography variant="h5" mt={3}>
            Tommoie Henderson
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Accept the request and <br/> type a message
          </Typography>

          <Stack direction="row" spacing={2} justifyContent="center">
            <Button color="primary" variant="contained" size="large">
              Accept
            </Button>
            <Button color="error" variant="outlined" size="large">
              Remove
            </Button>
          </Stack>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner3;
`}
      </CodeDialog>
    </>
  );
};

export default FriendCard;


============================================================
FILE: src/components/widgets/banners/code/NotificationCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const NotificationCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Button, Card } from '@mui/material';
import { Box } from '@mui/system';

const Banner2 = () => {
  return (
    <Card>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="subtitle1" textAlign="center" mb={2} textTransform="uppercase" color="textSecondary">
          Level Up
        </Typography>
        <Box textAlign="center">
          <img src={"/images/backgrounds/gold.png"} alt="star" width={150} />

          <Typography variant="h5">You reach all Notifications</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>Congratulations,<br/> Tap to continue next task.</Typography>

          <Button color="primary" variant="contained" size="large">
            Yes, Got it!
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export default Banner2;
`}
      </CodeDialog>
    </>
  );
};

export default NotificationCode;


============================================================
FILE: src/components/widgets/banners/code/TransectionCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const Transection = () => {
  return (
    <>
      <CodeDialog>
        {`
import { Card, CardContent, Typography, Button, Box, Grid2 as Grid } from '@mui/material';

const Banner1 = () => {
  return (
    <Card
      elevation={0}
      sx={{
        backgroundColor: (theme) => theme.palette.secondary.light,
        py: 0,
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <CardContent sx={{ p: '30px' }}>
        <Grid container spacing={3} justifyContent="space-between">
          <Grid
              display="flex"
              alignItems="center"
              size={{
                sm: 6
              }}>
            <Box
              sx={{
                textAlign: {
                  xs: 'center',
                  sm: 'left',
                },
              }}
            >
              <Typography variant="h5">Track your every Transaction Easily</Typography>
              <Typography variant="subtitle1" color="textSecondary" my={2}>
                Track and record your every income and expence easily to control your balance
              </Typography>
              <Button variant="contained" color="secondary">
                Download
              </Button>
            </Box>
          </Grid>
          <Grid
              size={{
                sm: 4
              }}>
            <Box mb="-90px">
              <img src={"/images/backgrounds/track-bg.png"} alt={"trackBg"} />
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default Banner1;
`}
      </CodeDialog>
    </>
  );
};

export default Transection;


============================================================
FILE: src/components/widgets/banners/Banner1.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Card, CardContent, Typography, Button, Box, Grid2 as Grid } from '@mui/material';
import trackBg from 'src/assets/images/backgrounds/login-bg.svg';
import ParentCard from '../../shared/ParentCard';

import Transection from './code/TransectionCode';

const Banner1 = () => {
  return (
    (<ParentCard title='Transection' codeModel={<Transection />}>
      <Card
        elevation={0}
        sx={{
          backgroundColor: (theme) => theme.palette.secondary.light,
          py: 0,
          overflow: 'hidden',
          position: 'relative',
        }}
      >
        <CardContent sx={{ p: '30px' }}>
          <Grid container spacing={3} justifyContent="space-between">
            <Grid
              display="flex"
              alignItems="center"
              size={{
                sm: 6
              }}>
              <Box
                sx={{
                  textAlign: {
                    xs: 'center',
                    sm: 'left',
                  },
                }}
              >
                <Typography variant="h5">Track your every Transaction Easily</Typography>
                <Typography variant="subtitle1" color="textSecondary" my={2}>
                  Track and record your every income and expence easily to control your balance
                </Typography>
                <Button variant="contained" color="secondary">
                  Download
                </Button>
              </Box>
            </Grid>
            <Grid
              size={{
                sm: 4
              }}>
              <Box mb="-90px">
                <img src={trackBg} alt={trackBg} />
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </ParentCard>)
  );
};

export default Banner1;


============================================================
FILE: src/components/widgets/banners/Banner2.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import starBg from 'src/assets/images/backgrounds/gold.png';
import ParentCard from '../../shared/ParentCard';

import NotificationCode from './code/NotificationCode';

const Banner2 = () => {
  return (
    <ParentCard title='Notification' codeModel={<NotificationCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="subtitle1" textAlign="center" mb={2} textTransform="uppercase" color="textSecondary">
          Level Up
        </Typography>
        <Box textAlign="center">
          <img src={starBg} alt="star" width={150} />

          <Typography variant="h5">You reach all Notifications</Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>Congratulations,<br/> Tap to continue next task.</Typography>

          <Button color="primary" variant="contained" size="large">
            Yes, Got it!
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner2;


============================================================
FILE: src/components/widgets/banners/Banner3.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Avatar, Badge, Box, Stack } from '@mui/material';
import userBg from 'src/assets/images/profile/user-1.jpg';
import ParentCard from '../../shared/ParentCard';

import FriendCardCode from './code/FriendCardCode';

const Banner3 = () => {
  return (
    <ParentCard title='Friend Card' codeModel={<FriendCardCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5" textAlign="center" mb={3}>
          Mutual Friend Revealed
        </Typography>
        <Box textAlign="center">
          <Badge badgeContent={1} color="error" overlap="circular">
            <Avatar src={userBg} alt="userBg" sx={{ width: 140, height: 140 }} />
          </Badge>

          <Typography variant="h5" mt={3}>
            Tommoie Henderson
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Accept the request and <br/> type a message
          </Typography>

          <Stack direction="row" spacing={2} justifyContent="center">
            <Button color="primary" variant="contained" size="large">
              Accept
            </Button>
            <Button color="error" variant="outlined" size="large">
              Remove
            </Button>
          </Stack>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner3;


============================================================
FILE: src/components/widgets/banners/Banner4.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import oopsBg from 'src/assets/images/backgrounds/maintenance.svg';
import ParentCard from 'src/components/shared/ParentCard';

import ErrorBannerCode from './code/ErrorBannerCode';

const Banner4 = () => {
  return (
    <ParentCard title='Error' codeModel={<ErrorBannerCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={oopsBg} alt="star" width={200} />

          <Typography variant="h5" mt={3}>
            Oops something went wrong!
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Trying again to bypasses these
            <br /> temporary error.
          </Typography>

          <Button color="error" variant="contained" size="large">
            Retry
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner4;


============================================================
FILE: src/components/widgets/banners/Banner5.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Button, Box } from '@mui/material';
import shopBg from 'src/assets/images/products/empty-shopping-cart.svg';
import ParentCard from '../../shared/ParentCard';

import EmptyCartCode from './code/EmptyCartCode';

const Banner5 = () => {
  return (
    <ParentCard title='Empty Cart' codeModel={<EmptyCartCode />}>
      <CardContent sx={{ p: '30px' }}>
        <Box textAlign="center">
          <img src={shopBg} alt="star" width={200} />

          <Typography variant="h5" mt={3}>
            Oop, Your cart is empty!
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" mt={1} mb={2}>
            Get back to shopping and get
            <br /> rewards from it.
          </Typography>

          <Button color="primary" variant="contained" size="large">
            Go for shopping!
          </Button>
        </Box>
      </CardContent>
    </ParentCard>
  );
};

export default Banner5;


============================================================
FILE: src/components/widgets/cards/code/ComplexCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const ComplexCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import {
  CardContent,
  Typography,
  Avatar,
  Grid2 as Grid,
  Card
  CardMedia,
  Stack,
  Tooltip,
  Chip,
  Box,
} from '@mui/material';
import { IconMessage2, IconEye, IconPoint } from '@tabler/icons-react';

const complexCard = [
  {
    avatar: "/images/profile/user-4.jpg",
    coveravatar: "/images/blog/blog-img1.jpg",
    title: 'As yen tumbles, gadget-loving Japan goes for secondhand iPhones',
    category: 'Social',
    name: 'Georgeanna Ramero',
    view: '9,125',
    comments: '3',
    time: 'Mon, Dec 19',
  },
  {
    avatar: "/images/profile/user-5.jpg",
    coveravatar: "/images/blog/blog-img2.jpg",
    title: 'Intel loses bid to revive antitrust case against patent foe Fortress',
    category: 'Gadget',
    name: 'Georgeanna Ramero',
    view: '4,150',
    comments: '38',
    time: 'Sun, Dec 18',
  },
  {
    avatar: "/images/profile/user-3.jpg",
    coveravatar: "/images/blog/blog-img3.jpg",
    title: 'COVID outbreak deepens as more lockdowns loom in China',
    category: 'Health',
    name: 'Georgeanna Ramero',
    view: '9,480',
    comments: '12',
    time: 'Sat, Dec 17',
  },
];

const ComplexCard = () => {
  return (
      <Grid container spacing={3}>
        {complexCard.map((author, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card>
              <>
                <Typography component={Link} href="/">
                  <CardMedia
                    component="img"
                    height="240"
                    image={author.coveravatar}
                    alt="green iguana"
                  />
                </Typography>
                <CardContent>
                  <Stack direction="row" sx={{ marginTop: '-45px' }}>
                    <Tooltip title={author.name} placement="top">
                      <Avatar aria-label="recipe" src={author.avatar}></Avatar>
                    </Tooltip>
                    <Chip
                      sx={{ marginLeft: 'auto', marginTop: '-21px', backgroundColor: 'white' }}
                      label="2 min Read"
                      size="small"
                    ></Chip>
                  </Stack>
                  <Chip label={author.category} size="small" sx={{ marginTop: 2 }}></Chip>
                  <Box my={3}>
                    <Typography
                      gutterBottom
                      variant="h5"
                      color="inherit"
                      sx={{ textDecoration: 'none' }}
                      component={Link}
                      to="/"
                    >
                      {author.title}
                    </Typography>
                  </Box>
                  <Stack direction="row" gap={3} alignItems="center">
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconEye size="18" /> {author.view}
                    </Stack>
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconMessage2 size="18" /> {author.comments}
                    </Stack>

                    <Stack direction="row" ml="auto" alignItems="center">
                      <IconPoint size="16" />
                      <small>{author.time}</small>
                    </Stack>
                  </Stack>
                </CardContent>
              </>
            </Card>
          </Grid>
        ))}
      </Grid>
  );
};

export default ComplexCard;
`}
      </CodeDialog>
    </>
  );
};

export default ComplexCardCode;


============================================================
FILE: src/components/widgets/cards/code/EcommerceCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const EcommerceCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import { CardContent, Typography, Grid2 as Grid, Rating, Tooltip, Fab, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconBasket } from '@tabler/icons-react';
import Image from 'next/image';

const ecoCard = [
  {
    title: 'Boat Headphone',
    subheader: 'September 14, 2023',
    photo: "/images/products/s4.jpg",
    salesPrice: 375,
    price: 285,
    rating: 4,
  },
  {
    title: 'MacBook Air Pro',
    subheader: 'September 14, 2023',
    photo: "/images/products/s5.jpg",
    salesPrice: 650,
    price: 900,
    rating: 5,
  },
  {
    title: 'Red Valvet Dress',
    subheader: 'September 14, 2023',
    photo: "/images/products/s7.jpg",
    salesPrice: 150,
    price: 200,
    rating: 3,
  },
  {
    title: 'Cute Soft Teddybear',
    subheader: 'September 14, 2023',
    photo: "/images/products/s11.jpg",
    salesPrice: 285,
    price: 345,
    rating: 2,
  },
];

const EcommerceCard = () => {
  return (
    <Grid container spacing={3}>
      {ecoCard.map((product, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4,
              lg: 3
            }}>
          <Card>
            <Typography component={Link} href="/">
              <Image src={product.photo} alt="img" width={250} height={268} style={{width: '100%'}} />
            </Typography>
            <Tooltip title="Add To Cart">
              <Fab
                size="small"
                color="primary"
                sx={{ bottom: '75px', right: '15px', position: 'absolute' }}
              >
                <IconBasket size="16" />
              </Fab>
            </Tooltip>
            <CardContent sx={{ p: 3, pt: 2 }}>
              <Typography variant="h6">{product.title}</Typography>
              <Stack direction="row" alignItems="center" justifyContent="space-between" mt={1}>
                <Stack direction="row" alignItems="center">
                  <Typography variant="h6">{product.price}</Typography>
                  <Typography color="textSecondary" ml={1} sx={{ textDecoration: 'line-through' }}>
                    {product.salesPrice}
                  </Typography>
                </Stack>
                <Rating name="read-only" size="small" value={product.rating} readOnly />
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default EcommerceCard;

`}
      </CodeDialog>
    </>
  );
};

export default EcommerceCardCode;


============================================================
FILE: src/components/widgets/cards/code/FollowerCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const FollowerCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Avatar, Box, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconMapPin } from '@tabler/icons-react';

const followerCard = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: "/images/profile/user-4.jpg",
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: "/images/profile/user-2.jpg",
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: "/images/profile/user-3.jpg",
  },
];

const FollowerCard = () => {
  return (
    <Grid container spacing={3}>
      {followerCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
          <Card>
            <CardContent>
              <Stack direction="row" spacing={2} alignItems="center" justifyContent="space-between">
                <Stack direction="row" spacing={2}>
                  <Avatar src={card.avatar} alt={card.avatar} />
                  <Box>
                    <Typography variant="h6">{card.title}</Typography>
                    <Typography
                      variant="subtitle1"
                      color="textSecondary"
                      display="flex"
                      alignItems="center"
                      gap="3px"
                    >
                      <IconMapPin width={18} /> {card.location}
                    </Typography>
                  </Box>
                </Stack>
                <Button variant="contained" color="primary">
                  Follow
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default FollowerCard;
`}
      </CodeDialog>
    </>
  );
};

export default FollowerCardCode;


============================================================
FILE: src/components/widgets/cards/code/FriendCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const FriendCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Box, AvatarGroup, Avatar, Card } from '@mui/material';
import { Stack } from '@mui/system';

const followerCard = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: "/images/profile/user-5.jpg",
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: "/images/profile/user-2.jpg",
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: "/images/profile/user-3.jpg",
  },
  {
    title: 'Lora Powers',
    location: 'Nepal',
    avatar: "/images/profile/user-2.jpg",
  },
];

const FriendCard = () => {
  return (
    <Grid container spacing={3}>
      {followerCard.map((card, index) => (
        <Grid item xs={12} sm={6} lg={3} key={index}>
          <Card>
            <CardContent>
              <Avatar src={card.avatar} sx={{ height: 80, width: 80 }}></Avatar>
              <Stack direction="row" spacing={2} mt={3}>
                <Box>
                  <Typography variant="h6" mb={1}>
                    {card.title}
                  </Typography>
                  <Stack direction="row" spacing={2} alignItems="center">
                    <AvatarGroup>
                      <Avatar sx={{ height: 28, width: 28 }} alt="Remy Sharp" src={"/images/profile/user-4.jpg"} />
                      <Avatar sx={{ height: 28, width: 28 }} alt="Travis Howard" src={"/images/profile/user-2.jpg"} />
                      <Avatar sx={{ height: 28, width: 28 }} alt="Cindy Baker" src={"/images/profile/user-3.jpg"} />
                    </AvatarGroup>
                    <Typography variant="subtitle2" color="textSecondary">
                      3 mutual friends
                    </Typography>
                  </Stack>
                </Box>
              </Stack>
              <Stack spacing={2} mt={3}>
                <Button size="large" variant="text" color="primary">
                  Add Friend
                </Button>
                <Button size="large" variant="text" color="secondary">
                  Remove
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default FriendCard;
`}
      </CodeDialog>
    </>
  );
};

export default FriendCardCode;


============================================================
FILE: src/components/widgets/cards/code/GiftCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const GiftCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, CardMedia, IconButton, Card } from '@mui/material';
import { Stack } from '@mui/system';
import { IconGift } from '@tabler/icons-react';

const giftCard = [
  {
    title: 'Andrew Grant',
    avatar: "/images/products/s1.jpg",
  },
  {
    title: 'Leo Pratt',
    avatar: "/images/products/s2.jpg",
  },
];

const GiftCard = () => {
  return (
    <Grid container spacing={3}>
      {giftCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6
            }}>
          <Card>
            <CardContent>
              <Stack direction="row" alignItems="center" justifyContent="space-between" spacing={2}>
                <Typography variant="h6" mb={1}>
                  {card.title}
                </Typography>

                <IconButton color="secondary">
                  <IconGift width={20} />
                </IconButton>
              </Stack>
              <CardMedia component="img" image={card.avatar} sx={{ height: 160, borderRadius: 2 }} />

              <Stack spacing={2} mt={3}>
                <Button size="large" variant="contained" color="primary">
                  Gift to Friend ($50.00)
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default GiftCard;
`}
      </CodeDialog>
    </>
  );
};

export default GiftCardCode;


============================================================
FILE: src/components/widgets/cards/code/MusicCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const MusicCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Card, CardMedia, Box, IconButton, Stack, Skeleton } from '@mui/material';
import { IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';

const musicCard = [
  {
    title: 'Uptown Funk',
    subheader: 'Jon Bon Jovi',
    img: "/images/blog/blog-img5.jpg",
  },
  {
    title: 'Blank Space',
    subheader: 'Madonna',
    img: "/images/blog/blog-img4.jpg",
  },
  {
    title: 'Lean On',
    subheader: 'Jennifer Lopez',
    img: "/images/blog/blog-img3.jpg",
  },
];

const MusicCard = () => {
  return (
    <Grid container spacing={3}>
        {musicCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card sx={{ display: 'flex', p: 0 }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flex: '1 0 auto' }}>
                  <Typography component="div" variant="h5">
                    {card.title}
                  </Typography>
                  <Typography variant="subtitle1" color="text.secondary" component="div">
                    {card.subheader}
                  </Typography>
                </CardContent>
                <Stack direction="row" spacing={2} px={2} pb={3}>
                  <IconButton aria-label="previous">
                    <IconPlayerSkipBack width="20" />
                  </IconButton>
                  <IconButton aria-label="play/pause" color="error">
                    <IconPlayerPlay width="20" />
                  </IconButton>
                  <IconButton aria-label="next">
                    <IconPlayerSkipForward width="20" />
                  </IconButton>
                </Stack>
              </Box>
              {isLoading ? (
                <Skeleton variant="rectangular" animation="wave" width="100%" height={180}></Skeleton>
              ) : (
                <CardMedia
                  component="img"
                  sx={{ width: '100%', height: 180 }}
                  image={card.img}
                  alt="Live from space album cover"
                />
              )}
            </Card>
          </Grid>
        ))}
      </Grid>
  );
};

export default MusicCard;
`}
      </CodeDialog>
    </>
  );
};

export default MusicCardCode;


============================================================
FILE: src/components/widgets/cards/code/ProfileCardCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const ProfileCardCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, IconButton, Divider, Avatar, Box, Card } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { Stack } from '@mui/system';
import {
  IconBrandFacebook,
  IconBrandGithub,
  IconBrandInstagram,
  IconBrandTwitter,
} from '@tabler/icons-react';

const SocialIcons = [
  {
    name: 'Facebook',
    icon: <IconBrandFacebook size="18" color="#1877F2" />,
  },
  {
    name: 'Instagram',
    icon: <IconBrandInstagram size="18" color="#D7336D" />,
  },
  {
    name: 'Github',
    icon: <IconBrandGithub size="18" color="#006097" />,
  },
  {
    name: 'Twitter',
    icon: <IconBrandTwitter size="18" color="#1C9CEA" />,
  },
];

const profileCard = [
  {
    name: 'Andrew Grant',
    role: 'Technology Director',
    avatar: "/images/profile/user-3.jpg",
  },
  {
    name: 'Leo Pratt',
    role: 'Telecom Analyst',
    avatar: "/images/profile/user-4.jpg",
  },
  {
    name: 'Charles Nunez',
    role: 'Environmental Specialist',
    avatar: "/images/profile/user-5.jpg",
  },
];

const ProfileCard = () => {
  const theme = useTheme();

  return (
    <Grid container spacing={3}>
      {profileCard.map((card, index) => (
        <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
          <Card>
            <CardContent>
              <Stack direction={'column'} gap={2} alignItems="center">
                <Avatar alt="Remy Sharp" src={card.avatar} sx={{ width: '80px', height: '80px' }} />
                <Box textAlign={'center'}>
                  <Typography variant="h5">{card.name}</Typography>
                  <Typography variant="caption">{card.role}</Typography>
                </Box>
              </Stack>
            </CardContent>
            <Divider />
            <Box
              p={2}
              py={1}
              textAlign={'center'}
              sx={{
                backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.05)' : 'grey.100',
              }}
            >
              {SocialIcons.map((sicon) => {
                return <IconButton key={sicon.name}>{sicon.icon}</IconButton>;
              })}
            </Box>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default ProfileCard;
`}
      </CodeDialog>
    </>
  );
};

export default ProfileCardCode;


============================================================
FILE: src/components/widgets/cards/code/SettingsCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const SettingsCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { CardContent, Typography, Avatar, Divider, Button, Card } from '@mui/material';
import { Box, Stack } from '@mui/system';
import { IconMessage, IconVolume } from '@tabler/icons-react';
import { styled } from '@mui/material/styles';
import { Slider } from '@mui/material';
import { Switch } from '@mui/material';

const CustomSlider = styled(Slider)(({ theme }) => ({
  '& .MuiSlider-rail': {
    height: '9px',
    borderRadius: '9px',
    opacity: '1',
    backgroundColor: theme.palette.grey[200],
  },
  '& .MuiSlider-thumb': {
    borderRadius: '50%',
    backgroundColor: () => theme.palette.secondary.main,
    width: '23px',
    height: '23px',
  },
  '& .MuiSlider-track': {
    height: '9px',
    borderRadius: '9px',
  },
}));

const CustomSwitch = styled((props: any) => <Switch {...props} />)(({ theme }) => ({
  '&.MuiSwitch-root': {
    width: '68px',
    height: '49px',
  },
  '&  .MuiButtonBase-root': {
    top: '6px',
    left: '6px',
  },
  '&  .MuiButtonBase-root.Mui-checked .MuiSwitch-thumb': {
    backgroundColor: 'primary.main',
  },
  '& .MuiSwitch-thumb': {
    width: '18px',
    height: '18px',
    borderRadius: '6px',
  },

  '& .MuiSwitch-track': {
    backgroundColor: theme.palette.grey[200],
    opacity: 1,
    borderRadius: '5px',
  },
  '& .MuiSwitch-switchBase': {
    '&.Mui-checked': {
      '& + .MuiSwitch-track': {
        backgroundColor: 'primary',
        opacity: 0.18,
      },
    },
  },
}));

const Settings = () => {
  const [value3, setValue3] = React.useState(45);
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    <Card>
      <CardContent sx={{p: "30px"}}>
        <Typography variant="h5">Settings</Typography>
        <Stack spacing={2} mt={3}>
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'primary.main', width: 48, height: 48 }}>
              <IconVolume width={22} />
            </Avatar>
            <Box width="100%">
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Typography variant="h6">Sound</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  45%
                </Typography>
              </Box>
              <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            </Box>
          </Stack>
          <Divider />
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'secondary.main', width: 48, height: 48 }}>
              <IconMessage width={22} />
            </Avatar>
            <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
              <Box>
                <Typography variant="h6" mb={1}>Chat</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  Turn on chat during call
                </Typography>
              </Box>
              <Box>
                <CustomSwitch />
              </Box>
            </Box>
          </Stack>
          <Divider />
        </Stack>
        <Stack direction="row" justifyContent="end" spacing={2} mt={2}>
            <Button variant="outlined" color="error">Cancel</Button>
            <Button variant="contained" color="primary">Save</Button>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default Settings;
`}
      </CodeDialog>
    </>
  );
};

export default SettingsCode;


============================================================
FILE: src/components/widgets/cards/code/UpcomingActivityCode.tsx
============================================================
import CodeDialog from 'src/components/shared/CodeDialog';
const UpcomingActivityCode = () => {
  return (
    <>
      <CodeDialog>
        {`
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import { IconDatabase, IconMail, IconMapPin, IconPhone, IconScreenShare } from '@tabler/icons-react';


const UpcomingActivity = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const success = theme.palette.success.main;
  const successlight = theme.palette.success.light;

  const stats = [
    {
      title: 'Trip to singapore',
      subtitle: 'working on',
      time: 5,
      color: primary,
      lightcolor: primarylight,
      icon: <IconMapPin width={20} />,
    },
    {
      title: 'Archived Data',
      subtitle: 'working on',
      time: 10,
      color: secondary,
      lightcolor: secondarylight,
      icon: <IconDatabase width={20} />,
    },
    {
      title: 'Meeting with client',
      subtitle: 'pending',
      time: 15,
      color: warning,
      lightcolor: warninglight,
      icon: <IconPhone width={20} />,
    },
    {
      title: 'Screening Task Team',
      subtitle: 'working on',
      time: 20,
      color: error,
      lightcolor: errorlight,
      icon: <IconScreenShare width={20} />,
    },
    {
      title: 'Send envelope to John',
      subtitle: 'done',
      time: 20,
      color: success,
      lightcolor: successlight,
      icon: <IconMail width={20} />,
    },
  ];

  return (
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={3}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                  {stat.icon}
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>

              <Typography variant="subtitle2" color="textSecondary">
                {stat.time} mins
              </Typography>
            </Stack>
          ))}
        </Stack>
      </>
  );
};

export default UpcomingActivity;
`}
      </CodeDialog>
    </>
  );
};

export default UpcomingActivityCode;


============================================================
FILE: src/components/widgets/cards/ComplexCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import {
  CardContent,
  Typography,
  Avatar,
  Grid2 as Grid,
  CardMedia,
  Stack,
  Tooltip,
  Chip,
  Box,
  Skeleton
} from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import { IconMessage2, IconEye, IconPoint } from '@tabler/icons-react';
import user1 from 'src/assets/images/profile/user-1.jpg';
import user2 from 'src/assets/images/profile/user-2.jpg';
import user3 from 'src/assets/images/profile/user-3.jpg';
import img1 from 'src/assets/images/blog/blog-img1.jpg';
import img2 from 'src/assets/images/blog/blog-img2.jpg';
import img3 from 'src/assets/images/blog/blog-img3.jpg';

import ComplexCardCode from './code/ComplexCardCode';
import BlankCard from '../../shared/BlankCard';

interface cardType {
  avatar: string;
  coveravatar: string;
  title: string;
  category: string;
  name: string;
  view: string;
  comments: string;
  time: string;
}

const complexCard: cardType[] = [
  {
    avatar: user1,
    coveravatar: img1,
    title: 'As yen tumbles, gadget-loving Japan goes for secondhand iPhones',
    category: 'Social',
    name: 'Georgeanna Ramero',
    view: '9,125',
    comments: '3',
    time: 'Mon, Dec 19',
  },
  {
    avatar: user2,
    coveravatar: img2,
    title: 'Intel loses bid to revive antitrust case against patent foe Fortress',
    category: 'Gadget',
    name: 'Georgeanna Ramero',
    view: '4,150',
    comments: '38',
    time: 'Sun, Dec 18',
  },
  {
    avatar: user3,
    coveravatar: img3,
    title: 'COVID outbreak deepens as more lockdowns loom in China',
    category: 'Health',
    name: 'Georgeanna Ramero',
    view: '9,480',
    comments: '12',
    time: 'Sat, Dec 17',
  },
];

const ComplexCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Complex Card' codeModel={<ComplexCardCode />} >
      <Grid container spacing={3}>
        {complexCard.map((author, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard className="hoverCard">
              <>
                <Typography component={Link} to="/">
                  {isLoading ? (
                    <Skeleton variant="rectangular" animation="wave" width="100%" height={240}></Skeleton>
                  ) : (
                    <CardMedia
                      component="img"
                      height="240"
                      image={author.coveravatar}
                      alt="green iguana"
                    />
                  )}
                </Typography>
                <CardContent>
                  <Stack direction="row" sx={{ marginTop: '-45px' }}>
                    <Tooltip title={author.name} placement="top">
                      <Avatar aria-label="recipe" src={author.avatar}></Avatar>
                    </Tooltip>
                    <Chip
                      sx={{ marginLeft: 'auto', marginTop: '-21px', backgroundColor: (theme) => theme.palette.mode === 'dark' ? theme.palette.background.default : 'white', }}
                      label="2 min Read"
                      size="small"
                    ></Chip>
                  </Stack>
                  <Chip label={author.category} size="small" sx={{ marginTop: 2 }}></Chip>
                  <Box my={3}>
                    <Typography
                      gutterBottom
                      variant="h5"
                      color="inherit"
                      sx={{ textDecoration: 'none' }}
                      component={Link}
                      to="/"
                    >
                      {author.title}
                    </Typography>
                  </Box>
                  <Stack direction="row" gap={3} alignItems="center">
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconEye size="18" /> {author.view}
                    </Stack>
                    <Stack direction="row" gap={1} alignItems="center">
                      <IconMessage2 size="18" /> {author.comments}
                    </Stack>

                    <Stack direction="row" ml="auto" alignItems="center">
                      <IconPoint size="16" />
                      <small>{author.time}</small>
                    </Stack>
                  </Stack>
                </CardContent>
              </>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default ComplexCard;


============================================================
FILE: src/components/widgets/cards/EcommerceCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { Link } from 'react-router';
import { CardContent, Typography, Grid2 as Grid, Rating, Tooltip, Fab, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/products/s4.jpg';
import img2 from 'src/assets/images/products/s5.jpg';
import img3 from 'src/assets/images/products/s7.jpg';
import img4 from 'src/assets/images/products/s11.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';
import { IconBasket } from '@tabler/icons-react';

import EcommerceCardCode from './code/EcommerceCardCode';

interface ecocardType {
  title: string;
  subheader: string;
  photo: string;
  salesPrice: number;
  price: number;
  rating: number;
}

const ecoCard: ecocardType[] = [
  {
    title: 'Boat Headphone',
    subheader: 'September 14, 2023',
    photo: img1,
    salesPrice: 375,
    price: 285,
    rating: 4,
  },
  {
    title: 'MacBook Air Pro',
    subheader: 'September 14, 2023',
    photo: img2,
    salesPrice: 650,
    price: 900,
    rating: 5,
  },
  {
    title: 'Red Valvet Dress',
    subheader: 'September 14, 2023',
    photo: img3,
    salesPrice: 150,
    price: 200,
    rating: 3,
  },
  {
    title: 'Cute Soft Teddybear',
    subheader: 'September 14, 2023',
    photo: img4,
    salesPrice: 285,
    price: 345,
    rating: 2,
  },
];

const EcommerceCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Ecommerce Card' codeModel={<EcommerceCardCode />}>
      <Grid container spacing={3}>
        {ecoCard.map((product, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4,
              lg: 3
            }}>
            <BlankCard>
              <Typography component={Link} to="/">
                {isLoading ? (
                  <Skeleton variant="rectangular" animation="wave" width="100%" height={270}></Skeleton>
                ) : (
                  <img src={product.photo} alt="img" width="100%" />
                )}
              </Typography>
              <Tooltip title="Add To Cart">
                <Fab
                  size="small"
                  color="primary"
                  sx={{ bottom: '75px', right: '15px', position: 'absolute' }}
                >
                  <IconBasket size="16" />
                </Fab>
              </Tooltip>
              <CardContent sx={{ p: 3, pt: 2 }}>
                <Typography variant="h6">{product.title}</Typography>
                <Stack direction="row" alignItems="center" justifyContent="space-between" mt={1}>
                  <Stack direction="row" alignItems="center">
                    <Typography variant="h6">${product.price}</Typography>
                    <Typography color="textSecondary" ml={1} sx={{ textDecoration: 'line-through' }}>
                      ${product.salesPrice}
                    </Typography>
                  </Stack>
                  <Rating name="read-only" size="small" value={product.rating} readOnly />
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default EcommerceCard;


============================================================
FILE: src/components/widgets/cards/FollowerCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Avatar, Box, Stack } from '@mui/material';
import { IconMapPin } from '@tabler/icons-react';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from 'src/components/shared/ParentCard';

import FollowerCardCode from './code/FollowerCardCode';

interface Follower {
  title: string;
  location: string;
  avatar: string;
}

const followerCard: Follower[] = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: img2,
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: img3,
  },
];

const FollowerCard = () => {
  return (
    (<ParentCard title='Follower Card' codeModel={<FollowerCardCode />}>
      <Grid container spacing={3}>
        {followerCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction="row" spacing={2} alignItems="center" justifyContent="space-between">
                  <Stack direction="row" spacing={2}>
                    <Avatar src={card.avatar} alt={card.avatar} />
                    <Box>
                      <Typography variant="h6">{card.title}</Typography>
                      <Typography
                        variant="subtitle1"
                        color="textSecondary"
                        display="flex"
                        alignItems="center"
                        gap="3px"
                      >
                        <IconMapPin width={18} /> {card.location}
                      </Typography>
                    </Box>
                  </Stack>
                  <Button variant="contained" color="primary">
                    Follow
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default FollowerCard;


============================================================
FILE: src/components/widgets/cards/FriendCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, Box, AvatarGroup, Avatar, Stack } from '@mui/material';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';
import FriendCardCode from './code/FriendCardCode';

interface Follower {
  title: string;
  location: string;
  avatar: string;
}

const followerCard: Follower[] = [
  {
    title: 'Andrew Grant',
    location: 'El Salvador',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    location: 'Bulgaria',
    avatar: img2,
  },
  {
    title: 'Charles Nunez',
    location: 'Nepal',
    avatar: img3,
  },
  {
    title: 'Lora Powers',
    location: 'Nepal',
    avatar: img4,
  },
];

const FriendCard = () => {
  return (
    (<ParentCard title='Friend Card' codeModel={<FriendCardCode />}>
      <Grid container spacing={3}>
        {followerCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6,
              lg: 3
            }}>
            <BlankCard>
              <CardContent>
                <Avatar src={card.avatar} sx={{ height: 80, width: 80 }}></Avatar>
                <Stack direction="row" spacing={2} mt={3}>
                  <Box>
                    <Typography variant="h6" mb={1}>
                      {card.title}
                    </Typography>
                    <Stack direction="row" spacing={2} alignItems="center">
                      <AvatarGroup>
                        <Avatar sx={{ height: 28, width: 28 }} alt="Remy Sharp" src={img1} />
                        <Avatar sx={{ height: 28, width: 28 }} alt="Travis Howard" src={img2} />
                        <Avatar sx={{ height: 28, width: 28 }} alt="Cindy Baker" src={img3} />
                      </AvatarGroup>
                      <Typography variant="subtitle2" color="textSecondary">
                        3 mutual friends
                      </Typography>
                    </Stack>
                  </Box>
                </Stack>
                <Stack spacing={2} mt={3}>
                  <Button size="large" variant="text" color="primary">
                    Add Friend
                  </Button>
                  <Button size="large" variant="text" color="secondary">
                    Remove
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default FriendCard;


============================================================
FILE: src/components/widgets/cards/GiftCard.tsx
============================================================
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Button, CardMedia, IconButton, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/products/s1.jpg';
import img2 from 'src/assets/images/products/s2.jpg';
import BlankCard from '../../shared/BlankCard';
import { IconGift } from '@tabler/icons-react';

import ParentCard from '../../shared/ParentCard';

import GiftCardCode from './code/GiftCardCode';

interface giftType {
  title: string;
  avatar: string;
}

const giftCard: giftType[] = [
  {
    title: 'Andrew Grant',
    avatar: img1,
  },
  {
    title: 'Leo Pratt',
    avatar: img2,
  },
];

const GiftCard = () => {

  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Gift Card' codeModel={<GiftCardCode />}>
      <Grid container spacing={3}>
        {giftCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 6
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction="row" alignItems="center" justifyContent="space-between" spacing={2}>
                  <Typography variant="h6" mb={1}>
                    {card.title}
                  </Typography>

                  <IconButton color="secondary">
                    <IconGift width={20} />
                  </IconButton>
                </Stack>
                {isLoading ? (
                  <Skeleton variant="rectangular" animation="wave" width="100%" height={160}></Skeleton>
                ) : (
                  <CardMedia component="img" image={card.avatar} sx={{ height: 160, borderRadius: 2 }} />
                )}
                <Stack spacing={2} mt={3}>
                  <Button size="large" variant="contained" color="primary">
                    Gift to Friend ($50.00)
                  </Button>
                </Stack>
              </CardContent>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default GiftCard;


============================================================
FILE: src/components/widgets/cards/MusicCard.tsx
============================================================
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, Card, CardMedia, Box, IconButton, Stack, Skeleton } from '@mui/material';
import img1 from 'src/assets/images/blog/blog-img5.jpg';
import img2 from 'src/assets/images/blog/blog-img4.jpg';
import img3 from 'src/assets/images/blog/blog-img3.jpg';
import { IconPlayerPlay, IconPlayerSkipBack, IconPlayerSkipForward } from '@tabler/icons-react';
import ParentCard from '../../shared/ParentCard';

import MusicCardCode from './code/MusicCardCode';

interface musiccardType {
  title: string;
  subheader: string;
  img: string;
}


const musicCard: musiccardType[] = [
  {
    title: 'Uptown Funk',
    subheader: 'Jon Bon Jovi',
    img: img1,
  },
  {
    title: 'Blank Space',
    subheader: 'Madonna',
    img: img2,
  },
  {
    title: 'Lean On',
    subheader: 'Jennifer Lopez',
    img: img3,
  },
];

const MusicCard = () => {
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);

  return (
    (<ParentCard title='Music Card' codeModel={<MusicCardCode />}>
      <Grid container spacing={3}>
        {musicCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <Card sx={{ display: 'flex', p: 0 }}>
              <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flex: '1 0 auto' }}>
                  <Typography component="div" variant="h5">
                    {card.title}
                  </Typography>
                  <Typography variant="subtitle1" color="text.secondary" component="div">
                    {card.subheader}
                  </Typography>
                </CardContent>
                <Stack direction="row" spacing={2} px={2} pb={3}>
                  <IconButton aria-label="previous">
                    <IconPlayerSkipBack width="20" />
                  </IconButton>
                  <IconButton aria-label="play/pause" color="error">
                    <IconPlayerPlay width="20" />
                  </IconButton>
                  <IconButton aria-label="next">
                    <IconPlayerSkipForward width="20" />
                  </IconButton>
                </Stack>
              </Box>
              {isLoading ? (
                <Skeleton variant="rectangular" animation="wave" width="100%" height={180}></Skeleton>
              ) : (
                <CardMedia
                  component="img"
                  sx={{ width: '100%', height: 180 }}
                  image={card.img}
                  alt="Live from space album cover"
                />
              )}
            </Card>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default MusicCard;


============================================================
FILE: src/components/widgets/cards/ProfileCard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useEffect } from 'react';
import { CardContent, Typography, Grid2 as Grid, IconButton, Divider, Avatar, Box, Stack, Skeleton } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import {
  IconBrandFacebook,
  IconBrandGithub,
  IconBrandInstagram,
  IconBrandTwitter,
} from '@tabler/icons-react';
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import BlankCard from '../../shared/BlankCard';
import ParentCard from '../../shared/ParentCard';

import ProfileCardCode from './code/ProfileCardCode';

interface SocialIcon {
  name: string;
  icon: any;
}

interface ProfileCard {
  name: string;
  role: string;
  avatar: string;
}

const SocialIcons: SocialIcon[] = [
  {
    name: 'Facebook',
    icon: <IconBrandFacebook size="18" color="#1877F2" />,
  },
  {
    name: 'Instagram',
    icon: <IconBrandInstagram size="18" color="#D7336D" />,
  },
  {
    name: 'Github',
    icon: <IconBrandGithub size="18" color="#006097" />,
  },
  {
    name: 'Twitter',
    icon: <IconBrandTwitter size="18" color="#1C9CEA" />,
  },
];

const profileCard: ProfileCard[] = [
  {
    name: 'Andrew Grant',
    role: 'Technology Director',
    avatar: img1,
  },
  {
    name: 'Leo Pratt',
    role: 'Telecom Analyst',
    avatar: img2,
  },
  {
    name: 'Charles Nunez',
    role: 'Environmental Specialist',
    avatar: img3,
  },
];

const ProfileCard = () => {

  const theme = useTheme();
  const [isLoading, setLoading] = React.useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 700);

    return () => clearTimeout(timer);
  }, []);


  return (
    (<ParentCard title='Profile Card' codeModel={<ProfileCardCode />}>
      <Grid container spacing={3}>
        {profileCard.map((card, index) => (
          <Grid
            key={index}
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent>
                <Stack direction={'column'} gap={2} alignItems="center">
                  {isLoading ? (
                    <Skeleton variant="rectangular" animation="wave" width="100%" height={160}></Skeleton>
                  ) : (
                    <Avatar alt="Remy Sharp" src={card.avatar} sx={{ width: '80px', height: '80px' }} />
                  )}
                  <Box textAlign={'center'}>
                    <Typography variant="h5">{card.name}</Typography>
                    <Typography variant="caption">{card.role}</Typography>
                  </Box>
                </Stack>
              </CardContent>
              <Divider />
              <Box
                p={2}
                py={1}
                textAlign={'center'}
                sx={{
                  backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.05)' : 'grey.100',
                }}
              >
                {SocialIcons.map((sicon) => {
                  return <IconButton key={sicon.name}>{sicon.icon}</IconButton>;
                })}
              </Box>
            </BlankCard>
          </Grid>
        ))}
      </Grid>
    </ParentCard>)
  );
};

export default ProfileCard;


============================================================
FILE: src/components/widgets/cards/Settings.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { CardContent, Typography, Avatar, Divider, Button, Box, Stack } from '@mui/material';
import ParentCard from '../../shared/ParentCard';
import { IconMessage, IconVolume } from '@tabler/icons-react';

import CustomSlider from '../../forms/theme-elements/CustomSlider';
import CustomSwitch from '../../forms/theme-elements/CustomSwitch';

import SettingsCode from './code/SettingsCode';

const Settings = () => {
  const [value3, setValue3] = React.useState(45);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    <ParentCard title='Settings' codeModel={<SettingsCode />}>
      <CardContent sx={{ p: "30px" }}>
        <Typography variant="h5">Settings</Typography>
        <Stack spacing={2} mt={3}>
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'primary.main', width: 48, height: 48 }}>
              <IconVolume width={22} />
            </Avatar>
            <Box width="100%">
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Typography variant="h6">Sound</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  45%
                </Typography>
              </Box>
              <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            </Box>
          </Stack>
          <Divider />
          <Stack direction="row" spacing={2}>
            <Avatar variant="rounded" sx={{ bgcolor: 'secondary.main', width: 48, height: 48 }}>
              <IconMessage width={22} />
            </Avatar>
            <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
              <Box>
                <Typography variant="h6" mb={1}>Chat</Typography>
                <Typography variant="subtitle2" color="textSecondary">
                  Turn on chat during call
                </Typography>
              </Box>
              <Box>
                <CustomSwitch />
              </Box>
            </Box>
          </Stack>
          <Divider />
        </Stack>
        <Stack direction="row" justifyContent="end" spacing={2} mt={2}>
          <Button variant="outlined" color="error">Cancel</Button>
          <Button variant="contained" color="primary">Save</Button>
        </Stack>
      </CardContent>
    </ParentCard>
  );
};

export default Settings;


============================================================
FILE: src/components/widgets/cards/UpcomingActivity.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Stack, Typography, Avatar, Box } from '@mui/material';
import ParentCard from '../../shared/ParentCard';
import { IconDatabase, IconMail, IconMapPin, IconPhone, IconScreenShare } from '@tabler/icons-react';

import UpcomingActivityCode from './code/UpcomingActivityCode';

const UpcomingActivity = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const error = theme.palette.error.main;
  const errorlight = theme.palette.error.light;
  const warning = theme.palette.warning.main;
  const warninglight = theme.palette.warning.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const success = theme.palette.success.main;
  const successlight = theme.palette.success.light;

  interface statType {
    title: string;
    subtitle: string;
    time: number;
    color: string;
    lightcolor: string;
    icon: any;
  }

  const stats: statType[] = [
    {
      title: 'Trip to singapore',
      subtitle: 'working on',
      time: 5,
      color: primary,
      lightcolor: primarylight,
      icon: <IconMapPin width={20} />,
    },
    {
      title: 'Archived Data',
      subtitle: 'working on',
      time: 10,
      color: secondary,
      lightcolor: secondarylight,
      icon: <IconDatabase width={20} />,
    },
    {
      title: 'Meeting with client',
      subtitle: 'pending',
      time: 15,
      color: warning,
      lightcolor: warninglight,
      icon: <IconPhone width={20} />,
    },
    {
      title: 'Screening Task Team',
      subtitle: 'working on',
      time: 20,
      color: error,
      lightcolor: errorlight,
      icon: <IconScreenShare width={20} />,
    },
    {
      title: 'Send envelope to John',
      subtitle: 'done',
      time: 20,
      color: success,
      lightcolor: successlight,
      icon: <IconMail width={20} />,
    },
  ];

  return (
    <ParentCard title="Upcoming Activity" codeModel={<UpcomingActivityCode />}>
      <>
        <Stack spacing={3} mt={5}>
          {stats.map((stat, i) => (
            <Stack
              direction="row"
              spacing={3}
              justifyContent="space-between"
              alignItems="center"
              key={i}
            >
              <Stack direction="row" alignItems="center" spacing={2}>
                <Avatar
                  variant="rounded"
                  sx={{ bgcolor: stat.lightcolor, color: stat.color, width: 40, height: 40 }}
                >
                  {stat.icon}
                </Avatar>
                <Box>
                  <Typography variant="h6" mb="4px">
                    {stat.title}
                  </Typography>
                  <Typography variant="subtitle2" color="textSecondary">
                    {stat.subtitle}
                  </Typography>
                </Box>
              </Stack>

              <Typography variant="subtitle2" color="textSecondary">
                {stat.time} mins
              </Typography>
            </Stack>
          ))}
        </Stack>
      </>
    </ParentCard>
  );
};

export default UpcomingActivity;


============================================================
FILE: src/components/widgets/charts/CurrentValue.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { Box, Button, CardContent, Grid2 as Grid, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';


const CurrentValue = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const textColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : '#2A3547';

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 200,
      stacked: true,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary, primary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [2.5, 3.7, 3.2, 2.6, 1.9, 2.5],
    },
    {
      name: '',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9, -2.8],
    },
  ];

  //   chart 2
  const optionscolumn2chart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 200,
      stacked: true,
      sparkline: {
        enabled: true,
      },
    },
    colors: [secondary, secondary],
    plotOptions: {
      bar: {
        horizontal: false,
        barHeight: '60%',
        columnWidth: '20%',
        borderRadius: [6],
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    yaxis: {
      min: -5,
      max: 5,
      tickAmount: 4,
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumn2chart = [
    {
      name: '',
      data: [2.5, 3.7, 3.2, 2.6, 1.9, 2.5],
    },
    {
      name: '',
      data: [-2.8, -1.1, -3.0, -1.5, -1.9, -2.8],
    },
  ];

  //   chart 3
  const optionscolumn3chart: Props = {
    chart: {
      type: 'donut',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",

      toolbar: {
        show: false,
      },
      height: 220,
    },
    labels: ['Income', 'Current', 'Expance'],
    colors: [primary, primarylight, secondary],
    plotOptions: {
      pie: {
        startAngle: 0,
        endAngle: 360,
        donut: {
          size: '89%',
          background: 'transparent',

          labels: {
            show: true,
            name: {
              show: true,
              offsetY: 7,
            },
            value: {
              show: false,
            },
            total: {
              show: true,
              color: textColor,
              fontSize: '20px',
              fontWeight: '600',
              label: '$98,260',
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: false,
    },
    legend: {
      show: false,
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumn3chart = [55, 55, 55];

  return (
    (<BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="h5">Current Value</Typography>
          <Stack spacing={1} direction="row">
            <Button color="primary" variant="contained">
              Buy
            </Button>
            <Button color="primary" variant="outlined">
              Sell
            </Button>
          </Stack>
        </Stack>

        <Grid container spacing={3} mt={2}>
          {/* 1 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumnchart}
                    series={seriescolumnchart}
                    type="bar"
                    height="200px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Income
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$25,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +1.25%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
          {/* 2 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumn2chart}
                    series={seriescolumn2chart}
                    type="bar"
                    height="200px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Expance
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$12,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +4.25%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
          {/* 3 */}
          <Grid
            size={{
              xs: 12,
              sm: 4
            }}>
            <BlankCard>
              <CardContent sx={{ p: '30px' }}>
                <Box>
                  <Chart
                    options={optionscolumn3chart}
                    series={seriescolumn3chart}
                    type="donut"
                    height="220px"
                  />
                </Box>
                <Box mt={4}>
                  <Typography variant="h6" fontWeight={400} mb={1}>
                    Current Year
                  </Typography>
                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <Typography variant="h4">$98,260</Typography>
                    <Typography variant="subtitle1" color="success.main">
                      +2.5%
                    </Typography>
                  </Stack>
                </Box>
              </CardContent>
            </BlankCard>
          </Grid>
        </Grid>
      </CardContent>
    </BlankCard>)
  );
};

export default CurrentValue;


============================================================
FILE: src/components/widgets/charts/Earned.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';

const Earned = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],

    stroke: {
      curve: 'straight',
      width: 2,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    xaxis: {
      axisBorder: {
        show: true,
      },
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 3, 1, 2, 8, 1, 5, 1],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">2,545</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="subtitle2" color="textSecondary">
            Earned
          </Typography>
          <Typography variant="subtitle2" color="success.main">
            +1.20%
          </Typography>
        </Stack>
      </CardContent>
      <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="90px" />
    </BlankCard>
  );
};

export default Earned;


============================================================
FILE: src/components/widgets/charts/Followers.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';


const Followers = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'area',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 90,
      sparkline: {
        enabled: true,
      },
    },
    colors: [primary],

    stroke: {
      curve: 'straight',
      width: 2,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    xaxis: {
      axisBorder: {
        show: true,
      },
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [0, 150, 110, 240, 200, 200, 300, 200],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">2,545</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between">
          <Typography variant="subtitle2" color="textSecondary">
            Followers
          </Typography>
          <Typography variant="subtitle2" color="success.main">
            +1.20%
          </Typography>
        </Stack>
      </CardContent>
      <Chart options={optionscolumnchart} series={seriescolumnchart} type="area" height="90px" />
    </BlankCard>
  );
};

export default Followers;


============================================================
FILE: src/components/widgets/charts/MostVisited.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, MenuItem, Stack, Box } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import CustomSelect from '../../forms/theme-elements/CustomSelect';
import { Props } from 'react-apexcharts';

const MostVisited = () => {
  // for select
  const [month, setMonth] = React.useState('1');

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMonth(event.target.value);
  };

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 250,
      stacked: true,
    },
    colors: [primary, secondary],
    plotOptions: {
      bar: {
        borderRadius: [6],
        horizontal: false,
        barHeight: '60%',
        columnWidth: '40%',
        borderRadiusApplication: 'end',
        borderRadiusWhenStacked: 'all',
      },
    },
    stroke: {
      show: false,
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
    },
    yaxis: {
      tickAmount: 4,
    },
    xaxis: {
      categories: ['01', '02', '03', '04', '05', '06'],
      axisTicks: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
      fillSeriesColor: false,
    },
  };
  const seriescolumnchart = [
    {
      name: 'San Francisco',
      data: [44, 55, 41, 67, 22, 43],
    },
    {
      name: 'Diego',
      data: [13, 23, 20, 8, 13, 27],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Stack direction="row" justifyContent="space-between">
          <Typography variant="h5">Most Visited</Typography>
          <CustomSelect
            labelId="month-dd"
            id="month-dd"
            size="small"
            value={month}
            onChange={handleChange}
          >
            <MenuItem value={1}>March 2023</MenuItem>
            <MenuItem value={2}>April 2023</MenuItem>
            <MenuItem value={3}>May 2023</MenuItem>
          </CustomSelect>
        </Stack>

        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="250px" />

        <Stack direction="row" spacing={2} justifyContent="center">
          <Box display="flex" alignItems="center" gap={1}>
            <Box
              sx={{
                width: '8px',
                height: '8px',
                backgroundColor: 'primary.main',
                borderRadius: '100%',
              }}
            ></Box>
            <Typography variant="subtitle2" color="textSecondary">
              San Francisco
            </Typography>
          </Box>
          <Box display="flex" alignItems="center" gap={1}>
            <Box
              sx={{
                width: '8px',
                height: '8px',
                backgroundColor: 'secondary.main',
                borderRadius: '100%',
              }}
            ></Box>
            <Typography variant="subtitle2" color="textSecondary">
              Diego
            </Typography>
          </Box>
        </Stack>
      </CardContent>
    </BlankCard>
  );
};

export default MostVisited;


============================================================
FILE: src/components/widgets/charts/PageImpressions.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Avatar, Grid2 as Grid, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { IconArrowDownRight } from '@tabler/icons-react';
import { Props } from 'react-apexcharts';

const PageImpressions = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 100,
      sparkline: {
        enabled: true,
      },
    },
    colors: [secondarylight, secondarylight, secondary, secondarylight, secondarylight, secondarylight],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '50%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    xaxis: {
      labels: {
        show: false,
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10],
    },
  ];

  return (
    (<BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h5">Page Impressions</Typography>

        <Grid container spacing={3}>
          <Grid size={5}>

            <Typography variant="h4" mt={3} fontWeight={600}>$456,120</Typography>
            <Typography variant="subtitle2" fontSize="12px" color="textSecondary">
              (Change Yesterday)
            </Typography>
            <Stack direction="row" spacing={1} mt={1} alignItems="center">
              <Avatar sx={{ bgcolor: 'error.light', width: 20, height: 20 }}>
                <IconArrowDownRight width={16} color="#FA896B" />
              </Avatar>
              <Typography variant="subtitle2" color="textSecondary">
                +9%
              </Typography>
            </Stack>
          </Grid>
          <Grid size={7}>
            <Chart
              options={optionscolumnchart}
              series={seriescolumnchart}
              type="bar"
              height="100px"
            />
          </Grid>
        </Grid>
      </CardContent>
    </BlankCard>)
  );
};

export default PageImpressions;


============================================================
FILE: src/components/widgets/charts/Views.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import { CardContent, Typography, Stack } from '@mui/material';
import BlankCard from '../../shared/BlankCard';
import { Props } from 'react-apexcharts';

const Views = () => {
  // chart color
  const theme = useTheme();
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;

  // chart
  const optionscolumnchart: Props = {
    chart: {
      type: 'bar',
      fontFamily: "'Plus Jakarta Sans', sans-serif;",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      height: 80,
      sparkline: {
        enabled: true,
      },
    },
    colors: [
      secondarylight,
      secondarylight,
      secondary,
      secondarylight,
      secondarylight,
      secondarylight,
      secondarylight,
      secondarylight,
    ],
    plotOptions: {
      bar: {
        borderRadius: 4,
        columnWidth: '50%',
        distributed: true,
        endingShape: 'rounded',
      },
    },
    dataLabels: {
      enabled: false,
    },
    legend: {
      show: false,
    },
    grid: {
      show: false,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
      },
    },
    xaxis: {
      categories: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],
      labels: {
        show: false,
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      labels: {
        show: false,
      },
    },
    tooltip: {
      theme: theme.palette.mode === 'dark' ? 'dark' : 'light',
    },
  };
  const seriescolumnchart = [
    {
      name: '',
      data: [20, 15, 30, 25, 10, 18, 20],
    },
  ];

  return (
    <BlankCard>
      <CardContent sx={{ p: '30px' }}>
        <Typography variant="h4">15,480</Typography>
        <Stack direction="row" spacing={2} justifyContent="space-between" mb={2}>
          <Typography variant="subtitle2" color="textSecondary">
            Views
          </Typography>
          <Typography variant="subtitle2" color="error.main">
            -4.150%
          </Typography>
        </Stack>
        <Chart options={optionscolumnchart} series={seriescolumnchart} type="bar" height="80px" />
      </CardContent>
    </BlankCard>
  );
};

export default Views;


============================================================
FILE: src/components/BranchSelector.tsx
============================================================
// File: src/components/BranchSelector.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  Menu,
  MenuItem,
  Typography,
  Divider,
  ListItemIcon,
  ListItemText,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconBuilding, IconChevronDown, IconCheck } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

interface Props {
  compact?: boolean;
}

const BranchSelector: React.FC<Props> = ({ compact = false }) => {
  const { t } = useTranslation();
  const { selectedBranch, branches, selectBranch } = useAuth();
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    if (branches.length > 1) {
      setAnchorEl(event.currentTarget);
    }
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleBranchSelect = async (branch: Branch) => {
    try {
      await selectBranch(branch);
      handleClose();
    } catch (error) {
      }
  };

  if (!selectedBranch) return null;

  return (
    <Box>
      <Button
        onClick={handleClick}
        sx={{
          color: 'inherit',
          textTransform: 'none',
          display: 'flex',
          alignItems: 'center',
          gap: 1,
          px: compact ? 1 : 2,
          py: 0.5,
          minWidth: compact ? 'auto' : 200,
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.04)'
          },
          borderRadius: 1
        }}
        disabled={branches.length <= 1}
      >
        <IconBuilding size={18} />
        {!compact && (
          <Box sx={{ textAlign: 'left', flex: 1 }}>
            <Typography 
              variant="body2" 
              sx={{ 
                fontWeight: 500,
                fontSize: isMobile ? '0.8rem' : '0.875rem',
                lineHeight: 1.2
              }}
              noWrap
            >
              {selectedBranch.name}
            </Typography>
            <Typography 
              variant="caption" 
              sx={{ 
                opacity: 0.7,
                fontSize: isMobile ? '0.7rem' : '0.75rem',
                lineHeight: 1
              }}
              noWrap
            >
              {selectedBranch.company.name}
            </Typography>
          </Box>
        )}
        {branches.length > 1 && <IconChevronDown size={14} />}
      </Button>

      <Menu
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        PaperProps={{
          sx: { minWidth: 280 }
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <Box sx={{ px: 2, py: 1 }}>
          <Typography variant="subtitle2" color="text.secondary">
            {t('branch.selectBranch')}
          </Typography>
        </Box>
        <Divider />
        
        {branches.map((branch) => (
          <MenuItem
            key={branch.id}
            onClick={() => handleBranchSelect(branch)}
            selected={branch.id === selectedBranch?.id}
            sx={{ py: 1.5 }}
          >
            <ListItemIcon>
              {branch.id === selectedBranch?.id ? (
                <IconCheck size={20} color="primary" />
              ) : (
                <IconBuilding size={20} />
              )}
            </ListItemIcon>
            <ListItemText>
              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                {branch.name}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {branch.company.name}
              </Typography>
            </ListItemText>
          </MenuItem>
        ))}
      </Menu>
    </Box>
  );
};

export default BranchSelector;


============================================================
FILE: src/components/ErrorBoundary.tsx
============================================================
// File: src/components/ErrorBoundary.tsx
import { Component, ErrorInfo, ReactNode } from 'react';
import { Box, Typography, Button, Alert } from '@mui/material';
import { IconBug, IconRefresh } from '@tabler/icons-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '100vh',
            textAlign: 'center',
            gap: 3,
            p: 3
          }}
        >
          <IconBug size={64} color="error" />
          
          <Typography variant="h4" component="h1">
            حدث خطأ غير متوقع
          </Typography>
          
          <Typography variant="body1" color="text.secondary">
            نعتذر عن هذا الخطأ. يرجى تحديث الصفحة أو المحاولة مرة أخرى.
          </Typography>

          {this.state.error && (
            <Alert severity="error" sx={{ width: '100%', maxWidth: 600, textAlign: 'left' }}>
              <Typography variant="caption" component="pre">
                {this.state.error.message}
              </Typography>
            </Alert>
          )}

          <Button
            variant="contained"
            startIcon={<IconRefresh />}
            onClick={() => window.location.reload()}
            size="large"
          >
            تحديث الصفحة
          </Button>
        </Box>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


============================================================
FILE: src/components/GlobalLoading.tsx
============================================================
// File: src/components/GlobalLoading.tsx
import React, { useState, useEffect } from 'react';
import { Backdrop, CircularProgress, Typography } from '@mui/material';

const GlobalLoading: React.FC = () => {
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const handleLoading = (event: any) => {
      setLoading(event.detail?.loading || false);
    };

    window.addEventListener('apiLoading', handleLoading);
    
    return () => {
      window.removeEventListener('apiLoading', handleLoading);
    };
  }, []);

  if (!loading) return null;

  return (
    <Backdrop
      sx={{
        color: '#fff',
        zIndex: (theme) => theme.zIndex.drawer + 1,
        flexDirection: 'column',
        gap: 2
      }}
      open={loading}
    >
      <CircularProgress color="inherit" />
      <Typography variant="body1">
        جاري التحميل...
      </Typography>
    </Backdrop>
  );
};

export default GlobalLoading;


============================================================
FILE: src/components/GlobalPrintHandler.tsx
============================================================
// File: src/components/GlobalPrintHandler.tsx
import React, { useEffect, useCallback } from 'react';
import { useReactToPrint } from 'react-to-print';
import { useThermalPrint } from '../hooks/useThermalPrint';

interface Props {
  children: React.ReactNode;
  thermalPrinterConfig?: {
    enabled: boolean;
    type: 'usb' | 'network';
    networkConfig?: {
      ip: string;
      port: number;
    };
  };
}

const GlobalPrintHandler: React.FC<Props> = ({ 
  children, 
  thermalPrinterConfig 
}) => {
  const printRef = React.useRef<HTMLDivElement>(null);
  const { print: thermalPrint } = useThermalPrint(thermalPrinterConfig);

  // ⭐ تحديث useReactToPrint للإصدار الجديد
  const handleNormalPrint = useReactToPrint({
    contentRef: printRef, // ⭐ استخدام contentRef بدلاً من content
    pageStyle: `
      @page {
        size: A4;
        margin: 0.5in;
      }
      @media print {
        body { -webkit-print-color-adjust: exact; }
        .no-print { display: none !important; }
        .print-only { display: block !important; }
      }
    `
  });

  // دالة الطباعة الحرارية
  const handleThermalPrint = useCallback(async () => {
    if (!thermalPrinterConfig?.enabled) {
      handleNormalPrint();
      return;
    }

    try {
      const content = printRef.current?.innerText || '';
      const result = await thermalPrint(content);
      
      if (!(result as { success: boolean }).success) {
        handleNormalPrint();
      }
    } catch (error) {
      handleNormalPrint();
    }
  }, [thermalPrinterConfig, thermalPrint, handleNormalPrint]);

  // معالج Ctrl+P
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if ((event.ctrlKey || event.metaKey) && event.key === 'p') {
      event.preventDefault();
      
      if (thermalPrinterConfig?.enabled) {
        handleThermalPrint();
      } else {
        handleNormalPrint();
      }
    }
  }, [thermalPrinterConfig, handleThermalPrint, handleNormalPrint]);

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);

  return (
    <div ref={printRef}>
      {children}
    </div>
  );
};

export default GlobalPrintHandler;


============================================================
FILE: src/components/PermissionGuard.tsx
============================================================
// File: src/components/PermissionGuard.tsx
import React from 'react';
import { usePermissions } from 'src/hooks/usePermissions';

interface Props {
  children: React.ReactNode;
  pageId: number;
  permission: string;
  fallback?: React.ReactNode;
}

const PermissionGuard: React.FC<Props> = ({ 
  children, 
  pageId, 
  permission, 
  fallback = null 
}) => {
  const { hasPermission, loading } = usePermissions();

  if (loading) {
    return <>{fallback}</>;
  }

  if (!hasPermission(pageId, permission)) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
};

export default PermissionGuard;


============================================================
FILE: src/components/ProtectedRoute.tsx
============================================================
// File: src/components/ProtectedRoute.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { Box, CircularProgress, Typography } from '@mui/material';
import { useAuth } from 'src/contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredPage?: string;
  requiredModule?: number;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredPage,
  requiredModule 
}) => {
  const { isAuthenticated, isLoading, selectedBranch, branches, hasPageAccess, canAccessModule } = useAuth();
  const location = useLocation();

  // إذا كان النظام يحمل، أظهر loading
  if (isLoading) {
    return (
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          gap: 2
        }}
      >
        <CircularProgress size={40} />
        <Typography variant="body1">جاري التحميل...</Typography>
      </Box>
    );
  }

  // إذا لم يكن مسجل دخول، اذهب للـ login
  if (!isAuthenticated) {
    return <Navigate to="/auth/login" state={{ from: location }} replace />;
  }

  // إذا كان مسجل دخول ولكن لا يوجد فرع محدد ولديه فروع متعددة
  if (isAuthenticated && !selectedBranch && branches.length > 1) {
    return <Navigate to="/auth/branch-selection" replace />;
  }

  // إذا كان مسجل دخول ولكن لا يوجد فروع
  if (isAuthenticated && branches.length === 0) {
    return <Navigate to="/auth/no-branches" replace />;
  }

  // التحقق من صلاحية الصفحة
  if (requiredPage && !hasPageAccess(requiredPage)) {
    return <Navigate to="/unauthorized" replace />;
  }

  // التحقق من صلاحية الوحدة
  if (requiredModule && !canAccessModule(requiredModule)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;


============================================================
FILE: src/contexts/AuthContext.tsx
============================================================
// File: src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { setAuthHeaders, clearAuthHeaders, isAuthenticated } from 'src/utils/axios';
import { login as loginApi, LoginResponse, Branch, User, UserPage } from 'src/utils/api/authApi';
import { useTranslation } from 'react-i18next';
import { useGlobalErrorHandler } from '../hooks/useGlobalErrorHandler';

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  token: string | null;
  branches: Branch[];
  selectedBranch: Branch | null;
  userPages: UserPage[];
  login: (phoneNo: string, password: string, tenantId: string, onSuccess?: (branches: Branch[], selectedBranch?: Branch) => void) => Promise<void>;
  logout: () => void;
  selectBranch: (branch: Branch) => void;
  hasPageAccess: (pageName: string) => boolean;
  canAccessModule: (moduleId: number) => boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticatedState, setIsAuthenticatedState] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [selectedBranch, setSelectedBranch] = useState<Branch | null>(null);
  const [userPages, setUserPages] = useState<UserPage[]>([]);
  const { t } = useTranslation();
  useGlobalErrorHandler();

  // تحميل البيانات من localStorage عند بدء التطبيق
  useEffect(() => {
    const initAuth = async () => {
      try {
        if (isAuthenticated()) {
          const savedToken = localStorage.getItem('auth_token');
          const savedUser = localStorage.getItem('user_data');
          const savedBranch = localStorage.getItem('selected_branch');
          const savedBranches = localStorage.getItem('user_branches');

          if (savedToken && savedUser && savedBranch) {
            const userData = JSON.parse(savedUser);
            const branchData = JSON.parse(savedBranch);
            const branchesData = savedBranches ? JSON.parse(savedBranches) : [];

            setToken(savedToken);
            setUser(userData);
            setSelectedBranch(branchData);
            setBranches(branchesData);
            
            // تأكد من تحديث headers
            const savedTenantId = localStorage.getItem('tenant_id');
            setAuthHeaders(savedToken, branchData.refCompanyId, branchData.id, savedTenantId || '');
            
            // ⭐ تحديث حالة المصادقة فوراً
            setIsAuthenticatedState(true);
            
            // تحميل صفحات المستخدم في الخلفية
            loadUserPages();
          }
        }
      } catch (error) {
        logout();
      } finally {
        setIsLoading(false);
      }
    };

    initAuth();
  }, []);

  // تحميل صفحات المستخدم مع retry mechanism
  const loadUserPages = async (retries = 3) => {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const { getUserPages } = await import('src/utils/api/authApi');
        const pages = await getUserPages();
        
        setUserPages(pages);
        return;
        
      } catch (error) {
        if (attempt < retries) {
          // انتظار متزايد بين المحاولات
          await new Promise(resolve => setTimeout(resolve, attempt * 500));
        } else {
          }
      }
    }
  };

  // تسجيل الدخول مع redirect فوري

const login = async (phoneNo: string, password: string, tenantId: string, onSuccess?: (branches: Branch[], selectedBranch?: Branch) => void) => {
  try {
    setIsLoading(true);
    const response: LoginResponse = await loginApi(phoneNo, password, tenantId); // ⭐ تمرير tenantId
    const branches = response.branches?.data || [];
    if (branches.length === 0) {
      throw new Error(t('auth.errors.noBranches'));
    }

    // حفظ البيانات
    setToken(response.token);
    setBranches(branches);
    
    const userData: User = {
      id: 'a4fd8ce5-d4db-4d44-bbb9-5c797b0fbf7b',
      userName: 'Mahmoud Afify',
      email: '',
      phoneNo: phoneNo
    };
    setUser(userData);

    // حفظ في localStorage
    localStorage.setItem('auth_token', response.token);
    localStorage.setItem('user_data', JSON.stringify(userData));
    localStorage.setItem('user_branches', JSON.stringify(branches));

    // إذا كان فرع واحد، اختره تلقائياً
    if (branches.length === 1) {
      const selectedBranch = branches[0];
      
      setSelectedBranch(selectedBranch);
      setAuthHeaders(response.token, selectedBranch.refCompanyId, selectedBranch.id, tenantId); // ⭐ تمرير tenantId
      localStorage.setItem('selected_branch', JSON.stringify(selectedBranch));
      setIsAuthenticatedState(true);
      
      if (onSuccess) {
        onSuccess(branches, selectedBranch);
      }
      
      setTimeout(() => loadUserPages(), 200);
      
    } else {
      const firstBranch = branches[0];
      setAuthHeaders(response.token, firstBranch.refCompanyId, firstBranch.id, tenantId); // ⭐ تمرير tenantId
      
      setIsAuthenticatedState(true);
      
      if (onSuccess) {
        onSuccess(branches);
      }
      
      setTimeout(() => loadUserPages(), 200);
    }
    
  } catch (error) {
    throw error;
  } finally {
    setIsLoading(false);
  }
};
  // دالة داخلية لاختيار الفرع
  const selectBranchInternal = async (branch: Branch, isFromLogin = false) => {
    try {
      setSelectedBranch(branch);
      
      // تحديث headers في axios
      if (token) {
        const savedTenantId = localStorage.getItem('tenant_id') || '';
        setAuthHeaders(token, branch.refCompanyId, branch.id, savedTenantId);
      }
      
      // حفظ الفرع المختار
      localStorage.setItem('selected_branch', JSON.stringify(branch));
      
      // ⭐ تحديث حالة المصادقة فوراً
      setIsAuthenticatedState(true);
      
      // تحميل الصفحات في الخلفية
      setTimeout(() => loadUserPages(), 200);
      
    } catch (error) {
      if (!isFromLogin) {
        throw error;
      }
    }
  };

  // اختيار فرع (للاستخدام الخارجي)
  const selectBranch = (branch: Branch) => {
    return selectBranchInternal(branch, false);
  };

  // تسجيل الخروج
  const logout = () => {
    setIsAuthenticatedState(false);
    setUser(null);
    setToken(null);
    setBranches([]);
    setSelectedBranch(null);
    setUserPages([]);
    
    // مسح البيانات من axios و localStorage
    clearAuthHeaders();
  };

  // التحقق من صلاحية الوصول لصفحة
  const hasPageAccess = (pageName: string): boolean => {
    return userPages.some(page => page.pageName === pageName && page.hasAccess);
  };

  // التحقق من صلاحية الوصول لوحدة
  const canAccessModule = (moduleId: number): boolean => {
    return userPages.some(page => page.module === moduleId && page.hasAccess);
  };

  const value: AuthContextType = {
    isAuthenticated: isAuthenticatedState,
    isLoading,
    user,
    token,
    branches,
    selectedBranch,
    userPages,
    login,
    logout,
    selectBranch,
    hasPageAccess,
    canAccessModule
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};


============================================================
FILE: src/contexts/ErrorContext.tsx
============================================================
// File: src/contexts/ErrorContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Snackbar, Alert, AlertTitle } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface ApiError {
  errorCode: number;
  errorMessage: string;
}


interface ErrorContextType {
  showError: (error: string | ApiError | ApiError[]) => void;
  showSuccess: (message: string) => void;
  showWarning: (message: string) => void;
  showInfo: (message: string) => void;
}

const ErrorContext = createContext<ErrorContextType | undefined>(undefined);

interface Props {
  children: ReactNode;
}

export const ErrorProvider: React.FC<Props> = ({ children }) => {
  const { t } = useTranslation();
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    title: '',
    severity: 'error' as 'error' | 'success' | 'warning' | 'info'
  });

  const showError = (error: string | ApiError | ApiError[]) => {
    let message = '';
    let title = t('errors.title');

    if (typeof error === 'string') {
      message = error;
    } else if (Array.isArray(error)) {
      // Multiple errors
      if (error.length === 1) {
        message = error[0].errorMessage;
        title = getErrorTitle(error[0].errorCode);
      } else {
        message = error.map(e => e.errorMessage).join('\n');
        title = t('errors.multipleErrors');
      }
    } else {
      // Single error object
      message = error.errorMessage;
      title = getErrorTitle(error.errorCode);
    }

    setSnackbar({
      open: true,
      message,
      title,
      severity: 'error'
    });
  };

  const showSuccess = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('success.title'),
      severity: 'success'
    });
  };

  const showWarning = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('warning.title'),
      severity: 'warning'
    });
  };

  const showInfo = (message: string) => {
    setSnackbar({
      open: true,
      message,
      title: t('info.title'),
      severity: 'info'
    });
  };

  const getErrorTitle = (errorCode: number): string => {
    switch (errorCode) {
      case 400:
        return t('errors.validationError');
      case 401:
        return t('errors.unauthorized');
      case 403:
        return t('errors.forbidden');
      case 404:
        return t('errors.notFound');
      case 409:
        return t('errors.conflict');
      case 500:
        return t('errors.serverError');
      default:
        return t('errors.title');
    }
  };

  const handleClose = (_event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  return (
    <ErrorContext.Provider value={{ showError, showSuccess, showWarning, showInfo }}>
      {children}
      
      <Snackbar
        open={snackbar.open}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity={snackbar.severity}
          variant="filled"
          sx={{ 
            width: '100%', 
            color: 'white',
            whiteSpace: 'pre-line' // للسماح بعرض أخطاء متعددة في أسطر منفصلة
          }}
        >
          <AlertTitle>{snackbar.title}</AlertTitle>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </ErrorContext.Provider>
  );
};

export const useError = (): ErrorContextType => {
  const context = useContext(ErrorContext);
  if (!context) {
    throw new Error('useError must be used within an ErrorProvider');
  }
  return context;
};


============================================================
FILE: src/contexts/POSContext.tsx
============================================================
// File: src/contexts/POSContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { PosScreen, getAll as getAllScreens } from 'src/utils/api/pagesApi/posScreensApi';
import { Product, getAll as getAllProducts } from 'src/utils/api/pagesApi/productsApi';

interface POSContextType {
  screens: PosScreen[];
  products: Product[];
  selectedScreen: PosScreen | null;
  selectedScreenPath: PosScreen[];
  loading: boolean;
  error: string | null;
  setSelectedScreen: (screen: PosScreen | null) => void;
  navigateToScreen: (screen: PosScreen) => void;
  navigateBack: () => void;
  getProductsByScreen: (screenId: string) => Product[];
  refreshData: () => Promise<void>;
}

const POSContext = createContext<POSContextType | undefined>(undefined);

interface POSProviderProps {
  children: ReactNode;
}

export const POSProvider: React.FC<POSProviderProps> = ({ children }) => {
  const [screens, setScreens] = useState<PosScreen[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedScreen, setSelectedScreen] = useState<PosScreen | null>(null);
  const [selectedScreenPath, setSelectedScreenPath] = useState<PosScreen[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // تحميل البيانات الأولية
  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [screensData, productsData] = await Promise.all([
        getAllScreens(),
        getAllProducts(1, 1000) // جلب عدد كبير من المنتجات
      ]);
      
      setScreens(screensData);
      setProducts(productsData.data);
      
      // اختيار أول screen كافتراضي
      if (screensData.length > 0) {
        setSelectedScreen(screensData[0]);
        setSelectedScreenPath([screensData[0]]);
      }
    } catch (err: any) {
      setError(err.message || 'حدث خطأ في تحميل البيانات');
      console.error('Error loading POS data:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  // التنقل إلى screen معين
  const navigateToScreen = (screen: PosScreen) => {
    setSelectedScreen(screen);
    
    // إذا كان الـ screen له children، أضفه للمسار
    if (screen.children && screen.children.length > 0) {
      setSelectedScreenPath(prev => [...prev, screen]);
    } else {
      // إذا لم يكن له children، استبدل آخر عنصر في المسار
      setSelectedScreenPath(prev => {
        const newPath = [...prev];
        newPath[newPath.length - 1] = screen;
        return newPath;
      });
    }
  };

  // العودة للخلف في المسار
  const navigateBack = () => {
    if (selectedScreenPath.length > 1) {
      const newPath = selectedScreenPath.slice(0, -1);
      setSelectedScreenPath(newPath);
      setSelectedScreen(newPath[newPath.length - 1]);
    }
  };

  // الحصول على المنتجات الخاصة بـ screen معين
  const getProductsByScreen = (screenId: string): Product[] => {
    return products.filter(product => 
      product.posScreenId === screenId && 
      product.isActive &&
      product.productType === 1 // منتجات POS فقط
    );
  };

  const refreshData = async () => {
    await loadData();
  };

  const value: POSContextType = {
    screens,
    products,
    selectedScreen,
    selectedScreenPath,
    loading,
    error,
    setSelectedScreen,
    navigateToScreen,
    navigateBack,
    getProductsByScreen,
    refreshData
  };

  return (
    <POSContext.Provider value={value}>
      {children}
    </POSContext.Provider>
  );
};

export const usePOS = (): POSContextType => {
  const context = useContext(POSContext);
  if (!context) {
    throw new Error('usePOS must be used within a POSProvider');
  }
  return context;
};


============================================================
FILE: src/contexts/ProductCopyPasteContext.tsx
============================================================
// File: src/contexts/ProductCopyPasteContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface ProductCopyData {
  // بيانات المنتج الأساسية
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  expirationDays: number;
  
  // بيانات الأسعار (بدون الأسماء والأسعار)
  priceTemplates: Array<{
    unitId: string;
    unitFactor: number;
    barcode: string; // سيكون فارغ عند اللصق
    productComponents: Array<{
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
  }>;
}

interface ProductCopyPasteContextType {
  copiedData: ProductCopyData | null;
  copyProduct: (data: ProductCopyData) => void;
  pasteProduct: () => ProductCopyData | null;
  clearCopiedData: () => void;
  hasCopiedData: boolean;
}

const ProductCopyPasteContext = createContext<ProductCopyPasteContextType | undefined>(undefined);

export const ProductCopyPasteProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [copiedData, setCopiedData] = useState<ProductCopyData | null>(null);

  const copyProduct = (data: ProductCopyData) => {
    setCopiedData(data);
    // حفظ في localStorage للاحتفاظ بالبيانات حتى لو تم إعادة تحميل الصفحة
    localStorage.setItem('productCopyData', JSON.stringify(data));
  };

  const pasteProduct = (): ProductCopyData | null => {
    if (copiedData) return copiedData;
    
    // محاولة استرداد من localStorage
    const savedData = localStorage.getItem('productCopyData');
    if (savedData) {
      try {
        const parsed = JSON.parse(savedData);
        setCopiedData(parsed);
        return parsed;
      } catch (error) {
        }
    }
    
    return null;
  };

  const clearCopiedData = () => {
    setCopiedData(null);
    localStorage.removeItem('productCopyData');
  };

  const hasCopiedData = copiedData !== null || localStorage.getItem('productCopyData') !== null;

  return (
    <ProductCopyPasteContext.Provider value={{
      copiedData,
      copyProduct,
      pasteProduct,
      clearCopiedData,
      hasCopiedData
    }}>
      {children}
    </ProductCopyPasteContext.Provider>
  );
};

export const useProductCopyPaste = () => {
  const context = useContext(ProductCopyPasteContext);
  if (context === undefined) {
    throw new Error('useProductCopyPaste must be used within a ProductCopyPasteProvider');
  }
  return context;
};


============================================================
FILE: src/hoc/withPermissions.tsx
============================================================
// File: src/hoc/withPermissions.tsx
import React from 'react';
import { useAuth } from 'src/contexts/AuthContext';
import { usePermissions } from 'src/hooks/usePermissions';
import UnauthorizedPage from 'src/Pages/errors/UnauthorizedPage';
import { Box, CircularProgress, Typography } from '@mui/material';

interface PermissionConfig {
  pageName?: string;
  pageId?: number;
  moduleId?: number;
  requiredPermissions?: string[];
}

// ⭐ حل مضمون: غير هذا لـ false لما تخلص development
const BYPASS_PERMISSIONS = true;

const withPermissions = <P extends object>(
  WrappedComponent: React.ComponentType<P>,
  config: PermissionConfig
) => {
  const PermissionWrapper: React.FC<P> = (props) => {
    const { hasPageAccess, canAccessModule, isLoading: authLoading } = useAuth();
    const { hasPermission, loading: permLoading } = usePermissions();

    // ⭐ إذا BYPASS_PERMISSIONS = true، اعطي كل الصلاحيات
    if (BYPASS_PERMISSIONS) {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };

      return <WrappedComponent {...props} {...allPermissions} />;
    }

    // Loading state
    if (authLoading || permLoading) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '50vh',
            gap: 2
          }}
        >
          <CircularProgress />
          <Typography>جاري التحقق من الصلاحيات...</Typography>
        </Box>
      );
    }

    // التحقق من صلاحية الصفحة
    if (config.pageName && !hasPageAccess(config.pageName)) {
      return <UnauthorizedPage />;
    }

    // التحقق من صلاحية الوحدة
    if (config.moduleId && !canAccessModule(config.moduleId)) {
      return <UnauthorizedPage />;
    }

    // التحقق من صلاحيات محددة
    if (config.pageId && config.requiredPermissions) {
      const hasAllPermissions = config.requiredPermissions.every(permission =>
        hasPermission(config.pageId!, permission)
      );
      
      if (!hasAllPermissions) {
        return <UnauthorizedPage />;
      }
    }

    // إضافة الصلاحيات كـ props للمكون
    const permissionProps = {
      canAdd: config.pageId ? hasPermission(config.pageId, 'Add') : true,
      canEdit: config.pageId ? hasPermission(config.pageId, 'Edit') : true,
      canDelete: config.pageId ? hasPermission(config.pageId, 'Delete') : true,
      canExport: config.pageId ? hasPermission(config.pageId, 'Export') : true,
      canImport: config.pageId ? hasPermission(config.pageId, 'Import') : true,
      canView: config.pageId ? hasPermission(config.pageId, 'View') : true,
    };

    return <WrappedComponent {...props} {...permissionProps} />;
  };

  PermissionWrapper.displayName = `withPermissions(${WrappedComponent.displayName || WrappedComponent.name})`;
  
  return PermissionWrapper;
};

export default withPermissions;


============================================================
FILE: src/layouts/blank/BlankLayout.tsx
============================================================
import { Outlet } from "react-router";
import LoadingBar from '../../LoadingBar';

const BlankLayout = () => (
  <>
    <LoadingBar />
    <Outlet />
  </>
);

export default BlankLayout;


============================================================
FILE: src/layouts/full/horizontal/header/Header.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import {
  IconButton,
  Box,
  AppBar,
  useMediaQuery,
  Toolbar,
  styled,
  Stack,
  Theme,
} from '@mui/material';

import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar, setDarkMode } from 'src/store/customizer/CustomizerSlice';
import { IconMenu2, IconMoon, IconSun } from '@tabler/icons-react';
import Notifications from 'src/layouts/full/vertical/header/Notification';
import Cart from 'src/layouts/full/vertical/header/Cart';
import Profile from 'src/layouts/full/vertical/header/Profile';
import Search from 'src/layouts/full/vertical/header/Search';
import Language from 'src/layouts/full/vertical/header/Language';
import Logo from 'src/layouts/full/shared/logo/Logo';
import { AppState } from 'src/store/Store';

const Header = () => {
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',

    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    margin: '0 auto',
    width: '100%',
    color: `${theme.palette.text.secondary} !important`,
  }));

  return (
    <AppBarStyled position="sticky" color="default" elevation={8}>
      <ToolbarStyled
        sx={{
          maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
        }}
      >
        <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box>
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        {lgDown ? (
          <IconButton
            color="inherit"
            aria-label="menu"
            onClick={() => dispatch(toggleMobileSidebar())}
          >
            <IconMenu2 />
          </IconButton>
        ) : (
          ''
        )}
        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        {lgUp ? (
          <>
          </>
        ) : null}
        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>
          <Notifications />

          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;


============================================================
FILE: src/layouts/full/horizontal/navbar/NavCollapse/NavCollapse.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { useLocation } from 'react-router';

// mui imports
import { ListItemIcon, styled, ListItemText, Box, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';

// custom imports
import NavItem from '../NavItem/NavItem';

// plugins
import { IconChevronDown } from '@tabler/icons-react';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: any;
}

// FC Component For Dropdown Menu
const NavCollapse = ({ menu, level, pathWithoutLastPart, pathDirect, hideMenu }: NavCollapseProps) => {
  const Icon = menu.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const [open, setOpen] = React.useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);
  const menuIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  React.useEffect(() => {
    setOpen(false);
    menu.children.forEach((item: any) => {
      if (item.href === pathname) {
        setOpen(true);
      }
    });
  }, [pathname, menu.children]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    width: 'auto',
    padding: '5px 10px',
    position: 'relative',
    flexGrow: 'unset',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    whiteSpace: 'nowrap',
    color: open || pathname.includes(menu.href) || level < 1 ? 'white' : theme.palette.text.secondary,
    backgroundColor: open || pathname.includes(menu.href) ? theme.palette.primary.main : '',

    '&:hover': {
      backgroundColor:
        open || pathname.includes(menu.href)
          ? theme.palette.primary.main
          : theme.palette.primary.light,
    },
    '&:hover > .SubNav': { display: 'block' },
  }));

  const ListSubMenu = styled((props: any) => <Box {...props} />)(() => ({
    display: 'none',
    position: 'absolute',
    top: level > 1 ? `0px` : '35px',
    left: level > 1 ? `${level + 228}px` : '0px',
    padding: '10px',
    width: '250px',
    color: theme.palette.text.primary,
    boxShadow: theme.shadows[8],
    backgroundColor: theme.palette.background.paper,
  }));

  const listItemProps: {
    component: string;
  } = {
    component: 'li',
  };

  // If Menu has Children
  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={undefined} />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={function (): void {
            throw new Error('Function not implemented.');
          }} />
      );
    }
  });

  return (
    <React.Fragment key={menu.id}>
      <ListItemStyled
        {...listItemProps}
        selected={pathWithoutLastPart === menu.href}
        className={open ? 'selected' : ''}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {menuIcon}
        </ListItemIcon>
        <ListItemText color="inherit" sx={{ mr: 'auto' }}>
          {menu.title}
        </ListItemText>
        <IconChevronDown size="1rem" />
        <ListSubMenu component={'ul'} className="SubNav">
          {submenus}
        </ListSubMenu>
      </ListItemStyled>
    </React.Fragment>
  );
};

export default NavCollapse;


============================================================
FILE: src/layouts/full/horizontal/navbar/NavItem/NavItem.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { NavLink } from 'react-router';

// mui imports
import { ListItemIcon, List, styled, ListItemText, useTheme, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
};

interface ItemType {
  item: NavGroup;
  onClick: React.MouseEventHandler<HTMLElement>;
  hideMenu: any;
  level?: number | any;
  pathDirect: string;
}

const NavItem = ({ item, level, pathDirect, onClick }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item.icon;
  const theme = useTheme();
  const itemIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  const ListItemStyled2 = styled(ListItemButton)(() => ({
    padding: '5px 10px',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    marginBottom: level > 1 ? '3px' : '0px',
    color:
      level > 1 && pathDirect === item.href ? `${theme.palette.primary.main}!important` : theme.palette.text.secondary,

    '&:hover': {
      backgroundColor: theme.palette.primary.light,
    },
    '&.Mui-selected': {
      color: level > 1 ? theme.palette.primary.main : 'white!important',
      backgroundColor: level > 1 ? 'transparent' : theme.palette.primary.main,
      '&:hover': {
        backgroundColor: level > 1 ? '' : theme.palette.primary.main,
        color: 'white',
      },
    },
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item.id}>
      <ListItemStyled2
        {...listItemProps}
        disabled={item.disabled}
        selected={pathDirect === item.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {itemIcon}
        </ListItemIcon>
        <ListItemText>{item.title}</ListItemText>
      </ListItemStyled2>
    </List>
  );
};


export default NavItem;


============================================================
FILE: src/layouts/full/horizontal/navbar/NavListing/NavListing.tsx
============================================================
// File: src/layouts/sidebar/NavListing/NavListing.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Menudata from '../Menudata';
import { useLocation } from 'react-router';
import { Box, List, Theme, useMediaQuery } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { useTranslation } from 'react-i18next';
import NavItem from '../NavItem/NavItem';
import NavCollapse from '../NavCollapse/NavCollapse';
import { AppState } from 'src/store/Store';

const NavListing = () => {
  const { t } = useTranslation();
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const hideMenu = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';

  // دالة لترجمة عناصر القائمة
  const translateMenuItems = (items: any[]): any[] => {
    return items.map(item => ({
      ...item,
      title: t(item.title), // ترجمة العنوان
      children: item.children ? translateMenuItems(item.children) : undefined
    }));
  };

  const translatedMenuData = translateMenuItems(Menudata);

  return (
    <Box>
      <List sx={{ p: 0, display: 'flex', gap: '3px', zIndex: '100' }}>
        {translatedMenuData.map((item) => {
          if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id} 
                onClick={undefined}              
              />
            );
          } else {
            return (
              <NavItem 
                item={item} 
                key={item.id} 
                pathDirect={pathDirect} 
                hideMenu={hideMenu} 
                onClick={function (): void {
                  throw new Error('Function not implemented.');
                }} 
              />
            );
          }
        })}
      </List>
    </Box>
  );
};

export default NavListing;


============================================================
FILE: src/layouts/full/horizontal/navbar/Navigation.tsx
============================================================
import { useMediaQuery, Box, Drawer, Container, Theme } from '@mui/material';
import NavListing from './NavListing/NavListing';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import SidebarItems from '../../vertical/sidebar/SidebarItems';
import { AppState } from 'src/store/Store';

const Navigation = () => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  if (lgUp) {
    return (
      <Box sx={{ borderBottom: '1px solid rgba(0,0,0,0.05)' }} py={2}>
        {/* ------------------------------------------- */}
        {/* Sidebar for desktop */}
        {/* ------------------------------------------- */}
        <Container
          sx={{
            maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
          }}
        >
          <NavListing />
        </Container>
      </Box>
    );
  }

  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
        },
      }}
    >
      {/* ------------------------------------------- */}
      {/* Logo */}
      {/* ------------------------------------------- */}
      <Box px={2}>
        <Logo />
      </Box>
      {/* ------------------------------------------- */}
      {/* Sidebar For Mobile */}
      {/* ------------------------------------------- */}
      <SidebarItems />
    </Drawer>
  );
};

export default Navigation;


============================================================
FILE: src/layouts/full/shared/breadcrumb/Breadcrumb.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, Box, Breadcrumbs, Link, Theme } from '@mui/material';
import { NavLink } from 'react-router';

import breadcrumbImg from 'src/assets/images/breadcrumb/ChatBc.png';
import { IconCircle } from '@tabler/icons-react';

interface BreadCrumbType {
  subtitle?: string;
  items?: any[];
  title: string;
  children?: any;
}

const Breadcrumb = ({ subtitle, items, title, children }: BreadCrumbType) => (
  <Grid
    container
    sx={{
      backgroundColor: 'primary.light',
      borderRadius: (theme: Theme) => theme.shape.borderRadius / 4,
      p: '30px 25px 20px',
      marginBottom: '30px',
      position: 'relative',
      overflow: 'hidden',
    }}
  >
    <Grid
      mb={1}
      size={{
        xs: 12,
        sm: 6,
        lg: 8
      }}>
      <Typography variant="h4">{title}</Typography>
      <Typography color="textSecondary" variant="h6" fontWeight={400} mt={0.8} mb={0}>
        {subtitle}
      </Typography>
      <Breadcrumbs
        separator={
          <IconCircle
            size="5"
            fill="textSecondary"
            fillOpacity={'0.6'}
            style={{ margin: '0 5px' }}
          />
        }
        sx={{ alignItems: 'center', mt: items ? '10px' : '' }}
        aria-label="breadcrumb"
      >
        {items
          ? items.map((item) => (
            <div key={item.title}>
              {item.to ? (
                <Link underline="none" color="inherit" component={NavLink} to={item.to}>
                  {item.title}
                </Link>
              ) : (
                <Typography color="textPrimary">{item.title}</Typography>
              )}
            </div>
          ))
          : ''}
      </Breadcrumbs>
    </Grid>
    <Grid
      display="flex"
      alignItems="flex-end"
      size={{
        xs: 12,
        sm: 6,
        lg: 4
      }}>
      <Box
        sx={{
          display: { xs: 'none', md: 'block', lg: 'flex' },
          alignItems: 'center',
          justifyContent: 'flex-end',
          width: '100%',
        }}
      >
        {children ? (
          <Box sx={{ top: '0px', position: 'absolute' }}>{children}</Box>
        ) : (
          <>
            <Box sx={{ top: '0px', position: 'absolute' }}>
              <img src={breadcrumbImg} alt={breadcrumbImg} width={'165px'} />
            </Box>
          </>
        )}
      </Box>
    </Grid>
  </Grid>
);

export default Breadcrumb;


============================================================
FILE: src/layouts/full/shared/customizer/Customizer.tsx
============================================================
import { FC, useState } from 'react';
import {
  Fab,
  Drawer,
  Grid2 as Grid,
  Slider,
  Divider,
  styled,
  IconButton,
  Typography,
  Tooltip,
  Stack,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import Box, { BoxProps } from '@mui/material/Box';
import { IconX, IconSettings, IconCheck } from '@tabler/icons-react';
import {
  setTheme,
  setDir,
  setDarkMode,
  toggleLayout,
  toggleSidebar,
  toggleHorizontal,
  setBorderRadius,
  setCardShadow,
} from 'src/store/customizer/CustomizerSlice';
import { AppState } from 'src/store/Store';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import WbSunnyTwoToneIcon from '@mui/icons-material/WbSunnyTwoTone';
import DarkModeTwoToneIcon from '@mui/icons-material/DarkModeTwoTone';
import SwipeLeftAltTwoToneIcon from '@mui/icons-material/SwipeLeftAltTwoTone';
import SwipeRightAltTwoToneIcon from '@mui/icons-material/SwipeRightAltTwoTone';
import AspectRatioTwoToneIcon from '@mui/icons-material/AspectRatioTwoTone';
import CallToActionTwoToneIcon from '@mui/icons-material/CallToActionTwoTone';
import ViewSidebarTwoToneIcon from '@mui/icons-material/ViewSidebarTwoTone';
import WebAssetTwoToneIcon from '@mui/icons-material/WebAssetTwoTone';
import { ViewComfyTwoTone, PaddingTwoTone, BorderOuter } from '@mui/icons-material';

const SidebarWidth = '320px';
interface colors {
  id: number;
  bgColor: string;
  disp?: string;
}
const Customizer: FC = () => {
  const [showDrawer, setShowDrawer] = useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);

  const dispatch = useDispatch();

  const StyledBox = styled(Box)<BoxProps>(({ theme }) => ({
    boxShadow: theme.shadows[8],
    padding: '20px',
    cursor: 'pointer',
    justifyContent: 'center',
    display: 'flex',
    transition: '0.1s ease-in',
    border: '1px solid rgba(145, 158, 171, 0.12)',
    '&:hover': {
      transform: 'scale(1.05)',
    },
  }));

  const thColors: colors[] = [
    {
      id: 1,
      bgColor: '#5D87FF',
      disp: 'BLUE_THEME',
    },
    {
      id: 2,
      bgColor: '#0074BA',
      disp: 'AQUA_THEME',
    },
    {
      id: 3,
      bgColor: '#763EBD',
      disp: 'PURPLE_THEME',
    },
    {
      id: 4,
      bgColor: '#0A7EA4',
      disp: 'GREEN_THEME',
    },
    {
      id: 5,
      bgColor: '#01C0C8',
      disp: 'CYAN_THEME',
    },
    {
      id: 6,
      bgColor: '#FA896B',
      disp: 'ORANGE_THEME',
    },
  ];

  return (
    (<div>
      {/* ------------------------------------------- */}
      {/* --Floating Button to open customizer ------ */}
      {/* ------------------------------------------- */}
      <Tooltip title="Settings">
        <Fab
          color="primary"
          aria-label="settings"
          sx={{ position: 'fixed', right: '25px', bottom: '15px' }}
          onClick={() => setShowDrawer(true)}
        >
          <IconSettings stroke={1.5} />
        </Fab>
      </Tooltip>
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{
          sx: {
            width: SidebarWidth,
          },
        }}
      >
        {/* ------------------------------------------- */}
        {/* ------------ Customizer Sidebar ------------- */}
        {/* ------------------------------------------- */}
        <Scrollbar sx={{ height: 'calc(100vh - 5px)' }}>
          <Box p={2} display="flex" justifyContent={'space-between'} alignItems="center">
            <Typography variant="h4">Settings</Typography>

            <IconButton color="inherit" onClick={() => setShowDrawer(false)}>
              <IconX size="1rem" />
            </IconButton>
          </Box>
          <Divider />
          <Box p={3}>
            {/* ------------------------------------------- */}
            {/* ------------ Dark light theme setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDarkMode('light'))} display="flex" gap={1}>
                <WbSunnyTwoToneIcon
                  color={customizer.activeMode === 'light' ? 'primary' : 'inherit'}
                />
                Light
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDarkMode('dark'))} display="flex" gap={1}>
                <DarkModeTwoToneIcon
                  color={customizer.activeMode === 'dark' ? 'primary' : 'inherit'}
                />
                Dark
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ RTL theme setting -------------*/}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Direction
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDir('ltr'))} display="flex" gap={1}>
                <SwipeLeftAltTwoToneIcon
                  color={customizer.activeDir === 'ltr' ? 'primary' : 'inherit'}
                />{' '}
                LTR
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDir('rtl'))} display="flex" gap={1}>
                <SwipeRightAltTwoToneIcon
                  color={customizer.activeDir === 'rtl' ? 'primary' : 'inherit'}
                />{' '}
                RTL
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Colors
            </Typography>
            <Grid container spacing={2}>
              {thColors.map((thcolor) => (
                <Grid key={thcolor.id} size={4}>
                  <StyledBox onClick={() => dispatch(setTheme(thcolor.disp))}>
                    <Tooltip title={`${thcolor.disp}`} placement="top">
                      <Box
                        sx={{
                          backgroundColor: thcolor.bgColor,
                          width: '25px',
                          height: '25px',
                          borderRadius: '60px',
                          alignItems: 'center',
                          justifyContent: 'center',
                          display: 'flex',
                          color: 'white',
                        }}
                        aria-label={`${thcolor.bgColor}`}
                      >
                        {customizer.activeTheme === thcolor.disp ? <IconCheck width={13} /> : ''}
                      </Box>
                    </Tooltip>
                  </StyledBox>
                </Grid>
              ))}
            </Grid>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Horizontal / Vertical ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Layout Type
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleHorizontal(false))} display="flex" gap={1}>
                <ViewComfyTwoTone
                  color={customizer.isHorizontal === false ? 'primary' : 'inherit'}
                />
                Vertical
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleHorizontal(true))} display="flex" gap={1}>
                <PaddingTwoTone color={customizer.isHorizontal === true ? 'primary' : 'inherit'} />
                Horizontal
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Boxed / Full ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Container Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleLayout('boxed'))} display="flex" gap={1}>
                <CallToActionTwoToneIcon
                  color={customizer.isLayout === 'boxed' ? 'primary' : 'inherit'}
                />
                Boxed
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleLayout('full'))} display="flex" gap={1}>
                <AspectRatioTwoToneIcon
                  color={customizer.isLayout === 'full' ? 'primary' : 'inherit'}
                />
                Full
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Sidebar Color setting ------------- */}
            {/* ------------------------------------------- */}

            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            {customizer.isHorizontal ? (
              ''
            ) : (
              <>
                <Typography variant="h6" gutterBottom>
                  Sidebar Type
                </Typography>
                <Stack direction={'row'} gap={2} my={2}>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <WebAssetTwoToneIcon color={!customizer.isCollapse ? 'primary' : 'inherit'} />
                    Full
                  </StyledBox>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <ViewSidebarTwoToneIcon color={customizer.isCollapse ? 'primary' : 'inherit'} />
                    mini
                  </StyledBox>
                </Stack>
              </>
            )}
            <Box pt={4} />
            <Typography variant="h6" gutterBottom>
              Card With
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setCardShadow(false))} display="flex" gap={1}>
                <BorderOuter color={!customizer.isCardShadow ? 'primary' : 'inherit'} />
                Border
              </StyledBox>
              <StyledBox onClick={() => dispatch(setCardShadow(true))} display="flex" gap={1}>
                <CallToActionTwoToneIcon color={customizer.isCardShadow ? 'primary' : 'inherit'} />
                Shadow
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Border Radius
            </Typography>

            <Slider
              size="small"
              value={customizer.borderRadius}
              aria-label="Small"
              min={4}
              max={24}
              onChange={(event: any) => dispatch(setBorderRadius(event.target.value))}
              valueLabelDisplay="auto"
            />
          </Box>
        </Scrollbar>
      </Drawer>
    </div>)
  );
};

export default Customizer;


============================================================
FILE: src/layouts/full/shared/customizer/RTL.tsx
============================================================
// File: src/layouts/full/shared/customizer/RTL.tsx
import React, { useEffect, useMemo } from 'react';
import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
import rtlPlugin from 'stylis-plugin-rtl';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

interface RTLType {
  children: React.ReactNode;
}

// إنشاء cache مرة واحدة فقط
const rtlCache = createCache({
  key: 'muirtl',
  prepend: true,
  stylisPlugins: [rtlPlugin],
});

const ltrCache = createCache({
  key: 'muiltr',
  prepend: true,
});

const RTL = (props: RTLType) => {
  const { children } = props;
  const customizer = useSelector((state: AppState) => state.customizer);
  const direction = customizer.activeDir;

  // استخدام useMemo لتجنب إعادة إنشاء cache
  const cache = useMemo(() => {
    return direction === 'rtl' ? rtlCache : ltrCache;
  }, [direction]);

  useEffect(() => {
    document.dir = direction;
    document.documentElement.dir = direction;
    
    // إضافة/إزالة class للـ body
    document.body.classList.remove('rtl', 'ltr');
    document.body.classList.add(direction);
  }, [direction]);

  return <CacheProvider value={cache}>{children}</CacheProvider>;
};

export default RTL;


============================================================
FILE: src/layouts/full/shared/loadable/Loadable.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';

// project imports
import Spinner from 'src/views/spinner/Spinner';

// ===========================|| LOADABLE - LAZY LOADING ||=========================== //

const Loadable = (Component: any) => (props: any) =>
  (
    <Suspense fallback={<Spinner />}>
      <Component {...props} />
    </Suspense>
  );

export default Loadable;


============================================================
FILE: src/layouts/full/shared/logo/Logo.tsx
============================================================
import { FC } from 'react';
import { useSelector } from 'src/store/Store';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDark } from 'src/assets/images/logos/dark-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDarkRTL } from 'src/assets/images/logos/dark-rtl-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLight } from 'src/assets/images/logos/light-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLightRTL } from 'src/assets/images/logos/light-logo-rtl.svg';
import { styled } from '@mui/material';
import { AppState } from 'src/store/Store';

const Logo: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const LinkStyled = styled(Link)(() => ({
    height: customizer.TopbarHeight,
    width: customizer.isCollapse ? '40px' : '180px',
    overflow: 'hidden',
    display: 'block',
  }));

  if (customizer.activeDir === 'ltr') {
    return (
      <LinkStyled
        to="/"
        style={{
          display: 'flex',
          alignItems: 'center',
        }}
      >
        {customizer.activeMode === 'dark' ? (
          <LogoLight />
        ) : (
          <LogoDark />
        )}
      </LinkStyled>
    );
  }

  return (
    <LinkStyled
      to="/"
      style={{
        display: 'flex',
        alignItems: 'center',
      }}
    >
      {customizer.activeMode === 'dark' ? (
        <LogoDarkRTL />
      ) : (
        <LogoLightRTL />
      )}
    </LinkStyled>
  );
};

export default Logo;


============================================================
FILE: src/layouts/full/shared/welcome/Welcome.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { Snackbar, Alert, AlertTitle } from '@mui/material';

const Welcome = () => {
  const [open, setOpen] = React.useState(false);

  const handleClick = () => {
    setOpen(true);
  };

  const handleClose = (reason: any) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpen(false);
  };
  React.useEffect(() => {
    // Update the document title using the browser API
    const timer = setTimeout(() => {
      handleClick();
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  return (
    <React.Fragment>
      <Snackbar
        open={open}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity="info"
          variant="filled"
          sx={{ width: '100%', color: 'white' }}
        >
          <AlertTitle>Welcome To Horex ERP</AlertTitle>
          Easy to Manage your Inventory!!!
        </Alert>
      </Snackbar>
    </React.Fragment>
  );
};

export default Welcome;


============================================================
FILE: src/layouts/full/vertical/header/AppLinks.tsx
============================================================
import { Avatar, Box, Typography, Grid2 as Grid, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const AppLinks = () => {
  return (
    (<Grid container spacing={3} mb={4}>
      {dropdownData.appsLink.map((links, index) => (
        <Grid
          key={index}
          size={{
            lg: 6
          }}>
          <Link to={links.href} className="hover-text-primary">
            <Stack direction="row" spacing={2}>
              <Box
                minWidth="45px"
                height="45px"
                bgcolor="grey.100"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Avatar
                  src={links.avatar}
                  alt={links.avatar}
                  sx={{
                    width: 24,
                    height: 24,
                    borderRadius: 0,
                  }}
                />
              </Box>
              <Box>
                <Typography
                  variant="subtitle2"
                  fontWeight={600}
                  color="textPrimary"
                  noWrap
                  className="text-hover"
                  sx={{
                    width: '240px',
                  }}
                >
                  {links.title}
                </Typography>
                <Typography
                  color="textSecondary"
                  variant="subtitle2"
                  fontSize="12px"
                  sx={{
                    width: '240px',
                  }}
                  noWrap
                >
                  {links.subtext}
                </Typography>
              </Box>
            </Stack>
          </Link>
        </Grid>
      ))}
    </Grid>)
  );
};

export default AppLinks;


============================================================
FILE: src/layouts/full/vertical/header/Cart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { IconShoppingCart, IconX } from '@tabler/icons-react';
import { Box, Typography, Badge, Drawer, IconButton } from '@mui/material';
import CartItems from './CartItem';

const Cart = () => {
  // Get Products
  const [showDrawer, setShowDrawer] = useState(false);
  const handleDrawerClose = () => {
    setShowDrawer(false);
  };

  const cartContent = (
    <Box>
      {/* ------------------------------------------- */}
      {/* Cart Content */}
      {/* ------------------------------------------- */}
      <Box>
        <CartItems />
      </Box>
    </Box>
  );

  return (
    <Box>
      <IconButton
        size="large"
        color="inherit"
        onClick={() => setShowDrawer(true)}
        sx={{
          color: 'text.secondary',
          ...(showDrawer && {
            color: 'primary.main',
          }),
        }}
      >
        <Badge color="error">
          <IconShoppingCart size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Cart Sidebar */}
      {/* ------------------------------------------- */}
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{ sx: { maxWidth: '500px' } }}
      >
        <Box display="flex" alignItems="center" p={3} pb={0} justifyContent="space-between">
          <Typography variant="h5" fontWeight={600}>
            Shopping Cart
          </Typography>
          <Box>
            <IconButton
              color="inherit"
              sx={{
                color: (theme) => theme.palette.grey.A200,
              }}
              onClick={handleDrawerClose}
            >
              <IconX size="1rem" />
            </IconButton>
          </Box>
        </Box>

        {/* component */}
        {cartContent}
        {/* ------------------------------------------- */}
        {/* Checkout  */}
        {/* ------------------------------------------- */}
        <Box px={3} mt={2}>
        </Box>
      </Drawer>
    </Box>
  );
};

export default Cart;


============================================================
FILE: src/layouts/full/vertical/header/CartItem.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import emptyCart from 'src/assets/images/products/empty-shopping-cart.svg';

const CartItems = () => {

  // Get Products

  return (
    <Box px={3}>
        <Box textAlign="center" mb={3}>
          <img src={emptyCart} alt="cart" width="200px" />
          <Typography variant="h5" mb={2}>
            Cart is Empty
          </Typography>
          <Button component={Link} to="/apps/ecommerce/shop" variant="contained">
            Go back to Shopping
          </Button>
        </Box>
    </Box>
  );
};

export default CartItems;


============================================================
FILE: src/layouts/full/vertical/header/Header.tsx
============================================================
// File: src/layouts/full/vertical/header/Header.tsx
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import * as React from 'react';
import {
  IconButton,
  Box,
  AppBar,
  useMediaQuery,
  Toolbar,
  styled,
  Stack,
  Theme,
} from '@mui/material';
import { Link } from 'react-router-dom'; // ⭐ إضافة Link

import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar, setDarkMode } from 'src/store/customizer/CustomizerSlice';
import { IconMenu2, IconMoon, IconSun, IconHttpPost } from '@tabler/icons-react'; // ⭐ إضافة IconShoppingCart
import Notifications from 'src/layouts/full/vertical/header/Notification';
import Cart from 'src/layouts/full/vertical/header/Cart';
import Profile from 'src/layouts/full/vertical/header/Profile';
import Search from 'src/layouts/full/vertical/header/Search';
import Language from 'src/layouts/full/vertical/header/Language';
import PrintButton from 'src/layouts/full/vertical/header/PrintButton';
// import Logo from 'src/layouts/full/shared/logo/Logo';
import BranchSelector from 'src/components/BranchSelector';
import { useAuth } from 'src/contexts/AuthContext';
import { AppState } from 'src/store/Store';

const Header = () => {
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const { selectedBranch } = useAuth();

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',

    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    margin: '0 auto',
    width: '100%',
    color: `${theme.palette.text.secondary} !important`,
  }));

  return (
    <AppBarStyled position="sticky" color="default" elevation={8}>
      <ToolbarStyled
        sx={{
          maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
        }}
      >
        {/* <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box> */}
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        {lgDown ? (
          <IconButton
            color="inherit"
            aria-label="menu"
            onClick={() => dispatch(toggleMobileSidebar())}
          >
            <IconMenu2 />
          </IconButton>
        ) : (
          ''
        )}
        
        {/* ------------------------------------------- */}
        {/* Branch Selector */}
        {/* ------------------------------------------- */}
        {selectedBranch && lgUp && (
          <Box sx={{ ml: 2 }}>
            <BranchSelector />
          </Box>
        )}
        
        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        {lgUp ? (
          <>
          </>
        ) : null}
        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          {/* Branch Selector for Mobile */}
          {selectedBranch && lgDown && (
            <BranchSelector />
          )}
          
          {/* ⭐ إضافة أيقونة المبيعات */}
          <IconButton
            color="inherit"
            component={Link}
            to="/pos/sales"
            aria-label="Sales"
            title="المبيعات"
            size="large"
            sx={{
              '&:hover': {
                backgroundColor: 'action.hover'
              }
            }}
          >
            <IconHttpPost size="30" stroke="1.5" />
          </IconButton>
          
          {/* ⭐ إضافة زرار الطباعة */}
          <PrintButton />
          
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>
          <Notifications />

          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;


============================================================
FILE: src/layouts/full/vertical/header/Language.tsx
============================================================
// File: src/layouts/full/header/Language.tsx
import React, { useCallback } from 'react';
import { Avatar, IconButton, Menu, MenuItem, Typography, Stack } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { setLanguage, setDir } from 'src/store/customizer/CustomizerSlice';
import FlagEn from 'src/assets/images/flag/icon-flag-en.svg';
import FlagEg from 'src/assets/images/flag/icon-flag-eg.svg';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';
import Cookies from 'js-cookie';

const Languages = [
  {
    flagname: 'English (UK)',
    icon: FlagEn,
    value: 'en',
    direction: 'ltr',
  },
  {
    flagname: 'عربي (Egypt)',
    icon: FlagEg,
    value: 'ar',
    direction: 'rtl',
  },
];

const Language = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const dispatch = useDispatch();
  const open = Boolean(anchorEl);
  const customizer = useSelector((state: AppState) => state.customizer);
  const currentLang = Languages.find((_lang) => _lang.value === customizer.isLanguage) || Languages[0];
  const { i18n } = useTranslation();

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // تحسين دالة تغيير اللغة
  const handleLanguageChange = useCallback((language: string) => {
    const selectedLang = Languages.find(l => l.value === language);
    if (selectedLang && customizer.isLanguage !== language) {
      // تطبيق التغييرات بشكل متزامن
      requestAnimationFrame(() => {
        dispatch(setLanguage(language));
        dispatch(setDir(selectedLang.direction));
        i18n.changeLanguage(language);
        
        document.documentElement.dir = selectedLang.direction;
        document.documentElement.lang = language;
        
        // تحديث body class
        document.body.classList.remove('rtl', 'ltr');
        document.body.classList.add(selectedLang.direction);
        
        // حفظ في الكوكيز
        Cookies.set('language', language, { expires: 365 });
        Cookies.set('direction', selectedLang.direction, { expires: 365 });
      });
    }
    
    handleClose();
  }, [dispatch, i18n, customizer.isLanguage]);

  return (
    <>
      <IconButton
        aria-label="language"
        onClick={handleClick}
        className="no-flip" // منع انقلاب الأيقونة
      >
        <Avatar src={currentLang.icon} alt={currentLang.value} sx={{ width: 20, height: 20 }} />
      </IconButton>
      <Menu
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        sx={{
          '& .MuiMenu-paper': {
            width: '200px',
          },
        }}
      >
        {Languages.map((option, index) => (
          <MenuItem
            key={index}
            sx={{ py: 2, px: 3 }}
            onClick={() => handleLanguageChange(option.value)}
          >
            <Stack direction="row" spacing={1} alignItems="center">
              <Avatar 
                src={option.icon} 
                alt={option.icon} 
                sx={{ width: 20, height: 20 }} 
                className="no-flip"
              />
              <Typography>{option.flagname}</Typography>
              <Typography variant="caption" color="text.secondary">
                ({option.direction.toUpperCase()})
              </Typography>
            </Stack>
          </MenuItem>
        ))}
      </Menu>
    </>
  );
};

export default Language;


============================================================
FILE: src/layouts/full/vertical/header/Message.tsx
============================================================
import { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Divider,
  Button,
  Stack
} from '@mui/material';
import * as dropdownData from './data';

import { IconChecks, IconClock, IconMessageDots } from '@tabler/icons-react';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const Message = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : '',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconMessageDots size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '385px',
          },
        }}
      >
        <Stack direction="row" p={2} justifyContent="space-between" alignItems="center">
          <Box>
            <Typography variant="h5">Messages</Typography>
            <Typography variant="subtitle2" color="textSecondary">
              You have 3 unread messages
            </Typography>
          </Box>
          <IconChecks width={20} height={20} />
        </Stack>
        <Divider />
        {dropdownData.messages.map((message) => (
          <Box key={message.title}>
            <MenuItem sx={{ py: 2 }}>
              <Stack direction="row" spacing={2}>
                <Avatar
                  src={message.avatar}
                  alt={message.avatar}
                  sx={{
                    width: 45,
                    height: 45,
                  }}
                />
                <Box>
                  <Typography
                    variant="h6"
                    noWrap
                    sx={{
                      width: '240px',
                    }}
                  >
                    {message.title}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle1"
                    fontWeight={400}
                    sx={{
                      width: '240px',
                    }}
                    noWrap
                  >
                    {message.subtitle}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle2"
                    display="flex"
                    alignItems="center"
                    gap={1}
                  >
                    <IconClock width={16} height={16} />
                    {message.time}
                  </Typography>
                </Box>
              </Stack>
            </MenuItem>
            <Divider
              style={{
                marginTop: 0,
                marginBottom: 0,
              }}
            />
          </Box>
        ))}
        <Box p={2} pb={1}>
          <Button variant="contained" color="primary" fullWidth>
            See all messages
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Message;


============================================================
FILE: src/layouts/full/vertical/header/MobileRightSidebar.tsx
============================================================
// // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// // @ts-ignore
// import React, { useState } from 'react';
// import {
//   IconApps,
//   IconCalendarEvent,
//   IconChevronDown,
//   IconChevronUp,
//   IconGridDots,
//   IconMail,
//   IconMessages,
// } from '@tabler/icons-react';
// import {
//   Box,
//   Typography,
//   Drawer,
//   IconButton,
//   List,
//   ListItemButton,
//   ListItemIcon,
//   ListItemText,
//   Collapse,
// } from '@mui/material';

// import { Link } from 'react-router';
// import AppLinks from './AppLinks';
// import QuickLinks from './QuickLinks';

// const MobileRightSidebar = () => {
//   const [showDrawer, setShowDrawer] = useState(false);

//   const [open, setOpen] = React.useState(true);

//   const handleClick = () => {
//     setOpen(!open);
//   };

//   const cartContent = (
//     <Box>
//       {/* ------------------------------------------- */}
//       {/* Apps Content */}
//       {/* ------------------------------------------- */}
//       <Box px={1}>
//         <List
//           sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}
//           component="nav"
//           aria-labelledby="nested-list-subheader"
//         >
//           <ListItemButton component={Link} to="/apps/chats">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconMessages size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Chats
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton component={Link} to="/apps/calendar">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconCalendarEvent size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Calendar
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton component={Link} to="/apps/email">
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconMail size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Email
//               </Typography>
//             </ListItemText>
//           </ListItemButton>
//           <ListItemButton onClick={handleClick}>
//             <ListItemIcon sx={{ minWidth: 35 }}>
//               <IconApps size="21" stroke="1.5" />
//             </ListItemIcon>
//             <ListItemText>
//               <Typography variant="subtitle2" fontWeight={600}>
//                 Apps
//               </Typography>
//             </ListItemText>
//             {open ? (
//               <IconChevronDown size="21" stroke="1.5" />
//             ) : (
//               <IconChevronUp size="21" stroke="1.5" />
//             )}
//           </ListItemButton>
//           <Collapse in={open} timeout="auto" unmountOnExit>
//             <Box px={4} pt={3} overflow="hidden">
//               <AppLinks />
//             </Box>
//           </Collapse>
//         </List>
//       </Box>

//       <Box px={3} mt={3}>
//         <QuickLinks />
//       </Box>
//     </Box>
//   );

//   return (
//     <Box>
//       <IconButton
//         size="large"
//         color="inherit"
//         onClick={() => setShowDrawer(true)}
//         sx={{
//           ...(showDrawer && {
//             color: 'primary.main',
//           }),
//         }}
//       >
//         <IconGridDots size="21" stroke="1.5" />
//       </IconButton>
//       {/* ------------------------------------------- */}
//       {/* Cart Sidebar */}
//       {/* ------------------------------------------- */}
//       <Drawer
//         anchor="right"
//         open={showDrawer}
//         onClose={() => setShowDrawer(false)}
//         PaperProps={{ sx: { width: '300px' } }}
//       >
//         <Box p={3} pb={0}>
//           <Typography variant="h5" fontWeight={600}>
//             Navigation
//           </Typography>
//         </Box>

//         {/* component */}
//         {cartContent}
//       </Drawer>
//     </Box>
//   );
// };

// export default MobileRightSidebar;


============================================================
FILE: src/layouts/full/vertical/header/Navigation.tsx
============================================================
// import { useState } from 'react';
// import { Box, Menu, Typography, Button, Divider, Grid2 as Grid } from '@mui/material';
// import { Link } from 'react-router';
// import { IconChevronDown, IconHelp } from '@tabler/icons-react';
// import AppLinks from './AppLinks';
// import QuickLinks from './QuickLinks';
// // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// // @ts-ignore
// import React from 'react';

// const AppDD = () => {
//   const [anchorEl2, setAnchorEl2] = useState(null);

//   const handleClick2 = (event: any) => {
//     setAnchorEl2(event.currentTarget);
//   };

//   const handleClose2 = () => {
//     setAnchorEl2(null);
//   };

//   return (<>
//     <Box>
//       <Button
//         aria-label="show 11 new notifications"
//         color="inherit"
//         variant="text"
//         aria-controls="msgs-menu"
//         aria-haspopup="true"
//         sx={{
//           bgcolor: anchorEl2 ? 'primary.light' : '',
//           color: anchorEl2 ? 'primary.main' : (theme) => theme.palette.text.secondary,
//         }}
//         onClick={handleClick2}
//         endIcon={<IconChevronDown size="15" style={{ marginLeft: '-5px', marginTop: '2px' }} />}
//       >
//         Apps
//       </Button>
//       {/* ------------------------------------------- */}
//       {/* Message Dropdown */}
//       {/* ------------------------------------------- */}
//       <Menu
//         id="msgs-menu"
//         anchorEl={anchorEl2}
//         keepMounted
//         open={Boolean(anchorEl2)}
//         onClose={handleClose2}
//         anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}
//         transformOrigin={{ horizontal: 'left', vertical: 'top' }}
//         sx={{
//           '& .MuiMenu-paper': {
//             width: '850px',
//           },
//           '& .MuiMenu-paper ul': {
//             p: 0,
//           },
//         }}
//       >
//         <Grid container>
//           <Grid
//             display="flex"
//             size={{
//               sm: 8
//             }}>
//             <Box p={4} pr={0} pb={3}>
//               <AppLinks />
//               <Divider />
//               <Box
//                 sx={{
//                   display: {
//                     xs: 'none',
//                     sm: 'flex',
//                   },
//                 }}
//                 alignItems="center"
//                 justifyContent="space-between"
//                 pt={2}
//                 pr={4}
//               >
//                 <Link to="/faq">
//                   <Typography
//                     variant="subtitle2"
//                     fontWeight="600"
//                     color="textPrimary"
//                     display="flex"
//                     alignItems="center"
//                     gap="4px"
//                   >
//                     <IconHelp width={24} />
//                     Frequently Asked Questions
//                   </Typography>
//                 </Link>
//                 <Button variant="contained" color="primary">
//                   Check
//                 </Button>
//               </Box>
//             </Box>
//             <Divider orientation="vertical" />
//           </Grid>
//           <Grid
//             size={{
//               sm: 4
//             }}>
//             <Box p={4}>
//               <QuickLinks />
//             </Box>
//           </Grid>
//         </Grid>
//       </Menu>
//     </Box>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/chats" component={Link}>
//       Chat
//     </Button>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/calendar" component={Link}>
//       Calendar
//     </Button>
//     <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/apps/email" component={Link}>
//       Email
//     </Button>
//   </>);
// };

// export default AppDD;


============================================================
FILE: src/layouts/full/vertical/header/Notification.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Button,
  Chip,
  Stack
} from '@mui/material';
import * as dropdownData from './data';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';

import { IconBellRinging } from '@tabler/icons-react';
import { Link } from 'react-router';

const Notifications = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : 'text.secondary',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconBellRinging size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '360px',
          },
        }}
      >
        <Stack direction="row" py={2} px={4} justifyContent="space-between" alignItems="center">
          <Typography variant="h6">Notifications</Typography>
          <Chip label="5 new" color="primary" size="small" />
        </Stack>
        <Scrollbar sx={{ height: '385px' }}>
          {dropdownData.notifications.map((notification, index) => (
            <Box key={index}>
              <MenuItem sx={{ py: 2, px: 4 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar
                    src={notification.avatar}
                    alt={notification.avatar}
                    sx={{
                      width: 48,
                      height: 48,
                    }}
                  />
                  <Box>
                    <Typography
                      variant="subtitle2"
                      color="textPrimary"
                      fontWeight={600}
                      noWrap
                      sx={{
                        width: '240px',
                      }}
                    >
                      {notification.title}
                    </Typography>
                    <Typography
                      color="textSecondary"
                      variant="subtitle2"
                      sx={{
                        width: '240px',
                      }}
                      noWrap
                    >
                      {notification.subtitle}
                    </Typography>
                  </Box>
                </Stack>
              </MenuItem>
            </Box>
          ))}
        </Scrollbar>
        <Box p={3} pb={1}>
          <Button to="/apps/email" variant="outlined" component={Link} color="primary" fullWidth>
            See all Notifications
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Notifications;


============================================================
FILE: src/layouts/full/vertical/header/PrintButton.tsx
============================================================
// File: src/layouts/full/vertical/header/PrintButton.tsx
import React from 'react';
import {
  IconButton, Tooltip, Snackbar, Alert, Menu, MenuItem,
  ListItemIcon, ListItemText, Divider, Dialog, DialogTitle,
  DialogContent, DialogActions, Button, Switch, FormControlLabel,
  TextField, FormControl, InputLabel, Select, Grid, Box, Typography
} from '@mui/material';
import { 
  IconPrinter, IconSettings, IconUsb, IconNetwork, IconFileText,
  IconTestPipe, IconDeviceFloppy 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useThermalPrint } from 'src/hooks/useThermalPrint';

const PrintButton: React.FC = () => {
  const { t } = useTranslation();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [snackbar, setSnackbar] = React.useState({ 
    open: false, 
    message: '', 
    severity: 'success' as 'success' | 'error' | 'warning' 
  });
  const [settingsOpen, setSettingsOpen] = React.useState(false);
  
  // إعدادات الطباعة من localStorage
  const [thermalConfig, setThermalConfig] = React.useState({
    enabled: localStorage.getItem('thermal_printer_enabled') !== 'false',
    type: (localStorage.getItem('thermal_printer_type') as 'usb' | 'network') || 'usb',
    networkConfig: {
      ip: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
      port: Number(localStorage.getItem('thermal_printer_port')) || 9100
    }
  });

  const { print: thermalPrint } = useThermalPrint({
    printerType: thermalConfig.type,
    networkConfig: thermalConfig.networkConfig
  });

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // دالة استخراج المحتوى
  const getPageContent = () => {
    const selectors = [
      '[data-printable]',
      '.MuiContainer-root',
      '.MuiDataGrid-root',
      'main'
    ];

    for (const selector of selectors) {
      const element = document.querySelector(selector);
      if (element) return element;
    }
    return document.body;
  };

  // تنسيق المحتوى للطباعة الحرارية
  const formatContentForThermal = (element: Element) => {
    const textContent = element.textContent || '';
    const lines = textContent.split('\n').filter(line => line.trim());
    
    const formatted = [
      '='.repeat(32),
      '        طباعة من النظام',
      '='.repeat(32),
      `التاريخ: ${new Date().toLocaleDateString('ar-EG')}`,
      `الوقت: ${new Date().toLocaleTimeString('ar-EG')}`,
      '-'.repeat(32),
      ...lines.map(line => line.length > 32 ? line.substring(0, 32) : line),
      '-'.repeat(32),
      '    شكراً لاستخدام النظام',
      '='.repeat(32)
    ];
    
    return formatted.join('\n');
  };

  // دالة الطباعة العادية
  const handleNormalPrint = () => {
    window.print();
    handleClose();
    setSnackbar({
      open: true,
      message: t('header.print.normalPrintStarted'),
      severity: 'success'
    });
  };

  // دالة الطباعة الحرارية
  const handleThermalPrint = async () => {
    try {
      const content = getPageContent();
      const formattedContent = formatContentForThermal(content);
      
      const result = await thermalPrint(formattedContent);

      if (typeof result === 'object' && result !== null && 'success' in result && typeof (result as any).success === 'boolean') {
        if ((result as { success: boolean }).success) {
          setSnackbar({
            open: true,
            message: t('header.print.printSuccess'),
            severity: 'success'
          });
        } else {
          setSnackbar({
            open: true,
            message: t('header.print.thermalFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('header.print.printError'),
        severity: 'error'
      });
    }
    handleClose();
  };

  // دالة اختبار الطباعة
  const handleTestPrint = async () => {
    const testContent = `
=================================
        اختبار الطباعة
=================================
التاريخ: ${new Date().toLocaleDateString('ar-EG')}
الوقت: ${new Date().toLocaleTimeString('ar-EG')}

نوع الطابعة: ${thermalConfig.type.toUpperCase()}
${thermalConfig.type === 'network' ? 
  `IP: ${thermalConfig.networkConfig.ip}:${thermalConfig.networkConfig.port}` : 
  'USB Connection'
}

اختبار الطباعة الحرارية
Test Print for Thermal Printer

=================================
      اختبار ناجح ✓
=================================
    `;

    try {
      const result = await thermalPrint(testContent);
      
      if (typeof result === 'object' && result !== null && 'success' in result && typeof (result as any).success === 'boolean') {
        if ((result as { success: boolean }).success) {
          setSnackbar({
            open: true,
            message: t('header.print.testSuccess'),
            severity: 'success'
          });
        } else {
          setSnackbar({
            open: true,
            message: t('header.print.testFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('header.print.testError'),
        severity: 'error'
      });
    }
    handleClose();
  };

  // حفظ الإعدادات
  const saveSettings = () => {
    localStorage.setItem('thermal_printer_enabled', thermalConfig.enabled.toString());
    localStorage.setItem('thermal_printer_type', thermalConfig.type);
    localStorage.setItem('thermal_printer_ip', thermalConfig.networkConfig.ip);
    localStorage.setItem('thermal_printer_port', thermalConfig.networkConfig.port.toString());
    
    setSettingsOpen(false);
    setSnackbar({
      open: true,
      message: t('header.print.settingsSaved'),
      severity: 'success'
    });
  };

  // تحديث الإعدادات
  const updateConfig = (key: string, value: any) => {
    if (key.includes('.')) {
      const [parent, child] = key.split('.');
      setThermalConfig(prev => ({
        ...prev,
        [parent]: {
          ...(prev as any)[parent],
          [child]: value
        }
      }));
    } else {
      setThermalConfig(prev => ({
        ...prev,
        [key]: value
      }));
    }
  };

  return (
    <>
      <Tooltip title={t('header.print.tooltip')}>
        <IconButton
          size="large"
          aria-label="print-menu"
          color="inherit"
          onClick={handleClick}
        >
          <IconPrinter size="21" stroke="1.5" />
        </IconButton>
      </Tooltip>

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        PaperProps={{
          elevation: 3,
          sx: {
            minWidth: 220,
            mt: 1
          }
        }}
      >
        {/* طباعة عادية */}
        <MenuItem onClick={handleNormalPrint}>
          <ListItemIcon>
            <IconFileText size={20} />
          </ListItemIcon>
          <ListItemText 
            primary={t('header.print.normal')}
            secondary={t('header.print.normalDesc')}
          />
        </MenuItem>

        {/* طباعة حرارية */}
        {thermalConfig.enabled && (
          <MenuItem onClick={handleThermalPrint}>
            <ListItemIcon>
              {thermalConfig.type === 'usb' ? <IconUsb size={20} /> : <IconNetwork size={20} />}
            </ListItemIcon>
            <ListItemText 
              primary={t('header.print.thermal')}
              secondary={`${thermalConfig.type.toUpperCase()} ${t('header.print.printer')}`}
            />
          </MenuItem>
        )}

        <Divider />

        {/* اختبار الطباعة */}
        {thermalConfig.enabled && (
          <MenuItem onClick={handleTestPrint}>
            <ListItemIcon>
              <IconTestPipe size={20} />
            </ListItemIcon>
            <ListItemText 
              primary={t('header.print.test')}
              secondary={t('header.print.testDesc')}
            />
          </MenuItem>
        )}

        {/* إعدادات الطباعة */}
        <MenuItem onClick={() => {
          setSettingsOpen(true);
          handleClose();
        }}>
          <ListItemIcon>
            <IconSettings size={20} />
          </ListItemIcon>
          <ListItemText 
            primary={t('header.print.settings')}
            secondary={t('header.print.configureOptions')}
          />
        </MenuItem>
      </Menu>

      {/* نافذة الإعدادات */}
      <Dialog open={settingsOpen} onClose={() => setSettingsOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>{t('header.print.printerSettings')}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            {/* تفعيل الطباعة الحرارية */}
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={thermalConfig.enabled}
                    onChange={(e) => updateConfig('enabled', e.target.checked)}
                  />
                }
                label={t('header.print.enableThermal')}
              />
            </Grid>

            {thermalConfig.enabled && (
              <>
                {/* نوع الطابعة */}
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel>{t('header.print.printerType')}</InputLabel>
                    <Select
                      value={thermalConfig.type}
                      onChange={(e) => updateConfig('type', e.target.value)}
                      label={t('header.print.printerType')}
                    >
                      <MenuItem value="usb">
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconUsb size={16} />
                          USB Printer
                        </Box>
                      </MenuItem>
                      <MenuItem value="network">
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconNetwork size={16} />
                          Network Printer
                        </Box>
                      </MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                {/* إعدادات الشبكة */}
                {thermalConfig.type === 'network' && (
                  <>
                    <Grid item xs={12} md={8}>
                      <TextField
                        fullWidth
                        label={t('header.print.ipAddress')}
                        value={thermalConfig.networkConfig.ip}
                        onChange={(e) => updateConfig('networkConfig.ip', e.target.value)}
                        placeholder="192.168.1.100"
                      />
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <TextField
                        fullWidth
                        label={t('header.print.port')}
                        type="number"
                        value={thermalConfig.networkConfig.port}
                        onChange={(e) => updateConfig('networkConfig.port', Number(e.target.value))}
                        placeholder="9100"
                      />
                    </Grid>
                  </>
                )}

                {/* معلومات */}
                <Grid item xs={12}>
                  <Box sx={{ p: 2, backgroundColor: 'info.light', borderRadius: 1 }}>
                    <Typography variant="body2" color="info.dark">
                      {t('header.print.settingsInfo')}
                    </Typography>
                  </Box>
                </Grid>
              </>
            )}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSettingsOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button 
            variant="contained" 
            onClick={saveSettings}
            startIcon={<IconDeviceFloppy />}
          >
            {t('common.save')}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default PrintButton;


============================================================
FILE: src/layouts/full/vertical/header/Profile.tsx
============================================================
// File: src/layouts/full/vertical/header/Profile.tsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  Avatar,
  Box,
  Menu,
  IconButton,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Typography,
  Divider} from '@mui/material';
import { IconListCheck, IconMail, IconUser, IconSettings, IconLogout, IconBuilding } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';

const Profile = () => {
  const { t } = useTranslation();
  const [anchorEl2, setAnchorEl2] = useState(null);
  const { user, logout, selectedBranch } = useAuth();
  const navigate = useNavigate();

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  const handleLogout = () => {
    logout();
    navigate('/auth/login');
    handleClose2();
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          ...(typeof anchorEl2 === 'object' && {
            color: 'primary.main',
          }),
        }}
        onClick={handleClick2}
      >
        <Avatar
          src="/images/profile/user-1.jpg"
          alt="image"
          sx={{
            width: 35,
            height: 35,
          }}
        />
      </IconButton>
      
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '280px',
            p: 2,
          },
        }}
      >
        {/* User Info */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6">{user?.userName || t('profile.user')}</Typography>
          <Typography
            color="textSecondary"
            variant="caption"
            fontSize="12px"
            fontWeight="400"
          >
            {user?.phoneNo || ''}
          </Typography>
          {selectedBranch && (
            <Typography
              color="textSecondary"
              variant="caption"
              fontSize="11px"
              fontWeight="400"
              display="block"
            >
              {selectedBranch.name} - {selectedBranch.company.name}
            </Typography>
          )}
        </Box>

        <Divider />

        {/* Menu Items */}
        <MenuItem component={Link} to="/users" onClick={handleClose2}>
          <ListItemIcon>
            <IconUser width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.userManagement')}</ListItemText>
        </MenuItem>

        <MenuItem component={Link} to="/company" onClick={handleClose2}>
          <ListItemIcon>
            <IconBuilding width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.companySettings')}</ListItemText>
        </MenuItem>

        <MenuItem component={Link} to="/permissions" onClick={handleClose2}>
          <ListItemIcon>
            <IconSettings width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.permissions')}</ListItemText>
        </MenuItem>

        <MenuItem>
          <ListItemIcon>
            <IconMail width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.inbox')}</ListItemText>
        </MenuItem>

        <MenuItem>
          <ListItemIcon>
            <IconListCheck width={20} />
          </ListItemIcon>
          <ListItemText>{t('profile.menu.taskList')}</ListItemText>
        </MenuItem>

        <Divider />

        <MenuItem onClick={handleLogout}>
          <ListItemIcon>
            <IconLogout width={20} />
          </ListItemIcon>
          <ListItemText>{t('auth.logout')}</ListItemText>
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default Profile;


============================================================
FILE: src/layouts/full/vertical/header/QuickLinks.tsx
============================================================
import { Typography, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';

const QuickLinks = () => {
  return (
    <>
      <Typography variant="h5">Quick Links</Typography>
      <Stack spacing={2} mt={2}>
        {dropdownData.pageLinks.map((pagelink, index) => (
          <Link to={pagelink.href} key={index} className="hover-text-primary">
            <Typography
              variant="subtitle2"
              color="textPrimary"
              className="text-hover"
              fontWeight={600}
            >
              {pagelink.title}
            </Typography>
          </Link>
        ))}
      </Stack>
    </>
  );
};

export default QuickLinks;


============================================================
FILE: src/layouts/full/vertical/header/Search.tsx
============================================================
import { useState } from 'react';
import {
  IconButton,
  Dialog,
  DialogContent,
  Stack,
  Divider,
  Box,
  List,
  ListItemText,
  Typography,
  TextField,
  ListItemButton,
} from '@mui/material';
import { IconSearch, IconX } from '@tabler/icons-react';
import Menuitems from '../sidebar/MenuItems';
import { Link } from 'react-router';

interface menuType {
  title: string;
  id: string;
  subheader: string;
  children: menuType[];
  href: string;
}

const Search = () => {
  // drawer top
  const [showDrawer2, setShowDrawer2] = useState(false);
  const [search, setSerach] = useState('');

  const handleDrawerClose2 = () => {
    setShowDrawer2(false);
  };

  const filterRoutes = (rotr: any, cSearch: string) => {
    if (rotr.length > 1)
      return rotr.filter((t: any) =>
        t.title ? t.href.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()) : '',
      );

    return rotr;
  };
  const searchData = filterRoutes(Menuitems, search);

  return (
    <>
      <IconButton
        aria-label="show 4 new mails"
        color="inherit"
        aria-controls="search-menu"
        aria-haspopup="true"
        onClick={() => setShowDrawer2(true)}
        size="large"
      >
        <IconSearch size="16" />
      </IconButton>
      <Dialog
        open={showDrawer2}
        onClose={() => setShowDrawer2(false)}
        fullWidth
        maxWidth={'sm'}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        PaperProps={{ sx: { position: 'fixed', top: 30, m: 0 } }}
      >
        <DialogContent className="testdialog">
          <Stack direction="row" spacing={2} alignItems="center">
            <TextField
              id="tb-search"
              placeholder="Search here"
              fullWidth
              onChange={(e) => setSerach(e.target.value)}
              inputProps={{ 'aria-label': 'Search here' }}
            />
            <IconButton size="small" onClick={handleDrawerClose2}>
              <IconX size="18" />
            </IconButton>
          </Stack>
        </DialogContent>
        <Divider />
        <Box p={2} sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          <Typography variant="h5" p={1}>
            Quick Page Links
          </Typography>
          <Box>
            <List component="nav">
              {searchData.map((menu: menuType) => {
                return (
                  <Box key={menu.title ? menu.id : menu.subheader}>
                    {menu.title && !menu.children ? (
                      <ListItemButton sx={{ py: 0.5, px: 1 }} to={menu?.href} component={Link}>
                        <ListItemText
                          primary={menu.title}
                          secondary={menu?.href}
                          sx={{ my: 0, py: 0.5 }}
                        />
                      </ListItemButton>
                    ) : (
                      ''
                    )}
                    {menu.children ? (
                      <>
                        {menu.children.map((child: menuType) => {
                          return (
                            <ListItemButton
                              sx={{ py: 0.5, px: 1 }}
                              to={child.href}
                              component={Link}
                              key={child.title ? child.id : menu.subheader}
                            >
                              <ListItemText
                                primary={child.title}
                                secondary={child.href}
                                sx={{ my: 0, py: 0.5 }}
                              />
                            </ListItemButton>
                          );
                        })}
                      </>
                    ) : (
                      ''
                    )}
                  </Box>
                );
              })}
            </List>
          </Box>
        </Box>
      </Dialog>
    </>
  );
};

export default Search;


============================================================
FILE: src/layouts/full/vertical/sidebar/NavCollapse/index.tsx
============================================================
// File: src/layouts/full/vertical/sidebar/NavCollapse/NavCollapse.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useState } from 'react';
import { useSelector } from 'src/store/Store';
import { useLocation } from 'react-router';
import {
  ListItemIcon,
  ListItemButton,
  Collapse,
  styled,
  ListItemText,
  useTheme,
  Box,
} from '@mui/material';
import NavItem from '../NavItem';
import { IconChevronDown, IconChevronUp, IconDots } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
}

const NavCollapse = ({
  menu,
  level,
  pathWithoutLastPart,
  pathDirect,
  hideMenu,
  onClick
}: NavCollapseProps) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = menu?.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const { t } = useTranslation();
  
  const [open, setOpen] = useState(() => {
    return menu?.children?.some((item: any) => {
      if (item.children) {
        return item.children.some((child: any) => pathname.includes(child.href));
      }
      return pathname.includes(item.href);
    }) || false;
  });

  // تحديد الأيقونة حسب المستوى
  const getMenuIcon = () => {
    if (level === 1) {
      // المستوى الأول - الأيقونة العادية
      return <Icon stroke={1.5} size="1.1rem" />;
    } else {
      // تحديد ما إذا كان هذا العنصر له أطفال أم لا
      const hasChildren = menu?.children && menu.children.length > 0;
      const isLastLevel = !hasChildren || !menu.children.some((child: any) => child.children);
      
      if (isLastLevel) {
        // المستوى الأخير - أيقونة عادية
        return <Icon stroke={1.5} size="1rem" />;
      } else {
        // المستوى الأوسط - 3 نقاط
        return <IconDots size="1rem" />;
      }
    }
  };

  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setOpen(!open);
  };

  React.useEffect(() => {
    const shouldBeOpen = menu?.children?.some((item: any) => {
      if (item.children) {
        return item.children.some((child: any) => pathname === child.href);
      }
      return pathname === item.href;
    });

    if (shouldBeOpen && !open) {
      setOpen(true);
    }
  }, [pathname, menu.children, open]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    marginBottom: '1px',
    padding: '4px 8px',
    paddingLeft: hideMenu 
      ? '8px' 
      : level === 1 
        ? '8px'
        : level === 2 
          ? '24px'
          : `${level * 16}px`,
    backgroundColor: open && level < 2 ? theme.palette.primary.main : '',
    whiteSpace: 'nowrap',
    minHeight: '32px',
    '&:hover': {
      backgroundColor: pathname.includes(menu.href) || open
        ? theme.palette.primary.main
        : theme.palette.primary.light,
      color: pathname.includes(menu.href) || open ? 'white' : theme.palette.primary.main,
    },
    color:
      open && level < 2
        ? 'white'
        : level > 1 && open
          ? theme.palette.primary.main
          : theme.palette.text.secondary,
    borderRadius: `${customizer.borderRadius}px`,
    ...(level > 1 && {
      borderLeft: `2px solid ${theme.palette.divider}`,
      marginLeft: '8px',
    }),
  }));

  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item?.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
        />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
        />
      );
    }
  });

  return (
    <>
      <ListItemStyled
        onClick={handleClick}
        selected={pathWithoutLastPart === menu.href}
        key={menu?.id}
      >
        <ListItemIcon
          sx={{
            minWidth: level === 1 ? '28px' : '20px',
            p: '2px 0',
            color: 'inherit',
          }}
        >
          {getMenuIcon()}
        </ListItemIcon>
        <ListItemText 
          color="inherit"
          sx={{
            '& .MuiListItemText-primary': {
              fontSize: level === 1 ? '0.875rem' : '0.8rem',
              lineHeight: 1.2,
              fontWeight: level === 1 ? 500 : 400,
            }
          }}
        >
          {hideMenu ? '' : <>{t(`${menu.title}`)}</>}
        </ListItemText>
        
        {level === 1 && (
          <Box sx={{ ml: 1 }}>
            {!open ? 
              <IconChevronDown size="0.9rem" /> : 
              <IconChevronUp size="0.9rem" />
            }
          </Box>
        )}
        
        {level > 1 && (
          <Box sx={{ ml: 1 }}>
            {!open ? 
              <IconChevronDown size="0.7rem" /> : 
              <IconChevronUp size="0.7rem" />
            }
          </Box>
        )}
      </ListItemStyled>
      
      <Collapse in={open} timeout="auto" unmountOnExit>
        <Box sx={{ 
          ...(level > 1 && {
            backgroundColor: theme.palette.action.hover,
            borderRadius: `0 ${customizer.borderRadius}px ${customizer.borderRadius}px 0`,
            margin: '0 4px',
          })
        }}>
          {submenus}
        </Box>
      </Collapse>
    </>
  );
};

export default NavCollapse;


============================================================
FILE: src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx
============================================================
// File: src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx
import React from 'react';
import { ListSubheader, styled, Theme } from '@mui/material';
import { IconDots } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface NavGroupProps {
  item: {
    navlabel?: boolean;
    subheader?: string;
  };
  hideMenu: boolean | string;
}

const ListSubheaderStyle = styled(ListSubheader)(({ theme }: { theme: Theme }) => ({
  ...theme.typography.overline,
  fontWeight: 700,
  marginTop: theme.spacing(1.5), // تقليل من 3 إلى 1.5
  marginBottom: 0,
  color: theme.palette.text.primary,
  lineHeight: '20px', // تقليل من 26px إلى 20px
  padding: '2px 8px', // تقليل من 3px 12px إلى 2px 8px
  fontSize: '0.75rem', // تصغير حجم الخط
}));

const NavGroup: React.FC<NavGroupProps> = ({ item, hideMenu }) => {
  const { t } = useTranslation();

  return (
    <ListSubheaderStyle sx={{ ml: hideMenu ? 0 : '-8px' }} disableSticky>
      {hideMenu ? <IconDots size={12} /> : t(item.subheader ?? '')}
    </ListSubheaderStyle>
  );
};

export default NavGroup;


============================================================
FILE: src/layouts/full/vertical/sidebar/NavItem/index.tsx
============================================================
// File: src/layouts/full/vertical/sidebar/NavItem/NavItem.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { NavLink } from 'react-router';
import {
  ListItemIcon,
  List,
  styled,
  ListItemText,
  Chip,
  useTheme,
  Typography,
  ListItemButton,
} from '@mui/material';
import { useSelector } from 'src/store/Store';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
  onClick?: React.MouseEvent<HTMLButtonElement, MouseEvent>;
};

interface ItemType {
  item: NavGroup;
  hideMenu?: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
  level?: number | any;
  pathDirect: string;
}

const NavItem = ({ item, level, pathDirect, hideMenu, onClick }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item?.icon;
  const theme = useTheme();
  const { t } = useTranslation();
  
  // تحديد الأيقونة حسب المستوى
  const getItemIcon = () => {
    if (level === 1) {
      // المستوى الأول - الأيقونة العادية
      return <Icon stroke={1.5} size="1.1rem" />;
    } else {
      // للمستويات الفرعية، نحتاج لتحديد ما إذا كان هذا المستوى الأخير
      // إذا كان level > 2، فهو مستوى أوسط، استخدم النقاط
      // إذا كان level === 2 أو الأخير، استخدم الأيقونة
      
      // بشكل عام، العناصر في NavItem هي عناصر نهائية (ليس لها أطفال)
      // لذا سنستخدم الأيقونة العادية
      return <Icon stroke={1.5} size="1rem" />;
    }
  };

  const ListItemStyled = styled(ListItemButton)(() => ({
    whiteSpace: 'nowrap',
    marginBottom: '1px',
    padding: '4px 8px',
    borderRadius: `${customizer.borderRadius}px`,
    backgroundColor: level > 1 ? 'transparent !important' : 'inherit',
    color:
      level > 1 && pathDirect === item?.href
        ? `${theme.palette.primary.main}!important`
        : theme.palette.text.secondary,
    paddingLeft: hideMenu 
      ? '8px' 
      : level === 1 
        ? '8px'
        : level === 2 
          ? '24px'
          : level === 3
            ? '40px'
            : `${level * 16}px`,
    minHeight: level === 1 ? '32px' : '28px',
    '&:hover': {
      backgroundColor: theme.palette.primary.light,
      color: theme.palette.primary.main,
    },
    '&.Mui-selected': {
      color: 'white',
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.main,
        color: 'white',
      },
    },
    ...(level > 1 && {
      borderLeft: `2px solid ${theme.palette.divider}`,
      marginLeft: '8px',
    }),
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item?.id && item.title}>
      <ListItemStyled
        {...listItemProps}
        disabled={item?.disabled}
        selected={pathDirect === item?.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: level === 1 ? '28px' : '20px',
            p: '2px 0',
            color:
              level > 1 && pathDirect === item?.href
                ? `${theme.palette.primary.main}!important`
                : 'inherit',
          }}
        >
          {getItemIcon()}
        </ListItemIcon>
        <ListItemText
          sx={{
            '& .MuiListItemText-primary': {
              fontSize: level === 1 ? '0.875rem' : '0.8rem',
              lineHeight: 1.2,
              fontWeight: level === 1 ? 500 : 400,
            }
          }}
        >
          {hideMenu ? '' : <>{t(`${item?.title}`)}</>}
          <br />
          {item?.subtitle ? (
            <Typography variant="caption" sx={{ lineHeight: 1.1 }}>
              {hideMenu ? '' : item?.subtitle}
            </Typography>
          ) : (
            ''
          )}
        </ListItemText>

        {!item?.chip || hideMenu ? null : (
          <Chip
            color={item?.chipColor}
            variant={item?.variant ? item?.variant : 'filled'}
            size="small"
            label={item?.chip}
            sx={{ height: '18px', fontSize: '0.7rem' }}
          />
        )}
      </ListItemStyled>
    </List>
  );
};

export default NavItem;


============================================================
FILE: src/layouts/full/vertical/sidebar/SidebarProfile/Profile.tsx
============================================================
import React from 'react';
import {
  Box,
  Avatar,
  Typography,
  IconButton,
  Tooltip,
  useMediaQuery
} from '@mui/material';
import { IconPower } from '@tabler/icons-react';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';
import img1 from 'src/assets/images/profile/user-1.jpg';
import { clearAuth } from 'src/utils/auth';
import { useNavigate } from 'react-router-dom';

export const Profile: React.FC = () => {
  /* --------- collapse logic --------- */
  const { isCollapse, isSidebarHover } = useSelector(
    (s: AppState) => s.customizer
  );
  const lgUp = useMediaQuery((t: any) => t.breakpoints.up('lg'));
  const hideMenu = lgUp ? isCollapse && !isSidebarHover : false;

  const navigate = useNavigate();
  const logout = () => {
    clearAuth();
    navigate('/auth/login', { replace: true });
  };

  if (hideMenu) return null;

  return (
    <Box display="flex" alignItems="center" gap={2} sx={{ m: 3, p: 2, bgcolor: 'secondary.light' }}>
      <Avatar src={img1} alt="user" />
      <Box>
        <Typography variant="h6">Mathew</Typography>
        <Typography variant="caption">Designer</Typography>
      </Box>
      <Box sx={{ ml: 'auto' }}>
        <Tooltip title="Logout">
          <IconButton color="primary" onClick={logout} size="small">
            <IconPower size={20} />
          </IconButton>
        </Tooltip>
      </Box>
    </Box>
  );
};

export default Profile;


============================================================
FILE: src/layouts/full/vertical/sidebar/Sidebar.tsx
============================================================
import { useMediaQuery, Box, Drawer, useTheme } from '@mui/material';
import SidebarItems from './SidebarItems';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { hoverSidebar, toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
// import { Profile } from './SidebarProfile/Profile';
import { AppState } from 'src/store/Store';

const Sidebar = () => {
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();
  const theme = useTheme();
  const toggleWidth =
    customizer.isCollapse && !customizer.isSidebarHover
      ? customizer.MiniSidebarWidth
      : customizer.SidebarWidth;

  const onHoverEnter = () => {
    if (customizer.isCollapse) {
      dispatch(hoverSidebar(true));
    }
  };

  const onHoverLeave = () => {
    dispatch(hoverSidebar(false));
  };

  if (lgUp) {
    return (
      <Box
        sx={{
          width: toggleWidth,
          flexShrink: 0,
          ...(customizer.isCollapse && {
            position: 'absolute',
          }),
        }}
      >
        {/* ------------------------------------------- */}
        {/* Sidebar for desktop */}
        {/* ------------------------------------------- */}
        <Drawer
          anchor="left"
          open
          onMouseEnter={onHoverEnter}
          onMouseLeave={onHoverLeave}
          variant="permanent"
          PaperProps={{
            sx: {
              transition: theme.transitions.create('width', {
                duration: theme.transitions.duration.shortest,
              }),
              width: toggleWidth,
              boxSizing: 'border-box',
            },
          }}
        >
          {/* ------------------------------------------- */}
          {/* Sidebar Box */}
          {/* ------------------------------------------- */}
          <Box
            sx={{
              height: '100%',
            }}
          >
            {/* ------------------------------------------- */}
            {/* Logo */}
            {/* ------------------------------------------- */}
            <Box px={2}>
              <Logo />
            </Box>
            <Scrollbar sx={{ height: 'auto' }}>
              {/* ------------------------------------------- */}
              {/* Sidebar Items */}
              {/* ------------------------------------------- */}
              <SidebarItems />
            </Scrollbar>
            {/* <Profile /> */}
          </Box>
        </Drawer>
      </Box>
    );
  }

  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,

          // backgroundColor:
          //   customizer.activeMode === 'dark'
          //     ? customizer.darkBackground900
          //     : customizer.activeSidebarBg,
          // color: customizer.activeSidebarBg === '#ffffff' ? '' : 'white',
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
        },
      }}
    >
      {/* ------------------------------------------- */}
      {/* Logo */}
      {/* ------------------------------------------- */}
      <Box px={2}>
        <Logo />
      </Box>
      {/* ------------------------------------------- */}
      {/* Sidebar For Mobile */}
      {/* ------------------------------------------- */}
      <SidebarItems />
    </Drawer>
  );
};

export default Sidebar;


============================================================
FILE: src/layouts/full/vertical/sidebar/SidebarItems.tsx
============================================================
// File: src/layouts/full/vertical/sidebar/SidebarItems.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Menuitems from './MenuItems';
import { useLocation } from 'react-router';
import { Box, List, useMediaQuery } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import NavItem from './NavItem';
import NavCollapse from './NavCollapse';
import NavGroup from './NavGroup/NavGroup';
import { AppState } from 'src/store/Store';

const SidebarItems = () => {
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const hideMenu: any = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';
  const dispatch = useDispatch();

  return (
    <Box sx={{ px: 2 }}> {/* تقليل من px: 3 إلى px: 2 */}
      <List 
        sx={{ 
          pt: 0,
          '& .MuiListItem-root': {
            py: 0, // إزالة المسافات العمودية الافتراضية
          }
        }} 
        className="sidebarNav"
        dense // إضافة dense لتقليل المسافات
      >
        {Menuitems.map((item) => {
          if (item.subheader) {
            return <NavGroup item={item} hideMenu={hideMenu} key={item.subheader} />;
          } else if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id}
                onClick={() => dispatch(toggleMobileSidebar())}
              />
            );
          } else {
            return (
              <NavItem 
                item={item} 
                key={item.id} 
                pathDirect={pathDirect} 
                hideMenu={hideMenu}
                level={1}
                onClick={() => dispatch(toggleMobileSidebar())} 
              />
            );
          }
        })}
      </List>
    </Box>
  );
};

export default SidebarItems;


============================================================
FILE: src/layouts/full/FullLayout.tsx
============================================================
import { FC } from 'react';
import { styled, Container, Box, useTheme } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { Outlet } from 'react-router';
import { AppState } from 'src/store/Store';
import Header from './vertical/header/Header';
import Sidebar from './vertical/sidebar/Sidebar';
import Customizer from './shared/customizer/Customizer';
import Navigation from '../full/horizontal/navbar/Navigation';
import HorizontalHeader from '../full/horizontal/header/Header';
import ScrollToTop from '../../components/shared/ScrollToTop';
import LoadingBar from '../../LoadingBar';

const MainWrapper = styled('div')(() => ({
  display: 'flex',
  minHeight: '100vh',
  width: '100%',
}));

const PageWrapper = styled('div')(() => ({
  display: 'flex',
  flexGrow: 1,
  paddingBottom: '60px',
  flexDirection: 'column',
  zIndex: 1,
  width: '100%',
  backgroundColor: 'transparent',
}));

const FullLayout: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();

  return (
    <>
      <LoadingBar />
      <MainWrapper className={customizer.activeMode === 'dark' ? 'darkbg mainwrapper' : 'mainwrapper'}>

        {/* ------------------------------------------- */}
        {/* Sidebar */}
        {/* ------------------------------------------- */}
        {customizer.isHorizontal ? '' : <Sidebar />}
        {/* ------------------------------------------- */}
        {/* Main Wrapper */}
        {/* ------------------------------------------- */}
        <PageWrapper
          className="page-wrapper"
          sx={{
            ...(customizer.isCollapse && {
              [theme.breakpoints.up('lg')]: { ml: `${customizer.MiniSidebarWidth}px` },
            }),
          }}
        >
          {/* ------------------------------------------- */}
          {/* Header */}
          {/* ------------------------------------------- */}
          {customizer.isHorizontal ? <HorizontalHeader /> : <Header />}
          {/* PageContent */}
          {customizer.isHorizontal ? <Navigation /> : ''}
          <Container
            sx={{
              pt: '30px',
              maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
            }}
          >
            {/* ------------------------------------------- */}
            {/* PageContent */}
            {/* ------------------------------------------- */}

            <Box sx={{ minHeight: 'calc(100vh - 170px)' }}>
              <ScrollToTop>
                <Outlet />
              </ScrollToTop>
            </Box>

            {/* ------------------------------------------- */}
            {/* End Page */}
            {/* ------------------------------------------- */}
          </Container>
          <Customizer />
        </PageWrapper>
      </MainWrapper>
    </>

  );
};

export default FullLayout;


============================================================
FILE: src/Pages/accounts/components/mobile/AccountsCards.tsx
============================================================
// File: src/pages/accounts/components/mobile/AccountsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Account } from 'src/utils/api/pagesApi/accountsApi';
import { useTranslation } from 'react-i18next';

interface Props {
  accounts: Account[];
  onEdit: (account: Account) => void;
  loading: boolean;
}

const AccountsCards: React.FC<Props> = ({ accounts, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (accounts.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('accounts.noAccounts')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {accounts.map((account) => (
        <Grid item xs={12} sm={6} md={4} key={account.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {account.name}
                  </Typography>
                  
                  <Box>
                    <Chip
                      label={t(`accounts.types.${account.typeName.toLowerCase()}`)}
                      color="primary"
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ 
                      fontSize: { xs: '0.75rem', sm: '0.875rem' },
                      fontFamily: 'monospace'
                    }}
                  >
                    {t('accounts.accountNumber')}: {account.accountNumber}
                  </Typography>
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('accounts.collectionFeePercent')}: {account.collectionFeePercent}%
                  </Typography>
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={account.isActive ? t('accounts.active') : t('accounts.inactive')}
                      color={account.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(account)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default AccountsCards;


============================================================
FILE: src/Pages/accounts/components/mobile/MobileAccountsFilter.tsx
============================================================
// File: src/pages/accounts/components/mobile/MobileAccountsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface AccountsFilterState {
  searchQuery: string;
  accountType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: AccountsFilterState;
  onFiltersChange: (filters: AccountsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileAccountsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<AccountsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const accountTypeOptions = [
    { value: '', label: t('common.all') },
    { value: 'Bank', label: t('accounts.types.bank') },
    { value: 'Wallet', label: t('accounts.types.wallet') },
    { value: 'Visa', label: t('accounts.types.visa') },
    { value: 'InstaPay', label: t('accounts.types.instapay') },
    { value: 'StaffAccount', label: t('accounts.types.staffAccount') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('accounts.active') },
    { value: 'false', label: t('accounts.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('accounts.name') },
    { value: 'typeName', label: t('accounts.type') },
    { value: 'accountNumber', label: t('accounts.accountNumber') },
    { value: 'collectionFeePercent', label: t('accounts.collectionFeePercent') },
    { value: 'isActive', label: t('accounts.status') }
  ];

  const handleLocalChange = (field: keyof AccountsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: AccountsFilterState = {
      searchQuery: '',
      accountType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.accountType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('accounts.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('accounts.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('accounts.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('accounts.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('accounts.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('accounts.filter.filters')}</Typography>
            {(localFilters.accountType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.accountType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.type')}</InputLabel>
              <Select
                value={localFilters.accountType}
                label={t('accounts.type')}
                onChange={(e) => handleLocalChange('accountType', e.target.value)}
              >
                {accountTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('accounts.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('accounts.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('accounts.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('accounts.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('accounts.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('accounts.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('accounts.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('accounts.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('accounts.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileAccountsFilter;


============================================================
FILE: src/Pages/accounts/components/AccountForm.tsx
============================================================
// File: src/pages/accounts/components/AccountForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  Switch,
  FormControlLabel,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Account;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const AccountForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const { control, handleSubmit, reset, formState: { errors } } = useForm({
    defaultValues: {
      name: '',
      safeOrAccountType: 2,
      typeName: '',
      accountNumber: '',
      collectionFeePercent: 0,
      isActive: true
    }
  });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        safeOrAccountType: initialValues.safeOrAccountType,
        typeName: initialValues.typeName,
        accountNumber: initialValues.accountNumber,
        collectionFeePercent: initialValues.collectionFeePercent,
        isActive: initialValues.isActive
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        safeOrAccountType: 2,
        typeName: '',
        accountNumber: '',
        collectionFeePercent: 0,
        isActive: true
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          safeOrAccountType: 2,
          typeName: '',
          accountNumber: '',
          collectionFeePercent: 0,
          isActive: true
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="sm" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('accounts.add') : t('accounts.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('accounts.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="typeName"
            control={control}
            rules={{ required: t('accounts.validation.typeRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.type')}
                fullWidth
                error={!!errors.typeName}
                helperText={errors.typeName?.message}
                disabled={isSubmitting}
                placeholder={t('accounts.typePlaceholder')}
              />
            )}
          />

          <Controller
            name="accountNumber"
            control={control}
            rules={{ required: t('accounts.validation.accountNumberRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.accountNumber')}
                fullWidth
                error={!!errors.accountNumber}
                helperText={errors.accountNumber?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="collectionFeePercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('accounts.collectionFeePercent')}
                type="number"
                fullWidth
                inputProps={{ step: 0.01, min: 0, max: 100 }}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="isActive"
            control={control}
            render={({ field }) => (
              <FormControlLabel
                control={
                  <Switch
                    checked={field.value}
                    onChange={field.onChange}
                    disabled={isSubmitting}
                  />
                }
                label={t('accounts.isActive')}
              />
            )}
          />
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default AccountForm;


============================================================
FILE: src/Pages/accounts/components/AccountsTable.tsx
============================================================
// File: src/pages/accounts/components/AccountsTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  rows: Account[];
  onEdit: (account: Account) => void;
}

const AccountsTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<Account>[] = [
    { field: 'name', headerName: t('accounts.name'), flex: 1, minWidth: 180 },
    { 
      field: 'typeName', 
      headerName: t('accounts.type'), 
      flex: 0.8,
      renderCell: ({ value }) => (
        <Chip 
          label={t(`accounts.types.${value.toLowerCase()}`)} 
          color="primary" 
          variant="outlined" 
          size="small" 
        />
      )
    },
    { 
      field: 'accountNumber', 
      headerName: t('accounts.accountNumber'), 
      flex: 1,
      renderCell: ({ value }) => (
        <span style={{ fontFamily: 'monospace' }}>{value}</span>
      )
    },
    { 
      field: 'collectionFeePercent', 
      headerName: t('accounts.collectionFeePercent'), 
      flex: 0.8,
      renderCell: ({ value }) => `${value}%`
    },
    { 
      field: 'isActive', 
      headerName: t('accounts.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('accounts.active') : t('accounts.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default AccountsTable;


============================================================
FILE: src/Pages/accounts/components/ActionsBar.tsx
============================================================
// File: src/pages/accounts/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('accounts.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('accounts.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/accounts/components/PageHeader.tsx
============================================================
// File: src/pages/accounts/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { accountsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface Props {
  exportData: Account[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...accountsImportExportConfig,
    onExport: () => exportData.map(account => ({
      name: account.name,
      typeName: account.typeName,
      accountNumber: account.accountNumber,
      collectionFeePercent: account.collectionFeePercent,
      isActive: account.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('accounts.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/accounts/AccountsPage.tsx
============================================================
// File: src/pages/accounts/AccountsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery,
  Snackbar, Alert, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import AccountsTable from './components/AccountsTable';
import AccountsCards from './components/mobile/AccountsCards';
import AccountForm from './components/AccountForm';
import MobileAccountsFilter, { AccountsFilterState } from './components/mobile/MobileAccountsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/accountsApi';
import { Account } from 'src/utils/api/pagesApi/accountsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}


const AccountsPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [accounts, setAccounts] = React.useState<Account[]>([]);
  const [query, setQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Account;
  }>({ open: false, mode: 'add', current: undefined });

  const canAdd = props.canAdd ?? true; // Default to true if not provided

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<AccountsFilterState>({
    searchQuery: '',
    accountType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchAccounts = async () => {
    try {
      const accountsData = await apiSrv.getAll();
      setAccounts(accountsData);
    } catch (e: any) {
      setErr(e?.message || t('accounts.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchAccounts();
      }
      catch (e: any) { 
        setErr(e?.message || t('accounts.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? accounts.filter(a => 
      a.name.toLowerCase().includes(query.toLowerCase()) ||
      a.typeName.toLowerCase().includes(query.toLowerCase()) ||
      a.accountNumber.toLowerCase().includes(query.toLowerCase())
    ) : accounts,
    [accounts, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...accounts];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(account => 
        account.name.toLowerCase().includes(searchLower) ||
        account.typeName.toLowerCase().includes(searchLower) ||
        account.accountNumber.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع الحساب
    if (mobileFilters.accountType) {
      result = result.filter(account => account.typeName === mobileFilters.accountType);
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(account => account.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [accounts, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.accountType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      console.log('Adding account:', data);
      await apiSrv.add(data);
      await fetchAccounts();
    } catch (e: any) {
      console.error('Add error:', e);
      const msg = e?.errors?.AccountName?.[0] || e?.message || t('accounts.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      console.log('Updating account:', data);
      await apiSrv.update(data);
      await fetchAccounts();
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.errors?.AccountName?.[0] || e?.message || t('accounts.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('accounts.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <AccountsCards
                accounts={filtered}
                onEdit={(a) => setDialog({ open: true, mode: 'edit', current: a })}
                loading={loading}
              />
            )
          : (
              <AccountsTable
                rows={filtered}
                onEdit={(a) => setDialog({ open: true, mode: 'edit', current: a })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileAccountsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={accounts.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <AccountForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>

      {loading && <div>Loading…</div>}
    </Container>
  );
};

export default AccountsPage;


============================================================
FILE: src/Pages/auth/components/AuthLogin.tsx
============================================================
// File: src/pages/auth/components/AuthLogin.tsx
import React from 'react';
import { 
  Box, 
  Stack, 
  Button, 
  Typography, 
  FormGroup, 
  FormControlLabel,
  CircularProgress,
  InputAdornment,
  IconButton
} from '@mui/material';
import { IconEye, IconEyeOff, IconPhone, IconLock, IconBuilding } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import { Link } from 'react-router-dom';

interface Props {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  subtext?: React.ReactNode;
  onSubmit: (phone: string, password: string, tenantId: string) => void; // ⭐ إضافة tenantId
  isLoading?: boolean;
}

const AuthLogin: React.FC<Props> = ({ 
  subtitle, 
  subtext, 
  onSubmit, 
  isLoading = false 
}) => {
  const { t } = useTranslation();
  const [tenantId, setTenantId] = React.useState(''); // ⭐ إضافة tenantId state
  const [phone, setPhone] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [showPassword, setShowPassword] = React.useState(false);
  const [rememberMe, setRememberMe] = React.useState(false);

  React.useEffect(() => {
    const savedPhone = localStorage.getItem('remembered_phone');
    const savedTenantId = localStorage.getItem('remembered_tenant'); // ⭐ إضافة حفظ TenantId
    const savedRemember = localStorage.getItem('remember_me') === 'true';
    
    if (savedRemember && savedPhone) {
      setPhone(savedPhone);
      setRememberMe(true);
    }
    
    if (savedRemember && savedTenantId) {
      setTenantId(savedTenantId);
    }
  }, []);

  const handle = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (rememberMe) {
      localStorage.setItem('remembered_phone', phone);
      localStorage.setItem('remembered_tenant', tenantId); // ⭐ حفظ TenantId
      localStorage.setItem('remember_me', 'true');
    } else {
      localStorage.removeItem('remembered_phone');
      localStorage.removeItem('remembered_tenant'); // ⭐ مسح TenantId
      localStorage.removeItem('remember_me');
    }
    
    onSubmit(phone, password, tenantId); // ⭐ تمرير tenantId
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <>
      {subtext}

      <form onSubmit={handle}>
        <Stack spacing={2}>
          {/* ⭐ إضافة حقل TenantId */}
          <Box>
            <CustomFormLabel htmlFor="tenantId">{t('auth.login.tenantId')}</CustomFormLabel>
            <CustomTextField 
              id="tenantId" 
              fullWidth 
              value={tenantId} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setTenantId(e.target.value)}
              placeholder={t('auth.login.tenantPlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconBuilding size={20} />
                  </InputAdornment>
                )
              }}
            />
          </Box>

          <Box>
            <CustomFormLabel htmlFor="phone">{t('auth.login.phoneNumber')}</CustomFormLabel>
            <CustomTextField 
              id="phone" 
              fullWidth 
              value={phone} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPhone(e.target.value)}
              placeholder={t('auth.login.phonePlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconPhone size={20} />
                  </InputAdornment>
                )
              }}
            />
          </Box>
          
          <Box>
            <CustomFormLabel htmlFor="password">{t('auth.login.password')}</CustomFormLabel>
            <CustomTextField 
              id="password" 
              type={showPassword ? 'text' : 'password'}
              fullWidth 
              value={password} 
              onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPassword(e.target.value)}
              placeholder={t('auth.login.passwordPlaceholder')}
              disabled={isLoading}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconLock size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={togglePasswordVisibility}
                      edge="end"
                      disabled={isLoading}
                    >
                      {showPassword ? <IconEyeOff size={20} /> : <IconEye size={20} />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
          </Box>

          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <FormGroup>
              <FormControlLabel 
                control={
                  <CustomCheckbox 
                    checked={rememberMe}
                    onChange={(e) => setRememberMe(e.target.checked)}
                    disabled={isLoading}
                  />
                } 
                label={t('auth.login.rememberMe')}
              />
            </FormGroup>
            <Typography 
              component={Link} 
              to="/auth/forgot-password" 
              sx={{ 
                color: 'primary.main', 
                textDecoration: 'none',
                '&:hover': {
                  textDecoration: 'underline'
                }
              }}
            >
              {t('auth.login.forgotPassword')}
            </Typography>
          </Stack>

          <Button 
            variant="contained" 
            type="submit" 
            fullWidth
            disabled={isLoading || !tenantId.trim() || !phone.trim() || !password.trim()} // ⭐ إضافة tenantId للتحقق
            sx={{ 
              py: 1.5,
              fontSize: '1rem'
            }}
          >
            {isLoading ? (
              <Stack direction="row" alignItems="center" spacing={1}>
                <CircularProgress size={20} color="inherit" />
                <Typography>{t('auth.login.signingIn')}</Typography>
              </Stack>
            ) : (
              t('auth.login.signIn')
            )}
          </Button>
        </Stack>
      </form>

      {subtitle}
    </>
  );
};

export default AuthLogin;


============================================================
FILE: src/Pages/auth/BranchSelectionPage.tsx
============================================================
// File: src/pages/auth/BranchSelectionPage.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Grid, 
  Box, 
  Card, 
  Stack, 
  Typography, 
  Button,
  Chip,
  Divider,
  Alert
} from '@mui/material';
import { IconBuilding, IconMapPin, IconPhone, IconLogout } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

const BranchSelectionPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { branches, selectBranch, logout, user, isLoading } = useAuth();
  const [selectedBranchId, setSelectedBranchId] = React.useState<string | null>(null);

  const handleBranchSelect = async (branch: Branch) => {
    try {
      setSelectedBranchId(branch.id);
      await selectBranch(branch);
      setTimeout(() => {
        navigate('/dashboard', { replace: true });
      }, 100);
    } catch (error) {
      console.error('Error selecting branch:', error);
      setSelectedBranchId(null);
    }
  };

  const handleLogout = () => {
    logout();
    navigate('/auth/login', { replace: true });
  };

  if (branches.length === 0) {
    return (
      <PageContainer title={t('auth.branchSelection.title')} description={t('auth.branchSelection.description')}>
        <Box sx={{ 
          position: 'relative', 
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute', 
            inset: 0, 
            opacity: 0.3 
          }
        }}>
          <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
            <Grid item xs={12} sm={8} md={6} lg={5} display="flex" alignItems="center">
              <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
                <Box textAlign="center" mb={3}>
                  <Logo />
                </Box>

                <Alert severity="warning" sx={{ mb: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    {t('auth.branchSelection.noBranches')}
                  </Typography>
                  <Typography variant="body2">
                    {t('auth.branchSelection.noBranchesMessage')}
                  </Typography>
                </Alert>

                <Button
                  variant="contained"
                  color="error"
                  fullWidth
                  onClick={handleLogout}
                  startIcon={<IconLogout />}
                >
                  {t('auth.logout')}
                </Button>
              </Card>
            </Grid>
          </Grid>
        </Box>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('auth.branchSelection.title')} description={t('auth.branchSelection.description')}>
      <Box sx={{ 
        position: 'relative', 
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute', 
          inset: 0, 
          opacity: 0.3 
        }
      }}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={10} md={8} lg={6} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={3}>
                <Logo />
              </Box>

              <Typography variant="h4" textAlign="center" mb={1}>
                {t('auth.branchSelection.selectBranch')}
              </Typography>
              
              <Typography variant="body1" textAlign="center" color="text.secondary" mb={4}>
                {t('auth.branchSelection.welcomeMessage', { userName: user?.userName })}
              </Typography>

              <Stack spacing={2}>
                {branches.map((branch) => (
                  <Card 
                    key={branch.id}
                    variant="outlined"
                    sx={{ 
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: 4,
                        borderColor: 'primary.main'
                      },
                      ...(selectedBranchId === branch.id && {
                        opacity: 0.7,
                        pointerEvents: 'none'
                      })
                    }}
                    onClick={() => handleBranchSelect(branch)}
                  >
                    <Box sx={{ p: 3 }}>
                      <Stack direction="row" alignItems="center" spacing={2} mb={2}>
                        <IconBuilding size={24} color="primary" />
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="h6">
                            {branch.name}
                          </Typography>
                        </Box>
                        <Chip 
                          label={branch.company.name} 
                          size="small" 
                          color="primary" 
                          variant="outlined"
                        />
                      </Stack>

                      <Stack spacing={1} sx={{ mb: 2 }}>
                        {branch.address && (
                          <Stack direction="row" alignItems="center" spacing={1}>
                            <IconMapPin size={16} />
                            <Typography variant="body2" color="text.secondary">
                              {branch.address}
                            </Typography>
                          </Stack>
                        )}

                        {branch.phone && (
                          <Stack direction="row" alignItems="center" spacing={1}>
                            <IconPhone size={16} />
                            <Typography variant="body2" color="text.secondary">
                              {branch.phone}
                            </Typography>
                          </Stack>
                        )}
                      </Stack>

                      <Button
                        fullWidth
                        variant="contained"
                        disabled={selectedBranchId === branch.id || isLoading}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleBranchSelect(branch);
                        }}
                      >
                        {selectedBranchId === branch.id ? t('auth.branchSelection.selecting') : t('auth.branchSelection.selectThisBranch')}
                      </Button>
                    </Box>
                  </Card>
                ))}
              </Stack>

              <Divider sx={{ my: 3 }} />

              <Button
                variant="outlined"
                color="error"
                fullWidth
                onClick={handleLogout}
                startIcon={<IconLogout />}
              >
                {t('auth.logout')}
              </Button>
            </Card>
          </Grid>
        </Grid>
      </Box>
    </PageContainer>
  );
};

export default BranchSelectionPage;


============================================================
FILE: src/Pages/auth/LoginPage.tsx
============================================================
// File: src/Pages/auth/LoginPage.tsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Grid, Box, Card, Stack, Typography, Snackbar, Alert } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from './components/AuthLogin';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

const LoginPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { login, isLoading } = useAuth();
  const [msg, setMsg] = React.useState('');

  // ⭐ تحديث handleLogin لاستقبال tenantId
  const handleLogin = async (phone: string, password: string, tenantId: string) => {
    try {
      await login(phone, password, tenantId, (branches: Branch[], selectedBranch?: Branch) => {
        console.log('🚀 Login success callback triggered');
        console.log('- branches.length:', branches.length);
        console.log('- selectedBranch:', selectedBranch);
        
        if (branches.length === 1 && selectedBranch) {
          console.log('➡️ Redirecting to dashboard (single branch)');
          navigate('/dashboard', { replace: true });
        } else if (branches.length > 1) {
          console.log('➡️ Redirecting to branch selection (multiple branches)');
          navigate('/auth/branch-selection', { replace: true });
        } else {
          console.log('➡️ Redirecting to no branches page');
          navigate('/auth/no-branches', { replace: true });
        }
      });
      
    } catch (err: any) {
      console.error('❌ Login failed:', err);
      setMsg(err?.message || t('auth.login.failed'));
    }
  };

  return (
    <PageContainer title={t('auth.login.title')} description={t('auth.login.description')}>
      <Box sx={{ 
        position: 'relative', 
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute', 
          inset: 0, 
          opacity: 0.3 
        }
      }}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={8} md={5} lg={4} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={2}>
                <Logo />
              </Box>

              <AuthLogin
                onSubmit={handleLogin}
                isLoading={isLoading}
                subtitle={
                  <Stack direction="row" spacing={1} justifyContent="center" mt={3}>
                    <Typography color="textSecondary" variant="h6">
                      {t('auth.login.newUser')}
                    </Typography>
                    <Typography component={Link} to="/auth/register" sx={{ color: 'primary.main' }}>
                      {t('auth.login.createAccount')}
                    </Typography>
                  </Stack>
                }
              />
            </Card>
          </Grid>
        </Grid>
      </Box>

      <Snackbar open={!!msg} autoHideDuration={4000} onClose={() => setMsg('')}>
        <Alert severity="error" onClose={() => setMsg('')}>
          {msg}
        </Alert>
      </Snackbar>
    </PageContainer>
  );
};

export default LoginPage;


============================================================
FILE: src/Pages/auth/RegisterPage.tsx
============================================================
// File: src/pages/auth/RegisterPage.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from 'src/contexts/AuthContext';
import UsersManagementPage from 'src/Pages/users/UsersManagementPage';

const RegisterPage: React.FC = () => {
  const { hasPageAccess } = useAuth();

  // التحقق من صلاحية إضافة مستخدمين
  if (!hasPageAccess('UserManagement')) {
    return <Navigate to="/unauthorized" replace />;
  }

  // إعادة توجيه لصفحة إدارة المستخدمين
  return <UsersManagementPage />;
};

export default RegisterPage;


============================================================
FILE: src/Pages/company/CompanySettingsPage.tsx
============================================================
// File: src/pages/company/CompanySettingsPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Stack,
  Alert,
  Snackbar,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconBuilding,
  IconMapPin,
  IconPhone,
  IconMail,
  IconEdit,
  IconGavel,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useAuth } from 'src/contexts/AuthContext';
import { Branch } from 'src/utils/api/authApi';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const CompanySettingsPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { selectedBranch, branches } = useAuth();
  
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(false);
  const [allBranches, setAllBranches] = useState<Branch[]>([]);
  const [editingBranch, setEditingBranch] = useState<Branch | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const [companyForm, setCompanyForm] = useState({
    name: '',
    address: '',
    phone: '',
    email: ''
  });

  const [branchForm, setBranchForm] = useState({
    name: '',
    address: '',
    phone: ''
  });

  // تحميل بيانات الشركة والفروع
  useEffect(() => {
    if (selectedBranch?.company) {
      setCompanyForm({
        name: selectedBranch.company.name || '',
        address: selectedBranch.company.address || '',
        phone: selectedBranch.company.phone || '',
        email: selectedBranch.company.email || ''
      });
    }
    
    setAllBranches(branches);
  }, [selectedBranch, branches]);

  // تحديث بيانات الشركة
  const handleCompanyUpdate = async () => {
    try {
      setLoading(true);
      console.log('Updating company:', companyForm);
      
      setSnackbar({
        open: true,
        message: t('company.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('company.errors.updateFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // فتح dialog لتعديل الفرع
  const handleEditBranch = (branch: Branch) => {
    setEditingBranch(branch);
    setBranchForm({
      name: branch.name,
      address: branch.address || '',
      phone: branch.phone || ''
    });
    setDialogOpen(true);
  };

  // تحديث بيانات الفرع
  const handleBranchUpdate = async () => {
    try {
      setLoading(true);
      console.log('Updating branch:', editingBranch?.id, branchForm);
      
      setSnackbar({
        open: true,
        message: t('company.messages.branchUpdateSuccess'),
        severity: 'success'
      });
      setDialogOpen(false);
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('company.errors.branchUpdateFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('company.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary">
          {t('company.description')}
        </Typography>
      </Box>

      {/* Tabs */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={tabValue} 
            onChange={(_, newValue) => setTabValue(newValue)}
            variant={isMobile ? "scrollable" : "standard"}
            scrollButtons="auto"
          >
            <Tab 
              label={t('company.tabs.companyInfo')}
              icon={<IconBuilding size={20} />}
              iconPosition="start"
            />
            <Tab 
              label={t('company.tabs.branchManagement')}
              icon={<IconMapPin size={20} />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* Tab 1: Company Settings */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <Stack spacing={3}>
                <TextField
                  label={t('company.form.companyName')}
                  value={companyForm.name}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, name: e.target.value }))}
                  fullWidth
                  InputProps={{
                    startAdornment: <IconBuilding size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyAddress')}
                  value={companyForm.address}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, address: e.target.value }))}
                  fullWidth
                  multiline
                  rows={2}
                  InputProps={{
                    startAdornment: <IconMapPin size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyPhone')}
                  value={companyForm.phone}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, phone: e.target.value }))}
                  fullWidth
                  InputProps={{
                    startAdornment: <IconPhone size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <TextField
                  label={t('company.form.companyEmail')}
                  value={companyForm.email}
                  onChange={(e) => setCompanyForm(prev => ({ ...prev, email: e.target.value }))}
                  fullWidth
                  type="email"
                  InputProps={{
                    startAdornment: <IconMail size={20} style={{ marginRight: 8 }} />
                  }}
                />

                <Button
                  variant="contained"
                  startIcon={<IconGavel />}
                  onClick={handleCompanyUpdate}
                  disabled={loading}
                  sx={{ alignSelf: 'flex-start' }}
                >
                  {t('common.saveChanges')}
                </Button>
              </Stack>
            </Grid>

            <Grid item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {t('company.info.currentCompanyInfo')}
                  </Typography>
                  
                  <Stack spacing={2}>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.companyName')}
                      </Typography>
                      <Typography variant="body2">
                        {selectedBranch?.company.name || t('common.notSpecified')}
                      </Typography>
                    </Box>

                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.branchCount')}
                      </Typography>
                      <Typography variant="body2">
                        {t('company.info.branchCountValue', { count: branches.length })}
                      </Typography>
                    </Box>

                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('company.info.currentBranch')}
                      </Typography>
                      <Typography variant="body2">
                        {selectedBranch?.name || t('common.notSpecified')}
                      </Typography>
                    </Box>
                  </Stack>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 2: Branches Management */}
        <TabPanel value={tabValue} index={1}>
          <Box sx={{ mb: 2 }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center">
              <Typography variant="h6">
                {t('company.branches.title', { count: allBranches.length })}
              </Typography>
              <Button
                variant="outlined"
                startIcon={<IconRefresh />}
                onClick={() => setAllBranches(branches)}
                size="small"
              >
                {t('common.refresh')}
              </Button>
            </Stack>
          </Box>

          {isMobile ? (
            // Mobile View - Cards
            <Stack spacing={2}>
              {allBranches.map((branch) => (
                <Card key={branch.id} variant="outlined">
                  <CardContent>
                    <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="h6" gutterBottom>
                          {branch.name}
                        </Typography>
                        
                        <Stack spacing={1}>
                          {branch.address && (
                            <Stack direction="row" alignItems="center" spacing={1}>
                              <IconMapPin size={16} />
                              <Typography variant="body2">{branch.address}</Typography>
                            </Stack>
                          )}
                          
                          {branch.phone && (
                            <Stack direction="row" alignItems="center" spacing={1}>
                              <IconPhone size={16} />
                              <Typography variant="body2">{branch.phone}</Typography>
                            </Stack>
                          )}

                          <Chip
                            label={branch.id === selectedBranch?.id ? t('company.branches.currentBranch') : t('company.branches.otherBranch')}
                            size="small"
                            color={branch.id === selectedBranch?.id ? 'primary' : 'default'}
                            variant="outlined"
                          />
                        </Stack>
                      </Box>
                      
                      <IconButton
                        size="small"
                        onClick={() => handleEditBranch(branch)}
                        color="primary"
                      >
                        <IconEdit size={16} />
                      </IconButton>
                    </Stack>
                  </CardContent>
                </Card>
              ))}
            </Stack>
          ) : (
            // Desktop View - Table
            <TableContainer component={Paper} variant="outlined">
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>{t('company.table.branchName')}</TableCell>
                    <TableCell>{t('company.table.address')}</TableCell>
                    <TableCell>{t('company.table.phone')}</TableCell>
                    <TableCell>{t('company.table.status')}</TableCell>
                    <TableCell>{t('company.table.actions')}</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {allBranches.map((branch) => (
                    <TableRow key={branch.id}>
                      <TableCell>
                        <Stack direction="row" alignItems="center" spacing={1}>
                          <IconBuilding size={20} />
                          <Typography>{branch.name}</Typography>
                        </Stack>
                      </TableCell>
                      <TableCell>{branch.address || t('common.notSpecified')}</TableCell>
                      <TableCell>{branch.phone || t('common.notSpecified')}</TableCell>
                      <TableCell>
                        <Chip
                          label={branch.id === selectedBranch?.id ? t('company.branches.currentBranch') : t('company.branches.otherBranch')}
                          size="small"
                          color={branch.id === selectedBranch?.id ? 'primary' : 'default'}
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton
                          size="small"
                          onClick={() => handleEditBranch(branch)}
                          color="primary"
                        >
                          <IconEdit size={16} />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </TabPanel>
      </Card>

      {/* Edit Branch Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {t('company.dialog.editBranch')}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={2} sx={{ mt: 1 }}>
            <TextField
              label={t('company.form.branchName')}
              value={branchForm.name}
              onChange={(e) => setBranchForm(prev => ({ ...prev, name: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('company.form.branchAddress')}
              value={branchForm.address}
              onChange={(e) => setBranchForm(prev => ({ ...prev, address: e.target.value }))}
              fullWidth
              multiline
              rows={2}
            />
            
            <TextField
              label={t('company.form.branchPhone')}
              value={branchForm.phone}
              onChange={(e) => setBranchForm(prev => ({ ...prev, phone: e.target.value }))}
              fullWidth
            />
          </Stack>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button onClick={handleBranchUpdate} variant="contained" disabled={loading}>
            {t('common.saveChanges')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default CompanySettingsPage;


============================================================
FILE: src/Pages/components/CopyPasteButtons.tsx
============================================================
// File: src/components/CopyPasteButtons.tsx
import React from 'react';
import { Button, Stack, Tooltip } from '@mui/material';
import { 
  IconCopy, 
  IconClipboard, 
  IconClipboardCheck, 
  IconTrashX 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onCopy: () => void;
  onPaste: () => void;
  onClear: () => void;
  hasCopiedData: boolean;
  canCopy?: boolean;
  size?: 'small' | 'medium' | 'large';
  variant?: 'contained' | 'outlined' | 'text';
  showLabels?: boolean;
  direction?: 'row' | 'column';
  spacing?: number;
}

const CopyPasteButtons: React.FC<Props> = ({
  onCopy,
  onPaste,
  onClear,
  hasCopiedData,
  canCopy = true,
  size = 'small',
  variant = 'outlined',
  showLabels = true,
  direction = 'row',
  spacing = 1
}) => {
  const { t } = useTranslation();

  return (
    <Stack direction={direction} spacing={spacing}>
      <Tooltip title={t('common.copy')}>
        <span>
          <Button
            variant={variant}
            size={size}
            startIcon={<IconCopy size={16} />}
            onClick={onCopy}
            disabled={!canCopy}
            sx={{ minWidth: showLabels ? 80 : 'auto' }}
          >
            {showLabels ? t('common.copy') : ''}
          </Button>
        </span>
      </Tooltip>
      
      <Tooltip title={t('common.paste')}>
        <span>
          <Button
            variant={variant}
            size={size}
            startIcon={hasCopiedData ? <IconClipboardCheck size={16} /> : <IconClipboard size={16} />}
            onClick={onPaste}
            disabled={!hasCopiedData}
            color={hasCopiedData ? 'success' : 'inherit'}
            sx={{ minWidth: showLabels ? 80 : 'auto' }}
          >
            {showLabels ? t('common.paste') : ''}
          </Button>
        </span>
      </Tooltip>
      
      {hasCopiedData && (
        <Tooltip title={t('common.clearCopy')}>
          <span>
            <Button
              variant={variant}
              size={size}
              startIcon={<IconTrashX size={16} />}
              onClick={onClear}
              color="error"
              sx={{ minWidth: showLabels ? 80 : 'auto' }}
            >
              {showLabels ? t('common.clear') : ''}
            </Button>
          </span>
        </Tooltip>
      )}
    </Stack>
  );
};

export default CopyPasteButtons;


============================================================
FILE: src/Pages/components/ExportButtons.tsx
============================================================
// File: src/components/ExportButtons.tsx
import React from 'react';
import {
  Button,
  Stack,
  Box,
  Typography,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  IconFileTypePdf,
  IconFileTypeXls,
  IconDownload
} from '@tabler/icons-react';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

// Cairo Base64 modules (generated by your convert-font script)
import { cairoRegularBase64 } from 'src/assets/fonts/Cairo-Regular';
import { cairoBoldBase64    } from 'src/assets/fonts/Cairo-Bold';

import arabicReshaper from 'arabic-reshaper';
import bidiFactory from 'bidi-js';
const bidi = bidiFactory();

interface Column {
  field: string;
  headerName: string;
  width?: number;
  type?: 'string' | 'number' | 'date' | 'boolean';
  format?: (value: any) => string;
}

interface ExportButtonsProps {
  data: any[];
  columns: Column[];
  fileName: string;
  title?: string;
  disabled?: boolean;
  loading?: boolean;
  compact?: boolean;
}

const ExportButtons: React.FC<ExportButtonsProps> = ({
  data,
  columns,
  fileName,
  title,
  disabled = false,
  loading = false,
  compact = false
}) => {
  const { t } = useTranslation();
  const customizer = useSelector((state: AppState) => state.customizer);
  const isRTL = customizer.activeDir === 'rtl';

  const getNested = (obj: any, path: string) =>
    path.split('.').reduce((o, k) => (o && o[k] != null ? o[k] : ''), obj);

  // Prepare rows for Excel/PDF
  const prepareRows = () =>
    data.map(row => {
      const r: Record<string, any> = {};
      columns.forEach(col => {
        let v = getNested(row, col.field);
        if (col.format && v != null) {
          v = col.format(v);
        } else {
          switch (col.type) {
            case 'number':
              v = typeof v === 'number' ? v.toFixed(2) : v || '0.00';
              break;
            case 'date':
              v = v ? new Date(v).toLocaleDateString() : '';
              break;
            case 'boolean':
              v = v ? t('common.yes') : t('common.no');
              break;
            default:
              v = v || '';
          }
        }
        r[col.headerName] = v;
      });
      return r;
    });

  const exportPDF = () => {
    try {
      const doc = new jsPDF({
        orientation: columns.length > 6 ? 'landscape' : 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // clean out any non-base64 chars
      const reg64  = cairoRegularBase64.replace(/[^A-Za-z0-9+/=]/g, '');
      const bold64 = cairoBoldBase64   .replace(/[^A-Za-z0-9+/=]/g, '');

      // register Cairo fonts
      doc.addFileToVFS('Cairo-Regular.ttf', reg64);
      doc.addFont('Cairo-Regular.ttf', 'Cairo', 'normal');
      doc.addFileToVFS('Cairo-Bold.ttf', bold64);
      doc.addFont('Cairo-Bold.ttf',    'Cairo', 'bold');

      // helper: reshape + bidi
      const shape = (txt: string) =>
        isRTL ? bidi(arabicReshaper.reshape(txt)) : txt;

      // title
      if (title) {
        doc.setFont('Cairo', 'bold');
        doc.setFontSize(16);
        const pw = doc.internal.pageSize.getWidth();
        const x  = isRTL ? pw - 20 : 20;
        doc.text(shape(title), x, 20, { align: isRTL ? 'right' : 'left' });
      }

      // prepare table head & body
      const head = columns.map(c => shape(c.headerName));
      const body = prepareRows().map(r =>
        columns.map(col => shape(String(r[col.headerName])))
      );

      // set default font for body
      doc.setFont('Cairo', 'normal');

      autoTable(doc, {
        head: [head],
        body,
        startY: title ? 30 : 20,
        styles: {
          font: 'Cairo',
          fontStyle: 'normal',
          fontSize: 9,
          cellPadding: 3
        },
        headStyles: {
          font: 'Cairo',
          fontStyle: 'bold',
          fontSize: 10,
          halign: isRTL ? 'right' : 'left',
          fillColor: [66, 139, 202],
          textColor: [255, 255, 255]
        },
        bodyStyles: {
          halign: isRTL ? 'right' : 'left'
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        margin: { top: 15, right: 15, bottom: 15, left: 15 },
        didDrawPage: () => {
          const date   = new Date().toLocaleDateString();
          const footer = `${t('common.exportedOn')}: ${date}`;
          const ph     = doc.internal.pageSize.getHeight();
          doc.setFont('Cairo', 'normal');
          doc.setFontSize(8);
          doc.text(footer, isRTL ? doc.internal.pageSize.getWidth() - 20 : 20, ph - 10);
        }
      });

      doc.save(`${fileName}_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (err) {
      alert(t('export.errorPdf'));
    }
  };

  const exportExcel = () => {
    try {
      const rows    = prepareRows();
      const headers = columns.map(c => c.headerName);
      const aoa     = [headers, ...rows.map(r => headers.map(h => r[h]))];
      const ws      = XLSX.utils.aoa_to_sheet(aoa);

      // column widths
      ws['!cols'] = columns.map(c => ({ wch: Math.max(c.headerName.length + 5, 15) }));

      // style header row
      const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');
      for (let C = range.s.c; C <= range.e.c; C++) {
        const cell = XLSX.utils.encode_cell({ r: 0, c: C });
        if (ws[cell]) {
          ws[cell].s = {
            font: { bold: true, name: 'Tahoma', color: { rgb: 'FFFFFF' } },
            fill: { fgColor: { rgb: '428BCA' } },
            alignment: { horizontal: isRTL ? 'right' : 'left', readingOrder: isRTL ? 2 : 1 }
          };
        }
      }

      // style body rows
      for (let R = 1; R <= range.e.r; R++) {
        for (let C = range.s.c; C <= range.e.c; C++) {
          const cell = XLSX.utils.encode_cell({ r: R, c: C });
          if (ws[cell]) {
            ws[cell].s = {
              ...(ws[cell].s || {}),
              font: { name: 'Tahoma' },
              alignment: { horizontal: isRTL ? 'right' : 'left', readingOrder: isRTL ? 2 : 1 }
            };
          }
        }
      }

      // if title provided, insert above headers
      if (title) {
        XLSX.utils.sheet_add_aoa(ws, [[title]], { origin: 'A1' });
        XLSX.utils.sheet_add_aoa(ws, [[]],       { origin: 'A2' });
        const nr = XLSX.utils.decode_range(ws['!ref']!);
        nr.s.r = 2;
        ws['!ref'] = XLSX.utils.encode_range(nr);
      }

      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Data');
      wb.Props = {
        Title:       title || fileName,
        Subject:     t('export.subject'),
        Author:      t('export.author'),
        CreatedDate: new Date()
      };
      XLSX.writeFile(wb, `${fileName}_${new Date().toISOString().split('T')[0]}.xlsx`);
    } catch {
      alert(t('export.errorExcel'));
    }
  };

  if (!data.length) return null;

  if (compact) {
    return (
      <Stack direction="row" spacing={1} alignItems="center">
        <Typography variant="caption" color="text.secondary" sx={{ mr: 1 }}>
          <IconDownload size={16} style={{ marginRight: 4, verticalAlign: 'middle' }} />
          {t('export.title')}:
        </Typography>
        <Tooltip title={t('export.pdf')}>
          <IconButton onClick={exportPDF} disabled={disabled || loading} size="small" color="error"  sx={{ border: '1px solid', borderColor: 'error.main', borderRadius: 1, '&:hover': { backgroundColor: 'error.light', color: 'white' } }}>
            <IconFileTypePdf size={18} />
          </IconButton>
        </Tooltip>
        <Tooltip title={t('export.excel')}>
          <IconButton onClick={exportExcel} disabled={disabled || loading} size="small" color="success" sx={{ border: '1px solid', borderColor: 'success.main', borderRadius: 1, '&:hover': { backgroundColor: 'success.light', color: 'white' } }}>
            <IconFileTypeXls size={18} />
          </IconButton>
        </Tooltip>
        <Typography variant="caption" color="text.secondary">
          ({data.length} {t('export.records')})
        </Typography>
      </Stack>
    );
  }

  return (
    <Box>
      <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2, flexWrap: 'wrap', gap: 1 }}>
        <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <IconDownload size={20} /> {t('export.title')}
        </Typography>
        <Button
          variant="outlined"
          startIcon={<IconFileTypePdf />}
          onClick={exportPDF}
          disabled={disabled || loading || !data.length}
          color="error"
          size="small"
          sx={{ borderWidth: 2, '&:hover': { borderWidth: 2 } }}
        >
          {t('export.pdf')}
        </Button>
        <Button
          variant="outlined"
          startIcon={<IconFileTypeXls />}
          onClick={exportExcel}
          disabled={disabled || loading || !data.length}
          color="success"
          size="small"
          sx={{ borderWidth: 2, '&:hover': { borderWidth: 2 } }}
        >
          {t('export.excel')}
        </Button>
        <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
          {t('export.recordsCount', { count: data.length })}
        </Typography>
      </Stack>
    </Box>
  );
};

export default ExportButtons;


============================================================
FILE: src/Pages/components/ImportExportManager.tsx
============================================================
// File: src/components/ImportExportManager.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  Stack,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  Alert,
  LinearProgress,
  Divider,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconFileImport,
  IconDownload,
  IconUpload,
  IconFileSpreadsheet,
  IconFile3d,
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import 'jspdf/dist/jspdf.es.min.js';
import html2canvas from 'html2canvas';

export interface ColumnConfig {
  field: string;
  headerName: string;
  headerNameEn?: string; // إضافة الترجمة الإنجليزية
  type: 'string' | 'number' | 'date' | 'boolean';
  required?: boolean;
  format?: (value: any) => string;
  validate?: (value: any) => string | null;
  width?: number;
  example?: string;
  exampleEn?: string; // إضافة المثال الإنجليزي
}

export interface ImportExportConfig {
  moduleName: string;
  moduleNameEn?: string; // إضافة الاسم الإنجليزي
  fileName: string;
  title: string;
  titleEn?: string; // إضافة العنوان الإنجليزي
  columns: ColumnConfig[];
  onImport: (data: any[]) => Promise<{ success: number; errors: string[] }>;
  onExport?: () => any[];
  maxRows?: number;
  allowedFileTypes?: string[];
}

interface Props {
  config: ImportExportConfig;
  data?: any[];
  loading?: boolean;
  compact?: boolean;
  showImport?: boolean; // جديد
  showExport?: boolean; // جديد
}

const ImportExportManager: React.FC<Props> = ({
  config,
  data = [],
  loading = false,
  compact = false,
  showImport = true,
  showExport = true
}) => {
  const { t, i18n } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isRTL = i18n.language === 'ar';
  // دالة لإعداد خط Cairo في jsPDF
  const [importDialog, setImportDialog] = useState(false);
  const [importFile, setImportFile] = useState<File | null>(null);
  const [importData, setImportData] = useState<any[]>([]);
  const [importErrors, setImportErrors] = useState<string[]>([]);
  const [importing, setImporting] = useState(false);
  const [importResult, setImportResult] = useState<{ success: number; errors: string[] } | null>(null);

  // دالة للحصول على النص حسب اللغة
const getLocalizedText = (keyOrText: string, englishKeyOrText?: string) => {
  // إذا كان النص يحتوي على نقطة، فهو key للترجمة
  if (keyOrText.includes('.')) {
    const translatedText = t(keyOrText);
    // إذا كانت الترجمة نفس الـ key، يعني مش موجودة
    if (translatedText === keyOrText) {
      return isRTL ? keyOrText : (englishKeyOrText || keyOrText);
    }
    return translatedText;
  }
  // وإلا استخدم النص مباشرة
  return isRTL ? keyOrText : (englishKeyOrText || keyOrText);
};

  // دالة للحصول على العمود حسب اللغة
  const getLocalizedColumn = (col: ColumnConfig) => ({
    ...col,
    headerName: getLocalizedText(col.headerName, col.headerNameEn),
    example: getLocalizedText(col.example || '', col.exampleEn || '')
  });

  /* ───── Export Functions ───── */
  const exportToExcel = () => {
    const exportData = config.onExport ? config.onExport() : data;
    
    const processedData = exportData.map(item => {
      const row: any = {};
      config.columns.forEach(col => {
        const localizedCol = getLocalizedColumn(col);
        const value = getNestedValue(item, col.field);
        row[localizedCol.headerName] = col.format ? col.format(value) : value;
      });
      return row;
    });

    const ws = XLSX.utils.json_to_sheet(processedData);
    
    // تحسين عرض الأعمدة
    const colWidths = config.columns.map(col => {
      const localizedCol = getLocalizedColumn(col);
      return {
        wch: col.width || Math.max(localizedCol.headerName.length, 15)
      };
    });
    ws['!cols'] = colWidths;

    const wb = XLSX.utils.book_new();
    const sheetName = getLocalizedText(config.moduleName, config.moduleNameEn);
    XLSX.utils.book_append_sheet(wb, ws, sheetName);
    
    XLSX.writeFile(wb, `${config.fileName}_${new Date().toISOString().split('T')[0]}.xlsx`);
  };

const exportToPDF = async () => {
  // 1. Gather data to export
  const exportData = config.onExport ? config.onExport() : data;

  // 2. Build a hidden container for html2canvas
  const tempDiv = document.createElement('div');
  Object.assign(tempDiv.style, {
    position: 'absolute',
    left: '-9999px',
    top: '-9999px',
    backgroundColor: 'white',
    padding: '40px',
    fontFamily: isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif',
    direction: isRTL ? 'rtl' : 'ltr',
    width: '1200px',
    fontSize: '14px',
    lineHeight: '1.6',
    textAlign: isRTL ? 'right' : 'left',
  });

  // 3. Load Cairo font for Arabic if needed
  if (isRTL) {
    const cairoFontLink = document.createElement('link');
    cairoFontLink.href = 'https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap';
    cairoFontLink.rel = 'stylesheet';
    document.head.appendChild(cairoFontLink);
    await new Promise((resolve) => setTimeout(resolve, 1500));
  }

  // 4. Build the HTML table
  const title = getLocalizedText(config.title, config.titleEn);
  const dateText = `${t('common.exportDate')}: ${new Date().toLocaleDateString()}`;

  // Header -- note the table itself is RTL, so **no array reversing necessary**
  const localizedColumns = config.columns.map((col) => getLocalizedColumn(col));

  let tableHTML = `
    <div style="text-align:${isRTL ? 'right' : 'left'};margin-bottom:30px;direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">
      <h1 style="margin:0 0 15px;font-size:28px;font-weight:700;color:#2c3e50;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;text-align:${isRTL ? 'right' : 'left'};">
        ${title}
      </h1>
      <p style="margin:0;font-size:16px;color:#7f8c8d;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;text-align:${isRTL ? 'right' : 'left'};">
        ${dateText}
      </p>
    </div>
    <table style="width:100%;border-collapse:collapse;font-size:14px;box-shadow:0 4px 12px rgba(0,0,0,0.15);border-radius:12px;overflow:hidden;font-family:${
      isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
    };direction:${isRTL ? 'rtl' : 'ltr'};">
      <thead>
        <tr style="background:linear-gradient(135deg,#3498db,#2980b9);color:white;">`;

  localizedColumns.forEach((col) => {
    tableHTML += `
      <th style="border:none;padding:20px 18px;text-align:${
        isRTL ? 'right' : 'left'
      };font-weight:600;font-size:16px;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">${col.headerName}</th>`;
  });

  tableHTML += `</tr></thead><tbody>`;

  // Body rows (keep original column order)
  exportData.forEach((item, index) => {
    const isEven = index % 2 === 0;
    tableHTML += `<tr style="background-color:${isEven ? '#f8f9fa' : 'white'};">`;

    config.columns.forEach((col) => {
      const value = getNestedValue(item, col.field);
      let formattedValue = col.format ? col.format(value) : String(value ?? '');

      if (isRTL) {
        // Quick localisation of common boolean-ish values
        switch (formattedValue) {
          case 'true':
          case 'Active':
          case 'Yes':
            formattedValue = 'نشط';
            break;
          case 'false':
          case 'Inactive':
          case 'No':
            formattedValue = 'غير نشط';
            break;
        }
      }

      tableHTML += `
        <td style="border:1px solid #e9ecef;padding:16px 15px;text-align:${
          isRTL ? 'right' : 'left'
        };color:#2c3e50;font-size:14px;font-family:${
        isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
      };direction:${isRTL ? 'rtl' : 'ltr'};unicode-bidi:embed;">${formattedValue}</td>`;
    });

    tableHTML += `</tr>`;
  });

  tableHTML += `
      </tbody>
    </table>
    <div style="margin-top:30px;text-align:center;color:#95a5a6;font-size:12px;font-family:${
      isRTL ? 'Cairo, Tahoma, Arial, sans-serif' : 'Arial, sans-serif'
    };">Generated on ${new Date().toLocaleString()}</div>`;

  tempDiv.innerHTML = tableHTML;
  document.body.appendChild(tempDiv);

  // 5. Capture, place into jsPDF
  try {
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: 1200,
      height: tempDiv.scrollHeight,
      scrollX: 0,
      scrollY: 0,
      windowWidth: 1200,
      windowHeight: tempDiv.scrollHeight,
      logging: false,
      imageTimeout: 20000,
    });

    const imgData = canvas.toDataURL('image/png', 1.0);
    const pdf = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4', compress: true });

    const pdfW = pdf.internal.pageSize.getWidth();
    const pdfH = pdf.internal.pageSize.getHeight();
    const margin = 10;
    const availW = pdfW - margin * 2;
    const availH = pdfH - margin * 2;

    const canvasRatio = canvas.width / canvas.height;
    const availRatio = availW / availH;

    let finalW, finalH;
    if (canvasRatio > availRatio) {
      finalW = availW;
      finalH = availW / canvasRatio;
    } else {
      finalH = availH;
      finalW = availH * canvasRatio;
    }

    const xOffset = margin + (availW - finalW) / 2;
    const yOffset = margin + (availH - finalH) / 2;

    pdf.addImage(imgData, 'PNG', xOffset, yOffset, finalW, finalH);
    pdf.save(`${config.fileName}_${new Date().toISOString().split('T')[0]}.pdf`);
  } catch (err) {
    console.error('Error generating PDF:', err);
  } finally {
    document.body.removeChild(tempDiv);
  }
};



// دالة احتياطية بسيطة

  /* ───── Template Download ───── */
  const downloadTemplate = () => {
    const templateData = [{}];
    
    // إنشاء صف للأمثلة
    const exampleRow: any = {};
    config.columns.forEach(col => {
      const localizedCol = getLocalizedColumn(col);
      exampleRow[localizedCol.headerName] = localizedCol.example || getExampleValue(col.type);
    });
    templateData.push(exampleRow);

    const ws = XLSX.utils.json_to_sheet(templateData);
    
    // إضافة تعليقات للأعمدة المطلوبة
    config.columns.forEach((col, index) => {
      const localizedCol = getLocalizedColumn(col);
      const cellRef = XLSX.utils.encode_cell({ r: 0, c: index });
      if (!ws[cellRef]) ws[cellRef] = { v: localizedCol.headerName };
      
      if (col.required) {
        ws[cellRef].s = {
          fill: { fgColor: { rgb: "FFFF00" } },
          font: { bold: true }
        };
      }
    });

    // تحسين عرض الأعمدة
    const colWidths = config.columns.map(col => {
      const localizedCol = getLocalizedColumn(col);
      return {
        wch: Math.max(localizedCol.headerName.length, 20)
      };
    });
    ws['!cols'] = colWidths;

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Template');
    
    // إضافة sheet للتعليمات
    const instructionsTitle = isRTL ? 'تعليمات الاستخدام' : 'Usage Instructions';
    const instructions = isRTL ? [
      { [instructionsTitle]: 'يرجى اتباع التعليمات التالية:' },
      { [instructionsTitle]: '1. املأ البيانات في الصف الثاني وما بعده' },
      { [instructionsTitle]: '2. الأعمدة ذات الخلفية الصفراء مطلوبة' },
      { [instructionsTitle]: '3. لا تغير أسماء الأعمدة' },
      { [instructionsTitle]: '4. احفظ الملف بصيغة Excel (.xlsx)' },
      { [instructionsTitle]: '' },
      { [instructionsTitle]: 'أنواع البيانات المطلوبة:' }
    ] : [
      { [instructionsTitle]: 'Please follow these instructions:' },
      { [instructionsTitle]: '1. Fill data in the second row and beyond' },
      { [instructionsTitle]: '2. Columns with yellow background are required' },
      { [instructionsTitle]: '3. Do not change column names' },
      { [instructionsTitle]: '4. Save the file in Excel format (.xlsx)' },
      { [instructionsTitle]: '' },
      { [instructionsTitle]: 'Required data types:' }
    ];

    const instructionsData = [
      ...instructions,
      ...config.columns.map(col => {
        const localizedCol = getLocalizedColumn(col);
        const requiredText = isRTL ? 
          (col.required ? '(مطلوب)' : '(اختياري)') :
          (col.required ? '(Required)' : '(Optional)');
        
        return {
          [instructionsTitle]: `${localizedCol.headerName}: ${getTypeDescription(col.type)} ${requiredText}`
        };
      })
    ];

    const instructionsWs = XLSX.utils.json_to_sheet(instructionsData);
    instructionsWs['!cols'] = [{ wch: 50 }];
    const instructionsSheetName = isRTL ? 'تعليمات' : 'Instructions';
    XLSX.utils.book_append_sheet(wb, instructionsWs, instructionsSheetName);
    
    XLSX.writeFile(wb, `${config.fileName}_template.xlsx`);
  };

  /* ───── Import Functions ───── */
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImportFile(file);
      setImportErrors([]);
      setImportResult(null);
      
      // قراءة الملف
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          
          // تحويل البيانات وتنظيفها
          const processedData = processImportData(jsonData);
          setImportData(processedData);
        } catch (error) {
          setImportErrors([t('import.fileReadError')]);
        }
      };
      reader.readAsArrayBuffer(file);
    }
  };

  const processImportData = (rawData: any[]) => {
    const processedData: any[] = [];
    const errors: string[] = [];

    rawData.forEach((row, index) => {
      if (index === 0 && isExampleRow(row)) return;
      
      const processedRow: any = {};
      let hasData = false;

      config.columns.forEach(col => {
        const localizedCol = getLocalizedColumn(col);
        // البحث عن القيمة بكلا الاسمين (العربي والإنجليزي)
        const value = row[localizedCol.headerName] || row[col.headerName] || row[col.headerNameEn || ''];
        
        if (value !== undefined && value !== null && value !== '') {
          hasData = true;
          processedRow[col.field] = convertValue(value, col.type);
        } else if (col.required) {
          errors.push(`${t('import.requiredField')} "${localizedCol.headerName}" ${t('import.inRow')} ${index + 1}`);
        }

        if (col.validate && processedRow[col.field] !== undefined) {
          const validationError = col.validate(processedRow[col.field]);
          if (validationError) {
            errors.push(`${t('import.validationError')} "${localizedCol.headerName}" ${t('import.inRow')} ${index + 1}: ${validationError}`);
          }
        }
      });

      if (hasData) {
        processedData.push(processedRow);
      }
    });

    setImportErrors(errors);
    return processedData;
  };

  const handleImport = async () => {
    if (importData.length === 0) return;
    
    setImporting(true);
    try {
      const result = await config.onImport(importData);
      setImportResult(result);
      
      if (result.errors.length === 0) {
        setTimeout(() => {
          setImportDialog(false);
          setImportFile(null);
          setImportData([]);
          setImportResult(null);
        }, 2000);
      }
    } catch (error) {
      setImportErrors([t('import.importError')]);
    } finally {
      setImporting(false);
    }
  };

  /* ───── Helper Functions ───── */
  const getNestedValue = (obj: any, path: string) => {
    return path.split('.').reduce((current, key) => current?.[key], obj);
  };

  const getExampleValue = (type: string) => {
    if (isRTL) {
      switch (type) {
        case 'string': return 'نص تجريبي';
        case 'number': return '123';
        case 'date': return '2024-01-01';
        case 'boolean': return 'نعم';
        default: return 'قيمة تجريبية';
      }
    } else {
      switch (type) {
        case 'string': return 'Sample Text';
        case 'number': return '123';
        case 'date': return '2024-01-01';
        case 'boolean': return 'Yes';
        default: return 'Sample Value';
      }
    }
  };

  const getTypeDescription = (type: string) => {
    if (isRTL) {
      switch (type) {
        case 'string': return 'نص';
        case 'number': return 'رقم';
        case 'date': return 'تاريخ (YYYY-MM-DD)';
        case 'boolean': return 'نعم/لا';
        default: return 'نص';
      }
    } else {
      switch (type) {
        case 'string': return 'Text';
        case 'number': return 'Number';
        case 'date': return 'Date (YYYY-MM-DD)';
        case 'boolean': return 'Yes/No';
        default: return 'Text';
      }
    }
  };

  const isExampleRow = (row: any) => {
    return Object.values(row).some(value => 
      String(value).includes('تجريبي') || 
      String(value).includes('example') ||
      String(value).includes('Sample')
    );
  };

  const convertValue = (value: any, type: string) => {
    switch (type) {
      case 'number':
        const num = Number(value);
        return isNaN(num) ? 0 : num;
      case 'boolean':
        const lowerValue = String(value).toLowerCase();
        return ['نعم', 'yes', 'true', '1', 1, true].includes(lowerValue);
      case 'date':
        return new Date(value).toISOString().split('T')[0];
      default:
        return String(value);
    }
  };

  /* ───── Render ───── */
  return (
    <Box>
      {/* Export & Import Buttons */}
      <Stack 
        direction={compact ? "column" : "row"} 
        spacing={1} 
        sx={{ mb: 2 }}
      >
        {/* Export Buttons */}
 {showExport && (
          <>
            <Button
              variant="outlined"
              startIcon={<IconFileSpreadsheet size={16} />}
              onClick={exportToExcel}
              disabled={loading}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('export.exportExcel')}
            </Button>
            
            <Button
              variant="outlined"
              startIcon={<IconFile3d size={16} />}
              onClick={exportToPDF}
              disabled={loading}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('export.exportPdf')}
            </Button>
          </>
        )}

        {(showImport || showExport) && <Divider orientation={compact ? "horizontal" : "vertical"} flexItem />}

        {/* Import Buttons */}
 {showImport && (
          <>
            <Button
              variant="outlined"
              startIcon={<IconDownload size={16} />}
              onClick={downloadTemplate}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
              color="secondary"
            >
              {t('import.downloadTemplate')}
            </Button>

            <Button
              variant="contained"
              startIcon={<IconFileImport size={16} />}
              onClick={() => setImportDialog(true)}
              size={compact ? "small" : "medium"}
              fullWidth={compact}
            >
              {t('import.import')}
            </Button>
          </>
        )}
      </Stack>

      {/* Import Dialog */}
      <Dialog 
        open={importDialog} 
        onClose={() => setImportDialog(false)}
        maxWidth="md"
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>
          {t('import.importTitle')} - {getLocalizedText(config.title, config.titleEn)}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={3}>
            {/* File Upload */}
            <Box>
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileSelect}
                style={{ display: 'none' }}
                id="import-file-input"
              />
              <label htmlFor="import-file-input">
                <Button
                  variant="outlined"
                  component="span"
                  startIcon={<IconUpload />}
                  fullWidth
                  sx={{ p: 2 }}
                >
                  {importFile ? importFile.name : t('import.selectFile')}
                </Button>
              </label>
            </Box>

            {/* Import Progress */}
            {importing && (
              <Box>
                <Typography variant="body2" gutterBottom>
                  {t('import.importing')}...
                </Typography>
                <LinearProgress />
              </Box>
            )}

            {/* Import Errors */}
            {importErrors.length > 0 && (
              <Alert severity="error">
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.errorsFound')}:
                </Typography>
                {importErrors.map((error, index) => (
                  <Typography key={index} variant="body2">
                    • {error}
                  </Typography>
                ))}
              </Alert>
            )}

            {/* Import Result */}
            {importResult && (
              <Alert severity={importResult.errors.length === 0 ? "success" : "warning"}>
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.importComplete')}
                </Typography>
                <Typography variant="body2">
                  {t('import.successfulRecords')}: {importResult.success}
                </Typography>
                {importResult.errors.length > 0 && (
                  <Box sx={{ mt: 1 }}>
                    <Typography variant="body2" color="error">
                      {t('import.failedRecords')}: {importResult.errors.length}
                    </Typography>
                    {importResult.errors.slice(0, 5).map((error, index) => (
                      <Typography key={index} variant="caption" display="block">
                        • {error}
                      </Typography>
                    ))}
                    {importResult.errors.length > 5 && (
                      <Typography variant="caption" color="text.secondary">
                        {t('import.andMore', { count: importResult.errors.length - 5 })}
                      </Typography>
                    )}
                  </Box>
                )}
              </Alert>
            )}

            {/* Data Preview */}
            {importData.length > 0 && importErrors.length === 0 && !importResult && (
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  {t('import.dataPreview')} ({importData.length} {t('import.records')}):
                </Typography>
                <Box sx={{ maxHeight: 200, overflow: 'auto', border: 1, borderColor: 'divider', borderRadius: 1, p: 1 }}>
                  {importData.slice(0, 3).map((row, index) => (
                    <Box key={index} sx={{ mb: 1, p: 1, backgroundColor: 'grey.50', borderRadius: 1 }}>
                      {config.columns.map(col => {
                        const localizedCol = getLocalizedColumn(col);
                        return (
                          <Typography key={col.field} variant="caption" display="block">
                            <strong>{localizedCol.headerName}:</strong> {String(row[col.field] || '-')}
                          </Typography>
                        );
                      })}
                    </Box>
                  ))}
                  {importData.length > 3 && (
                    <Typography variant="caption" color="text.secondary">
                      {t('import.andMoreRecords', { count: importData.length - 3 })}
                    </Typography>
                  )}
                </Box>
              </Box>
            )}
          </Stack>
        </DialogContent>

        <DialogActions>
          <Button onClick={() => setImportDialog(false)}>
            {t('common.cancel')}
          </Button>
          <Button
            onClick={handleImport}
            variant="contained"
            disabled={importData.length === 0 || importErrors.length > 0 || importing}
          >
            {importing ? t('import.importing') : t('import.import')}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ImportExportManager;


============================================================
FILE: src/Pages/components/PageHeader.tsx
============================================================
// File: src/components/PageHeader.tsx
import React from 'react';
import { Box, Typography, Stack } from '@mui/material';
import { useTranslation } from 'react-i18next';
import ExportButtons from './ExportButtons';

interface Column {
  field: string;
  headerName: string;
  width?: number;
  type?: 'string' | 'number' | 'date' | 'boolean';
  format?: (value: any) => string;
}

interface PageHeaderProps {
  titleKey: string;
  subtitleKey: string;
  // خصائص التصدير (اختيارية)
  exportData?: any[];
  exportColumns?: Column[];
  exportFileName?: string;
  exportLoading?: boolean;
}

const PageHeader: React.FC<PageHeaderProps> = ({
  titleKey,
  subtitleKey,
  exportData = [],
  exportColumns = [],
  exportFileName = 'data',
  exportLoading = false
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
        <Box>
          <Typography variant="h5" fontWeight="bold">{t(titleKey)}</Typography>
          <Typography variant="body2" color="text.secondary">
            {t(subtitleKey)}
          </Typography>
        </Box>
        
        {/* أزرار التصدير */}
        {exportData.length > 0 && exportColumns.length > 0 && (
          <ExportButtons
            data={exportData}
            columns={exportColumns}
            fileName={exportFileName}
            title={t(titleKey)}
            loading={exportLoading}
            compact={true}
          />
        )}
      </Stack>
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/components/SearchableSelect.tsx
============================================================
import React, { useState, useEffect, useRef } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment,
  Typography,
  ListSubheader,
  MenuProps
} from '@mui/material';
import { IconSearch } from '@tabler/icons-react';
import { t } from 'i18next';

interface Option {
  id: string;
  name: string;
  [key: string]: any;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  size?: 'small' | 'medium';
  autoFocusSearch?: boolean;
  onSelectionComplete?: () => void; // موجود بالفعل
}

const SearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled,
  fullWidth = true,
  size = 'medium',
  autoFocusSearch = false,
  onSelectionComplete
}) => {
  const [searchText, setSearchText] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const [open, setOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const searchInputRef = useRef<HTMLInputElement>(null);

  // Recompute filteredOptions when options or searchText change:
  useEffect(() => {
    const filtered = options.filter(option =>
      option.name.toLowerCase().includes(searchText.toLowerCase())
    );
    setFilteredOptions(filtered);
    setSelectedIndex(-1);
  }, [searchText, options]);

  // Whenever `open` becomes true and autoFocusSearch is set, focus the search input:
useEffect(() => {
  if (open && autoFocusSearch) {
    // تأكد من الـ focus فوراً
    const timer = setTimeout(() => {
      if (searchInputRef.current) {
        const inputElement = searchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select(); // تحديد النص الموجود
        }
      }
    }, 50); // وقت أقل للاستجابة الأسرع

    return () => clearTimeout(timer);
  }
}, [open, autoFocusSearch]);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
    setSelectedIndex(-1);
  };

  const handleChange = (event: any) => {
    onChange(event.target.value);
    handleClose();
    
    // التعديل الوحيد هنا - إضافة callback
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  };

  // Arrow-key navigation inside the search box:
const handleSearchKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'ArrowUp') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.max(prev - 1, -1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'Enter' && selectedIndex >= 0) {
    e.preventDefault();
    e.stopPropagation();
    onChange(filteredOptions[selectedIndex].id);
    handleClose();
    
    // إضافة callback هنا كمان
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    e.stopPropagation();
    handleClose();
  }
};

  // If the closed Select is focused and the user starts typing a letter,
  // open the dropdown with that letter in the search field:
  const handleSelectKeyDown = (e: React.KeyboardEvent) => {
    if (
      e.key.length === 1 &&
      !e.ctrlKey &&
      !e.altKey &&
      !e.metaKey
    ) {
      e.preventDefault();
      setOpen(true);
      setSearchText(e.key);
      // Focus the search input after the dropdown appears:
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
          searchInputRef.current.setSelectionRange(1, 1);
        }
      }, 100);
    }
  };

  const customMenuProps: Partial<MenuProps> = {
    PaperProps: {
      style: {
        maxHeight: 300,
      },
    },
    onClose: (_event, reason) => {
      if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
        handleClose();
      }
    },
  };

  return (
    <FormControl fullWidth={fullWidth} size={size} error={error} disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value}
        label={label}
        open={open}
        onOpen={handleOpen}
        onClose={handleClose}
        onChange={handleChange}
        onKeyDown={handleSelectKeyDown}
        MenuProps={customMenuProps}
      >
        <ListSubheader>
          <TextField
            ref={searchInputRef}
            size="small"
            placeholder={t('common.search') || 'البحث...'}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            onKeyDown={handleSearchKeyDown}
            onClick={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            autoComplete="off"
          />
        </ListSubheader>

        {placeholder && !value && (
          <MenuItem value="" disabled>
            <Typography color="text.secondary">{placeholder}</Typography>
          </MenuItem>
        )}

        {filteredOptions.length === 0 ? (
          <MenuItem disabled>
            <Typography color="text.secondary">
              {t('common.noResults') || 'لا توجد نتائج'}
            </Typography>
          </MenuItem>
        ) : (
          filteredOptions.map((option, index) => (
            <MenuItem
              key={option.id}
              value={option.id}
              selected={index === selectedIndex}
              sx={{
                backgroundColor:
                  index === selectedIndex ? 'action.selected' : 'transparent',
              }}
            >
              {option.name}
            </MenuItem>
          ))
        )}
      </Select>
    </FormControl>
  );
};

export default SearchableSelect;


============================================================
FILE: src/Pages/errors/NoBranchesPage.tsx
============================================================
// File: src/pages/errors/NoBranchesPage.tsx
import React from 'react';
import { Box, Typography, Button, Container, Alert } from '@mui/material';
import { IconBuilding, IconLogout } from '@tabler/icons-react';
import { useAuth } from 'src/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const NoBranchesPage: React.FC = () => {
  const { t } = useTranslation();
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/auth/login');
  };

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          textAlign: 'center'
        }}
      >
        <IconBuilding size={64} color="warning" />
        <Typography variant="h4" sx={{ mt: 2, mb: 1 }}>
          {t('errors.noBranches.title')}
        </Typography>
        
        <Alert severity="warning" sx={{ mt: 2, mb: 3 }}>
          <Typography variant="body1">
            {t('errors.noBranches.message')}
          </Typography>
        </Alert>
        
        <Button
          variant="contained"
          color="error"
          startIcon={<IconLogout />}
          onClick={handleLogout}
        >
          {t('auth.logout')}
        </Button>
      </Box>
    </Container>
  );
};

export default NoBranchesPage;


============================================================
FILE: src/Pages/errors/UnauthorizedPage.tsx
============================================================
// File: src/pages/errors/UnauthorizedPage.tsx
import React from 'react';
import { Box, Typography, Button, Container } from '@mui/material';
import { IconLock } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const UnauthorizedPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          textAlign: 'center'
        }}
      >
        <IconLock size={64} color="error" />
        <Typography variant="h4" sx={{ mt: 2, mb: 1 }}>
          {t('errors.unauthorized.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
          {t('errors.unauthorized.message')}
        </Typography>
        <Button
          variant="contained"
          onClick={() => navigate('/dashboard')}
        >
          {t('errors.unauthorized.backToDashboard')}
        </Button>
      </Box>
    </Container>
  );
};

export default UnauthorizedPage;


============================================================
FILE: src/Pages/Groups/components/mobile/GroupCards.tsx
============================================================
// File: src/pages/groups/components/mobile/GroupCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import {
  IconEdit,
  IconPlus
} from '@tabler/icons-react';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from '../StatusPill';

interface Props {
  groups: Group[];
  onEdit: (group: Group) => void;
  onAddChild: (parentGroup: Group) => void;
  loading: boolean;
}

const GroupCards: React.FC<Props> = ({ 
  groups, 
  onEdit, 
  onAddChild, 
  loading 
}) => {
  const { t } = useTranslation();

  // تحويل الشجرة إلى قائمة مسطحة للعرض في الكروت
  const flattenGroups = (groups: Group[], level = 0, parentName = ''): Array<{ group: Group; level: number; parentName: string }> => {
    const result: Array<{ group: Group; level: number; parentName: string }> = [];
    
    groups.forEach(group => {
      result.push({ group, level, parentName });
      if (group.children && group.children.length > 0) {
        result.push(...flattenGroups(group.children, level + 1, group.name));
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (flatGroups.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('groups.noGroups')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {flatGroups.map(({ group, level, parentName }) => (
        <Grid item xs={12} sm={6} md={4} key={group.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            backgroundColor: group.backgroundColor !== '123' ? `#${group.backgroundColor}` : undefined,
            color: group.fontColor !== '123' ? `#${group.fontColor}` : undefined,
            opacity: group.isActive ? 1 : 0.7,
            border: level > 0 ? '2px solid' : 'none',
            borderColor: level > 0 ? 'primary.light' : 'transparent',
            ml: level * 1 // إزاحة بسيطة للمستويات
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack spacing={2}>
                {/* مستوى المجموعة */}
                {level > 0 && (
                  <Box>
                    <Chip
                      label={`${t('groups.level')} ${level}`}
                      size="small"
                      variant="outlined"
                      sx={{ fontSize: '0.75rem' }}
                    />
                  </Box>
                )}

                {/* اسم المجموعة */}
                <Typography 
                  variant="h6" 
                  component="div"
                  sx={{ 
                    fontSize: { xs: '1rem', sm: '1.25rem' },
                    fontWeight: 'bold',
                    lineHeight: 1.2
                  }}
                >
                  {'─'.repeat(level)} {group.name}
                </Typography>

                {/* المجموعة الأب */}
                {parentName && (
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ 
                      fontSize: { xs: '0.75rem', sm: '0.875rem' },
                      fontStyle: 'italic'
                    }}
                  >
                    {t('groups.parentGroup')}: {parentName}
                  </Typography>
                )}

                {/* عدد المجموعات الفرعية */}
                {group.children && group.children.length > 0 && (
                  <Typography 
                    variant="body2" 
                    color="primary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('groups.childrenCount')}: {group.children.length}
                  </Typography>
                )}

                {/* حالة المجموعة */}
                <Box>
                  <StatusPill isActive={group.isActive} />
                </Box>

                {/* الأزرار */}
                <Stack direction="row" spacing={1} justifyContent="center">
                  <IconButton
                    onClick={() => onAddChild(group)}
                    size="small"
                    sx={{
                      backgroundColor: 'action.hover',
                      '&:hover': {
                        backgroundColor: 'success.light',
                        color: 'success.contrastText'
                      }
                    }}
                  >
                    <IconPlus size={18} />
                  </IconButton>
                  
                  <IconButton
                    onClick={() => onEdit(group)}
                    size="small"
                    sx={{
                      backgroundColor: 'action.hover',
                      '&:hover': {
                        backgroundColor: 'primary.light',
                        color: 'primary.contrastText'
                      }
                    }}
                  >
                    <IconEdit size={18} />
                  </IconButton>
                </Stack>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default GroupCards;


============================================================
FILE: src/Pages/Groups/components/mobile/MobileGroupsFilter.tsx
============================================================
// File: src/pages/groups/components/mobile/MobileGroupsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface GroupsFilterState {
  searchQuery: string;
  status: string;
  parentFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: GroupsFilterState;
  onFiltersChange: (filters: GroupsFilterState) => void;
  parentGroups: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileGroupsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  parentGroups,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<GroupsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('groups.active') },
    { value: 'false', label: t('groups.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('groups.name') },
    { value: 'isActive', label: t('groups.status') }
  ];

  const handleLocalChange = (field: keyof GroupsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: GroupsFilterState = {
      searchQuery: '',
      status: '',
      parentFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.parentFilter) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('groups.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('groups.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('groups.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('groups.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('groups.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('groups.filter.filters')}</Typography>
            {(localFilters.status || localFilters.parentFilter) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.parentFilter].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('groups.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.parentGroup')}</InputLabel>
              <Select
                value={localFilters.parentFilter}
                label={t('groups.parentGroup')}
                onChange={(e) => handleLocalChange('parentFilter', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                <MenuItem value="root">
                  {t('groups.rootGroups')}
                </MenuItem>
                {parentGroups.map(group => (
                  <MenuItem key={group.id} value={group.id}>
                    {group.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('groups.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('groups.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('groups.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('groups.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('groups.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('groups.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('groups.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('groups.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileGroupsFilter;


============================================================
FILE: src/Pages/Groups/components/ActionsBar.tsx
============================================================
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('groups.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('groups.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/Groups/components/GroupForm.tsx
============================================================
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Box,
  Typography
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import GroupTreeSelect from './GroupTreeSelect';
import { StatusPill } from './StatusPill';

/* ---------- types ---------- */
type FormValues = { 
  name: string; 
  parentId?: string;
  backgroundColor: string;
  fontColor: string;
  isActive: boolean; // تأكد من وجود هذا الحقل
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Group;
  parentGroup?: Group;
  allGroups: Group[];
  onClose: () => void;
  onSubmit: (data: FormValues | Group) => void;
}

const GroupForm: React.FC<Props> = ({
  open, mode, initialValues, parentGroup, allGroups, onClose, onSubmit
}) => {
  const { t } = useTranslation();
const defaults: FormValues = { 
  name: '', 
  parentId: parentGroup?.id || '',
  backgroundColor: 'ffffff', // أبيض
  fontColor: '000000',       // أسود
  isActive: true
};

const { control, handleSubmit, reset, watch } = useForm<FormValues>({
  defaultValues: mode === 'add' ? defaults : {
    name: initialValues?.name ?? '',
    parentId: initialValues?.parentId ?? '',
    backgroundColor: initialValues?.backgroundColor ?? 'ffffff',
    fontColor: initialValues?.fontColor ?? '000000',
    isActive: initialValues?.isActive ?? true,
  },
});

  const backgroundColor = watch('backgroundColor');
  const fontColor = watch('fontColor');
  const isActive = watch('isActive'); // مراقبة حالة النشاط

  React.useEffect(() => {
    if (mode === 'add') {
      reset({
        ...defaults,
        parentId: parentGroup?.id || ''
      });
    } else if (initialValues) {
      reset({
        name: initialValues.name,
        parentId: initialValues.parentId || '',
        backgroundColor: initialValues.backgroundColor,
        fontColor: initialValues.fontColor,
        isActive: initialValues.isActive, // تمرير الحالة الصحيحة
      });
    }
  }, [mode, initialValues, parentGroup, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' 
          ? (parentGroup ? t('groups.addChild') : t('groups.add'))
          : t('groups.edit')
        }
        {parentGroup && (
          <Box component="span" sx={{ fontSize: '0.8em', color: 'text.secondary', ml: 1 }}>
            ({t('groups.parentGroup')}: {parentGroup.name})
          </Box>
        )}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            {/* ---------- Name ---------- */}
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('groups.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('groups.name')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                  />
                )}
              />
            </Grid>

            {/* ---------- Parent Group ---------- */}
            {!parentGroup && (
              <Grid item xs={12}>
                <Controller
                  name="parentId"
                  control={control}
                  render={({ field }) => (
                    <GroupTreeSelect
                      groups={allGroups}
                      value={field.value}
                      onChange={field.onChange}
                      label={t('groups.parentGroup')}
                      excludeId={initialValues?.id}
                    />
                  )}
                />
              </Grid>
            )}

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <Box>
                    <FormControlLabel
                      control={
                        <Switch 
                          checked={field.value} 
                          onChange={(e) => field.onChange(e.target.checked)} 
                        />
                      }
                      label={t('groups.status')}
                    />
                    <Box sx={{ mt: 1 }}>
                      <StatusPill isActive={field.value} />
                    </Box>
                  </Box>
                )}
              />
            </Grid>

            {/* ---------- Colors ---------- */}
<Grid item xs={6}>
  <Controller
    name="backgroundColor"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('groups.backgroundColor')}
        type="color"
        fullWidth
        value={`#${field.value || 'ffffff'}`}
        onChange={(e) => field.onChange(e.target.value.replace('#', ''))}
      />
    )}
  />
</Grid>

<Grid item xs={6}>
  <Controller
    name="fontColor"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('groups.fontColor')}
        type="color"
        fullWidth
        value={`#${field.value || '000000'}`}
        onChange={(e) => field.onChange(e.target.value.replace('#', ''))}
      />
    )}
  />
</Grid>


            {/* ---------- Preview ---------- */}
            <Grid item xs={12}>
              <Box
                sx={{
                  p: 2,
                  border: 1,
                  borderColor: 'divider',
                  borderRadius: 1,
    backgroundColor: `#${backgroundColor || 'ffffff'}`,
    color: `#${fontColor || '000000'}`,
    opacity: isActive ? 1 : 0.5
                }}
              >
                <Typography variant="body2" gutterBottom>
                  {t('groups.preview')}:
                </Typography>
                <Typography variant="h6">
                  {watch('name') || t('groups.sampleText')}
                </Typography>
                <Box sx={{ mt: 1 }}>
                  <StatusPill isActive={isActive} />
                </Box>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('groups.add') : t('groups.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default GroupForm;


============================================================
FILE: src/Pages/Groups/components/GroupTree.tsx
============================================================
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Box} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus
} from '@tabler/icons-react';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';

interface Props {
  groups: Group[];
  onEdit: (group: Group) => void;
  onAddChild: (parentGroup: Group) => void;
  level?: number;
}

const GroupTree: React.FC<Props> = ({ 
  groups, 
  onEdit, 
  onAddChild, 
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (groupId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(groupId)) {
      newExpanded.delete(groupId);
    } else {
      newExpanded.add(groupId);
    }
    setExpanded(newExpanded);
  };

  const GroupItem: React.FC<{ group: Group }> = ({ group }) => {
    const hasChildren = group.children && group.children.length > 0;
    const isExpanded = expanded.has(group.id);

    return (
      <Box>
        <Card 
          sx={{ 
            mb: 1, 
            ml: level * 3,
            backgroundColor: group.backgroundColor !== '123' ? `#${group.backgroundColor}` : undefined,
            color: group.fontColor !== '123' ? `#${group.fontColor}` : undefined
          }}
        >
          <CardContent sx={{ py: 2, '&:last-child': { pb: 2 } }}>
            <Stack direction="row" alignItems="center" spacing={1}>
              {/* زر التوسيع/الطي */}
              {hasChildren && (
                <IconButton
                  size="small"
                  onClick={() => toggleExpanded(group.id)}
                >
                  {isExpanded ? (
                    <IconChevronDown size={16} />
                  ) : (
                    <IconChevronRight size={16} />
                  )}
                </IconButton>
              )}
              
              {/* اسم المجموعة */}
              <Typography variant="body1" sx={{ flex: 1 }}>
                {group.name}
              </Typography>

              {/* حالة المجموعة */}
              <StatusPill isActive={group.isActive} />

              {/* أزرار الإجراءات */}
              <Stack direction="row" spacing={1}>
                <IconButton
                  size="small"
                  onClick={() => onAddChild(group)}
                  title={t('groups.addChild')}
                >
                  <IconPlus size={16} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => onEdit(group)}
                  title={t('groups.edit')}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* المجموعات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <GroupTree
              groups={group.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  return (
    <Box>
      {groups.map((group) => (
        <GroupItem key={group.id} group={group} />
      ))}
    </Box>
  );
};

export default GroupTree;


============================================================
FILE: src/Pages/Groups/components/GroupTreeSelect.tsx
============================================================
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography
} from '@mui/material';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  groups: Group[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  disabled?: boolean;
  excludeId?: string; // لاستبعاد مجموعة معينة (مثل المجموعة الحالية عند التعديل)
}

const GroupTreeSelect: React.FC<Props> = ({
  groups,
  value,
  onChange,
  label,
  disabled,
  excludeId
}) => {
  // تحويل الشجرة إلى قائمة مسطحة مع مستويات
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      if (group.id !== excludeId) {
        result.push({ group, level });
        if (group.children && group.children.length > 0) {
          result.push(...flattenGroups(group.children, level + 1));
        }
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  return (
    <FormControl fullWidth disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
      >
        <MenuItem value="">
          <em>لا يوجد (مجموعة رئيسية)</em>
        </MenuItem>
        {flatGroups.map(({ group, level }) => (
          <MenuItem key={group.id} value={group.id}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ width: level * 20 }} />
              <Typography>
                {'─'.repeat(level)} {group.name}
              </Typography>
            </Box>
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

export default GroupTreeSelect;


============================================================
FILE: src/Pages/Groups/components/PageHeader.tsx
============================================================
// File: src/pages/groups/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { groupsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  exportData: Group[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // تحويل البيانات الهرمية إلى مسطحة للتصدير
  const flattenGroups = (groups: Group[]): any[] => {
    const result: any[] = [];
    
    const flatten = (groups: Group[], level = 0) => {
      groups.forEach(group => {
        result.push({
          name: group.name,
          level: level,
          parentName: group.parentGroup || '-',
          backgroundColor: group.backgroundColor,
          fontColor: group.fontColor,
          isActive: group.isActive
        });
        
        if (group.children && group.children.length > 0) {
          flatten(group.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  const config = {
    ...groupsImportExportConfig,
    onExport: () => flattenGroups(exportData)
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('groups.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/Groups/components/StatusPill.tsx
============================================================
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ isActive: boolean }> = ({ isActive }) => {
  const { t } = useTranslation();

  return (
    <Chip
      label={isActive ? t('groups.active') : t('groups.inactive')}
      color={isActive ? 'success' : 'default'}
      size="small"
    />
  );
};


============================================================
FILE: src/Pages/Groups/GroupsPage.tsx
============================================================
// File: src/pages/groups/GroupsPage.tsx
import React from 'react';
import {
  Container, 
  Snackbar, Alert, useMediaQuery, useTheme, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import GroupTree from './components/GroupTree';
import GroupCards from './components/mobile/GroupCards';
import GroupForm from './components/GroupForm';
import MobileGroupsFilter, { GroupsFilterState } from './components/mobile/MobileGroupsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/groupsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}


const GroupsPage: React.FC<Props> = ({ canAdd = true }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [items, setItems] = React.useState<Group[]>([]);
  const [query, setQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Group;
    parentGroup?: Group;
  }>({ open: false, mode: 'add' });

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<GroupsFilterState>({
    searchQuery: '',
    status: '',
    parentFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { 
        setItems(await apiSrv.getAll()); 
      }
      catch (e: any) { 
        setErr(e?.message || 'Load failed'); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const filterTree = (groups: Group[], searchQuery: string): Group[] => {
    if (!searchQuery) return groups;
    
    return groups.reduce((acc: Group[], group) => {
      const matchesQuery = group.name.toLowerCase().includes(searchQuery.toLowerCase());
      const filteredChildren = group.children ? filterTree(group.children, searchQuery) : [];
      
      if (matchesQuery || filteredChildren.length > 0) {
        acc.push({
          ...group,
          children: filteredChildren
        });
      }
      
      return acc;
    }, []);
  };

  const desktopFiltered = React.useMemo(
    () => filterTree(items, query),
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // تطبيق الفلاتر على الشجرة المسطحة
    const applyFiltersToTree = (groups: Group[]): Group[] => {
      return groups.reduce((acc: Group[], group) => {
        let includeGroup = true;

        // فلتر البحث
        if (mobileFilters.searchQuery.trim()) {
          const searchLower = mobileFilters.searchQuery.toLowerCase();
          const matchesSearch = group.name.toLowerCase().includes(searchLower) ||
                               group.code.toString().includes(searchLower);
          
          // البحث في المجموعات الفرعية أيضاً
          const hasMatchingChildren = group.children ? 
            applyFiltersToTree(group.children).length > 0 : false;
          
          includeGroup = matchesSearch || hasMatchingChildren;
        }

        // فلتر الحالة
        if (mobileFilters.status && includeGroup) {
          const isActive = mobileFilters.status === 'true';
          includeGroup = group.isActive === isActive;
        }

        // فلتر المجموعة الأب
        if (mobileFilters.parentFilter && includeGroup) {
          if (mobileFilters.parentFilter === 'root') {
            includeGroup = !group.parentId;
          } else {
            includeGroup = group.parentId === mobileFilters.parentFilter;
          }
        }

        if (includeGroup) {
          const filteredChildren = group.children ? 
            applyFiltersToTree(group.children) : [];
          
          acc.push({
            ...group,
            children: filteredChildren
          });
        }

        return acc;
      }, []);
    };

    result = applyFiltersToTree(result);

    // الترتيب
    const sortGroups = (groups: Group[]): Group[] => {
      const sorted = [...groups].sort((a, b) => {
        let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
        let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

        if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (mobileFilters.sortOrder === 'asc') {
          return aValue > bValue ? 1 : -1;
        } else {
          return aValue < bValue ? 1 : -1;
        }
      });

      return sorted.map(group => ({
        ...group,
        children: group.children ? sortGroups(group.children) : []
      }));
    };

    return sortGroups(result);
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // الحصول على المجموعات الأب للفلتر
  const getParentGroups = (groups: Group[]): Array<{ id: string; name: string }> => {
    const parents: Array<{ id: string; name: string }> = [];
    
    const extractParents = (groups: Group[]) => {
      groups.forEach(group => {
        if (group.children && group.children.length > 0) {
          parents.push({ id: group.id, name: group.name });
          extractParents(group.children);
        }
      });
    };
    
    extractParents(groups);
    return parents;
  };

  const parentGroups = getParentGroups(items);

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.parentFilter) count++;
    return count;
  };

  // حساب العدد الإجمالي للمجموعات
  const getTotalCount = (groups: Group[]): number => {
    return groups.reduce((count, group) => {
      return count + 1 + (group.children ? getTotalCount(group.children) : 0);
    }, 0);
  };

  const totalCount = getTotalCount(items);
  const filteredCount = getTotalCount(filtered);

  /* ───── CRUD ───── */
  const handleAdd = async (body: { 
    name: string; 
    parentId?: string; 
    backgroundColor?: string; 
    fontColor?: string; 
  }) => {
    try {
      await apiSrv.add(body);
      setItems(await apiSrv.getAll());
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.GroupName?.[0] || e?.message || 'Add failed';
      setErr(msg);
    }
  };

  const handleUpdate = async (group: Group) => {
    try {
      await apiSrv.update(group);
      setItems(await apiSrv.getAll());
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.GroupName?.[0] || e?.message || 'Update failed';
      setErr(msg);
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('groups.add')}
          </Button>
        )}
        </Box>
      )}

      {/* عرض البيانات */}
      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <GroupCards
            groups={filtered}
            onEdit={(group) => setDialog({ open: true, mode: 'edit', current: group })}
            onAddChild={(parentGroup) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentGroup 
            })}
            loading={loading}
          />
        ) : (
          <GroupTree
            groups={filtered}
            onEdit={(group) => setDialog({ open: true, mode: 'edit', current: group })}
            onAddChild={(parentGroup) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentGroup 
            })}
          />
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileGroupsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          parentGroups={parentGroups}
          totalResults={totalCount}
          filteredResults={filteredCount}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <GroupForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        parentGroup={dialog.parentGroup}
        allGroups={items}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd({ ...data, parentId: data.parentId ?? undefined }))
          : ((data) => handleUpdate(data as Group))
        }
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>

      {loading && <div>Loading…</div>}
    </Container>
  );
};

export default GroupsPage;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/mobile/MobileAdjustmentsFilter.tsx
============================================================
// File: src/pages/inventory/adjustments-list/components/mobile/MobileAdjustmentsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface FilterState {
  searchQuery: string;
  adjustmentType: string;
  status: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileAdjustmentsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<FilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const adjustmentTypeOptions = [
    { value: '', label: t('common.all') },
    { value: '0', label: t('adjustments.types.new') },
    { value: '1', label: t('adjustments.types.openingBalance') },
    { value: '2', label: t('adjustments.types.manualAdjustment') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('adjustments.status.saved') },
    { value: '3', label: t('adjustments.status.submitted') }
  ];

  const sortOptions = [
    { value: 'adjustmentDate', label: t('adjustments.table.date') },
    { value: 'adjustmentType', label: t('adjustments.table.type') },
    { value: 'status', label: t('adjustments.table.status') },
    { value: 'warehouseName', label: t('adjustments.table.warehouse') }
  ];

  const handleLocalChange = (field: keyof FilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: FilterState = {
      searchQuery: '',
      adjustmentType: '',
      status: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'adjustmentDate',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.adjustmentType) count++;
    if (localFilters.status) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('adjustments.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('adjustments.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('adjustments.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('adjustments.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('adjustments.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('adjustments.filter.filters')}</Typography>
            {(localFilters.adjustmentType || localFilters.status || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.adjustmentType, localFilters.status, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.type')}</InputLabel>
              <Select
                value={localFilters.adjustmentType}
                label={t('adjustments.table.type')}
                onChange={(e) => handleLocalChange('adjustmentType', e.target.value)}
              >
                {adjustmentTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('adjustments.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('adjustments.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('adjustments.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('adjustments.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('adjustments.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('adjustments.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('adjustments.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('adjustments.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('adjustments.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('adjustments.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('adjustments.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('adjustments.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('adjustments.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileAdjustmentsFilter;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentForm.tsx
============================================================
// File: src/pages/inventory/adjustment/components/AdjustmentForm.tsx
import React from 'react';
import {
  Grid,
  TextField} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import SearchableSelect from '../../../components/SearchableSelect';

interface Props {
  control: Control<any>;
  warehouses: Warehouse[];
  hasAdjustment: boolean;
  adjustmentType: number;
  isReadOnly?: boolean;
}

const AdjustmentForm: React.FC<Props> = ({
  control,
  warehouses,
  adjustmentType}) => {
  const { t } = useTranslation();

  const adjustmentTypeOptions = [
    { value: 1, label: t('adjustment.types.openingBalance') },
    { value: 2, label: t('adjustment.types.manualAdjustment') }
  ];

  const getAdjustmentTypeLabel = (type: number) => {
    const option = adjustmentTypeOptions.find(opt => opt.value === type);
    return option ? option.label : t('adjustment.types.notSelected');
  };

  return (
    <Grid container spacing={2} sx={{ mb: 2 }}>
      <Grid item xs={12} md={3}>
        <Controller
          name="warehouseId"
          control={control}
          rules={{ required: t('adjustment.form.validation.warehouseRequired') }}
          render={({ field, fieldState }) => (
            <SearchableSelect
              label={t('adjustment.form.warehouse')}
              value={field.value}
              onChange={field.onChange}
              options={warehouses.map(w => ({ id: w.id, name: w.name }))}
              placeholder={t('adjustment.form.selectWarehouse')}
              error={!!fieldState.error}
              size="small"
            />
          )}
        />
      </Grid>

      <Grid item xs={12} md={3}>
        {adjustmentType === 0 ? (
          <TextField
            label={t('adjustment.form.adjustmentType')}
            value={t('adjustment.types.notSelected')}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
            variant="filled"
          />
        ) : (
          <TextField
            label={t('adjustment.form.adjustmentType')}
            value={getAdjustmentTypeLabel(adjustmentType)}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
            variant="filled"
          />
        )}
      </Grid>

      <Grid item xs={12} md={3}>
        <Controller
          name="referenceNumber"
          control={control}
          render={({ field }) => (
            <TextField
              {...field}
              label={t('adjustment.form.referenceNumber')}
              fullWidth
              size="small"
            />
          )}
        />
      </Grid>

      <Grid item xs={12} md={3}>
        <Controller
          name="reason"
          control={control}
          render={({ field }) => (
            <TextField
              {...field}
              label={t('adjustment.form.reason')}
              fullWidth
              size="small"
            />
          )}
        />
      </Grid>
    </Grid>
  );
};

export default AdjustmentForm;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentHeader.tsx
============================================================
// File: src/pages/inventory/adjustment/components/AdjustmentHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconArrowLeft,
  IconHome,
  IconSend,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';

interface Props {
  isSubmitting: boolean;
  hasAdjustment: boolean;
  warehouseId: string;
  onSave: () => void;
  onSubmit: () => void;
  onRefresh: () => void;
}

const AdjustmentHeader: React.FC<Props> = ({
  isSubmitting,
  hasAdjustment,
  warehouseId,
  onSave,
  onSubmit,
  onRefresh
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Box sx={{ mb: 3 }}>
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustment.title')}
        </Typography>
      </Breadcrumbs>

      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h4" component="h1">
          {t('adjustment.title')}
        </Typography>
      </Box>

      <Stack direction="row" spacing={2}>
        <Button
          variant="outlined"
          startIcon={<IconArrowLeft />}
          onClick={() => navigate('/inventory/inventory-adjustments')}
          disabled={isSubmitting}
        >
          {t('common.back')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={onRefresh}
          disabled={isSubmitting || !warehouseId}
        >
          {t('common.refresh')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconDeviceFloppy />}
          onClick={onSave}
          disabled={isSubmitting || !hasAdjustment}
          color="warning"
        >
          {t('adjustment.form.save')}
        </Button>

        <Button
          variant="contained"
          startIcon={<IconSend />}
          onClick={onSubmit}
          disabled={isSubmitting || !hasAdjustment}
        >
          {t('adjustment.form.submit')}
        </Button>
      </Stack>
    </Box>
  );
};

export default AdjustmentHeader;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentItemsCards.tsx
============================================================
// File: src/pages/inventory/adjustment/components/AdjustmentItemsCards.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Box,
  Card,
  CardContent,
  Grid,
  TextField
} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';

interface Props {
  control: Control<any>;
  details: any[];
  itemsCount: number;
  onQuantityChange: (index: number, newQuantity: number) => void;
  watch: (path: string) => any;
}

const AdjustmentItemsCards: React.FC<Props> = ({
  control,
  details,
  itemsCount,
  onQuantityChange,
  watch
}) => {
  const { t } = useTranslation();

  const MobileDetailCard: React.FC<{ index: number }> = ({ index }) => (
    <Card sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={2}>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.oldQuantity')}
              value={watch(`details.${index}.oldQuantity`)}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
            />
          </Grid>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.newQuantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('adjustment.form.newQuantity')}
                  type="number"
                  size="small"
                  fullWidth
                  onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                />
              )}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.difference')}
              value={watch(`details.${index}.diffQty`)?.toFixed(2) || '0.00'}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
              sx={{
                '& .MuiInputBase-input': {
                  color: watch(`details.${index}.diffQty`) > 0 ? 'success.main' : 
                         watch(`details.${index}.diffQty`) < 0 ? 'error.main' : 'text.primary'
                }
              }}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label={t('adjustment.form.unitFactor')}
              value={watch(`details.${index}.unitFactor`)}
              size="small"
              fullWidth
              InputProps={{ readOnly: true }}
              variant="filled"
            />
          </Grid>
          <Grid item xs={12}>
            <Controller
              name={`details.${index}.notes`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('adjustment.form.notes')}
                  multiline
                  rows={2}
                  size="small"
                  fullWidth
                />
              )}
            />
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" sx={{ mb: 2 }}>
        {t('adjustment.form.items')} ({itemsCount})
      </Typography>

      <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
        {details.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
            {t('adjustment.form.noItems')}
          </Typography>
        ) : (
          details.map((_, index) => (
            <MobileDetailCard key={index} index={index} />
          ))
        )}
      </Box>
    </Paper>
  );
};

export default AdjustmentItemsCards;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentItemsTable.tsx
============================================================
// File: src/pages/inventory/adjustment/components/AdjustmentItemsTable.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField
} from '@mui/material';
import { Controller, Control } from 'react-hook-form';
import { useTranslation } from 'react-i18next';

interface Props {
  control: Control<any>;
  details: any[];
  itemsCount: number;
  onQuantityChange: (index: number, newQuantity: number) => void;
  watch: (path: string) => any;
  rawDetails?: any[];
  searchQuery?: string;
}

const AdjustmentItemsTable: React.FC<Props> = ({
  control,
  details,
  itemsCount,
  onQuantityChange,
  watch,
  rawDetails = [],
  searchQuery = ''
}) => {
  const { t } = useTranslation();

  const displayDetails = details.length > 0 ? details : rawDetails;
  const useFormData = details.length > 0;

  const filteredDisplayDetails = searchQuery.trim() 
    ? displayDetails.filter(detail => {
        const searchLower = searchQuery.toLowerCase();
        return (
          detail.productName.toLowerCase().includes(searchLower) ||
          detail.unitName.toLowerCase().includes(searchLower) ||
          (detail.barcode && detail.barcode.toLowerCase().includes(searchLower))
        );
      })
    : displayDetails;

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" sx={{ mb: 2 }}>
        {t('adjustment.form.items')} ({searchQuery ? filteredDisplayDetails.length : itemsCount})
        {searchQuery && (
          <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
            ({t('adjustment.search.filteredFrom', { total: itemsCount })})
          </Typography>
        )}
      </Typography>

      <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
        <TableContainer>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell align="center">{t('adjustment.form.product')}</TableCell>
                <TableCell align="center">{t('adjustment.form.unit')}</TableCell>
                <TableCell align="center">{t('adjustment.form.barcode')}</TableCell>
                <TableCell align="center">{t('adjustment.form.unitFactor')}</TableCell>
                <TableCell align="center">{t('adjustment.form.oldQuantity')}</TableCell>
                <TableCell align="center">{t('adjustment.form.newQuantity')}</TableCell>
                <TableCell align="center">{t('adjustment.form.difference')}</TableCell>
                <TableCell align="center">{t('adjustment.form.notes')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredDisplayDetails.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} align="center">
                    <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                      {searchQuery ? t('adjustment.search.noResults') : t('adjustment.form.noItems')}
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                filteredDisplayDetails.map((detail, index) => (
                  <TableRow 
                    key={detail.detailsAdjustmentId || index}
                    id={`product-row-${detail.productId}`}
                  >
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.productName`) : detail.productName}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.unitName`) : detail.unitName}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2" color="text.secondary">
                        {detail.barcode || '-'}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData ? watch(`details.${index}.unitFactor`) : detail.unitFactor}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2">
                        {useFormData 
                          ? (watch(`details.${index}.oldQuantity`)?.toFixed(2) || '0.00')
                          : (detail.oldQuantity?.toFixed(2) || '0.00')
                        }
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      {useFormData ? (
                        <Controller
                          name={`details.${index}.newQuantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              type="number"
                              size="small"
                              id={`quantity-${detail.productId}`}
                              onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                              sx={{
                                width: 120,
                                '& input[type=number]': {
                                  '-moz-appearance': 'textfield',
                                  textAlign: 'center',
                                },
                                '& input[type=number]::-webkit-outer-spin-button': {
                                  '-webkit-appearance': 'none',
                                  margin: 0,
                                },
                                '& input[type=number]::-webkit-inner-spin-button': {
                                  '-webkit-appearance': 'none',
                                  margin: 0,
                                },
                              }}
                              inputProps={{
                                step: "0.01",
                                inputMode: 'decimal'
                              }}
                            />
                          )}
                        />
                      ) : (
                        <TextField
                          type="number"
                          size="small"
                          id={`quantity-${detail.productId}`}
                          value={detail.newQuantity || 0}
                          onChange={(e) => onQuantityChange(index, parseFloat(e.target.value) || 0)}
                          sx={{
                            width: 120,
                            '& input[type=number]': {
                              '-moz-appearance': 'textfield',
                              textAlign: 'center',
                            },
                            '& input[type=number]::-webkit-outer-spin-button': {
                              '-webkit-appearance': 'none',
                              margin: 0,
                            },
                            '& input[type=number]::-webkit-inner-spin-button': {
                              '-webkit-appearance': 'none',
                              margin: 0,
                            },
                          }}
                          inputProps={{
                            step: "0.01",
                            inputMode: 'decimal'
                          }}
                        />
                      )}
                    </TableCell>
                    <TableCell align="center">
                      <Typography 
                        variant="body2" 
                        sx={{ 
                          fontWeight: 'bold',
                          color: (useFormData 
                            ? watch(`details.${index}.diffQty`) 
                            : detail.diffQty) > 0 ? 'success.main' : 
                                 (useFormData 
                                   ? watch(`details.${index}.diffQty`) 
                                   : detail.diffQty) < 0 ? 'error.main' : 'text.primary'
                        }}
                      >
                        {useFormData 
                          ? (watch(`details.${index}.diffQty`)?.toFixed(2) || '0.00')
                          : (detail.diffQty?.toFixed(2) || '0.00')
                        }
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      {useFormData ? (
                        <Controller
                          name={`details.${index}.notes`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              size="small"
                              multiline
                              rows={1}
                              sx={{ width: 150 }}
                            />
                          )}
                        />
                      ) : (
                        <TextField
                          size="small"
                          multiline
                          rows={1}
                          value={detail.notes || ''}
                          sx={{ width: 150 }}
                        />
                      )}
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </Box>
    </Paper>
  );
};

export default AdjustmentItemsTable;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentsCards.tsx
============================================================
// File: src/pages/inventory/adjustments-list/components/AdjustmentsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  IconButton,
  Grid,
  Stack,
  Divider
} from '@mui/material';
import { IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  adjustments: AdjustmentListItem[];
  loading: boolean;
}

const AdjustmentsCards: React.FC<Props> = ({ adjustments, loading }) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustments.types.openingBalance');
      case 2:
        return t('adjustments.types.manualAdjustment');
      default:
        return t('adjustments.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const handleViewAdjustment = (adjustmentId: string) => {
    navigate(`/inventory/inventory-adjustments/${adjustmentId}`);
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString();
  };

  const getTotalItems = (details: any[]) => {
    return details.length;
  };

  const getTotalDifference = (details: any[]) => {
    return details.reduce((sum, detail) => sum + Math.abs(detail.diffQty), 0);
  };

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (adjustments.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('adjustments.list.noAdjustments')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {adjustments.map((adjustment) => {
        const statusInfo = getStatusLabel(adjustment.status);
        return (
          <Grid item xs={12} sm={6} md={4} key={adjustment.adjustmentId}>
            <Card sx={{ height: '100%', position: 'relative' }}>
              <CardContent>
                <Stack spacing={2}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Typography variant="h6" sx={{ fontSize: '1rem' }}>
                      {getAdjustmentTypeLabel(adjustment.adjustmentType)}
                    </Typography>
                    <Chip
                      label={statusInfo.label}
                      color={statusInfo.color}
                      size="small"
                    />
                  </Box>

                  <Divider />

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.warehouse')}
                    </Typography>
                    <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                      {adjustment.warehouseName}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      ID: {adjustment.warehouseId.substring(0, 8)}...
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.adjustmentId')}
                    </Typography>
                    <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                      {adjustment.adjustmentId.substring(0, 8)}...
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {t('adjustments.table.date')}
                    </Typography>
                    <Typography variant="body2">
                      {formatDate(adjustment.adjustmentDate)}
                    </Typography>
                  </Box>

                  {adjustment.referenceNumber && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.referenceNumber')}
                      </Typography>
                      <Typography variant="body2">
                        {adjustment.referenceNumber}
                      </Typography>
                    </Box>
                  )}

                  {adjustment.reason && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.reason')}
                      </Typography>
                      <Typography variant="body2">
                        {adjustment.reason}
                      </Typography>
                    </Box>
                  )}

                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.totalItems')}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        {getTotalItems(adjustment.details)}
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        {t('adjustments.table.totalDifference')}
                      </Typography>
                      <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                        {getTotalDifference(adjustment.details).toFixed(2)}
                      </Typography>
                    </Box>
                  </Box>

                  <Box sx={{ display: 'flex', justifyContent: 'center', pt: 1 }}>
                    <IconButton
                      onClick={() => handleViewAdjustment(adjustment.adjustmentId)}
                      color="primary"
                      sx={{
                        border: '1px solid',
                        borderColor: 'primary.main',
                        borderRadius: 1
                      }}
                    >
                      <IconEye size={18} />
                    </IconButton>
                  </Box>
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        );
      })}
    </Grid>
  );
};

export default AdjustmentsCards;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentsListHeader.tsx
============================================================
// File: src/pages/inventory/adjustments-list/components/AdjustmentsListHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link
} from '@mui/material';
import {
  IconPlus,
  IconRefresh,
  IconHome
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';

interface Props {
  onRefresh: () => void;
  isLoading: boolean;
}

const AdjustmentsListHeader: React.FC<Props> = ({
  onRefresh,
  isLoading
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  return (
    <Box sx={{ mb: 3 }}>
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustments.list.title')}
        </Typography>
      </Breadcrumbs>

      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h4" component="h1">
          {t('adjustments.list.title')}
        </Typography>
      </Box>

      <Stack direction="row" spacing={2}>
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={() => navigate('/inventory/inventory-adjustments/new')}
        >
          {t('adjustments.list.newAdjustment')}
        </Button>

        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={onRefresh}
          disabled={isLoading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>
    </Box>
  );
};

export default AdjustmentsListHeader;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentsTable.tsx
============================================================
// File: src/pages/inventory/adjustments-list/components/AdjustmentsTable.tsx
import React from 'react';
import {
  Paper,
  Typography,
  Chip,
  IconButton,
  Tooltip,
  Box,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import { IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  adjustments: AdjustmentListItem[];
  loading: boolean;
}

const AdjustmentsTable: React.FC<Props> = ({ adjustments, loading }) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustments.types.openingBalance');
      case 2:
        return t('adjustments.types.manualAdjustment');
      default:
        return t('adjustments.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const handleViewAdjustment = (adjustmentId: string) => {
    navigate(`/inventory/inventory-adjustments/${adjustmentId}`);
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString();
  };

  const getTotalItems = (details: any[]) => {
    return details.length;
  };

  const getTotalDifference = (details: any[]) => {
    return details.reduce((sum, detail) => sum + Math.abs(detail.diffQty), 0);
  };

  const columns: GridColDef[] = [
    {
      field: 'warehouseName',
      headerName: t('adjustments.table.warehouse'),
      width: isTablet ? 150 : 200,
      renderCell: (params: GridRenderCellParams) => (
        <Box>
          <Typography variant="body2" sx={{ 
            fontWeight: 'bold', 
            color: 'primary.main',
            fontSize: { xs: '0.75rem', sm: '0.875rem' },
            lineHeight: 1.2
          }}>
            {params.value}
          </Typography>

        </Box>
      ),
    },
    {
      field: 'adjustmentType',
      headerName: t('adjustments.table.type'),
      width: isTablet ? 120 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getAdjustmentTypeLabel(params.value)}
        </Typography>
      ),
    },
    {
      field: 'adjustmentDate',
      headerName: t('adjustments.table.date'),
      width: isTablet ? 100 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {formatDate(params.value)}
        </Typography>
      ),
    },
    ...(isTablet ? [] : [
      {
        field: 'referenceNumber',
        headerName: t('adjustments.table.referenceNumber'),
        width: 150,
        renderCell: (params: GridRenderCellParams) => (
          <Typography variant="body2">
            {params.value || '-'}
          </Typography>
        ),
      },
      {
        field: 'reason',
        headerName: t('adjustments.table.reason'),
        width: 200,
        renderCell: (params: GridRenderCellParams) => (
          <Typography variant="body2">
            {params.value || '-'}
          </Typography>
        ),
      }
    ]),
    {
      field: 'details',
      headerName: t('adjustments.table.totalItems'),
      width: isTablet ? 80 : 120,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{ 
          fontWeight: 'bold',
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getTotalItems(params.value)}
        </Typography>
      ),
    },
    {
      field: 'totalDifference',
      headerName: t('adjustments.table.totalDifference'),
      width: isTablet ? 100 : 150,
      renderCell: (params: GridRenderCellParams) => (
        <Typography variant="body2" sx={{ 
          fontWeight: 'bold', 
          color: 'primary.main',
          fontSize: { xs: '0.75rem', sm: '0.875rem' }
        }}>
          {getTotalDifference(params.row.details).toFixed(2)}
        </Typography>
      ),
    },
    {
      field: 'status',
      headerName: t('adjustments.table.status'),
      width: isTablet ? 100 : 120,
      renderCell: (params: GridRenderCellParams) => {
        const statusInfo = getStatusLabel(params.value);
        return (
          <Chip
            label={statusInfo.label}
            color={statusInfo.color}
            size="small"
            sx={{
              fontSize: { xs: '0.625rem', sm: '0.75rem' },
              height: { xs: 20, sm: 24 }
            }}
          />
        );
      },
    },
    {
      field: 'actions',
      headerName: t('common.actions'),
      width: isTablet ? 80 : 100,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => (
        <Tooltip title={t('adjustments.actions.view')}>
          <IconButton
            size="small"
            onClick={() => handleViewAdjustment(params.row.adjustmentId)}
            color="primary"
          >
            <IconEye size={isTablet ? 16 : 18} />
          </IconButton>
        </Tooltip>
      ),
    },
  ];

  return (
    <Paper sx={{ 
      height: { xs: 400, sm: 500, md: 600 }, 
      width: '100%',
      '& .MuiDataGrid-root': {
        border: 'none',
      },
      '& .MuiDataGrid-columnHeaders': {
        backgroundColor: 'grey.50',
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        minHeight: { xs: 40, sm: 48 }
      },
      '& .MuiDataGrid-cell': {
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        padding: { xs: '4px 8px', sm: '8px 16px' }
      },
      '& .MuiDataGrid-row': {
        minHeight: { xs: 40, sm: 52 }
      }
    }}>
      <DataGrid
        rows={adjustments}
        columns={columns}
        loading={loading}
        getRowId={(row) => row.adjustmentId}
        pageSizeOptions={isTablet ? [5, 10, 25] : [10, 25, 50]}
        initialState={{
          pagination: {
            paginationModel: { page: 0, pageSize: isTablet ? 5 : 10 },
          },
        }}
        disableRowSelectionOnClick
        density={isTablet ? 'compact' : 'standard'}
        sx={{
          '& .MuiDataGrid-cell': {
            display: 'flex',
            alignItems: 'center',
          },
          '& .MuiDataGrid-columnHeaders': {
            backgroundColor: 'grey.50',
            fontWeight: 'bold',
          },
        }}
        localeText={{
          noRowsLabel: t('adjustments.list.noAdjustments'),
          toolbarDensity: t('common.density'),
          toolbarDensityLabel: t('common.density'),
          toolbarDensityCompact: t('common.compact'),
          toolbarDensityStandard: t('common.standard'),
          toolbarDensityComfortable: t('common.comfortable'),
          toolbarExport: t('common.export'),
          toolbarExportLabel: t('common.export'),
          toolbarExportCSV: t('common.exportCSV'),
          toolbarExportPrint: t('common.print'),
          toolbarColumns: t('common.columns'),
          toolbarColumnsLabel: t('common.columns'),
          toolbarFilters: t('common.filters'),
          toolbarFiltersLabel: t('common.filters'),
          toolbarFiltersTooltipHide: t('common.hideFilters'),
          toolbarFiltersTooltipShow: t('common.showFilters'),
          filterPanelAddFilter: t('common.addFilter'),
          filterPanelDeleteIconLabel: t('common.delete'),
          filterPanelOperatorAnd: t('common.and'),
          filterPanelOperatorOr: t('common.or'),
          filterPanelColumns: t('common.columns'),
          filterPanelInputLabel: t('common.value'),
          filterPanelInputPlaceholder: t('common.filterValue'),
          filterOperatorContains: t('common.contains'),
          filterOperatorEquals: t('common.equals'),
          filterOperatorStartsWith: t('common.startsWith'),
          filterOperatorEndsWith: t('common.endsWith'),
          filterOperatorIs: t('common.is'),
          filterOperatorNot: t('common.isNot'),
          filterOperatorAfter: t('common.isAfter'),
          filterOperatorOnOrAfter: t('common.isOnOrAfter'),
          filterOperatorBefore: t('common.isBefore'),
          filterOperatorOnOrBefore: t('common.isOnOrBefore'),
          filterOperatorIsEmpty: t('common.isEmpty'),
          filterOperatorIsNotEmpty: t('common.isNotEmpty'),
          columnMenuLabel: t('common.menu'),
          columnMenuShowColumns: t('common.showColumns'),
          columnMenuFilter: t('common.filter'),
          columnMenuHideColumn: t('common.hide'),
          columnMenuUnsort: t('common.unsort'),
          columnMenuSortAsc: t('common.sortAsc'),
          columnMenuSortDesc: t('common.sortDesc'),
          columnHeaderFiltersTooltipActive: (count) =>
            count !== 1 ? `${count} ${t('common.activeFilters')}` : `${count} ${t('common.activeFilter')}`,
          columnHeaderFiltersLabel: t('common.showFilters'),
          columnHeaderSortIconLabel: t('common.sort'),
          footerRowSelected: (count) =>
            count !== 1
              ? `${count.toLocaleString()} ${t('common.rowsSelected')}`
              : `${count.toLocaleString()} ${t('common.rowSelected')}`,
          footerTotalRows: t('common.totalRows'),
          footerTotalVisibleRows: (visibleCount, totalCount) =>
            `${visibleCount.toLocaleString()} ${t('common.of')} ${totalCount.toLocaleString()}`,
          checkboxSelectionHeaderName: t('common.checkboxSelection'),
          booleanCellTrueLabel: t('common.yes'),
          booleanCellFalseLabel: t('common.no'),
        }}
      />
    </Paper>
  );
};

export default AdjustmentsTable;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentViewCards.tsx
============================================================
// File: src/pages/inventory/adjustment-view/components/AdjustmentViewCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Grid,
  Stack,
  Divider,
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  details: any[];
}

const AdjustmentViewCards: React.FC<Props> = ({ details }) => {
  const { t } = useTranslation();

  if (details.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
        <Typography 
          variant="body2" 
          color="text.secondary"
          sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
        >
          {t('adjustment.form.noItems')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={{ xs: 1, sm: 2 }}>
      {details.map((detail) => (
        <Grid item xs={12} sm={6} md={4} lg={3} key={detail.detailsAdjustmentId}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ 
              p: { xs: 1.5, sm: 2 },
              '&:last-child': { pb: { xs: 1.5, sm: 2 } }
            }}>
              <Stack spacing={{ xs: 1, sm: 1.5 }}>
                <Typography 
                  variant="h6" 
                  sx={{ 
                    fontSize: { xs: '0.875rem', sm: '1rem' }, 
                    fontWeight: 'bold',
                    lineHeight: 1.2
                  }}
                >
                  {detail.productName}
                </Typography>
                
                <Divider />
                
                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.unit')}
                  </Typography>
                  <Typography 
                    variant="body2"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {detail.unitName}
                  </Typography>
                </Box>

                {detail.barcode && (
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.barcode')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ 
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        fontFamily: 'monospace'
                      }}
                    >
                      {detail.barcode}
                    </Typography>
                  </Box>
                )}

                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.unitFactor')}
                  </Typography>
                  <Typography 
                    variant="body2"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {detail.unitFactor}
                  </Typography>
                </Box>

                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between',
                  flexDirection: { xs: 'column', sm: 'row' },
                  gap: { xs: 1, sm: 0 }
                }}>
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.oldQuantity')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                    >
                      {detail.oldQuantity?.toFixed(2) || '0.00'}
                    </Typography>
                  </Box>
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.newQuantity')}
                    </Typography>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontWeight: 'bold',
                        fontSize: { xs: '0.75rem', sm: '0.875rem' }
                      }}
                    >
                      {detail.newQuantity?.toFixed(2) || '0.00'}
                    </Typography>
                  </Box>
                </Box>

                <Box>
                  <Typography 
                    variant="caption" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                  >
                    {t('adjustment.form.difference')}
                  </Typography>
                  <Typography 
                    variant="body1" 
                    sx={{ 
                      fontWeight: 'bold',
                      fontSize: { xs: '0.875rem', sm: '1rem' },
                      color: detail.diffQty > 0 ? 'success.main' : 
                             detail.diffQty < 0 ? 'error.main' : 'text.primary'
                    }}
                  >
                    {detail.diffQty > 0 ? '+' : ''}{detail.diffQty?.toFixed(2) || '0.00'}
                  </Typography>
                </Box>

                {detail.notes && (
                  <Box>
                    <Typography 
                      variant="caption" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.625rem', sm: '0.75rem' } }}
                    >
                      {t('adjustment.form.notes')}
                    </Typography>
                    <Typography 
                      variant="body2"
                      sx={{ 
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        lineHeight: 1.3
                      }}
                    >
                      {detail.notes}
                    </Typography>
                  </Box>
                )}
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default AdjustmentViewCards;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentViewPage.tsx
============================================================
// File: src/pages/inventory/adjustment-view/AdjustmentViewPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Grid,
  Chip,
  Button,
  Stack,
  Breadcrumbs,
  Link,
  Alert,
  Snackbar,
  CircularProgress,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconArrowLeft, IconHome } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate, useParams } from 'react-router-dom';
import * as adjustmentApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import AdjustmentViewTable from './AdjustmentViewTable';
import AdjustmentViewCards from './AdjustmentViewCards';

const AdjustmentViewPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [adjustment, setAdjustment] = useState<adjustmentApi.InventoryAdjustment | null>(null);
  const [warehouseName, setWarehouseName] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  useEffect(() => {
    if (id) {
      loadAdjustment(id);
    }
  }, [id]);

  const loadAdjustment = async (adjustmentId: string) => {
    try {
      setLoading(true);
      
      const adjustmentData = await adjustmentApi.getAdjustmentById(adjustmentId);
      setAdjustment(adjustmentData);
      
      if (adjustmentData.warehouseId) {
        try {
          const warehouses = await warehousesApi.getAll();
          const warehouse = warehouses.find((w: { id: string; }) => w.id === adjustmentData.warehouseId);
          setWarehouseName(warehouse?.name || 'مخزن غير معروف');
        } catch (warehouseError) {
          console.error('Error loading warehouse:', warehouseError);
          setWarehouseName('مخزن غير معروف');
        }
      }
      
    } catch (error) {
      console.error('Error loading adjustment:', error);
      setAlertMessage(t('adjustment.errors.loadAdjustmentFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  const getAdjustmentTypeLabel = (type: number) => {
    switch (type) {
      case 0:
        return t('adjustments.types.new');
      case 1:
        return t('adjustment.types.openingBalance');
      case 2:
        return t('adjustment.types.manualAdjustment');
      default:
        return t('adjustment.types.unknown');
    }
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 1:
        return { label: t('adjustments.status.saved'), color: 'warning' as const };
      case 3:
        return { label: t('adjustments.status.submitted'), color: 'success' as const };
      default:
        return { label: t('adjustments.status.unknown'), color: 'default' as const };
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '0001-01-01T00:00:00') {
      return '-';
    }
    return new Date(dateString).toLocaleDateString('ar-EG', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <Container 
        maxWidth={false} 
        sx={{ 
          px: { xs: 1, sm: 2, md: 3 },
          py: { xs: 1, sm: 2 }
        }}
      >
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          minHeight: { xs: '40vh', sm: '50vh' }
        }}>
          <CircularProgress />
          <Typography sx={{ ml: 2, fontSize: { xs: '0.875rem', sm: '1rem' } }}>
            {t('common.loading')}
          </Typography>
        </Box>
      </Container>
    );
  }

  if (!adjustment) {
    return (
      <Container 
        maxWidth={false} 
        sx={{ 
          px: { xs: 1, sm: 2, md: 3 },
          py: { xs: 1, sm: 2 }
        }}
      >
        <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
          <Typography 
            variant={isMobile ? "h6" : "h5"} 
            color="error"
            sx={{ mb: { xs: 1, sm: 2 } }}
          >
            {t('adjustment.errors.notFound')}
          </Typography>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft size={isMobile ? 16 : 20} />}
            onClick={() => navigate('/inventory/inventory-adjustments')}
            size={isMobile ? 'medium' : 'large'}
          >
            {t('common.back')}
          </Button>
        </Box>
      </Container>
    );
  }

  const statusInfo = getStatusLabel(adjustment.status);

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      {/* Header */}
      <Box sx={{ mb: { xs: 2, sm: 3 } }}>
        <Breadcrumbs sx={{ 
          mb: { xs: 1, sm: 2 },
          '& .MuiBreadcrumbs-separator': {
            mx: { xs: 0.5, sm: 1 }
          }
        }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/inventory');
            }}
            sx={{ 
              display: 'flex', 
              alignItems: 'center',
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            <IconHome size={isMobile ? 14 : 16} style={{ marginRight: 4 }} />
            {t('inventory.title')}
          </Link>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/inventory/inventory-adjustments');
            }}
            sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
          >
            {t('adjustments.list.title')}
          </Link>
          <Typography 
            color="text.primary"
            sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
          >
            {t('adjustments.view.title')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ 
          display: 'flex', 
          flexDirection: { xs: 'column', sm: 'row' },
          justifyContent: 'space-between', 
          alignItems: { xs: 'flex-start', sm: 'center' }, 
          mb: { xs: 1, sm: 2 },
          gap: { xs: 1, sm: 0 }
        }}>
          <Typography 
            variant={isMobile ? "h5" : "h4"} 
            component="h1"
            sx={{
              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' }
            }}
          >
            {t('adjustments.view.title')}
          </Typography>
          <Chip
            label={statusInfo.label}
            color={statusInfo.color}
            size={isMobile ? "small" : "medium"}
            sx={{
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              height: { xs: 24, sm: 32 }
            }}
          />
        </Box>

        <Stack 
          direction={{ xs: 'column', sm: 'row' }} 
          spacing={{ xs: 1, sm: 2 }}
          sx={{ width: { xs: '100%', sm: 'auto' } }}
        >
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft size={isMobile ? 16 : 20} />}
            onClick={() => navigate('/inventory/inventory-adjustments')}
            fullWidth={isMobile}
            size={isMobile ? 'medium' : 'large'}
            sx={{
              minHeight: { xs: 44, sm: 48 },
              fontSize: { xs: '0.875rem', sm: '1rem' }
            }}
          >
            {t('common.back')}
          </Button>
        </Stack>
      </Box>

      {/* معلومات التسوية */}
      <Paper sx={{ 
        p: { xs: 2, sm: 3 }, 
        mb: { xs: 2, sm: 3 },
        borderRadius: { xs: 1, sm: 2 }
      }}>
        <Typography 
          variant={isMobile ? "h6" : "h5"} 
          sx={{ 
            mb: { xs: 1, sm: 2 },
            fontSize: { xs: '1.125rem', sm: '1.5rem' }
          }}
        >
          {t('adjustments.view.adjustmentInfo')}
        </Typography>
        
        <Grid container spacing={{ xs: 2, sm: 3 }}>
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.adjustmentId')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold', 
                fontFamily: 'monospace',
                fontSize: { xs: '0.875rem', sm: '1rem' },
                wordBreak: 'break-all'
              }}
            >
              {adjustment.adjustmentId}
            </Typography>
          </Grid>

          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.warehouse')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold', 
                color: 'primary.main',
                fontSize: { xs: '0.875rem', sm: '1rem' }
              }}
            >
              {warehouseName}
            </Typography>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ 
                fontSize: { xs: '0.625rem', sm: '0.75rem' },
                wordBreak: 'break-all'
              }}
            >
              ID: {adjustment.warehouseId}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.adjustmentType')}
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                fontWeight: 'bold',
                fontSize: { xs: '0.875rem', sm: '1rem' }
              }}
            >
              {getAdjustmentTypeLabel(adjustment.adjustmentType)}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustments.table.date')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {formatDate(adjustment.adjustmentDate)}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.referenceNumber')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {adjustment.referenceNumber || '-'}
            </Typography>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('adjustment.form.reason')}
            </Typography>
            <Typography 
              variant="body1"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {adjustment.reason || '-'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* جدول الأصناف */}
      <Paper sx={{ 
        p: { xs: 2, sm: 3 },
        borderRadius: { xs: 1, sm: 2 }
      }}>
        <Typography 
          variant={isMobile ? "h6" : "h5"} 
          sx={{ 
            mb: { xs: 1, sm: 2 },
            fontSize: { xs: '1.125rem', sm: '1.5rem' }
          }}
        >
          {t('adjustment.form.items')} ({adjustment.details.length})
        </Typography>
        
        {adjustment.details.length === 0 ? (
          <Box sx={{ textAlign: 'center', py: { xs: 2, sm: 4 } }}>
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}
            >
              {t('adjustment.form.noItems')}
            </Typography>
          </Box>
        ) : (
          <Box sx={{ 
            width: '100%',
            overflow: 'hidden'
          }}>
            {isMobile ? (
              <AdjustmentViewCards details={adjustment.details} />
            ) : (
              <AdjustmentViewTable details={adjustment.details} />
            )}
          </Box>
        )}

        {/* ملخص التسوية */}
        {adjustment.details.length > 0 && (
          <Box sx={{ 
            mt: { xs: 2, sm: 3 }, 
            p: { xs: 1.5, sm: 2 }, 
            backgroundColor: 'grey.50', 
            borderRadius: { xs: 1, sm: 2 }
          }}>
            <Grid container spacing={{ xs: 1, sm: 2 }}>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalItems')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  {adjustment.details.length}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalPositive')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold', 
                    color: 'success.main',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  +{adjustment.details.filter(d => d.diffQty > 0).reduce((sum, d) => sum + d.diffQty, 0).toFixed(2)}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={4}>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                >
                  {t('adjustments.summary.totalNegative')}
                </Typography>
                <Typography 
                  variant={isMobile ? "h6" : "h5"} 
                  sx={{ 
                    fontWeight: 'bold', 
                    color: 'error.main',
                    fontSize: { xs: '1.125rem', sm: '1.5rem' }
                  }}
                >
                  {adjustment.details.filter(d => d.diffQty < 0).reduce((sum, d) => sum + d.diffQty, 0).toFixed(2)}
                </Typography>
              </Grid>
            </Grid>
          </Box>
        )}
      </Paper>

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default AdjustmentViewPage;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/AdjustmentViewTable.tsx
============================================================
// File: src/pages/inventory/adjustment-view/components/AdjustmentViewTable.tsx
import React from 'react';
import { Paper, useMediaQuery, useTheme } from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import { useTranslation } from 'react-i18next';

interface Props {
  details: any[];
}

const AdjustmentViewTable: React.FC<Props> = ({ details }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));

  const columns: GridColDef[] = [
    {
      field: 'productName',
      headerName: t('adjustment.form.product'),
      width: isTablet ? 150 : 200,
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ 
          fontWeight: 'bold',
          fontSize: isTablet ? '0.75rem' : '0.875rem'
        }}>
          {params.value}
        </span>
      ),
    },
    {
      field: 'unitName',
      headerName: t('adjustment.form.unit'),
      width: isTablet ? 80 : 120,
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value}
        </span>
      ),
    },
    ...(isTablet ? [] : [
      {
        field: 'barcode',
        headerName: t('adjustment.form.barcode'),
        width: 150,
        renderCell: (params: GridRenderCellParams) => (
          <span style={{ color: '#666' }}>{params.value || '-'}</span>
        ),
      }
    ]),
    {
      field: 'unitFactor',
      headerName: t('adjustment.form.unitFactor'),
      width: isTablet ? 80 : 120,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value}
        </span>
      ),
    },
    {
      field: 'oldQuantity',
      headerName: t('adjustment.form.oldQuantity'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ fontSize: isTablet ? '0.75rem' : '0.875rem' }}>
          {params.value?.toFixed(2) || '0.00'}
        </span>
      ),
    },
    {
      field: 'newQuantity',
      headerName: t('adjustment.form.newQuantity'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => (
        <span style={{ 
          fontWeight: 'bold',
          fontSize: isTablet ? '0.75rem' : '0.875rem'
        }}>
          {params.value?.toFixed(2) || '0.00'}
        </span>
      ),
    },
    {
      field: 'diffQty',
      headerName: t('adjustment.form.difference'),
      width: isTablet ? 100 : 130,
      type: 'number',
      renderCell: (params: GridRenderCellParams) => {
        const value = params.value || 0;
        const color = value > 0 ? '#2e7d32' : value < 0 ? '#d32f2f' : '#666';
        return (
          <span style={{ 
            fontWeight: 'bold', 
            color,
            fontSize: isTablet ? '0.75rem' : '0.875rem'
          }}>
            {value > 0 ? '+' : ''}{value.toFixed(2)}
          </span>
        );
      },
    },
    ...(isTablet ? [] : [
      {
        field: 'notes',
        headerName: t('adjustment.form.notes'),
        width: 200,
        renderCell: (params: GridRenderCellParams) => (
          <span>{params.value || '-'}</span>
        ),
      }
    ]),
  ];

  return (
    <Paper sx={{ 
      height: { xs: 400, sm: 500 }, 
      width: '100%',
      '& .MuiDataGrid-root': {
        border: 'none',
      },
      '& .MuiDataGrid-columnHeaders': {
        backgroundColor: 'grey.50',
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        minHeight: { xs: 40, sm: 48 }
      },
      '& .MuiDataGrid-cell': {
        fontSize: { xs: '0.75rem', sm: '0.875rem' },
        padding: { xs: '4px 8px', sm: '8px 16px' }
      },
      '& .MuiDataGrid-row': {
        minHeight: { xs: 40, sm: 52 }
      }
    }}>
      <DataGrid
        rows={details}
        columns={columns}
        getRowId={(row) => row.detailsAdjustmentId}
        pageSizeOptions={isTablet ? [5, 10, 25] : [10, 25, 50]}
        initialState={{
          pagination: {
            paginationModel: { page: 0, pageSize: isTablet ? 5 : 10 },
          },
        }}
        disableRowSelectionOnClick
        density={isTablet ? 'compact' : 'standard'}
        sx={{
          '& .MuiDataGrid-cell': {
            display: 'flex',
            alignItems: 'center',
          },
          '& .MuiDataGrid-columnHeaders': {
            backgroundColor: 'grey.50',
            fontWeight: 'bold',
          },
        }}
        localeText={{
          noRowsLabel: t('adjustment.form.noItems'),
          toolbarDensity: t('common.density'),
          toolbarDensityLabel: t('common.density'),
          toolbarDensityCompact: t('common.compact'),
          toolbarDensityStandard: t('common.standard'),
          toolbarDensityComfortable: t('common.comfortable'),
          footerTotalRows: t('common.totalRows'),
          footerTotalVisibleRows: (visibleCount, totalCount) =>
            `${visibleCount.toLocaleString()} ${t('common.of')} ${totalCount.toLocaleString()}`,
        }}
      />
    </Paper>
  );
};

export default AdjustmentViewTable;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/BarcodeScanner.tsx
============================================================
// File: src/pages/inventory/adjustment/components/BarcodeScanner.tsx
import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box
} from '@mui/material';
import { IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onScan: (barcode: string) => void;
}

const BarcodeScanner: React.FC<Props> = ({ open, onClose, onScan }) => {
  const { t } = useTranslation();
  const [barcode, setBarcode] = useState('');

  const handleScan = () => {
    if (barcode.trim()) {
      onScan(barcode.trim());
      setBarcode('');
      onClose();
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleScan();
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <IconBarcode />
        {t('adjustment.barcode.title')}
      </DialogTitle>
      
      <DialogContent>
        <Box sx={{ textAlign: 'center', mb: 2 }}>
          <Typography variant="body2" color="text.secondary">
            {t('adjustment.barcode.instruction')}
          </Typography>
        </Box>
        
        <TextField
          autoFocus
          fullWidth
          label={t('adjustment.barcode.label')}
          value={barcode}
          onChange={(e) => setBarcode(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={t('adjustment.barcode.placeholder')}
        />
      </DialogContent>
      
      <DialogActions>
        <Button onClick={onClose}>
          {t('common.cancel')}
        </Button>
        <Button onClick={handleScan} variant="contained" disabled={!barcode.trim()}>
          {t('adjustment.barcode.scan')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BarcodeScanner;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/NewAdjustmentDialog.tsx
============================================================
// File: src/pages/inventory/adjustment/components/NewAdjustmentDialog.tsx
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  Button
} from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onConfirm: (adjustmentType: number) => void;
}

const NewAdjustmentDialog: React.FC<Props> = ({
  open,
  onClose,
  onConfirm
}) => {
  const { t } = useTranslation();

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>{t('adjustment.dialog.newAdjustmentTitle')}</DialogTitle>
      <DialogContent>
        <Typography sx={{ mb: 2 }}>
          {t('adjustment.dialog.newAdjustmentMessage')}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {t('adjustment.dialog.selectAdjustmentType')}
        </Typography>
      </DialogContent>
      <DialogActions>
        <Button onClick={() => onConfirm(1)} variant="outlined">
          {t('adjustment.types.openingBalance')}
        </Button>
        <Button onClick={() => onConfirm(2)} variant="contained">
          {t('adjustment.types.manualAdjustment')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default NewAdjustmentDialog;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/PageHeader.tsx
============================================================
// File: src/pages/inventory/adjustments-list/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  Button,
  Breadcrumbs,
  Link,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconPlus,
  IconRefresh,
  IconHome
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import ImportExportManager from '../../../components/ImportExportManager';
import { inventoryAdjustmentsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { AdjustmentListItem } from 'src/utils/api/pagesApi/inventoryAdjustmentApi';

interface Props {
  exportData: AdjustmentListItem[];
  loading: boolean;
  onRefresh: () => void;
}

const PageHeader: React.FC<Props> = ({ exportData, loading, onRefresh }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const navigate = useNavigate();

const config = {
  ...inventoryAdjustmentsImportExportConfig,
  onExport: () => exportData.map(adjustment => ({
    warehouseName: adjustment.warehouseName || '-',
    adjustmentType: (() => {
      switch (adjustment.adjustmentType) {
        case 0: return t('adjustments.types.new');
        case 1: return t('adjustments.types.openingBalance');
        case 2: return t('adjustments.types.manualAdjustment');
        default: return t('adjustments.types.unknown');
      }
    })(),
    adjustmentDate: adjustment.adjustmentDate && adjustment.adjustmentDate !== '0001-01-01T00:00:00' 
      ? new Date(adjustment.adjustmentDate).toLocaleDateString() 
      : '-',
    referenceNumber: adjustment.referenceNumber || '-',
    reason: adjustment.reason || '-',
    totalItems: adjustment.totalItems || 0,
    totalDifference: adjustment.totalDifference ? adjustment.totalDifference.toFixed(2) : '0.00',
    status: (() => {
      switch (adjustment.status) {
        case 1: return t('adjustments.status.saved');
        case 3: return t('adjustments.status.submitted');
        default: return t('adjustments.status.unknown');
      }
    })()
  }))
};

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      {/* Breadcrumbs */}
      <Breadcrumbs sx={{ mb: 2 }}>
        <Link
          color="inherit"
          href="#"
          onClick={(e) => {
            e.preventDefault();
            navigate('/inventory');
          }}
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <IconHome size={16} style={{ marginRight: 4 }} />
          {t('inventory.title')}
        </Link>
        <Typography color="text.primary">
          {t('adjustments.list.title')}
        </Typography>
      </Breadcrumbs>

      {/* Title and Actions */}
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 2, sm: 3 },
        gap: { xs: 2, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('adjustments.list.title')}
        </Typography>

        {/* Action Buttons */}
        <Stack 
          direction={{ xs: 'column', sm: 'row' }} 
          spacing={1}
          sx={{ width: { xs: '100%', sm: 'auto' } }}
        >
          <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => navigate('/inventory/inventory-adjustments/new')}
            fullWidth={isMobile}
            sx={{ minWidth: { sm: 180 } }}
          >
            {t('adjustments.list.newAdjustment')}
          </Button>

          <Button
            variant="outlined"
            startIcon={<IconRefresh />}
            onClick={onRefresh}
            disabled={loading}
            fullWidth={isMobile}
            sx={{ minWidth: { sm: 120 } }}
          >
            {t('common.refresh')}
          </Button>
        </Stack>
      </Box>

      {/* Import/Export Manager */}
      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/inventory/adjustments-list/components/ProductSearchBox.tsx
============================================================
// File: src/pages/inventory/adjustment/components/ProductSearchBox.tsx
import React, { useState, useRef } from 'react';
import {
  Paper,
  TextField,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Typography,
  Box,
  ClickAwayListener,
  IconButton
} from '@mui/material';
import { IconSearch, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import BarcodeScanner from './BarcodeScanner';

interface Props {
  searchQuery: string;
  onSearchChange: (query: string) => void;
  filteredDetails: any[];
  onProductSelect: (productId: string) => void;
  onProductFocus: (productId: string) => void; // إضافة جديدة
}

const ProductSearchBox: React.FC<Props> = ({
  searchQuery,
  onSearchChange,
  filteredDetails,
  onProductSelect,
  onProductFocus
}) => {
  const { t } = useTranslation();
  const [showResults, setShowResults] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  const handleSearchChange = (value: string) => {
    onSearchChange(value);
    setShowResults(value.trim().length > 0 && filteredDetails.length > 0);
    setSelectedIndex(0);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (!showResults || filteredDetails.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => Math.min(prev + 1, filteredDetails.length - 1));
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => Math.max(prev - 1, 0));
        break;
      case 'Enter':
        e.preventDefault();
        if (filteredDetails[selectedIndex]) {
          handleProductSelect(filteredDetails[selectedIndex]);
        }
        break;
      case 'Escape':
        setShowResults(false);
        break;
    }
  };

  const handleProductSelect = (product: any) => {
    onProductSelect(product.productId);
    // التركيز على حقل الكمية للمنتج المحدد
    onProductFocus(product.productId);
    setShowResults(false);
    onSearchChange('');
  };

  const handleBarcodeScanned = (barcode: string) => {
    onSearchChange(barcode);
    setScannerOpen(false);
    
    const foundProduct = filteredDetails.find(detail => 
      detail.barcode && detail.barcode.toLowerCase() === barcode.toLowerCase()
    );
    
    if (foundProduct) {
      setTimeout(() => {
        handleProductSelect(foundProduct);
      }, 100);
    }
  };

  return (
    <Box sx={{ mb: 2, position: 'relative' }}>
      <Paper sx={{ p: 2 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('adjustment.search.title')}
        </Typography>
        
        <ClickAwayListener onClickAway={() => setShowResults(false)}>
          <Box ref={searchRef}>
            <TextField
              fullWidth
              placeholder={t('adjustment.search.placeholder')}
              value={searchQuery}
              onChange={(e) => handleSearchChange(e.target.value)}
              onKeyDown={handleKeyDown}
              onFocus={() => setShowResults(searchQuery.trim().length > 0 && filteredDetails.length > 0)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setScannerOpen(true)}
                      size="small"
                      title={t('adjustment.search.scanBarcode')}
                    >
                      <IconBarcode size={20} />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />

            {showResults && filteredDetails.length > 0 && (
              <Paper
                sx={{
                  position: 'absolute',
                  top: '100%',
                  left: 0,
                  right: 0,
                  zIndex: 1000,
                  maxHeight: 300,
                  overflow: 'auto',
                  mt: 1
                }}
              >
                <List dense>
                  {filteredDetails.slice(0, 10).map((product, index) => (
                    <ListItem key={product.productId} disablePadding>
                      <ListItemButton
                        onClick={() => handleProductSelect(product)}
                        selected={index === selectedIndex}
                        sx={{
                          backgroundColor: index === selectedIndex ? 'action.selected' : 'transparent'
                        }}
                      >
                        <ListItemText
                          primary={`${product.productName} — ${product.unitName}`}
                          secondary={
                            <Box>
                              <Typography variant="caption" color="text.secondary">
                                {t('adjustment.search.currentQuantity')}: {product.oldQuantity?.toFixed(2) || '0.00'}
                              </Typography>
                              {product.barcode && (
                                <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
                                  {t('adjustment.search.barcode')}: {product.barcode}
                                </Typography>
                              )}
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>
              </Paper>
            )}
          </Box>
        </ClickAwayListener>
      </Paper>

      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />
    </Box>
  );
};

export default ProductSearchBox;


============================================================
FILE: src/Pages/inventory/adjustments-list/AdjustmentsListPage.tsx
============================================================
// File: src/pages/inventory/adjustments-list/AdjustmentsListPage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import {
  Container,
  useMediaQuery,
  useTheme,
  Alert,
  Snackbar,
  Box,
  Fab,
  Badge
} from '@mui/material';
import { IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as adjustmentsListApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import PageHeader from './components/PageHeader'; // استبدال AdjustmentsListHeader
import AdjustmentsTable from './components/AdjustmentsTable';
import AdjustmentsCards from './components/AdjustmentsCards';
import MobileAdjustmentsFilter, { FilterState } from './components/mobile/MobileAdjustmentsFilter';



const AdjustmentsListPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [adjustments, setAdjustments] = useState<adjustmentsListApi.AdjustmentListItem[]>([]);
  const [warehouses, setWarehouses] = useState<Array<{ id: string; name: string }>>([]);
  const [loading, setLoading] = useState(true);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [filterOpen, setFilterOpen] = useState(false);
  
  const [filters, setFilters] = useState<FilterState>({
    searchQuery: '',
    adjustmentType: '',
    status: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'adjustmentDate',
    sortOrder: 'desc'
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const [adjustmentsData, warehousesData] = await Promise.all([
        adjustmentsListApi.getAdjustments(),
        warehousesApi.getAll()
      ]);
      setAdjustments(adjustmentsData);
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (error) {
      console.error('Error loading data:', error);
      setAlertMessage(t('adjustments.errors.loadFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  // تطبيق الفلاتر والبحث والترتيب
  const filteredAndSortedAdjustments = useMemo(() => {
    let result = [...adjustments];

    // البحث
    if (filters.searchQuery.trim()) {
      const searchLower = filters.searchQuery.toLowerCase();
      result = result.filter(adj => 
        adj.adjustmentId.toLowerCase().includes(searchLower) ||
        adj.warehouseName?.toLowerCase().includes(searchLower) ||
        adj.reason?.toLowerCase().includes(searchLower) ||
        adj.referenceNumber?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع التسوية
    if (filters.adjustmentType) {
      result = result.filter(adj => adj.adjustmentType.toString() === filters.adjustmentType);
    }

    // فلتر الحالة
    if (filters.status) {
      result = result.filter(adj => adj.status.toString() === filters.status);
    }

    // فلتر المخزن
    if (filters.warehouseId) {
      result = result.filter(adj => adj.warehouseId === filters.warehouseId);
    }

    // فلتر التاريخ
    if (filters.dateFrom) {
      result = result.filter(adj => {
        const adjDate = new Date(adj.adjustmentDate).toISOString().split('T')[0];
        return adjDate >= filters.dateFrom;
      });
    }

    if (filters.dateTo) {
      result = result.filter(adj => {
        const adjDate = new Date(adj.adjustmentDate).toISOString().split('T')[0];
        return adjDate <= filters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[filters.sortBy as keyof typeof a];
      let bValue: any = b[filters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (filters.sortBy === 'adjustmentDate') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (filters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [adjustments, filters]);

  // حساب عدد الفلاتر النشطة
  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.adjustmentType) count++;
    if (filters.status) count++;
    if (filters.warehouseId) count++;
    if (filters.dateFrom || filters.dateTo) count++;
    return count;
  };

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      {/* استبدال AdjustmentsListHeader و ExportButtons بـ PageHeader الجديد */}
      <PageHeader
        exportData={filteredAndSortedAdjustments}
        loading={loading}
        onRefresh={loadData}
      />

      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <AdjustmentsCards
            adjustments={filteredAndSortedAdjustments}
            loading={loading}
          />
        ) : (
          <AdjustmentsTable
            adjustments={filteredAndSortedAdjustments}
            loading={loading}
          />
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileAdjustmentsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={filters}
          onFiltersChange={setFilters}
          warehouses={warehouses}
          totalResults={adjustments.length}
          filteredResults={filteredAndSortedAdjustments.length}
        />
      )}

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ 
          vertical: 'top', 
          horizontal: 'center' 
        }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default AdjustmentsListPage;


============================================================
FILE: src/Pages/inventory/adjustments-list/InventoryAdjustmentPage.tsx
============================================================
// File: src/pages/inventory/adjustment/InventoryAdjustmentPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  useMediaQuery,
  useTheme,
  Alert,
  Snackbar,
  Typography,
  Box,
  Paper
} from '@mui/material';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import * as adjustmentApi from 'src/utils/api/pagesApi/inventoryAdjustmentApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import AdjustmentHeader from './components/AdjustmentHeader';
import AdjustmentForm from './components/AdjustmentForm';
import AdjustmentItemsTable from './components/AdjustmentItemsTable';
import AdjustmentItemsCards from './components/AdjustmentItemsCards';
import NewAdjustmentDialog from './components/NewAdjustmentDialog';
import ProductSearchBox from './components/ProductSearchBox';

type FormValues = {
  warehouseId: string;
  adjustmentType: number;
  reason: string;
  referenceNumber: string;
  details: Array<{
    detailsAdjustmentId: string;
    productId: string;
    productPriceId: string;
    productName: string;
    unitName: string;
    oldQuantity: number;
    newQuantity: number;
    unitFactor: number;
    diffQty: number;
    notes: string;
    barcode?: string;
  }>;
};

const InventoryAdjustmentPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [adjustment, setAdjustment] = useState<adjustmentApi.InventoryAdjustment | null>(null);
  const [, setLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [showNewAdjustmentDialog, setShowNewAdjustmentDialog] = useState(false);
  const [selectedAdjustmentType, setSelectedAdjustmentType] = useState<number>(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredDetails, setFilteredDetails] = useState<any[]>([]);

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: {
      warehouseId: '',
      adjustmentType: 0,
      reason: '',
      referenceNumber: '',
      details: []
    }
  });

  const watchedWarehouseId = watch('warehouseId');
  const watchedDetails = watch('details');

  useEffect(() => {
    loadWarehouses();
  }, []);

  useEffect(() => {
    if (watchedWarehouseId) {
      loadAdjustment(watchedWarehouseId);
    }
  }, [watchedWarehouseId]);

  useEffect(() => {
    watchedDetails.forEach((detail, index) => {
      const diffQty = detail.newQuantity - detail.oldQuantity;
      if (detail.diffQty !== diffQty) {
        setValue(`details.${index}.diffQty`, diffQty);
      }
    });
  }, [watchedDetails, setValue]);

  useEffect(() => {
    if (!adjustment?.details) {
      setFilteredDetails([]);
      return;
    }

    if (!searchQuery.trim()) {
      setFilteredDetails(adjustment.details);
      return;
    }

    const filtered = adjustment.details.filter(detail => {
      const searchLower = searchQuery.toLowerCase();
      return (
        detail.productName.toLowerCase().includes(searchLower) ||
        detail.unitName.toLowerCase().includes(searchLower) ||
        (detail.barcode && detail.barcode.toLowerCase().includes(searchLower))
      );
    });

    setFilteredDetails(filtered);
  }, [adjustment?.details, searchQuery]);

  const loadWarehouses = async () => {
    try {
      const data = await warehousesApi.getAll();
      setWarehouses(data);
    } catch (error) {
      setAlertMessage(t('adjustment.errors.loadWarehousesFailed'));
      setAlertSeverity('error');
    }
  };

  const loadAdjustment = async (warehouseId: string) => {
    try {
      setLoading(true);
      const data = await adjustmentApi.getOrCreatePendingAdjustment(warehouseId);
      setAdjustment(data);

      if (data.adjustmentType === 0) {
        setShowNewAdjustmentDialog(true);
        setSelectedAdjustmentType(0);
      } else {
        setSelectedAdjustmentType(data.adjustmentType);
        populateForm(data);
      }
    } catch (error) {
      setAlertMessage(t('adjustment.errors.loadAdjustmentFailed'));
      setAlertSeverity('error');
    } finally {
      setLoading(false);
    }
  };

  const populateForm = (data: adjustmentApi.InventoryAdjustment) => {
    reset({
      warehouseId: data.warehouseId,
      adjustmentType: data.adjustmentType,
      reason: data.reason || '',
      referenceNumber: data.referenceNumber || '',
      details: data.details.map(d => ({
        detailsAdjustmentId: d.detailsAdjustmentId,
        productId: d.productId,
        productPriceId: d.productPriceId,
        productName: d.productName,
        unitName: d.unitName,
        oldQuantity: d.oldQuantity,
        newQuantity: d.newQuantity,
        unitFactor: d.unitFactor,
        diffQty: d.diffQty,
        notes: d.notes || '',
        barcode: d.barcode || ''
      }))
    });
  };

  const handleNewAdjustmentConfirm = (adjustmentType: number) => {
    setSelectedAdjustmentType(adjustmentType);
    setValue('adjustmentType', adjustmentType);
    
    if (adjustment) {
      populateForm(adjustment);
    }
    
    setShowNewAdjustmentDialog(false);
    setAlertMessage(t('adjustment.messages.newAdjustmentStarted'));
    setAlertSeverity('success');
  };

  const handleQuantityChange = (index: number, newQuantity: number) => {
    setValue(`details.${index}.newQuantity`, newQuantity);
    const oldQuantity = watch(`details.${index}.oldQuantity`);
    const diffQty = newQuantity - oldQuantity;
    setValue(`details.${index}.diffQty`, diffQty);
  };

  const handleSave = async () => {
    handleSubmit(async (data) => {
      if (isSubmitting || !adjustment?.adjustmentId) return;

      try {
        setIsSubmitting(true);
        
        const updateData = {
          adjustmentId: adjustment.adjustmentId,
          adjustmentType: selectedAdjustmentType,
          reason: data.reason,
          referenceNumber: data.referenceNumber,
          warehouseId: data.warehouseId,
          status: 1,
          details: data.details.map(d => ({
            detailsAdjustmentId: d.detailsAdjustmentId,
            adjustmentId: adjustment.adjustmentId,
            productId: d.productId,
            productPriceId: d.productPriceId,
            productName: d.productName,
            unitName: d.unitName,
            oldQuantity: d.oldQuantity,
            newQuantity: d.newQuantity,
            unitFactor: d.unitFactor,
            diffQty: d.diffQty,
            notes: d.notes,
            branchID: null,
            companyID: null,
            isActive: true
          }))
        };

        const result = await adjustmentApi.updateAdjustment(updateData);
        setAdjustment(result);
        setAlertMessage(t('adjustment.messages.saveSuccess'));
        setAlertSeverity('success');
      } catch (error) {
        setAlertMessage(t('adjustment.errors.saveFailed'));
        setAlertSeverity('error');
      } finally {
        setIsSubmitting(false);
      }
    })();
  };

  const handleSubmitAdjustment = async () => {
    handleSubmit(async (data) => {
      if (isSubmitting || !adjustment?.adjustmentId) return;

      try {
        setIsSubmitting(true);
        
        const updateData = {
          adjustmentId: adjustment.adjustmentId,
          adjustmentType: selectedAdjustmentType,
          reason: data.reason,
          referenceNumber: data.referenceNumber,
          warehouseId: data.warehouseId,
          status: 3,
          details: data.details.map(d => ({
            detailsAdjustmentId: d.detailsAdjustmentId,
            adjustmentId: adjustment.adjustmentId,
            productId: d.productId,
            productPriceId: d.productPriceId,
            productName: d.productName,
            unitName: d.unitName,
            oldQuantity: d.oldQuantity,
            newQuantity: d.newQuantity,
            unitFactor: d.unitFactor,
            diffQty: d.diffQty,
            notes: d.notes,
            branchID: null,
            companyID: null,
            isActive: true
          }))
        };

        const result = await adjustmentApi.updateAdjustment(updateData);
        setAdjustment(result);
        setAlertMessage(t('adjustment.messages.submitSuccess'));
        setAlertSeverity('success');
        
        if (watchedWarehouseId) {
          setTimeout(() => loadAdjustment(watchedWarehouseId), 1000);
        }
      } catch (error) {
        setAlertMessage(t('adjustment.errors.submitFailed'));
        setAlertSeverity('error');
      } finally {
        setIsSubmitting(false);
      }
    })();
  };

  const handleRefresh = () => {
    if (watchedWarehouseId) {
      loadAdjustment(watchedWarehouseId);
    }
  };

  const scrollToProductAndFocus = (productId: string) => {
    const element = document.getElementById(`product-row-${productId}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      element.style.backgroundColor = '#fff3cd';
      
      focusOnQuantityField(productId);
      
      setTimeout(() => {
        element.style.backgroundColor = '';
      }, 2000);
    }
  };

  const focusOnQuantityField = (productId: string) => {
    if (!adjustment?.details) return;
    
    const productIndex = adjustment.details.findIndex(detail => detail.productId === productId);
    if (productIndex !== -1) {
      setTimeout(() => {
        const quantityInput = document.getElementById(`quantity-${productId}`) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
      }, 300);
    }
  };

  return (
    <Container 
      maxWidth={false} 
      sx={{ 
        px: { xs: 1, sm: 2, md: 3 },
        py: { xs: 1, sm: 2 },
        maxWidth: '100vw',
        overflow: 'hidden'
      }}
    >
      <AdjustmentHeader
        isSubmitting={isSubmitting}
        hasAdjustment={!!adjustment}
        warehouseId={watchedWarehouseId}
        onSave={handleSave}
        onSubmit={handleSubmitAdjustment}
        onRefresh={handleRefresh}
      />

      {!watchedWarehouseId && (
        <Paper sx={{ 
          p: { xs: 2, sm: 3 }, 
          mb: { xs: 2, sm: 3 }, 
          backgroundColor: 'info.light', 
          border: '1px solid', 
          borderColor: 'info.main',
          borderRadius: { xs: 1, sm: 2 }
        }}>
          <Typography 
            variant={isMobile ? "body1" : "h6"} 
            color="info.dark" 
            sx={{ 
              textAlign: 'center',
              fontSize: { xs: '1rem', sm: '1.25rem' }
            }}
          >
            {t('adjustment.messages.selectWarehouseToStart')}
          </Typography>
        </Paper>
      )}

      <Box sx={{ mb: { xs: 1, sm: 2 } }}>
        <AdjustmentForm
          control={control}
          warehouses={warehouses}
          hasAdjustment={!!adjustment}
          adjustmentType={selectedAdjustmentType}
          isReadOnly={selectedAdjustmentType !== 0}
        />
      </Box>

      {adjustment && (
        <Box sx={{ mb: { xs: 1, sm: 2 } }}>
          <ProductSearchBox
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filteredDetails={filteredDetails}
            onProductSelect={scrollToProductAndFocus}
            onProductFocus={focusOnQuantityField}
          />
        </Box>
      )}

      {adjustment && (
        <Box sx={{ 
          width: '100%',
          overflow: 'hidden',
          '& .MuiPaper-root': {
            borderRadius: { xs: 1, sm: 2 },
          }
        }}>
          {isMobile ? (
            <AdjustmentItemsCards
              control={control}
              details={filteredDetails}
              itemsCount={filteredDetails.length}
              onQuantityChange={handleQuantityChange}
              watch={watch}
            />
          ) : (
            <AdjustmentItemsTable
              control={control}
              details={watchedDetails}
              itemsCount={filteredDetails.length}
              onQuantityChange={handleQuantityChange}
              watch={watch}
              rawDetails={filteredDetails}
              searchQuery={searchQuery}
            />
          )}
        </Box>
      )}

      <NewAdjustmentDialog
        open={showNewAdjustmentDialog}
        onClose={() => setShowNewAdjustmentDialog(false)}
        onConfirm={handleNewAdjustmentConfirm}
      />

      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ 
            width: '100%',
            maxWidth: { xs: '90vw', sm: 'auto' }
          }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default InventoryAdjustmentPage;


============================================================
FILE: src/Pages/permissions/PermissionsPage.tsx
============================================================
// File: src/pages/permissions/PermissionsPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Switch,
  FormControlLabel,
  Chip,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Stack,
  Button,
  Alert,
  Snackbar,
} from '@mui/material';
import {
  IconChevronDown,
  IconUser,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getAllUsers, getUserPages, getUserPagePermission, User, UserPage, PagePermission } from 'src/utils/api/authApi';

interface UserPermissions {
  user: User;
  pages: UserPage[];
  permissions: { [pageId: number]: PagePermission[] };
}

const PermissionsPage: React.FC = () => {
  const { t } = useTranslation();
  
  const [, setUsers] = useState<User[]>([]);
  const [userPermissions, setUserPermissions] = useState<UserPermissions[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedUser, setExpandedUser] = useState<string | null>(null);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  // تحميل المستخدمين والصلاحيات
  const loadUsersAndPermissions = async () => {
    try {
      setLoading(true);
      const usersResponse = await getAllUsers();
      
      if (usersResponse.isvalid && usersResponse.data) {
        setUsers(usersResponse.data);
        
        const permissionsData: UserPermissions[] = [];
        
        for (const user of usersResponse.data) {
          try {
            const pages = await getUserPages();
            const permissions: { [pageId: number]: PagePermission[] } = {};
            
            for (const page of pages) {
              try {
                const pagePermissions = await getUserPagePermission(page.pageId);
                permissions[page.pageId] = pagePermissions;
              } catch (error) {
                console.error(`Error loading permissions for page ${page.pageId}:`, error);
                permissions[page.pageId] = [];
              }
            }
            
            permissionsData.push({
              user,
              pages,
              permissions
            });
          } catch (error) {
            console.error(`Error loading data for user ${user.id}:`, error);
          }
        }
        
        setUserPermissions(permissionsData);
      }
    } catch (error) {
      console.error('Error loading users and permissions:', error);
      setSnackbar({
        open: true,
        message: t('permissions.errors.loadFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsersAndPermissions();
  }, []);

  // تحديث صلاحية صفحة
  const updatePagePermission = async (userId: string, pageId: number, hasAccess: boolean) => {
    try {
      console.log('Updating page permission:', { userId, pageId, hasAccess });
      
      setSnackbar({
        open: true,
        message: t('permissions.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('permissions.errors.updateFailed'),
        severity: 'error'
      });
    }
  };

  // تحديث صلاحية فرعية
  const updateSubPermission = async (userId: string, pageId: number, permissionId: number, hasPermission: boolean) => {
    try {
      console.log('Updating sub permission:', { userId, pageId, permissionId, hasPermission });
      
      setSnackbar({
        open: true,
        message: t('permissions.messages.updateSuccess'),
        severity: 'success'
      });
    } catch (error) {
      setSnackbar({
        open: true,
        message: t('permissions.errors.updateFailed'),
        severity: 'error'
      });
    }
  };

  // مكون عرض صلاحيات المستخدم
  const UserPermissionsCard: React.FC<{ userPermission: UserPermissions }> = ({ userPermission }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <Accordion
        expanded={expandedUser === userPermission.user.id}
        onChange={() => setExpandedUser(
          expandedUser === userPermission.user.id ? null : userPermission.user.id
        )}
      >
        <AccordionSummary expandIcon={<IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
            <IconUser size={24} />
            <Box sx={{ flex: 1 }}>
              <Typography variant="h6">
                {userPermission.user.userName}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {userPermission.user.phoneNo}
              </Typography>
            </Box>
            <Chip
              label={t('permissions.pagesCount', { 
                accessible: userPermission.pages.filter(p => p.hasAccess).length,
                total: userPermission.pages.length 
              })}
              size="small"
              color="primary"
              variant="outlined"
            />
          </Box>
        </AccordionSummary>

        <AccordionDetails>
          <Stack spacing={2}>
            {userPermission.pages.map((page) => (
              <Card key={page.pageId} variant="outlined">
                <CardContent sx={{ py: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="subtitle1">
                      {page.description}
                    </Typography>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={page.hasAccess}
                          onChange={(e) => updatePagePermission(
                            userPermission.user.id,
                            page.pageId,
                            e.target.checked
                          )}
                          color="primary"
                        />
                      }
                      label={page.hasAccess ? t('permissions.enabled') : t('permissions.disabled')}
                    />
                  </Box>

                  {/* الصلاحيات الفرعية */}
                  {page.hasAccess && userPermission.permissions[page.pageId] && (
                    <Box sx={{ mt: 2, pl: 2, borderLeft: 2, borderColor: 'divider' }}>
                      <Typography variant="caption" color="text.secondary" gutterBottom>
                        {t('permissions.subPermissions')}:
                      </Typography>
                      <Grid container spacing={1}>
                        {userPermission.permissions[page.pageId].map((permission) => (
                          <Grid item xs={12} sm={6} md={4} key={permission.permissionId}>
                            <FormControlLabel
                              control={
                                <Switch
                                  size="small"
                                  checked={permission.hasPermission}
                                  onChange={(e) => updateSubPermission(
                                    userPermission.user.id,
                                    page.pageId,
                                    permission.permissionId,
                                    e.target.checked
                                  )}
                                />
                              }
                              label={
                                <Typography variant="caption">
                                  {permission.permissionName}
                                </Typography>
                              }
                            />
                          </Grid>
                        ))}
                      </Grid>
                    </Box>
                  )}
                </CardContent>
              </Card>
            ))}
          </Stack>
        </AccordionDetails>
      </Accordion>
    </Card>
  );

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('permissions.title')}
        </Typography>
        <Typography variant="body1" color="text.secondary">
          {t('permissions.description')}
        </Typography>
      </Box>

      {/* Actions */}
      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={loadUsersAndPermissions}
          disabled={loading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>

      {/* Content */}
      {loading ? (
        <Card>
          <CardContent>
            <Typography color="text.secondary" align="center">
              {t('permissions.loading')}
            </Typography>
          </CardContent>
        </Card>
      ) : userPermissions.length === 0 ? (
        <Card>
          <CardContent>
            <Typography color="text.secondary" align="center">
              {t('permissions.noData')}
            </Typography>
          </CardContent>
        </Card>
      ) : (
        <Box>
          {userPermissions.map((userPermission) => (
            <UserPermissionsCard
              key={userPermission.user.id}
              userPermission={userPermission}
            />
          ))}
        </Box>
      )}

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PermissionsPage;


============================================================
FILE: src/Pages/pos/additions/AdditionProductsPage.tsx
============================================================
// File: src/Pages/pos/additions/AdditionProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from '../../products/components/PageHeader';
import ActionsBar from '../../products/components/ActionsBar';
import ProductTable from '../../products/components/ProductTable';
import ProductRow from '../../products/components/ProductsRow';
import ProductForm from '../../products/components/ProductForm';
import ProductPricesDrawer from '../../products/components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from '../../products/components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import * as posScreensApi from 'src/utils/api/pagesApi/posScreensApi';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';


interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {
  // Add other props here if needed
}

const AdditionProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canImport = true, canExport = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);
const [posScreens, setPosScreens] = React.useState<PosScreen[]>([]);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch Addition products only ───── */
  const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
    try {
      setLoad(true);
      // ⭐ Addition products (productType = 3)
      const data = await apiSrv.getByType(3, page, pageSize);
      setProductsData(data);
      setCurrentPage(page);
    } catch (e: any) {
      setErr(e?.message || t('additionProducts.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  /* ───── search Addition products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product && product.productType === 3) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        // ⭐ فلترة النتائج للـ Addition products بس
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 3)
        };
        setProductsData(filteredData);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {
      setErr(e?.message || t('additionProducts.errors.searchFailed'));
    } finally {
      setSearching(false);
    }
  };

  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData, posScreensData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll(),
          posScreensApi.getAll() // ⭐ إضافة جلب POS Screens

        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        setPosScreens(posScreensData); // ⭐ حفظ POS Screens
        await fetchProducts(1);
      }
      catch (e: any) { 
        setErr(e?.message || t('additionProducts.errors.loadFailed')); 
      }
    })();
  }, []);

  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 3)
        };
        setProductsData(filteredData);
        setCurrentPage(page);
      } catch (e: any) {
        setErr(e?.message || t('additionProducts.errors.searchFailed'));
      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      const addData = {
        ...data,
        productType: 3 // ⭐ Addition
      };
      await apiSrv.add(addData);
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updateData = {
        ...data,
        productType: 3 // ⭐ Addition
      };
      const updatedProduct = await apiSrv.update(updateData);
      
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      if (selectedProduct && selectedProduct.id === data.productId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        title={t('additionProducts.title')}
        exportData={displayedData} 
        loading={loading}
        showImport={canImport}
        showExport={canExport}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('additionProducts.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('additionProducts.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('additionProducts.searchByBarcode')}: ${searchQuery}`
                    : `${t('additionProducts.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('additionProducts.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{
                minHeight: 48,
                fontSize: '1rem'
              }}
            >
              {t('additionProducts.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('additionProducts.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('additionProducts.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('additionProducts.noSearchResults') : t('additionProducts.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <ProductForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        groups={groups}
        units={units}
        posScreens={posScreens} // ⭐ إضافة هذا السطر
        productType={3} // ⭐ Addition
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default AdditionProductsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/pos/customers/components/mobile/MobileCustomersFilter.tsx
============================================================
// File: src/pages/pos/customers/components/mobile/MobileCustomersFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface CustomersFilterState {
  searchQuery: string;
  status: string;
  customerType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CustomersFilterState;
  onFiltersChange: (filters: CustomersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCustomersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof CustomersFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      customerType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.customerType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('customers.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Customer Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('customers.form.type')}</InputLabel>
            <Select
              value={filters.customerType}
              onChange={(e) => updateFilter('customerType', e.target.value)}
              label={t('customers.form.type')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="vip">{t('customers.form.vip')}</MenuItem>
              <MenuItem value="blocked">{t('customers.form.blocked')}</MenuItem>
              <MenuItem value="regular">{t('customers.form.regular')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('customers.form.name')}</MenuItem>
              <MenuItem value="phone1">{t('customers.form.phone1')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCustomersFilter;


============================================================
FILE: src/Pages/pos/customers/components/ActionsBar.tsx
============================================================
// File: src/pages/pos/customers/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('customers.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/customers/components/CustomerForm.tsx
============================================================
// File: src/pages/pos/customers/components/CustomerForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Switch, Typography,
  FormControlLabel, Card, CardContent, IconButton, Divider,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus } from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';

type FormValues = {
  name: string;
  phone1: string;
  phone2: string;
  phone3: string;
  phone4: string;
  isVIP: boolean;
  isBlocked: boolean;
  isActive: boolean;
  addresses: CustomerAddress[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Customer;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CustomerForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [zones, setZones] = React.useState<any[]>([]);

  const defaults: FormValues = {
    name: '',
    phone1: '',
    phone2: '',
    phone3: '',
    phone4: '',
    isVIP: false,
    isBlocked: false,
    isActive: true,
    addresses: []
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: addressFields, append: appendAddress, remove: removeAddress } = useFieldArray({
    control,
    name: 'addresses'
  });

  // تحميل مناطق التوصيل
  React.useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    if (open) {
      loadZones();
    }
  }, [open]);

  // تحديث النموذج عند فتحه أو تغيير القيم الأولية
React.useEffect(() => {
  if (open) {
    if (mode === 'add') {
      const formValues = initialValues ? {
        name: initialValues.name || '',
        phone1: initialValues.phone1 || '',
        phone2: initialValues.phone2 || '',
        phone3: initialValues.phone3 || '',
        phone4: initialValues.phone4 || '',
        isVIP: initialValues.isVIP || false,
        isBlocked: initialValues.isBlocked || false,
        isActive: initialValues.isActive !== undefined ? initialValues.isActive : true,
        addresses: initialValues.addresses || []
      } : {
        name: '',
        phone1: '',
        phone2: '',
        phone3: '',
        phone4: '',
        isVIP: false,
        isBlocked: false,
        isActive: true,
        addresses: []
      };
      
      console.log('Resetting form with values:', formValues);
      reset(formValues);
    } else if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        phone1: initialValues.phone1,
        phone2: initialValues.phone2 || '',
        phone3: initialValues.phone3 || '',
        phone4: initialValues.phone4 || '',
        isVIP: initialValues.isVIP,
        isBlocked: initialValues.isBlocked,
        isActive: initialValues.isActive,
        addresses: initialValues.addresses || []
      });
    }
  }
}, [open, mode, initialValues, reset]); // أزلت defaults من هنا


  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset, defaults]);

  const addAddress = () => {
    appendAddress({
      addressLine: '',
      floor: '',
      apartment: '',
      landmark: '',
      notes: '',
      zoneId: '',
      isActive: true
    });
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone1: data.phone1,
          phone2: data.phone2 || null,
          phone3: data.phone3 || null,
          phone4: data.phone4 || null,
          isVIP: data.isVIP,
          isBlocked: data.isBlocked,
          isActive: data.isActive,
          addresses: data.addresses.map(addr => ({
            ...(addr.id && { id: addr.id }),
            addressLine: addr.addressLine,
            floor: addr.floor || '',
            apartment: addr.apartment || '',
            landmark: addr.landmark || '',
            notes: addr.notes || '',
            zoneId: addr.zoneId,
            isActive: addr.isActive
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone1: data.phone1,
          phone2: data.phone2 || null,
          phone3: data.phone3 || null,
          phone4: data.phone4 || null,
          isVIP: data.isVIP,
          isBlocked: data.isBlocked,
          isActive: data.isActive,
          addresses: data.addresses.map(addr => ({
            addressLine: addr.addressLine,
            floor: addr.floor || '',
            apartment: addr.apartment || '',
            landmark: addr.landmark || '',
            notes: addr.notes || '',
            zoneId: addr.zoneId
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      console.error('Submit error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('customers.add') : t('customers.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Customer Info */}
            <Grid item xs={12}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                {t('customers.form.basicInfo')}
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('customers.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone1"
                control={control}
                rules={{ 
                  required: t('customers.phone1Required'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('customers.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone1')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone2"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone2')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone3"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone3')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="phone4"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('customers.form.phone4')}
                    fullWidth
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Customer Status */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap' }}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isVIP"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('customers.form.isVIP')}
                />

                <FormControlLabel
                  control={
                    <Controller
                      name="isBlocked"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('customers.form.isBlocked')}
                />

                {mode === 'edit' && (
                  <FormControlLabel
                    control={
                      <Controller
                        name="isActive"
                        control={control}
                        render={({ field }) => (
                          <Switch
                            checked={field.value}
                            onChange={field.onChange}
                          />
                        )}
                      />
                    }
                    label={t('customers.form.isActive')}
                  />
                )}
              </Box>
            </Grid>

            {/* Addresses Section */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  {t('customers.form.addresses')} ({addressFields.length})
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<IconPlus />}
                  onClick={addAddress}
                  size="small"
                >
                  {t('customers.form.addAddress')}
                </Button>
              </Box>

              {addressFields.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4, backgroundColor: 'grey.50', borderRadius: 1 }}>
                  <Typography color="text.secondary">
                    {t('customers.form.noAddresses')}
                  </Typography>
                </Box>
              ) : (
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  {addressFields.map((address, index) => (
                    <Card key={address.id} variant="outlined">
                      <CardContent sx={{ pb: '16px !important' }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                          <Typography variant="subtitle2">
                            {t('customers.form.address')} {index + 1}
                          </Typography>
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => removeAddress(index)}
                          >
                            <IconTrash size={16} />
                          </IconButton>
                        </Box>

                        <Grid container spacing={2}>
                          <Grid item xs={12}>
                            <Controller
                              name={`addresses.${index}.addressLine`}
                              control={control}
                              rules={{ required: t('customers.addressLineRequired') }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.addressLine')}
                                  fullWidth
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.zoneId`}
                              control={control}
                              rules={{ required: t('customers.zoneRequired') }}
                              render={({ field, fieldState }) => (
                                <FormControl fullWidth size="small" error={!!fieldState.error}>
                                  <InputLabel>{t('customers.form.zone')}</InputLabel>
                                  <Select
                                    {...field}
                                    label={t('customers.form.zone')}
                                    required
                                  >
                                    {zones.map((zone) => (
                                      <MenuItem key={zone.id} value={zone.id}>
                                        {zone.name}
                                      </MenuItem>
                                    ))}
                                  </Select>
                                  {fieldState.error && (
                                    <Box sx={{ color: 'error.main', fontSize: '0.75rem', mt: 0.5 }}>
                                      {fieldState.error.message}
                                    </Box>
                                  )}
                                </FormControl>
                              )}
                            />
                          </Grid>

                          <Grid item xs={6} md={3}>
                            <Controller
                              name={`addresses.${index}.floor`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.floor')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={6} md={3}>
                            <Controller
                              name={`addresses.${index}.apartment`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.apartment')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.landmark`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.landmark')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={6}>
                            <Controller
                              name={`addresses.${index}.notes`}
                              control={control}
                              render={({ field }) => (
                                <TextField
                                  {...field}
                                  label={t('customers.form.notes')}
                                  fullWidth
                                  size="small"
                                />
                              )}
                            />
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  ))}
                </Box>
              )}
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('customers.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('customers.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CustomerForm;


============================================================
FILE: src/Pages/pos/customers/components/CustomerRow.tsx
============================================================
// File: src/pages/pos/customers/components/CustomerRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Accordion, AccordionSummary, AccordionDetails
} from '@mui/material';
import { IconEdit, IconTrash, IconPhone, IconMapPin, IconChevronDown } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  customer: Customer;
  onEdit: () => void;
  onDelete: () => void;
  canEdit?: boolean;
  canDelete?: boolean;
}

const CustomerRow: React.FC<Props> = ({ 
  customer, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = (phone: string) => {
    window.open(`tel:${phone}`, '_self');
  };

  const getCustomerTypeChip = () => {
    if (customer.isBlocked) {
      return <Chip label={t('customers.form.blocked')} color="error" size="small" />;
    }
    if (customer.isVIP) {
      return <Chip label={t('customers.form.vip')} color="warning" size="small" />;
    }
    return <Chip label={t('customers.form.regular')} color="default" size="small" variant="outlined" />;
  };

  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {customer.name}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              {getCustomerTypeChip()}
              <Chip
                label={customer.isActive ? t('common.active') : t('common.inactive')}
                color={customer.isActive ? 'success' : 'error'}
                size="small"
                variant={customer.isActive ? 'filled' : 'outlined'}
              />
            </Box>
          </Box>
        </Box>

        {/* Customer Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          {/* Primary Phone */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('customers.form.phone1')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {customer.phone1}
              </Typography>
              <IconButton
                size="small"
                onClick={() => handlePhoneCall(customer.phone1)}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>

          {/* Additional Phones */}
          {[customer.phone2, customer.phone3, customer.phone4].filter(Boolean).map((phone, index) => (
            <Box key={index} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                {t(`customers.form.phone${index + 2}`)}:
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Typography variant="body2" fontFamily="monospace">
                  {phone}
                </Typography>
                <IconButton
                  size="small"
                  onClick={() => handlePhoneCall(phone!)}
                  color="primary"
                  sx={{ p: 0.5 }}
                >
                  <IconPhone size={16} />
                </IconButton>
              </Box>
            </Box>
          ))}
        </Stack>

        {/* Addresses */}
        {customer.addresses.length > 0 && (
          <Accordion sx={{ mt: 2, boxShadow: 'none', border: '1px solid', borderColor: 'divider' }}>
            <AccordionSummary expandIcon={<IconChevronDown />}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <IconMapPin size={16} />
                <Typography variant="body2" fontWeight={500}>
                  {customer.addresses.length} {t('customers.form.addressCount')}
                </Typography>
              </Box>
            </AccordionSummary>
            <AccordionDetails>
              <Stack spacing={2}>
                {customer.addresses.map((address, index) => (
                  <Box key={address.id || index} sx={{ p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
                    <Typography variant="body2" fontWeight={500} sx={{ mb: 1 }}>
                      {address.addressLine}
                    </Typography>
                    {address.zoneName && (
                      <Typography variant="caption" color="primary.main">
                        {address.zoneName}
                      </Typography>
                    )}
                    {(address.floor || address.apartment) && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {address.floor && `${t('customers.form.floor')}: ${address.floor}`}
                        {address.floor && address.apartment && ' - '}
                        {address.apartment && `${t('customers.form.apartment')}: ${address.apartment}`}
                      </Typography>
                    )}
                    {address.landmark && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {t('customers.form.landmark')}: {address.landmark}
                      </Typography>
                    )}
                    {address.notes && (
                      <Typography variant="caption" display="block" color="text.secondary">
                        {t('customers.form.notes')}: {address.notes}
                      </Typography>
                    )}
                  </Box>
                ))}
              </Stack>
            </AccordionDetails>
          </Accordion>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
          
          {canDelete && (
            <Tooltip title={t('common.delete')}>
              <IconButton
                size="small"
                onClick={onDelete}
                color="error"
              >
                <IconTrash size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CustomerRow;


============================================================
FILE: src/Pages/pos/customers/components/CustomerTable.tsx
============================================================
// File: src/pages/pos/customers/components/CustomerTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTrash, IconPhone, IconMapPin } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  rows: Customer[];
  onEdit: (customer: Customer) => void;
  onDelete: (customer: Customer) => void;
  canEdit?: boolean;
  canDelete?: boolean;
}

const CustomerTable: React.FC<Props> = ({ 
  rows, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<Customer>[] = [
    { 
      field: 'name', 
      headerName: t('customers.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone1', 
      headerName: t('customers.form.phone1'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'addresses', 
      headerName: t('customers.form.addresses'), 
      width: 250,
      sortable: false,
      renderCell: ({ value }) => {
        const addresses = value || [];
        return (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconMapPin size={16} />
            <Typography variant="body2">
              {addresses.length} {t('customers.form.addressCount')}
            </Typography>
            {addresses.length > 0 && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ 
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                  maxWidth: 150
                }}
                title={addresses[0]?.addressLine}
              >
                - {addresses[0]?.addressLine}
              </Typography>
            )}
          </Box>
        );
      }
    },
    { 
      field: 'customerType', 
      headerName: t('customers.form.type'), 
      width: 120,
      renderCell: ({ row }) => {
        if (row.isBlocked) {
          return <Chip label={t('customers.form.blocked')} color="error" size="small" />;
        }
        if (row.isVIP) {
          return <Chip label={t('customers.form.vip')} color="warning" size="small" />;
        }
        return <Chip label={t('customers.form.regular')} color="default" size="small" variant="outlined" />;
      }
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
          {canDelete && (
            <IconButton size="small" onClick={() => onDelete(row)} color="error">
              <IconTrash size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CustomerTable;


============================================================
FILE: src/Pages/pos/customers/components/PageHeader.tsx
============================================================
// File: src/pages/pos/customers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { customersImportExportConfig } from '../../../components/configs/importExportConfigs';
import { Customer } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  exportData: Customer[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...customersImportExportConfig,
    onExport: () => exportData.map(customer => ({
      name: customer.name,
      phone1: customer.phone1,
      phone2: customer.phone2 || '',
      phone3: customer.phone3 || '',
      phone4: customer.phone4 || '',
      isVIP: customer.isVIP,
      isBlocked: customer.isBlocked,
      isActive: customer.isActive,
      addressesCount: customer.addresses.length,
      primaryAddress: customer.addresses[0]?.addressLine || ''
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('customers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/customers/CustomersPage.tsx
============================================================
// File: src/pages/pos/customers/CustomersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, Dialog, DialogTitle,
  DialogContent, DialogContentText, DialogActions, Pagination,
  TextField, InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconTrash, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CustomerTable from './components/CustomerTable';
import CustomerRow from './components/CustomerRow';
import CustomerForm from './components/CustomerForm';
import MobileCustomersFilter, { CustomersFilterState } from './components/mobile/MobileCustomersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/customersApi';
import { Customer, CustomersResponse } from 'src/utils/api/pagesApi/customersApi';

interface Props {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
}

const CustomersPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true, canDelete = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [customersData, setCustomersData] = React.useState<CustomersResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 25,
    data: []
  });
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Customer;
  }>({ open: false, mode: 'add', current: undefined });

  const [deleteDialog, setDeleteDialog] = React.useState<{
    open: boolean;
    customer?: Customer;
  }>({ open: false });

  const [mobileFilters, setMobileFilters] = React.useState<CustomersFilterState>({
    searchQuery: '',
    status: '',
    customerType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const [currentPage, setCurrentPage] = React.useState(1);
  const pageSize = 25;

  const fetchCustomers = async (page: number = currentPage) => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll(page, pageSize);
      setCustomersData(data);
    } catch (e: any) {
      setErr(e?.message || t('customers.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCustomers(currentPage);
  }, [currentPage]);

  const searchCustomers = (query: string) => {
    if (!query.trim()) {
      return customersData.data;
    }
    
    const searchLower = query.toLowerCase();
    return customersData.data.filter(customer => 
      customer.name.toLowerCase().includes(searchLower) ||
      customer.phone1.toLowerCase().includes(searchLower) ||
      customer.phone2?.toLowerCase().includes(searchLower) ||
      customer.addresses.some(addr => 
        addr.addressLine.toLowerCase().includes(searchLower) ||
        addr.zoneName?.toLowerCase().includes(searchLower)
      )
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...customersData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(customer => 
        customer.name.toLowerCase().includes(searchLower) ||
        customer.phone1.toLowerCase().includes(searchLower) ||
        customer.phone2?.toLowerCase().includes(searchLower) ||
        customer.addresses.some(addr => 
          addr.addressLine.toLowerCase().includes(searchLower) ||
          addr.zoneName?.toLowerCase().includes(searchLower)
        )
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(customer => customer.isActive === isActive);
    }

    if (mobileFilters.customerType) {
      if (mobileFilters.customerType === 'vip') {
        result = result.filter(customer => customer.isVIP);
      } else if (mobileFilters.customerType === 'blocked') {
        result = result.filter(customer => customer.isBlocked);
      } else if (mobileFilters.customerType === 'regular') {
        result = result.filter(customer => !customer.isVIP && !customer.isBlocked);
      }
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [customersData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCustomers(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.customerType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCustomers(currentPage);
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchCustomers(currentPage);
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleDelete = async (customer: Customer) => {
    try {
      await apiSrv.deleteCustomer(customer.id);
      await fetchCustomers(currentPage);
      setDeleteDialog({ open: false });
    } catch (e: any) {
      const msg = e?.message || t('customers.errors.deleteFailed');
      setErr(msg);
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (customer: Customer) => {
    setDialog({ open: true, mode: 'edit', current: customer });
  };

  const handlePageChange = (_event: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={customersData.data} 
        loading={loading}
      />
      
      {/* ⭐ تنسيق البحث والإضافة زي الصفحات القديمة */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('customers.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('customers.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('customers.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('customers.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
          <Typography variant="h5">
            {t('customers.title')} ({customersData.totalCount})
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {t('customers.pageInfo', { 
              page: customersData.pageNumber, 
              total: customersData.pageCount 
            })}
          </Typography>
        </Stack>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('customers.noSearchResults') : t('customers.noCustomers')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(customer => (
                  <CustomerRow
                    key={customer.id}
                    customer={customer}
                    onEdit={() => handleEdit(customer)}
                    onDelete={() => setDeleteDialog({ open: true, customer })}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                ))
              : (
                  <CustomerTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onDelete={(customer) => setDeleteDialog({ open: true, customer })}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                )}
          </>
        )}

        {/* Pagination */}
        {customersData.pageCount > 1 && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <Pagination
              count={customersData.pageCount}
              page={currentPage}
              onChange={handlePageChange}
              color="primary"
              size={isMobile ? 'small' : 'medium'}
            />
          </Box>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCustomersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={customersData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <CustomerForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialog.open} onClose={() => setDeleteDialog({ open: false })}>
        <DialogTitle>{t('customers.deleteConfirmTitle')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {t('customers.deleteConfirmMessage', { name: deleteDialog.customer?.name })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog({ open: false })}>
            {t('common.cancel')}
          </Button>
          <Button 
            onClick={() => deleteDialog.customer && handleDelete(deleteDialog.customer)}
            color="error"
            variant="contained"
            startIcon={<IconTrash />}
          >
            {t('common.delete')}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default CustomersPage;


============================================================
FILE: src/Pages/pos/delivery/agents/components/mobile/MobileAgentsFilter.tsx
============================================================
// File: src/pages/delivery/agents/components/mobile/MobileAgentsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface AgentsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: AgentsFilterState;
  onFiltersChange: (filters: AgentsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileAgentsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof AgentsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryAgents.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('deliveryAgents.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('deliveryAgents.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryAgents.form.name')}</MenuItem>
              <MenuItem value="phone">{t('deliveryAgents.form.phone')}</MenuItem>
              <MenuItem value="branchName">{t('deliveryAgents.form.branch')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileAgentsFilter;


============================================================
FILE: src/Pages/pos/delivery/agents/components/ActionsBar.tsx
============================================================
// File: src/pages/delivery/agents/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryAgents.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/delivery/agents/components/AgentForm.tsx
============================================================
// File: src/pages/delivery/agents/components/AgentForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Typography,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  phone: string;
  branchId: string;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryAgent;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const AgentForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    phone: '',
    branchId: defaultBranch?.id || ''
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          branchId: initialValues.branchId || defaultBranch?.id || ''
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone: data.phone,
          branchId: data.branchId
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone: data.phone,
          branchId: data.branchId
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryAgents.add') : t('deliveryAgents.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryAgents.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryAgents.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('deliveryAgents.phoneRequired'),
                  pattern: {
                    value: /^[0-9+\-\s()]+$/,
                    message: t('deliveryAgents.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryAgents.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="branchId"
                control={control}
                rules={{ required: t('deliveryAgents.branchRequired') }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth error={!!fieldState.error}>
                    <InputLabel>{t('deliveryAgents.form.branch')}</InputLabel>
                    <Select
                      {...field}
                      label={t('deliveryAgents.form.branch')}
                      required
                    >
                      {branches.map((branch) => (
                        <MenuItem key={branch.id} value={branch.id}>
                          {branch.name}
                        </MenuItem>
                      ))}
                    </Select>
                    {fieldState.error && (
                      <Typography variant="caption" color="error" sx={{ mt: 1, ml: 2 }}>
                        {fieldState.error.message}
                      </Typography>
                    )}
                  </FormControl>
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryAgents.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryAgents.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default AgentForm;


============================================================
FILE: src/Pages/pos/delivery/agents/components/AgentRow.tsx
============================================================
// File: src/pages/delivery/agents/components/AgentRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit, IconTrash, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  agent: DeliveryAgent;
  onEdit: () => void;
  onDelete: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
}

const AgentRow: React.FC<Props> = ({ 
  agent, onEdit, onDelete, isSelected = false, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${agent.phone}`, '_self');
  };

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {agent.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {agent.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={agent.isActive ? t('common.active') : t('common.inactive')}
            color={agent.isActive ? 'success' : 'error'}
            size="small"
            variant={agent.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Agent Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryAgents.form.phone')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {agent.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
          
          {canDelete && (
            <Tooltip title={t('common.delete')}>
              <IconButton
                size="small"
                onClick={onDelete}
                color="error"
              >
                <IconTrash size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default AgentRow;


============================================================
FILE: src/Pages/pos/delivery/agents/components/AgentTable.tsx
============================================================
// File: src/pages/delivery/agents/components/AgentTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTrash, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  rows: DeliveryAgent[];
  onEdit: (agent: DeliveryAgent) => void;
  onDelete: (agent: DeliveryAgent) => void;
  canEdit?: boolean;
  canDelete?: boolean;
    selectedAgentId?: string;

}

const AgentTable: React.FC<Props> = ({ 
  rows, onEdit, onDelete, canEdit = true, canDelete = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryAgent>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryAgents.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone', 
      headerName: t('deliveryAgents.form.phone'), 
      width: 180,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={16} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('deliveryAgents.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 150, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
          {canDelete && (
            <IconButton size="small" onClick={() => onDelete(row)} color="error">
              <IconTrash size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default AgentTable;


============================================================
FILE: src/Pages/pos/delivery/agents/components/PageHeader.tsx
============================================================
// File: src/pages/delivery/agents/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryAgentsImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface Props {
  exportData: DeliveryAgent[];
  loading: boolean;
    onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryAgentsImportExportConfig,
    onExport: () => exportData.map(agent => ({
      name: agent.name,
      phone: agent.phone,
      branchName: agent.branchName || t('common.notSpecified'),
      isActive: agent.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryAgents.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/delivery/agents/DeliveryAgentsPage.tsx
============================================================
// File: src/pages/delivery/agents/DeliveryAgentsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip, Dialog, DialogTitle,
  DialogContent, DialogContentText, DialogActions
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus, IconTrash } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import AgentTable from './components/AgentTable';
import AgentRow from './components/AgentRow';
import AgentForm from './components/AgentForm';
import MobileAgentsFilter, { AgentsFilterState } from './components/mobile/MobileAgentsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryAgentsApi';
import { DeliveryAgent } from 'src/utils/api/pagesApi/deliveryAgentsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryAgentsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true, canDelete = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [agents, setAgents] = React.useState<DeliveryAgent[]>([]);
  const [selectedAgent, setSelectedAgent] = React.useState<DeliveryAgent | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryAgent;
  }>({ open: false, mode: 'add', current: undefined });

  const [deleteDialog, setDeleteDialog] = React.useState<{
    open: boolean;
    agent?: DeliveryAgent;
  }>({ open: false });

  const [mobileFilters, setMobileFilters] = React.useState<AgentsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchAgents = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setAgents(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryAgents.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchAgents();
  }, []);

  const searchAgents = (query: string) => {
    if (!query.trim()) {
      return agents;
    }
    
    const searchLower = query.toLowerCase();
    return agents.filter(agent => 
      agent.name.toLowerCase().includes(searchLower) ||
      agent.phone.toLowerCase().includes(searchLower) ||
      agent.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...agents];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(agent => 
        agent.name.toLowerCase().includes(searchLower) ||
        agent.phone.toLowerCase().includes(searchLower) ||
        agent.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(agent => agent.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(agent => agent.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [agents, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchAgents(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchAgents();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedAgent = await apiSrv.update(data);
      setAgents(prev => prev.map(a => a.id === updatedAgent.id ? updatedAgent : a));
      
      if (selectedAgent && selectedAgent.id === data.id) {
        setSelectedAgent(updatedAgent);
      }
      
      return updatedAgent;
    } catch (e: any) {      throw e;
    }
  };

  const handleDelete = async (agent: DeliveryAgent) => {
    try {
      await apiSrv.deleteAgent(agent.id);
      setAgents(prev => prev.filter(a => a.id !== agent.id));
      setDeleteDialog({ open: false });
      
      if (selectedAgent?.id === agent.id) {
        setSelectedAgent(null);
      }
    } catch (e: any) {    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (agent: DeliveryAgent) => {
    setDialog({ open: true, mode: 'edit', current: agent });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={agents} 
  loading={loading}
  onDataChange={fetchAgents} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryAgents.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryAgents.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryAgents.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryAgents.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryAgents.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryAgents.noSearchResults') : t('deliveryAgents.noAgents')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(agent => (
                  <AgentRow
                    key={agent.id}
                    agent={agent}
                    onEdit={() => handleEdit(agent)}
                    onDelete={() => setDeleteDialog({ open: true, agent })}
                    isSelected={selectedAgent?.id === agent.id}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                ))
              : (
                  <AgentTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onDelete={(agent) => setDeleteDialog({ open: true, agent })}
                    selectedAgentId={selectedAgent?.id}
                    canEdit={canEdit}
                    canDelete={canDelete}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileAgentsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={agents.length}
          filteredResults={displayedData.length}
        />
      )}

      <AgentForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialog.open} onClose={() => setDeleteDialog({ open: false })}>
        <DialogTitle>{t('deliveryAgents.deleteConfirmTitle')}</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {t('deliveryAgents.deleteConfirmMessage', { name: deleteDialog.agent?.name })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog({ open: false })}>
            {t('common.cancel')}
          </Button>
          <Button 
            onClick={() => deleteDialog.agent && handleDelete(deleteDialog.agent)}
            color="error"
            variant="contained"
            startIcon={<IconTrash />}
          >
            {t('common.delete')}
          </Button>
        </DialogActions>
      </Dialog></Container>
  );
};

export default DeliveryAgentsPage;

function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}


============================================================
FILE: src/Pages/pos/delivery/companies/components/mobile/MobileCompaniesFilter.tsx
============================================================
// File: src/pages/delivery/companies/components/mobile/MobileCompaniesFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface CompaniesFilterState {
  searchQuery: string;
  status: string;
  paymentType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CompaniesFilterState;
  onFiltersChange: (filters: CompaniesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCompaniesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof CompaniesFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      paymentType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.paymentType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryCompanies.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Payment Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('deliveryCompanies.form.paymentType')}</InputLabel>
            <Select
              value={filters.paymentType}
              onChange={(e) => updateFilter('paymentType', e.target.value)}
              label={t('deliveryCompanies.form.paymentType')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="Cash">{t('deliveryCompanies.form.cash')}</MenuItem>
              <MenuItem value="Visa">{t('deliveryCompanies.form.visa')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryCompanies.form.name')}</MenuItem>
              <MenuItem value="companySharePercentage">{t('deliveryCompanies.form.companySharePercentage')}</MenuItem>
              <MenuItem value="phone">{t('deliveryCompanies.form.phone')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCompaniesFilter;


============================================================
FILE: src/Pages/pos/delivery/companies/components/ActionsBar.tsx
============================================================
// File: src/pages/delivery/companies/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryCompanies.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/delivery/companies/components/CompanyForm.tsx
============================================================
// File: src/pages/delivery/companies/components/CompanyForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, FormControl, InputLabel, Select, MenuItem,
  Switch, FormControlLabel
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

type FormValues = {
  name: string;
  paymentType: string;
  companySharePercentage: number;
  visaCollectionCommissionPercentage: number;
  taxPercentage: number;
  phone: string;
  email: string;
  contactPerson: string;
  notes: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryCompany;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CompanyForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const defaults: FormValues = {
    name: '',
    paymentType: 'Cash',
    companySharePercentage: 0,
    visaCollectionCommissionPercentage: 0,
    taxPercentage: 0,
    phone: '',
    email: '',
    contactPerson: '',
    notes: '',
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          paymentType: initialValues.paymentType,
          companySharePercentage: initialValues.companySharePercentage,
          visaCollectionCommissionPercentage: initialValues.visaCollectionCommissionPercentage,
          taxPercentage: initialValues.taxPercentage,
          phone: initialValues.phone,
          email: initialValues.email,
          contactPerson: initialValues.contactPerson,
          notes: initialValues.notes || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          paymentType: data.paymentType,
          companySharePercentage: Number(data.companySharePercentage),
          visaCollectionCommissionPercentage: Number(data.visaCollectionCommissionPercentage),
          taxPercentage: Number(data.taxPercentage),
          phone: data.phone,
          email: data.email,
          contactPerson: data.contactPerson,
          notes: data.notes,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          paymentType: data.paymentType,
          companySharePercentage: Number(data.companySharePercentage),
          visaCollectionCommissionPercentage: Number(data.visaCollectionCommissionPercentage),
          taxPercentage: Number(data.taxPercentage),
          phone: data.phone,
          email: data.email,
          contactPerson: data.contactPerson,
          notes: data.notes,
          isActive: data.isActive
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      // Error handled by global error handler
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryCompanies.add') : t('deliveryCompanies.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Company Name */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryCompanies.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Payment Type */}
            <Grid item xs={12} md={6}>
              <Controller
                name="paymentType"
                control={control}
                render={({ field }) => (
                  <FormControl fullWidth>
                    <InputLabel>{t('deliveryCompanies.form.paymentType')}</InputLabel>
                    <Select
                      {...field}
                      label={t('deliveryCompanies.form.paymentType')}
                    >
                      <MenuItem value="Cash">{t('deliveryCompanies.form.cash')}</MenuItem>
                      <MenuItem value="Visa">{t('deliveryCompanies.form.visa')}</MenuItem>
                    </Select>
                  </FormControl>
                )}
              />
            </Grid>

            {/* Company Share Percentage */}
            <Grid item xs={12} md={6}>
              <Controller
                name="companySharePercentage"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.companyShareRequired'),
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.companySharePercentage')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Visa Collection Commission */}
            <Grid item xs={12} md={6}>
              <Controller
                name="visaCollectionCommissionPercentage"
                control={control}
                rules={{ 
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.visaCollectionCommissionPercentage')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Tax Percentage */}
            <Grid item xs={12} md={6}>
              <Controller
                name="taxPercentage"
                control={control}
                rules={{ 
                  min: { value: 0, message: t('deliveryCompanies.percentageMin') },
                  max: { value: 100, message: t('deliveryCompanies.percentageMax') }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.taxPercentage')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Phone */}
            <Grid item xs={12} md={6}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.phoneRequired'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('deliveryCompanies.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Email */}
            <Grid item xs={12} md={6}>
              <Controller
                name="email"
                control={control}
                rules={{ 
                  required: t('deliveryCompanies.emailRequired'),
                  pattern: {
                    value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: t('deliveryCompanies.emailInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.email')}
                    type="email"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Contact Person */}
            <Grid item xs={12} md={6}>
              <Controller
                name="contactPerson"
                control={control}
                rules={{ required: t('deliveryCompanies.contactPersonRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.contactPerson')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Notes */}
            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('deliveryCompanies.form.notes')}
                    fullWidth
                    multiline
                    rows={3}
                    placeholder={t('deliveryCompanies.form.notesPlaceholder')}
                  />
                )}
              />
            </Grid>

            {/* Active Status */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={
                      <Switch
                        checked={field.value}
                        onChange={field.onChange}
                      />
                    }
                    label={t('deliveryCompanies.form.isActive')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryCompanies.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryCompanies.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CompanyForm;


============================================================
FILE: src/Pages/pos/delivery/companies/components/CompanyRow.tsx
============================================================
// File: src/pages/delivery/companies/components/CompanyRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconPhone, IconMail, IconUser, IconCreditCard } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  company: DeliveryCompany;
  onEdit: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
}

const CompanyRow: React.FC<Props> = ({ 
  company, onEdit, isSelected = false, canEdit = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${company.phone}`, '_self');
  };

  const handleEmailOpen = () => {
    window.open(`mailto:${company.email}`, '_self');
  };

  return (
    <Card variant="outlined" sx={{ 
      mb: 2,
      ...(isSelected && {
        borderColor: 'primary.main',
        backgroundColor: 'action.selected'
      })
    }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {company.name}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Chip
                icon={<IconCreditCard size={14} />}
                label={t(`deliveryCompanies.form.${company.paymentType.toLowerCase()}`)}
                size="small"
                variant="outlined"
                color="primary"
              />
            </Box>
          </Box>
          
          <Chip
            label={company.isActive ? t('common.active') : t('common.inactive')}
            color={company.isActive ? 'success' : 'error'}
            size="small"
            variant={company.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Company Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconPhone size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.phone')}:
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {company.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={14} />
              </IconButton>
            </Box>
          </Grid>

          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconMail size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.email')}:
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
                {company.email}
              </Typography>
              <IconButton
                size="small"
                onClick={handleEmailOpen}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconMail size={14} />
              </IconButton>
            </Box>
          </Grid>

          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconUser size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('deliveryCompanies.form.contactPerson')}:
              </Typography>
            </Box>
            <Typography variant="body2" fontWeight={500}>
              {company.contactPerson}
            </Typography>
          </Grid>
        </Grid>

        {/* Percentages */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
            {t('deliveryCompanies.form.percentages')}:
          </Typography>
          <Stack direction="row" spacing={1} flexWrap="wrap" gap={0.5}>
            <Chip
              label={`${t('deliveryCompanies.form.companyShare')}: ${company.companySharePercentage}%`}
              size="small"
              variant="outlined"
              color="primary"
            />
            <Chip
              label={`${t('deliveryCompanies.form.visaCommission')}: ${company.visaCollectionCommissionPercentage}%`}
              size="small"
              variant="outlined"
              color="secondary"
            />
            <Chip
              label={`${t('deliveryCompanies.form.tax')}: ${company.taxPercentage}%`}
              size="small"
              variant="outlined"
              color="warning"
            />
          </Stack>
        </Box>

        {/* Notes */}
        {company.notes && (
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
              {t('deliveryCompanies.form.notes')}:
            </Typography>
            <Typography variant="body2">
              {company.notes}
            </Typography>
          </Box>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CompanyRow;


============================================================
FILE: src/Pages/pos/delivery/companies/components/CompanyTable.tsx
============================================================
// File: src/pages/delivery/companies/components/CompanyTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconPhone, IconMail } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  rows: DeliveryCompany[];
  onEdit: (company: DeliveryCompany) => void;
  canEdit?: boolean;
  selectedCompanyId?: string;
}

const CompanyTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryCompany>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryCompanies.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'paymentType', 
      headerName: t('deliveryCompanies.form.paymentType'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip
          label={t(`deliveryCompanies.form.${value.toLowerCase()}`)}
          size="small"
          variant="outlined"
          color="primary"
        />
      )
    },
    { 
      field: 'phone', 
      headerName: t('deliveryCompanies.form.phone'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'email', 
      headerName: t('deliveryCompanies.form.email'), 
      width: 200,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`mailto:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconMail size={14} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'companySharePercentage', 
      headerName: t('deliveryCompanies.form.companyShare'), 
      width: 130,
      renderCell: ({ value }) => (
        <Typography variant="body2" color="primary.main" fontWeight={600}>
          {value}%
        </Typography>
      )
    },
    { 
      field: 'contactPerson', 
      headerName: t('deliveryCompanies.form.contactPerson'), 
      width: 150
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CompanyTable;


============================================================
FILE: src/Pages/pos/delivery/companies/components/PageHeader.tsx
============================================================
// File: src/pages/delivery/companies/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryCompaniesImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface Props {
  exportData: DeliveryCompany[];
  loading: boolean;
  onDataChange?: () => Promise<void>;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryCompaniesImportExportConfig,
    onExport: () => exportData.map(company => ({
      name: company.name,
      paymentType: company.paymentType,
      companySharePercentage: company.companySharePercentage,
      visaCollectionCommissionPercentage: company.visaCollectionCommissionPercentage,
      taxPercentage: company.taxPercentage,
      phone: company.phone,
      email: company.email,
      contactPerson: company.contactPerson,
      notes: company.notes || '',
      isActive: company.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryCompanies.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/delivery/companies/DeliveryCompaniesPage.tsx
============================================================
// File: src/pages/delivery/companies/DeliveryCompaniesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CompanyTable from './components/CompanyTable';
import CompanyRow from './components/CompanyRow';
import CompanyForm from './components/CompanyForm';
import MobileCompaniesFilter, { CompaniesFilterState } from './components/mobile/MobileCompaniesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryCompaniesApi';
import { DeliveryCompany } from 'src/utils/api/pagesApi/deliveryCompaniesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryCompaniesPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [companies, setCompanies] = React.useState<DeliveryCompany[]>([]);
  const [selectedCompany, setSelectedCompany] = React.useState<DeliveryCompany | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryCompany;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<CompaniesFilterState>({
    searchQuery: '',
    status: '',
    paymentType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchCompanies = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setCompanies(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryCompanies.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCompanies();
  }, []);

  const searchCompanies = (query: string) => {
    if (!query.trim()) {
      return companies;
    }
    
    const searchLower = query.toLowerCase();
    return companies.filter(company => 
      company.name.toLowerCase().includes(searchLower) ||
      company.phone.toLowerCase().includes(searchLower) ||
      company.email.toLowerCase().includes(searchLower) ||
      company.contactPerson.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...companies];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(company => 
        company.name.toLowerCase().includes(searchLower) ||
        company.phone.toLowerCase().includes(searchLower) ||
        company.email.toLowerCase().includes(searchLower) ||
        company.contactPerson.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(company => company.isActive === isActive);
    }

    if (mobileFilters.paymentType) {
      result = result.filter(company => company.paymentType === mobileFilters.paymentType);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [companies, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCompanies(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.paymentType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCompanies();
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedCompany = await apiSrv.update(data);
      setCompanies(prev => prev.map(c => c.id === updatedCompany.id ? updatedCompany : c));
      if (selectedCompany && selectedCompany.id === data.id) {
        setSelectedCompany(updatedCompany);
      }
      return updatedCompany;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (company: DeliveryCompany) => {
    setDialog({ open: true, mode: 'edit', current: company });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={companies} 
        loading={loading}
        onDataChange={fetchCompanies}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryCompanies.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryCompanies.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryCompanies.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryCompanies.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryCompanies.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryCompanies.noSearchResults') : t('deliveryCompanies.noCompanies')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(company => (
                  <CompanyRow
                    key={company.id}
                    company={company}
                    onEdit={() => handleEdit(company)}
                    isSelected={selectedCompany?.id === company.id}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <CompanyTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedCompanyId={selectedCompany?.id}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCompaniesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={companies.length}
          filteredResults={displayedData.length}
        />
      )}

      <CompanyForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default DeliveryCompaniesPage;




============================================================
FILE: src/Pages/pos/delivery/zones/components/mobile/MobileZonesFilter.tsx
============================================================
// File: src/pages/delivery/zones/components/mobile/MobileZonesFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface ZonesFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ZonesFilterState;
  onFiltersChange: (filters: ZonesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileZonesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof ZonesFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('deliveryZones.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('deliveryZones.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('deliveryZones.form.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('deliveryZones.form.name')}</MenuItem>
              <MenuItem value="deliveryCharge">{t('deliveryZones.form.deliveryCharge')}</MenuItem>
              <MenuItem value="defaultBonus">{t('deliveryZones.form.defaultBonus')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileZonesFilter;


============================================================
FILE: src/Pages/pos/delivery/zones/components/ActionsBar.tsx
============================================================
// File: src/pages/delivery/zones/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('deliveryZones.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/delivery/zones/components/PageHeader.tsx
============================================================
// File: src/pages/delivery/zones/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../../components/ImportExportManager';
import { deliveryZonesImportExportConfig } from '../../../../components/configs/importExportConfigs';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  exportData: DeliveryZone[];
  loading: boolean;
      onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...deliveryZonesImportExportConfig,
    onExport: () => exportData.map(zone => ({
      name: zone.name,
      deliveryCharge: zone.deliveryCharge,
      defaultBonus: zone.defaultBonus,
      branchName: zone.branchName || t('deliveryZones.form.allBranches'),
      isActive: zone.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('deliveryZones.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/delivery/zones/components/ZoneForm.tsx
============================================================
// File: src/pages/delivery/zones/components/ZoneForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Switch,
  FormControlLabel, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  deliveryCharge: number;
  defaultBonus: number;
  branchId?: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: DeliveryZone;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const ZoneForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    deliveryCharge: 0,
    defaultBonus: 0,
  branchId: defaultBranch?.id || '', // ⭐ إضافة الفرع الافتراضي
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          deliveryCharge: initialValues.deliveryCharge,
          defaultBonus: initialValues.defaultBonus,
          branchId: initialValues.branchId || defaultBranch?.id || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          deliveryCharge: Number(data.deliveryCharge),
          defaultBonus: Number(data.defaultBonus),
          branchId: data.branchId || null,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          deliveryCharge: Number(data.deliveryCharge),
          defaultBonus: Number(data.defaultBonus)
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('deliveryZones.add') : t('deliveryZones.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('deliveryZones.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="deliveryCharge"
                control={control}
                rules={{ required: t('deliveryZones.deliveryChargeRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.deliveryCharge')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="defaultBonus"
                control={control}
                rules={{ required: t('deliveryZones.defaultBonusRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('deliveryZones.form.defaultBonus')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

<Grid item xs={12}>
  <Controller
    name="branchId"
    control={control}
    render={({ field }) => (
      <FormControl fullWidth>
        <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
        <Select
          {...field}
          label={t('deliveryZones.form.branch')}
        >
          <MenuItem value="">
            <em>{t('deliveryZones.form.allBranches')}</em>
          </MenuItem>
          {branches.map((branch) => (
            <MenuItem key={branch.id} value={branch.id}>
              {branch.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    )}
  />
</Grid>

            {mode === 'edit' && branches.length > 1 && (
              <Grid item xs={12}>
                <Controller
                  name="branchId"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth>
                      <InputLabel>{t('deliveryZones.form.branch')}</InputLabel>
                      <Select
                        {...field}
                        label={t('deliveryZones.form.branch')}
                      >
                        <MenuItem value="">
                          <em>{t('deliveryZones.form.allBranches')}</em>
                        </MenuItem>
                        {branches.map((branch) => (
                          <MenuItem key={branch.id} value={branch.id}>
                            {branch.name}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>
            )}

            {mode === 'edit' && (
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isActive"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('deliveryZones.form.isActive')}
                />
              </Grid>
            )}
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('deliveryZones.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('deliveryZones.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default ZoneForm;


============================================================
FILE: src/Pages/pos/delivery/zones/components/ZoneRow.tsx
============================================================
// File: src/pages/delivery/zones/components/ZoneRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  zone: DeliveryZone;
  onEdit: () => void;
  isSelected?: boolean;
}

const ZoneRow: React.FC<Props> = ({ zone, onEdit, isSelected = false }) => {
  const { t } = useTranslation();

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {zone.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {zone.branchName || t('deliveryZones.form.allBranches')}
            </Typography>
          </Box>
          
          <Chip
            label={zone.isActive ? t('common.active') : t('common.inactive')}
            color={zone.isActive ? 'success' : 'error'}
            size="small"
            variant={zone.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Zone Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryZones.form.deliveryCharge')}:
            </Typography>
            <Typography variant="body2" color="primary.main" fontWeight={600}>
              {zone.deliveryCharge.toFixed(2)} {t('common.currency')}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('deliveryZones.form.defaultBonus')}:
            </Typography>
            <Typography variant="body2" color="success.main" fontWeight={600}>
              {zone.defaultBonus.toFixed(2)} {t('common.currency')}
            </Typography>
          </Box>
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default ZoneRow;


============================================================
FILE: src/Pages/pos/delivery/zones/components/ZoneTable.tsx
============================================================
// File: src/pages/delivery/zones/components/ZoneTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface Props {
  rows: DeliveryZone[];
  onEdit: (zone: DeliveryZone) => void;
    selectedZoneId?: string;

}

const ZoneTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<DeliveryZone>[] = [
    { 
      field: 'name', 
      headerName: t('deliveryZones.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'deliveryCharge', 
      headerName: t('deliveryZones.form.deliveryCharge'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'defaultBonus', 
      headerName: t('deliveryZones.form.defaultBonus'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'success.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('deliveryZones.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('deliveryZones.form.allBranches')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default ZoneTable;


============================================================
FILE: src/Pages/pos/delivery/zones/DeliveryZonesPage.tsx
============================================================
// File: src/pages/delivery/zones/DeliveryZonesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import ZoneTable from './components/ZoneTable';
import ZoneRow from './components/ZoneRow';
import ZoneForm from './components/ZoneForm';
import MobileZonesFilter, { ZonesFilterState } from './components/mobile/MobileZonesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/deliveryZonesApi';
import { DeliveryZone } from 'src/utils/api/pagesApi/deliveryZonesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const DeliveryZonesPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [zones, setZones] = React.useState<DeliveryZone[]>([]);
  const [selectedZone, setSelectedZone] = React.useState<DeliveryZone | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: DeliveryZone;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<ZonesFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchZones = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setZones(data);
    } catch (e: any) {
      setErr(e?.message || t('deliveryZones.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchZones();
  }, []);

  const searchZones = (query: string) => {
    if (!query.trim()) {
      return zones;
    }
    
    const searchLower = query.toLowerCase();
    return zones.filter(zone => 
      zone.name.toLowerCase().includes(searchLower) ||
      zone.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...zones];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(zone => 
        zone.name.toLowerCase().includes(searchLower) ||
        zone.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(zone => zone.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(zone => zone.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [zones, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchZones(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchZones();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedZone = await apiSrv.update(data);
      setZones(prev => prev.map(z => z.id === updatedZone.id ? updatedZone : z));
      
      if (selectedZone && selectedZone.id === data.id) {
        setSelectedZone(updatedZone);
      }
      
      return updatedZone;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (zone: DeliveryZone) => {
    setDialog({ open: true, mode: 'edit', current: zone });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={zones} 
  loading={loading}
  onDataChange={fetchZones} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('deliveryZones.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('deliveryZones.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('deliveryZones.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('deliveryZones.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('deliveryZones.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('deliveryZones.noSearchResults') : t('deliveryZones.noZones')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(zone => (
                  <ZoneRow
                    key={zone.id}
                    zone={zone}
                    onEdit={() => handleEdit(zone)}
                    isSelected={selectedZone?.id === zone.id}
                  />
                ))
              : (
                  <ZoneTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedZoneId={selectedZone?.id}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileZonesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={zones.length}
          filteredResults={displayedData.length}
        />
      )}

      <ZoneForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      /></Container>
  );
};

export default DeliveryZonesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/pos/hall-captains/components/mobile/MobileCaptainsFilter.tsx
============================================================
// File: src/pages/pos/hall-captains/components/mobile/MobileCaptainsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface CaptainsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: CaptainsFilterState;
  onFiltersChange: (filters: CaptainsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileCaptainsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof CaptainsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('hallCaptains.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('hallCaptains.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('hallCaptains.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('hallCaptains.form.name')}</MenuItem>
              <MenuItem value="phone">{t('hallCaptains.form.phone')}</MenuItem>
              <MenuItem value="branchName">{t('hallCaptains.form.branch')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileCaptainsFilter;


============================================================
FILE: src/Pages/pos/hall-captains/components/ActionsBar.tsx
============================================================
// File: src/pages/pos/hall-captains/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('hallCaptains.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/hall-captains/components/CaptainForm.tsx
============================================================
// File: src/pages/pos/hall-captains/components/CaptainForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Switch,
  FormControlLabel, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';
import { getUserBranchesFromStorage, getDefaultBranch } from 'src/utils/branchUtils';

type FormValues = {
  name: string;
  phone: string;
  notes: string;
  branchId: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: HallCaptain;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const CaptainForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const branches = getUserBranchesFromStorage();
  const defaultBranch = getDefaultBranch();

  const defaults: FormValues = {
    name: '',
    phone: '',
    notes: '',
    branchId: defaultBranch?.id || '',
    isActive: true
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          notes: initialValues.notes || '',
          branchId: initialValues.branchId || defaultBranch?.id || '',
          isActive: initialValues.isActive
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          phone: data.phone,
          notes: data.notes,
          branchId: data.branchId,
          isActive: data.isActive
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          phone: data.phone,
          notes: data.notes,
          branchId: data.branchId,
          isActive: data.isActive
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('hallCaptains.add') : t('hallCaptains.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('hallCaptains.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="phone"
                control={control}
                rules={{ 
                  required: t('hallCaptains.phoneRequired'),
                  pattern: {
                    value: /^01[0-9]{9}$/,
                    message: t('hallCaptains.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.phone')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01012345678"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="branchId"
                control={control}
                rules={{ required: t('hallCaptains.branchRequired') }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth error={!!fieldState.error}>
                    <InputLabel>{t('hallCaptains.form.branch')}</InputLabel>
                    <Select
                      {...field}
                      label={t('hallCaptains.form.branch')}
                      required
                    >
                      {branches.map((branch) => (
                        <MenuItem key={branch.id} value={branch.id}>
                          {branch.name}
                        </MenuItem>
                      ))}
                    </Select>
                    {fieldState.error && (
                      <Box sx={{ color: 'error.main', fontSize: '0.75rem', mt: 0.5, ml: 2 }}>
                        {fieldState.error.message}
                      </Box>
                    )}
                  </FormControl>
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('hallCaptains.form.notes')}
                    fullWidth
                    multiline
                    rows={3}
                    placeholder={t('hallCaptains.form.notesPlaceholder')}
                  />
                )}
              />
            </Grid>

            {mode === 'edit' && (
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Controller
                      name="isActive"
                      control={control}
                      render={({ field }) => (
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      )}
                    />
                  }
                  label={t('hallCaptains.form.isActive')}
                />
              </Grid>
            )}
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('hallCaptains.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('hallCaptains.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CaptainForm;


============================================================
FILE: src/Pages/pos/hall-captains/components/CaptainRow.tsx
============================================================
// File: src/pages/pos/hall-captains/components/CaptainRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip
} from '@mui/material';
import { IconEdit, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  captain: HallCaptain;
  onEdit: () => void;
  canEdit?: boolean;
}

const CaptainRow: React.FC<Props> = ({ 
  captain, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const handlePhoneCall = () => {
    window.open(`tel:${captain.phone}`, '_self');
  };

  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {captain.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {captain.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={captain.isActive ? t('common.active') : t('common.inactive')}
            color={captain.isActive ? 'success' : 'error'}
            size="small"
            variant={captain.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Captain Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('hallCaptains.form.phone')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" fontFamily="monospace" fontWeight={500}>
                {captain.phone}
              </Typography>
              <IconButton
                size="small"
                onClick={handlePhoneCall}
                color="primary"
                sx={{ p: 0.5 }}
              >
                <IconPhone size={16} />
              </IconButton>
            </Box>
          </Box>

          {captain.notes && (
            <Box>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                {t('hallCaptains.form.notes')}:
              </Typography>
              <Typography variant="body2">
                {captain.notes}
              </Typography>
            </Box>
          )}
        </Stack>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default CaptainRow;


============================================================
FILE: src/Pages/pos/hall-captains/components/CaptainTable.tsx
============================================================
// File: src/pages/pos/hall-captains/components/CaptainTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconPhone } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  rows: HallCaptain[];
  onEdit: (captain: HallCaptain) => void;
  canEdit?: boolean;
}

const CaptainTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const cols: GridColDef<HallCaptain>[] = [
    { 
      field: 'name', 
      headerName: t('hallCaptains.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'phone', 
      headerName: t('hallCaptains.form.phone'), 
      width: 180,
      renderCell: ({ value }) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" fontFamily="monospace">
            {value}
          </Typography>
          <IconButton
            size="small"
            onClick={() => window.open(`tel:${value}`, '_self')}
            sx={{ p: 0.5 }}
          >
            <IconPhone size={16} />
          </IconButton>
        </Box>
      )
    },
    { 
      field: 'branchName', 
      headerName: t('hallCaptains.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'notes', 
      headerName: t('hallCaptains.form.notes'), 
      width: 250,
      renderCell: ({ value }) => (
        <Typography 
          variant="body2" 
          sx={{ 
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }}
          title={value}
        >
          {value || '-'}
        </Typography>
      )
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default CaptainTable;


============================================================
FILE: src/Pages/pos/hall-captains/components/PageHeader.tsx
============================================================
// File: src/pages/pos/hall-captains/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { hallCaptainsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  exportData: HallCaptain[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...hallCaptainsImportExportConfig,
    onExport: () => exportData.map(captain => ({
      name: captain.name,
      phone: captain.phone,
      notes: captain.notes || '',
      branchName: captain.branchName || t('common.notSpecified'),
      isActive: captain.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('hallCaptains.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/hall-captains/HallCaptainsPage.tsx
============================================================
// File: src/pages/pos/hall-captains/HallCaptainsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import CaptainTable from './components/CaptainTable';
import CaptainRow from './components/CaptainRow';
import CaptainForm from './components/CaptainForm';
import MobileCaptainsFilter, { CaptainsFilterState } from './components/mobile/MobileCaptainsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/hallCaptainsApi';
import { HallCaptain } from 'src/utils/api/pagesApi/hallCaptainsApi';

interface Props {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
}

const HallCaptainsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [captains, setCaptains] = React.useState<HallCaptain[]>([]);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: HallCaptain;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<CaptainsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchCaptains = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setCaptains(data);
    } catch (e: any) {
      setErr(e?.message || t('hallCaptains.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchCaptains();
  }, []);

  const searchCaptains = (query: string) => {
    if (!query.trim()) {
      return captains;
    }
    
    const searchLower = query.toLowerCase();
    return captains.filter(captain => 
      captain.name.toLowerCase().includes(searchLower) ||
      captain.phone.toLowerCase().includes(searchLower) ||
      captain.notes?.toLowerCase().includes(searchLower) ||
      captain.branchName?.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...captains];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(captain => 
        captain.name.toLowerCase().includes(searchLower) ||
        captain.phone.toLowerCase().includes(searchLower) ||
        captain.notes?.toLowerCase().includes(searchLower) ||
        captain.branchName?.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(captain => captain.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(captain => captain.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [captains, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchCaptains(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchCaptains();
    } catch (e: any) {
      const msg = e?.message || t('hallCaptains.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchCaptains();
    } catch (e: any) {
      const msg = e?.message || t('hallCaptains.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (captain: HallCaptain) => {
    setDialog({ open: true, mode: 'edit', current: captain });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={captains} 
        loading={loading}
      />
      
      {/* ⭐ تنسيق البحث والإضافة زي الصفحات القديمة */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('hallCaptains.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('hallCaptains.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('hallCaptains.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('hallCaptains.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('hallCaptains.title')} ({displayedData.length})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('hallCaptains.noSearchResults') : t('hallCaptains.noCaptains')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(captain => (
                  <CaptainRow
                    key={captain.id}
                    captain={captain}
                    onEdit={() => handleEdit(captain)}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <CaptainTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileCaptainsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={captains.length}
          filteredResults={displayedData.length}
        />
      )}

      <CaptainForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default HallCaptainsPage;


============================================================
FILE: src/Pages/pos/newSales/components/common/Header.tsx
============================================================
// src/Pages/pos/newSales/components/Header.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import { DeliveryCompany } from '../../../../../utils/api/pagesApi/deliveryCompaniesApi';
import '../../styles/Header.css';

interface HeaderProps {
  selectedOrderType: string;
  onOrderTypeChange: (type: string) => void;
  onResetOrder?: () => void;
  onTableClick?: () => void;
  tableDisplayName?: string;
  deliveryCompanies?: DeliveryCompany[];
  selectedDeliveryCompany?: DeliveryCompany | null;
  onDeliveryCompanySelect?: (company: DeliveryCompany) => void;
  selectedCustomer?: Customer | null;
  selectedAddress?: CustomerAddress | null;
}

const Header: React.FC<HeaderProps> = ({ 
  selectedOrderType, 
  onOrderTypeChange, 
  onResetOrder,
  onTableClick,
  tableDisplayName = 'Table',
  deliveryCompanies = [],
  selectedDeliveryCompany,
  onDeliveryCompanySelect,
  selectedCustomer,
  selectedAddress
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const orderTypes = [
    { id: 1, name: 'Takeaway', displayName: 'Takeaway', icon: '/images/takeaway.png', color: '#28a745', description: 'عميل يأخذ الطلب' },
    { id: 2, name: 'Dine-in', displayName: 'Dine-in', icon: '/images/dine-in.png', color: '#007bff', description: 'تناول في المطعم' },
    { id: 3, name: 'Delivery', displayName: 'Delivery', icon: '/images/delivery.png', color: '#dc3545', description: 'توصيل للمنزل' },
    { id: 4, name: 'Pickup', displayName: 'Pickup', icon: '/images/pickup.png', color: '#ffc107', description: 'استلام من المطعم' }
  ];

  const handleDeliveryCompanySelect = (company: DeliveryCompany) => {
    if (onDeliveryCompanySelect) {
      onDeliveryCompanySelect(company);
    }
    setIsDropdownOpen(false);
  };

  const activeDeliveryCompanies = deliveryCompanies.filter(company => company.isActive);

  return (
    <header className="pos-header">
      <div className="header-content">
        <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="header-logo" />
        
        {/* Customer Info Section */}
        {selectedCustomer && (
          <div className="customer-info-section">
            <div className="customer-info-card">
              <div className="customer-basic-info">
                <div className="customer-name">
                  <span className="customer-icon">👤</span>
                  <span>{selectedCustomer.name}</span>
                  {selectedCustomer.isVIP && <span className="vip-badge">VIP</span>}
                </div>
                <div className="customer-phone">
                  <span className="phone-icon">📞</span>
                  <span>{selectedCustomer.phone1}</span>
                </div>
              </div>
              
              {selectedAddress && selectedAddress.addressLine && (
                <div className="customer-address">
                  <span className="address-icon">📍</span>
                  <span className="address-text">
                    {selectedAddress.addressLine}
                    {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
                  </span>
                </div>
              )}
            </div>
          </div>
        )}
        
        <nav className="header-nav">
          <a href="#" className="nav-item active">
            <img src="/images/img_sending_order.svg" alt="" />
            <span>Today Orders</span>
          </a>
          
          <a href="#" className="nav-item" onClick={(e) => { e.preventDefault(); if (onTableClick) onTableClick(); }}>
            <img src="/images/img_table_02.svg" alt="" />
            <span>{tableDisplayName}</span>
          </a>
          
          <a href="#" className="nav-item">
            <img src="/images/img_discount_tag_01.svg" alt="" />
            <span>Discount</span>
          </a>
          
          <a href="#" className="nav-item">
            <img src="/images/img_delete_01.svg" alt="" />
            <span>Void</span>
          </a>
          
          <button className="order-type-display clickable" onClick={onResetOrder}>
            {selectedOrderType}
          </button>
          
          <div className="menu-dropdown-container" ref={dropdownRef}>
            <button className="menu-button" onClick={() => setIsDropdownOpen(!isDropdownOpen)}>
              <img src="/images/img_menu_01.svg" alt="Menu" />
            </button>
            
            {isDropdownOpen && (
              <div className="professional-dropdown">
                <div className="dropdown-section">
                  <div className="section-header">
                    <h3 className="section-title">نوع الطلب</h3>
                    <div className="section-divider"></div>
                  </div>
                  
                  <div className="order-types-grid">
                    {orderTypes.map((type) => (
                      <button
                        key={type.id}
                        className={`order-type-card ${selectedOrderType === type.name ? 'selected' : ''}`}
                        onClick={() => { onOrderTypeChange(type.name); setIsDropdownOpen(false); }}
                        style={{ '--accent-color': type.color } as React.CSSProperties}
                      >
                        <div className="card-icon-container">
                          <img src={type.icon} alt={type.displayName} className="card-icon" />
                        </div>
                        <div className="card-content">
                          <div className="card-title">{type.displayName}</div>
                        </div>
                        <div className="card-check">
                          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                            <path d="M13 4L6 11L3 8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {activeDeliveryCompanies.length > 0 && (
                  <div className="dropdown-section">
                    <div className="section-header">
                      <h3 className="section-title">شركاء التوصيل</h3>
                      <div className="section-divider"></div>
                    </div>
                    
                    <div className="delivery-partners-grid">
                      {activeDeliveryCompanies.map((company) => (
                        <button
                          key={company.id}
                          className={`delivery-partner-card ${selectedDeliveryCompany?.id === company.id ? 'selected' : ''}`}
                          onClick={() => handleDeliveryCompanySelect(company)}
                          style={{ 
                            '--partner-color': '#0373ed',
                            '--partner-bg': '#f8f9fa' 
                          } as React.CSSProperties}
                        >
                          <div className="partner-icon-container">
                            <img src="/images/default-delivery.png" alt={company.name} className="partner-icon" />
                          </div>
                          <div className="partner-content">
                            <div className="partner-name">{company.name}</div>
                            <div className="partner-status">{company.paymentType}</div>
                          </div>
                          <div className="partner-badge">
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                              <circle cx="6" cy="6" r="6" fill="currentColor"/>
                            </svg>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </nav>
      </div>
    </header>
  );
};

export default Header;


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentCenter.module.css
============================================================
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentCenter.module.css */

.wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  padding: 0.8rem;
  box-sizing: border-box;
  font-family: "Cairo", sans-serif;
  overflow: hidden;
  gap: 0.6rem;
}

.headerRow {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
  height: 50px;
}

.balanceTitle {
  font-size: 1.4rem;
  font-weight: 700;
  color: #000;
  direction: rtl;
  text-align: center;
}

.fieldsRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
  flex-shrink: 0;
  height: 80px;
}

.fieldBlock {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  height: 100%;
}

.label {
  font-size: 0.8rem;
  font-weight: 700;
  color: #333;
  direction: rtl;
  text-align: right;
  flex-shrink: 0;
}

.remainingBox, .totalPaidBox {
  padding: 0.6rem;
  font-size: 1.1rem;
  text-align: center;
  border-radius: 8px;
  font-weight: 600;
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.remainingBox {
  background-color: #28a745;
  color: white;
}

.totalPaidBox {
  background-color: #0373ed;
  color: white;
}

.selectedMethodRow {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  flex-shrink: 0;
  height: 70px;
}

.selectedMethodLabel {
  font-size: 0.9rem;
  font-weight: 700;
  color: #0373ed;
  direction: rtl;
  text-align: right;
}

.selectedMethodInput {
  padding: 0.6rem;
  font-size: 1.1rem;
  text-align: center;
  border-radius: 8px;
  font-weight: 600;
  border: 2px solid #0373ed;
  background: #f8f9ff;
  flex: 1;
}

.quickButtons {
  display: flex;
  justify-content: space-between;
  gap: 0.6rem;
  flex-shrink: 0;
  height: 45px;
}

.quickBtn {
  flex: 1;
  background-color: #d9d9d9;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.quickBtn:hover:not(:disabled) {
  background-color: #c8c8c8;
}

.quickBtn:disabled {
  background-color: #f0f0f0;
  color: #999;
  cursor: not-allowed;
}

.keypad {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  flex: 1;
  min-height: 0;
  overflow: hidden;
}

.keypadRow {
  display: flex;
  justify-content: space-between;
  gap: 0.5rem;
  flex: 1;
  min-height: 0;
}

.keypadBtn {
  flex: 1;
  font-size: 1.5rem;
  font-weight: 700;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  min-height: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypadBtn.gray {
  background-color: #d9d9d9;
}

.keypadBtn:hover:not(.disabled) {
  background-color: #f0f0f0;
}

.keypadBtn:active:not(.disabled) {
  transform: scale(0.96);
}

.keypadBtn.disabled {
  background-color: #f5f5f5;
  color: #999;
  cursor: not-allowed;
  border-color: #e0e0e0;
}

.noSelectionMessage {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  color: #666;
  font-size: 0.9rem;
  direction: rtl;
  text-align: center;
  flex-shrink: 0;
}



/* إضافة في PaymentCenter.module.css */

.cashPaidBox {
  padding: 0.6rem;
  font-size: 1.1rem;
  text-align: center;
  border-radius: 8px;
  font-weight: 600;
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #0373ed;
  color: white;
}

.selectedMethodInfo {
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 0.6rem;
  text-align: center;
  flex-shrink: 0;
  direction: rtl;
}

.selectedMethodName {
  display: block;
  font-size: 0.9rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 0.2rem;
}

.limitWarning {
  display: block;
  font-size: 0.8rem;
  color: #dc3545;
  font-weight: 500;
}


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentLeft.module.css
============================================================
.container {
  width: 100%;
  height: 100%;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
  display: flex;
  flex-direction: column;
}

/* قاعدة عامة للخطوط */
:where(.container,
       .container *) { 
  font-size: var(--fs); 
}

.header {
  background: #0373ed;
  color: white;
  padding: clamp(12px, 2vw, 20px);
  text-align: center;
  border-bottom: 2px solid #e9ecef;
}

.title {
  margin: 0;
  font-family: "Cairo-Bold", Helvetica;
  font-weight: 700;
  font-size: calc(var(--fs) * 1.4);
  direction: rtl;
}

.orderSummaryWrapper {
  flex: 1;
  width: 100%;
  height: 100%;
  overflow-y: auto;
  padding: clamp(8px, 1.5vw, 16px);
}

.orderSummaryWrapper::-webkit-scrollbar {
  width: clamp(4px, 0.8vw, 8px);
}

.orderSummaryWrapper::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

.orderSummaryWrapper::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 10px;
}

.orderSummaryWrapper::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Responsive للشاشات المختلفة */
@media (max-width: 1600px) {
  .orderSummaryWrapper {
    padding: clamp(6px, 1.2vw, 14px);
  }
}

@media (max-width: 1024px) {
  .container {
    border-radius: 8px;
  }
  
  .orderSummaryWrapper {
    padding: clamp(6px, 1vw, 12px);
  }
}




============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentOrderSummary.module.css
============================================================
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentOrderSummary.module.css */
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');

:root {
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
}

.orderSummary {
  width: 100%;
  height: 100%;
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
}

/* Header */
.orderHeader {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.orderNumber {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.orderTotal {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.orderTotal .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.orderTotal .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

/* Content */
.orderContent {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
}

.orderContent::-webkit-scrollbar {
  width: 6px;
}

.orderContent::-webkit-scrollbar-track {
  background: transparent;
}

.orderContent::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

/* Customer Info */
.customerInfo {
  background: #e3f2fd;
  border: 1px solid #bbdefb;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: var(--spacing-lg);
  font-family: 'Cairo', sans-serif;
}

.customerName {
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 600;
  font-size: 14px;
  color: #1976d2;
  margin-bottom: 4px;
}

.vipBadge {
  background: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
  color: #8b4513;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase;
}

.customerPhone {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #1976d2;
  font-size: 12px;
  margin-bottom: 4px;
}

.customerAddress {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #1976d2;
  font-size: 11px;
}

/* Order Items */
.orderItems {
  max-height: 50vh;
  margin-bottom: var(--spacing-md);
  scrollbar-width: thin;
}

.orderItems::-webkit-scrollbar {
  width: 4px;
}

.orderItems::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.orderItemContainer {
  margin-bottom: clamp(12px, 1.5vw, 16px);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding-bottom: clamp(8px, 1vw, 12px);
}

.orderItemContainer:last-child {
  border-bottom: none;
}

.orderItem {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  border-radius: 6px;
  margin-bottom: 0;
}

.orderItem.extraItem {
  border-left: 3px solid #28a745;
}

.orderItem.withoutItem {
  border-left: 3px solid #dc3545;
}

.itemDetails {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0;
}

.itemInfo {
  flex: 1;
  min-width: 0;
}

.itemName {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.itemSizeInline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em;
}

.extraBadge, .withoutBadge {
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.extraBadge {
  background: #28a745;
}

.withoutBadge {
  background: #dc3545;
}

.itemPrices {
  display: flex;
  align-items: center;
  gap: clamp(6px, 1vw, 10px);
  flex-shrink: 0;
  min-width: fit-content;
}

.itemPrice {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
  padding-right: clamp(6px, 1vw, 10px);
  border-right: 1px solid #ccc;
}

.itemTotal {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
  padding-left: clamp(6px, 1vw, 10px);
}

.itemTotal.negative {
  color: #dc3545;
  font-weight: 600;
}

/* Sub Items */
.subItemsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #f0f0f0;
}

.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  border-radius: 4px;
}

.subItemDetails {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.subItemBadge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.subItemPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.subItemPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd;
}

.subItemTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

.subItemTotal.negative {
  color: #dc3545;
}

/* Options */
.itemOptions {
  margin-top: 0;
  padding-left: 16px;
}

.optionDetail {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1px;
  padding: 2px 0;
  min-height: 18px;
}

.optionText {
  font-size: 10px;
  color: #666;
  font-weight: 400;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
  flex: 1;
}

.optionPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.optionPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd;
}

.optionTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

/* Comments */
.commentsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #e3f2fd;
}

.commentItem {
  display: flex;
  align-items: flex-start;
  gap: 6px;
  padding: 3px 0;
  margin-bottom: 2px;
  min-height: 20px;
}

.commentIcon {
  font-size: 10px;
  color: #2196f3;
  margin-top: 1px;
  flex-shrink: 0;
}

.commentText {
  font-size: 10px;
  color: #2196f3;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
  font-style: italic;
  word-wrap: break-word;
  flex: 1;
}

/* Footer */
.orderFooter {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summaryRows {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-sm) * 0.8);
  margin-bottom: var(--spacing-md);
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px);
  font-weight: 500;
  line-height: 1.3;
}

.summaryRow span:last-child {
  font-weight: 700;
  color: var(--text-primary);
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px);
  font-weight: 700;
  padding-top: var(--spacing-md);
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md);
}

/* Responsive */
@media (max-width: 1024px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .orderItems {
    max-height: 42vh;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 4px;
  }
}

@media (max-width: 768px) {
  .subItemName {
    font-size: 9px;
  }
  
  .subItemPrice {
    font-size: 7px;
  }
  
  .subItemTotal {
    font-size: 8px;
  }
  
  .optionText {
    font-size: 9px;
  }
  
  .optionPrice {
    font-size: 7px;
  }
  
  .optionTotal {
    font-size: 8px;
  }
  
  .commentText {
    font-size: 9px;
  }
}



/* إضافة أنماط زر الرجوع */
.backButtonContainer {
  padding: clamp(8px, 1.5vw, 16px);
}

.backButton {
  background: var(--primary-blue);
  color: white;
  border: none;
  border-radius: 8px;
  padding: clamp(12px, 2vw, 16px) clamp(24px, 4vw, 32px);
  font-size: clamp(14px, 1.6vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: 'Cairo', sans-serif;
  width: 100%;
  margin: 0 auto;
  display: block;
}

.backButton:hover {
  background: #025bb5;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.3);
}

.backButton:active {
  transform: translateY(0);
}


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentRight.module.css
============================================================
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentRight.module.css */

.container {
  width: 100%;
  height: 100%;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
  display: flex;
  flex-direction: column;
  padding: 0.8rem;
  font-family: "Cairo", sans-serif;
  gap: 0.6rem;
  min-height: 0;
}

.finishBtn {
  width: 100%;
  height: 50px;
  font-size: 1.2rem;
  font-weight: 700;
  background: #28a745;
  color: white;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.2s ease;
  direction: rtl;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.finishBtn:hover:not(.disabled) {
  background: #218838;
}

.finishBtn.disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.methodsList {
  flex: 1;
  overflow-y: auto;
  padding-right: 0.2rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.6rem;
  align-content: start;
}

.methodItem {
  border: 2px solid #e9ecef;
  border-radius: 8px;
  padding: 0.6rem;
  background: #f8f9fa;
  transition: all 0.3s ease;
  cursor: pointer;
  display: flex;
  flex-direction: column;
  min-height: 60px;
  position: relative;
  user-select: none; /* منع تحديد النص */
}

.methodItem:hover {
  background: #e9ecef;
  border-color: #dee2e6;
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* طريقة الدفع المفعلة */
.methodItem.active {
  background: #e8f5e8;
  border-color: #28a745;
}

.methodItem.active:hover {
  background: #d4edda;
  border-color: #1e7e34;
}

/* طريقة الدفع المحددة للتعديل */
.methodItem.selectedForEdit {
  background: #e8f4fd;
  border-color: #0373ed;
  box-shadow: 0 0 0 2px rgba(3, 115, 237, 0.2);
}

.methodItem.selectedForEdit:hover {
  background: #d1ecf1;
}

/* طريقة الدفع المفعلة والمحددة للتعديل */
.methodItem.active.selectedForEdit {
  background: #d4edda;
  border-color: #0373ed;
  box-shadow: 0 0 0 2px rgba(3, 115, 237, 0.3);
}

/* طريقة دفع بها مبلغ */
.methodItem.hasAmount {
  border-width: 3px;
}

.methodHeader {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  direction: rtl;
  margin-bottom: 0.3rem;
}

.methodCheckbox {
  width: 18px;
  height: 18px;
  cursor: pointer;
  accent-color: #28a745;
  flex-shrink: 0;
}

.methodName {
  font-size: 0.9rem;
  color: #333;
  flex: 1;
  text-align: right;
  line-height: 1.2;
  word-break: break-word;
  font-weight: 600;
}

.methodAmount {
  font-size: 0.8rem;
  color: #28a745;
  font-weight: 700;
  background: rgba(40, 167, 69, 0.15);
  padding: 0.2rem 0.4rem;
  border-radius: 4px;
  text-align: center;
  margin-top: 0.2rem;
  border: 1px solid rgba(40, 167, 69, 0.3);
}

.editIndicator {
  font-size: 0.7rem;
  color: #0373ed;
  font-weight: 600;
  background: rgba(3, 115, 237, 0.1);
  padding: 0.1rem 0.3rem;
  border-radius: 3px;
  text-align: center;
  margin-top: 0.2rem;
  border: 1px solid rgba(3, 115, 237, 0.2);
}

.paymentSummary {
  border-top: 1px solid #e9ecef;
  padding-top: 0.6rem;
  flex-shrink: 0;
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.3rem 0;
  direction: rtl;
  font-size: 0.9rem;
}

.totalPaid {
  color: #28a745;
  font-weight: 700;
  font-size: 1rem;
}

.methodsCount {
  color: #0373ed;
  font-weight: 600;
}

/* تحسينات للشاشات الصغيرة */
@media (max-width: 768px) {
  .methodsList {
    grid-template-columns: 1fr;
  }
  
  .methodName {
    font-size: 0.85rem;
  }
  
  .methodAmount {
    font-size: 0.75rem;
  }
}

/* تحسين للشاشات الواسعة جداً */
@media (min-width: 1400px) {
  .methodsList {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

/* أنماط للأسماء الطويلة */
.methodItem.longName .methodName {
  font-size: 0.8rem;
  line-height: 1.1;
}

/* تحسين التمرير */
.methodsList {
  scrollbar-width: thin;
  scrollbar-color: #ccc #f1f1f1;
}

.methodsList::-webkit-scrollbar {
  width: 6px;
}

.methodsList::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.methodsList::-webkit-scrollbar-thumb {
  background: #ccc;
  border-radius: 3px;
}

.methodsList::-webkit-scrollbar-thumb:hover {
  background: #999;
}


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx
============================================================
// src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx
import React from 'react';
import styles from './styles/PaymentCenter.module.css';

interface PaymentCenterProps {
  totalAmount: number;
  paidAmount: string;
  cashAmount: number;
  remainingForCustomer: number;
  selectedPaymentMethod: string | null;
  onAmountChange: (amount: string) => void;
  onQuickAmountSelect: (amount: number) => void;
  isFirstInput: boolean;
  nonCashTotal: number;
}

const PaymentCenter: React.FC<PaymentCenterProps> = ({
  totalAmount,
  paidAmount,
  cashAmount,
  remainingForCustomer,
  selectedPaymentMethod,
  onAmountChange,
  onQuickAmountSelect,
  isFirstInput,
  nonCashTotal
}) => {
  // التحقق إذا كانت طريقة الدفع المختارة هي الكاش
  const isCashSelected = selectedPaymentMethod?.toLowerCase().includes('كاش') || 
                        selectedPaymentMethod?.toLowerCase().includes('cash');

  const handleKeypadClick = (value: string) => {
    if (value === 'c') {
      onAmountChange('0');
    } else if (value === 'erase') {
      const newValue = paidAmount.slice(0, -1);
      onAmountChange(newValue || '0');
    } else if (value === '.') {
      if (paidAmount === '0' || paidAmount === '0.00' || !paidAmount.includes('.')) {
        onAmountChange(paidAmount === '0' || paidAmount === '0.00' ? '0.' : paidAmount + '.');
      }
    } else {
      // إذا كان الإدخال الأول، ابدأ من الصفر
      if (isFirstInput || paidAmount === '0' || paidAmount === '0.00') {
        onAmountChange(value);
      } else {
        onAmountChange(paidAmount + value);
      }
    }
  };

  // تعديل دالة الأزرار السريعة للجمع
  const handleQuickAmountClick = (amount: number) => {
    const currentAmount = parseFloat(paidAmount) || 0;
    
    // إذا كان الإدخال الأول (قيمة تلقائية)، ابدأ من القيمة المضافة فقط
    if (isFirstInput) {
      onQuickAmountSelect(amount);
    } else {
      // إذا كان مُدخل يدوياً، اجمع على القيمة الحالية
      const newAmount = currentAmount + amount;
      onQuickAmountSelect(newAmount);
    }
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.headerRow}>
        <h2 className={styles.balanceTitle}>
          إجمالي الفاتورة: {totalAmount.toFixed(2)} جنيه
        </h2>
      </div>

      <div className={styles.fieldsRow}>
        <div className={styles.fieldBlock}>
          <label className={styles.label}>المبلغ المتبقي (كاش)</label>
          <div className={styles.remainingBox}>
            {remainingForCustomer.toFixed(2)}
          </div>
        </div>

        <div className={styles.fieldBlock}>
          <label className={styles.label}>المدفوع كاش</label>
          <div className={styles.cashPaidBox}>
            {cashAmount.toFixed(2)}
          </div>
        </div>
      </div>

      <div className={styles.quickButtons}>
        {[5, 10, 15, 20].map(val => (
          <button 
            key={val} 
            className={`${styles.quickBtn} ${!selectedPaymentMethod ? styles.disabled : ''}`}
            onClick={() => handleQuickAmountClick(val)}
            disabled={!selectedPaymentMethod}
          >
            {val} EGP
          </button>
        ))}
      </div>

      <div className={styles.keypad}>
        {[
          ['1','2','3','50'],
          ['4','5','6','100'],
          ['7','8','9','200'],
          ['c','0','.','erase']
        ].map((row, rowIndex) => (
          <div key={rowIndex} className={styles.keypadRow}>
            {row.map(key => (
              <button
                key={key}
                className={`${styles.keypadBtn} ${['50','100','200'].includes(key) ? styles.gray : ''} ${!selectedPaymentMethod ? styles.disabled : ''}`}
                onClick={() => selectedPaymentMethod && (
                  key === 'erase' ? handleKeypadClick('erase') : 
                  ['50','100','200'].includes(key) ? handleQuickAmountClick(parseInt(key)) : 
                  handleKeypadClick(key)
                )}
                disabled={!selectedPaymentMethod}
              >
                {key === 'erase' ? '×' : 
                 key === 'c' ? 'C' : 
                 ['50','100','200'].includes(key) ? `${key} EGP` : key}
              </button>
            ))}
          </div>
        ))}
      </div>

      {!selectedPaymentMethod && (
        <div className={styles.noSelectionMessage}>
          اختر طريقة دفع من القائمة اليمين لبدء الإدخال
        </div>
      )}
    </div>
  );
};

export default PaymentCenter;


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx
============================================================
// src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx
import React from 'react';
import PaymentOrderSummary from './PaymentOrderSummary';
import styles from './styles/PaymentLeft.module.css';

interface PaymentLeftProps {
  orderSummary: any;
  selectedCustomer: any;
  selectedAddress: any;
  orderType: string;
  deliveryCharge: number;
}

const PaymentLeft: React.FC<PaymentLeftProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  orderType,
  deliveryCharge,
}) => {
  return (
    <div className={styles.container}>
        <PaymentOrderSummary 
          orderSummary={orderSummary}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          orderType={orderType}
          deliveryCharge={deliveryCharge} onGoBack={function (): void {
            throw new Error('Function not implemented.');
          } }        />
    </div>
  );
};

export default PaymentLeft;


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx
============================================================
// src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx
import React from 'react';
import { OrderSummary as OrderSummaryType, SubItem } from '../../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import styles from './styles/PaymentOrderSummary.module.css';

interface PaymentOrderSummaryProps {
  orderSummary: OrderSummaryType;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  orderType: string;
  deliveryCharge: number;
    onGoBack: () => void;

}

const PaymentOrderSummary: React.FC<PaymentOrderSummaryProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  deliveryCharge}) => {
  // حساب الإجمالي النهائي
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // دالة عرض SubItem
  const renderSubItem = (subItem: SubItem) => {
    return (
      <div key={subItem.id} className={styles.subItem}>
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
              {subItem.type === 'extra' && '+'}
              {subItem.type === 'without' && '-'}
              {subItem.type === 'option' && '•'}
            </span>
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  // دالة عرض Options
  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  // دالة عرض Notes
  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>💬</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.orderSummary}>
      {/* Header */}
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      {/* Content */}
      <div className={styles.orderContent}>
        {/* Customer Info */}
        {selectedCustomer && (
          <div className={styles.customerInfo}>
            <div className={styles.customerName}>
              👤 {selectedCustomer.name}
              {selectedCustomer.isVIP && <span className={styles.vipBadge}>VIP</span>}
            </div>
            <div className={styles.customerPhone}>
              📞 {selectedCustomer.phone1}
            </div>
            {selectedAddress && selectedAddress.addressLine && (
              <div className={styles.customerAddress}>
                📍 {selectedAddress.addressLine}
                {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
              </div>
            )}
          </div>
        )}

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div className={`${styles.orderItem} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}>
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice.toFixed(2)}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>

              {/* <div className={styles.backButtonContainer}>
        <button className={styles.backButton} onClick={onGoBack}>
          رجوع
        </button>
      </div> */}
      </div>
    </div>
  );
};

export default PaymentOrderSummary;


============================================================
FILE: src/Pages/pos/newSales/components/paymentPopup components/PaymentRight.tsx
============================================================
import React from 'react';
import styles from './styles/PaymentRight.module.css';

interface PaymentMethodData {
  method: string;
  amount: number;
  isSelected: boolean;
}

interface PaymentRightProps {
  availablePaymentMethods: string[];
  selectedPayments: PaymentMethodData[];
  selectedPaymentMethod: string | null;
  onPaymentMethodSelect: (method: string) => void;
  onPaymentMethodToggle: (method: string) => void;
  onFinishPayment: () => void;
  canFinish: boolean;
  totalPaidAllMethods: number;
  totalAmount: number;
  nonCashTotal: number;
  onShowWarning?: (message: string) => void;
}

const PaymentRight: React.FC<PaymentRightProps> = ({
  availablePaymentMethods = [],
  selectedPayments,
  selectedPaymentMethod,
  onPaymentMethodSelect,
  onPaymentMethodToggle,
  onFinishPayment,
  canFinish,
  totalPaidAllMethods,
  totalAmount,
  nonCashTotal,
  onShowWarning
}) => {
  const getPaymentData = (methodName: string) => {
    return selectedPayments.find(payment => payment.method === methodName);
  };

  // دالة لحساب المبلغ الفعلي المساهم في الأوردر لكل طريقة دفع
  const getActualContributionAmount = (method: string, amount: number) => {
    const isCash = method.toLowerCase().includes('كاش') || 
                   method.toLowerCase().includes('cash');
    
    if (!isCash) {
      // طرق الدفع غير الكاش: عرض المبلغ الفعلي فقط
      return Math.min(amount, totalAmount);
    } else {
      // للكاش: عرض المساهمة الفعلية في الأوردر فقط
      const actualCashContribution = Math.max(0, totalAmount - nonCashTotal);
      return Math.min(amount, actualCashContribution);
    }
  };

  // دالة النقر على الكارد مع التحقق من الحد الأقصى
  const handleCardClick = (method: string) => {
    const paymentData = getPaymentData(method);
    const isCurrentlyActive = paymentData?.isSelected || false;
    const isCash = method.toLowerCase().includes('كاش') || 
                   method.toLowerCase().includes('cash');
    
    if (!isCurrentlyActive && !isCash) {
      // تحقق من عدد الطرق النشطة غير النقدية
      const activeNonCashCount = selectedPayments.filter(p => {
        const isNonCash = !(p.method.toLowerCase().includes('كاش') || 
                           p.method.toLowerCase().includes('cash'));
        return isNonCash && p.isSelected && p.amount > 0;
      }).length;
      
      if (activeNonCashCount >= 2) {
        onShowWarning?.('لا يمكن استخدام أكثر من وسيلتي دفع غير نقدية');
        return;
      }
    }
    
    if (!isCurrentlyActive) {
      onPaymentMethodToggle(method);
      onPaymentMethodSelect(method);
    } else {
      onPaymentMethodSelect(method);
    }
  };

  // دالة تغيير الـ checkbox
  const handleCheckboxChange = (method: string, event: React.ChangeEvent<HTMLInputElement>) => {
    event.stopPropagation();
    
    const isCash = method.toLowerCase().includes('كاش') || 
                   method.toLowerCase().includes('cash');
    const paymentData = getPaymentData(method);
    const isCurrentlyActive = paymentData?.isSelected || false;
    
    if (!isCurrentlyActive && !isCash) {
      // تحقق من عدد الطرق النشطة غير النقدية
      const activeNonCashCount = selectedPayments.filter(p => {
        const isNonCash = !(p.method.toLowerCase().includes('كاش') || 
                           p.method.toLowerCase().includes('cash'));
        return isNonCash && p.isSelected && p.amount > 0;
      }).length;
      
      if (activeNonCashCount >= 2) {
        onShowWarning?.('لا يمكن استخدام أكثر من وسيلتي دفع غير نقدية');
        return;
      }
    }
    
    onPaymentMethodToggle(method);
    
    const willBeSelected = !isCurrentlyActive;
    
    if (!willBeSelected && selectedPaymentMethod === method) {
      const otherActiveMethod = selectedPayments.find(p => 
        p.method !== method && p.isSelected && p.amount > 0
      );
      if (otherActiveMethod) {
        onPaymentMethodSelect(otherActiveMethod.method);
      } else {
        const cashMethod = selectedPayments.find(p => 
          (p.method.toLowerCase().includes('كاش') || p.method.toLowerCase().includes('cash')) && 
          p.method !== method &&
          p.isSelected
        );
        if (cashMethod) {
          onPaymentMethodSelect(cashMethod.method);
        }
      }
    }
  };

  const isLongName = (name: string) => name.length > 15;

  if (availablePaymentMethods.length === 0) {
    return (
      <div className={styles.container}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100%',
          fontFamily: 'Cairo, sans-serif',
          color: '#666'
        }}>
          جاري تحميل طرق الدفع...
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <button 
        className={`${styles.finishBtn} ${!canFinish ? styles.disabled : ''}`}
        onClick={onFinishPayment}
        disabled={!canFinish}
      >
        إنهاء الدفع
      </button>
      
      <div className={styles.methodsList}>
        {availablePaymentMethods.map((method) => {
          const paymentData = getPaymentData(method);
          const amount = paymentData?.amount || 0;
          const isActive = paymentData?.isSelected || false;
          const isSelectedForEdit = selectedPaymentMethod === method;
          const longName = isLongName(method);
          
          // حساب المبلغ الفعلي المساهم في الأوردر
          const actualContribution = getActualContributionAmount(method, amount);
          const hasAmount = actualContribution > 0;
          
          // التحقق إذا كان كاش وله مبلغ أكبر من المساهمة (أي له فكة)
          const isCash = method.toLowerCase().includes('كاش') || 
                         method.toLowerCase().includes('cash');
          const hasChange = isCash && amount > actualContribution;
          
          return (
            <div 
              key={method} 
              className={`${styles.methodItem} ${isActive ? styles.active : ''} ${isSelectedForEdit ? styles.selectedForEdit : ''} ${hasAmount ? styles.hasAmount : ''} ${longName ? styles.longName : ''}`}
              onClick={() => handleCardClick(method)}
            >
              <div className={styles.methodHeader}>
                <input
                  type="checkbox"
                  checked={isActive}
                  onChange={(e) => handleCheckboxChange(method, e)}
                  className={styles.methodCheckbox}
                />
                <span className={styles.methodName}>{method}</span>
              </div>
              
              {hasAmount && (
                <div className={styles.methodAmount}>
                  {actualContribution.toFixed(2)} جنيه
                </div>
              )}
              
              {isSelectedForEdit && (
                <div className={styles.editIndicator}>
                  يتم التعديل عليها الآن
                </div>
              )}
            </div>
          );
        })}
      </div>

      <div className={styles.paymentSummary}>
        <div className={styles.summaryRow}>
          <span>طرق الدفع المستخدمة:</span>
          <span className={styles.methodsCount}>
            {selectedPayments.filter(p => p.isSelected && getActualContributionAmount(p.method, p.amount) > 0).length}
          </span>
        </div>
        {/* <div className={styles.summaryRow}>
          <span className={styles.limitText}>
            الحد الأقصى: وسيلتان غير نقدية + كاش
          </span>
        </div> */}
      </div>
    </div>
  );
};

export default PaymentRight;


============================================================
FILE: src/Pages/pos/newSales/components/ui/Button.tsx
============================================================
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;

============================================================
FILE: src/Pages/pos/newSales/components/ui/ChipView.tsx
============================================================
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;

============================================================
FILE: src/Pages/pos/newSales/components/ui/Dropdown.tsx
============================================================
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;

============================================================
FILE: src/Pages/pos/newSales/components/ui/EditText.tsx
============================================================
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;

============================================================
FILE: src/Pages/pos/newSales/components/ui/SearchView.tsx
============================================================
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;

============================================================
FILE: src/Pages/pos/newSales/components/ActionButtons.tsx
============================================================
// src/Pages/pos/newSales/components/ActionButtons.tsx
import React from 'react';

interface ActionButtonsProps {
  selectedChips: string[];
  onChipClick: (chipType: string) => void;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  onExtraClick: () => void;
  onWithoutClick: () => void;
  searchQuery: string;
  onSearchChange: (query: string) => void;
    hasSelectedOrderItem: boolean; // إضافة جديدة

}

const ActionButtons: React.FC<ActionButtonsProps> = ({
  selectedChips,
  onChipClick,
  isExtraMode,
  isWithoutMode,
  onExtraClick,
  onWithoutClick,
  searchQuery,
  onSearchChange,
  hasSelectedOrderItem

}) => {
  return (
    <div className="action-buttons-bar">
      <div className="action-chips">
        <button 
          className={`action-chip extra ${selectedChips.includes('extra') || isExtraMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onExtraClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_addcircle.svg" alt="" />
          <span>Extra</span>
        </button>
        <button 
          className={`action-chip without ${selectedChips.includes('without') || isWithoutMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onWithoutClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_removecircle.svg" alt="" />
          <span>Without</span>
        </button>
        <button 
          className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
          onClick={() => onChipClick('offer')}
        >
          <img src="/images/img_tags.svg" alt="" />
          <span>Offer</span>
        </button>
      </div>
      
      <div className="search-container">
        <img src="/images/img_search01.svg" alt="search" className="search-icon" />
        <input
          type="text"
          placeholder="Search"
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          className="search-input"
        />
        <button className="filter-button">
          <img src="/images/img_group_7.svg" alt="Filter" />
        </button>
      </div>
    </div>
  );
};

export default ActionButtons;


============================================================
FILE: src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx
============================================================
// src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  TextField, Button, Box, Typography, Card, CardContent,
  Radio, RadioGroup, FormControlLabel, Divider, IconButton
} from '@mui/material';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import { Edit as EditIcon, LocationOn as LocationIcon } from '@mui/icons-material';
import CustomerForm from '../../customers/components/CustomerForm';

interface CustomerDetailsPopupProps {
  open: boolean;
  customer: Customer | null;
  onClose: () => void;
  onSelectCustomer: (customer: Customer, address: CustomerAddress) => void;
}

const CustomerDetailsPopup: React.FC<CustomerDetailsPopupProps> = ({
  open,
  customer,
  onClose,
  onSelectCustomer
}) => {
  const [selectedAddressId, setSelectedAddressId] = useState<string>('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [zones, setZones] = useState<any[]>([]);
  const [updatedCustomer, setUpdatedCustomer] = useState<Customer | null>(null);

  useEffect(() => {
    if (customer) {
      setUpdatedCustomer(customer);
      setSelectedAddressId('');
    }
  }, [customer]);

  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    if (open) {
      loadZones();
    }
  }, [open]);

  const handleAddressSelect = (addressId: string) => {
    setSelectedAddressId(addressId);
  };

  const handleConfirmSelection = () => {
    if (updatedCustomer && selectedAddressId) {
      const selectedAddress = updatedCustomer.addresses.find(
        addr => addr.id === selectedAddressId
      );
      if (selectedAddress) {
        onSelectCustomer(updatedCustomer, selectedAddress);
        onClose();
      }
    }
  };

  const handleEditCustomer = () => {
    setShowEditForm(true);
  };

  const handleCustomerUpdate = async (data: any) => {
    try {
      const updated = await customersApi.update(data);
      setUpdatedCustomer(updated);
      setShowEditForm(false);
    } catch (error) {
      console.error('Error updating customer:', error);
    }
  };

  const getZoneName = (zoneId: string): string => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.name : 'غير محدد';
  };

  const getDeliveryCharge = (zoneId: string): number => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.deliveryCharge : 0;
  };

  if (!updatedCustomer) return null;

  return (
    <>
      <Dialog 
        open={open && !showEditForm} 
        onClose={onClose} 
        maxWidth="md" 
        fullWidth
        PaperProps={{
          style: { minHeight: '600px' }
        }}
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6">بيانات العميل</Typography>
            <IconButton onClick={handleEditCustomer} color="primary">
              <EditIcon />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          {/* Customer Basic Info */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                المعلومات الأساسية
              </Typography>
              <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 2 }}>
                <TextField
                  label="الاسم"
                  value={updatedCustomer.name}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                <TextField
                  label="الهاتف الأساسي"
                  value={updatedCustomer.phone1}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                {updatedCustomer.phone2 && (
                  <TextField
                    label="الهاتف الثاني"
                    value={updatedCustomer.phone2}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
                {updatedCustomer.phone3 && (
                  <TextField
                    label="الهاتف الثالث"
                    value={updatedCustomer.phone3}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
              </Box>
              
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                {updatedCustomer.isVIP && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: 'gold', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    عميل VIP
                  </Typography>
                )}
                {updatedCustomer.isBlocked && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: '#f44336', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    محظور
                  </Typography>
                )}
              </Box>
            </CardContent>
          </Card>

          <Divider sx={{ my: 2 }} />

          {/* Address Selection */}
          <Typography variant="h6" sx={{ mb: 2 }}>
            اختر العنوان للطلب ({updatedCustomer.addresses.length})
          </Typography>
          
          <RadioGroup
            value={selectedAddressId}
            onChange={(e) => handleAddressSelect(e.target.value)}
          >
            {updatedCustomer.addresses.map((address) => (
              <FormControlLabel
                key={address.id}
                value={address.id}
                control={<Radio />}
                label={
                  <Card 
                    sx={{ 
                      width: '100%', 
                      ml: 1,
                      border: selectedAddressId === address.id ? '2px solid #1976d2' : '1px solid #e0e0e0'
                    }}
                  >
                    <CardContent sx={{ py: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                        <LocationIcon color="primary" />
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body1" fontWeight="bold">
                            {address.addressLine}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            المنطقة: {getZoneName(address.zoneId)}
                          </Typography>
                          <Typography variant="body2" color="primary">
                            رسوم التوصيل: {getDeliveryCharge(address.zoneId)} جنيه
                          </Typography>
                          
                          {address.floor && (
                            <Typography variant="body2" color="text.secondary">
                              الدور: {address.floor}
                            </Typography>
                          )}
                          {address.apartment && (
                            <Typography variant="body2" color="text.secondary">
                              الشقة: {address.apartment}
                            </Typography>
                          )}
                          {address.landmark && (
                            <Typography variant="body2" color="text.secondary">
                              علامة مميزة: {address.landmark}
                            </Typography>
                          )}
                          {address.notes && (
                            <Typography variant="body2" color="text.secondary">
                              ملاحظات: {address.notes}
                            </Typography>
                          )}
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                }
                sx={{ 
                  alignItems: 'flex-start',
                  mb: 1,
                  ml: 0,
                  mr: 0
                }}
              />
            ))}
          </RadioGroup>

          {updatedCustomer.addresses.length === 0 && (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                لا توجد عناوين مسجلة لهذا العميل
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            إلغاء
          </Button>
          <Button 
            variant="contained" 
            onClick={handleConfirmSelection}
            disabled={!selectedAddressId}
          >
            حفظ واختيار
          </Button>
        </DialogActions>
      </Dialog>

      {/* Customer Edit Form */}
      {showEditForm && (
        <CustomerForm
          open={showEditForm}
          mode="edit"
          initialValues={updatedCustomer}
          onClose={() => setShowEditForm(false)}
          onSubmit={handleCustomerUpdate}
        />
      )}
    </>
  );
};

export default CustomerDetailsPopup;


============================================================
FILE: src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx
============================================================
// src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OrderItem } from '../types/PosSystem';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import styles from '../styles/OrderItemDetailsPopup.module.css';

interface OrderItemDetailsPopupProps {
  orderItem: OrderItem | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdateItem: (itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => void;
  onRemoveItem: (itemId: string) => void;
}

const OrderItemDetailsPopup: React.FC<OrderItemDetailsPopupProps> = ({
  orderItem,
  isOpen,
  onClose,
  onUpdateItem
}) => {
  const [quantity, setQuantity] = useState(1);
  const [notes, setNotes] = useState('');
  const [discountPercentage, setDiscountPercentage] = useState(0);
  const [discountAmount, setDiscountAmount] = useState(0);
  
  // States مؤقتة للتحكم في التحديث
  const [tempDiscountPercentage, setTempDiscountPercentage] = useState('0');
  const [tempDiscountAmount, setTempDiscountAmount] = useState('0');
  
  // Refs للـ inputs
  const percentageInputRef = useRef<HTMLInputElement>(null);
  const amountInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (orderItem) {
      setQuantity(orderItem.quantity);
      setNotes(orderItem.notes || '');
      const currentDiscount = orderItem.discountAmount || 0;
      const baseTotal = orderItem.selectedPrice.price * orderItem.quantity;
      const currentDiscountPercentage = baseTotal > 0 ? (currentDiscount / baseTotal) * 100 : 0;
      setDiscountAmount(currentDiscount);
      setDiscountPercentage(currentDiscountPercentage);
      setTempDiscountAmount(currentDiscount.toFixed(2));
      setTempDiscountPercentage(currentDiscountPercentage.toFixed(1));
    }
  }, [orderItem]);

  if (!isOpen || !orderItem) return null;

  const unitPrice = orderItem.selectedPrice.price;
  const subItemsTotal = orderItem.subItems?.reduce((sum, item) => sum + item.price, 0) || 0;
  const baseTotal = (unitPrice * quantity) + subItemsTotal;
  const finalTotal = baseTotal - discountAmount;

  const handleQuantityChange = (change: number) => {
    const newQuantity = Math.max(1, quantity + change);
    setQuantity(newQuantity);
    
    const newBaseTotal = (unitPrice * newQuantity) + subItemsTotal;
    const newDiscountAmount = (newBaseTotal * discountPercentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير نسبة الخصم
  const handleDiscountPercentageChange = (value: number) => {
    const percentage = Math.max(0, Math.min(100, value));
    setDiscountPercentage(percentage);
    const newDiscountAmount = (baseTotal * percentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير قيمة الخصم
  const handleDiscountAmountChange = (value: number) => {
    const amount = Math.max(0, Math.min(baseTotal, value));
    setDiscountAmount(amount);
    const newDiscountPercentage = baseTotal > 0 ? (amount / baseTotal) * 100 : 0;
    setDiscountPercentage(newDiscountPercentage);
    setTempDiscountPercentage(newDiscountPercentage.toFixed(1));
  };

  // معالج Focus للنسبة المئوية
  const handlePercentageFocus = () => {
    if (percentageInputRef.current) {
      percentageInputRef.current.select();
    }
  };

  // معالج Focus لقيمة الخصم
  const handleAmountFocus = () => {
    if (amountInputRef.current) {
      amountInputRef.current.select();
    }
  };

  // معالج Blur للنسبة المئوية
  const handlePercentageBlur = () => {
    const value = parseFloat(tempDiscountPercentage) || 0;
    handleDiscountPercentageChange(value);
  };

  // معالج Blur لقيمة الخصم
  const handleAmountBlur = () => {
    const value = parseFloat(tempDiscountAmount) || 0;
    handleDiscountAmountChange(value);
  };

  // معالج Enter للنسبة المئوية
  const handlePercentageKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountPercentage) || 0;
      handleDiscountPercentageChange(value);
      percentageInputRef.current?.blur();
    }
  };

  // معالج Enter لقيمة الخصم
  const handleAmountKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountAmount) || 0;
      handleDiscountAmountChange(value);
      amountInputRef.current?.blur();
    }
  };

  const handleConfirm = () => {
    onUpdateItem(orderItem.id, {
      quantity,
      notes,
      discountPercentage,
      discountAmount
    });
    onClose();
  };

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.orderItemDetails}>
        
        {/* سطر واحد فقط: اسم المنتج + السعر + الكمية + الإجمالي */}
        <div className={styles.mainRow}>
          {/* اسم المنتج والسعر على اليمين */}
          <div className={styles.productInfo}>
            <span className={styles.productName}>{orderItem.product.nameArabic}</span>
            {orderItem.product.hasMultiplePrices && (
              <span className={styles.productSize}> - {orderItem.selectedPrice.nameArabic}</span>
            )}
            <span className={styles.unitPrice}>{unitPrice} EGP</span>
          </div>

          {/* الكمية في النص */}
          <div className={styles.quantityControls}>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(-1)}
              disabled={quantity <= 1}
            >
              <RemoveIcon />
            </button>
            <span className={styles.quantityDisplay}>{quantity}</span>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(1)}
            >
              <AddIcon />
            </button>
          </div>
          
          {/* الإجمالي على الشمال */}
          <div className={styles.totalDisplay}>
            <span className={styles.totalAmount}>{finalTotal.toFixed(2)} EGP</span>
          </div>
        </div>

        {/* حقل الملاحظات */}
        <div className={styles.notesSection}>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="ملاحظات الصنف..."
            className={styles.notesInput}
            rows={3}
          />
        </div>

        {/* قسم الخصم */}
        <div className={styles.discountSection}>
          <div className={styles.discountInputs}>
            <div className={styles.discountField}>
              <label>نسبة الخصم %</label>
              <input
                ref={percentageInputRef}
                type="number"
                value={tempDiscountPercentage}
                onChange={(e) => setTempDiscountPercentage(e.target.value)}
                onFocus={handlePercentageFocus}
                onBlur={handlePercentageBlur}
                onKeyDown={handlePercentageKeyDown}
                min="0"
                max="100"
                step="0.1"
                className={styles.discountInput}
              />
            </div>
            
            <div className={styles.discountField}>
              <label>قيمة الخصم</label>
              <input
                ref={amountInputRef}
                type="number"
                value={tempDiscountAmount}
                onChange={(e) => setTempDiscountAmount(e.target.value)}
                onFocus={handleAmountFocus}
                onBlur={handleAmountBlur}
                onKeyDown={handleAmountKeyDown}
                min="0"
                max={baseTotal}
                step="0.01"
                className={styles.discountInput}
              />
            </div>
          </div>
        </div>

        {/* أزرار التأكيد والإلغاء */}
        <div className={styles.actionButtons}>
          <button className={styles.confirmBtn} onClick={handleConfirm}>
            تأكيد
          </button>
          <button className={styles.cancelBtn} onClick={onClose}>
            إلغاء
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderItemDetailsPopup;


============================================================
FILE: src/Pages/pos/newSales/components/OrderManager.tsx
============================================================
// src/Pages/pos/newSales/components/OrderManager.tsx - الكود الكامل المُحدث
import React from 'react';
import { PosProduct, PosPrice, SelectedOption, OrderItem, SubItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface OrderManagerProps {
  keypadValue: string;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  selectedOrderItemId: string | null;
  onOrderAdd: (orderItem: OrderItem) => void;
  onOrderUpdate: (itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => void;
  onModeReset: () => void;
  onLoadNormalProducts: () => void;
}

export const useOrderManager = ({
  keypadValue,
  isExtraMode,
  isWithoutMode,
  selectedOrderItemId,
  onOrderAdd,
  onOrderUpdate,
  onModeReset,
  onLoadNormalProducts
}: OrderManagerProps) => {
  
  const addToOrder = React.useCallback((
    product: PosProduct, 
    price: PosPrice, 
    selectedOptions: SelectedOption[]
  ) => {
  const quantity = parseFloat(keypadValue) || 1; // استخدام parseFloat بدلاً من parseInt
    const basePrice = posService.calculateTotalPrice(price.price, selectedOptions, quantity);
    
    // إذا كان Extra أو Without mode مع منتج محدد
    if ((isExtraMode || isWithoutMode) && selectedOrderItemId) {
      const subItem: SubItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        type: isExtraMode ? 'extra' : 'without',
        name: `${product.nameArabic}${price.nameArabic ? ` - ${price.nameArabic}` : ''}`,
        quantity,
        price: isWithoutMode ? 0 : basePrice,
        productId: product.id
      };
      
      onOrderUpdate(selectedOrderItemId, 'addSubItem', subItem);
    } else {
      // إضافة منتج جديد (سواء عادي أو Extra/Without منفصل)
      const subItems: SubItem[] = [];
      
      // تحويل الخيارات إلى sub-items
      selectedOptions.forEach(option => {
        subItems.push({
          id: `option_${option.itemId}_${Date.now()}`,
          type: 'option',
          name: option.itemName,
          quantity: option.quantity,
          price: option.extraPrice * option.quantity,
          isRequired: true,
          groupId: option.groupId
        });
      });
      
      const orderItem: OrderItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        product,
        selectedPrice: price,
        quantity,
        totalPrice: basePrice,
        subItems: subItems.length > 0 ? subItems : undefined,
        // إضافة كمنتج Extra/Without منفصل إذا لم يكن هناك منتج محدد
        isExtra: isExtraMode && !selectedOrderItemId,
        isWithout: isWithoutMode && !selectedOrderItemId,
      };

      onOrderAdd(orderItem);
    }
    
    onModeReset();
    onLoadNormalProducts();
  }, [
    keypadValue, 
    isExtraMode, 
    isWithoutMode, 
    selectedOrderItemId, 
    onOrderAdd,
    onOrderUpdate,
    onModeReset, 
    onLoadNormalProducts
  ]);

  const removeSubItem = React.useCallback((orderItemId: string, subItemId: string) => {
    onOrderUpdate(orderItemId, 'removeSubItem', subItemId);
  }, [onOrderUpdate]);

  return { addToOrder, removeSubItem };
};


============================================================
FILE: src/Pages/pos/newSales/components/OrderSummary.tsx
============================================================
// src/Pages/pos/newSales/components/OrderSummary.tsx - تصحيح مشكلة إغلاق الـ dropdown
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { OrderSummary as OrderSummaryType, OrderItem, SubItem } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import CustomerDetailsPopup from './CustomerDetailsPopup';
import CustomerForm from '../../customers/components/CustomerForm';
import styles from '../styles/OrderSummary.module.css';
import PaymentPopup from './PaymentPopup';

interface OrderSummaryProps {
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: OrderItem) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  readOnly: boolean;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick,
  selectedCustomer,
  selectedAddress,
  onCustomerSelect,
  orderType,
  onDeliveryChargeChange,
  readOnly = false // إضافة جديدة

}) => {
  const [selectedSubItemId, setSelectedSubItemId] = useState<string | null>(null);
  const [phoneInput, setPhoneInput] = useState('');
  const [searchResults, setSearchResults] = useState<Customer[]>([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [showCustomerForm, setShowCustomerForm] = useState(false);
  const [showCustomerDetails, setShowCustomerDetails] = useState(false);
  const [selectedCustomerForDetails, setSelectedCustomerForDetails] = useState<Customer | null>(null);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [zones, setZones] = useState<any[]>([]);
  const [selectedResultIndex, setSelectedResultIndex] = useState(-1);
  const [searchCache, setSearchCache] = useState<{[key: string]: Customer[]}>({});
  const [inputHasFocus, setInputHasFocus] = useState(false); // إضافة حالة التركيز
  
  // استخدام useRef بدلاً من state للمتغيرات المساعدة
  const searchDebounceTimer = useRef<NodeJS.Timeout | null>(null);
  const searchAbortController = useRef<AbortController | null>(null);
  const lastSearchQuery = useRef<string>('');
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
const [showPaymentPopup, setShowPaymentPopup] = useState(false);

  // تحميل المناطق عند بدء التشغيل
  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    loadZones();
  }, []);

  // حساب رسوم التوصيل عند تغيير العنوان أو نوع الطلب
  useEffect(() => {
    if (orderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      const zone = zones.find(z => z.id === selectedAddress.zoneId);
      const charge = zone ? zone.deliveryCharge : 0;
      setDeliveryCharge(charge);
      onDeliveryChargeChange(charge);
    } else {
      setDeliveryCharge(0);
      onDeliveryChargeChange(0);
    }
  }, [orderType, selectedAddress, zones, onDeliveryChargeChange]);

  // دالة البحث المصححة
  const searchCustomers = useCallback(async (query: string): Promise<Customer[]> => {
    // التحقق من الكاش
    if (searchCache[query]) {
      return searchCache[query];
    }

    // إلغاء البحث السابق
    if (searchAbortController.current) {
      searchAbortController.current.abort();
    }

    const newController = new AbortController();
    searchAbortController.current = newController;

    try {
      const results = await customersApi.searchByPhone(query);
      
      // حفظ في الكاش
      setSearchCache(prev => ({
        ...prev,
        [query]: results
      }));
      
      return results;
    } catch (error: any) {
      if (error.name === 'AbortError') {
        throw error;
      }
      console.error('Error searching customers:', error);
      throw error;
    }
  }, [searchCache]);

  // useEffect للبحث مع تحسين عرض الـ dropdown
  useEffect(() => {
    // إلغاء المؤقت السابق
    if (searchDebounceTimer.current) {
      clearTimeout(searchDebounceTimer.current);
    }

    const query = phoneInput.trim();
    
    // إذا النص فاضي، امسح النتائج ولكن لا تُخفي الـ dropdown إذا كان الـ input له focus
    if (!query) {
      setSearchResults([]);
      if (!inputHasFocus) {
        setShowDropdown(false);
      }
      setSelectedResultIndex(-1);
      setIsSearching(false);
      return;
    }

    // إذا النص أقل من 3 أحرف، ما تبحثش ولكن أظهر رسالة
    if (query.length < 3) {
      setSearchResults([]);
      setSelectedResultIndex(-1);
      // أظهر الـ dropdown مع رسالة "اكتب 3 أحرف على الأقل" إذا كان الـ input له focus
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // إذا هو نفس البحث السابق والنتائج موجودة، أظهر النتائج فقط
    if (query === lastSearchQuery.current && searchResults.length >= 0) {
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // بدء البحث مع تأخير
    const performSearch = async () => {
      // التأكد إن النص لسه نفسه (مش اتغير أثناء التأخير)
      if (phoneInput.trim() !== query) {
        return;
      }

      setIsSearching(true);
      lastSearchQuery.current = query;
      
      try {
        const results = await searchCustomers(query);
        
        // التأكد إن النص لسه نفسه بعد البحث
        if (phoneInput.trim() === query) {
          setSearchResults(results);
          // أظهر الـ dropdown فقط إذا كان الـ input له focus أو كان مفتوح من قبل
          if (inputHasFocus || showDropdown) {
            setShowDropdown(true);
          }
          setSelectedResultIndex(-1);
        }
      } catch (error: any) {
        if (error.name !== 'AbortError') {
          console.error('Search failed:', error);
          // عرض النتائج الفارغة فقط إذا النص لسه نفسه والـ input له focus
          if (phoneInput.trim() === query && inputHasFocus) {
            setSearchResults([]);
            setShowDropdown(true);
          }
        }
      } finally {
        // إيقاف مؤشر التحميل فقط إذا النص لسه نفسه
        if (phoneInput.trim() === query) {
          setIsSearching(false);
        }
      }
    };

    // تأخير البحث 500ms
    searchDebounceTimer.current = setTimeout(performSearch, 500);

    // تنظيف المؤقت عند التغيير
    return () => {
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, [phoneInput, searchCustomers, inputHasFocus, showDropdown, searchResults.length]);

  // إغلاق الـ dropdown عند الضغط خارجه
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        setInputHasFocus(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // تنظيف عند إلغاء المكون
  useEffect(() => {
    return () => {
      if (searchAbortController.current) {
        searchAbortController.current.abort();
      }
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, []);

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setPhoneInput(value);
    onCustomerNameChange(value);
    
    // إعادة تعيين الاختيار عند تغيير النص
    setSelectedResultIndex(-1);
    
    // أظهر الـ dropdown عند الكتابة
    if (value.trim().length > 0) {
      setShowDropdown(true);
    }
  }, [onCustomerNameChange]);

  // معالج Focus للـ input
  const handleInputFocus = useCallback(() => {
    setInputHasFocus(true);
    // أظهر الـ dropdown إذا كان هناك نص أو نتائج
    if (phoneInput.trim().length > 0 || searchResults.length > 0) {
      setShowDropdown(true);
    }
  }, [phoneInput, searchResults.length]);

  const canOpenPayment = orderSummary.items.length > 0;

  // معالج Blur للـ input
  const handleInputBlur = useCallback(() => {
    // تأخير إخفاء الـ dropdown للسماح بالنقر على النتائج
    setTimeout(() => {
      setInputHasFocus(false);
    }, 200);
  }, []);

  // معالج Enter محسن

    const handleCustomerSelect = useCallback((customer: Customer) => {
    setSelectedCustomerForDetails(customer);
    setShowCustomerDetails(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);

const handleKeyDown = useCallback(async (e: React.KeyboardEvent<HTMLInputElement>) => {
  if (showDropdown && searchResults.length > 0) {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedResultIndex(prev => 
          prev < searchResults.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedResultIndex(prev => prev > 0 ? prev - 1 : -1);
        break;
      case 'Enter':
        e.preventDefault();
        if (isSearching) {
          return;
        }
        // اختيار فقط إذا كان هناك عنصر محدد بالأسهم
        if (selectedResultIndex >= 0 && selectedResultIndex < searchResults.length) {
          handleCustomerSelect(searchResults[selectedResultIndex]);
        } else {
          // إذا مفيش اختيار بالأسهم، تحقق من وجود مطابقة تامة
          const query = phoneInput.trim();
          const exactMatch = searchResults.find(customer => 
            customer.phone1 === query || 
            customer.phone2 === query ||
            customer.phone3 === query ||
            customer.phone4 === query
          );
          
          if (!exactMatch) {
            // مفيش مطابقة تامة، افتح dialog الإضافة
            setShowCustomerForm(true);
            setShowDropdown(false);
          }
        }
        break;
      case 'Escape':
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        inputRef.current?.blur();
        break;
    }
  } else if (e.key === 'Enter') {
    e.preventDefault();
    
    const query = phoneInput.trim();
    if (query.length >= 3) {
      if (isSearching) {
        return;
      }

      setIsSearching(true);
      try {
        const results = await searchCustomers(query);
        
        if (results.length > 0) {
          // تحقق من وجود مطابقة تامة
          const exactMatch = results.find(customer => 
            customer.phone1 === query || 
            customer.phone2 === query ||
            customer.phone3 === query ||
            customer.phone4 === query
          );
          
          setSearchResults(results);
          setShowDropdown(true);
          setSelectedResultIndex(-1);
          
          // إذا مفيش مطابقة تامة، افتح dialog الإضافة كمان
          if (!exactMatch) {
            setShowCustomerForm(true);
          }
        } else {
          setShowCustomerForm(true); // مفيش نتائج، افتح عميل جديد
        }
      } catch (error) {
        console.error('Immediate search failed:', error);
        setShowCustomerForm(true);
      } finally {
        setIsSearching(false);
      }
    }
  }
}, [showDropdown, searchResults, selectedResultIndex, phoneInput, isSearching, searchCustomers, handleCustomerSelect]);





  const handleCustomerDetailsSelect = useCallback((customer: Customer, address: CustomerAddress) => {
    onCustomerSelect(customer, address);
    
    // إفراغ حقل البحث
    setPhoneInput('');
    setShowCustomerDetails(false);
    
    // إخفاء الـ dropdown
    setShowDropdown(false);
    setSearchResults([]);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, [onCustomerSelect]);

  const handleAddCustomerClick = useCallback(() => {
    setShowCustomerForm(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);

  const handleCustomerFormSubmit = useCallback(async (data: any) => {
    try {
      const newCustomer = await customersApi.add(data);
      if (newCustomer.addresses.length > 0) {
        onCustomerSelect(newCustomer, newCustomer.addresses[0]);
        // إفراغ حقل البحث
        setPhoneInput('');
      }
      setShowCustomerForm(false);
      
      // إخفاء الـ dropdown
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    } catch (error) {
      console.error('Error creating customer:', error);
    }
  }, [onCustomerSelect]);

  // إضافة معالج إغلاق نموذج العميل
  const handleCustomerFormClose = useCallback(() => {
    setShowCustomerForm(false);
  }, []);

  // إضافة معالج إغلاق تفاصيل العميل
  const handleCustomerDetailsClose = useCallback(() => {
    setShowCustomerDetails(false);
  }, []);

  useEffect(() => {
    if (selectedCustomer) {
      // إفراغ حقل البحث عند اختيار عميل فقط
      setPhoneInput('');
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    }
  }, [selectedCustomer]);

  // حساب الإجمالي النهائي
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // دوال العرض
  const renderSubItem = (subItem: SubItem, orderItemId: string) => {
    const canDelete = subItem.type === 'extra' || subItem.type === 'without';
    const isSelected = selectedSubItemId === subItem.id && canDelete;
    
    return (
      <div 
        key={subItem.id} 
        className={`${styles.subItem} ${isSelected ? styles.selectedSubItem : ''}`}
        onClick={(e) => {
          e.stopPropagation();
          
          if (canDelete) {
            const rect = e.currentTarget.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            
            if (isSelected && clickX <= 30) {
              onRemoveSubItem(orderItemId, subItem.id);
              setSelectedSubItemId(null);
            } else {
              setSelectedSubItemId(isSelected ? null : subItem.id);
            }
          }
        }}
        style={{
          cursor: canDelete ? 'pointer' : 'default'
        }}
      >
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            {!isSelected && (
              <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
                {subItem.type === 'extra' && '+'}
                {subItem.type === 'without' && '-'}
                {subItem.type === 'option' && '•'}
              </span>
            )}
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>💬</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  // تحديد محتوى الـ dropdown
  const renderDropdownContent = () => {
    const query = phoneInput.trim();
    
    if (isSearching) {
      return (
        <div className={styles.searchingMessage}>
          <div className={styles.loadingSpinner}></div>
          <span>جاري البحث...</span>
        </div>
      );
    }
    
    if (query.length < 3) {
      return (
        <div className={styles.minLengthMessage}>
          <span>اكتب 3 أرقام على الأقل للبحث</span>
        </div>
      );
    }
    
    if (searchResults.length > 0) {
      return (
        <>
          <div className={styles.dropdownHeader}>
            <span>نتائج البحث ({searchResults.length})</span>
          </div>
          {searchResults.map((customer, index) => (
            <div
              key={customer.id}
              className={`${styles.customerOption} ${
                index === selectedResultIndex ? styles.selectedOption : ''
              }`}
              onClick={() => handleCustomerSelect(customer)}
            >
              <div className={styles.customerInfo}>
                <div className={styles.customerName}>{customer.name}</div>
                <div className={styles.customerPhone}>
                  {customer.phone1}
                  {customer.phone2 && ` - ${customer.phone2}`}
                </div>
                <div className={styles.customerDetails}>
                  {customer.addresses.length} عنوان
                  {customer.isVIP && ' • VIP'}
                  {customer.isBlocked && ' • محظور'}
                </div>
              </div>
            </div>
          ))}
        </>
      );
    }
    
    return (
      <div className={styles.noResults}>
        <span>لا توجد نتائج لهذا الرقم</span>
        <button 
          className={styles.addNewCustomerBtn}
          onClick={handleAddCustomerClick}
          disabled={isSearching}
        >
          إضافة عميل جديد
        </button>
      </div>
    );
  };


  const shouldShowAllButtons = orderType !== 'Takeaway';
const shouldShowPayOnly = orderType === 'Takeaway';

  return (
    <aside className={styles.orderSummary}>
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      <div className={styles.orderContent}>
        {/* Customer Search Input with Enhanced Dropdown */}
        <div className={styles.customerInputContainer} ref={dropdownRef}>
          <div className={styles.customerInput}>
<input
  ref={inputRef}
  type="text"
  placeholder="Customer Phone Number - رقم هاتف العميل"
  value={phoneInput}
  onChange={handleInputChange}
  onFocus={handleInputFocus}
  onBlur={handleInputBlur}
  onKeyDown={handleKeyDown}
  className={styles.customerField}
/>
            <button 
              className={styles.customerButton}
              onClick={handleAddCustomerClick}
              disabled={isSearching}
            >
              <img src="/images/img_group_1000004320.svg" alt="Add customer" />
            </button>
          </div>

          {/* Search Results Dropdown */}
          {showDropdown && (
            <div className={styles.customerDropdown}>
              {renderDropdownContent()}
            </div>
          )}
        </div>

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div 
                className={`${styles.orderItem} ${selectedOrderItemId === item.id ? styles.selected : ''} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}
                onClick={(e) => {
                  const rect = e.currentTarget.getBoundingClientRect();
                  const clickX = e.clientX - rect.left;
                  
                  if (selectedOrderItemId === item.id && clickX <= 30) {
                    onRemoveOrderItem(item.id);
                  } else {
                    onOrderItemSelect(item.id);
                  }
                }}
                onDoubleClick={() => onOrderItemDoubleClick?.(item)}
              >
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem, item.id))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>
{!readOnly && (
  <div className={`${styles.actionButtons} ${shouldShowPayOnly ? styles.takeawayButtons : ''}`}>
      {shouldShowAllButtons && (
        <>
          <button className={`${styles.actionButton} ${styles.send}`}>
            <img src="/images/img_tabler_send.svg" alt="Send" />
            <span>Send</span>
          </button>
          <button onClick={() => canOpenPayment && setShowPaymentPopup(true)}
                  disabled={!canOpenPayment}
                  className={`${styles.actionButton} ${styles.print} ${!canOpenPayment ? styles.disabledBtn : ''}`}>
            <img src="/images/img_printer.svg" alt="Print" />
            <span>Print</span>
          </button>
        </>
      )}
      <button
        onClick={() => canOpenPayment && setShowPaymentPopup(true)}
        disabled={!canOpenPayment}
        className={`${styles.actionButton} ${styles.pay} ${shouldShowPayOnly ? styles.fullWidth : ''} ${!canOpenPayment ? styles.disabledBtn : ''}`}
        title={!canOpenPayment ? "لا يمكن الدفع بدون إضافة أصناف" : undefined}
      >
        <img src="/images/img_payment_02.svg" alt="Pay" />
        <span>Pay</span>
      </button>
  </div>
)}

    </div>

      {/* Customer Details Popup */}
      <CustomerDetailsPopup
        open={showCustomerDetails}
        customer={selectedCustomerForDetails}
        onClose={handleCustomerDetailsClose}
        onSelectCustomer={handleCustomerDetailsSelect}
      />


<PaymentPopup
  isOpen={showPaymentPopup}
  onClose={() => setShowPaymentPopup(false)}
  orderSummary={orderSummary}
  customerName={customerName}
  onCustomerNameChange={onCustomerNameChange}
  onRemoveOrderItem={onRemoveOrderItem}
  onRemoveSubItem={onRemoveSubItem}
  selectedOrderItemId={selectedOrderItemId}
  onOrderItemSelect={onOrderItemSelect}
  onOrderItemDoubleClick={onOrderItemDoubleClick}
  selectedCustomer={selectedCustomer}
  selectedAddress={selectedAddress}
  onCustomerSelect={onCustomerSelect}
  orderType={orderType}
  onDeliveryChargeChange={onDeliveryChargeChange}
  onPaymentComplete={(payments) => {
    console.log('مدفوعات:', payments);
    setShowPaymentPopup(false);
    // هنا يمكنك إضافة منطق حفظ الدفع
  }}
/>


      {/* Customer Form Popup */}
      {showCustomerForm && (
        <CustomerForm
          key={phoneInput}
          open={showCustomerForm}
          mode="add"
          onClose={handleCustomerFormClose}
          onSubmit={handleCustomerFormSubmit}
          initialValues={{
            id: '',
            name: '',
            phone1: phoneInput.trim(),
            phone2: '',
            phone3: '',
            phone4: '',
            isVIP: false,
            isBlocked: false,
            isActive: true,
            addresses: []
          }}
        />
      )}
    </aside>
  );
};

export default OrderSummary;


============================================================
FILE: src/Pages/pos/newSales/components/PaymentPopup.tsx
============================================================
import React, { useState, useEffect, useRef } from 'react';
import { OrderSummary as OrderSummaryType } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import PaymentLeft from './paymentPopup components/PaymentLeft';
import PaymentCenter from './paymentPopup components/PaymentCenter';
import PaymentRight from './paymentPopup components/PaymentRight';
import styles from '../styles/PaymentPopup.module.css';
import { usePosPaymentMethods } from '../hooks/usePosPaymentMethods';
import { Snackbar, Alert } from '@mui/material';

interface PaymentMethodData {
  method: string;
  amount: number;
  isSelected: boolean;
  wasModified?: boolean;
}

interface PaymentPopupProps {
  isOpen: boolean;
  onClose: () => void;
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: any) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  onPaymentComplete: (payments: PaymentMethodData[]) => void;
}

const PaymentPopup: React.FC<PaymentPopupProps> = ({
  isOpen,
  onClose,
  orderSummary,
  selectedCustomer,
  selectedAddress,
  orderType,
  onPaymentComplete
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);
  const { paymentMethods, loading, error } = usePosPaymentMethods();
  
  // إضافة state للإشعارات المحلية
  const [localAlert, setLocalAlert] = useState({
    open: false,
    message: '',
    severity: 'warning' as 'warning' | 'error' | 'success' | 'info'
  });

  const [selectedPayments, setSelectedPayments] = useState<PaymentMethodData[]>([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string | null>(null);
  const [paidAmount, setPaidAmount] = useState('0');
  const [lastNonCashTotal, setLastNonCashTotal] = useState(0);
  const [isFirstInput, setIsFirstInput] = useState(true);

  // دالة عرض التحذير المحلي
  const showLocalWarning = (message: string) => {
    setLocalAlert({
      open: true,
      message,
      severity: 'warning'
    });
  };

  // حساب المبالغ
  const deliveryCharge = 0;
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const totalAmount = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // العثور على طريقة دفع الكاش
  const getCashMethod = () => {
    return paymentMethods.find(
      m => m.name.toLowerCase().includes('كاش') || m.name.toLowerCase().includes('cash')
    );
  };

  // دالة لحساب طرق الدفع النشطة غير الكاش
  const getActiveNonCashPayments = () => {
    return selectedPayments.filter(payment => {
      const isCash = payment.method.toLowerCase().includes('كاش') || 
                     payment.method.toLowerCase().includes('cash');
      return !isCash && payment.isSelected && payment.amount > 0;
    });
  };

  // حساب إجمالي المدفوع بطرق الدفع غير الكاش
  const nonCashTotal = selectedPayments
    .filter(payment => {
      const isCash = payment.method.toLowerCase().includes('كاش') || 
                     payment.method.toLowerCase().includes('cash');
      return !isCash && payment.amount > 0;
    })
    .reduce((sum, payment) => sum + payment.amount, 0);

  // الحصول على مبلغ الكاش الحالي
  const getCurrentCashAmount = () => {
    const cashPayment = selectedPayments.find(payment => {
      const isCash = payment.method.toLowerCase().includes('كاش') || 
                     payment.method.toLowerCase().includes('cash');
      return isCash;
    });
    return cashPayment?.amount || 0;
  };

  const cashAmount = getCurrentCashAmount();
  
  // حساب المبلغ المتبقي للعميل (فقط من الكاش)
  const remainingForCustomer = Math.max(0, cashAmount - Math.max(0, totalAmount - nonCashTotal));

  // دالة التبديل مع منطق النقل الذكي
  const handlePaymentMethodToggle = (method: string) => {
    const isCash = method.toLowerCase().includes('كاش') || 
                   method.toLowerCase().includes('cash');
    
    // للطرق غير النقدية: تحقق من العدد المسموح
    if (!isCash) {
      const activeNonCashPayments = getActiveNonCashPayments();
      const isCurrentlyActive = selectedPayments.find(p => p.method === method)?.isSelected || false;
      
      // إذا كان يحاول تفعيل طريقة ثالثة غير نقدية
      if (!isCurrentlyActive && activeNonCashPayments.length >= 2) {
        showLocalWarning('لا يمكن استخدام أكثر من وسيلتي دفع غير نقدية');
        return;
      }
    }

    setSelectedPayments(prevPayments => {
      return prevPayments.map(payment => {
        if (payment.method === method) {
          const newIsSelected = !payment.isSelected;
          
          if (isCash && newIsSelected) {
            // للكاش: حساب المبلغ المتبقي فقط
            const currentNonCashTotal = prevPayments
              .filter(p => {
                const isOtherCash = p.method.toLowerCase().includes('كاش') || 
                                 p.method.toLowerCase().includes('cash');
                return !isOtherCash && p.isSelected && p.amount > 0;
              })
              .reduce((sum, p) => sum + p.amount, 0);
            
            const remainingAmount = Math.max(0, totalAmount - currentNonCashTotal);
            
            return {
              ...payment,
              isSelected: true,
              amount: remainingAmount,
              wasModified: false
            };
          } else if (!isCash && newIsSelected) {
            // للطرق غير النقدية الجديدة: تطبيق المنطق الذكي
            const currentActiveNonCash = prevPayments.find(p => {
              const isOtherCash = p.method.toLowerCase().includes('كاش') || 
                               p.method.toLowerCase().includes('cash');
              return !isOtherCash && p.method !== method && p.isSelected && p.amount > 0;
            });
            
            let amountToAssign = 0;
            
            if (currentActiveNonCash) {
              // إذا كان هناك طريقة نشطة أخرى
              if (currentActiveNonCash.wasModified) {
                // إذا تم تعديلها: أخذ المبلغ المتبقي من الكاش
                const currentCash = prevPayments.find(p => {
                  const isCashPayment = p.method.toLowerCase().includes('كاش') || 
                                       p.method.toLowerCase().includes('cash');
                  return isCashPayment;
                });
                amountToAssign = currentCash?.amount || 0;
              } else {
                // إذا لم يتم تعديلها: نقل كامل القيمة
                amountToAssign = currentActiveNonCash.amount;
              }
            } else {
              // لا توجد طريقة نشطة أخرى: أخذ كامل المبلغ
              amountToAssign = totalAmount;
            }
            
            return {
              ...payment,
              isSelected: true,
              amount: amountToAssign,
              wasModified: false
            };
          } else {
            // إلغاء التفعيل
            return {
              ...payment,
              isSelected: false,
              amount: 0,
              wasModified: false
            };
          }
        } else {
          // معالجة الطرق الأخرى عند تفعيل طريقة جديدة
          const newMethodData = prevPayments.find(p => p.method === method);
          const isNewMethodBeingActivated = newMethodData && !newMethodData.isSelected;
          
          if (isNewMethodBeingActivated && !isCash) {
            const isCash = payment.method.toLowerCase().includes('كاش') || 
                           payment.method.toLowerCase().includes('cash');
            const isCurrentNonCash = !(payment.method.toLowerCase().includes('كاش') || 
                                     payment.method.toLowerCase().includes('cash'));
            
            // إذا كانت الطريقة الحالية غير نقدية ونشطة
            if (isCurrentNonCash && payment.isSelected) {
              if (payment.wasModified) {
                // إذا تم تعديلها: احتفظ بها وقلل من الكاش
                return payment;
              } else {
                // إذا لم يتم تعديلها: انقل قيمتها للطريقة الجديدة
                return {
                  ...payment,
                  isSelected: false,
                  amount: 0,
                  wasModified: false
                };
              }
            } else if (isCash) {
              // تحديث الكاش بناءً على الحالة
              const currentActiveNonCash = prevPayments.find(p => {
                const isOtherCash = p.method.toLowerCase().includes('كاش') || 
                                   p.method.toLowerCase().includes('cash');
                return !isOtherCash && p.method !== method && p.isSelected && p.amount > 0;
              });
              
              if (currentActiveNonCash?.wasModified) {
                // إذا كانت الطريقة النشطة معدلة: الكاش يفقد قيمته للطريقة الجديدة
                const newMethodAmount = payment.amount;
                return {
                  ...payment,
                  amount: Math.max(0, payment.amount - newMethodAmount),
                  isSelected: Math.max(0, payment.amount - newMethodAmount) > 0
                };
              } else {
                // إذا لم تكن معدلة: الكاش يأخذ المبلغ المتبقي
                const newAmount = Math.max(0, totalAmount - (currentActiveNonCash?.amount || totalAmount));
                return {
                  ...payment,
                  amount: newAmount,
                  isSelected: newAmount > 0
                };
              }
            }
          }
          
          return payment;
        }
      });
    });
  };

  // تحديث مبلغ الكاش تلقائياً عند تغيير طرق الدفع غير الكاش
  useEffect(() => {
    const cashMethod = getCashMethod();
    if (!cashMethod) return;

    if (nonCashTotal !== lastNonCashTotal) {
      const autoCalculatedCashAmount = Math.max(0, totalAmount - nonCashTotal);

      setSelectedPayments(prevPayments => {
        return prevPayments.map(payment => {
          const isCash = payment.method.toLowerCase().includes('كاش') || 
                         payment.method.toLowerCase().includes('cash');
          
          if (isCash) {
            return {
              ...payment,
              amount: autoCalculatedCashAmount,
              isSelected: autoCalculatedCashAmount > 0
            };
          }
          return payment;
        });
      });

      const selectedCash = selectedPaymentMethod?.toLowerCase().includes('كاش') || 
                          selectedPaymentMethod?.toLowerCase().includes('cash');
      if (selectedCash) {
        setPaidAmount(autoCalculatedCashAmount === 0 ? '0' : autoCalculatedCashAmount.toFixed(2));
        setIsFirstInput(true);
      }

      setLastNonCashTotal(nonCashTotal);
    }
  }, [nonCashTotal, totalAmount, selectedPaymentMethod, lastNonCashTotal]);

  // تهيئة طرق الدفع
  useEffect(() => {
    if (!isOpen || !paymentMethods?.length) return;
    
    const cashMethod = getCashMethod();
    const initialPayments = paymentMethods.map(method => {
      const isCash = method.name.toLowerCase().includes('كاش') || 
                     method.name.toLowerCase().includes('cash');
      
      return {
        method: method.name,
        amount: isCash ? totalAmount : 0,
        isSelected: isCash,
        wasModified: false
      };
    });
    
    setSelectedPayments(initialPayments);
    
    if (cashMethod) {
      setSelectedPaymentMethod(cashMethod.name);
      setPaidAmount(totalAmount.toFixed(2));
      setIsFirstInput(true);
    }
    
    setLastNonCashTotal(0);
  }, [isOpen, paymentMethods, totalAmount]);

  // معالج تغيير المبلغ مع تحديد flag التعديل
  const handleAmountChange = (amount: string) => {
    setIsFirstInput(false);
    setPaidAmount(amount);
    
    if (selectedPaymentMethod) {
      const numericAmount = parseFloat(amount) || 0;
      const isCashSelected = selectedPaymentMethod.toLowerCase().includes('كاش') || 
                            selectedPaymentMethod.toLowerCase().includes('cash');
      
      if (!isCashSelected) {
        // للطرق غير النقدية: منع التجاوز عن المبلغ المتبقي وتحديد wasModified
        const currentOtherNonCashTotal = selectedPayments
          .filter(payment => {
            const isCash = payment.method.toLowerCase().includes('كاش') || 
                           payment.method.toLowerCase().includes('cash');
            return !isCash && payment.method !== selectedPaymentMethod && payment.amount > 0;
          })
          .reduce((sum, payment) => sum + payment.amount, 0);
        
        const maxAllowed = Math.max(0, totalAmount - currentOtherNonCashTotal);
        const finalAmount = Math.min(numericAmount, maxAllowed);
        
        // تحديث المبلغ المدخل إذا تم تقليله
        if (finalAmount !== numericAmount) {
          setPaidAmount(finalAmount.toFixed(2));
        }
        
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: finalAmount,
                isSelected: finalAmount > 0,
                wasModified: true // تحديد أنه تم التعديل
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('كاش') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                const remainingAmount = Math.max(0, totalAmount - currentOtherNonCashTotal - finalAmount);
                return {
                  ...payment,
                  amount: remainingAmount,
                  isSelected: remainingAmount > 0
                };
              }
              return payment;
            }
          });
        });
      } else {
        // للكاش: يمكن أي مبلغ
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: numericAmount,
                isSelected: numericAmount > 0,
                wasModified: true // تحديد أنه تم التعديل
              };
            }
            return payment;
          });
        });
      }
    }
  };

  const handleQuickAmountSelect = (amount: number) => {
    setIsFirstInput(false);
    
    if (selectedPaymentMethod) {
      const isCashSelected = selectedPaymentMethod.toLowerCase().includes('كاش') || 
                            selectedPaymentMethod.toLowerCase().includes('cash');
      
      setPaidAmount(amount.toFixed(2));
      
      if (!isCashSelected) {
        // للطرق غير النقدية: منع التجاوز وتحديد wasModified
        const currentOtherNonCashTotal = selectedPayments
          .filter(payment => {
            const isCash = payment.method.toLowerCase().includes('كاش') || 
                           payment.method.toLowerCase().includes('cash');
            return !isCash && payment.method !== selectedPaymentMethod && payment.amount > 0;
          })
          .reduce((sum, payment) => sum + payment.amount, 0);
        
        const maxAllowed = Math.max(0, totalAmount - currentOtherNonCashTotal);
        const finalAmount = Math.min(amount, maxAllowed);
        
        if (finalAmount !== amount) {
          setPaidAmount(finalAmount.toFixed(2));
        }
        
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: finalAmount,
                isSelected: true,
                wasModified: true // تحديد أنه تم التعديل
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('كاش') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                const remainingAmount = Math.max(0, totalAmount - currentOtherNonCashTotal - finalAmount);
                return {
                  ...payment,
                  amount: remainingAmount,
                  isSelected: remainingAmount > 0
                };
              }
              return payment;
            }
          });
        });
      } else {
        // للكاش: لا تأثير على طرق الدفع الأخرى وتحديد wasModified
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === selectedPaymentMethod) {
              return {
                ...payment,
                amount: amount,
                isSelected: true,
                wasModified: true // تحديد أنه تم التعديل
              };
            }
            return payment;
          });
        });
      }
    }
  };

  const handlePaymentMethodSelect = (method: string) => {
    setSelectedPaymentMethod(method);
    
    const isCashSelected = method.toLowerCase().includes('كاش') || 
                          method.toLowerCase().includes('cash');
    
    if (!isCashSelected) {
      // حساب المبلغ المتبقي للأوردر
      const currentNonCashTotal = selectedPayments
        .filter(payment => {
          const isCash = payment.method.toLowerCase().includes('كاش') || 
                         payment.method.toLowerCase().includes('cash');
          return !isCash && payment.method !== method && payment.amount > 0;
        })
        .reduce((sum, payment) => sum + payment.amount, 0);
      
      const remainingAmountForOrder = Math.max(0, totalAmount - currentNonCashTotal);
      
      // إذا كان هناك مبلغ متبقي، ضعه في الطريقة المختارة
      if (remainingAmountForOrder > 0) {
        setSelectedPayments(prevPayments => {
          return prevPayments.map(payment => {
            if (payment.method === method) {
              return {
                ...payment,
                amount: remainingAmountForOrder,
                isSelected: true,
                wasModified: false // إعادة تعيين عند الاختيار
              };
            } else {
              const isCash = payment.method.toLowerCase().includes('كاش') || 
                             payment.method.toLowerCase().includes('cash');
              
              if (isCash) {
                // صفر الكاش إذا تم تغطية الأوردر بالكامل
                return {
                  ...payment,
                  amount: 0,
                  isSelected: false
                };
              }
              return payment;
            }
          });
        });
        
        setPaidAmount(remainingAmountForOrder.toFixed(2));
      } else {
        const currentPayment = selectedPayments.find(p => p.method === method);
        const amount = currentPayment?.amount || 0;
        setPaidAmount(amount === 0 ? '0' : amount.toFixed(2));
      }
      
      setIsFirstInput(true);
    } else {
      const currentPayment = selectedPayments.find(p => p.method === method);
      const amount = currentPayment?.amount || 0;
      setPaidAmount(amount === 0 ? '0' : amount.toFixed(2));
      setIsFirstInput(true);
    }
  };

  const handleFinishPayment = () => {
    const finalPayments = selectedPayments.filter(payment => 
      payment.amount > 0
    );
    
    onPaymentComplete(finalPayments);
    onClose();
  };

  const canFinish = (nonCashTotal + cashAmount) >= totalAmount;

  if (!isOpen) return null;

  return (
    <div className={styles.overlay} ref={overlayRef}>
      <div className={styles.popup}>
        <div className={styles.header}>
          <div className={styles.logo}>
            <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify" />
          </div>
          <h2 className={styles.title}>تأكيد الدفع</h2>
          <button className={styles.closeBtn} onClick={onClose}>×</button>
        </div>

        <div className={styles.content}>
          <div className={styles.leftSection}>
            <PaymentLeft
              orderSummary={orderSummary}
              selectedCustomer={selectedCustomer}
              selectedAddress={selectedAddress}
              orderType={orderType}
              deliveryCharge={deliveryCharge}
            />
          </div>
          <div className={styles.centerSection}>
            <PaymentCenter
              totalAmount={totalAmount}
              paidAmount={paidAmount}
              cashAmount={cashAmount}
              remainingForCustomer={remainingForCustomer}
              selectedPaymentMethod={selectedPaymentMethod}
              onAmountChange={handleAmountChange}
              onQuickAmountSelect={handleQuickAmountSelect}
              isFirstInput={isFirstInput}
              nonCashTotal={nonCashTotal}
            />
          </div>
          <div className={styles.rightSection}>
            {loading ? (
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
                fontFamily: 'Cairo, sans-serif'
              }}>
                جاري تحميل طرق الدفع...
              </div>
            ) : error ? (
              <div style={{ color: 'red', textAlign: 'center', marginTop: 20 }}>{error}</div>
            ) : (
              <PaymentRight
                availablePaymentMethods={paymentMethods.map(m => m.name)}
                selectedPayments={selectedPayments}
                selectedPaymentMethod={selectedPaymentMethod}
                onPaymentMethodSelect={handlePaymentMethodSelect}
                onPaymentMethodToggle={handlePaymentMethodToggle}
                onFinishPayment={handleFinishPayment}
                canFinish={canFinish}
                totalPaidAllMethods={nonCashTotal + cashAmount}
                totalAmount={totalAmount}
                nonCashTotal={nonCashTotal}
                onShowWarning={showLocalWarning}
              />
            )}
          </div>
        </div>

        {/* إضافة الـ Snackbar المحلي داخل الـ popup */}
        <Snackbar
          open={localAlert.open}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
          autoHideDuration={4000}
          onClose={() => setLocalAlert(prev => ({ ...prev, open: false }))}
          sx={{ 
            position: 'absolute', // مهم: نسبي لموضع الـ popup
            zIndex: 10 // فوق محتوى الـ popup
          }}
        >
          <Alert
            onClose={() => setLocalAlert(prev => ({ ...prev, open: false }))}
            severity={localAlert.severity}
            variant="filled"
            sx={{ 
              width: '100%',
              fontFamily: 'Cairo, sans-serif'
            }}
          >
            {localAlert.message}
          </Alert>
        </Snackbar>
      </div>
    </div>
  );
};

export default PaymentPopup;


============================================================
FILE: src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
============================================================
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/PriceSelectionPopup.module.css';

interface PriceSelectionPopupProps {
  product: PosProduct | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  quantity,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen || !product) return null;

  return (
    <div className={styles.popupOverlay} ref={overlayRef}>
      <div className={styles.popupContent}>
        <div className={styles.popupHeader}>
          <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
          <button className={styles.popupClose} onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className={styles.popupBody}>
          
          <div className={styles.pricesGrid}>
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className={styles.priceCard}
                onClick={() => onSelectPrice(price)}
              >
                <div className={styles.priceName}>{price.nameArabic}</div>
                <div className={styles.priceValue}>
                  <span className={styles.price}>{price.price}</span>
                  <span className={styles.currency}>EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;


============================================================
FILE: src/Pages/pos/newSales/components/ProductCard.tsx
============================================================
// src/Pages/pos/newSales/components/ProductCard.tsx
import React from 'react';
import { PosProduct } from '../types/PosSystem';
import styles from '../styles/ProductCard.module.css';

interface ProductCardProps {
  product: PosProduct;
  onClick: (product: PosProduct) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onClick }) => {
  const handleClick = () => {
    onClick(product);
  };

  // تحديد ما إذا كان المنتج له سعر واحد أم أكثر
  const hasMultiplePrices = product.hasMultiplePrices;
  const singlePrice = !hasMultiplePrices && product.productPrices.length > 0 
    ? product.productPrices[0].price 
    : null;

  return (
    <div className={styles.productCard} onClick={handleClick}>
      <div className={styles.productImageContainer}>
        <img 
          src={product.image} 
          alt={product.nameArabic} 
          className={styles.productImage}
        />
        
        {/* عرض السعر على الصورة إذا كان المنتج له سعر واحد */}
        {singlePrice !== null && (
          <div className={styles.priceOverlay}>
            {singlePrice.toFixed(2)} EGP
          </div>
        )}
      </div>
      
      <div className={styles.productInfo}>
        <h3 className={styles.productName}>
          {product.nameArabic}
        </h3>
      </div>
    </div>
  );
};

export default ProductCard;


============================================================
FILE: src/Pages/pos/newSales/components/ProductOptionsPopup.tsx
============================================================
// src/Pages/pos/newSales/components/ProductOptionsPopup.tsx
import React, { useState, useEffect } from 'react';
import { PosProduct, PosPrice, ProductOptionGroup, ProductOptionItem, SelectedOption } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import CheckIcon from '@mui/icons-material/Check';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import styles from '../styles/ProductOptionsPopup.module.css';

interface ProductOptionsPopupProps {
  product: PosProduct | null;
  selectedPrice: PosPrice | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onComplete: (selectedOptions: SelectedOption[]) => void;
}

const ProductOptionsPopup: React.FC<ProductOptionsPopupProps> = ({
  product,
  selectedPrice,
  quantity,
  isOpen,
  onClose,
  onComplete
}) => {
  const [selectedOptions, setSelectedOptions] = useState<SelectedOption[]>([]);
  const [groupSelections, setGroupSelections] = useState<{[groupId: string]: {[itemId: string]: number}}>({});
  const [currentGroupIndex, setCurrentGroupIndex] = useState(0);

  useEffect(() => {
    if (isOpen && product) {
      setSelectedOptions([]);
      setGroupSelections({});
      setCurrentGroupIndex(0);
    }
  }, [isOpen, product]);

  if (!isOpen || !product || !selectedPrice) return null;

  const optionGroups = product.productOptionGroups || [];

  if (optionGroups.length === 0) {
    onComplete([]);
    return null;
  }

  const currentGroup = optionGroups[currentGroupIndex];

  const handleItemSelection = (group: ProductOptionGroup, item: ProductOptionItem, change: number) => {
    const newSelections = { ...groupSelections };
    
    if (!newSelections[group.id]) {
      newSelections[group.id] = {};
    }
    
    const currentCount = newSelections[group.id][item.id] || 0;
    const newCount = Math.max(0, currentCount + change);
    
    const totalSelected = Object.values(newSelections[group.id]).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      if (newCount + otherItemsTotal <= group.maxSelection) {
        newSelections[group.id][item.id] = newCount;
      }
    } else {
      if (newCount > 0) {
        newSelections[group.id] = { [item.id]: 1 };
      } else {
        newSelections[group.id][item.id] = 0;
      }
    }
    
    setGroupSelections(newSelections);
  };

  const handleCardClick = (group: ProductOptionGroup, item: ProductOptionItem) => {
    const currentCount = groupSelections[group.id]?.[item.id] || 0;
    const totalSelected = Object.values(groupSelections[group.id] || {}).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      // للمجموعات المتعددة: زيادة الكمية
      if (otherItemsTotal < group.maxSelection) {
        handleItemSelection(group, item, 1);
      }
    } else {
      // للمجموعات الفردية: تغيير الحالة
      handleItemSelection(group, item, currentCount > 0 ? -1 : 1);
    }
  };

  const isCurrentGroupValid = (): boolean => {
    const selections = groupSelections[currentGroup.id] || {};
    const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
    
    if (currentGroup.isRequired) {
      return totalSelected >= currentGroup.minSelection;
    }
    
    return true; // المجموعات غير المطلوبة صحيحة دائما
  };

  const isAllGroupsValid = (): boolean => {
    return optionGroups.every(group => {
      const selections = groupSelections[group.id] || {};
      const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
      
      if (group.isRequired) {
        return totalSelected >= group.minSelection;
      }
      
      return totalSelected === 0 || totalSelected >= group.minSelection;
    });
  };

  const handleNext = () => {
    if (currentGroupIndex < optionGroups.length - 1) {
      setCurrentGroupIndex(currentGroupIndex + 1);
    }
  };

  const handlePrevious = () => {
    if (currentGroupIndex > 0) {
      setCurrentGroupIndex(currentGroupIndex - 1);
    }
  };

  const handleComplete = () => {
    const allSelectedOptions: SelectedOption[] = [];
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            allSelectedOptions.push({
              groupId: group.id,
              itemId: itemId,
              itemName: item.name,
              quantity: count,
              extraPrice: item.extraPrice,
              isCommentOnly: item.isCommentOnly
            });
          }
        }
      });
    });
    
    onComplete(allSelectedOptions);
  };

  const calculateTotalPrice = () => {
    let total = selectedPrice.price * quantity;
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            total += item.extraPrice * count * quantity;
          }
        }
      });
    });
    
    return total;
  };

  const selections = groupSelections[currentGroup.id] || {};
  const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContent}>
<div className={styles.popupHeader}>
  <div className={styles.popupTitleSection}>
    <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
    <div className={styles.popupSubtitle}>
      {selectedPrice.nameArabic} - الكمية: {quantity}
    </div>
  </div>
  <div style={{ display: 'flex', gap: '8px' }}>
    {currentGroupIndex > 0 && (
      <button 
        className={styles.popupClose} 
        onClick={handlePrevious}
        title="الرجوع للمجموعة السابقة"
      >
        <ArrowBackIcon />
      </button>
    )}
    <button className={styles.popupClose} onClick={onClose}>
      <CloseIcon />
    </button>
  </div>
</div>
        
        <div className={styles.popupBody}>
          {/* مؤشر التقدم */}
          <div className={styles.progressIndicator}>
            <div className={styles.progressText}>
              مجموعة {currentGroupIndex + 1} من {optionGroups.length}
            </div>
            <div className={styles.progressBar}>
              <div 
                className={styles.progressFill} 
                style={{ width: `${((currentGroupIndex + 1) / optionGroups.length) * 100}%` }}
              />
            </div>
          </div>

          <div className={styles.optionsContainer}>
            <div className={styles.optionGroup}>
              <div className={styles.groupHeader}>
                <div className={styles.groupTitle}>
                  <span className={styles.groupName}>{currentGroup.name}</span>
                  {currentGroup.isRequired && (
                    <span className={styles.requiredBadge}>مطلوب</span>
                  )}
                </div>
                <div className={styles.groupInfo}>
                  <span className={styles.selectionCount}>
                    {totalSelected} من {currentGroup.maxSelection}
                  </span>
                  {currentGroup.minSelection > 0 && (
                    <span className={styles.minSelection}>
                      (الحد الأدنى: {currentGroup.minSelection})
                    </span>
                  )}
                </div>
              </div>
              
              <div className={styles.optionsGrid}>
                {currentGroup.optionItems
                  .sort((a, b) => a.sortOrder - b.sortOrder)
                  .map((item) => {
                    const itemCount = selections[item.id] || 0;
                    const canAdd = currentGroup.allowMultiple 
                      ? totalSelected < currentGroup.maxSelection
                      : itemCount === 0;
                    
                    return (
                      <div 
                        key={item.id} 
                        className={`${styles.optionCard} ${itemCount > 0 ? styles.selected : ''}`}
                        onClick={() => handleCardClick(currentGroup, item)}
                      >
                        <div className={styles.optionContent}>
                          <div className={styles.optionInfo}>
                            <div className={styles.optionName}>{item.name}</div>
                            {item.extraPrice > 0 && (
                              <div className={styles.optionPrice}>
                                +{item.extraPrice} EGP
                              </div>
                            )}
                          </div>
                          
                          <div className={styles.optionControls}>
                            {currentGroup.allowMultiple ? (
                              <div className={styles.quantitySection}>
                                {itemCount > 0 && (
                                  <button
                                    className={styles.removeBtn}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleItemSelection(currentGroup, item, -1);
                                    }}
                                  >
                                    <RemoveIcon />
                                  </button>
                                )}
                                
                                {itemCount > 0 ? (
                                  <div className={styles.quantityBadge}>
                                    {itemCount}
                                  </div>
                                ) : canAdd ? (
                                  <div className={styles.addIcon}>
                                    <AddIcon />
                                  </div>
                                ) : (
                                  <div className={styles.maxReached}>
                                    <span>الحد الأقصى</span>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className={styles.singleSelect}>
                                {itemCount > 0 ? (
                                  <div className={styles.selectedIcon}>
                                    <CheckIcon />
                                  </div>
                                ) : (
                                  <div className={styles.unselectedIcon}>
                                    <AddIcon />
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
          
          <div className={styles.totalSection}>
            <div className={styles.totalRow}>
              <span className={styles.totalLabel}>الإجمالي:</span>
              <span className={styles.totalValue}>{calculateTotalPrice().toFixed(2)} EGP</span>
            </div>
          </div>
        </div>
        
        <div className={styles.popupFooter}>
          <button className={styles.btnCancel} onClick={onClose}>
            إلغاء
          </button>
          
          {currentGroupIndex < optionGroups.length - 1 ? (
            <button
              className={styles.btnConfirm}
              onClick={handleNext}
              disabled={currentGroup.isRequired && !isCurrentGroupValid()}
            >
              التالي
              <ArrowForwardIcon />
            </button>
          ) : (
            <button
              className={styles.btnConfirm}
              onClick={handleComplete}
              disabled={!isAllGroupsValid()}
            >
              تأكيد الاختيار
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductOptionsPopup;


============================================================
FILE: src/Pages/pos/newSales/components/TableSelectionPopup.tsx
============================================================
// src/Pages/pos/newSales/components/TableSelectionPopup.tsx
import React, { useState, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/TableSelectionPopup.module.css';

interface TableSelectionPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSelectTable: (selection: TableSelection) => void;
  tableSections: TableSection[];
}

const TableSelectionPopup: React.FC<TableSelectionPopupProps> = ({
  isOpen,
  onClose,
  onSelectTable,
  tableSections
}) => {
  const [selectedSection, setSelectedSection] = useState<TableSection | null>(null);

  useEffect(() => {
    if (isOpen && tableSections.length > 0) {
      setSelectedSection(tableSections[0]);
    }
  }, [isOpen, tableSections]);

  if (!isOpen) return null;

  const handleSectionClick = (section: TableSection) => {
    setSelectedSection(section);
  };

  const handleTableClick = (table: Table) => {
    if (selectedSection && !table.isOccupied) {
      onSelectTable({
        section: selectedSection,
        table: table
      });
    }
  };

  const displayedTables = selectedSection?.tables || [];

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContainer}>
        <div className={styles.posSystem}>
          {/* زر الإغلاق */}
          <button className={styles.closeBtn} onClick={onClose}>
            <CloseIcon />
            <span>إغلاق</span>
          </button>

          <main className={styles.mainContent}>
            {/* قسم الطاولات */}
            <section className={styles.productsSection}>
              <div className={styles.productGrid}>
                {displayedTables.map((table) => (
                  <div
                    key={table.id}
                    className={`${styles.productItem} ${table.isOccupied ? styles.occupied : ''}`}
                    onClick={() => handleTableClick(table)}
                  >
                    <div className={styles.productImage}>
                      <img 
                        src="/images/default-table.png" 
                        alt={table.name}
                        onError={(e) => {
                          e.currentTarget.src = '/images/placeholder.png';
                        }}
                      />
                    </div>
                    <div className={styles.productName}>
                      <span>{table.name}</span>
                      <small>{table.capacity} أشخاص</small>
                      <div className={`${styles.status} ${table.isOccupied ? styles.occupied : styles.available}`}>
                        {table.isOccupied ? 'مشغولة' : 'متاحة'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>

            {/* الشريط الجانبي للأقسام */}
            <aside className={styles.categoriesSidebar}>
              <div className={styles.categoriesList}>
                {tableSections.map((section) => (
                  <div
                    key={section.id}
                    className={`${styles.categoryItem} ${selectedSection?.id === section.id ? styles.active : ''}`}
                    onClick={() => handleSectionClick(section)}
                  >
                    <img 
                      src="/images/default-section.png" 
                      alt={section.name}
                      onError={(e) => {
                        e.currentTarget.src = '/images/placeholder.png';
                      }}
                    />
                    <div>
                      <span>{section.name}</span>
                      <br />
                      <small>{section.serviceCharge}% خدمة</small>
                    </div>
                  </div>
                ))}
              </div>
            </aside>
          </main>
        </div>
      </div>
    </div>
  );
};

export default TableSelectionPopup;


============================================================
FILE: src/Pages/pos/newSales/hooks/useDataManager.tsx
============================================================
// src/Pages/pos/newSales/hooks/useDataManager.tsx
import { useState, useEffect, useCallback } from 'react';
import { PosProduct, CategoryItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface DataState {
  mainProducts: PosProduct[];
  mainCategories: CategoryItem[];
  additionProducts: PosProduct[];
  additionCategories: CategoryItem[];
  normalModeProducts: PosProduct[];
  normalModeCategories: CategoryItem[];
  loading: boolean;
  error: string | null;
  defaultCategoryId: string | null;
}

export const useDataManager = () => {
  const [dataState, setDataState] = useState<DataState>({
    mainProducts: [],
    mainCategories: [],
    additionProducts: [],
    additionCategories: [],
    normalModeProducts: [],
    normalModeCategories: [],
    loading: true,
    error: null,
    defaultCategoryId: null
  });

  const loadAllData = useCallback(async () => {
    try {
      setDataState(prev => ({ ...prev, loading: true, error: null }));

      // تحميل البيانات من posService (التي تحتوي على productType)
      const [mainProducts, additionProducts] = await Promise.all([
        posService.getAllPosProducts(),
        posService.getAdditionProducts()
      ]);

      // تحويل البيانات إلى النوع المطلوب
      const convertedMainProducts: PosProduct[] = mainProducts.map(product => ({
        ...product,
        productType: product.productType || 1 // ضمان وجود productType
      }));

      const convertedAdditionProducts: PosProduct[] = additionProducts.map(product => ({
        ...product,
        productType: product.productType || 3 // ضمان وجود productType
      }));

      const [mainCategories, additionCategories] = await Promise.all([
        posService.getAllCategories(mainProducts),
        posService.getCategoriesByProductType(3)
      ]);

      // تحويل الفئات إلى النوع المطلوب
      const convertedMainCategories: CategoryItem[] = mainCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const convertedAdditionCategories: CategoryItem[] = additionCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 3
        }))
      }));

      // دمج المنتجات للعرض العادي
      const normalModeProducts = [...convertedMainProducts, ...convertedAdditionProducts];
      const normalModeCategories = await posService.getAllCategories([...mainProducts, ...additionProducts]);
      
      const convertedNormalModeCategories: CategoryItem[] = normalModeCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const rootMainCategories = convertedNormalModeCategories.filter(cat => !cat.parentId);
      const defaultCategoryId = rootMainCategories.length > 0 ? rootMainCategories[0].id : null;

      setDataState({
        mainProducts: convertedMainProducts,
        mainCategories: convertedMainCategories,
        additionProducts: convertedAdditionProducts,
        additionCategories: convertedAdditionCategories,
        normalModeProducts,
        normalModeCategories: convertedNormalModeCategories,
        loading: false,
        error: null,
        defaultCategoryId
      });

    } catch (error) {
      console.error('Error loading data:', error);
      setDataState(prev => ({
        ...prev,
        loading: false,
        error: 'فشل في تحميل البيانات'
      }));
    }
  }, []);

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // دالة للحصول على المنتجات المفلترة حسب الوضع
  const getProducts = useCallback((isAdditionMode: boolean): PosProduct[] => {
    if (isAdditionMode) {
      return dataState.additionProducts.filter(product => product.productType === 3);
    }
    return dataState.normalModeProducts;
  }, [dataState.additionProducts, dataState.normalModeProducts]);

  // دالة للحصول على الفئات المفلترة حسب الوضع
  const getCategories = useCallback((isAdditionMode: boolean): CategoryItem[] => {
    if (isAdditionMode) {
      return dataState.additionCategories.filter(category => 
        category.products && category.products.some(product => product.productType === 3)
      );
    }
    return dataState.normalModeCategories;
  }, [dataState.additionCategories, dataState.normalModeCategories]);

  // إضافة دوال مساعدة متوافقة مع posService

const searchProducts = useCallback((products: PosProduct[], query: string): PosProduct[] => {
  if (!query.trim()) return [];
  
  const searchTerm = query.toLowerCase();
  return products.filter(product => 
    product.nameArabic.toLowerCase().includes(searchTerm) ||
    product.name.toLowerCase().includes(searchTerm)
  );
}, []);

  const getProductsByScreenId = useCallback((products: PosProduct[], screenId: string): PosProduct[] => {
    return products.filter(product => product.categoryId === screenId);
  }, []);

  const hasProductOptions = useCallback((product: PosProduct): boolean => {
    return !!(product.productOptionGroups && product.productOptionGroups.length > 0);
  }, []);

  return {
    ...dataState,
    loadAllData,
    getProducts,
    getCategories,
    // إضافة الدوال المساعدة
    searchProducts,
    getProductsByScreenId,
    hasProductOptions,
    // مؤشرات الحالة
    isLoading: dataState.loading,
    hasError: !!dataState.error,
    isDataReady: !dataState.loading && !dataState.error && dataState.normalModeProducts.length > 0
  };
};


============================================================
FILE: src/Pages/pos/newSales/hooks/usePosPaymentMethods.tsx
============================================================
// src/Pages/pos/newSales/hooks/usePosPaymentMethods.ts
import { useState, useEffect } from "react";
import * as posPaymentMethodsApi from 'src/utils/api/pagesApi/posPaymentMethodsApi';

export interface PaymentMethod {
  id: string;
  name: string;
  safeOrAccountID?: string | null;
  safeOrAccount?: any;
}

function isUUID(id: string) {
  // detect uuid-like
  return !!id && id.length > 20 && id.includes("-");
}

function isManualMethod(method: PaymentMethod) {
  // methods added by restaurant (id is uuid)
  return isUUID(method.id);
}
function isDefaultCash(method: PaymentMethod) {
  return method.id.toLowerCase() === 'cash' || method.name.toLowerCase() === 'كاش';
}
function isDefaultVisa(method: PaymentMethod) {
  return method.id.toLowerCase() === 'visa' || method.name.toLowerCase() === 'فيزا';
}
function isDefaultBuiltIn(method: PaymentMethod) {
  // ids like visa/cash/instapay/wallet/isntapay/etc (not pure uuid)
  return !isManualMethod(method) && !isDefaultCash(method) && !isDefaultVisa(method);
}

function sortPaymentMethods(methods: PaymentMethod[]): PaymentMethod[] {
  const cash = methods.find(isDefaultCash);
  const visa = methods.find(isDefaultVisa);

  // Exclude cash/visa for building the rest
  const rest = methods.filter(
    m => !isDefaultCash(m) && !isDefaultVisa(m)
  );
  const builtIn = rest.filter(isDefaultBuiltIn);
  const manual = rest.filter(isManualMethod);

  const result: PaymentMethod[] = [];
  if (cash) result.push(cash);
  if (visa) result.push(visa);
  result.push(...builtIn);
  result.push(...manual);
  return result;
}

export function usePosPaymentMethods() {
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    async function fetch() {
      try {
        setLoading(true);
        const res = await posPaymentMethodsApi.getAll();
        const usable = Array.isArray(res)
          ? res.filter((m) =>
              !['CL', 'ضيافة', 'نقاط'].includes(m.id)
            )
          : [];
        const sorted = sortPaymentMethods(usable);
        if (mounted) {
          setMethods(sorted);
          setLoading(false);
        }
      } catch (err: any) {
        setError('حدث خطأ أثناء تحميل طرق الدفع');
        setLoading(false);
        setMethods([]);
      }
    }
    fetch();
    return () => {
      mounted = false;
    };
  }, []);

  return { paymentMethods: methods, loading, error };
}


============================================================
FILE: src/Pages/pos/newSales/hooks/useTableManager.tsx
============================================================
// src/Pages/pos/newSales/hooks/useTableManager.tsx
import { useState, useCallback, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import * as tableSectionsApi from '../../../../utils/api/pagesApi/tableSectionsApi';
import { useError } from '../../../../contexts/ErrorContext';

export const useTableManager = () => {
  const [tableSections, setTableSections] = useState<TableSection[]>([]);
  const [selectedTable, setSelectedTable] = useState<TableSelection | null>(null);
  const [isChooseTable] = useState<boolean>(true); // سيتم ملؤه من الإعدادات لاحقاً
  const [loading, setLoading] = useState(false);
  const { showSuccess, showWarning } = useError();

  // تحميل الأقسام والطاولات
const loadTableSections = useCallback(async () => {
  try {
    setLoading(true);
    const sections = await tableSectionsApi.getAll();
    
    // تحويل البيانات للنوع المطلوب
    const convertedSections: TableSection[] = sections.map(section => ({
      ...section,
      image: '/images/default-section.png', // صورة افتراضية للقسم
      tables: section.tables.map(table => ({
        ...table,
        isOccupied: false, // هنا يمكن جلب الحالة الحقيقية من API آخر
        image: '/images/default-table.png' // صورة افتراضية للطاولة
      }))
    }));
    
    setTableSections(convertedSections);
  } catch (error) {
    console.error('Error loading table sections:', error);
    setTableSections([]);
  } finally {
    setLoading(false);
  }
}, []);

  useEffect(() => {
    loadTableSections();
  }, [loadTableSections]);

  const selectTable = useCallback((selection: TableSelection) => {
    setSelectedTable(selection);
        showSuccess(`تم اختيار طاولة ${selection.table.name} - ${selection.section.name}`);

  }, []);

  const clearSelectedTable = useCallback(() => {
    setSelectedTable(null);
  }, []);

  const getTableDisplayName = useCallback((): string => {
    if (!selectedTable) return 'Table';
    return `${selectedTable.section.name} / ${selectedTable.table.name}`;
  }, [selectedTable]);

  const getServiceCharge = useCallback((): number => {
    if (!selectedTable) return 0;
    return selectedTable.section.serviceCharge;
  }, [selectedTable]);

  const isTableRequired = useCallback((orderType: string): boolean => {
    return isChooseTable && orderType === 'Dine-in';
  }, [isChooseTable]);

  const canAddProduct = useCallback((orderType: string): boolean => {
    if (!isTableRequired(orderType)) return true;
    return selectedTable !== null;
  }, [selectedTable, isTableRequired]);


  // إضافة دالة للتحقق مع عرض الرسالة
  const checkTableSelection = useCallback((orderType: string): boolean => {
    if (!canAddProduct(orderType)) {
      showWarning('يجب اختيار الطاولة أولاً');
      return false;
    }
    return true;
  }, [canAddProduct, showWarning]);

  return {
    tableSections,
    selectedTable,
    isChooseTable,
    loading,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct,
    checkTableSelection, // إضافة الدالة الجديدة
    loadTableSections
  };
};







============================================================
FILE: src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx
============================================================
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;

============================================================
FILE: src/Pages/pos/newSales/srcvitejs/plugin-react.tsx
============================================================
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;

============================================================
FILE: src/Pages/pos/newSales/styles/ActionButtons.css
============================================================
/* src/Pages/pos/newSales/components/ActionButtons.css */

.action-buttons-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  background: #ffffff;
  border-bottom: 1px solid #e9ecef;
}

.action-chips {
  display: flex;
  gap: 12px;
}

.action-chip {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  background: #ffffff;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  font-weight: 500;
}

.action-chip:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
}

.action-chip.active {
  background: #0373ed;
  color: white;
  border-color: #0373ed;
}

.action-chip img {
  width: 16px;
  height: 16px;
}

.search-container {
  display: flex;
  align-items: center;
  position: relative;
  gap: 8px;
}

.search-icon {
  position: absolute;
  left: 12px;
  width: 16px;
  height: 16px;
  z-index: 1;
}

.search-input {
  padding: 8px 12px 8px 36px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: 14px;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #0373ed;
}

.filter-button {
  padding: 8px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  background: white;
  cursor: pointer;
}

.filter-button:hover {
  border-color: #0373ed;
}

.filter-button img {
  width: 16px;
  height: 16px;
}


============================================================
FILE: src/Pages/pos/newSales/styles/Header.css
============================================================
/* src/Pages/pos/newSales/components/Header.css */

.pos-header {
  height: clamp(60px, 8vh, 100px);
  background: #ffffff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
  z-index: 100;
  position: relative;
}

.header-content {
  height: 100%;
  padding: 0 clamp(16px, 3vw, 32px);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.header-nav {
  display: flex;
  align-items: center;
  gap: clamp(12px, 2vw, 24px);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  padding: clamp(6px, 1.2vw, 12px) clamp(8px, 1.6vw, 16px);
  border-radius: 6px;
  text-decoration: none;
  color: #333333;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 500;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
}

.nav-item img {
  width: clamp(14px, 1.8vw, 20px);
  height: clamp(14px, 1.8vw, 20px);
}

.order-type-display {
  padding: clamp(6px, 1.2vw, 12px) clamp(12px, 2.4vw, 20px);
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 600;
  color: #333333;
  min-width: clamp(80px, 12vw, 120px);
  text-align: center;
}

.menu-dropdown-container {
  position: relative;
}

.menu-button {
  padding: clamp(6px, 1.2vw, 12px);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(18px, 2.4vw, 28px);
  height: clamp(18px, 2.4vw, 28px);
}

/* Figma Dropdown - مع scroll مخفي */
.figma-dropdown {
  position: absolute;
  top: calc(100% + 8px);
  right: 0;
  background: transparent;
  z-index: 1000;
  animation: slideInFromRight 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  flex-direction: column;
  gap: clamp(16px, 2.5vw, 20px);
  max-height: calc(100vh - 120px);
  overflow-y: auto;
  overflow-x: hidden;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
  /* إخفاء الـ scrollbar */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* Internet Explorer 10+ */
}

/* إخفاء الـ scrollbar في WebKit browsers */
.figma-dropdown::-webkit-scrollbar {
  width: 0;
  height: 0;
  background: transparent;
  display: none;
}

/* Order Types Section */
.order-types-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  flex-shrink: 0;
}

/* Delivery Partners Section */
.delivery-partners-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  margin-top: clamp(12px, 2vw, 16px);
  flex-shrink: 0;
}

/* Section Separator */
.section-separator {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.1), transparent);
  margin: clamp(8px, 1.5vw, 12px) 0;
  flex-shrink: 0;
}

/* Figma Cards - مُحسنة بدون تأثير على الكروت المجاورة */
.figma-card {
  width: clamp(90px, 14vw, 110px);
  height: clamp(85px, 13vw, 105px);
  background: white;
  border-radius: 12px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: clamp(6px, 1.2vw, 8px);
  backdrop-filter: blur(8px);
  scroll-snap-align: start;
  contain: layout style paint;
  /* إضافة margin للحفاظ على المساحة */
  margin: 2px;
}

.figma-card:hover {
  border-color: #0373ed;
  /* تقليل الحركة لتجنب التأثير على الكروت المجاورة */
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(3, 115, 237, 0.2);
  /* استخدام brightness كبديل للـ scale */
  filter: brightness(1.05);
}

.figma-card.selected {
  border-color: #0373ed;
  box-shadow: 0 5px 12px rgba(3, 115, 237, 0.25);
  background: rgba(3, 115, 237, 0.02);
}

.delivery-card {
  border: 1px solid #e9ecef;
}

.delivery-card:hover {
  border-color: #0373ed;
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  filter: brightness(1.05);
}

/* Card Icon Section */
.card-icon-section {
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1;
  width: 100%;
}

/* Card Icons - مُصغرة */
.card-icon {
  width: clamp(24px, 3.5vw, 32px);
  height: clamp(24px, 3.5vw, 32px);
  object-fit: contain;
}

.delivery-icon {
  max-width: clamp(45px, 7vw, 60px);
  max-height: clamp(15px, 2.5vw, 20px);
  object-fit: contain;
}

/* Card Labels - داخل الكارت */
.card-label {
  color: black;
  font-size: clamp(10px, 1.5vw, 14px);
  font-family: 'Nunito', sans-serif;
  font-weight: 400;
  word-wrap: break-word;
  text-align: center;
  line-height: 1.1;
  margin-top: clamp(2px, 0.5vw, 4px);
  width: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

.figma-card.selected .card-label {
  color: #0373ed;
  font-weight: 500;
}

/* Animations */
@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(15px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* تأثيرات إضافية للكروت */
.figma-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3));
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  border-radius: 10px;
}

.figma-card:hover::before {
  opacity: 1;
}

/* تأثيرات fade للـ scroll */
.figma-dropdown::before {
  content: '';
  position: sticky;
  top: 0;
  height: 6px;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

.figma-dropdown::after {
  content: '';
  position: sticky;
  bottom: 0;
  height: 6px;
  background: linear-gradient(to top, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .nav-item span {
    display: none;
  }
  
  .nav-item {
    padding: clamp(8px, 1.5vw, 12px);
  }
  
  .figma-dropdown {
    right: -5px;
  }
}

@media (max-width: 768px) {
  .header-nav {
    gap: clamp(8px, 1.5vw, 16px);
  }
  
  .order-type-display {
    min-width: clamp(60px, 10vw, 80px);
    font-size: clamp(10px, 1.2vw, 14px);
  }
  
  .figma-dropdown {
    right: -10px;
    gap: clamp(12px, 2vw, 16px);
    max-height: calc(100vh - 100px);
  }
  
  .figma-card {
    width: clamp(75px, 16vw, 95px);
    height: clamp(70px, 15vw, 90px);
    padding: clamp(4px, 1vw, 6px);
    margin: 1px;
  }
  
  .figma-card:hover {
    transform: translateX(-1px);
  }
  
  .delivery-card:hover {
    transform: translateX(-1px);
  }
  
  .card-icon {
    width: clamp(18px, 3vw, 24px);
    height: clamp(18px, 3vw, 24px);
  }
  
  .delivery-icon {
    max-width: clamp(35px, 6vw, 45px);
    max-height: clamp(12px, 2vw, 16px);
  }
  
  .card-label {
    font-size: clamp(8px, 1.3vw, 12px);
  }
}

@media (max-width: 480px) {
  .header-content {
    padding: 0 clamp(8px, 2vw, 16px);
  }
  
  .header-nav {
    gap: clamp(4px, 1vw, 8px);
  }
  
  .figma-dropdown {
    right: -15px;
    max-height: calc(100vh - 80px);
  }
  
  .figma-card {
    width: clamp(65px, 18vw, 85px);
    height: clamp(60px, 17vw, 80px);
    padding: clamp(3px, 0.8vw, 5px);
    margin: 1px;
  }
  
  /* إزالة الحركة نهائياً في الشاشات الصغيرة */
  .figma-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .delivery-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .card-icon {
    width: clamp(16px, 2.5vw, 20px);
    height: clamp(16px, 2.5vw, 20px);
  }
  
  .delivery-icon {
    max-width: clamp(30px, 5vw, 40px);
    max-height: clamp(10px, 1.8vw, 14px);
  }
  
  .card-label {
    font-size: clamp(7px, 1.1vw, 10px);
  }
}

/* تحسينات للأجهزة اللمسية */
@media (hover: none) and (pointer: coarse) {
  .figma-dropdown {
    -webkit-overflow-scrolling: touch;
    scroll-snap-type: y proximity;
  }
  
  .figma-card {
    scroll-snap-align: start;
  }
}

/* تحسينات الأداء */
.figma-dropdown {
  will-change: scroll-position;
  contain: layout style paint;
}

.figma-card {
  will-change: transform, box-shadow;
  backface-visibility: hidden;
}

/* تحسينات للشاشات عالية الدقة */
@media (min-resolution: 150dpi) {
  .figma-card {
    border-width: 1.5px;
  }
}

@media (min-resolution: 200dpi) {
  .figma-card {
    border-width: 1px;
  }
}



/* إضافة هذا في Header.css */

.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 4px;
  padding: 8px 12px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid transparent;
  position: relative;
  overflow: hidden;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}

/* تأثير ripple عند النقر */
.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: width 0.3s ease, height 0.3s ease;
}

.order-type-display.clickable:active::before {
  width: 100px;
  height: 100px;
}

/* إضافة أيقونة صغيرة للإشارة للـ reset */
.order-type-display.clickable::after {
  content: '↻';
  position: absolute;
  top: 2px;
  right: 2px;
  font-size: 10px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.order-type-display.clickable:hover::after {
  opacity: 0.7;
}

/* تحسين الـ tooltip */
.order-type-display.clickable[title] {
  position: relative;
}

.order-type-display.clickable[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  opacity: 0.9;
}

/* Responsive */
@media (max-width: 768px) {
  .order-type-display.clickable {
    padding: 6px 8px;
    font-size: 12px;
  }
  
  .order-type-display.clickable::after {
    font-size: 8px;
  }
}



/* إضافة هذا في Header.css */

/* Professional Dropdown Styles */
.professional-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  width: 420px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
  border: 1px solid #e9ecef;
  z-index: 1000;
  transform: translateY(8px);
  opacity: 0;
  animation: dropdownSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  max-height: 80vh;
  overflow-y: auto;
}

@keyframes dropdownSlideIn {
  from {
    opacity: 0;
    transform: translateY(0);
  }
  to {
    opacity: 1;
    transform: translateY(8px);
  }
}

.dropdown-section {
  padding: 20px;
}

.dropdown-section:not(:last-child) {
  border-bottom: 1px solid #f1f3f4;
}

.section-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.section-title {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.section-divider {
  flex: 1;
  height: 1px;
  background: linear-gradient(to right, #e9ecef, transparent);
}

/* Order Types Cards */
.order-types-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.order-type-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  background: white;
  border: 2px solid #f1f3f4;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.order-type-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, var(--accent-color), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-card:hover {
  border-color: var(--accent-color);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.order-type-card:hover::before {
  opacity: 0.05;
}

.order-type-card.selected {
  border-color: var(--accent-color);
  background: rgba(var(--accent-color), 0.05);
  box-shadow: 0 4px 16px rgba(var(--accent-color), 0.2);
}

.order-type-card.selected::before {
  opacity: 0.08;
}

.card-icon-container {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: rgba(var(--accent-color), 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.card-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.card-content {
  flex: 1;
  text-align: left;
}

.card-title {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.card-description {
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.card-check {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--accent-color);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.order-type-card.selected .card-check {
  opacity: 1;
  transform: scale(1);
}

/* Delivery Partners Cards */
.delivery-partners-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.delivery-partner-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.delivery-partner-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.delivery-partner-card:hover {
  border-color: var(--partner-color);
  transform: translateX(4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
}

.delivery-partner-card:hover::before {
  opacity: 1;
}

.delivery-partner-card.selected {
  border-color: var(--partner-color);
  background: var(--partner-bg);
  box-shadow: 0 4px 16px rgba(var(--partner-color), 0.15);
}

.partner-icon-container {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  background: var(--partner-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.partner-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.partner-content {
  flex: 1;
  text-align: left;
}

.partner-name {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.partner-status {
  font-size: 11px;
  color: #28a745;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.partner-badge {
  width: 16px;
  height: 16px;
  color: var(--partner-color);
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.delivery-partner-card.selected .partner-badge {
  opacity: 1;
  transform: scale(1);
}

/* Order Type Display Button Enhancement */
.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 8px;
  padding: 8px 16px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:hover::before {
  opacity: 1;
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Design */
@media (max-width: 768px) {
  .professional-dropdown {
    width: 360px;
    right: -20px;
  }
  
  .order-types-grid {
    grid-template-columns: 1fr;
  }
  
  .dropdown-section {
    padding: 16px;
  }
  
  .order-type-card {
    padding: 12px;
  }
  
  .delivery-partner-card {
    padding: 10px 12px;
  }
}

@media (max-width: 480px) {
  .professional-dropdown {
    width: 320px;
    right: -40px;
  }
  
  .section-title {
    font-size: 14px;
  }
  
  .card-title,
  .partner-name {
    font-size: 13px;
  }
  
  .card-description {
    font-size: 11px;
  }
}

/* Scroll Styling */
.professional-dropdown::-webkit-scrollbar {
  width: 6px;
}

.professional-dropdown::-webkit-scrollbar-track {
  background: #f1f3f4;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb {
  background: #c1c8cd;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb:hover {
  background: #a8b2ba;
}







/* إضافة هذا لـ Header.css */

.customer-info-section {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 20px;
}

.customer-info-card {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 10px 16px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
}

.customer-basic-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
}

.customer-name {
  display: flex;
  align-items: center;
  gap: 6px;
  font-weight: 600;
  color: #2c3e50;
  font-size: 14px;
}

.customer-phone {
  display: flex;
  align-items: center;
  gap: 4px;
  color: #6c757d;
  font-size: 12px;
}

.customer-address {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #495057;
  font-size: 12px;
  border-top: 1px solid #dee2e6;
  padding-top: 4px;
  margin-top: 4px;
}

.address-text {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.customer-icon,
.phone-icon,
.address-icon {
  font-size: 14px;
  flex-shrink: 0;
}

.vip-badge {
  background: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
  color: #8b4513;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

/* Responsive للـ customer info */
@media (max-width: 1200px) {
  .customer-info-section {
    margin: 0 10px;
  }
  
  .customer-info-card {
    padding: 8px 12px;
    max-width: 300px;
  }
  
  .customer-name {
    font-size: 13px;
  }
  
  .customer-phone,
  .customer-address {
    font-size: 11px;
  }
}

@media (max-width: 768px) {
  .customer-info-section {
    margin: 0 5px;
  }
  
  .customer-info-card {
    padding: 6px 10px;
    max-width: 250px;
  }
  
  .customer-name {
    font-size: 12px;
  }
  
  .customer-phone,
  .customer-address {
    font-size: 10px;
  }
  
  .address-text {
    max-width: 150px;
  }
}


============================================================
FILE: src/Pages/pos/newSales/styles/OrderItemDetailsPopup.module.css
============================================================
/* src/Pages/pos/newSales/components/OrderItemDetailsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.orderItemDetails {
  background: white;
  border-radius: 12px;
  padding: 24px;
  width: 90%;
  max-width: 600px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* السطر الرئيسي الوحيد */
.mainRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 0;
  border-bottom: 1px solid #eee;
}

/* اسم المنتج والسعر على اليمين */
.productInfo {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1;
}

.productName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.productSize {
  font-size: 12px;
  color: #666;
}

.unitPrice {
  font-size: 14px;
  font-weight: 600;
  color: #e74c3c;
}

/* الكمية في النص */
.quantityControls {
  display: flex;
  align-items: center;
  gap: 12px;
  flex: 0 0 auto;
}

.quantityBtn {
  width: 36px;
  height: 36px;
  border: 2px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantityBtn:hover:not(:disabled) {
  border-color: #0373ed;
  background: #f8f9ff;
}

.quantityBtn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantityDisplay {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  min-width: 30px;
  text-align: center;
}

/* الإجمالي على الشمال */
.totalDisplay {
  flex: 0 0 auto;
}

.totalAmount {
  font-size: 18px;
  font-weight: 700;
  color: #e74c3c;
}

/* حقل الملاحظات */
.notesSection {
  width: 100%;
}

.notesInput {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  resize: vertical;
  font-family: inherit;
  transition: border-color 0.2s ease;
}

.notesInput:focus {
  outline: none;
  border-color: #0373ed;
}

.notesInput::placeholder {
  color: #999;
}

/* قسم الخصم */
.discountSection {
  width: 100%;
}

.discountInputs {
  display: flex;
  gap: 16px;
}

.discountField {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.discountField label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
}

.discountInput {
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.2s ease;
  /* إزالة الأزرار من number input */
  -moz-appearance: textfield;
}

.discountInput::-webkit-outer-spin-button,
.discountInput::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.discountInput:focus {
  outline: none;
  border-color: #0373ed;
}

/* أزرار التأكيد والإلغاء */
.actionButtons {
  display: flex;
  gap: 0;
  width: 100%;
  margin-top: 8px;
}

.confirmBtn,
.cancelBtn {
  flex: 1;
  padding: 16px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.confirmBtn {
  background: #28a745;
  color: white;
  border-radius: 8px 0 0 8px;
}

.confirmBtn:hover {
  background: #218838;
}

.cancelBtn {
  background: #f8f9fa;
  color: #333;
  border-radius: 0 8px 8px 0;
  border-left: 1px solid #ddd;
}

.cancelBtn:hover {
  background: #e9ecef;
}

/* Responsive */
@media (max-width: 768px) {
  .mainRow {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .productInfo {
    align-items: center;
    text-align: center;
  }
  
  .quantityControls {
    justify-content: center;
  }
  
  .totalDisplay {
    text-align: center;
  }
  
  .discountInputs {
    flex-direction: column;
  }
  
  .actionButtons {
    flex-direction: column;
  }
  
  .confirmBtn,
  .cancelBtn {
    border-radius: 8px;
  }
  
  .cancelBtn {
    border-left: none;
    border-top: 1px solid #ddd;
  }
}


============================================================
FILE: src/Pages/pos/newSales/styles/OrderSummary.module.css
============================================================
/* OrderSummary Module CSS */
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');

:root {
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --scale-factor: clamp(0.8, 1vw, 1.2);
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
}

/* Main Container */
.orderSummary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

/* Header Section */
.orderHeader {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.orderNumber {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.orderTotal {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.orderTotal .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.orderTotal .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

/* Content Section */
.orderContent {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.orderContent::-webkit-scrollbar {
  width: 6px;
}

.orderContent::-webkit-scrollbar-track {
  background: transparent;
}

.orderContent::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

/* Customer Input */
.customerInput {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customerField {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Cairo', sans-serif;
  background: transparent;
}

.customerField:focus {
  outline: none;
}

.customerButton {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customerButton:hover {
  background: #025bb5;
}

.customerButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

/* Order Items */
.orderItems {
  max-height: 50vh;
  margin-bottom: var(--spacing-md);
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.orderItems::-webkit-scrollbar {
  width: 4px;
}

.orderItems::-webkit-scrollbar-track {
  background: transparent;
}

.orderItems::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

/* Order Item Container - التعديل الرئيسي للفاصل */
.orderItemContainer {
  margin-bottom: clamp(12px, 1.5vw, 16px); /* مسافة بين مجموعات المنتجات فقط */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* خط فاصل بين المجموعات */
  padding-bottom: clamp(8px, 1vw, 12px);
}

.orderItemContainer:last-child {
  border-bottom: none; /* إزالة الخط من آخر عنصر */
}

/* Main Order Item */
.orderItem {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 6px;
  margin-bottom: 0; /* إزالة المسافة السفلية */
}

.orderItem:hover {
  background: rgba(0, 0, 0, 0.05);
}

.orderItem.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 20px solid #0373ed;
  padding-left: 8px;
  position: relative;
}

/* حرف X للمنتج الرئيسي */
.orderItem.selected::before {
  content: '✕';
  position: absolute;
  left: -20px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 20px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للمنتج الرئيسي */
.orderItem.selected:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 18px;
  transform: scale(1.1);
}

.orderItem.extraItem {
  border-left: 3px solid #28a745;
}

.orderItem.withoutItem {
  border-left: 3px solid #dc3545;
}

/* Item Details */
.itemDetails {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0;
}

.deleteButton {
    order: -1; /* أول عنصر */

  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.deleteButton:hover {
  background: rgba(229, 57, 53, 0.1);
}

.deleteButton img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.itemInfo {
  flex: 1;
  min-width: 0;
}

.itemName {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.itemSizeInline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em;
}

/* Item Prices - التعديل الرئيسي للأسعار */
.itemPrices {
  display: flex;
  align-items: center;
  gap: clamp(6px, 1vw, 10px);
  flex-shrink: 0;
  min-width: fit-content;
}

.itemPrice {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
  padding-right: clamp(6px, 1vw, 10px);
  border-right: 1px solid #ccc; /* الخط العمودي الفاصل */
}

.itemTotal {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
  padding-left: clamp(6px, 1vw, 10px);
}

.itemTotal.negative {
  color: #dc3545;
  font-weight: 600;
}

/* Badges */
.extraBadge, .withoutBadge {
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.extraBadge {
  background: #28a745;
}

.withoutBadge {
  background: #dc3545;
}

/* Sub-items Container - إزالة الفاصل مع المنتج الرئيسي */
.subItemsContainer {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
  border-left: 2px solid #f0f0f0;
}

/* Sub-item */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}


.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}

/* Sub-item المحدد - مع border أكبر */
.selectedSubItem {
  background: rgba(3, 115, 237, 0.1);
  border-left: 20px solid #0373ed;
  padding-left: 8px;
  position: relative;
}
.selectedSubItem::before {
  content: '✕';
  position: absolute;
  left: -20px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 20px;
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للـ sub-item */
.selectedSubItem:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 16px;
  transform: scale(1.1);
}

/* تأثير الضغط للعناصر المحددة */
.orderItem.selected:active::before,
.selectedSubItem:active::before {
  transform: scale(0.9);
  background: rgba(0, 0, 0, 0.2);
}

/* الـ options لا تأخذ تأثيرات الـ hover */
.subItem[data-type="option"] {
  cursor: default;
}

.subItem[data-type="option"]:hover {
  background: initial;
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 35px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 35px;
    font-size: 15px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 38px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 38px;
    font-size: 16px;
  }
}

/* تحسين للشاشات الصغيرة جداً */
@media (max-width: 480px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 40px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 40px;
    font-size: 17px;
  }
}

.subItemDetails {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

/* Sub-item Prices - نفس تصميم الأسعار الرئيسية */
.subItemPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.subItemPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.subItemTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

.subItemTotal.negative {
  color: #dc3545;
}

.subItemDelete {
  width: 14px;
  height: 14px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.subItemDelete:hover {
  opacity: 1;
}

.subItemDelete img {
  width: 8px;
  height: 8px;
}

/* Item Options - إزالة الفاصل مع المنتج الرئيسي */
.itemOptions {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
}

.optionDetail {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1px;
  padding: 2px 0;
  min-height: 18px;
}

.optionText {
  font-size: 10px;
  color: #666;
  font-weight: 400;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
  flex: 1;
}

/* Option Prices - نفس تصميم الأسعار الرئيسية */
.optionPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.optionPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.optionTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

/* Order Footer */
.orderFooter {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summaryRows {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-sm) * 0.8);
  margin-bottom: var(--spacing-md);
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px);
  font-weight: 500;
  line-height: 1.3;
}

.summaryRow span:last-child {
  font-weight: 700;
  color: var(--text-primary);
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px);
  font-weight: 700;
  padding-top: var(--spacing-md);
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md);
}

.actionButtons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.actionButton {
  height: clamp(40px, 7vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.actionButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.actionButton:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.actionButton.send {
  background: var(--primary-red);
}

.actionButton.print {
  background: var(--primary-blue);
}

.actionButton.pay {
  background: var(--primary-green);
}

/* Responsive Design */
@media (max-width: 1366px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .orderItems {
    max-height: 45vh;
  }
}

@media (max-width: 1024px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.4);
  }
  
  .orderItems {
    max-height: 42vh;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 4px;
  }
}

@media (max-width: 768px) {
  .subItemName {
    font-size: 9px;
  }
  
  .subItemPrice {
    font-size: 7px;
  }
  
  .subItemTotal {
    font-size: 8px;
  }
  
  .subItemDelete {
    width: 12px;
    height: 12px;
  }
  
  .subItemDelete img {
    width: 6px;
    height: 6px;
  }
  
  .optionText {
    font-size: 9px;
  }
  
  .optionPrice {
    font-size: 7px;
  }
  
  .optionTotal {
    font-size: 8px;
  }
}

@media (max-width: 480px) {
  .orderItemContainer {
    margin-bottom: 8px;
  }
  
  .subItem {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 16px;
  }
  
  .optionDetail {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 14px;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 3px;
  }
}


/* Comments Container */
.commentsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #e3f2fd;
}

.commentItem {
  display: flex;
  align-items: flex-start;
  gap: 6px;
  padding: 3px 0;
  margin-bottom: 2px;
  min-height: 20px;
}

.commentIcon {
  font-size: 10px;
  color: #2196f3;
  margin-top: 1px;
  flex-shrink: 0;
}

.commentText {
  font-size: 10px;
  color: #2196f3;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
  font-style: italic;
  word-wrap: break-word;
  flex: 1;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .commentText {
    font-size: 9px;
  }
  
  .commentIcon {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .commentItem {
    padding: 2px 0;
    margin-bottom: 1px;
    min-height: 16px;
  }
  
  .commentText {
    font-size: 8px;
  }
  
  .commentIcon {
    font-size: 8px;
  }
}










/* زر الحذف المدمج */
.deleteButtonInline {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 10px;
  font-weight: 600;
  cursor: pointer;
  margin-left: 8px;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 18px;
  height: 16px;
}

.deleteButtonInline:hover {
  background: #c82333;
  transform: scale(1.1);
}

/* تحديث SubItem لتقليل المسافات */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0; /* تقليل المسافة */
  margin-bottom: 0px; /* إزالة المسافة السفلية */
  min-height: 18px; /* تقليل الارتفاع */
  cursor: pointer;
}

.subItem:hover {
  background: rgba(0, 0, 0, 0.02);
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.1; /* تحسين المسافة بين الأسطر */
  font-family: 'Cairo', sans-serif;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

/* تحديث OrderItemContainer لتقليل المسافة */
.orderItemContainer {
  margin-bottom: clamp(6px, 1vw, 10px); /* تقليل المسافة */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding-bottom: clamp(4px, 0.8vw, 8px); /* تقليل المسافة */
}

/* تحديث SubItemsContainer */
.subItemsContainer {
  margin-top: -2px; /* تقليل الفجوة مع المنتج الأساسي */
  padding-left: 12px; /* تقليل المسافة اليسرى */
  border-left: 2px solid #f0f0f0;
}

/* تحديث SubItemDetails */
.subItemDetails {
  display: flex;
  align-items: center;
  gap: 4px; /* تقليل المسافة */
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 3px; /* تقليل المسافة */
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* تحديث الـ responsive */
@media (max-width: 768px) {
  .deleteButtonInline {
    font-size: 8px;
    padding: 1px 4px;
    min-width: 16px;
    height: 14px;
  }
  
  .subItem {
    min-height: 16px;
  }
  
  .subItemName {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .deleteButtonInline {
    font-size: 7px;
    padding: 1px 3px;
    min-width: 14px;
    height: 12px;
  }
  
  .subItem {
    min-height: 14px;
  }
  
  .subItemName {
    font-size: 8px;
  }
  
  .orderItemContainer {
    margin-bottom: 4px;
    padding-bottom: 4px;
  }
  
  .subItemsContainer {
    padding-left: 8px;
  }
}









/* تحديث SubItemBadge */
.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* حالة الحذف - يكبر ويصبح قابل للنقر */
.subItemBadge.deletable {
  width: 18px;
  height: 18px;
  font-size: 10px;
  cursor: pointer;
  transform: scale(1.1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.subItemBadge.deletable:hover {
  transform: scale(1.2);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
}

.subItemBadge.deletable:active {
  transform: scale(1.0);
}
/* ألوان الـ badges */
.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.extra.deletable {
  background: #dc3545; /* أحمر للحذف */
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.without.deletable {
  background: #dc3545; /* يبقى أحمر */
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemBadge.option.deletable {
  background: #dc3545; /* أحمر للحذف */
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .subItemBadge.deletable {
    width: 22px; /* أكبر للتابلت */
    height: 22px;
    font-size: 12px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .subItemBadge.deletable {
    width: 20px;
    height: 20px;
    font-size: 11px;
  }
}

@media (max-width: 480px) {
  .subItemBadge.deletable {
    width: 24px; /* أكبر للشاشات الصغيرة */
    height: 24px;
    font-size: 12px;
  }
}















/* إضافة هذه الأنماط لـ OrderSummary.module.css */

.customerInputContainer {
  position: relative;
  margin-bottom: var(--spacing-lg);
}

.customerInput {
  display: flex;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customerField {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Cairo', sans-serif;
  background: transparent;
}

.customerField:focus {
  outline: none;
}

.customerButton {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customerButton:hover {
  background: #025bb5;
}

.customerButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

/* Customer Dropdown Styles */
.customerDropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid var(--border-color);
  border-top: none;
  border-radius: 0 0 6px 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 300px;
  overflow-y: auto;
}

.dropdownHeader {
  padding: 8px 12px;
  background: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  font-size: 12px;
  font-weight: 600;
  color: #495057;
}

.customerOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #f1f3f4;
  transition: background 0.2s ease;
}

.customerOption:hover {
  background: #f8f9fa;
}

.customerOption:last-child {
  border-bottom: none;
}

.customerInfo {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.customerName {
  font-weight: 600;
  font-size: 14px;
  color: #333;
}

.customerPhone {
  font-size: 12px;
  color: #666;
}

.customerDetails {
  font-size: 11px;
  color: #999;
}

.searchingMessage {
  padding: 16px;
  text-align: center;
  color: #666;
  font-size: 12px;
}

.noResults {
  padding: 16px;
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.noResults span {
  color: #666;
  font-size: 12px;
}

.addNewCustomerBtn {
  background: var(--primary-blue);
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  transition: background 0.2s ease;
}

.addNewCustomerBtn:hover {
  background: #025bb5;
}

/* Address Selection Dropdown */
.addressSelectionContainer {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid var(--border-color);
  border-top: none;
  border-radius: 0 0 6px 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 1001;
  max-height: 250px;
  overflow-y: auto;
}

.addressHeader {
  padding: 8px 12px;
  background: #e3f2fd;
  border-bottom: 1px solid #bbdefb;
  font-size: 12px;
  font-weight: 600;
  color: #1976d2;
}

.addressOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #f1f3f4;
  transition: background 0.2s ease;
}

.addressOption:hover {
  background: #f8f9fa;
}

.addressOption:last-child {
  border-bottom: none;
}

.addressInfo {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.addressLine {
  font-weight: 600;
  font-size: 13px;
  color: #333;
}

.addressDetails {
  font-size: 11px;
  color: #666;
}

.addressLandmark {
  font-size: 10px;
  color: #999;
  font-style: italic;
}

/* Selected Customer Display */
.selectedCustomerInfo {
  background: #e3f2fd;
  border: 1px solid #bbdefb;
  border-radius: 4px;
  padding: 8px 12px;
  margin-bottom: var(--spacing-md);
}

.customerDisplayName {
  font-weight: 600;
  font-size: 13px;
  color: #1976d2;
  margin-bottom: 4px;
}

.selectedAddressInfo {
  font-size: 11px;
  color: #1976d2;
  opacity: 0.8;
}

/* Responsive */
@media (max-width: 768px) {
  .customerDropdown,
  .addressSelectionContainer {
    max-height: 200px;
  }
  
  .customerOption,
  .addressOption {
    padding: 8px;
  }
  
  .customerName,
  .addressLine {
    font-size: 12px;
  }
  
  .customerPhone,
  .addressDetails {
    font-size: 10px;
  }
}






.selectedOption {
  background-color: #007bff !important;
  color: white !important;
}

.selectedOption .customerName,
.selectedOption .customerPhone,
.selectedOption .customerDetails {
  color: white !important;
}

.customerDropdown {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: white;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.customerOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
  transition: background-color 0.2s;
}

.customerOption:hover {
  background-color: #f5f5f5;
}

.customerOption:last-child {
  border-bottom: none;
}



/* أنماط البحث المحسن */
.customerField:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.customerButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.selectedOption {
  background-color: #007bff !important;
  color: white;
}

.selectedOption .customerName,
.selectedOption .customerPhone,
.selectedOption .customerDetails {
  color: white;
}

.addNewCustomerBtn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.searchingMessage {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  color: #666;
  font-size: 14px;
  justify-content: center;
}

.loadingSpinner {
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}





/* إضافة styles للحالة الخاصة بـ Takeaway */
.takeawayButtons {
  display: flex;
  justify-content: center;
}

.takeawayButtons .actionButton.pay.fullWidth {
  flex: 1;
  min-width: 100%;
  max-width: 100%;
}

/* للتأكد من أن الزر يأخذ العرض الكامل */
.actionButton.fullWidth {
  width: 100% !important;
  flex-grow: 1;
}


============================================================
FILE: src/Pages/pos/newSales/styles/PaymentPopup.module.css
============================================================
.overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.popup {
  background: #f5f5f5;
  width: clamp(90vw, 95vw, 1800px);
  height: clamp(85vh, 90vh, 1200px);
  border-radius: clamp(8px, 1.5vw, 16px);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

/* Header */
.header {
  background: white;
  height: clamp(60px, 10vh, 80px);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 clamp(20px, 4vw, 40px);
  border-bottom: 2px solid #e9ecef;
  position: relative;
}

.logo {
  display: flex;
  align-items: center;
}

.logo img {
  height: clamp(40px, 8vh, 60px);
  width: auto;
}

.title {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  font-family: "Cairo-Bold", Helvetica;
  font-weight: 700;
  color: #333;
  font-size: clamp(18px, 3vw, 24px);
  margin: 0;
  direction: rtl;
}

.closeBtn {
  background: #ff6b6b;
  color: white;
  border: none;
  width: clamp(30px, 5vw, 40px);
  height: clamp(30px, 5vw, 40px);
  border-radius: 50%;
  font-size: clamp(18px, 3vw, 24px);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.closeBtn:hover {
  background: #ff5252;
  transform: scale(1.1);
}

/* المحتوى الرئيسي */
.content {
  flex: 1;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: clamp(10px, 2vw, 20px);
  padding: clamp(10px, 2vw, 20px);
  overflow: hidden;
  min-height: 0;
}

/* الأجزاء الثلاثة */
.leftSection,
.centerSection,
.rightSection {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 0;
  border-radius: clamp(8px, 1.5vw, 12px);
  overflow: hidden;
}




/* Responsive Design لجميع شاشات الكمبيوتر/اللابتوب */

/* شاشات كبيرة جداً 2560px+ */
@media (min-width: 2560px) {
  .popup {
    width: 85vw;
    height: 85vh;
  }
  
  .content {
    gap: clamp(20px, 2.5vw, 30px);
    padding: clamp(20px, 2.5vw, 30px);
  }
}

/* شاشات كبيرة 1920px - 2559px */
@media (max-width: 2559px) and (min-width: 1920px) {
  .popup {
    width: 90vw;
    height: 88vh;
  }
}

/* شاشات قياسية 1680px - 1919px */
@media (max-width: 1919px) and (min-width: 1680px) {
  .popup {
    width: 92vw;
    height: 90vh;
  }
}

/* شاشات متوسطة 1440px - 1679px */
@media (max-width: 1679px) and (min-width: 1440px) {
  .popup {
    width: 95vw;
    height: 92vh;
  }
  
  .content {
    gap: clamp(12px, 1.8vw, 18px);
    padding: clamp(12px, 1.8vw, 18px);
  }
}

/* شاشات صغيرة 1366px - 1439px */
@media (max-width: 1439px) and (min-width: 1366px) {
  .popup {
    width: 98vw;
    height: 95vh;
  }
  
  .header {
    height: clamp(50px, 8vh, 70px);
    padding: 0 clamp(15px, 3vw, 30px);
  }
  
  .content {
    gap: clamp(10px, 1.5vw, 15px);
    padding: clamp(10px, 1.5vw, 15px);
  }
}

/* لابتوب كبير 1280px - 1365px */
@media (max-width: 1365px) and (min-width: 1280px) {
  .popup {
    width: 99vw;
    height: 98vh;
    border-radius: clamp(6px, 1vw, 12px);
  }
  
  .header {
    height: clamp(50px, 7vh, 65px);
  }
  
  .content {
    gap: clamp(8px, 1.2vw, 12px);
    padding: clamp(8px, 1.2vw, 12px);
  }
}

/* لابتوب متوسط 1024px - 1279px */
@media (max-width: 1279px) and (min-width: 1024px) {
  .popup {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
  }
  
  .header {
    height: clamp(45px, 6vh, 60px);
    padding: 0 clamp(12px, 2vw, 20px);
  }
  
  .logo img {
    height: clamp(35px, 6vh, 50px);
  }
  
  .title {
    font-size: clamp(16px, 2.5vw, 20px);
  }
  
  .closeBtn {
    width: clamp(28px, 4vw, 35px);
    height: clamp(28px, 4vw, 35px);
    font-size: clamp(16px, 2.5vw, 20px);
  }
  
  .content {
    gap: clamp(6px, 1vw, 10px);
    padding: clamp(6px, 1vw, 10px);
  }
}

/* لابتوب صغير/تابلت كبير 768px - 1023px */
@media (max-width: 1023px) {
  .popup {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
  }
  
  .header {
    height: clamp(40px, 5vh, 50px);
    padding: 0 clamp(10px, 1.5vw, 15px);
  }
  
  .logo img {
    height: clamp(30px, 4vh, 40px);
  }
  
  .title {
    font-size: clamp(14px, 2vw, 18px);
  }
  
  .closeBtn {
    width: clamp(25px, 3.5vw, 30px);
    height: clamp(25px, 3.5vw, 30px);
    font-size: clamp(14px, 2vw, 18px);
  }
  
  .content {
    grid-template-columns: 1fr;
    grid-template-rows: minmax(0, 0.4fr) minmax(0, 1fr) minmax(0, 0.6fr);
    gap: clamp(5px, 0.8vw, 8px);
    padding: clamp(5px, 0.8vw, 8px);
  }
  
  .leftSection {
    order: 1;
    overflow-y: auto;
  }
  
  .centerSection {
    order: 2;
  }
  
  .rightSection {
    order: 3;
    overflow-y: auto;
  }
}

/* شاشات صغيرة جداً */
@media (max-width: 768px) {
  .content {
    grid-template-rows: minmax(200px, 30vh) 1fr minmax(150px, 25vh);
  }
}

@media (max-width: 480px) {
  .header {
    flex-direction: row;
    justify-content: space-between;
  }
  
  .title {
    position: static;
    transform: none;
    font-size: clamp(12px, 3vw, 16px);
  }
  
  .content {
    grid-template-rows: minmax(150px, 25vh) 1fr minmax(120px, 20vh);
  }
}




============================================================
FILE: src/Pages/pos/newSales/styles/popup.css
============================================================
/* src/Pages/pos/newSales/styles/popup.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.popup-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.popup-title {
  font-size: 20px;
  font-weight: 700;
  color: var(--text-primary);
  margin: 0;
}

.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
}


.popup-close:hover {
  background: #f0f0f0;
  transform: scale(1.1);
}

.popup-close img {
  width: 20px;
  height: 20px;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
  transition: color 0.2s ease;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

.popup-body {
  padding: 20px;
}

.quantity-display {
  text-align: center;
  font-size: 18px;
  font-weight: 600;
  color: var(--primary-blue);
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 8px;
}

.prices-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
}

.price-card {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.price-card:hover {
  border-color: var(--primary-blue);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.price-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  text-align: center;
}

.price-value {
  display: flex;
  align-items: baseline;
  gap: 5px;
}

.price-value .price {
  font-size: 20px;
  font-weight: 700;
  color: var(--primary-blue);
}

.price-value .currency {
  font-size: 14px;
  color: var(--text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .popup-content {
    width: 95%;
    margin: 20px;
  }
  
  .prices-grid {
    grid-template-columns: 1fr;
  }
  
  .popup-header {
    padding: 15px;
  }
  
  .popup-body {
    padding: 15px;
  }
}



@media (max-width: 768px) {
  .popup-close {
    width: 32px;
    height: 32px;
    padding: 6px;
  }
  
  .popup-close .MuiSvgIcon-root {
    font-size: 18px !important;
  }
}


.options-popup {
  max-width: 600px;
  max-height: 85vh;
}

.popup-title-section {
  flex: 1;
}

.popup-subtitle {
  font-size: 14px;
  color: var(--text-secondary);
  margin-top: 4px;
}

.group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.group-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.group-progress {
  font-size: 12px;
  color: var(--text-secondary);
  background: #f0f0f0;
  padding: 4px 8px;
  border-radius: 4px;
}

.group-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.selection-info {
  display: flex;
  align-items: center;
  gap: 10px;
}

.required-badge {
  background: var(--primary-red);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.selection-count {
  font-size: 14px;
  color: var(--text-primary);
  font-weight: 500;
}

.min-selection {
  font-size: 12px;
  color: var(--text-secondary);
}

.options-list {
  max-height: 300px;
  overflow-y: auto;
  margin-bottom: 20px;
}

.option-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border: 1px solid #eee;
  border-radius: 8px;
  margin-bottom: 10px;
  transition: all 0.2s ease;
}

.option-item:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.option-info {
  flex: 1;
}

.option-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 4px;
}

.option-price {
  font-size: 14px;
  color: var(--primary-green);
  font-weight: 500;
}

.comment-only {
  font-size: 12px;
  color: var(--text-secondary);
  font-style: italic;
}

.option-controls {
  display: flex;
  align-items: center;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 10px;
}

.quantity-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantity-btn:hover:not(:disabled) {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.quantity-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantity-btn.plus {
  border-color: var(--primary-green);
  color: var(--primary-green);
}

.quantity-btn.minus {
  border-color: var(--primary-red);
  color: var(--primary-red);
}

.quantity-display {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 20px;
  text-align: center;
}

.select-btn {
  padding: 8px 16px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.select-btn:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.select-btn.selected {
  background: var(--primary-blue);
  color: white;
  border-color: var(--primary-blue);
}

.popup-footer {
  border-top: 1px solid #eee;
  padding: 15px 20px;
}

.footer-buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.footer-buttons button {
  padding: 10px 20px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-cancel {
  background: #f5f5f5;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-cancel:hover {
  background: #e0e0e0;
}

.btn-back {
  background: #f8f9fa;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-back:hover {
  background: #e9ecef;
}

.btn-skip {
  background: var(--primary-orange);
  border: 1px solid var(--primary-orange);
  color: white;
}

.btn-skip:hover {
  opacity: 0.9;
}

.btn-skip:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-next {
  background: var(--primary-blue);
  border: 1px solid var(--primary-blue);
  color: white;
}

.btn-next:hover:not(:disabled) {
  opacity: 0.9;
}

.btn-next:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* عرض الخيارات في الفاتورة */
.item-options {
  margin-top: 4px;
  padding-left: 10px;
}

.option-detail {
  margin-bottom: 2px;
}

.option-text {
  font-size: 11px;
  color: var(--text-secondary);
  font-weight: 400;
  line-height: 1.3;
}

/* Responsive */
@media (max-width: 768px) {
  .options-popup {
    width: 98%;
    max-height: 90vh;
  }
  
  .option-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .option-controls {
    align-self: flex-end;
  }
  
  .footer-buttons {
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .footer-buttons button {
    flex: 1;
    min-width: 80px;
  }
}

============================================================
FILE: src/Pages/pos/newSales/styles/PriceSelectionPopup.module.css
============================================================
/* src/Pages/pos/newSales/components/PriceSelectionPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease-out;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  width: 50%;
  max-height: 80vh;
  overflow-y: auto;
  animation: slideIn 0.3s ease-out;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #eee;
}

.popupTitle {
  font-size: 20px;
  font-weight: 600;
  color: #333;
  margin: 0;
}

.popupClose {
  width: 36px;
  height: 36px;
  border: none;
  background: #f5f5f5;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #e9ecef;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.quantityDisplay {
  text-align: center;
  font-size: 16px;
  font-weight: 500;
  color: #666;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.pricesGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 15px;
}

.priceCard {
  border: 2px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.priceCard:hover {
  border-color: #0373ed;
  background: #f8f9ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.priceName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin-bottom: 10px;
}

.priceValue {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
}

.price {
  font-size: 24px;
  font-weight: 700;
  color: #0373ed;
}

.currency {
  font-size: 14px;
  color: #666;
  font-weight: 500;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 95%;
    margin: 10px;
  }
  
  .pricesGrid {
    grid-template-columns: 1fr;
  }
  
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .popupTitle {
    font-size: 18px;
  }
}


============================================================
FILE: src/Pages/pos/newSales/styles/ProductCard.module.css
============================================================
/* src/Pages/pos/newSales/styles/ProductCard.module.css */

.productCard {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  height: auto; /* تغيير من fixed height إلى auto */
  min-height: 180px; /* حد أدنى للارتفاع */
}

.productCard:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.productCard:active {
  transform: translateY(-2px);
}

.productImageContainer {
  position: relative;
  width: 100%;
  height: 120px; /* ارتفاع ثابت للصورة */
  overflow: hidden;
}

.productImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.productCard:hover .productImage {
  transform: scale(1.05);
}

/* النص المعروض على الصورة (السعر) */
.priceOverlay {
  position: absolute;
  top: 8px;
  right: 8px;
  background: rgba(3, 115, 237, 0.9);
  color: white;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  backdrop-filter: blur(4px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.productInfo {
  padding: 12px;
  flex: 1; /* يأخذ باقي المساحة المتاحة */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.productName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin: 0;
  line-height: 1.4;
  text-align: center;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* إزالة height constraints لتسمح بالتوسع */
}

/* Responsive Design */
@media (max-width: 1366px) {
  .productCard {
    min-height: 160px;
  }
  
  .productImageContainer {
    height: 100px;
  }
  
  .productName {
    font-size: 13px;
  }
  
  .priceOverlay {
    font-size: 11px;
    padding: 3px 6px;
  }
}

@media (max-width: 1024px) {
  .productCard {
    min-height: 140px;
  }
  
  .productImageContainer {
    height: 90px;
  }
  
  .productName {
    font-size: 12px;
  }
  
  .productInfo {
    padding: 10px;
  }
  
  .priceOverlay {
    font-size: 10px;
    padding: 2px 5px;
  }
}

@media (max-width: 768px) {
  .productCard {
    min-height: 120px;
  }
  
  .productImageContainer {
    height: 80px;
  }
  
  .productName {
    font-size: 11px;
  }
  
  .productInfo {
    padding: 8px;
  }
  
  .priceOverlay {
    font-size: 9px;
    padding: 2px 4px;
  }
}

@media (max-width: 480px) {
  .productCard {
    min-height: 100px;
  }
  
  .productImageContainer {
    height: 70px;
  }
  
  .productName {
    font-size: 10px;
  }
  
  .productInfo {
    padding: 6px;
  }
  
  .priceOverlay {
    font-size: 8px;
    padding: 1px 3px;
  }
}


============================================================
FILE: src/Pages/pos/newSales/styles/ProductOptionsPopup.module.css
============================================================
/* src/Pages/pos/newSales/components/ProductOptionsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  max-width: 700px;
  width: 50%;
  max-height: 85vh;
  overflow-y: auto;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 20px;
  border-bottom: 1px solid #e9ecef;
  background: #f8f9fa;
}

.popupTitleSection {
  flex: 1;
}

.popupTitle {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  margin: 0 0 5px 0;
  font-family: 'Cairo', sans-serif;
}

.popupSubtitle {
  font-size: 14px;
  color: #666;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.popupClose {
  width: 32px;
  height: 32px;
  border: none;
  background: #e9ecef;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #dee2e6;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.optionsContainer {
  display: flex;
  flex-direction: column;
  gap: 25px;
}

.optionGroup {
  background: #f8f9fa;
  border-radius: 12px;
  padding: 20px;
  border-left: 4px solid #0373ed;
}

.groupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #e9ecef;
}

.groupTitle {
  display: flex;
  align-items: center;
  gap: 10px;
}

.groupName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
}

.requiredBadge {
  background: #e74c3c;
  color: white;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 10px;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.groupInfo {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.selectionCount {
  font-weight: 600;
  color: #0373ed;
}

.minSelection {
  color: #666;
}

.optionsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 12px;
}

.optionCard {
  background: white;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  padding: 16px;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.optionCard:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.15);
}

.optionCard.selected {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.2);
}

.optionContent {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
  text-align: center;
}

.optionInfo {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.optionName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
}

.optionPrice {
  font-size: 12px;
  color: #e74c3c;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.optionControls {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

/* للمجموعات المتعددة */
.quantitySection {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  justify-content: center;
}

.removeBtn {
  width: 28px;
  height: 28px;
  border: none;
  border-radius: 50%;
  background: #dc3545;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

.removeBtn:hover {
  background: #c82333;
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

.quantityBadge {
  background: #0373ed;
  color: white;
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 14px;
  font-weight: 600;
  min-width: 32px;
  text-align: center;
  font-family: 'Cairo', sans-serif;
  box-shadow: 0 2px 4px rgba(3, 115, 237, 0.2);
}

.addIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .addIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.maxReached {
  padding: 6px 12px;
  background: #f8f9fa;
  border-radius: 16px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

/* للمجموعات الفردية */
.singleSelect {
  display: flex;
  justify-content: center;
  align-items: center;
}

.selectedIcon {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #28a745;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
}

.unselectedIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .unselectedIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.totalSection {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #e9ecef;
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 18px;
  font-weight: 600;
  font-family: 'Cairo', sans-serif;
}

.totalLabel {
  color: #333;
}

.totalValue {
  color: #0373ed;
}

.popupFooter {
  display: flex;
  gap: 12px;
  padding: 20px;
  border-top: 1px solid #e9ecef;
  background: #f8f9fa;
}

.btnCancel {
  flex: 1;
  padding: 12px;
  background: #f8f9fa;
  color: #666;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnCancel:hover {
  background: #e9ecef;
}

.btnConfirm {
  flex: 2;
  padding: 12px;
  background: #0373ed;
  color: white;
  border: 1px solid #0373ed;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnConfirm:hover:not(:disabled) {
  background: #0256c7;
}

.btnConfirm:disabled {
  background: #ccc;
  border-color: #ccc;
  cursor: not-allowed;
}

/* تأثيرات النقر */
.optionCard:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(3, 115, 237, 0.2);
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 98%;
    max-height: 90vh;
  }
  
  .optionsGrid {
    grid-template-columns: 1fr;
  }
  
  .groupHeader {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .popupFooter {
    flex-direction: column;
  }
  
  .optionGroup {
    padding: 15px;
  }
}

@media (max-width: 480px) {
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .optionCard {
    padding: 12px;
  }
  
  .popupTitle {
    font-size: 16px;
  }
  
  .groupName {
    font-size: 14px;
  }
  
  .optionName {
    font-size: 13px;
  }
  
  .removeBtn {
    width: 24px;
    height: 24px;
  }
  
  .quantityBadge {
    padding: 4px 8px;
    font-size: 12px;
  }
  
  .selectedIcon,
  .unselectedIcon,
  .addIcon {
    width: 28px;
    height: 28px;
  }
}


============================================================
FILE: src/Pages/pos/newSales/styles/responsive.css
============================================================
/* src/Pages/pos/newSales/styles/responsive.css */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');


html[dir="rtl"] .pos-system,
html[dir="rtl"] .pos-system * {
  direction: ltr !important;
}


/* تحديد نظام الوحدات المرن */
:root {
  --base-font-size: clamp(10px, 0.8vw, 16px);
  --scale-factor: clamp(0.8, 1vw, 1.2);
  
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
  --spacing-xxl: calc(3rem * var(--scale-factor));
  
  /* Component heights */
  --header-height: clamp(60px, 8vh, 100px);
  --keypad-height: clamp(80px, 8vh, 120px);
  --action-bar-height: clamp(50px, 7vh, 80px);
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
      font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;

}

html {
  font-size: var(--base-font-size);
  height: 100%;
}

body {
  font-family: 'Nunito', sans-serif;
  background-color: var(--bg-main);
  color: var(--text-primary);
  height: 100%;
  overflow: hidden;
    direction: ltr !important;

}

/* Main container */
.pos-system {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
    direction: ltr !important;
}

/* Top Bar */
.top-bar {
  height: var(--header-height);
  background: var(--bg-white);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.top-bar-content {
  height: 100%;
  padding: 0 var(--spacing-xl);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  text-decoration: none;
  color: var(--text-primary);
  font-size: clamp(12px, 1.2vw, 18px);
  font-weight: 500;
  transition: all 0.2s ease;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: var(--primary-blue);
}

.nav-item img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

.order-type-select {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: clamp(12px, 1.2vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: var(--bg-white);
  min-width: 120px;
}

.menu-button {
  padding: var(--spacing-sm);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(20px, 2vw, 28px);
  height: clamp(20px, 2vw, 28px);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  overflow: hidden;
}

/* Products Section */
.products-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  overflow: hidden;
}

/* Number Pad Bar */
.number-pad-bar {
  height: var(--keypad-height);
  display: flex;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1px;
  background: var(--border-color);
}

.keypad-key {
  background: var(--bg-white);
  border: none;
  font-size: clamp(18px, 2.5vw, 32px);
  font-weight: 600;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypad-key:hover {
  background: #f8f9fa;
}

.keypad-display {
  width: clamp(120px, 15vw, 200px);
  background: var(--primary-blue);
  color: white;
  font-size: clamp(20px, 2.8vw, 36px);
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Action Buttons Bar */
.action-buttons-bar {
  height: var(--action-bar-height);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  flex-shrink: 0;
}

.action-chips {
  display: flex;
  gap: var(--spacing-md);
}

.action-chip {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(12px, 1.4vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.action-chip img {
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
}

.action-chip.extra { background: var(--primary-green); }
.action-chip.without { background: var(--primary-red); }
.action-chip.offer { background: var(--primary-orange); }

.action-chip:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.search-container {
  position: relative;
  display: flex;
  background: var(--bg-white);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  height: 85%;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
  z-index: 1;
}

.search-input {
  width: clamp(200px, 25vw, 350px);
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: calc(var(--spacing-md) * 2 + 20px);
  border: none;
  font-size: clamp(12px, 1.4vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
  height: 100%;
}

.search-input:focus {
  outline: none;
}

.filter-button {
  width: clamp(40px, 5vw, 60px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.filter-button:hover {
  background: #025bb5;
}

.filter-button img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  padding: 20px;
  max-height: calc(100vh - 200px);
  overflow-y: auto;
  overflow-x: hidden;
}


.product-grid::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-grid::-webkit-scrollbar-track {
  background: transparent;
}

.product-grid::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.product-card {
  aspect-ratio: 3/4;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: none;
  display: flex;
  flex-direction: column;
    min-width: 0; /* للسماح بالتقلص */

}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 70%;
  object-fit: cover;
    flex-shrink: 0;

}

.product-info {
  height: 30%;
  padding: clamp(4px, 0.8vw, 12px);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: clamp(4px, 0.6vw, 8px);
  width: 100%;
  min-height: 0;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1.2vw, 16px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
  text-align: right; /* محاذاة لليمين للنص العربي */
  flex: 1; /* يأخذ المساحة المتاحة */
  min-width: 0; /* يسمح بالتقلص */
  word-wrap: break-word;
    flex-direction: row; /* تغيير من column إلى row */

  overflow-wrap: break-word;
  hyphens: auto;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* السماح بسطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: clamp(2px, 0.3vw, 4px);
  width: 100%;
}

.product-price .price {
  font-size: clamp(9px, 1.4vw, 18px);
  font-weight: 700;
  color: var(--text-primary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}
.product-price .currency {
  font-size: clamp(7px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-secondary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}

/* Categories Sidebar */
.categories-sidebar {
  width: clamp(80px, 10vw, 120px);
  background: transparent;
  flex-shrink: 0;
}

.categories-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  height: 100%;
  overflow-y: auto;
  padding: var(--spacing-sm);
 scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.categories-list::-webkit-scrollbar {
  width: 4px;
}

.categories-list::-webkit-scrollbar-track {
  background: transparent;
}

.categories-list::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.category-item {
  aspect-ratio: 1;
  background: var(--bg-white);
  border-radius: 8px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-sm);
  text-align: center;
}

.category-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border-color: var(--primary-blue);
}

.category-item img {
  width: clamp(24px, 3vw, 48px);
  height: clamp(24px, 3vw, 48px);
  object-fit: contain;
}

.category-item span {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
}

/* Order Summary */
.order-summary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.order-header {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.order-total {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.order-total .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.order-total .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

.order-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.order-content::-webkit-scrollbar {
  width: 6px;
}

.order-content::-webkit-scrollbar-track {
  background: transparent;
}

.order-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.order-title {
  font-size: clamp(14px, 1.6vw, 20px);
  font-weight: 700;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  
}

.customer-input {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customer-field {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
}

.customer-field:focus {
  outline: none;
}

.customer-button {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customer-button:hover {
  background: #025bb5;
}

.customer-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.order-items {
  max-height: 50vh; /* زيادة من 40vh إلى 50vh */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.order-items::-webkit-scrollbar {
  width: 4px;
}

.order-items::-webkit-scrollbar-track {
  background: transparent;
}

.order-items::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.item-details {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0; /* للسماح بالتقلص */
}

.delete-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.delete-button:hover {
  background: rgba(229, 57, 53, 0.1);
}

.delete-button img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.item-info {
  flex: 1;
  min-width: 0;
}

.item-name {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
}

.item-extra {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.extra-price,
.extra-total {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
}

.item-prices {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  min-width: fit-content;
}

.item-price::after {
  content: "|";
  margin-left: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: normal;
}

.item-price {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
}

.item-total {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
}

.order-footer {
  padding: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm); /* كان var(--spacing-md) */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px); /* كان 11px, 1.3vw, 16px */
  font-weight: 500;
  line-height: 1.3; /* إضافة line-height للوضوح */
}

.summary-row span:last-child {
  font-weight: 700;
  color: var(--text-primary); /* تأكيد اللون */
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px); /* كان 14px, 1.6vw, 20px */
  font-weight: 700;
  padding-top: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.action-button {
  height: clamp(40px, 6vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
}

.action-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.action-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.action-button.send { background: var(--primary-red); }
.action-button.print { background: var(--primary-blue); }
.action-button.pay { background: var(--primary-green); }

/* Responsive breakpoints */
@media (max-width: 1366px) {
  :root {
    --scale-factor: 0.9;
  }
    .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.8);
  }
  
  .order-items {
    max-height: 45vh;
  }
  
}

@media (max-width: 1024px) {
  :root {
    --scale-factor: 0.8;
  }
  
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .order-items {
    max-height: 42vh;
  }
}

@media (min-width: 1920px) {
  :root {
    --scale-factor: 1.1;
  }
}

@media (min-width: 2560px) {
  :root {
    --scale-factor: 1.3;
  }
}

/* Print styles */
@media print {
  .pos-system {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
}



/* إضافة media query لمنطقة 1400-1600px */
@media (min-width: 1400px) and (max-width: 1600px) {
  :root {
    --scale-factor: 0.95; /* قيمة وسط */
    --base-font-size: clamp(12px, 1vw, 18px); /* تحسين الخط */
  }
  
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: var(--spacing-md);
  }
  
  /* تثبيت ارتفاعات العناصر */
  .action-buttons-bar {
    height: clamp(55px, 8vh, 85px);
  }
  
  
  .top-bar {
    height: clamp(65px, 9vh, 105px);
  }
}

.loading-message {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  font-size: 1.6rem;
  color: var(--text-secondary);
}

.item-size {
  font-size: clamp(9px, 1vw, 12px);
  color: var(--primary-blue);
  font-weight: 500;
}

.product-card .product-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-xs);
}

.product-card .product-name {
  order: 1;
}

.product-card .product-price {
  order: 2;
}


.item-size-inline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em; /* أصغر قليلاً من اسم الصنف */
}

.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

/* تحسين responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .product-name {
    font-size: clamp(7px, 1.1vw, 14px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(8px, 1.3vw, 16px);
  }
  
  .product-price .currency {
    font-size: clamp(6px, 0.9vw, 12px);
  }
}

@media (max-width: 1024px) {
  .product-name {
    font-size: clamp(6px, 1vw, 12px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(7px, 1.2vw, 14px);
  }
  
  .product-price .currency {
    font-size: clamp(5px, 0.8vw, 10px);
  }
  
  .item-prices {
    flex-direction: column;
    gap: 2px;
    align-items: flex-end;
  }
  
  .item-price::after {
    display: none;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .product-name {
    font-size: clamp(10px, 1.4vw, 20px);
  }
  
  .product-price .price {
    font-size: clamp(12px, 1.6vw, 22px);
  }
  
  .product-price .currency {
    font-size: clamp(9px, 1.2vw, 18px);
  }
}

/* جعل الصفحة دائماً LTR */
.pos-system {
  direction: ltr !important;
}

.pos-system * {
  direction: ltr !important;
}

/* تحسين شكل الـ Material UI Icons */
.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

.back-button .MuiSvgIcon-root {
  font-size: 18px !important;
  color: var(--text-primary) !important;
}

/* تحسين شكل زر الإغلاق في الـ popup */
.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup-close:hover {
  background: #f0f0f0;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

/* التأكد من أن الـ popup overlay يمكن الضغط عليه */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  cursor: pointer; /* إضافة cursor للإشارة أنه قابل للضغط */
}

.popup-content {
  cursor: default; /* إزالة cursor من المحتوى */
  /* باقي الـ styles كما هي */
}

/* إضافة animation للـ popup */
.popup-overlay {
  animation: fadeIn 0.2s ease-out;
}

.popup-content {
  animation: slideIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}


/* ضمان عدد المنتجات في الصف حسب حجم الشاشة */

/* شاشات كبيرة جداً - 7 منتجات */
@media (min-width: 1920px) {
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: 20px;
    padding: 24px;
  }
}

/* شاشات كبيرة - 6-7 منتجات */
@media (max-width: 1600px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 18px;
    padding: 22px;
  }
}

/* شاشات متوسطة - 6 منتجات */
@media (max-width: 1400px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 16px;
    padding: 20px;
  }
}

/* شاشات لابتوب - 5-6 منتجات */
@media (max-width: 1200px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 14px;
    padding: 18px;
  }
}

/* شاشات صغيرة - 5 منتجات */
@media (max-width: 1024px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 12px;
    padding: 16px;
  }
}

/* تابلت - 5 منتجات */
@media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    padding: 14px;
  }
}

/* موبايل - 5 منتجات */
@media (max-width: 480px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 8px;
    padding: 12px;
  }
}

/* تحسينات إضافية للشبكة */
.product-grid::-webkit-scrollbar {
  width: 8px;
}

.product-grid::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* تأثيرات الانتقال للشبكة */
.product-grid {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



/* إضافة هذا للـ CSS الموجود */

/* Order Item Selection */
.order-item {
  cursor: pointer;
  transition: all 0.3s ease;
}

.order-item.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 4px solid #0373ed;
}

.order-item:hover {
  background: rgba(0, 0, 0, 0.05);
}

/* Extra/Without Items */
.extra-item {
  border-left: 3px solid #28a745;
}

.without-item {
  border-left: 3px solid #dc3545;
}

.extra-badge {
  background: #28a745;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.without-badge {
  background: #dc3545;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.item-total.negative {
  color: #dc3545;
  font-weight: 600;
}
/* Sub-items styling */
.sub-items-container {
  margin-top: 6px;
  padding-left: 8px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  margin-bottom: 3px;
}

.sub-item-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 2px 0;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-text {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 12px;
  height: 12px;
}

/* Loading and Error states */
.pos-system.loading,
.pos-system.error {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  flex-direction: column;
  gap: 20px;
}

.loading-spinner {
  font-size: 18px;
  color: #666;
}

.error-message {
  font-size: 16px;
  color: #dc3545;
  text-align: center;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-text {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 10px;
    height: 10px;
  }
}



* تصميم التعليق */
.item-note {
  display: flex;
  align-items: flex-start;
  gap: 4px;
  margin-top: 4px;
  padding: 3px 6px;
  background: rgba(108, 117, 125, 0.1);
  border-radius: 4px;
  border-left: 2px solid #6c757d;
}

.note-icon {
  font-size: 10px;
  line-height: 1;
  flex-shrink: 0;
  margin-top: 1px;
}

.note-text {
  font-size: 10px;
  color: #6c757d;
  line-height: 1.2;
  font-style: italic;
  word-wrap: break-word;
  overflow-wrap: break-word;
  flex: 1;
}

/* تأكيد أن التعليق بنفس حجم الخيارات */
.item-note,
.option-detail,
.sub-item {
  font-size: 10px;
  line-height: 1.2;
  margin-top: 3px;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .item-note {
    padding: 2px 4px;
    margin-top: 3px;
  }
  
  .note-icon {
    font-size: 9px;
  }
  
  .note-text {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .item-note {
    padding: 2px 3px;
    margin-top: 2px;
  }
  
  .note-icon {
    font-size: 8px;
  }
  
  .note-text {
    font-size: 8px;
  }
}

/* تحسينات إضافية */
.item-note:empty {
  display: none;
}

.note-text:empty {
  display: none;
}

/* تأثير hover خفيف */
.order-item:hover .item-note {
  background: rgba(108, 117, 125, 0.15);
}


/* للمنتجات الإضافية */
.order-item.extra-item .item-note {
  background: rgba(40, 167, 69, 0.1);
  border-left-color: #28a745;
}

.order-item.extra-item .note-text {
  color: #28a745;
}

/* للمنتجات بدون */
.order-item.without-item .item-note {
  background: rgba(220, 53, 69, 0.1);
  border-left-color: #dc3545;
}

.order-item.without-item .note-text {
  color: #dc3545;
}




/* تحديث Sub-items styling */
.order-item-container {
  margin-bottom: 8px;
}

.sub-items-container {
  margin-top: 6px;
  padding-left: 20px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 4px 0;
  margin-bottom: 2px;
  min-height: 24px;
}

.sub-item-details {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-name {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
}

.sub-item-prices {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 2px;
  min-width: 60px;
}

.sub-item-price {
  font-size: 9px;
  color: #999;
  font-weight: 500;
}

.sub-item-total {
  font-size: 10px;
  color: #333;
  font-weight: 600;
}

.sub-item-total.negative {
  color: #dc3545;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 10px;
  height: 10px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-name {
    font-size: 9px;
  }
  
  .sub-item-price {
    font-size: 8px;
  }
  
  .sub-item-total {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 8px;
    height: 8px;
  }
}


/* حالة الأزرار المعطلة */
.action-chip.disabled {
  opacity: 0.4;
  cursor: not-allowed;
  pointer-events: none;
}

.action-chip.disabled:hover {
  background: inherit;
  border-color: inherit;
  transform: none;
  box-shadow: none;
}

.action-chip.disabled img {
  opacity: 0.5;
}

.action-chip.disabled span {
  opacity: 0.5;
}

/* تحسين الـ tooltip */
.action-chip[title] {
  position: relative;
}

.action-chip[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #333;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  margin-bottom: 5px;
}

.action-chip[title]:hover::before {
  content: '';
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  border: 5px solid transparent;
  border-top-color: #333;
  z-index: 1000;
}




============================================================
FILE: src/Pages/pos/newSales/styles/TableSelectionPopup.module.css
============================================================
/* src/Pages/pos/newSales/components/TableSelectionPopup.module.css */

/* Popup Overlay */
.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popupContainer {
  background: white;
  border-radius: 16px;
  width: 95%;
  max-width: 1400px;
  height: 90vh;
  position: relative;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

/* Close Button */
.closeBtn {
  position: absolute;
  top: 20px;
  left: 20px;
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 8px 16px;
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
  z-index: 1001;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.closeBtn:hover {
  background: #c82333;
  transform: translateY(-2px);
}

/* Main Layout */
.posSystem {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.mainContent {
  flex: 1;
  display: flex;
  height: 100%;
  overflow: hidden;
}

/* Products Section (Tables) */
.productsSection {
  flex: 1;
  background: #f8f9fa;
  padding: 20px;
  overflow-y: auto;
  padding-top: 80px; /* Space for close button */
}

.productGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 16px;
  padding: 20px;
}

.productItem {
  background: white;
  border-radius: 12px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  position: relative;
  min-height: 160px;
}

.productItem:hover:not(.occupied) {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  border-color: #0373ed;
}

.productItem.occupied {
  opacity: 0.6;
  cursor: not-allowed;
  background: #f8f9fa;
}

.productItem.occupied::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(220, 53, 69, 0.1);
  border-radius: 12px;
}

.productImage {
  width: 60px;
  height: 60px;
  border-radius: 8px;
  overflow: hidden;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f0f0f0;
}

.productImage img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.productName {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.productName span {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
}

.productName small {
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.status {
  font-size: 10px;
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: 500;
  margin-top: 4px;
  display: inline-block;
  font-family: 'Cairo', sans-serif;
}

.status.available {
  background: #d4edda;
  color: #155724;
}

.status.occupied {
  background: #f8d7da;
  color: #721c24;
}

/* Categories Sidebar (Sections) */
.categoriesSidebar {
  width: 280px;
  background: white;
  border-left: 1px solid #e9ecef;
  padding: 20px;
  overflow-y: auto;
  height: 100%;
}

.categoriesList {
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding-top: 20px;
}

.categoryItem {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: #f8f9fa;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  text-align: left;
}

.categoryItem:hover {
  background: #e9ecef;
  transform: translateY(-2px);
}

.categoryItem.active {
  background: #0373ed;
  color: white;
  border-color: #0373ed;
}

.categoryItem.active span,
.categoryItem.active small {
  color: white;
}

.categoryItem img {
  width: 40px;
  height: 40px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
}

.categoryItem span {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
  line-height: 1.2;
}

.categoryItem small {
  font-size: 11px;
  color: #666;
  font-family: 'Cairo', sans-serif;
  margin-top: 2px;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 12px;
    padding: 15px;
  }
  
  .categoriesSidebar {
    width: 240px;
  }
  
  .productItem {
    min-height: 140px;
    padding: 12px;
  }
}

@media (max-width: 768px) {
  .popupContainer {
    width: 98%;
    height: 95vh;
  }
  
  .mainContent {
    flex-direction: column;
  }
  
  .categoriesSidebar {
    width: 100%;
    height: 120px;
    border-left: none;
    border-top: 1px solid #e9ecef;
    padding: 15px;
  }
  
  .categoriesList {
    flex-direction: row;
    overflow-x: auto;
    gap: 8px;
    padding-top: 10px;
  }
  
  .categoryItem {
    min-width: 120px;
    padding: 8px;
    gap: 8px;
  }
  
  .categoryItem img {
    width: 32px;
    height: 32px;
  }
  
  .categoryItem span {
    font-size: 12px;
  }
  
  .categoryItem small {
    font-size: 10px;
  }
  
  .productsSection {
    padding: 15px;
    padding-top: 70px;
  }
  
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 10px;
    padding: 10px;
  }
  
  .productItem {
    min-height: 120px;
    padding: 10px;
  }
  
  .productImage {
    width: 50px;
    height: 50px;
    margin-bottom: 8px;
  }
  
  .productName span {
    font-size: 12px;
  }
  
  .productName small {
    font-size: 10px;
  }
  
  .closeBtn {
    top: 10px;
    left: 10px;
    padding: 6px 12px;
    font-size: 12px;
  }
}

@media (max-width: 480px) {
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 8px;
  }
  
  .productItem {
    min-height: 100px;
    padding: 8px;
  }
  
  .productImage {
    width: 40px;
    height: 40px;
  }
  
  .productName span {
    font-size: 11px;
  }
  
  .status {
    font-size: 9px;
    padding: 1px 4px;
  }
}



/* أنماط المؤقت */
.timerOverlay {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  backdrop-filter: blur(4px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  z-index: 10;
}

.timerInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.75rem;
  margin-top: 2px;
  color: #666;
}

.occupiedStatus {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.sectionStats {
  margin-top: 4px;
}

.tableCount {
  font-size: 0.7rem;
  color: #666;
  font-weight: 500;
}

.productItem.occupied {
  border: 2px solid #dc3545;
  background-color: #fee;
  cursor: not-allowed;
}

.productItem.available {
  border: 2px solid #28a745;
  background-color: #f0fff4;
  cursor: pointer;
}

.productItem.occupied:hover {
  transform: none;
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
}

.productItem.available:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 16px rgba(40, 167, 69, 0.2);
}

.tableName {
  font-weight: 600;
  font-size: 1rem;
}

.tableCapacity {
  color: #666;
  font-size: 0.8rem;
}

/* أنماط مؤشر التحميل المحسن */
.searchingMessage {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  color: #666;
  font-size: 14px;
}

.loadingSpinner {
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

============================================================
FILE: src/Pages/pos/newSales/styles/tailwind.css
============================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}

============================================================
FILE: src/Pages/pos/newSales/types/PosSystem.tsx
============================================================
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productType: number; // ✅ إضافة هذا الحقل
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
  productOptionGroups?: ProductOptionGroup[]; // إضافة المجموعات
}


export interface ProductOptionGroup {
  id: string;
  name: string;
  isRequired: boolean;
  allowMultiple: boolean;
  minSelection: number;
  maxSelection: number;
  sortOrder: number;
  optionItems: ProductOptionItem[];
}

export interface ProductOptionItem {
  id: string;
  name: string;
  productPriceId?: string | null; // Change this line to support null
  useOriginalPrice: boolean;
  extraPrice: number;
  isCommentOnly: boolean;
  sortOrder: number;
}

export interface SelectedOption {
  groupId: string;
  itemId: string;
  itemName: string;
  quantity: number;
  extraPrice: number;
  isCommentOnly: boolean;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  products?: PosProduct[]; // ✅ إضافة هذا الحقل
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  selectedOptions?: SelectedOption[]; // إضافة الخيارات المختارة
  notes?: string;
    isExtra?: boolean;        // جديد
  isWithout?: boolean;      // جديد
  parentItemId?: string;    // جديد - للربط بالمنتج الأصلي
  subItems?: SubItem[]; // جديد - للعناصر الفرعية
  discountPercentage?: number; // جديد
  discountAmount?: number; // جديد
}


export interface SubItem {
  id: string;
  type: 'option' | 'extra' | 'without';
  name: string;
  quantity: number;
  price: number;
  isRequired?: boolean; // للمجموعات المطلوبة
  groupId?: string; // للمجموعات
  productId?: string; // للإضافات/بدون
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}

============================================================
FILE: src/Pages/pos/newSales/index.tsx
============================================================
// src/Pages/pos/newSales/index.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary as OrderSummaryType, OrderItem, PosPrice, SelectedOption } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import ProductOptionsPopup from './components/ProductOptionsPopup';
import ProductCard from './components/ProductCard';
import Header from './components/common/Header';
import ActionButtons from './components/ActionButtons';
import OrderSummary from './components/OrderSummary';
import { useOrderManager } from './components/OrderManager';
import { useDataManager } from './hooks/useDataManager';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import OrderItemDetailsPopup from './components/OrderItemDetailsPopup';
import TableSelectionPopup from './components/TableSelectionPopup';
import { useTableManager } from './hooks/useTableManager';
import { TableSelection } from './types/TableSystem';
import { useError } from '../../../contexts/ErrorContext';
import * as deliveryCompaniesApi from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { DeliveryCompany } from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('0');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');
  const [showTablePopup, setShowTablePopup] = useState(false);
  const { showWarning } = useError();
  const [deliveryCompanies, setDeliveryCompanies] = useState<DeliveryCompany[]>([]);
  const [selectedDeliveryCompany, setSelectedDeliveryCompany] = useState<DeliveryCompany | null>(null);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [selectedAddress, setSelectedAddress] = useState<CustomerAddress | null>(null);
  const [taxRate, setTaxRate] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);

  // إضافة Table Manager Hook
  const {
    tableSections,
    selectedTable,
    isChooseTable,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct
  } = useTableManager();

  // استخدام Data Manager الجديد
  const {
    loading,
    error,
    getProducts,
    getCategories,
    defaultCategoryId,
    searchProducts,
    getProductsByScreenId,
    hasProductOptions
  } = useDataManager();

  // دالة لجلب رسوم التوصيل من الـ zone
  const getDeliveryCharge = useCallback((): number => {
    if (selectedOrderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      return 15; // يمكن تحديثها من API
    }
    return 0;
  }, [selectedOrderType, selectedAddress]);

  const handleCustomerSelect = useCallback((customer: Customer, address: CustomerAddress) => {
    setSelectedCustomer(customer);
    setSelectedAddress(address);
    setCustomerName(`${customer.name} - ${customer.phone1}`);
  }, []);

  const handleDeliveryChargeChange = useCallback((charge: number) => {
    setDeliveryCharge(charge);
  }, []);

  // Extra/Without States
  const [isExtraMode, setIsExtraMode] = useState(false);
  const [isWithoutMode, setIsWithoutMode] = useState(false);
  const [selectedOrderItemId, setSelectedOrderItemId] = useState<string | null>(null);
  
  // Categories States
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [, setParentCategory] = useState<CategoryItem | null>(null);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  const [selectedProductForOptions, setSelectedProductForOptions] = useState<PosProduct | null>(null);
  const [selectedPriceForOptions, setSelectedPriceForOptions] = useState<PosPrice | null>(null);
  
  // Order Details Popup States
  const [showOrderDetailsPopup, setShowOrderDetailsPopup] = useState(false);
  const [selectedOrderItemForDetails, setSelectedOrderItemForDetails] = useState<OrderItem | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // الحصول على البيانات الحالية
  const isAdditionMode = isExtraMode || isWithoutMode;
  const currentProducts = getProducts(isAdditionMode);
  const currentCategories = getCategories(isAdditionMode);
  const rootCategories = currentCategories.filter(cat => !cat.parentId);
  const categories = showingChildren 
    ? currentCategories.find(cat => cat.id === showingChildren)?.children || []
    : rootCategories;

  // تحميل البيانات مرة واحدة
  useEffect(() => {
    const loadDeliveryCompanies = async () => {
      try {
        const companies = await deliveryCompaniesApi.getAll();
        setDeliveryCompanies(companies);
      } catch (error) {
        console.error('Error loading delivery companies:', error);
      }
    };
    loadDeliveryCompanies();
  }, []);

  // المنتجات المعروضة
  const displayedProducts = useMemo(() => {
    if (searchQuery.trim()) {
      return searchProducts(currentProducts, searchQuery);
    }
    
    if (selectedCategory) {
      return getProductsByScreenId(currentProducts, selectedCategory);
    }
    
    return [];
  }, [currentProducts, selectedCategory, searchQuery, searchProducts, getProductsByScreenId]);

  // تحديث دالة updateOrderItem
  const updateOrderItem = useCallback((itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        if (updateType === 'addSubItem') {
          const newSubItems = [...(item.subItems || []), data];
          
          const priceImpact = data.type === 'without' ? 0 : data.price;
          const newTotalPrice = item.totalPrice + priceImpact;
          
          return {
            ...item,
            subItems: newSubItems,
            totalPrice: newTotalPrice
          };
        } else if (updateType === 'removeSubItem') {
          const removedSubItem = item.subItems?.find(sub => sub.id === data);
          const newSubItems = item.subItems?.filter(sub => sub.id !== data) || [];
          
          const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
          const newTotalPrice = item.totalPrice - priceImpact;
          
          return {
            ...item,
            subItems: newSubItems.length > 0 ? newSubItems : undefined,
            totalPrice: newTotalPrice
          };
        }
      }
      return item;
    }));
  }, []);

  // Order Manager Hook
  const { addToOrder, removeSubItem } = useOrderManager({
    keypadValue,
    isExtraMode,
    isWithoutMode,
    selectedOrderItemId,
    onOrderAdd: (orderItem) => setOrderItems(prev => [...prev, orderItem]),
    onOrderUpdate: updateOrderItem,
    onModeReset: () => {
      setIsExtraMode(false);
      setIsWithoutMode(false);
      setSelectedOrderItemId(null);
      setKeypadValue('0');
    },
    onLoadNormalProducts: () => {
      // لا نحتاج لإعادة تحميل البيانات لأنها محملة مسبقاً
    }
  });

  // إضافة معالج double click
  const handleOrderItemDoubleClick = useCallback((item: OrderItem) => {
    setSelectedOrderItemForDetails(item);
    setShowOrderDetailsPopup(true);
  }, []);

  // إضافة معالج تحديث المنتج للـ OrderItemDetailsPopup
  const handleUpdateOrderItem = useCallback((itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        const updatedItem = { ...item };
        
        if (updates.quantity !== undefined) {
          updatedItem.quantity = updates.quantity;
        }
        
        if (updates.notes !== undefined) {
          updatedItem.notes = updates.notes;
        }
        
        if (updates.discountPercentage !== undefined) {
          updatedItem.discountPercentage = updates.discountPercentage;
        }
        
        if (updates.discountAmount !== undefined) {
          updatedItem.discountAmount = updates.discountAmount;
        }
        
        const basePrice = item.selectedPrice.price * (updates.quantity || item.quantity);
        const subItemsTotal = item.subItems?.reduce((sum, subItem) => {
          return sum + (subItem.type === 'without' ? 0 : subItem.price);
        }, 0) || 0;
        
        const totalBeforeDiscount = basePrice + subItemsTotal;
        const discountAmount = updates.discountAmount || item.discountAmount || 0;
        updatedItem.totalPrice = totalBeforeDiscount - discountAmount;
        
        return updatedItem;
      }
      return item;
    }));
  }, []);

  // إضافة معالج حذف sub-item
  const handleRemoveSubItem = useCallback((orderItemId: string, subItemId: string) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === orderItemId && item.subItems) {
        const removedSubItem = item.subItems.find(sub => sub.id === subItemId);
        const newSubItems = item.subItems.filter(sub => sub.id !== subItemId);
        
        const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
        const newTotalPrice = item.totalPrice - priceImpact;
        
        return {
          ...item,
          subItems: newSubItems.length > 0 ? newSubItems : undefined,
          totalPrice: newTotalPrice
        };
      }
      return item;
    }));
  }, []);

  // إضافة useEffect لتحديد الفئة الافتراضية
  useEffect(() => {
    if (defaultCategoryId && !selectedCategory && !isAdditionMode) {
      setSelectedCategory(defaultCategoryId);
    }
  }, [defaultCategoryId, selectedCategory, isAdditionMode]);

  // معالج زر Extra - التحديث الجديد
  const handleExtraClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsExtraMode(true);
    setIsWithoutMode(false);
    setSelectedChips(prev => prev.includes('extra') ? prev : [...prev.filter(chip => chip !== 'without'), 'extra']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج زر Without - التحديث الجديد
  const handleWithoutClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsWithoutMode(true);
    setIsExtraMode(false);
    setSelectedChips(prev => prev.includes('without') ? prev : [...prev.filter(chip => chip !== 'extra'), 'without']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج الرجوع للمنتجات الأساسية
  const handleBackToMainProducts = useCallback(() => {
    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedOrderItemId(null);
    setSelectedChips(prev => prev.filter(chip => chip !== 'extra' && chip !== 'without'));
    
    if (defaultCategoryId) {
      setSelectedCategory(defaultCategoryId);
    }
    
    setShowingChildren(null);
    setParentCategory(null);
  }, [defaultCategoryId]);

  // معالج اختيار منتج في الفاتورة
  const handleOrderItemSelect = useCallback((itemId: string) => {
    if (selectedOrderItemId === itemId) {
      setSelectedOrderItemId(null);
    } else {
      setSelectedOrderItemId(itemId);
    }
  }, [selectedOrderItemId]);

  // معالج اختيار الفئة
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      setShowingChildren(categoryId);
      setParentCategory(category);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // دالة الرجوع للفئة الأب
  const handleBackToParent = useCallback(() => {
    setShowingChildren(null);
    setParentCategory(null);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [rootCategories]);

  // معالج ضغط المنتج
  const handleProductClick = useCallback((product: PosProduct) => {
    if (!canAddProduct(selectedOrderType)) {
      showWarning('يجب اختيار الطاولة أولاً');
      return;
    }

    if (product.hasMultiplePrices) {
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      const price = product.productPrices[0];
      
      if (hasProductOptions(product)) {
        setSelectedProductForOptions(product);
        setSelectedPriceForOptions(price);
        setShowOptionsPopup(true);
      } else {
        addToOrder(product, price, []);
      }
    }
  }, [addToOrder, showWarning, hasProductOptions, selectedOrderType, canAddProduct]);

  // إضافة معالج اختيار الطاولة
  const handleTableSelect = useCallback((selection: TableSelection) => {
    selectTable(selection);
    setShowTablePopup(false);
  }, [selectTable]);

  // إضافة معالج فتح popup الطاولة
  const handleTableClick = useCallback(() => {
    setShowTablePopup(true);
  }, []);

  // تعديل معالج تغيير نوع الطلب
  const handleOrderTypeChange = useCallback((type: string) => {
    setSelectedOrderType(type);
    
    if (type === 'Dine-in' && isTableRequired(type)) {
      setShowTablePopup(true);
    }
    
    if (type !== 'Dine-in') {
      clearSelectedTable();
    }
  }, [isTableRequired, clearSelectedTable]);

  // معالج اختيار السعر
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      if (hasProductOptions(selectedProduct)) {
        setSelectedProductForOptions(selectedProduct);
        setSelectedPriceForOptions(price);
        setShowPricePopup(false);
        setShowOptionsPopup(true);
      } else {
        addToOrder(selectedProduct, price, []);
      }
    }
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder, hasProductOptions]);

  // معالج إكمال اختيار المجموعات
  const handleOptionsComplete = useCallback((selectedOptions: SelectedOption[]) => {
    if (selectedProductForOptions && selectedPriceForOptions) {
      addToOrder(selectedProductForOptions, selectedPriceForOptions, selectedOptions);
    }
    setShowOptionsPopup(false);
    setSelectedProductForOptions(null);
    setSelectedPriceForOptions(null);
  }, [selectedProductForOptions, selectedPriceForOptions, addToOrder]);

  // تعديل حساب ملخص الطلب ليشمل الخدمة
  const orderSummary: OrderSummaryType = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const serviceCharge = getServiceCharge();
    const service = (subtotal * serviceCharge) / 100;
    const discountPercentage = 0;
    const discount = (subtotal * discountPercentage) / 100;
    
    return {
      items: orderItems,
      subtotal,
      discount,
      tax: 0,
      service,
      total: subtotal + service + deliveryCharge - discount
    };
  }, [orderItems, getServiceCharge, deliveryCharge]);

  // حذف منتج من الطلب
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  // دالة التحقق من صحة الإدخال
  const validateKeypadInput = useCallback((value: string): boolean => {
    if (!value || value.trim() === '') return false;
    if (value === '.') return true;
    
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return false;
    if (numValue < 0) return false;
    
    const decimalPlaces = value.split('.')[1]?.length || 0;
    if (decimalPlaces > 3) return false;
    if (numValue > 999999) return false;
    
    return true;
  }, []);

  // معالج إدخال الأرقام المحسن
  const handleNumberClick = useCallback((number: string) => {
    let newValue = keypadValue;
    
    if (number === '.') {
      if (!keypadValue.includes('.')) {
        newValue = keypadValue + '.';
      } else {
        return;
      }
    } else {
      if (keypadValue === '0' && number !== '0') {
        newValue = number;
      } else {
        newValue = keypadValue + number;
      }
    }
    
    if (validateKeypadInput(newValue)) {
      setKeypadValue(newValue);
    }
  }, [keypadValue, validateKeypadInput]);

  // دالة للحصول على القيمة الرقمية
  const getNumericValue = useCallback((): number => {
    const value = parseFloat(keypadValue);
    return isNaN(value) || value <= 0 ? 1 : value;
  }, [keypadValue]);

  // دالة المسح
  const handleClearClick = useCallback(() => {
    setKeypadValue('0');
  }, []);

  // ✅ إصلاح دعم لوحة المفاتيح العادية مع حل خطأ contentEditable
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      // التحقق من عدم وجود popup مفتوح
      const isAnyPopupOpen = showPricePopup || showOptionsPopup || showOrderDetailsPopup || showTablePopup;
      
      // التحقق من عدم وجود input مركز عليه - مع إصلاح خطأ contentEditable
      const activeElement = document.activeElement;
      const isInputFocused = activeElement?.tagName === 'INPUT' || 
                            activeElement?.tagName === 'TEXTAREA' || 
                            (activeElement as HTMLElement)?.contentEditable === 'true';
      
      // إذا كان هناك popup مفتوح أو input مركز عليه، لا نتدخل
      if (isAnyPopupOpen || isInputFocused) {
        return;
      }
      
      const key = event.key;
      
      // الأرقام والنقطة العشرية
      if (/^[0-9]$/.test(key)) {
        event.preventDefault();
        handleNumberClick(key);
      } else if (key === '.') {
        event.preventDefault();
        handleNumberClick('.');
      } else if (key === 'Backspace') {
        event.preventDefault();
        // حذف آخر رقم
        if (keypadValue.length > 1) {
          const newValue = keypadValue.slice(0, -1);
          if (validateKeypadInput(newValue)) {
            setKeypadValue(newValue);
          }
        } else {
          setKeypadValue('0');
        }
      } else if (key === 'Delete' || key === 'Escape') {
        event.preventDefault();
        handleClearClick();
      } else if (key === 'Enter') {
        event.preventDefault();
        // يمكن إضافة وظيفة معينة عند الضغط على Enter
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [
    keypadValue, 
    handleNumberClick, 
    handleClearClick, 
    validateKeypadInput,
    showPricePopup,
    showOptionsPopup,
    showOrderDetailsPopup,
    showTablePopup
  ]);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  const handleResetOrder = useCallback(() => {
    setOrderItems([]);
    setSelectedOrderItemId(null);
    setCustomerName('');
    setKeypadValue('0');
    
    setSelectedCustomer(null);
    setSelectedAddress(null);
    setDeliveryCharge(0);

    clearSelectedTable();

    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedChips([]);
    
    handleBackToMainProducts();
    
    setSearchQuery('');
    
    console.log('Order reset successfully');
  }, [handleBackToMainProducts, clearSelectedTable]);

  // عرض حالة التحميل
  if (loading) {
    return (
      <div className="pos-system loading">
        <div className="loading-spinner">جاري تحميل البيانات...</div>
      </div>
    );
  }

  // عرض حالة الخطأ
  if (error) {
    return (
      <div className="pos-system error">
        <div className="error-message">{error}</div>
        <button onClick={() => window.location.reload()}>إعادة المحاولة</button>
      </div>
    );
  }

  return (
    <div className="pos-system">
      <Header
        selectedOrderType={selectedOrderType}
        onOrderTypeChange={handleOrderTypeChange}
        onResetOrder={handleResetOrder}
        onTableClick={handleTableClick}
        tableDisplayName={getTableDisplayName()}
        deliveryCompanies={deliveryCompanies}
        selectedDeliveryCompany={selectedDeliveryCompany}
        onDeliveryCompanySelect={setSelectedDeliveryCompany}
        selectedCustomer={selectedCustomer}
        selectedAddress={selectedAddress}
      />

      <main className="main-content">
        <section className="products-section">
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          <ActionButtons
            selectedChips={selectedChips}
            onChipClick={handleChipClick}
            isExtraMode={isExtraMode}
            isWithoutMode={isWithoutMode}
            onExtraClick={handleExtraClick}
            onWithoutClick={handleWithoutClick}
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            hasSelectedOrderItem={true}
          />

          <div className="product-grid">
            {displayedProducts.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                onClick={handleProductClick}
              />
            ))}
          </div>
        </section>

        <aside className="categories-sidebar">
          <div className="categories-list">
            {isAdditionMode && (
              <button
                onClick={handleBackToMainProducts}
                className="category-item back-button main-back"
              >
                <ArrowBackIcon />
                <span>رجوع للمنتجات الأساسية</span>
              </button>
            )}
            
            {showingChildren && (
              <button
                onClick={handleBackToParent}
                className="category-item back-button"
              >
                <ArrowBackIcon />
                <span>رجوع</span>
              </button>
            )}
            
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
                className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
              >
                <img src={category.image} alt={category.name} />
                <span>{category.nameArabic}</span>
              </button>
            ))}
          </div>
        </aside>

        <OrderSummary
          orderSummary={orderSummary}
          customerName={customerName}
          onCustomerNameChange={setCustomerName}
          onRemoveOrderItem={removeOrderItem}
          onRemoveSubItem={handleRemoveSubItem}
          selectedOrderItemId={selectedOrderItemId}
          onOrderItemSelect={handleOrderItemSelect}
          onOrderItemDoubleClick={handleOrderItemDoubleClick}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          onCustomerSelect={handleCustomerSelect}
          orderType={selectedOrderType}
          onDeliveryChargeChange={handleDeliveryChargeChange} readOnly={false}        />
      </main>

      <PriceSelectionPopup
        product={selectedProduct}
        quantity={getNumericValue()}
        isOpen={showPricePopup}
        onClose={() => {
          setShowPricePopup(false);
          setSelectedProduct(null);
        }}
        onSelectPrice={handlePriceSelect}
      />

      <ProductOptionsPopup
        product={selectedProductForOptions}
        selectedPrice={selectedPriceForOptions}
        quantity={getNumericValue()}
        isOpen={showOptionsPopup}
        onClose={() => {
          setShowOptionsPopup(false);
          setSelectedProductForOptions(null);
          setSelectedPriceForOptions(null);
        }}
        onComplete={handleOptionsComplete}
      />

      <OrderItemDetailsPopup
        orderItem={selectedOrderItemForDetails}
        isOpen={showOrderDetailsPopup}
        onClose={() => {
          setShowOrderDetailsPopup(false);
          setSelectedOrderItemForDetails(null);
        }}
        onUpdateItem={handleUpdateOrderItem}
        onRemoveItem={removeOrderItem}
      />

      <TableSelectionPopup
        isOpen={showTablePopup}
        onClose={() => setShowTablePopup(false)}
        onSelectTable={handleTableSelect}
        tableSections={tableSections}
      />

      
    </div>
  );
};

export default PosSystem;


============================================================
FILE: src/Pages/pos/offers/components/mobile/MobileOffersFilter.tsx
============================================================
// File: src/pages/pos/offers/components/mobile/MobileOffersFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface OffersFilterState {
  searchQuery: string;
  status: string;
  priceType: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: OffersFilterState;
  onFiltersChange: (filters: OffersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileOffersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();

  const updateFilter = (key: keyof OffersFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      priceType: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.priceType) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('offers.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Price Type Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('offers.form.priceType')}</InputLabel>
            <Select
              value={filters.priceType}
              onChange={(e) => updateFilter('priceType', e.target.value)}
              label={t('offers.form.priceType')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="Fixed">{t('offers.form.fixed')}</MenuItem>
              <MenuItem value="Dynamic">{t('offers.form.dynamic')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('offers.form.name')}</MenuItem>
              <MenuItem value="fixedPrice">{t('offers.form.fixedPrice')}</MenuItem>
              <MenuItem value="startDate">{t('offers.form.startDate')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileOffersFilter;


============================================================
FILE: src/Pages/pos/offers/components/ActionsBar.tsx
============================================================
// File: src/pages/pos/offers/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('offers.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/offers/components/OfferForm.tsx
============================================================
// File: src/pages/pos/offers/components/OfferForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Typography, FormControl, InputLabel, Select, MenuItem,
  Switch, FormControlLabel, Card, CardContent, IconButton, Box,
  Checkbox, useMediaQuery, useTheme, Tabs, Tab
} from '@mui/material';
import { 
  IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus, 
  IconUsers, IconShoppingCart 
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Offer, OfferGroup, OfferItem } from 'src/utils/api/pagesApi/offersApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import ProductMultiSelectDialog from './ProductMultiSelectDialog';

type FormValues = {
  name: string;
  priceType: 'Fixed' | 'Dynamic';
  fixedPrice: number;
  startDate: string;
  endDate: string;
  orderTypeId: string;
  isActive: boolean;
  offerGroups: OfferGroup[];
  offerItems: OfferItem[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Offer;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`offer-tabpanel-${index}`}
      aria-labelledby={`offer-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 2 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const OfferForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [, setGroups] = React.useState<any[]>([]);
  const [, setProducts] = React.useState<any[]>([]);
  const [productPrices, setProductPrices] = React.useState<any[]>([]);
  const [multiSelectOpen, setMultiSelectOpen] = React.useState(false);
  const [currentGroupIndex, setCurrentGroupIndex] = React.useState<number | null>(null);
  const [tabValue, setTabValue] = React.useState(0);

  const defaults: FormValues = {
    name: '',
    priceType: 'Fixed',
    fixedPrice: 0,
    startDate: '',
    endDate: '',
    orderTypeId: '1',
    isActive: true,
    offerGroups: [],
    offerItems: []
  };

  const { control, handleSubmit, reset, watch, setValue, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: groupFields, append: appendGroup, remove: removeGroup } = useFieldArray({
    control,
    name: 'offerGroups'
  });

  const { fields: itemFields, append: appendItem, remove: removeItem } = useFieldArray({
    control,
    name: 'offerItems'
  });

  // تحميل البيانات المطلوبة
  React.useEffect(() => {
    const loadData = async () => {
      try {
        const [groupsData, productsData] = await Promise.all([
          groupsApi.getAll(),
          productsApi.getAll(1, 100)
        ]);
        
        const flatGroups = flattenGroups(groupsData);
        setGroups(flatGroups);
        setProducts(productsData.data);

        const allProductPrices = productsData.data.flatMap(product => 
          product.productPrices.map(price => ({
            ...price,
            productName: product.name,
            displayName: `${product.name} - ${price.posPriceName}`,
            fullDisplayName: `${product.name} - ${price.posPriceName} (${price.price} ${t('common.currency')})`
          }))
        );
        setProductPrices(allProductPrices);
      } catch (error) {
        console.error('Error loading data:', error);
      }
    };

    if (open) {
      loadData();
    }
  }, [open, t]);

  const flattenGroups = (groups: any[]): any[] => {
    const result: any[] = [];
    
    const flatten = (items: any[], level = 0) => {
      items.forEach(item => {
        result.push({
          ...item,
          displayName: '  '.repeat(level) + item.name,
          level
        });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          priceType: initialValues.priceType,
          fixedPrice: initialValues.fixedPrice || 0,
          startDate: initialValues.startDate ? initialValues.startDate.split('T')[0] : '',
          endDate: initialValues.endDate ? initialValues.endDate.split('T')[0] : '',
          orderTypeId: initialValues.orderTypeId || '1',
          isActive: initialValues.isActive,
          offerGroups: initialValues.offerGroups || [],
          offerItems: initialValues.offerItems || []
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const addOfferGroup = () => {
    appendGroup({
      title: '',
      minSelection: 1,
      maxSelection: 1,
      isMandatory: true,
      isActive: true
    });
    setTabValue(0);
  };

  const addOfferItem = () => {
    setCurrentGroupIndex(null);
    setMultiSelectOpen(true);
  };

  const addItemToGroup = (groupIndex: number) => {
    setCurrentGroupIndex(groupIndex);
    setMultiSelectOpen(true);
  };

const handleMultiSelectSubmit = (selectedProducts: Array<{
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}>) => {
  console.log('Received selected products:', selectedProducts);
  
  if (currentGroupIndex !== null) {
    // للمجموعات: استبدال كامل للعناصر
    const groupId = groupFields[currentGroupIndex].id || `group_${currentGroupIndex}`;
    
    // إزالة كل العناصر الموجودة في هذه المجموعة
    const itemsToRemove: number[] = [];
    itemFields.forEach((_item, index) => {
      const itemGroupId = watch(`offerItems.${index}.offerGroupId`);
      if (itemGroupId === groupId) {
        itemsToRemove.push(index);
      }
    });
    
    // إزالة من الآخر للأول لتجنب تغيير الفهارس
    itemsToRemove.reverse().forEach(index => {
      console.log('Removing item at index:', index);
      removeItem(index);
    });
    
    // إضافة كل المنتجات المختارة الجديدة
    selectedProducts.forEach(product => {
      console.log('Adding product to group:', product);
      appendItem({
        productPriceId: product.productPriceId,
        offerGroupId: groupId,
        quantity: 1,
        isDefaultSelected: true,
        useOriginalPrice: true,
        customPrice: 0,
        isActive: true
      });
    });
    
    setTabValue(0);
  } else {
    // للعناصر الثابتة: استبدال كامل للعناصر
    
    // إزالة كل العناصر الثابتة الموجودة
    const itemsToRemove: number[] = [];
    itemFields.forEach((_item, index) => {
      const itemGroupId = watch(`offerItems.${index}.offerGroupId`);
      if (!itemGroupId) {
        itemsToRemove.push(index);
      }
    });
    
    // إزالة من الآخر للأول لتجنب تغيير الفهارس
    itemsToRemove.reverse().forEach(index => {
      console.log('Removing fixed item at index:', index);
      removeItem(index);
    });
    
    // إضافة كل المنتجات المختارة الجديدة
    selectedProducts.forEach(product => {
      console.log('Adding fixed product:', product);
      appendItem({
        productPriceId: product.productPriceId,
        quantity: 1,
        isDefaultSelected: true,
        useOriginalPrice: true,
        customPrice: 0,
        isActive: true
      });
    });
    
    setTabValue(1);
  }
  
  setMultiSelectOpen(false);
  setCurrentGroupIndex(null);
};

  const getGroupItems = (groupIndex: number) => {
    const groupId = groupFields[groupIndex].id || `group_${groupIndex}`;
    return itemFields.filter((_, index) => 
      watch(`offerItems.${index}.offerGroupId`) === groupId
    );
  };

  const getNonGroupItems = () => {
    return itemFields.filter((_, index) => 
      !watch(`offerItems.${index}.offerGroupId`)
    );
  };

  const getPreSelectedItems = () => {
    if (currentGroupIndex !== null) {
      const groupId = groupFields[currentGroupIndex].id || `group_${currentGroupIndex}`;
      return itemFields
        .filter((_, index) => watch(`offerItems.${index}.offerGroupId`) === groupId)
        .map((_, index) => watch(`offerItems.${index}.productPriceId`))
        .filter(Boolean);
    } else {
      return itemFields
        .filter((_, index) => !watch(`offerItems.${index}.offerGroupId`))
        .map((_, index) => watch(`offerItems.${index}.productPriceId`))
        .filter(Boolean);
    }
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          priceType: data.priceType,
          fixedPrice: Number(data.fixedPrice),
          startDate: new Date(data.startDate).toISOString(),
          endDate: new Date(data.endDate).toISOString(),
          orderTypeId: data.orderTypeId,
          isActive: data.isActive,
          offerGroups: data.offerGroups.map(group => ({
            ...(group.id && { id: group.id }),
            ...(initialValues.id && { offerId: initialValues.id }),
            title: group.title,
            minSelection: Number(group.minSelection),
            maxSelection: Number(group.maxSelection),
            isMandatory: group.isMandatory,
            isActive: group.isActive
          })),
          offerItems: data.offerItems.map(item => ({
            ...(item.id && { id: item.id }),
            ...(initialValues.id && { offerId: initialValues.id }),
            productPriceId: item.productPriceId,
            offerGroupId: item.offerGroupId || null,
            quantity: Number(item.quantity),
            isDefaultSelected: true,
            useOriginalPrice: item.useOriginalPrice,
            customPrice: item.useOriginalPrice ? null : Number(item.customPrice),
            isActive: item.isActive
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          priceType: data.priceType,
          fixedPrice: Number(data.fixedPrice),
          startDate: new Date(data.startDate).toISOString(),
          endDate: new Date(data.endDate).toISOString(),
          orderTypeId: data.orderTypeId,
          isActive: data.isActive,
          offerGroups: data.offerGroups.map(group => ({
            title: group.title,
            minSelection: Number(group.minSelection),
            maxSelection: Number(group.maxSelection),
            isMandatory: group.isMandatory,
            isActive: group.isActive
          })),
          offerItems: data.offerItems.map(item => ({
            productPriceId: item.productPriceId,
            offerGroupId: item.offerGroupId || null,
            quantity: Number(item.quantity),
            isDefaultSelected: true,
            useOriginalPrice: item.useOriginalPrice,
            customPrice: item.useOriginalPrice ? null : Number(item.customPrice),
            isActive: item.isActive
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      // Error handled by global error handler
    } finally {
      setIsSubmitting(false);
    }
  };

  // مكون لعرض العناصر في 3 أعمدة مع تمييز المجموعات والعناصر الثابتة
  const ItemsGrid: React.FC<{ items: any[], groupIndex?: number }> = ({ items, groupIndex }) => {
    const isGroupItems = groupIndex !== undefined;
    
    return (
      <Grid container spacing={1}>
        {items.map((item, itemIndex) => {
          const actualIndex = itemFields.findIndex(field => field.id === item.id);
          
          if (actualIndex === -1) return null;
          
          const productPrice = productPrices.find(p => p.id === watch(`offerItems.${actualIndex}.productPriceId`));
          const useOriginalPrice = watch(`offerItems.${actualIndex}.useOriginalPrice`);
          
          return (
            <Grid item xs={12} md={4} key={item.id}>
              <Box sx={{ 
                p: 1,
                border: 2, // زيادة سمك البوردر للتمييز
                borderColor: isGroupItems ? 'primary.main' : 'secondary.main', // ألوان مختلفة للتمييز
                borderRadius: 1,
                backgroundColor: itemIndex % 2 === 0 ? 
                  (isGroupItems ? 'primary.50' : 'secondary.50') : 
                  'background.paper',
                minHeight: 80,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'space-between',
                position: 'relative'
              }}>
                {/* شارة للتمييز */}
                <Box sx={{
                  position: 'absolute',
                  top: -1,
                  right: -1,
                  backgroundColor: isGroupItems ? 'primary.main' : 'secondary.main',
                  color: 'white',
                  px: 0.5,
                  py: 0.25,
                  borderRadius: '0 0 0 4px',
                  fontSize: '0.6rem',
                  fontWeight: 'bold'
                }}>
                  {isGroupItems ? t('offers.form.group') : t('offers.form.fixed')}
                </Box>
                
                {/* اسم المنتج */}
                <Typography variant="body2" sx={{ 
                  fontSize: '0.8rem',
                  fontWeight: 500,
                  mb: 0.5,
                  minHeight: 20,
                  display: '-webkit-box',
                  WebkitLineClamp: 1,
                  WebkitBoxOrient: 'vertical',
                  overflow: 'hidden',
                  mt: 1 // مساحة للشارة
                }}>
                  {productPrice?.displayName || t('offers.form.selectProduct')}
                </Typography>
                
                <Box sx={{ display: 'flex', gap: 0.5, alignItems: 'center', flexWrap: 'wrap' }}>
                  {/* الكمية */}
                  <TextField
                    label={t('offers.form.quantity')}
                    type="number"
                    size="small"
                    sx={{ width: 60 }}
                    value={watch(`offerItems.${actualIndex}.quantity`)}
                    onChange={(e) => setValue(`offerItems.${actualIndex}.quantity`, Number(e.target.value))}
                    inputProps={{ min: 1 }}
                  />
                  
                  {/* استخدام السعر الأصلي */}
                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={useOriginalPrice}
                        onChange={(e) => {
                          setValue(`offerItems.${actualIndex}.useOriginalPrice`, e.target.checked);
                          if (e.target.checked) {
                            setValue(`offerItems.${actualIndex}.customPrice`, 0);
                          }
                        }}
                        size="small"
                      />
                    }
                    label={<Typography variant="caption" sx={{ fontSize: '0.7rem' }}>{t('offers.form.original')}</Typography>}
                  />
                  
                  {/* السعر المخصص */}
                  {!useOriginalPrice && (
                    <TextField
                      label={t('offers.form.price')}
                      type="number"
                      size="small"
                      sx={{ width: 70 }}
                      value={watch(`offerItems.${actualIndex}.customPrice`)}
                      onChange={(e) => setValue(`offerItems.${actualIndex}.customPrice`, Number(e.target.value))}
                      inputProps={{ min: 0, step: 0.01 }}
                    />
                  )}
                  
                  {/* زرار الحذف */}
                  <IconButton
                    size="small"
                    color="error"
                    onClick={() => removeItem(actualIndex)}
                    sx={{ ml: 'auto' }}
                  >
                    <IconTrash size={12} />
                  </IconButton>
                </Box>
              </Box>
            </Grid>
          );
        })}
      </Grid>
    );
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <>
      <Dialog 
        open={open} 
        onClose={onClose} 
        maxWidth="xl" 
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle sx={{ 
          position: 'sticky', 
          top: 0, 
          zIndex: 1, 
          backgroundColor: 'background.paper',
          borderBottom: 1,
          borderColor: 'divider'
        }}>
          {mode === 'add' ? t('offers.add') : t('offers.edit')}
        </DialogTitle>

        <form>
          <DialogContent sx={{ 
            maxHeight: isMobile ? 'calc(100vh - 120px)' : '85vh', 
            overflowY: 'auto', 
            p: isMobile ? 1.5 : 2 
          }}>
            <Grid container spacing={isMobile ? 1.5 : 2}>
              {/* Basic Info */}
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ 
                  mb: isMobile ? 1 : 1.5, 
                  fontSize: isMobile ? '1rem' : '1.1rem' 
                }}>
                  {t('offers.form.basicInfo')}
                </Typography>
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="name"
                  control={control}
                  rules={{ required: t('offers.nameRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.name')}
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      onFocus={(e) => e.target.select()}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="priceType"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth size={isMobile ? "medium" : "small"}>
                      <InputLabel>{t('offers.form.priceType')}</InputLabel>
                      <Select
                        {...field}
                        label={t('offers.form.priceType')}
                      >
                        <MenuItem value="Fixed">{t('offers.form.fixed')}</MenuItem>
                        <MenuItem value="Dynamic">{t('offers.form.dynamic')}</MenuItem>
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="fixedPrice"
                  control={control}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.fixedPrice')}
                      type="number"
                      fullWidth
                      inputProps={{ min: 0, step: 0.01 }}
                      onFocus={(e) => e.target.select()}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="orderTypeId"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth size={isMobile ? "medium" : "small"}>
                      <InputLabel>{t('offers.form.orderType')}</InputLabel>
                      <Select
                        {...field}
                        label={t('offers.form.orderType')}
                      >
                        <MenuItem value="1">{t('offers.form.dineIn')}</MenuItem>
                        <MenuItem value="2">{t('offers.form.takeaway')}</MenuItem>
                        <MenuItem value="3">{t('offers.form.delivery')}</MenuItem>
                      </Select>
                    </FormControl>
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="startDate"
                  control={control}
                  rules={{ required: t('offers.startDateRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.startDate')}
                      type="date"
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      InputLabelProps={{ shrink: true }}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <Controller
                  name="endDate"
                  control={control}
                  rules={{ required: t('offers.endDateRequired') }}
                  render={({ field, fieldState }) => (
                    <TextField
                      {...field}
                      label={t('offers.form.endDate')}
                      type="date"
                      fullWidth
                      required
                      error={!!fieldState.error}
                      helperText={fieldState.error?.message}
                      InputLabelProps={{ shrink: true }}
                      size={isMobile ? "medium" : "small"}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12}>
                <Controller
                  name="isActive"
                  control={control}
                  render={({ field }) => (
                    <FormControlLabel
                      control={
                        <Switch
                          checked={field.value}
                          onChange={field.onChange}
                        />
                      }
                      label={t('offers.form.isActive')}
                    />
                  )}
                />
              </Grid>

              {/* الزرارين فوق التابات */}
              <Grid item xs={12}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'flex-end',
                  gap: 1,
                  mb: 1
                }}>
                  <Button
                    variant="outlined"
                    startIcon={<IconPlus />}
                    onClick={addOfferGroup}
                    size="small"
                  >
                    {t('offers.form.addGroup')}
                  </Button>
                  <Button
                    variant="outlined"
                    startIcon={<IconShoppingCart />}
                    onClick={addOfferItem}
                    size="small"
                  >
                    {t('offers.form.addItem')}
                  </Button>
                </Box>
              </Grid>

              {/* التابات */}
              <Grid item xs={12}>
                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                  <Tabs value={tabValue} onChange={handleTabChange} aria-label="offer tabs">
                    <Tab 
                      icon={<IconUsers size={18} />}
                      label={`${t('offers.form.offerGroups')} (${groupFields.length})`}
                      id="offer-tab-0"
                      aria-controls="offer-tabpanel-0"
                      sx={{ 
                        color: 'primary.main',
                        '&.Mui-selected': { 
                          color: 'primary.main',
                          fontWeight: 'bold'
                        }
                      }}
                    />
                    <Tab 
                      icon={<IconShoppingCart size={18} />}
                      label={`${t('offers.form.fixedItems')} (${getNonGroupItems().length})`}
                      id="offer-tab-1"
                      aria-controls="offer-tabpanel-1"
                      sx={{ 
                        color: 'secondary.main',
                        '&.Mui-selected': { 
                          color: 'secondary.main',
                          fontWeight: 'bold'
                        }
                      }}
                    />
                  </Tabs>
                </Box>

                {/* تاب المجموعات */}
                <TabPanel value={tabValue} index={0}>
                  {groupFields.length === 0 ? (
                    <Box sx={{ 
                      textAlign: 'center', 
                      py: 4, 
                      backgroundColor: 'primary.50', 
                      borderRadius: 1,
                      border: 1,
                      borderColor: 'primary.main'
                    }}>
                      <Typography color="primary.main" variant="body2" fontWeight={500}>
                        {t('offers.form.noGroups')}
                      </Typography>
                    </Box>
                  ) : (
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      {groupFields.map((group, index) => (
                        <Card key={group.id} variant="outlined" sx={{ 
                          borderColor: 'primary.main',
                          borderWidth: 2
                        }}>
                          <CardContent sx={{ p: '16px !important' }}>
                            <Box sx={{ 
                              display: 'flex', 
                              justifyContent: 'space-between', 
                              alignItems: 'center', 
                              mb: 2,
                              flexDirection: isMobile ? 'column' : 'row',
                              gap: isMobile ? 1 : 0
                            }}>
                              <Controller
                                name={`offerGroups.${index}.title`}
                                control={control}
                                rules={{ required: t('offers.groupTitleRequired') }}
                                render={({ field, fieldState }) => (
                                  <TextField
                                    {...field}
                                    label={t('offers.form.groupTitle')}
                                    required
                                    error={!!fieldState.error}
                                    helperText={fieldState.error?.message}
                                    size="small"
                                    sx={{ 
                                      flex: 1, 
                                      mr: isMobile ? 0 : 2,
                                      width: isMobile ? '100%' : 'auto'
                                    }}
                                  />
                                )}
                              />
                              <Box sx={{ display: 'flex', gap: 1 }}>
                                <Button
                                  variant="outlined"
                                  startIcon={<IconPlus />}
                                  onClick={() => addItemToGroup(index)}
                                  size="small"
                                  color="primary"
                                >
                                  {t('offers.form.addItem')}
                                </Button>
                                <IconButton
                                  size="small"
                                  color="error"
                                  onClick={() => removeGroup(index)}
                                >
                                  <IconTrash size={16} />
                                </IconButton>
                              </Box>
                            </Box>

                            <Grid container spacing={1.5} sx={{ mb: 2 }}>
                              <Grid item xs={6} md={2}>
                                <Controller
                                  name={`offerGroups.${index}.minSelection`}
                                  control={control}
                                  render={({ field }) => (
                                    <TextField
                                      {...field}
                                      label={t('offers.form.minSelection')}
                                      type="number"
                                      fullWidth
                                      size="small"
                                      inputProps={{ min: 0 }}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={2}>
                                <Controller
                                  name={`offerGroups.${index}.maxSelection`}
                                  control={control}
                                  render={({ field }) => (
                                    <TextField
                                      {...field}
                                      label={t('offers.form.maxSelection')}
                                      type="number"
                                      fullWidth
                                      size="small"
                                      inputProps={{ min: 1 }}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={4}>
                                <Controller
                                  name={`offerGroups.${index}.isMandatory`}
                                  control={control}
                                  render={({ field }) => (
                                    <FormControlLabel
                                      control={
                                        <Switch
                                          checked={field.value}
                                          onChange={field.onChange}
                                          size="small"
                                        />
                                      }
                                      label={t('offers.form.mandatory')}
                                    />
                                  )}
                                />
                              </Grid>

                              <Grid item xs={6} md={4}>
                                <Controller
                                  name={`offerGroups.${index}.isActive`}
                                  control={control}
                                  render={({ field }) => (
                                    <FormControlLabel
                                      control={
                                        <Switch
                                          checked={field.value}
                                          onChange={field.onChange}
                                          size="small"
                                        />
                                      }
                                      label={t('offers.form.active')}
                                    />
                                  )}
                                />
                              </Grid>
                            </Grid>

                            {/* عناصر المجموعة */}
                            <Box>
                              <Typography variant="subtitle2" sx={{ mb: 1, fontSize: '0.9rem', color: 'primary.main' }}>
                                {t('offers.form.groupItems')} ({getGroupItems(index).length})
                              </Typography>
                              {getGroupItems(index).length === 0 ? (
                                <Box sx={{ 
                                  textAlign: 'center', 
                                  py: 2, 
                                  backgroundColor: 'primary.50', 
                                  borderRadius: 1,
                                  border: 1,
                                  borderColor: 'primary.main'
                                }}>
                                  <Typography variant="body2" color="primary.main">
                                    {t('offers.form.noItemsInGroup')}
                                  </Typography>
                                </Box>
                              ) : (
                                <ItemsGrid items={getGroupItems(index)} groupIndex={index} />
                              )}
                            </Box>
                          </CardContent>
                        </Card>
                      ))}
                    </Box>
                  )}
                </TabPanel>

                {/* تاب العناصر الثابتة */}
                <TabPanel value={tabValue} index={1}>
                  {getNonGroupItems().length === 0 ? (
                    <Box sx={{ 
                      textAlign: 'center', 
                      py: 4, 
                      backgroundColor: 'secondary.50', 
                      borderRadius: 1,
                      border: 1,
                      borderColor: 'secondary.main'
                    }}>
                      <Typography color="secondary.main" variant="body2" fontWeight={500}>
                        {t('offers.form.noFixedItems')}
                      </Typography>
                    </Box>
                  ) : (
                    <Card variant="outlined" sx={{ 
                      borderColor: 'secondary.main',
                      borderWidth: 2
                    }}>
                      <CardContent sx={{ p: '16px !important' }}>
                        <ItemsGrid items={getNonGroupItems()} />
                      </CardContent>
                    </Card>
                  )}
                </TabPanel>
              </Grid>
            </Grid>
          </DialogContent>

          <DialogActions sx={{ 
            p: 2, 
            gap: 1,
            position: 'sticky',
            bottom: 0,
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            flexDirection: isMobile ? 'column' : 'row'
          }}>
            <Button 
              onClick={onClose} 
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('common.cancel')}
            </Button>
            
            <Button 
              variant="outlined"
              startIcon={<IconDeviceFloppy size={20} />}
              onClick={handleSubmit((data) => submit(data, 'save'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('offers.saveAndExit')}
            </Button>
            
            <Button 
              variant="contained"
              startIcon={<IconPlusNew size={20} />}
              onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
              size={isMobile ? "large" : "medium"}
            >
              {t('offers.saveAndNew')}
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      <ProductMultiSelectDialog
        open={multiSelectOpen}
        onClose={() => {
          setMultiSelectOpen(false);
          setCurrentGroupIndex(null);
        }}
        onSubmit={handleMultiSelectSubmit}
        title={currentGroupIndex !== null ? 
          t('offers.form.selectItemsForGroup') : 
          t('offers.form.selectFixedItems')
        }
        preSelectedItems={getPreSelectedItems()}
      />
    </>
  );
};

export default OfferForm;


============================================================
FILE: src/Pages/pos/offers/components/OfferRow.tsx
============================================================
// File: src/pages/pos/offers/components/OfferRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconCalendar, IconCurrencyDollar } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  offer: Offer;
  onEdit: () => void;
  isSelected?: boolean;
  canEdit?: boolean;
}

const OfferRow: React.FC<Props> = ({ 
  offer, onEdit, isSelected = false, canEdit = true 
}) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ar-EG');
  };

  return (
    <Card variant="outlined" sx={{ 
      mb: 2,
      ...(isSelected && {
        borderColor: 'primary.main',
        backgroundColor: 'action.selected'
      })
    }}>
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {offer.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t(`offers.form.${offer.priceType.toLowerCase()}`)}
            </Typography>
          </Box>
          
          <Chip
            label={offer.isActive ? t('common.active') : t('common.inactive')}
            color={offer.isActive ? 'success' : 'error'}
            size="small"
            variant={offer.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Offer Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconCurrencyDollar size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('offers.form.fixedPrice')}:
              </Typography>
            </Box>
            <Typography variant="body2" color="primary.main" fontWeight={600}>
              {offer.fixedPrice?.toFixed(2) || '0.00'} {t('common.currency')}
            </Typography>
          </Grid>

          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconCalendar size={16} />
              <Typography variant="body2" color="text.secondary">
                {t('offers.form.period')}:
              </Typography>
            </Box>
            <Typography variant="body2">
              {formatDate(offer.startDate)} - {formatDate(offer.endDate)}
            </Typography>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="body2" color="text.secondary">
              {t('offers.form.groups')}: {offer.offerGroups?.length || 0} | {t('offers.form.items')}: {offer.offerItems?.length || 0}
            </Typography>
          </Grid>
        </Grid>

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          {canEdit && (
            <Tooltip title={t('common.edit')}>
              <IconButton
                size="small"
                onClick={onEdit}
                color="primary"
              >
                <IconEdit size={18} />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardContent>
    </Card>
  );
};

export default OfferRow;


============================================================
FILE: src/Pages/pos/offers/components/OfferTable.tsx
============================================================
// File: src/pages/pos/offers/components/OfferTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  rows: Offer[];
  onEdit: (offer: Offer) => void;
  canEdit?: boolean;
  selectedOfferId?: string;
}

const OfferTable: React.FC<Props> = ({ 
  rows, onEdit, canEdit = true 
}) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ar-EG');
  };

  const cols: GridColDef<Offer>[] = [
    { 
      field: 'name', 
      headerName: t('offers.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'priceType', 
      headerName: t('offers.form.priceType'), 
      width: 120,
      renderCell: ({ value }) => t(`offers.form.${value.toLowerCase()}`)
    },
    { 
      field: 'fixedPrice', 
      headerName: t('offers.form.fixedPrice'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2) || '0.00'} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'startDate', 
      headerName: t('offers.form.startDate'), 
      width: 140,
      renderCell: ({ value }) => formatDate(value)
    },
    { 
      field: 'endDate', 
      headerName: t('offers.form.endDate'), 
      width: 140,
      renderCell: ({ value }) => formatDate(value)
    },
    { 
      field: 'offerGroups', 
      headerName: t('offers.form.groups'), 
      width: 100,
      sortable: false,
      renderCell: ({ value }) => (
        <Typography variant="body2" fontWeight={500}>
          {value?.length || 0}
        </Typography>
      )
    },
    { 
      field: 'offerItems', 
      headerName: t('offers.form.items'), 
      width: 100,
      sortable: false,
      renderCell: ({ value }) => (
        <Typography variant="body2" fontWeight={500}>
          {value?.length || 0}
        </Typography>
      )
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          {canEdit && (
            <IconButton size="small" onClick={() => onEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default OfferTable;


============================================================
FILE: src/Pages/pos/offers/components/PageHeader.tsx
============================================================
// File: src/pages/pos/offers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { offersImportExportConfig } from '../../../components/configs/importExportConfigs';
import { Offer } from 'src/utils/api/pagesApi/offersApi';

interface Props {
  exportData: Offer[];
  loading: boolean;
  onDataChange?: () => Promise<void>;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...offersImportExportConfig,
    onExport: () => exportData.map(offer => ({
      name: offer.name,
      priceType: offer.priceType,
      fixedPrice: offer.fixedPrice || 0,
      startDate: offer.startDate,
      endDate: offer.endDate,
      groupsCount: offer.offerGroups?.length || 0,
      itemsCount: offer.offerItems?.length || 0,
      isActive: offer.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('offers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/offers/components/ProductMultiSelectDialog.tsx
============================================================
// File: src/pages/pos/offers/components/ProductMultiSelectDialog.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Button, TextField, Box, Checkbox,
  Table, TableBody, TableCell, TableContainer, TableHead,
  TableRow, Paper, Chip, Stack, Typography, InputAdornment,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconSearch, IconSelectAll } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';

interface SelectedProduct {
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}

interface Props {
  open: boolean;
  onClose: () => void;
  onSubmit: (products: SelectedProduct[]) => void;
  title?: string;
  preSelectedItems?: string[]; // المنتجات المختارة مسبقاً
}

const ProductMultiSelectDialog: React.FC<Props> = ({
  open, onClose, onSubmit, title, preSelectedItems = []
}) => {
  const { t } = useTranslation();
  const [products, setProducts] = React.useState<any[]>([]);
  const [groups, setGroups] = React.useState<any[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [selectedGroupId, setSelectedGroupId] = React.useState('');
  const [selectedProducts, setSelectedProducts] = React.useState<Set<string>>(new Set());

  React.useEffect(() => {
    if (open) {
      loadGroups();
      loadProducts();
      // ⭐ تحميل المنتجات المختارة مسبقاً عند فتح الـ dialog
      console.log('Pre-selected items:', preSelectedItems);
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [open, preSelectedItems]);

  // ⭐ تحديث المنتجات المختارة عند تغيير preSelectedItems
  React.useEffect(() => {
    if (open) {
      console.log('Updating selected products with:', preSelectedItems);
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [preSelectedItems, open]);

  const loadGroups = async () => {
    try {
      const groupsData = await groupsApi.getAll();
      const flatGroups = flattenGroups(groupsData);
      setGroups(flatGroups);
    } catch (error) {
      console.error('Error loading groups:', error);
    }
  };

  const flattenGroups = (groups: any[]): any[] => {
    const result: any[] = [];
    
    const flatten = (items: any[], level = 0) => {
      items.forEach(item => {
        result.push({
          ...item,
          displayName: '  '.repeat(level) + item.name,
          level
        });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(groups);
    return result;
  };

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productsApi.getAll(1, 100);
      const filteredProducts = data.data.filter(p => 
        p.productPrices && 
        p.productPrices.length > 0 &&
        p.isActive
      );
      setProducts(filteredProducts);
    } catch (error) {
      console.error('Error loading products:', error);
    } finally {
      setLoading(false);
    }
  };

const filteredProducts = React.useMemo(() => {
  let result = [...products];

  if (searchQuery.trim()) {
    const searchLower = searchQuery.toLowerCase();
    result = result.filter(product => {
      // البحث في اسم المنتج
      const productNameMatch = product.name.toLowerCase().includes(searchLower);
      
      // البحث في أسماء الأسعار والاسم المدمج
      const priceNameMatch = product.productPrices.some((price: any) => {
        const priceName = price.posPriceName;
        const combinedName = priceName  && priceName !== product.name
          ? `${product.name} - ${priceName}`
          : product.name;
        
        return priceName.toLowerCase().includes(searchLower) ||
               combinedName.toLowerCase().includes(searchLower);
      });
      
      // البحث في الباركود
      const barcodeMatch = product.productPrices.some((price: any) => 
        price.barcode && price.barcode.toLowerCase().includes(searchLower)
      );
      
      return productNameMatch || priceNameMatch || barcodeMatch;
    });
  }

  if (selectedGroupId) {
    result = result.filter(product => product.groupId === selectedGroupId);
  }

  return result;
}, [products, searchQuery, selectedGroupId]);

const allProductPrices = React.useMemo(() => {
  const prices: Array<{
    productPriceId: string;
    productId: string;
    productName: string;
    priceName: string;
    price: number;
    barcode: string;
    displayName: string; // ⭐ إضافة displayName محسن
  }> = [];

  filteredProducts.forEach(product => {
    product.productPrices.forEach((price: any) => {
      const priceName = price.posPriceName;
      
      prices.push({
        productPriceId: price.id,
        productId: product.id,
        productName: product.name,
        priceName: priceName,
        price: price.price,
        barcode: price.barcode || '',
        // ⭐ إنشاء displayName محسن
        displayName: priceName  && priceName !== product.name
          ? `${product.name} - ${priceName}`
          : product.name
      });
    });
  });

  return prices;
}, [filteredProducts]);

  const handleSelectAll = () => {
    if (selectedProducts.size === allProductPrices.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(allProductPrices.map(p => p.productPriceId)));
    }
  };

  const handleProductToggle = (productPriceId: string) => {
    const newSelected = new Set(selectedProducts);
    if (newSelected.has(productPriceId)) {
      newSelected.delete(productPriceId);
      console.log('Removed product:', productPriceId);
    } else {
      newSelected.add(productPriceId);
      console.log('Added product:', productPriceId);
    }
    setSelectedProducts(newSelected);
  };

  const handleConfirm = () => {
    // ⭐ إرجاع كل المنتجات المختارة (الجديدة والقديمة)
    const selectedProductsData = allProductPrices
      .filter(p => selectedProducts.has(p.productPriceId))
      .map(p => ({
        productPriceId: p.productPriceId,
        productName: p.productName,
        priceName: p.priceName,
        price: p.price
      }));
    
    console.log('Final selected products:', selectedProductsData);
    console.log('Selected product IDs:', Array.from(selectedProducts));
    
    onSubmit(selectedProductsData);
    handleCancel();
  };

  const handleCancel = () => {
    onClose();
    setSearchQuery('');
    setSelectedGroupId('');
    // ⭐ إعادة تعيين للمنتجات المختارة مسبقاً عند الإلغاء
    setSelectedProducts(new Set(preSelectedItems));
  };

  return (
    <Dialog open={open} onClose={handleCancel} maxWidth="lg" fullWidth>
      <DialogTitle>
        {title || t('offers.form.selectProducts')}
      </DialogTitle>
      
      <DialogContent>
        <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
          <TextField
            placeholder={t('offers.form.searchProductsAndPrices')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              )
            }}
            sx={{ flex: 1 }}
          />
          
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>{t('offers.form.filterByGroup')}</InputLabel>
            <Select
              value={selectedGroupId}
              onChange={(e) => setSelectedGroupId(e.target.value)}
              label={t('offers.form.filterByGroup')}
            >
              <MenuItem value="">
                <em>{t('offers.form.allGroups')}</em>
              </MenuItem>
              {groups.map((group) => (
                <MenuItem key={group.id} value={group.id}>
                  {group.displayName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>

        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            {t('offers.form.productsFound', { count: allProductPrices.length })}
          </Typography>
          
          <Stack direction="row" spacing={1} alignItems="center">
            <Chip 
              label={t('offers.form.selected', { count: selectedProducts.size })}
              color="primary"
              variant="outlined"
            />
            <Button
              size="small"
              startIcon={<IconSelectAll />}
              onClick={handleSelectAll}
            >
              {selectedProducts.size === allProductPrices.length 
                ? t('offers.form.deselectAll') 
                : t('offers.form.selectAll')
              }
            </Button>
          </Stack>
        </Box>

<TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 400 }}>
  <Table stickyHeader size="small">
    <TableHead>
      <TableRow>
        <TableCell padding="checkbox">
          <Checkbox
            checked={selectedProducts.size === allProductPrices.length && allProductPrices.length > 0}
            indeterminate={selectedProducts.size > 0 && selectedProducts.size < allProductPrices.length}
            onChange={handleSelectAll}
          />
        </TableCell>
        <TableCell>{t('offers.form.productName')}</TableCell>
        {/* ⭐ حذف عمود اسم السعر */}
        <TableCell>{t('offers.form.price')}</TableCell>
        <TableCell>{t('offers.form.barcode')}</TableCell>
      </TableRow>
    </TableHead>
    <TableBody>
      {loading ? (
        <TableRow>
          <TableCell colSpan={4} align="center">
            {t('common.loading')}
          </TableCell>
        </TableRow>
      ) : allProductPrices.length === 0 ? (
        <TableRow>
          <TableCell colSpan={4} align="center">
            {t('offers.form.noProductsFound')}
          </TableCell>
        </TableRow>
      ) : (
        allProductPrices.map((productPrice) => (
          <TableRow 
            key={productPrice.productPriceId}
            hover
            sx={{ cursor: 'pointer' }}
            onClick={() => handleProductToggle(productPrice.productPriceId)}
          >
            <TableCell padding="checkbox">
              <Checkbox
                checked={selectedProducts.has(productPrice.productPriceId)}
                onChange={() => handleProductToggle(productPrice.productPriceId)}
              />
            </TableCell>
            <TableCell>
              {/* ⭐ دمج اسم المنتج مع اسم السعر */}
              <Box>
                <Typography variant="body2" fontWeight={500}>
                  {productPrice.displayName
                    ? productPrice.displayName
                    : productPrice.productName
                  }
                </Typography>
                {/* يمكن إضافة معلومات إضافية كـ subtitle إذا لزم الأمر */}
                {productPrice.priceName  && productPrice.priceName !== productPrice.productName && (
                  <Typography variant="caption" color="text.secondary">
                    {productPrice.productName}
                  </Typography>
                )}
              </Box>
            </TableCell>
            <TableCell>
              <Typography variant="body2" sx={{ fontWeight: 600, color: 'primary.main' }}>
                {productPrice.price.toFixed(2)} {t('common.currency')}
              </Typography>
            </TableCell>
            <TableCell>
              <Typography variant="body2" color="text.secondary" fontFamily="monospace">
                {productPrice.barcode || '-'}
              </Typography>
            </TableCell>
          </TableRow>
        ))
      )}
    </TableBody>
  </Table>
</TableContainer>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={handleCancel}>
          {t('common.cancel')}
        </Button>
        <Button 
          onClick={handleConfirm} 
          variant="contained"
          disabled={selectedProducts.size === 0}
        >
          {t('offers.form.addSelected', { count: selectedProducts.size })}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ProductMultiSelectDialog;


============================================================
FILE: src/Pages/pos/offers/OffersPage.tsx
============================================================
// File: src/pages/pos/offers/OffersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip, Pagination
} from '@mui/material';
import { IconFilter, IconPlus, IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import OfferTable from './components/OfferTable';
import OfferRow from './components/OfferRow';
import OfferForm from './components/OfferForm';
import MobileOffersFilter, { OffersFilterState } from './components/mobile/MobileOffersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/offersApi';
import { Offer, OffersResponse } from 'src/utils/api/pagesApi/offersApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const OffersPage: React.FC<Props> = (props) => {
  const { canAdd = true, canEdit = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [offersData, setOffersData] = React.useState<OffersResponse>({
    totalCount: 0,
    pageCount: 1,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [selectedOffer, setSelectedOffer] = React.useState<Offer | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Offer;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<OffersFilterState>({
    searchQuery: '',
    status: '',
    priceType: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchOffers = async (page = 1) => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll(page, offersData.pageSize);
      setOffersData(data);
    } catch (e: any) {
      setErr(e?.message || t('offers.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchOffers();
    // eslint-disable-next-line
  }, []);

  const searchOffers = (query: string) => {
    if (!query.trim()) {
      return offersData.data;
    }
    
    const searchLower = query.toLowerCase();
    return offersData.data.filter(offer => 
      offer.name.toLowerCase().includes(searchLower) ||
      offer.priceType.toLowerCase().includes(searchLower)
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...offersData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(offer => 
        offer.name.toLowerCase().includes(searchLower) ||
        offer.priceType.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(offer => offer.isActive === isActive);
    }

    if (mobileFilters.priceType) {
      result = result.filter(offer => offer.priceType === mobileFilters.priceType);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [offersData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchOffers(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.priceType) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchOffers(offersData.pageNumber);
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedOffer = await apiSrv.update(data);
      setOffersData(prev => ({
        ...prev,
        data: prev.data.map(o => o.id === updatedOffer.id ? updatedOffer : o)
      }));
      if (selectedOffer && selectedOffer.id === data.id) {
        setSelectedOffer(updatedOffer);
      }
      return updatedOffer;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (offer: Offer) => {
    setDialog({ open: true, mode: 'edit', current: offer });
  };

  const handlePageChange = (_: any, page: number) => {
    fetchOffers(page);
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        exportData={offersData.data} 
        loading={loading}
        onDataChange={fetchOffers}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('offers.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('offers.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('offers.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('offers.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('offers.title')} ({offersData.totalCount})
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('offers.noSearchResults') : t('offers.noOffers')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(offer => (
                  <OfferRow
                    key={offer.id}
                    offer={offer}
                    onEdit={() => handleEdit(offer)}
                    isSelected={selectedOffer?.id === offer.id}
                    canEdit={canEdit}
                  />
                ))
              : (
                  <OfferTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedOfferId={selectedOffer?.id}
                    canEdit={canEdit}
                  />
                )}
          </>
        )}

        {/* Pagination */}
        {offersData.pageCount > 1 && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <Pagination
              count={offersData.pageCount}
              page={offersData.pageNumber}
              onChange={handlePageChange}
              color="primary"
              size={isMobile ? 'small' : 'medium'}
            />
          </Box>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileOffersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={offersData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      <OfferForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default OffersPage;

============================================================
FILE: src/Pages/pos/payment-methods/components/mobile/MobilePosPaymentMethodsFilter.tsx
============================================================
// File: src/pages/pos-payment-methods/components/mobile/MobilePosPaymentMethodsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PosPaymentMethodsFilterState {
  searchQuery: string;
  accountType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PosPaymentMethodsFilterState;
  onFiltersChange: (filters: PosPaymentMethodsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobilePosPaymentMethodsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PosPaymentMethodsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const accountTypeOptions = [
    { value: '', label: t('common.all') },
    { value: 'Cash', label: t('safes.types.cash') },
    { value: 'Bank', label: t('accounts.types.bank') },
    { value: 'Wallet', label: t('accounts.types.wallet') },
    { value: 'Visa', label: t('accounts.types.visa') },
    { value: 'InstaPay', label: t('accounts.types.instapay') },
    { value: 'StaffAccount', label: t('accounts.types.staffAccount') }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posPaymentMethods.active') },
    { value: 'false', label: t('posPaymentMethods.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('posPaymentMethods.name') },
    { value: 'safeOrAccount.name', label: t('posPaymentMethods.safeOrAccount') },
    { value: 'safeOrAccount.typeName', label: t('posPaymentMethods.accountType') },
    { value: 'isActive', label: t('posPaymentMethods.status') }
  ];

  const handleLocalChange = (field: keyof PosPaymentMethodsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PosPaymentMethodsFilterState = {
      searchQuery: '',
      accountType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.accountType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('posPaymentMethods.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posPaymentMethods.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('posPaymentMethods.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('posPaymentMethods.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('posPaymentMethods.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('posPaymentMethods.filter.filters')}</Typography>
            {(localFilters.accountType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.accountType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.accountType')}</InputLabel>
              <Select
                value={localFilters.accountType}
                label={t('posPaymentMethods.accountType')}
                onChange={(e) => handleLocalChange('accountType', e.target.value)}
              >
                {accountTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('posPaymentMethods.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('posPaymentMethods.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('posPaymentMethods.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posPaymentMethods.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('posPaymentMethods.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('posPaymentMethods.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('posPaymentMethods.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('posPaymentMethods.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('posPaymentMethods.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePosPaymentMethodsFilter;


============================================================
FILE: src/Pages/pos/payment-methods/components/mobile/PosPaymentMethodsCards.tsx
============================================================
// File: src/pages/pos-payment-methods/components/mobile/PosPaymentMethodsCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { useTranslation } from 'react-i18next';

interface Props {
  paymentMethods: PosPaymentMethod[];
  onEdit: (paymentMethod: PosPaymentMethod) => void;
  loading: boolean;
}

const PosPaymentMethodsCards: React.FC<Props> = ({ paymentMethods, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (paymentMethods.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posPaymentMethods.noPaymentMethods')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {paymentMethods.map((paymentMethod) => (
        <Grid item xs={12} sm={6} md={4} key={paymentMethod.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {paymentMethod.name}
                  </Typography>
                  
                  {paymentMethod.safeOrAccount && (
                    <>
                      <Typography 
                        variant="body2" 
                        color="text.secondary"
                        sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                      >
                        {t('posPaymentMethods.safeOrAccount')}: {paymentMethod.safeOrAccount.name}
                      </Typography>
                      
                      <Box>
                        <Chip
                          label={t(`accounts.types.${paymentMethod.safeOrAccount.typeName.toLowerCase()}`)}
                          color={paymentMethod.safeOrAccount.safeOrAccountType === 1 ? 'warning' : 'primary'}
                          variant="outlined"
                          size="small"
                        />
                      </Box>
                      
                      {paymentMethod.safeOrAccount.accountNumber && (
                        <Typography 
                          variant="body2" 
                          color="text.secondary"
                          sx={{ 
                            fontSize: { xs: '0.75rem', sm: '0.875rem' },
                            fontFamily: 'monospace'
                          }}
                        >
                          {t('posPaymentMethods.accountNumber')}: {paymentMethod.safeOrAccount.accountNumber}
                        </Typography>
                      )}
                      
                      {paymentMethod.safeOrAccount.collectionFeePercent > 0 && (
                        <Typography 
                          variant="body2" 
                          color="text.secondary"
                          sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                        >
                          {t('posPaymentMethods.collectionFee')}: {paymentMethod.safeOrAccount.collectionFeePercent}%
                        </Typography>
                      )}
                    </>
                  )}
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={paymentMethod.isActive ? t('posPaymentMethods.active') : t('posPaymentMethods.inactive')}
                      color={paymentMethod.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(paymentMethod)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default PosPaymentMethodsCards;


============================================================
FILE: src/Pages/pos/payment-methods/components/ActionsBar.tsx
============================================================
// File: src/pages/pos-payment-methods/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('posPaymentMethods.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('posPaymentMethods.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/payment-methods/components/PageHeader.tsx
============================================================
// File: src/pages/pos-payment-methods/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { posPaymentMethodsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';

interface Props {
  exportData: PosPaymentMethod[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...posPaymentMethodsImportExportConfig,
    onExport: () => exportData.map(method => ({
      name: method.name,
      safeOrAccountName: method.safeOrAccount?.name || '',
      type: method.type,
      isActive: method.isActive,
      createdOn: method.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('posPaymentMethods.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/payment-methods/components/PosPaymentMethodForm.tsx
============================================================
// File: src/pages/pos-payment-methods/components/PosPaymentMethodForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Box,
  Chip,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { SafeOrAccount } from 'src/utils/api/pagesApi/safesAndAccountsApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: PosPaymentMethod;
  safesAndAccounts: SafeOrAccount[];
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const PosPaymentMethodForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  safesAndAccounts,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  type FormValues = {
    name: string;
    safeOrAccountID: string;
    branches: any[]; // Replace 'any' with the actual branch type if available
  };
  
  const { control, handleSubmit, reset, watch, formState: { errors } } = useForm<FormValues>({
    defaultValues: {
      name: '',
      safeOrAccountID: '',
      branches: []
    }
  });
  
  useFieldArray({
        control,
        name: 'branches'
    });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        safeOrAccountID: initialValues.safeOrAccountID || '',
        branches: initialValues.branches || []
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        safeOrAccountID: '',
        branches: []
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          safeOrAccountID: '',
          branches: []
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  const selectedAccount = safesAndAccounts.find(sa => sa.id === watch('safeOrAccountID'));

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('posPaymentMethods.add') : t('posPaymentMethods.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('posPaymentMethods.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('posPaymentMethods.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="safeOrAccountID"
            control={control}
            rules={{ required: t('posPaymentMethods.validation.accountRequired') }}
            render={({ field }) => (
              <FormControl fullWidth error={!!errors.safeOrAccountID}>
                <InputLabel>{t('posPaymentMethods.safeOrAccount')}</InputLabel>
                <Select
                  {...field}
                  label={t('posPaymentMethods.safeOrAccount')}
                  disabled={isSubmitting}
                >
                  {safesAndAccounts.map((sa) => (
                    <MenuItem key={sa.id} value={sa.id}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography>{sa.name}</Typography>
                        <Chip
                          label={t(`accounts.types.${sa.typeName.toLowerCase()}`)}
                          size="small"
                          variant="outlined"
                          color={sa.safeOrAccountType === 1 ? 'warning' : 'primary'}
                        />
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
          />

          {selectedAccount && (
            <Box sx={{ p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                {t('posPaymentMethods.selectedAccount')}
              </Typography>
              <Stack direction="row" spacing={1} alignItems="center">
                <Typography variant="body2">{selectedAccount.name}</Typography>
                <Chip
                  label={t(`accounts.types.${selectedAccount.typeName.toLowerCase()}`)}
                  size="small"
                  color={selectedAccount.safeOrAccountType === 1 ? 'warning' : 'primary'}
                />
                {selectedAccount.accountNumber && (
                  <Typography variant="caption" sx={{ fontFamily: 'monospace' }}>
                    {selectedAccount.accountNumber}
                  </Typography>
                )}
              </Stack>
            </Box>
          )}

          {/* يمكن إضافة إدارة الفروع هنا لاحقاً */}
          <Typography variant="body2" color="text.secondary">
            {t('posPaymentMethods.branchesNote')}
          </Typography>
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default PosPaymentMethodForm;


============================================================
FILE: src/Pages/pos/payment-methods/components/PosPaymentMethodsTable.tsx
============================================================
// File: src/pages/pos-payment-methods/components/PosPaymentMethodsTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';

interface Props {
  rows: PosPaymentMethod[];
  onEdit: (paymentMethod: PosPaymentMethod) => void;
}

const PosPaymentMethodsTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<PosPaymentMethod>[] = [
    { field: 'name', headerName: t('posPaymentMethods.name'), flex: 1, minWidth: 180 },
    { 
      field: 'safeOrAccountName', 
      headerName: t('posPaymentMethods.safeOrAccount'), 
      flex: 1,
      renderCell: ({ row }) => row.safeOrAccount?.name || '-'
    },
    { 
      field: 'accountType', 
      headerName: t('posPaymentMethods.accountType'), 
      flex: 0.8,
      renderCell: ({ row }) => {
        if (!row.safeOrAccount?.typeName) return '-';
        const safeOrAccountType = row.safeOrAccount.safeOrAccountType;
        return (
          <Chip 
            label={t(`accounts.types.${row.safeOrAccount.typeName.toLowerCase()}`)} 
            color={safeOrAccountType === 1 ? 'warning' : 'primary'} 
            variant="outlined" 
            size="small" 
          />
        );
      }
    },
    { 
      field: 'accountNumber', 
      headerName: t('posPaymentMethods.accountNumber'), 
      flex: 1,
      renderCell: ({ row }) => (
        <span style={{ fontFamily: 'monospace' }}>
          {row.safeOrAccount?.accountNumber || '-'}
        </span>
      )
    },
    { 
      field: 'collectionFee', 
      headerName: t('posPaymentMethods.collectionFee'), 
      flex: 0.8,
      renderCell: ({ row }) => `${row.safeOrAccount?.collectionFeePercent || 0}%`
    },
    { 
      field: 'isActive', 
      headerName: t('posPaymentMethods.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('posPaymentMethods.active') : t('posPaymentMethods.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default PosPaymentMethodsTable;


============================================================
FILE: src/Pages/pos/payment-methods/PosPaymentMethodsPage.tsx
============================================================
// File: src/pages/pos-payment-methods/PosPaymentMethodsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import PosPaymentMethodsTable from './components/PosPaymentMethodsTable';
import PosPaymentMethodsCards from './components/mobile/PosPaymentMethodsCards';
import PosPaymentMethodForm from './components/PosPaymentMethodForm';
import MobilePosPaymentMethodsFilter, { PosPaymentMethodsFilterState } from './components/mobile/MobilePosPaymentMethodsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import * as safesAndAccountsApi from 'src/utils/api/pagesApi/safesAndAccountsApi';
import { PosPaymentMethod } from 'src/utils/api/pagesApi/posPaymentMethodsApi';
import { SafeOrAccount } from 'src/utils/api/pagesApi/safesAndAccountsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const PosPaymentMethodsPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [paymentMethods, setPaymentMethods] = React.useState<PosPaymentMethod[]>([]);
  const [safesAndAccounts, setSafesAndAccounts] = React.useState<SafeOrAccount[]>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: PosPaymentMethod;
  }>({ open: false, mode: 'add', current: undefined });

  const { canAdd = true } = props; // Default to true if not provided

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PosPaymentMethodsFilterState>({
    searchQuery: '',
    accountType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchData = async () => {
    try {
      const [paymentMethodsData, safesAndAccountsData] = await Promise.all([
        apiSrv.getAll(),
        safesAndAccountsApi.getAllSafesAndAccounts()
      ]);
      setPaymentMethods(paymentMethodsData);
      setSafesAndAccounts(safesAndAccountsData);
    } catch (e: any) {
      setErr(e?.message || t('posPaymentMethods.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchData();
      }
      catch (e: any) { 
        setErr(e?.message || t('posPaymentMethods.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? paymentMethods.filter(pm => 
      pm.name.toLowerCase().includes(query.toLowerCase()) ||
      pm.safeOrAccount?.name.toLowerCase().includes(query.toLowerCase()) ||
      pm.safeOrAccount?.typeName.toLowerCase().includes(query.toLowerCase())
    ) : paymentMethods,
    [paymentMethods, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...paymentMethods];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(pm => 
        pm.name.toLowerCase().includes(searchLower) ||
        pm.safeOrAccount?.name.toLowerCase().includes(searchLower) ||
        pm.safeOrAccount?.typeName.toLowerCase().includes(searchLower)
      );
    }

    // فلتر نوع الحساب
    if (mobileFilters.accountType) {
      result = result.filter(pm => pm.safeOrAccount?.typeName === mobileFilters.accountType);
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(pm => pm.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [paymentMethods, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.accountType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchData();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchData();
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('posPaymentMethods.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <PosPaymentMethodsCards
                paymentMethods={filtered}
                onEdit={(pm) => setDialog({ open: true, mode: 'edit', current: pm })}
                loading={loading}
              />
            )
          : (
              <PosPaymentMethodsTable
                rows={filtered}
                onEdit={(pm) => setDialog({ open: true, mode: 'edit', current: pm })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePosPaymentMethodsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={paymentMethods.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <PosPaymentMethodForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        safesAndAccounts={safesAndAccounts}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default PosPaymentMethodsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/pos/products/PosProductsPage.tsx
============================================================
// File: src/Pages/pos/products/PosProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from '../../products/components/PageHeader';
import ActionsBar from '../../products/components/ActionsBar';
import ProductTable from '../../products/components/ProductTable';
import ProductRow from '../../products/components/ProductsRow';
import ProductForm from '../../products/components/ProductForm';
import ProductPricesDrawer from '../../products/components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from '../../products/components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import * as posScreensApi from 'src/utils/api/pagesApi/posScreensApi'; // ⭐ إضافة import للـ POS Screens
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi'; // ⭐ إضافة import للـ PosScreen type

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {
  // Add other props here if needed
}

const PosProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true, canImport = true, canExport = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [posScreens, setPosScreens] = React.useState<PosScreen[]>([]); // ⭐ إضافة state للـ POS Screens
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch POS products only ───── */
  const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
    try {
      setLoad(true);
      const data = await apiSrv.getByType(1, page, pageSize);
      setProductsData(data);
      setCurrentPage(page);
    } catch (e: any) {
      setErr(e?.message || t('posProducts.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  /* ───── search POS products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product && product.productType === 1) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 1)
        };
        setProductsData(filteredData);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {
      setErr(e?.message || t('posProducts.errors.searchFailed'));
    } finally {
      setSearching(false);
    }
  };

  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  // ⭐ تحديث useEffect لتحميل POS Screens
  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData, posScreensData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll(),
          posScreensApi.getAll() // ⭐ تحميل POS Screens
        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        setPosScreens(posScreensData); // ⭐ حفظ POS Screens في الـ state
        await fetchProducts(1);
      }
      catch (e: any) { 
        setErr(e?.message || t('posProducts.errors.loadFailed')); 
      }
    })();
  }, []);

  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        const filteredData = {
          ...data,
          data: data.data.filter(p => p.productType === 1)
        };
        setProductsData(filteredData);
        setCurrentPage(page);
      } catch (e: any) {
        setErr(e?.message || t('posProducts.errors.searchFailed'));
      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  const handleAdd = async (data: any) => {
    try {
      const addData = {
        ...data,
        productType: 1
      };
      await apiSrv.add(addData);
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updateData = {
        ...data,
        productType: 1
      };
      const updatedProduct = await apiSrv.update(updateData);
      
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      if (selectedProduct && selectedProduct.id === data.productId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  return (
    <Container maxWidth="xl">
      <PageHeader 
        title={t('posProducts.title')}
        exportData={displayedData} 
        loading={loading}
        showImport={canImport}
        showExport={canExport}
      />
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('posProducts.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('posProducts.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('posProducts.searchByBarcode')}: ${searchQuery}`
                    : `${t('posProducts.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('posProducts.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{
                minHeight: 48,
                fontSize: '1rem'
              }}
            >
              {t('posProducts.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('posProducts.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('posProducts.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('posProducts.noSearchResults') : t('posProducts.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      {/* ⭐ تمرير posScreens للـ ProductForm */}
      <ProductForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        groups={groups}
        units={units}
        posScreens={posScreens} // ⭐ تمرير POS Screens
        productType={1}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default PosProductsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/pos/screens/components/mobile/MobileScreensFilter.tsx
============================================================
// File: src/pages/pos-screens/components/mobile/MobileScreensFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface ScreensFilterState {
  searchQuery: string;
  status: string;
  visibility: string;
  parentFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ScreensFilterState;
  onFiltersChange: (filters: ScreensFilterState) => void;
  parentScreens: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobileScreensFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  parentScreens,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<ScreensFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posScreens.active') },
    { value: 'false', label: t('posScreens.inactive') }
  ];

  const visibilityOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('posScreens.visible') },
    { value: 'false', label: t('posScreens.hidden') }
  ];

  const parentOptions = [
    { value: '', label: t('common.all') },
    { value: 'root', label: t('posScreens.rootScreens') },
    ...parentScreens.map(parent => ({ value: parent.id, label: parent.name }))
  ];

  const sortOptions = [
    { value: 'name', label: t('posScreens.name') },
    { value: 'displayOrder', label: t('posScreens.displayOrder') },
    { value: 'colorHex', label: t('posScreens.color') },
    { value: 'icon', label: t('posScreens.icon') }
  ];

  const handleLocalChange = (field: keyof ScreensFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: ScreensFilterState = {
      searchQuery: '',
      status: '',
      visibility: '',
      parentFilter: '',
      sortBy: 'displayOrder',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.visibility) count++;
    if (localFilters.parentFilter) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('posScreens.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('posScreens.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('posScreens.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('posScreens.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('posScreens.filter.filters')}</Typography>
            {(localFilters.status || localFilters.visibility || localFilters.parentFilter) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.visibility, localFilters.parentFilter].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('posScreens.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.visibility')}</InputLabel>
              <Select
                value={localFilters.visibility}
                label={t('posScreens.visibility')}
                onChange={(e) => handleLocalChange('visibility', e.target.value)}
              >
                {visibilityOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.parentScreen')}</InputLabel>
              <Select
                value={localFilters.parentFilter}
                label={t('posScreens.parentScreen')}
                onChange={(e) => handleLocalChange('parentFilter', e.target.value)}
              >
                {parentOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('posScreens.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('posScreens.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('posScreens.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('posScreens.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('posScreens.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('posScreens.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('posScreens.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('posScreens.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileScreensFilter;


============================================================
FILE: src/Pages/pos/screens/components/mobile/ScreenCards.tsx
============================================================
// File: src/pages/pos-screens/components/mobile/ScreenCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Avatar,
  Collapse
} from '@mui/material';
import {
  IconEdit,
  IconPlus,
  IconChevronRight,
  IconChevronDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from '../StatusPill';
import { VisibilityPill } from '../VisibilityPill';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  loading: boolean;
  level?: number;
}

const ScreenCards: React.FC<Props> = ({ 
  screens, 
  onEdit, 
  onAddChild, 
  loading,
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (screenId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(screenId)) {
      newExpanded.delete(screenId);
    } else {
      newExpanded.add(screenId);
    }
    setExpanded(newExpanded);
  };

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  const ScreenCard: React.FC<{ screen: PosScreen; index: number }> = ({ screen }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);

    return (
      <Box sx={{ ml: level * 2 }}>
        <Card sx={{ 
          mb: 2,
          borderRadius: { xs: 1, sm: 2 },
          boxShadow: { xs: 1, sm: 2 },
          backgroundColor: screen.colorHex ? `${screen.colorHex}20` : undefined,
          borderLeft: screen.colorHex ? `4px solid ${screen.colorHex}` : undefined
        }}>
          <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
            <Stack spacing={2}>
              {/* Header */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                {hasChildren && (
                  <IconButton
                    size="small"
                    onClick={() => toggleExpanded(screen.id)}
                  >
                    {isExpanded ? (
                      <IconChevronDown size={16} />
                    ) : (
                      <IconChevronRight size={16} />
                    )}
                  </IconButton>
                )}

                <Avatar 
                  sx={{ 
                    width: 32, 
                    height: 32, 
                    backgroundColor: screen.colorHex,
                    fontSize: '1rem'
                  }}
                >
                  {screen.icon}
                </Avatar>

                <Typography 
                  variant="h6" 
                  component="div"
                  sx={{ 
                    flex: 1,
                    fontSize: { xs: '1rem', sm: '1.25rem' },
                    fontWeight: 'bold'
                  }}
                >
                  {screen.name}
                </Typography>

                <Typography 
                  variant="caption" 
                  color="text.secondary"
                  sx={{ 
                    backgroundColor: 'background.paper',
                    px: 1,
                    py: 0.5,
                    borderRadius: 1,
                    fontSize: { xs: '0.7rem', sm: '0.75rem' }
                  }}
                >
                  #{screen.displayOrder}
                </Typography>
              </Box>

              {/* Status Pills */}
              <Stack direction="row" spacing={1} flexWrap="wrap">
                <VisibilityPill isVisible={screen.isVisible} />
                <StatusPill isActive={screen.isActive} />
              </Stack>

              {/* Actions */}
              <Stack direction="row" spacing={1} justifyContent="flex-end">
                <IconButton
                  size="small"
                  onClick={() => onAddChild(screen)}
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'success.light',
                      color: 'success.contrastText'
                    }
                  }}
                >
                  <IconPlus size={16} />
                </IconButton>
                
                <IconButton 
                  onClick={() => onEdit(screen)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* Children */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <ScreenCards
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              loading={false}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  return (
    <Box>
      {screens.map((screen, index) => (
        <ScreenCard key={screen.id} screen={screen} index={index} />
      ))}
    </Box>
  );
};

export default ScreenCards;


============================================================
FILE: src/Pages/pos/screens/components/ActionsBar.tsx
============================================================
// File: src/pages/pos-screens/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('posScreens.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('posScreens.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/screens/components/OptimizedScreenTree.tsx
============================================================
// File: src/pages/pos-screens/components/OptimizedDragTree.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  IconButton,
  Avatar,
  Chip,
  Paper,
  Collapse
} from '@mui/material';
import {
  IconEdit,
  IconPlus,
  IconGripVertical,
  IconArrowUp,
  IconArrowDown,
  IconChevronRight,
  IconChevronDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[], parentId?: string) => void;
  level?: number;
  parentId?: string;
}

// دالة debounce للتحكم في تكرار الأحداث
const debounce = (func: Function, delay: number) => {
  let timeoutId: NodeJS.Timeout;
  return (...args: any[]) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

const OptimizedDragTree: React.FC<Props> = React.memo(({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0,
  parentId
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());
  const [draggedItem, setDraggedItem] = React.useState<string | null>(null);
  const [dragOverItem, setDragOverItem] = React.useState<string | null>(null);
  const [, setDragPosition] = React.useState<{ x: number; y: number } | null>(null);

  const toggleExpanded = React.useCallback((screenId: string) => {
    setExpanded(prev => {
      const newExpanded = new Set(prev);
      if (newExpanded.has(screenId)) {
        newExpanded.delete(screenId);
      } else {
        newExpanded.add(screenId);
      }
      return newExpanded;
    });
  }, []);

  // دالة محسنة للسحب مع requestAnimationFrame
  const updateDragPosition = React.useCallback(
    debounce((x: number, y: number) => {
      requestAnimationFrame(() => {
        setDragPosition({ x, y });
      });
    }, 16), // 60fps
    []
  );

  const moveScreen = React.useCallback((fromIndex: number, toIndex: number) => {
    if (fromIndex === toIndex) return;

    const newScreens = [...screens];
    const [movedScreen] = newScreens.splice(fromIndex, 1);
    newScreens.splice(toIndex, 0, movedScreen);
    
    onReorder(newScreens, parentId);
  }, [screens, onReorder, parentId]);

  // Drag handlers محسنة
  const handleDragStart = React.useCallback((e: React.DragEvent, screenId: string, index: number) => {
    setDraggedItem(screenId);
    e.dataTransfer.setData('text/plain', JSON.stringify({ screenId, index, parentId }));
    e.dataTransfer.effectAllowed = 'move';
    
    // تحسين الـ drag image
    const dragElement = e.currentTarget as HTMLElement;
    const rect = dragElement.getBoundingClientRect();
    
    // إنشاء drag image مخصص
    const dragImage = dragElement.cloneNode(true) as HTMLElement;
    dragImage.style.transform = 'rotate(5deg)';
    dragImage.style.opacity = '0.8';
    dragImage.style.pointerEvents = 'none';
    dragImage.style.position = 'absolute';
    dragImage.style.top = '-1000px';
    document.body.appendChild(dragImage);
    
    e.dataTransfer.setDragImage(dragImage, rect.width / 2, rect.height / 2);
    
    // تنظيف drag image بعد فترة
    setTimeout(() => {
      document.body.removeChild(dragImage);
    }, 0);
    
    // تحديث موضع السحب
    updateDragPosition(e.clientX, e.clientY);
  }, [parentId, updateDragPosition]);

  const handleDrag = React.useCallback((e: React.DragEvent) => {
    if (e.clientX !== 0 && e.clientY !== 0) {
      updateDragPosition(e.clientX, e.clientY);
    }
  }, [updateDragPosition]);

  const handleDragEnd = React.useCallback(() => {
    setDraggedItem(null);
    setDragOverItem(null);
    setDragPosition(null);
  }, []);

  const handleDragOver = React.useCallback((e: React.DragEvent, screenId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverItem(screenId);
  }, []);

  const handleDragLeave = React.useCallback(() => {
    setDragOverItem(null);
  }, []);

  const handleDrop = React.useCallback((e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    setDragOverItem(null);
    
    try {
      const dragData = JSON.parse(e.dataTransfer.getData('text/plain'));
      
      // تأكد من أن السحب في نفس المستوى
      if (dragData.parentId === parentId && dragData.index !== dropIndex) {
        moveScreen(dragData.index, dropIndex);
      }
    } catch (error) {
      }
  }, [parentId, moveScreen]);

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number;
  }> = React.memo(({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);
    const isDragging = draggedItem === screen.id;
    const isDragOver = dragOverItem === screen.id;

    const handleEdit = React.useCallback(() => {
      onEdit(screen);
    }, [screen]);

    const handleAddChild = React.useCallback(() => {
      onAddChild(screen);
    }, [screen]);

    const handleToggleExpanded = React.useCallback(() => {
      toggleExpanded(screen.id);
    }, [screen.id]);

    const handleMoveUp = React.useCallback(() => {
      moveScreen(index, Math.max(0, index - 1));
    }, [index]);

    const handleMoveDown = React.useCallback(() => {
      moveScreen(index, Math.min(screens.length - 1, index + 1));
    }, [index]);

    return (
      <Box>
        {/* العنصر الرئيسي */}
        <Paper
  elevation={isDragOver ? 2 : 0}
  draggable
  onDragStart={(e) => handleDragStart(e, screen.id, index)}
  onDrag={handleDrag}
  onDragEnd={handleDragEnd}
  onDragOver={(e) => handleDragOver(e, screen.id)}
  onDragLeave={handleDragLeave}
  onDrop={(e) => handleDrop(e, index)}
  sx={{
    display: 'flex',
    alignItems: 'center',
    py: 0.5,
    px: 1,
    ml: level * 2,
    backgroundColor: isDragOver 
      ? 'primary.light' 
      : screen.colorHex 
        ? `${screen.colorHex}15` 
        : 'background.paper',
    borderLeft: screen.colorHex ? `3px solid ${screen.colorHex}` : undefined,
    borderRadius: 1,
    mb: 0.5,
    minHeight: 40,
    cursor: 'grab',
    // إزالة التدوير والانحناء - فقط شفافية
    opacity: isDragging ? 0.5 : 1,
    // تحسين الانتقالات بدون تدوير
    transition: isDragging 
      ? 'none' 
      : 'all 0.2s ease',
    // إزالة will-change للأداء الأفضل
    '&:hover': {
      backgroundColor: screen.colorHex ? `${screen.colorHex}25` : 'action.hover',
      // إزالة التحرك لأعلى أيضاً
      boxShadow: isDragging ? 'none' : 1,
    },
    '&:active': {
      cursor: 'grabbing',
    }
  }}
>
          {/* زر التوسيع/الطي */}
          {hasChildren && (
            <IconButton
              size="small"
              onClick={handleToggleExpanded}
              sx={{ p: 0.25, mr: 0.5 }}
            >
              {isExpanded ? (
                <IconChevronDown size={14} />
              ) : (
                <IconChevronRight size={14} />
              )}
            </IconButton>
          )}

          {/* مقبض السحب */}
          <Box 
            sx={{ 
              mr: 1, 
              display: 'flex', 
              alignItems: 'center',
              '&:hover': {
                color: 'primary.main'
              }
            }}
          >
            <IconGripVertical size={14} color="#999" />
          </Box>

          {/* أزرار الترتيب */}
          <Stack direction="column" spacing={0} sx={{ mr: 1 }}>
            <IconButton
              size="small"
              onClick={handleMoveUp}
              disabled={index === 0}
              sx={{ p: 0.25 }}
            >
              <IconArrowUp size={10} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleMoveDown}
              disabled={index === screens.length - 1}
              sx={{ p: 0.25 }}
            >
              <IconArrowDown size={10} />
            </IconButton>
          </Stack>
          
          {/* أيقونة الشاشة */}
          <Avatar 
            sx={{ 
              width: 24, 
              height: 24, 
              backgroundColor: screen.colorHex,
              fontSize: '0.7rem',
              mr: 1
            }}
          >
            {screen.icon}
          </Avatar>

          {/* اسم الشاشة */}
          <Typography 
            variant="body2" 
            sx={{ 
              flex: 1, 
              fontSize: '0.875rem',
              fontWeight: 500
            }}
          >
            {screen.name}
          </Typography>

          {/* ترتيب العرض */}
          <Chip
            label={`#${screen.displayOrder}`}
            size="small"
            variant="outlined"
            sx={{ 
              height: 20,
              fontSize: '0.7rem',
              mr: 1
            }}
          />

          {/* حالات مضغوطة */}
          <Stack direction="row" spacing={0.5} sx={{ mr: 1 }}>
            {!screen.isVisible && (
              <Chip
                label="مخفي"
                size="small"
                color="warning"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
            {!screen.isActive && (
              <Chip
                label="غير نشط"
                size="small"
                color="default"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
          </Stack>

          {/* أزرار الإجراءات */}
          <Stack direction="row" spacing={0.5}>
            <IconButton
              size="small"
              onClick={handleAddChild}
              sx={{ p: 0.25 }}
            >
              <IconPlus size={14} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleEdit}
              sx={{ p: 0.25 }}
            >
              <IconEdit size={14} />
            </IconButton>
          </Stack>
        </Paper>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <OptimizedDragTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => onReorder(reorderedChildren, screen.id)}
              level={level + 1}
              parentId={screen.id}
            />
          </Collapse>
        )}
      </Box>
    );
  });

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 2 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxHeight: '70vh', overflow: 'auto' }}>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
});

OptimizedDragTree.displayName = 'OptimizedDragTree';

export default OptimizedDragTree;


============================================================
FILE: src/Pages/pos/screens/components/PageHeader.tsx
============================================================
// File: src/pages/pos-screens/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { posScreensImportExportConfig } from '../../../components/configs/importExportConfigs';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface Props {
  exportData: PosScreen[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // تحويل البيانات الهرمية إلى مسطحة للتصدير
  const flattenScreens = (screens: PosScreen[]): any[] => {
    const result: any[] = [];
    
    const flatten = (screens: PosScreen[], level = 0) => {
      screens.forEach(screen => {
        result.push({
          screenName: screen.name,
          parentScreenName: screen.parentScreen?.name || '',
          displayOrder: screen.displayOrder,
          colorHex: screen.colorHex,
          icon: screen.icon,
          isVisible: screen.isVisible,
          level: level
        });
        
        if (screen.children && screen.children.length > 0) {
          flatten(screen.children, level + 1);
        }
      });
    };
    
    flatten(screens);
    return result;
  };

  const config = {
    ...posScreensImportExportConfig,
    onExport: () => flattenScreens(exportData)
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('posScreens.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/screens/components/ScreenForm.tsx
============================================================
// File: src/pages/pos-screens/components/ScreenForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Box,
  Typography, Avatar, Stack
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import ScreenTreeSelect from './ScreenTreeSelect';
import { StatusPill } from './StatusPill';
import { VisibilityPill } from './VisibilityPill';

type FormValues = { 
  screenName: string; 
  ParentScreenId?: string;
  isVisible: boolean;
  displayOrder: number;
  colorHex: string;
  icon: string;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: PosScreen;
  parentScreen?: PosScreen;
  allScreens: PosScreen[];
  onClose: () => void;
  onSubmit: (data: FormValues) => void;
}

const ScreenForm: React.FC<Props> = ({
  open, mode, initialValues, parentScreen, allScreens, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  
  const getNextDisplayOrder = () => {
    if (parentScreen) {
      return (parentScreen.children?.length || 0) + 1;
    }
    return allScreens.length + 1;
  };

  const defaults: FormValues = { 
    screenName: '', 
    ParentScreenId: parentScreen?.id || '',
    isVisible: true,
    displayOrder: getNextDisplayOrder(),
    colorHex: '#2196F3',
    icon: '📱'
  };

  const { control, handleSubmit, reset, watch } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      screenName: initialValues?.name || '',
      ParentScreenId: initialValues?.parentId || '',
      isVisible: initialValues?.isVisible ?? true,
      displayOrder: initialValues?.displayOrder ?? 1,
      colorHex: initialValues?.colorHex ?? '#2196F3',
      icon: initialValues?.icon ?? '📱',
    },
  });

  const colorHex = watch('colorHex');
  const icon = watch('icon');
  const isVisible = watch('isVisible');
  const screenName = watch('screenName');

  React.useEffect(() => {
    if (mode === 'add') {
      reset({
        ...defaults,
        ParentScreenId: parentScreen?.id || '',
        displayOrder: getNextDisplayOrder()
      });
    } else if (initialValues) {
      reset({
        screenName: initialValues.name,
        ParentScreenId: initialValues.parentId || '',
        isVisible: initialValues.isVisible,
        displayOrder: initialValues.displayOrder,
        colorHex: initialValues.colorHex,
        icon: initialValues.icon,
      });
    }
  }, [mode, initialValues, parentScreen, reset]);

  const submit = (data: FormValues) => {
    onSubmit(data);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' 
          ? (parentScreen ? t('posScreens.addChild') : t('posScreens.add'))
          : t('posScreens.edit')
        }
        {parentScreen && (
          <Box component="span" sx={{ fontSize: '0.8em', color: 'text.secondary', ml: 1 }}>
            ({t('posScreens.parentScreen')}: {parentScreen.name})
          </Box>
        )}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="screenName"
                control={control}
                rules={{ 
                  required: t('posScreens.nameRequired'),
                  validate: (value) => {
                    if (!value || value.trim() === '') {
                      return t('posScreens.nameRequired');
                    }
                    return true;
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {!parentScreen && (
              <Grid item xs={12}>
                <Controller
                  name="ParentScreenId"
                  control={control}
                  render={({ field }) => (
                    <ScreenTreeSelect
                      screens={allScreens}
                      value={field.value}
                      onChange={field.onChange}
                      label={t('posScreens.parentScreen')}
                      excludeId={initialValues?.id}
                    />
                  )}
                />
              </Grid>
            )}

            <Grid item xs={6}>
              <Controller
                name="displayOrder"
                control={control}
                rules={{ required: true, min: 1 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.displayOrder')}
                    type="number"
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="isVisible"
                control={control}
                render={({ field }) => (
                  <Box>
                    <FormControlLabel
                      control={
                        <Switch 
                          checked={field.value} 
                          onChange={(e) => field.onChange(e.target.checked)} 
                        />
                      }
                      label={t('posScreens.visibility')}
                    />
                    <Box sx={{ mt: 1 }}>
                      <VisibilityPill isVisible={field.value} />
                    </Box>
                  </Box>
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="icon"
                control={control}
                rules={{ required: t('posScreens.iconRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.icon')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message || t('posScreens.iconHelp')}
                    placeholder="📱"
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="colorHex"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('posScreens.color')}
                    type="color"
                    fullWidth
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Box
                sx={{
                  p: 2,
                  border: 1,
                  borderColor: 'divider',
                  borderRadius: 1,
                  backgroundColor: 'background.paper'
                }}
              >
                <Typography variant="body2" gutterBottom>
                  {t('posScreens.preview')}:
                </Typography>
                
                <Stack direction="row" alignItems="center" spacing={2}>
                  <Avatar 
                    sx={{ 
                      backgroundColor: colorHex,
                      width: 40,
                      height: 40
                    }}
                  >
                    {icon}
                  </Avatar>
                  
                  <Box>
                    <Typography variant="h6">
                      {screenName || t('posScreens.sampleText')}
                    </Typography>
                    <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                      <VisibilityPill isVisible={isVisible} />
                      <StatusPill isActive={true} />
                    </Stack>
                  </Box>
                </Stack>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('posScreens.add') : t('posScreens.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default ScreenForm;


============================================================
FILE: src/Pages/pos/screens/components/ScreenTreeSelect.tsx
============================================================
// File: src/pages/pos-screens/components/ScreenTreeSelect.tsx
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Box
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface Props {
  screens: PosScreen[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  excludeId?: string;
}

const ScreenTreeSelect: React.FC<Props> = ({ 
  screens, 
  value, 
  onChange, 
  label,
  excludeId 
}) => {
  const { t } = useTranslation();

  const renderScreenOptions = (screens: PosScreen[], level = 0): React.ReactNode[] => {
    const options: React.ReactNode[] = [];

    screens.forEach(screen => {
      // استبعاد الشاشة المحددة وأطفالها
      if (excludeId && screen.id === excludeId) {
        return;
      }

      const indent = '—'.repeat(level);
      options.push(
        <MenuItem key={screen.id} value={screen.id}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography variant="body2">
              {indent} {screen.name}
            </Typography>
          </Box>
        </MenuItem>
      );

      if (screen.children && screen.children.length > 0) {
        options.push(...renderScreenOptions(screen.children, level + 1));
      }
    });

    return options;
  };

  return (
    <FormControl fullWidth>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
        displayEmpty
      >
        <MenuItem value="">
          <em>{t('posScreens.noParent')}</em>
        </MenuItem>
        {renderScreenOptions(screens)}
      </Select>
    </FormControl>
  );
};

export default ScreenTreeSelect;


============================================================
FILE: src/Pages/pos/screens/components/SimpleScreenTree.tsx
============================================================
// File: src/pages/pos-screens/components/SimpleScreenTree.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Box,
  Avatar,
} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus,
  IconArrowUp,
  IconArrowDown
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { VisibilityPill } from './VisibilityPill';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[]) => void;
  level?: number;
}

const SimpleScreenTree: React.FC<Props> = ({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0 
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());

  const toggleExpanded = (screenId: string) => {
    const newExpanded = new Set(expanded);
    if (newExpanded.has(screenId)) {
      newExpanded.delete(screenId);
    } else {
      newExpanded.add(screenId);
    }
    setExpanded(newExpanded);
  };

const moveScreen = (index: number, direction: 'up' | 'down') => {
  if (
    (direction === 'up' && index === 0) ||
    (direction === 'down' && index === screens.length - 1)
  ) {
    return;
  }

  const newScreens = [...screens];
  const targetIndex = direction === 'up' ? index - 1 : index + 1;
  
  // تبديل المواضع
  [newScreens[index], newScreens[targetIndex]] = [newScreens[targetIndex], newScreens[index]];
  
  // تحديث displayOrder مع الحفاظ على جميع البيانات
  const updatedScreens = newScreens.map((screen, idx) => ({
    ...screen, // الحفاظ على جميع البيانات الأصلية
    displayOrder: idx + 1
  }));
  
  onReorder(updatedScreens);
};

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number; 
  }> = ({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);

    return (
      <Box>
        <Card 
          sx={{ 
            mb: 1, 
            ml: level * 3,
            backgroundColor: screen.colorHex ? `${screen.colorHex}20` : undefined,
            borderLeft: screen.colorHex ? `4px solid ${screen.colorHex}` : undefined
          }}
        >
          <CardContent sx={{ py: 2, '&:last-child': { pb: 2 } }}>
            <Stack direction="row" alignItems="center" spacing={1}>
              {/* أزرار الترتيب */}
              <Stack direction="column" spacing={0}>
                <IconButton
                  size="small"
                  onClick={() => moveScreen(index, 'up')}
                  disabled={index === 0}
                  sx={{ p: 0.5 }}
                >
                  <IconArrowUp size={12} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => moveScreen(index, 'down')}
                  disabled={index === screens.length - 1}
                  sx={{ p: 0.5 }}
                >
                  <IconArrowDown size={12} />
                </IconButton>
              </Stack>

              {/* زر التوسيع/الطي */}
              {hasChildren && (
                <IconButton
                  size="small"
                  onClick={() => toggleExpanded(screen.id)}
                >
                  {isExpanded ? (
                    <IconChevronDown size={16} />
                  ) : (
                    <IconChevronRight size={16} />
                  )}
                </IconButton>
              )}
              
              {/* أيقونة الشاشة */}
              <Avatar 
                sx={{ 
                  width: 32, 
                  height: 32, 
                  backgroundColor: screen.colorHex,
                  fontSize: '0.875rem'
                }}
              >
                {screen.icon}
              </Avatar>

              {/* اسم الشاشة */}
              <Typography variant="body1" sx={{ flex: 1 }}>
                {screen.name}
              </Typography>

              {/* ترتيب العرض */}
              <Typography variant="caption" color="text.secondary">
                #{screen.displayOrder}
              </Typography>

              {/* حالة الرؤية */}
              <VisibilityPill isVisible={screen.isVisible} />

              {/* حالة النشاط */}
              <StatusPill isActive={screen.isActive} />

              {/* أزرار الإجراءات */}
              <Stack direction="row" spacing={1}>
                <IconButton
                  size="small"
                  onClick={() => onAddChild(screen)}
                  title={t('posScreens.addChild')}
                >
                  <IconPlus size={16} />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => onEdit(screen)}
                  title={t('posScreens.edit')}
                >
                  <IconEdit size={16} />
                </IconButton>
              </Stack>
            </Stack>
          </CardContent>
        </Card>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <SimpleScreenTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => {
                // تحديث الشاشات الفرعية
                const updatedScreens = screens.map(s => 
                  s.id === screen.id 
                    ? { ...s, children: reorderedChildren }
                    : s
                );
                onReorder(updatedScreens);
              }}
              level={level + 1}
            />
          </Collapse>
        )}
      </Box>
    );
  };

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
};

export default SimpleScreenTree;


============================================================
FILE: src/Pages/pos/screens/components/SmoothScreenTree.tsx
============================================================
// File: src/pages/pos-screens/components/SmoothScreenTree.tsx
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  IconButton,
  Collapse,
  Avatar,
  Chip
} from '@mui/material';
import {
  IconChevronRight,
  IconChevronDown,
  IconEdit,
  IconPlus,
  IconGripVertical
} from '@tabler/icons-react';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import { useTranslation } from 'react-i18next';

interface Props {
  screens: PosScreen[];
  onEdit: (screen: PosScreen) => void;
  onAddChild: (parentScreen: PosScreen) => void;
  onReorder: (reorderedScreens: PosScreen[], parentId?: string) => void;
  level?: number;
  parentId?: string;
}

const SmoothScreenTree: React.FC<Props> = React.memo(({ 
  screens, 
  onEdit, 
  onAddChild, 
  onReorder,
  level = 0,
  parentId
}) => {
  const { t } = useTranslation();
  const [expanded, setExpanded] = React.useState<Set<string>>(new Set());
  const [draggedItem, setDraggedItem] = React.useState<string | null>(null);
  const [dragOverItem, setDragOverItem] = React.useState<string | null>(null);

  const toggleExpanded = React.useCallback((screenId: string) => {
    setExpanded(prev => {
      const newExpanded = new Set(prev);
      if (newExpanded.has(screenId)) {
        newExpanded.delete(screenId);
      } else {
        newExpanded.add(screenId);
      }
      return newExpanded;
    });
  }, []);

  const handleDragStart = React.useCallback((e: React.DragEvent, screenId: string, index: number) => {
    setDraggedItem(screenId);
    e.dataTransfer.setData('text/plain', JSON.stringify({ screenId, index, parentId }));
    e.dataTransfer.effectAllowed = 'move';
    
    // إضافة تأثير بصري
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '0.5';
    }
  }, [parentId]);

  const handleDragEnd = React.useCallback((e: React.DragEvent) => {
    setDraggedItem(null);
    setDragOverItem(null);
    
    // إزالة التأثير البصري
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.opacity = '1';
    }
  }, []);

  const handleDragOver = React.useCallback((e: React.DragEvent, screenId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverItem(screenId);
  }, []);

  const handleDragLeave = React.useCallback(() => {
    setDragOverItem(null);
  }, []);

  const handleDrop = React.useCallback((e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    setDragOverItem(null);
    
    try {
      const dragData = JSON.parse(e.dataTransfer.getData('text/plain'));
      
      // تأكد من أن السحب في نفس المستوى
      if (dragData.parentId === parentId && dragData.index !== dropIndex) {
        const newScreens = [...screens];
        const [movedScreen] = newScreens.splice(dragData.index, 1);
        newScreens.splice(dropIndex, 0, movedScreen);
        onReorder(newScreens, parentId);
      }
    } catch (error) {
      }
  }, [screens, onReorder, parentId]);

  const ScreenItem: React.FC<{ 
    screen: PosScreen; 
    index: number;
  }> = React.memo(({ screen, index }) => {
    const hasChildren = screen.children && screen.children.length > 0;
    const isExpanded = expanded.has(screen.id);
    const isDragging = draggedItem === screen.id;
    const isDragOver = dragOverItem === screen.id;

    const handleEdit = React.useCallback(() => {
      onEdit(screen);
    }, [screen]);

    const handleAddChild = React.useCallback(() => {
      onAddChild(screen);
    }, [screen]);

    const handleToggleExpanded = React.useCallback(() => {
      toggleExpanded(screen.id);
    }, [screen.id]);

    return (
      <Box>
        {/* العنصر الرئيسي */}
        <Box
          draggable
          onDragStart={(e) => handleDragStart(e, screen.id, index)}
          onDragEnd={handleDragEnd}
          onDragOver={(e) => handleDragOver(e, screen.id)}
          onDragLeave={handleDragLeave}
          onDrop={(e) => handleDrop(e, index)}
          sx={{
            display: 'flex',
            alignItems: 'center',
            py: 0.5,
            px: 1,
            ml: level * 2,
            backgroundColor: isDragOver 
              ? 'primary.light' 
              : screen.colorHex 
                ? `${screen.colorHex}15` 
                : 'background.paper',
            borderLeft: screen.colorHex ? `3px solid ${screen.colorHex}` : undefined,
            borderRadius: 1,
            mb: 0.5,
            minHeight: 40,
            cursor: 'grab',
            opacity: isDragging ? 0.5 : 1,
            transform: isDragging ? 'rotate(5deg)' : 'none',
            transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',
            '&:hover': {
              backgroundColor: screen.colorHex ? `${screen.colorHex}25` : 'action.hover',
              transform: isDragging ? 'rotate(5deg)' : 'translateY(-1px)',
              boxShadow: isDragging ? 'none' : '0 2px 8px rgba(0,0,0,0.1)',
            },
            '&:active': {
              cursor: 'grabbing',
              transform: 'rotate(5deg) scale(1.02)',
            }
          }}
        >
          {/* مقبض السحب */}
          <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>
            <IconGripVertical size={14} color="#999" />
          </Box>

          {/* زر التوسيع/الطي */}
          {hasChildren && (
            <IconButton
              size="small"
              onClick={handleToggleExpanded}
              sx={{ p: 0.25, mr: 0.5 }}
            >
              {isExpanded ? (
                <IconChevronDown size={14} />
              ) : (
                <IconChevronRight size={14} />
              )}
            </IconButton>
          )}
          
          {/* أيقونة الشاشة */}
          <Avatar 
            sx={{ 
              width: 24, 
              height: 24, 
              backgroundColor: screen.colorHex,
              fontSize: '0.7rem',
              mr: 1
            }}
          >
            {screen.icon}
          </Avatar>

          {/* اسم الشاشة */}
          <Typography 
            variant="body2" 
            sx={{ 
              flex: 1, 
              fontSize: '0.875rem',
              fontWeight: 500
            }}
          >
            {screen.name}
          </Typography>

          {/* ترتيب العرض */}
          <Chip
            label={`#${screen.displayOrder}`}
            size="small"
            variant="outlined"
            sx={{ 
              height: 20,
              fontSize: '0.7rem',
              mr: 1
            }}
          />

          {/* حالات مضغوطة */}
          <Stack direction="row" spacing={0.5} sx={{ mr: 1 }}>
            {!screen.isVisible && (
              <Chip
                label="مخفي"
                size="small"
                color="warning"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
            {!screen.isActive && (
              <Chip
                label="غير نشط"
                size="small"
                color="default"
                sx={{ height: 18, fontSize: '0.65rem' }}
              />
            )}
          </Stack>

          {/* أزرار الإجراءات */}
          <Stack direction="row" spacing={0.5}>
            <IconButton
              size="small"
              onClick={handleAddChild}
              sx={{ p: 0.25 }}
            >
              <IconPlus size={14} />
            </IconButton>
            <IconButton
              size="small"
              onClick={handleEdit}
              sx={{ p: 0.25 }}
            >
              <IconEdit size={14} />
            </IconButton>
          </Stack>
        </Box>

        {/* الشاشات الفرعية */}
        {hasChildren && (
          <Collapse in={isExpanded}>
            <SmoothScreenTree
              screens={screen.children!}
              onEdit={onEdit}
              onAddChild={onAddChild}
              onReorder={(reorderedChildren) => onReorder(reorderedChildren, screen.id)}
              level={level + 1}
              parentId={screen.id}
            />
          </Collapse>
        )}
      </Box>
    );
  });

  if (screens.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 2 }}>
        <Typography variant="body2" color="text.secondary">
          {t('posScreens.noScreens')}
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxHeight: '70vh', overflow: 'auto' }}>
      {screens.map((screen, index) => (
        <ScreenItem 
          key={screen.id} 
          screen={screen} 
          index={index}
        />
      ))}
    </Box>
  );
});

SmoothScreenTree.displayName = 'SmoothScreenTree';

export default SmoothScreenTree;


============================================================
FILE: src/Pages/pos/screens/components/StatusPill.tsx
============================================================
// File: src/pages/pos-screens/components/StatusPill.tsx
import React from 'react';
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  isActive: boolean;
}

export const StatusPill: React.FC<Props> = ({ isActive }) => {
  const { t } = useTranslation();
  
  return (
    <Chip
      label={isActive ? t('posScreens.active') : t('posScreens.inactive')}
      color={isActive ? 'success' : 'default'}
      size="small"
      variant="outlined"
    />
  );
};


============================================================
FILE: src/Pages/pos/screens/components/VisibilityPill.tsx
============================================================
// File: src/pages/pos-screens/components/VisibilityPill.tsx
import React from 'react';
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

interface Props {
  isVisible: boolean;
}

export const VisibilityPill: React.FC<Props> = ({ isVisible }) => {
  const { t } = useTranslation();
  
  return (
    <Chip
      label={isVisible ? t('posScreens.visible') : t('posScreens.hidden')}
      color={isVisible ? 'primary' : 'warning'}
      size="small"
      variant="outlined"
    />
  );
};


============================================================
FILE: src/Pages/pos/screens/PosScreensPage.tsx
============================================================
// File: src/pages/pos-screens/PosScreensPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import OptimizedDragTree from './components/OptimizedScreenTree';
import ScreenCards from './components/mobile/ScreenCards';
import ScreenForm from './components/ScreenForm';
import MobileScreensFilter, { ScreensFilterState } from './components/mobile/MobileScreensFilter';
import * as apiSrv from 'src/utils/api/pagesApi/posScreensApi';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const PosScreensPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { canAdd } = props;
  
  const [items, setItems] = React.useState<PosScreen[]>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: PosScreen;
    parentScreen?: PosScreen;
  }>({ open: false, mode: 'add' });

  const [mobileFilters, setMobileFilters] = React.useState<ScreensFilterState>({
    searchQuery: '',
    status: '',
    visibility: '',
    parentFilter: '',
    sortBy: 'displayOrder',
    sortOrder: 'asc'
  });

  const fetchScreens = React.useCallback(async () => {
    try {
      setLoad(true);
      const result = await apiSrv.getAll();
      setItems(result);
    } catch (e: any) {    } finally {
      setLoad(false);
    }
  }, []);

  React.useEffect(() => {
    fetchScreens();
  }, [fetchScreens]);

  const filterTree = React.useCallback((screens: PosScreen[], searchQuery: string): PosScreen[] => {
    if (!searchQuery) return screens;
    
    return screens.reduce((acc: PosScreen[], screen) => {
      const matchesQuery = screen.name.toLowerCase().includes(searchQuery.toLowerCase());
      const filteredChildren = screen.children ? filterTree(screen.children, searchQuery) : [];
      
      if (matchesQuery || filteredChildren.length > 0) {
        acc.push({
          ...screen,
          children: filteredChildren
        });
      }
      
      return acc;
    }, []);
  }, []);

  const desktopFiltered = React.useMemo(
    () => filterTree(items, query),
    [items, query, filterTree]
  );

  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    const applyFiltersToTree = (screens: PosScreen[]): PosScreen[] => {
      return screens.reduce((acc: PosScreen[], screen) => {
        let includeScreen = true;

        if (mobileFilters.searchQuery.trim()) {
          const searchLower = mobileFilters.searchQuery.toLowerCase();
          const matchesSearch = screen.name.toLowerCase().includes(searchLower) ||
                               screen.icon.toLowerCase().includes(searchLower);
          
          const hasMatchingChildren = screen.children ? 
            applyFiltersToTree(screen.children).length > 0 : false;
          
          includeScreen = matchesSearch || hasMatchingChildren;
        }

        if (mobileFilters.status && includeScreen) {
          const isActive = mobileFilters.status === 'true';
          includeScreen = screen.isActive === isActive;
        }

        if (mobileFilters.visibility && includeScreen) {
          const isVisible = mobileFilters.visibility === 'true';
          includeScreen = screen.isVisible === isVisible;
        }

        if (mobileFilters.parentFilter && includeScreen) {
          if (mobileFilters.parentFilter === 'root') {
            includeScreen = !screen.parentId;
          } else {
            includeScreen = screen.parentId === mobileFilters.parentFilter;
          }
        }

        if (includeScreen) {
          const filteredChildren = screen.children ? 
            applyFiltersToTree(screen.children) : [];
          
          acc.push({
            ...screen,
            children: filteredChildren
          });
        }

        return acc;
      }, []);
    };

    result = applyFiltersToTree(result);

    const sortScreens = (screens: PosScreen[]): PosScreen[] => {
      const sorted = [...screens].sort((a, b) => {
        let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
        let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

        if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (mobileFilters.sortOrder === 'asc') {
          return aValue > bValue ? 1 : -1;
        } else {
          return aValue < bValue ? 1 : -1;
        }
      });

      return sorted.map(screen => ({
        ...screen,
        children: screen.children ? sortScreens(screen.children) : []
      }));
    };

    return sortScreens(result);
  }, [items, mobileFilters]);

  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  const getParentScreens = React.useCallback((screens: PosScreen[]): Array<{ id: string; name: string }> => {
    const parents: Array<{ id: string; name: string }> = [];
    
    const extractParents = (screens: PosScreen[]) => {
      screens.forEach(screen => {
        if (screen.children && screen.children.length > 0) {
          parents.push({ id: screen.id, name: screen.name });
          extractParents(screen.children);
        }
      });
    };
    
    extractParents(screens);
    return parents;
  }, []);

  const parentScreens = React.useMemo(() => getParentScreens(items), [items, getParentScreens]);

  const getActiveFiltersCount = React.useCallback(() => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.visibility) count++;
    if (mobileFilters.parentFilter) count++;
    return count;
  }, [mobileFilters]);

  const getTotalCount = React.useCallback((screens: PosScreen[]): number => {
    return screens.reduce((count, screen) => {
      return count + 1 + (screen.children ? getTotalCount(screen.children) : 0);
    }, 0);
  }, []);

  const totalCount = React.useMemo(() => getTotalCount(items), [items, getTotalCount]);
  const filteredCount = React.useMemo(() => getTotalCount(filtered), [filtered, getTotalCount]);

  const handleReorder = React.useCallback(async (reorderedScreens: PosScreen[], parentId?: string) => {
    try {
      const updateTreeWithNewOrder = (screens: PosScreen[]): PosScreen[] => {
        if (!parentId) {
          return reorderedScreens.map((screen, index) => ({
            ...screen,
            displayOrder: index + 1
          }));
        } else {
          return screens.map(screen => {
            if (screen.id === parentId) {
              return { 
                ...screen, 
                children: reorderedScreens.map((child, index) => ({
                  ...child,
                  displayOrder: index + 1
                }))
              };
            }
            return {
              ...screen,
              children: screen.children ? updateTreeWithNewOrder(screen.children) : []
            };
          });
        }
      };

      const newItems = updateTreeWithNewOrder(items);
      setItems(newItems);

      const reorderData = reorderedScreens.map((screen, index) => ({
        screenId: screen.id,
        displayOrder: index + 1,
        parentScreenId: parentId,
        screenName: screen.name,
        isVisible: screen.isVisible,
        colorHex: screen.colorHex,
        icon: screen.icon
      }));

      await apiSrv.reorderScreens(reorderData);
      await fetchScreens();
    } catch (e: any) {      await fetchScreens();
    }
  }, [items, fetchScreens]);

  const handleSubmit = async (formData: any) => {
    try {
      if (!formData.screenName || formData.screenName.trim() === '') {
        setErr(t('posScreens.nameRequired'));
        return;
      }
      
      if (dialog.mode === 'add') {
        const addData = {
          screenName: formData.screenName,
          ParentScreenId: formData.ParentScreenId || undefined,
          isVisible: Boolean(formData.isVisible),
          displayOrder: Number(formData.displayOrder),
          colorHex: formData.colorHex,
          icon: formData.icon
        };
        
        await apiSrv.add(addData);
      } else if (dialog.mode === 'edit' && dialog.current) {
        const updateData = {
          Screenid: dialog.current.id,
          screenName: formData.screenName,
          ParentScreenId: formData.ParentScreenId || undefined,
          isVisible: Boolean(formData.isVisible),
          displayOrder: Number(formData.displayOrder),
          colorHex: formData.colorHex,
          icon: formData.icon
        };
        
        await apiSrv.update(updateData);
      }
      
      await fetchScreens();
      setDialog({ open: false, mode: 'add' });
      
    } catch (error: any) {
      setErr(error?.message || t('posScreens.submitError'));
    }
  };

  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add' })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('posScreens.add')}
            </Button>
          )}
        </Box>
      )}

      <Box sx={{ 
        width: '100%',
        overflow: 'hidden',
        '& .MuiPaper-root': {
          borderRadius: { xs: 1, sm: 2 },
        }
      }}>
        {isMobile ? (
          <ScreenCards
            screens={filtered}
            onEdit={(screen) => setDialog({ open: true, mode: 'edit', current: screen })}
            onAddChild={(parentScreen) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentScreen 
            })}
            loading={loading}
          />
        ) : (
          <OptimizedDragTree
            screens={filtered}
            onEdit={(screen) => setDialog({ open: true, mode: 'edit', current: screen })}
            onAddChild={(parentScreen) => setDialog({ 
              open: true, 
              mode: 'add', 
              parentScreen 
            })}
            onReorder={handleReorder}
          />
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileScreensFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          parentScreens={parentScreens}
          totalResults={totalCount}
          filteredResults={filteredCount}
        />
      )}

      <ScreenForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        parentScreen={dialog.parentScreen}
        allScreens={items}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={handleSubmit}
      /></Container>
  );
};

export default PosScreensPage;
function setErr(_arg0: string) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/pos/table-sections/components/mobile/MobileSectionsFilter.tsx
============================================================
// File: src/pages/pos/table-sections/components/mobile/MobileSectionsFilter.tsx
import React from 'react';
import {
  Drawer, Box, Typography, TextField, FormControl, InputLabel,
  Select, MenuItem, Button, Divider, Stack, IconButton, Chip
} from '@mui/material';
import { IconX, IconFilter } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';

export interface SectionsFilterState {
  searchQuery: string;
  status: string;
  branchFilter: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SectionsFilterState;
  onFiltersChange: (filters: SectionsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSectionsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const branches = getUserBranchesFromStorage();

  const updateFilter = (key: keyof SectionsFilterState, value: string) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    onFiltersChange({
      searchQuery: '',
      status: '',
      branchFilter: '',
      sortBy: 'name',
      sortOrder: 'asc'
    });
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (filters.searchQuery) count++;
    if (filters.status) count++;
    if (filters.branchFilter) count++;
    return count;
  };

  return (
    <Drawer
      anchor="bottom"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
          maxHeight: '80vh'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography variant="h6">
              {t('common.filters')}
            </Typography>
            {getActiveFiltersCount() > 0 && (
              <Chip 
                label={getActiveFiltersCount()} 
                size="small" 
                color="primary" 
              />
            )}
          </Box>
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Stack spacing={3}>
          {/* Search */}
          <TextField
            label={t('tableSections.searchPlaceholder')}
            value={filters.searchQuery}
            onChange={(e) => updateFilter('searchQuery', e.target.value)}
            fullWidth
          />

          {/* Status Filter */}
          <FormControl fullWidth>
            <InputLabel>{t('common.status')}</InputLabel>
            <Select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              label={t('common.status')}
            >
              <MenuItem value="">
                <em>{t('common.all')}</em>
              </MenuItem>
              <MenuItem value="true">{t('common.active')}</MenuItem>
              <MenuItem value="false">{t('common.inactive')}</MenuItem>
            </Select>
          </FormControl>

          {/* Branch Filter */}
          {branches.length > 1 && (
            <FormControl fullWidth>
              <InputLabel>{t('tableSections.form.branch')}</InputLabel>
              <Select
                value={filters.branchFilter}
                onChange={(e) => updateFilter('branchFilter', e.target.value)}
                label={t('tableSections.form.branch')}
              >
                <MenuItem value="">
                  <em>{t('common.allBranches')}</em>
                </MenuItem>
                {branches.map((branch) => (
                  <MenuItem key={branch.id} value={branch.id}>
                    {branch.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}

          {/* Sort By */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortBy')}</InputLabel>
            <Select
              value={filters.sortBy}
              onChange={(e) => updateFilter('sortBy', e.target.value)}
              label={t('common.sortBy')}
            >
              <MenuItem value="name">{t('tableSections.form.name')}</MenuItem>
              <MenuItem value="serviceCharge">{t('tableSections.form.serviceCharge')}</MenuItem>
              <MenuItem value="tables">{t('tableSections.form.tablesCount')}</MenuItem>
            </Select>
          </FormControl>

          {/* Sort Order */}
          <FormControl fullWidth>
            <InputLabel>{t('common.sortOrder')}</InputLabel>
            <Select
              value={filters.sortOrder}
              onChange={(e) => updateFilter('sortOrder', e.target.value as 'asc' | 'desc')}
              label={t('common.sortOrder')}
            >
              <MenuItem value="asc">{t('common.ascending')}</MenuItem>
              <MenuItem value="desc">{t('common.descending')}</MenuItem>
            </Select>
          </FormControl>
        </Stack>

        <Divider sx={{ my: 3 }} />

        {/* Results Info */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" color="text.secondary">
            {t('common.showingResults', { 
              filtered: filteredResults, 
              total: totalResults 
            })}
          </Typography>
        </Box>

        {/* Actions */}
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            onClick={clearFilters}
            fullWidth
            disabled={getActiveFiltersCount() === 0}
          >
            {t('common.clearFilters')}
          </Button>
          <Button
            variant="contained"
            onClick={onClose}
            fullWidth
          >
            {t('common.applyFilters')}
          </Button>
        </Stack>
      </Box>
    </Drawer>
  );
};

export default MobileSectionsFilter;


============================================================
FILE: src/Pages/pos/table-sections/components/ActionsBar.tsx
============================================================
// File: src/pages/pos/table-sections/components/ActionsBar.tsx
import React from 'react';
import { Box, Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Box>
      <Button
        variant="contained"
        startIcon={<IconPlus />}
        onClick={onAdd}
      >
        {t('tableSections.add')}
      </Button>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/pos/table-sections/components/PageHeader.tsx
============================================================
// File: src/pages/pos/table-sections/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme,
  Chip,
  Stack
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../../components/ImportExportManager';
import { tableSectionsImportExportConfig } from '../../../components/configs/importExportConfigs';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  exportData: TableSection[];
  loading: boolean;
    onDataChange?: () => Promise<void>;

}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const getTotalTablesCount = () => {
    return exportData.reduce((total, section) => total + section.tables.length, 0);
  };

  const config = {
    ...tableSectionsImportExportConfig,
    onExport: () => exportData.map(section => ({
      name: section.name,
      serviceCharge: section.serviceCharge,
      tablesCount: section.tables.length,
      totalCapacity: section.tables.reduce((sum, table) => sum + table.capacity, 0),
      branchName: section.branchName || t('common.notSpecified'),
      isActive: section.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Box>
          <Typography 
            variant={isMobile ? "h5" : "h4"} 
            component="h1"
            sx={{
              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
              fontWeight: { xs: 600, sm: 500 },
              mb: 1
            }}
          >
            {t('tableSections.title')}
          </Typography>
          <Stack direction="row" spacing={2} alignItems="center">
            <Typography variant="body2" color="text.secondary">
              {t('tableSections.subtitle', { count: exportData.length })}
            </Typography>
            <Chip 
              label={t('tableSections.totalTables', { count: getTotalTablesCount() })}
              color="primary"
              variant="outlined"
              size="small"
            />
          </Stack>
        </Box>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/pos/table-sections/components/SectionForm.tsx
============================================================
// File: src/pages/pos/table-sections/components/SectionForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button, Box, Typography, IconButton,
  Card, CardContent, Stack, Divider
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew, IconTrash, IconPlus } from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { TableSection, Table } from 'src/utils/api/pagesApi/tableSectionsApi';

type FormValues = {
  name: string;
  serviceCharge: number;
  tables: Table[];
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: TableSection;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SectionForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const defaults: FormValues = {
    name: '',
    serviceCharge: 0,
    tables: []
  };

  const { control, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields: tableFields, append: appendTable, remove: removeTable } = useFieldArray({
    control,
    name: 'tables'
  });

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          serviceCharge: initialValues.serviceCharge,
          tables: initialValues.tables.map(table => ({
            id: table.id,
            name: table.name,
            sectionId: table.sectionId,
            capacity: table.capacity
          }))
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  const addTable = () => {
    appendTable({
      name: `T${tableFields.length + 1}`,
      sectionId: '',
      capacity: 0
    });
  };

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          id: initialValues.id,
          name: data.name,
          serviceCharge: Number(data.serviceCharge),
          tables: data.tables.map(table => ({
            ...(table.id && { id: table.id }),
            name: table.name,
            sectionId: initialValues.id,
            capacity: Number(table.capacity)
          }))
        };
        await onSubmit(updateData, saveAction);
      } else {
        const addData = {
          name: data.name,
          serviceCharge: Number(data.serviceCharge),
          tables: data.tables.map(table => ({
            name: table.name,
            capacity: Number(table.capacity)
          }))
        };
        await onSubmit(addData, saveAction);
      }

      if (mode === 'add' && saveAction === 'saveAndNew') {
        setTimeout(() => {
          reset(defaults);
        }, 100);
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('tableSections.add') : t('tableSections.edit')}
      </DialogTitle>

      <form>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Section Info */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('tableSections.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('tableSections.form.name')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Controller
                name="serviceCharge"
                control={control}
                rules={{ required: t('tableSections.serviceChargeRequired'), min: 0 }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('tableSections.form.serviceCharge')}
                    type="number"
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    inputProps={{ min: 0, step: 0.01 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            {/* Tables Section */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  {t('tableSections.form.tables')} ({tableFields.length})
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<IconPlus />}
                  onClick={addTable}
                  size="small"
                >
                  {t('tableSections.form.addTable')}
                </Button>
              </Box>

              {tableFields.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4, backgroundColor: 'grey.50', borderRadius: 1 }}>
                  <Typography color="text.secondary">
                    {t('tableSections.form.noTables')}
                  </Typography>
                </Box>
              ) : (
<Stack spacing={1}> {/* ⭐ تقليل المسافة من 2 إلى 1 */}
  {tableFields.map((table, index) => (
    <Card key={table.id} variant="outlined" sx={{ mb: 1 }}> {/* ⭐ إضافة margin bottom صغير */}
      <CardContent sx={{ py: 1, px: 2, '&:last-child': { pb: 1 } }}> {/* ⭐ تقليل padding */}
                        <Grid container spacing={2} alignItems="center">
                          <Grid item xs={12} md={5}>
                            <Controller
                              name={`tables.${index}.name`}
                              control={control}
                              rules={{ required: t('tableSections.tableNameRequired') }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('tableSections.form.tableName')}
                                  fullWidth
                                  size="small"
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  onFocus={(e) => e.target.select()}
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={5}>
                            <Controller
                              name={`tables.${index}.capacity`}
                              control={control}
                              rules={{ required: t('tableSections.capacityRequired'), min: 0 }}
                              render={({ field, fieldState }) => (
                                <TextField
                                  {...field}
                                  label={t('tableSections.form.capacity')}
                                  type="number"
                                  fullWidth
                                  size="small"
                                  required
                                  error={!!fieldState.error}
                                  helperText={fieldState.error?.message}
                                  inputProps={{ min: 1, max: 20 }}
                                  onFocus={(e) => e.target.select()}
                                />
                              )}
                            />
                          </Grid>

                          <Grid item xs={12} md={2}>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => removeTable(index)}
                              sx={{ width: '100%' }}
                            >
                              <IconTrash size={16} />
                            </IconButton>
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  ))}
                </Stack>
              )}
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 2, gap: 1 }}>
          <Button onClick={onClose} disabled={isSubmitting}>
            {t('common.cancel')}
          </Button>
          
          <Button 
            variant="outlined"
            startIcon={<IconDeviceFloppy size={20} />}
            onClick={handleSubmit((data) => submit(data, 'save'))}
            disabled={isSubmitting}
          >
            {t('tableSections.saveAndExit')}
          </Button>
          
          <Button 
            variant="contained"
            startIcon={<IconPlusNew size={20} />}
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
          >
            {t('tableSections.saveAndNew')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default SectionForm;


============================================================
FILE: src/Pages/pos/table-sections/components/SectionRow.tsx
============================================================
// File: src/pages/pos/table-sections/components/SectionRow.tsx
import React from 'react';
import {
  Card, CardContent, Typography, Box, Chip, IconButton,
  Stack, Divider, Tooltip, Grid
} from '@mui/material';
import { IconEdit, IconTable, IconUsers } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  section: TableSection;
  onEdit: () => void;
  isSelected?: boolean;
}

const SectionRow: React.FC<Props> = ({ section, onEdit, isSelected = false }) => {
  const { t } = useTranslation();
  const totalCapacity = section.tables.reduce((sum, table) => sum + table.capacity, 0);

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {section.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {section.branchName || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Chip
            label={section.isActive ? t('common.active') : t('common.inactive')}
            color={section.isActive ? 'success' : 'error'}
            size="small"
            variant={section.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Section Info */}
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" color="text.secondary">
                {t('tableSections.form.serviceCharge')}:
              </Typography>
              <Typography variant="body2" color="primary.main" fontWeight={600}>
                {section.serviceCharge.toFixed(2)}
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconTable size={16} />
              <Typography variant="body2" fontWeight={500}>
                {section.tables.length} {t('tableSections.form.tables')}
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <IconUsers size={16} />
              <Typography variant="body2" color="success.main" fontWeight={600}>
                {totalCapacity} {t('tableSections.form.persons')}
              </Typography>
            </Box>
          </Grid>
        </Grid>

        {/* Tables */}
        {section.tables.length > 0 && (
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              {t('tableSections.form.tables')}:
            </Typography>
            <Stack direction="row" spacing={0.5} flexWrap="wrap" gap={0.5}>
              {section.tables.map((table, index) => (
                <Chip
                  key={index}
                  label={`${table.name} (${table.capacity})`}
                  size="small"
                  variant="outlined"
                  sx={{ height: 24, fontSize: '0.75rem' }}
                />
              ))}
            </Stack>
          </Box>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default SectionRow;


============================================================
FILE: src/Pages/pos/table-sections/components/SectionTable.tsx
============================================================
// File: src/pages/pos/table-sections/components/SectionTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip, Box, Typography } from '@mui/material';
import { IconEdit, IconTable, IconUsers } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface Props {
  rows: TableSection[];
  onEdit: (section: TableSection) => void;
  selectedSectionId?: string;
}

const SectionTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<TableSection>[] = [
    { 
      field: 'name', 
      headerName: t('tableSections.form.name'), 
      flex: 1, 
      minWidth: 200 
    },
    { 
      field: 'serviceCharge', 
      headerName: t('tableSections.form.serviceCharge'), 
      width: 150,
      renderCell: ({ value }) => (
        <Box sx={{ color: 'primary.main', fontWeight: 600 }}>
          {value?.toFixed(2)} {t('common.currency')}
        </Box>
      )
    },
    { 
      field: 'tables', 
      headerName: t('tableSections.form.tables'), 
      width: 300,
      sortable: false,
      renderCell: ({ value }) => {
        const tables = value || [];
        const totalCapacity = tables.reduce((sum: number, table: any) => sum + table.capacity, 0);
        
        return (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <IconTable size={16} />
              <Typography variant="body2" fontWeight={500}>
                {tables.length}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
              <IconUsers size={16} />
              <Typography variant="body2" color="success.main" fontWeight={600}>
                {totalCapacity}
              </Typography>
            </Box>
            {tables.length > 0 && (
              <Stack direction="row" spacing={0.5}>
                {tables.slice(0, 2).map((table: any, index: number) => (
                  <Chip
                    key={index}
                    label={`${table.name} (${table.capacity})`}
                    size="small"
                    variant="outlined"
                    sx={{ height: 20, fontSize: '0.7rem' }}
                  />
                ))}
                {tables.length > 2 && (
                  <Chip
                    label={`+${tables.length - 2}`}
                    size="small"
                    variant="outlined"
                    sx={{ height: 20, fontSize: '0.7rem' }}
                  />
                )}
              </Stack>
            )}
          </Box>
        );
      }
    },
    { 
      field: 'branchName', 
      headerName: t('tableSections.form.branch'), 
      width: 200,
      renderCell: ({ value }) => value || t('common.notSpecified')
    },
    { 
      field: 'isActive', 
      headerName: t('common.status'), 
      width: 120,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('common.active') : t('common.inactive')} 
          color={value ? 'success' : 'error'} 
          size="small"
          variant={value ? 'filled' : 'outlined'}
        />
      )
    },
    {
      field: 'actions', 
      headerName: t('common.actions'), 
      width: 120, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25, 50]}
      initialState={{ pagination: { paginationModel: { pageSize: 25 } } }}
      sx={{
        '& .MuiDataGrid-cell:focus': {
          outline: 'none'
        },
        '& .MuiDataGrid-row:hover': {
          backgroundColor: 'action.hover'
        }
      }}
    />
  );
};

export default SectionTable;


============================================================
FILE: src/Pages/pos/table-sections/TableSectionsPage.tsx
============================================================
// File: src/pages/pos/table-sections/TableSectionsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, useTheme, Box, Button, Fab, Badge,
  Snackbar, Alert, Typography, Stack, TextField, 
  InputAdornment, IconButton, Chip
} from '@mui/material';
import { IconSearch, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SectionTable from './components/SectionTable';
import SectionRow from './components/SectionRow';
import SectionForm from './components/SectionForm';
import MobileSectionsFilter, { SectionsFilterState } from './components/mobile/MobileSectionsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/tableSectionsApi';
import { TableSection } from 'src/utils/api/pagesApi/tableSectionsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

interface Props extends PermissionProps {}

const TableSectionsPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));

  const [sections, setSections] = React.useState<TableSection[]>([]);
  const [selectedSection, setSelectedSection] = React.useState<TableSection | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: TableSection;
  }>({ open: false, mode: 'add', current: undefined });

  const [mobileFilters, setMobileFilters] = React.useState<SectionsFilterState>({
    searchQuery: '',
    status: '',
    branchFilter: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  const fetchSections = async () => {
    try {
      setLoad(true);
      const data = await apiSrv.getAll();
      setSections(data);
    } catch (e: any) {
      setErr(e?.message || t('tableSections.errors.loadFailed'));
    } finally {
      setLoad(false);
    }
  };

  React.useEffect(() => {
    fetchSections();
  }, []);

  const searchSections = (query: string) => {
    if (!query.trim()) {
      return sections;
    }
    
    const searchLower = query.toLowerCase();
    return sections.filter(section => 
      section.name.toLowerCase().includes(searchLower) ||
      section.branchName?.toLowerCase().includes(searchLower) ||
      section.tables.some(table => table.name.toLowerCase().includes(searchLower))
    );
  };

  const mobileFilteredData = React.useMemo(() => {
    let result = [...sections];

    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(section => 
        section.name.toLowerCase().includes(searchLower) ||
        section.branchName?.toLowerCase().includes(searchLower) ||
        section.tables.some(table => table.name.toLowerCase().includes(searchLower))
      );
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(section => section.isActive === isActive);
    }

    if (mobileFilters.branchFilter) {
      result = result.filter(section => section.branchId === mobileFilters.branchFilter);
    }

    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [sections, mobileFilters]);

  const displayedData = isMobile ? mobileFilteredData : searchSections(searchQuery);

  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.branchFilter) count++;
    return count;
  };

  const getTotalTablesCount = () => {
    return displayedData.reduce((total, section) => total + section.tables.length, 0);
  };

  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSections();
    } catch (e: any) {
      const msg = e?.message || t('tableSections.errors.addFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedSection = await apiSrv.update(data);
      setSections(prev => prev.map(s => s.id === updatedSection.id ? updatedSection : s));
      
      if (selectedSection && selectedSection.id === data.id) {
        setSelectedSection(updatedSection);
      }
      
      return updatedSection;
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.message || t('tableSections.errors.updateFailed');
      setErr(msg);
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleEdit = (section: TableSection) => {
    setDialog({ open: true, mode: 'edit', current: section });
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  return (
    <Container maxWidth="xl">
<PageHeader 
  exportData={sections} 
  loading={loading}
  onDataChange={fetchSections} // ⭐ إضافة callback
/>
      
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('tableSections.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
              />
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {searchQuery && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={`${t('tableSections.searchResults')}: ${searchQuery}`}
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('tableSections.resultsCount', { count: displayedData.length })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
              fullWidth
              size="large"
              sx={{ minHeight: 48, fontSize: '1rem' }}
            >
              {t('tableSections.add')}
            </Button>
          )}
        </Box>
      )}

      <Box mb={4}>
        <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2 }}>
          <Typography variant="h5">
            {t('tableSections.title')} ({displayedData.length})
          </Typography>
          <Chip 
            label={t('tableSections.totalTables', { count: getTotalTablesCount() })}
            color="primary"
            variant="outlined"
          />
        </Stack>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchQuery || getActiveFiltersCount() > 0 ? t('tableSections.noSearchResults') : t('tableSections.noSections')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(section => (
                  <SectionRow
                    key={section.id}
                    section={section}
                    onEdit={() => handleEdit(section)}
                    isSelected={selectedSection?.id === section.id}
                  />
                ))
              : (
                  <SectionTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    selectedSectionId={selectedSection?.id}
                  />
                )}
          </>
        )}
      </Box>

      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {isMobile && (
        <MobileSectionsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={sections.length}
          filteredResults={displayedData.length}
        />
      )}

      <SectionForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default TableSectionsPage;


============================================================
FILE: src/Pages/Products/components/mobile/MobileProductsFilter.tsx
============================================================
// File: src/pages/products/components/mobile/MobileProductsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

export interface ProductsFilterState {
  searchQuery: string;
  groupId: string;
  productType: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: ProductsFilterState;
  onFiltersChange: (filters: ProductsFilterState) => void;
  groups: Group[];
  totalResults: number;
  filteredResults: number;
}

const MobileProductsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  groups,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<ProductsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const productTypeOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: 'POS' },
    { value: '2', label: 'Material' }
  ];

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('products.active') },
    { value: 'false', label: t('products.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('products.name') },
    { value: 'cost', label: t('products.cost') },
    { value: 'createdOn', label: t('products.created') },
    { value: 'isActive', label: t('products.status') }
  ];

  // تحويل الشجرة إلى قائمة مسطحة
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      result.push({ group, level });
      if (group.children && group.children.length > 0) {
        result.push(...flattenGroups(group.children, level + 1));
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  const handleLocalChange = (field: keyof ProductsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: ProductsFilterState = {
      searchQuery: '',
      groupId: '',
      productType: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.groupId) count++;
    if (localFilters.productType) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('products.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('products.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('products.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('products.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('products.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('products.filter.filters')}</Typography>
            {(localFilters.groupId || localFilters.productType || localFilters.status) && (
              <Chip 
                size="small" 
                label={[localFilters.groupId, localFilters.productType, localFilters.status].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('products.group')}</InputLabel>
              <Select
                value={localFilters.groupId}
                label={t('products.group')}
                onChange={(e) => handleLocalChange('groupId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {flatGroups.map(({ group, level }) => (
                  <MenuItem key={group.id} value={group.id}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: level * 20 }} />
                      <Typography>
                        {'─'.repeat(level)} {group.name}
                      </Typography>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.type')}</InputLabel>
              <Select
                value={localFilters.productType}
                label={t('products.type')}
                onChange={(e) => handleLocalChange('productType', e.target.value)}
              >
                {productTypeOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('products.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('products.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('products.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('products.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('products.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('products.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('products.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('products.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('products.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('products.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileProductsFilter;


============================================================
FILE: src/Pages/Products/components/ActionsBar.tsx
============================================================
import { Button } from '@mui/material';
import { IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ onAdd }) => {
  const { t } = useTranslation();

  return (
    <Button
      variant="contained"
      startIcon={<IconPlus size={20} />}
      onClick={onAdd}
    >
      {t('products.add')}
    </Button>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/Products/components/GroupTreeSelect.tsx
============================================================
import React from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography
} from '@mui/material';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface Props {
  groups: Group[];
  value?: string;
  onChange: (value: string) => void;
  label: string;
  disabled?: boolean;
  excludeId?: string;
}

const GroupTreeSelect: React.FC<Props> = ({
  groups,
  value,
  onChange,
  label,
  disabled,
  excludeId
}) => {
  // تحويل الشجرة إلى قائمة مسطحة مع مستويات
  const flattenGroups = (groups: Group[], level = 0): Array<{ group: Group; level: number }> => {
    const result: Array<{ group: Group; level: number }> = [];
    
    groups.forEach(group => {
      if (group.id !== excludeId) {
        result.push({ group, level });
        if (group.children && group.children.length > 0) {
          result.push(...flattenGroups(group.children, level + 1));
        }
      }
    });
    
    return result;
  };

  const flatGroups = flattenGroups(groups);

  return (
    <FormControl fullWidth disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value || ''}
        onChange={(e) => onChange(e.target.value)}
        label={label}
      >
        <MenuItem value="">
          <em>اختر المجموعة</em>
        </MenuItem>
        {flatGroups.map(({ group, level }) => (
          <MenuItem key={group.id} value={group.id}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box sx={{ width: level * 20 }} />
              <Typography>
                {'─'.repeat(level)} {group.name}
              </Typography>
            </Box>
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

export default GroupTreeSelect;


============================================================
FILE: src/Pages/Products/components/PageHeader.tsx
============================================================
// File: src/pages/products/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { productsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  title: string; // ⭐ إضافة title كـ prop
  exportData: Product[];
  loading: boolean;
  showImport?: boolean; // ⭐ إضافة تحكم في الـ import/export
  showExport?: boolean;
}

const PageHeader: React.FC<Props> = ({ 
  title, 
  exportData, 
  loading, 
  showImport = true, 
  showExport = true 
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...productsImportExportConfig,
    onExport: () => exportData.map(product => ({
      productName: product.name,
      groupName: product.group?.name || t('common.notSpecified'),
      productType: product.productType === 1 ? 'POS' : 
                   product.productType === 2 ? 'Material' : 
                   product.productType === 3 ? 'Addition' : 'Unknown',
      description: product.description,
      reorderLevel: product.reorderLevel,
      cost: product.cost,
      expirationDays: product.expirationDays,
      code: product.code,
      isActive: product.isActive ? t('common.active') : t('common.inactive')
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {title} {/* ⭐ استخدام title المُمرر */}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
        showImport={showImport} // ⭐ تمرير الـ props
        showExport={showExport}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/Products/components/ProductForm.tsx
============================================================
// File: src/pages/products/components/ProductForm.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Button,
  FormControl, InputLabel, Select, MenuItem, Typography,
  Box, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Paper, IconButton, Stack,
  Card, CardContent, useMediaQuery, useTheme, Accordion,
  AccordionSummary, AccordionDetails,
  FormControlLabel, Switch, Tabs, Tab, Chip,
  Divider
} from '@mui/material';
import { 
  IconPlus, IconTrash, IconDeviceFloppy, IconPlus as IconPlusNew,
  IconChevronDown, IconComponents, IconCopy, IconClipboard, 
  IconClipboardCheck, IconTrashX, IconGripVertical,
  IconSearch
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Product, searchProductPricesByNameOrBarcode } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { getUserBranchesFromStorage } from 'src/utils/branchUtils';
import GroupTreeSelect from './GroupTreeSelect';
import ProductPriceSearchSelect from './ProductPriceSearchSelect';
import { useCopyPaste } from 'src/hooks/useCopyPaste';
import { PosScreen } from 'src/utils/api/pagesApi/posScreensApi';
import ProductMultiSelectDialog from './ProductMultiSelectDialog';

/* ---------- types ---------- */
type FormValues = { 
  productName: string; 
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  cost?: number;
  lastPurePrice: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  productPrices: Array<{
    productPriceId?: string;
    unitId: string;
    unitFactor: number;
    barcode: string;
    Price: number;
    posPriceName?: string;
    productComponents: Array<{
      componentId?: string;
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
    branchPrices: Array<{
      id?: string;
      rawBranchId: string;
      price: number;
      isActive: boolean;
    }>;
  }>;
  productOptionGroups: Array<{
    id?: string;
    name: string;
    isRequired: boolean;
    allowMultiple: boolean;
    minSelection: number;
    maxSelection: number;
    sortOrder: number;
    optionItems: Array<{
      id?: string;
      name: string;
      productPriceId?: string;
      useOriginalPrice: boolean;
      extraPrice: number;
      isCommentOnly: boolean;
      sortOrder: number;
    }>;
  }>;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Product;
  groups: Group[];
  units: Unit[];
  posScreens?: PosScreen[];
  productType?: number;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

// أنواع البيانات للـ Copy/Paste
interface ProductCopyData {
  groupId: string;
  productType: number;
  description: string;
  reorderLevel: number;
  expirationDays: number;
  isActive: boolean;
  posScreenId?: string;
  priceTemplates: Array<{
    unitId: string;
    unitFactor: number;
    posPriceName?: string;
    productComponents: Array<{
      rawProductPriceId: string;
      quantity: number;
      notes: string;
    }>;
    branchPrices: Array<{
      rawBranchId: string;
      price: number;
      isActive: boolean;
    }>;
  }>;
  optionGroupTemplates: Array<{
    name: string;
    isRequired: boolean;
    allowMultiple: boolean;
    minSelection: number;
    maxSelection: number;
    sortOrder: number;
    optionItems: Array<{
      name: string;
      productPriceId?: string;
      useOriginalPrice: boolean;
      extraPrice: number;
      isCommentOnly: boolean;
      sortOrder: number;
    }>;
  }>;
}

const ProductForm: React.FC<Props> = ({
  open, mode, initialValues, groups, units, posScreens = [], productType = 2, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const nameFieldRef = React.useRef<HTMLInputElement>(null);
  const [, setLastAddedPriceIndex] = React.useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [expandedPriceIndex, setExpandedPriceIndex] = React.useState<number | null>(null);
  const [currentTab, setCurrentTab] = React.useState(0);
  
  // الحصول على فروع المستخدم
  const userBranches = getUserBranchesFromStorage();
  
  // إضافةstate
  const [, set] = React.useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'warning' | 'error';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const productCopyPaste = useCopyPaste<ProductCopyData>({
    storageKey: 'productCopyData',
    onCopySuccess: () => {
      set({
        open: true,
        message: t('products.copySuccess'),
        severity: 'success'
      });
    },
    onPasteSuccess: (data) => {
      set({
        open: true,
        message: t('products.pasteSuccess', { count: data.priceTemplates.length }),
        severity: 'success'
      });
    },
    onError: (error) => {
      set({
        open: true,
        message: error,
        severity: 'error'
      });
    }
  });
 
  const defaults: FormValues = { 
    productName: '', 
    groupId: '',
    productType: productType,
    description: '',
    reorderLevel: 0,
    cost: 0,
    lastPurePrice: 0,
    expirationDays: 180,
    isActive: true,
    posScreenId: '',
    productPrices: [],
    productOptionGroups: []
  };

  const { control, handleSubmit, reset, watch, setValue, getValues, formState: { isSubmitSuccessful } } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'productPrices'
  });

  const { fields: optionGroupFields, append: appendOptionGroup, remove: removeOptionGroup } = useFieldArray({
    control,
    name: 'productOptionGroups'
  });

  // دالة إضافة Option Group
  const addOptionGroup = () => {
    appendOptionGroup({
      name: '',
      isRequired: false,
      allowMultiple: false,
      minSelection: 1,
      maxSelection: 1,
      sortOrder: optionGroupFields.length,
      optionItems: []
    });
  };

const OptionGroupComponent: React.FC<{ groupIndex: number }> = ({ groupIndex }) => {
  const [productSelectionOpen, setProductSelectionOpen] = React.useState(false);
    const [groupName, setGroupName] = React.useState('');
  const [expanded, setExpanded] = React.useState(true); // ⭐ إضافة state للتحكم في التوسيع

  const { fields: itemFields, append: appendItem, remove: removeItem } = useFieldArray({
    control,
    name: `productOptionGroups.${groupIndex}.optionItems`
  });

  React.useEffect(() => {
    const subscription = watch((value) => {
      const currentName = value.productOptionGroups?.[groupIndex]?.name;
      if (currentName !== groupName) {
        setGroupName(currentName || '');
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, groupIndex, groupName]);

  const getCurrentlySelectedProducts = React.useCallback(() => {
    return itemFields
      .filter(item => item.productPriceId && !item.isCommentOnly)
      .map(item => item.productPriceId)
      .filter(Boolean) as string[];
  }, [itemFields]);

  const addCommentItem = () => {
    appendItem({
      name: '',
      productPriceId: '',
      useOriginalPrice: false,
      extraPrice: 0,
      isCommentOnly: true,
      sortOrder: itemFields.length
    });
  };

  const handleAddMultipleProducts = (selectedProducts: Array<{
    productPriceId: string;
    productName: string;
    priceName: string;
    price: number;
  }>) => {
    const existingProductPriceIds = new Set(
      itemFields
        .filter(item => item.productPriceId && !item.isCommentOnly)
        .map(item => item.productPriceId)
    );

    const newProducts = selectedProducts.filter(
      product => !existingProductPriceIds.has(product.productPriceId)
    );

    const selectedProductPriceIds = new Set(selectedProducts.map(p => p.productPriceId));
    const itemsToRemove: number[] = [];
    
    itemFields.forEach((item, index) => {
      if (item.productPriceId && !item.isCommentOnly && !selectedProductPriceIds.has(item.productPriceId)) {
        itemsToRemove.push(index);
      }
    });

    itemsToRemove.reverse().forEach(index => {
      removeItem(index);
    });

    newProducts.forEach(product => {
      appendItem({
        name: `${product.productName} - ${product.priceName}`,
        productPriceId: product.productPriceId,
        useOriginalPrice: true,
        extraPrice: 0,
        isCommentOnly: false,
        sortOrder: itemFields.length
      });
    });
  };

  return (
    <>
 <Accordion 
        key={groupIndex}
        expanded={expanded} 
        onChange={(_, isExpanded) => setExpanded(isExpanded)} // ⭐ التحكم في التوسيع
      >
 <AccordionSummary 
          expandIcon={<IconChevronDown />}
          // ⭐ إزالة onClick من هنا لتجنب التداخل
        >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
            <IconGripVertical size={16} />
            <Typography variant="h6" sx={{ flex: 1 }}>
              {groupName || `${t('products.form.optionGroup')} ${groupIndex + 1}`}
            </Typography>
            
            <FormControlLabel
              control={
                <Controller
                  name={`productOptionGroups.${groupIndex}.isRequired`}
                  control={control}
                  render={({ field }) => (
                    <Switch
                      checked={field.value}
                      onChange={field.onChange}
                      size="small"
                      onClick={(e) => e.stopPropagation()} // ⭐ منع تأثير الضغط على التوسيع

                    />
                  )}
                />
              }
              label={t('products.form.required')}
              labelPlacement="start"
              sx={{ mr: 2 }}
               onClick={(e) => e.stopPropagation()} // ⭐ منع تأثير الضغط على التوسيع

            />
            
            <IconButton
              size="small"
              color="error"
              onClick={(e) => {
                e.stopPropagation(); // ⭐ منع تأثير الضغط على التوسيع
                removeOptionGroup(groupIndex);
              }}
            >
              <IconTrash size={16} />
            </IconButton>
          </Box>
        </AccordionSummary>

        <AccordionDetails>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Controller
                name={`productOptionGroups.${groupIndex}.name`}
                control={control}
                rules={{ required: t('products.validation.optionGroupNameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('products.form.optionGroupName')}
                    fullWidth
                    required
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={
                  <Controller
                    name={`productOptionGroups.${groupIndex}.allowMultiple`}
                    control={control}
                    render={({ field }) => (
                      <Switch
                        checked={field.value}
                        onChange={field.onChange}
                      />
                    )}
                  />
                }
                label={t('products.form.allowMultiple')}
              />
            </Grid>

            <Grid item xs={6} md={3}>
              <Controller
                name={`productOptionGroups.${groupIndex}.minSelection`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.form.minSelection')}
                    type="number"
                    fullWidth
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6} md={3}>
              <Controller
                name={`productOptionGroups.${groupIndex}.maxSelection`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.form.maxSelection')}
                    type="number"
                    fullWidth
                    inputProps={{ min: 1 }}
                    onFocus={(e) => e.target.select()}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="subtitle1">
                  {t('products.form.optionItems')} ({itemFields.length})
                </Typography>
                
                <Stack direction="row" spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<IconPlus />}
                    onClick={addCommentItem}
                  >
                    {t('products.form.addComment')}
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<IconSearch />}
                    onClick={() => setProductSelectionOpen(true)}
                    color="primary"
                  >
                    {t('products.form.selectProducts')}
                  </Button>
                </Stack>
              </Box>

{itemFields.map((item, itemIndex) => {
  const isComment = watch(`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.isCommentOnly`);
  const hasProductPrice = watch(`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.productPriceId`);
  const useOriginalPrice = watch(`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.useOriginalPrice`);
  
  return (
    <Box key={item.id} sx={{ mb: 2, p: 2, border: 1, borderColor: 'grey.300', borderRadius: 1 }}>
      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Controller
              name={`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.name`}
              control={control}
              rules={{ required: t('products.validation.optionItemNameRequired') }}
              render={({ field, fieldState }) => (
                <TextField
                  {...field}
                  label={t('products.form.optionItemName')}
                  fullWidth
                  size="small"
                  required
                  error={!!fieldState.error}
                  helperText={fieldState.error?.message}
                  disabled={!!hasProductPrice && !isComment}
                  onFocus={(e) => e.target.select()}
                />
              )}
            />
            {isComment && (
              <Chip label={t('products.form.comment')} size="small" color="info" />
            )}
            {hasProductPrice && !isComment && (
              <Chip label={t('products.form.product')} size="small" color="success" />
            )}
          </Box>
        </Grid>

        {/* إضافة زر useOriginalPrice للمنتجات فقط */}
        {hasProductPrice && !isComment && (
          <Grid item xs={12} md={3}>
            <FormControlLabel
              control={
                <Controller
                  name={`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.useOriginalPrice`}
                  control={control}
                  render={({ field }) => (
                    <Switch
                      checked={field.value}
                      onChange={field.onChange}
                      color="primary"
                    />
                  )}
                />
              }
              label={t('products.form.useOriginalPrice')}
              labelPlacement="start"
            />
          </Grid>
        )}

        <Grid item xs={12} md={useOriginalPrice && hasProductPrice && !isComment ? 2 : 3}>
          <Controller
            name={`productOptionGroups.${groupIndex}.optionItems.${itemIndex}.extraPrice`}
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('products.form.extraPrice')}
                type="number"
                fullWidth
                size="small"
                inputProps={{ min: 0, step: 0.01 }}
                onFocus={(e) => e.target.select()}
                // إزالة التعطيل والتحكم في القيمة - السماح بالتعديل دائماً
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={2}>
          <IconButton
            size="small"
            color="error"
            onClick={() => removeItem(itemIndex)}
          >
            <IconTrash size={16} />
          </IconButton>
        </Grid>
      </Grid>
    </Box>
  );
})}

            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>

      <ProductMultiSelectDialog
        open={productSelectionOpen}
        onClose={() => setProductSelectionOpen(false)}
        onSelect={handleAddMultipleProducts}
        excludeProductId={watchedProductId}
        productType={productType}
        preSelectedItems={getCurrentlySelectedProducts()}
      />
    </>
  );
};

  const watchedProductId = initialValues?.id;

  React.useEffect(() => {
    if (isSubmitSuccessful && mode === 'add') {
      const timer = setTimeout(() => {
        reset(defaults);
        setCurrentTab(0);
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isSubmitSuccessful, mode, reset]);

  React.useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 200);
      
      return () => clearTimeout(timer);
    }
  }, [open]);

  React.useEffect(() => {
    if (open) {
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          productName: initialValues.name,
          groupId: initialValues.groupId,
          description: initialValues.description || '',
          reorderLevel: initialValues.reorderLevel,
          cost: initialValues.cost,
          lastPurePrice: initialValues.lastPurePrice,
          expirationDays: initialValues.expirationDays,
          isActive: initialValues.isActive,
          posScreenId: initialValues.posScreenId || '',
          productPrices: initialValues.productPrices?.map(p => ({
            productPriceId: p.id,
            unitId: p.unitId,
            unitFactor: p.unitFactor,
            barcode: p.barcode,
            Price: p.price,
            posPriceName: p.posPriceName || '',
            productComponents: p.productComponents?.map(c => ({
              componentId: c.componentId,
              rawProductPriceId: c.rawProductPriceId,
              quantity: c.quantity,
              notes: c.notes || ''
            })) || [],
            branchPrices: p.branchPrices?.map(bp => ({
              id: bp.id,
              rawBranchId: bp.rawBranchId,
              price: bp.price,
              isActive: bp.isActive
            })) || []
          })) ?? [],
          productOptionGroups: initialValues.productOptionGroups?.map(g => ({
            id: g.id,
            name: g.name,
            isRequired: g.isRequired,
            allowMultiple: g.allowMultiple,
            minSelection: Math.max(g.minSelection, 1),
            maxSelection: Math.max(g.maxSelection, 1),
            sortOrder: g.sortOrder,
            optionItems: g.optionItems?.map(i => ({
              id: i.id,
              name: i.name,
              productPriceId: i.productPriceId ?? undefined,
              useOriginalPrice: i.useOriginalPrice,
              extraPrice: i.extraPrice,
              isCommentOnly: i.isCommentOnly,
              sortOrder: i.sortOrder
            })) || []
          })) || []
        });
      }
    }
  }, [open, mode, initialValues, reset]);

  const flattenPosScreens = (screens: PosScreen[]): PosScreen[] => {
    const result: PosScreen[] = [];
    
    const flatten = (items: PosScreen[], level = 0) => {
      items.forEach(item => {
        result.push({ ...item, displayOrder: level });
        if (item.children && item.children.length > 0) {
          flatten(item.children, level + 1);
        }
      });
    };
    
    flatten(screens);
    return result;
  };

  const flatPosScreens = React.useMemo(() => flattenPosScreens(posScreens), [posScreens]);

  const handleCopyProduct = () => {
    const currentValues = getValues();
    
    if (!currentValues.productName.trim()) {
      set({
        open: true,
        message: t('products.nameRequiredForCopy'),
        severity: 'warning'
      });
      return;
    }

    const copyData: ProductCopyData = {
      groupId: currentValues.groupId,
      productType: productType,
      description: currentValues.description,
      reorderLevel: currentValues.reorderLevel,
      expirationDays: currentValues.expirationDays,
      isActive: currentValues.isActive,
      posScreenId: currentValues.posScreenId,
      priceTemplates: currentValues.productPrices.map(price => ({
        unitId: price.unitId,
        unitFactor: price.unitFactor,
        posPriceName: price.posPriceName,
        productComponents: price.productComponents.map(component => ({
          rawProductPriceId: component.rawProductPriceId,
          quantity: component.quantity,
          notes: component.notes
        })),
        branchPrices: price.branchPrices.map(bp => ({
          rawBranchId: bp.rawBranchId,
          price: bp.price,
          isActive: bp.isActive
        }))
      })),
      optionGroupTemplates: currentValues.productOptionGroups.map(group => ({
        name: group.name,
        isRequired: group.isRequired,
        allowMultiple: group.allowMultiple,
        minSelection: group.minSelection,
        maxSelection: group.maxSelection,
        sortOrder: group.sortOrder,
        optionItems: group.optionItems.map(item => ({
          name: item.name,
          productPriceId: item.productPriceId,
          useOriginalPrice: item.useOriginalPrice,
          extraPrice: item.extraPrice,
          isCommentOnly: item.isCommentOnly,
          sortOrder: item.sortOrder
        }))
      }))
    };
    
    productCopyPaste.copyData(copyData);
  };

  const handlePasteProduct = () => {
    const pastedData = productCopyPaste.pasteData();
    
    if (!pastedData) return;

    setValue('groupId', pastedData.groupId);
    setValue('productType', pastedData.productType);
    setValue('description', pastedData.description);
    setValue('reorderLevel', pastedData.reorderLevel);
    setValue('expirationDays', pastedData.expirationDays);
    setValue('isActive', pastedData.isActive);
    setValue('posScreenId', pastedData.posScreenId || '');
    
    setValue('productPrices', pastedData.priceTemplates.map(template => ({
      productPriceId: undefined,
      unitId: template.unitId,
      unitFactor: template.unitFactor,
      barcode: '',
      Price: 0,
      posPriceName: template.posPriceName || '',
      productComponents: template.productComponents,
      branchPrices: template.branchPrices
    })));

    setValue('productOptionGroups', pastedData.optionGroupTemplates.map(template => ({
      name: template.name,
      isRequired: template.isRequired,
      allowMultiple: template.allowMultiple,
      minSelection: template.minSelection,
      maxSelection: template.maxSelection,
      sortOrder: template.sortOrder,
      optionItems: template.optionItems
    })));
  };

 const addPrice = () => {
    const newIndex = fields.length;
    append({
      unitId: '',
      unitFactor: 1,
      barcode: '',
      Price: 0,
      posPriceName: '',
      productComponents: [],
      branchPrices: userBranches.map(branch => ({
        rawBranchId: branch.id,
        price: 0,
        isActive: true
      }))
    });
    setLastAddedPriceIndex(newIndex);
    // العودة لتاب الأسعار الافتراضية عند إضافة سعر جديد
    setExpandedPriceIndex(0);
  };

const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
  if (isSubmitting) return;
  
  setIsSubmitting(true);
  try {
    if (mode === 'edit' && initialValues) {
      const updateData = {
        ProductId: initialValues.id,
        productName: data.productName,
        groupId: data.groupId,
        ProductType: productType,
        description: data.description,
        reorderLevel: data.reorderLevel,
        lastPurePrice: data.lastPurePrice,
        expirationDays: data.expirationDays,
        isActive: data.isActive,
  ...((productType === 1 || productType === 3) && { posScreenId: data.posScreenId }),
        productPrices: data.productPrices.map(price => {
          const priceData: any = {
            ...(price.productPriceId && { productPriceId: price.productPriceId }),
            barcode: price.barcode,
            Price: Number(price.Price),
            productComponents: price.productComponents?.map(component => ({
              ...(component.componentId && { componentId: component.componentId }),
              rawProductPriceId: component.rawProductPriceId,
              quantity: Number(component.quantity),
              notes: component.notes || ""
            })) || [],
            branchPrices: price.branchPrices?.filter(bp => bp.price > 0) || []
          };

          if (productType === 2) {
            priceData.unitId = price.unitId;
            priceData.unitFactor = Number(price.unitFactor);
          }

          if (productType === 1 || productType === 3) {
            priceData.posPriceName = price.posPriceName || '';
          }

          return priceData;
        }),
        ...((productType === 1 || productType === 3) && { 
          productOptionGroups: data.productOptionGroups?.map(group => ({
            ...(group.id && { id: group.id }),
            name: group.name,
            isRequired: group.isRequired,
            allowMultiple: group.allowMultiple,
            minSelection: Math.max(group.minSelection, 1),
            maxSelection: Math.max(group.maxSelection, 1),
            sortOrder: group.sortOrder,
            optionItems: group.optionItems.map(item => ({
              ...(item.id && { id: item.id }),
              name: item.name,
              productPriceId: item.productPriceId || null,
              useOriginalPrice: item.useOriginalPrice,
              extraPrice: Number(item.extraPrice),
              isCommentOnly: item.isCommentOnly,
              sortOrder: item.sortOrder
            }))
          })) || []
        })
      };
      await onSubmit(updateData, saveAction);
    } else {
      const addData = {
        productName: data.productName,
        groupId: data.groupId,
        productType: productType,
        description: data.description,
        reorderLevel: data.reorderLevel,
        cost: data.cost,
        lastPurePrice: data.lastPurePrice,
        expirationDays: data.expirationDays,
        isActive: data.isActive,
  ...((productType === 1 || productType === 3) && { posScreenId: data.posScreenId }),
        productPrices: data.productPrices.map(price => {
          const priceData: any = {
            barcode: price.barcode,
            Price: Number(price.Price),
            productComponents: price.productComponents?.map(component => ({
              rawProductPriceId: component.rawProductPriceId,
              quantity: Number(component.quantity),
              notes: component.notes || ""
            })) || [],
            branchPrices: price.branchPrices?.filter(bp => bp.price > 0) || []
          };

          if (productType === 2) {
            priceData.unitId = price.unitId;
            priceData.unitFactor = Number(price.unitFactor);
          }

          if (productType === 1 || productType === 3) {
            priceData.posPriceName = price.posPriceName || '';
          }

          return priceData;
        }),
        ...((productType === 1 || productType === 3) && { 
          productOptionGroups: data.productOptionGroups?.map(group => ({
            name: group.name,
            isRequired: group.isRequired,
            allowMultiple: group.allowMultiple,
            minSelection: Math.max(group.minSelection, 1),
            maxSelection: Math.max(group.maxSelection, 1),
            sortOrder: group.sortOrder,
            optionItems: group.optionItems.map(item => ({
              name: item.name,
              productPriceId: item.productPriceId || null,
              useOriginalPrice: item.useOriginalPrice,
              extraPrice: Number(item.extraPrice),
              isCommentOnly: item.isCommentOnly,
              sortOrder: item.sortOrder
            }))
          })) || []
        })
      };
      await onSubmit(addData, saveAction);
    }

    if (mode === 'add' && saveAction === 'saveAndNew') {
      setTimeout(() => {
        reset(defaults);
        setCurrentTab(0);
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 100);
    }
    
  } catch (error: any) {
    // ... error handling
  } finally {
    setIsSubmitting(false);
  }
};

  // مكون إدارة المكونات لكل سعر
  const ProductComponentsManager: React.FC<{ priceIndex: number }> = React.memo(({ priceIndex }) => {
    const { fields: componentFields, append: appendComponent, remove: removeComponent } = useFieldArray({
      control,
      name: `productPrices.${priceIndex}.productComponents`
    });

    const [componentDetails, setComponentDetails] = React.useState<{[key: string]: any}>({});
    const [loadingComponents, setLoadingComponents] = React.useState<{[key: string]: boolean}>({});

    const addComponent = React.useCallback(() => {
      appendComponent({
        rawProductPriceId: '',
        quantity: 1,
        notes: ''
      });
    }, [appendComponent]);

    const copyComponents = React.useCallback(() => {
      const components = getValues(`productPrices.${priceIndex}.productComponents`);
      if (components && components.length > 0) {
        const copyData = components.map(comp => ({
          rawProductPriceId: comp.rawProductPriceId,
          quantity: comp.quantity,
          notes: comp.notes
        }));
        
        localStorage.setItem(`componentsCopy_${priceIndex}`, JSON.stringify(copyData));
        
        set({
          open: true,
          message: t('products.componentsCopySuccess'),
          severity: 'success'
        });
      } else {
        set({
          open: true,
          message: t('products.noComponentsToCopy'),
          severity: 'warning'
        });
      }
    }, [priceIndex, getValues, set, t]);

    const pasteComponents = React.useCallback(() => {
      try {
        const savedData = localStorage.getItem(`componentsCopy_${priceIndex}`);
        if (savedData) {
          const componentsToPaste = JSON.parse(savedData);
          
          for (let i = componentFields.length - 1; i >= 0; i--) {
            removeComponent(i);
          }
          
          setTimeout(() => {
            componentsToPaste.forEach((comp: any) => {
              appendComponent({
                rawProductPriceId: comp.rawProductPriceId,
                quantity: comp.quantity,
                notes: comp.notes
              });
            });
            
            set({
              open: true,
              message: t('products.componentsPasteSuccess'),
              severity: 'success'
            });
          }, 100);
        } else {
          set({
            open: true,
            message: 'لا توجد مكونات منسوخة',
            severity: 'warning'
          });
        }
      } catch (error) {
        set({
          open: true,
          message: 'خطأ في لصق المكونات',
          severity: 'error'
        });
      }
    }, [priceIndex, componentFields.length, removeComponent, appendComponent, set, t]);

    const hasCopiedData = React.useMemo(() => {
      return localStorage.getItem(`componentsCopy_${priceIndex}`) !== null;
    }, [priceIndex]);

    const fetchComponentDetails = React.useCallback(async (rawProductPriceId: string) => {
      if (!rawProductPriceId || componentDetails[rawProductPriceId] || loadingComponents[rawProductPriceId]) {
        return;
      }

      setLoadingComponents(prev => ({ ...prev, [rawProductPriceId]: true }));

      try {
        const searchResponse = await searchProductPricesByNameOrBarcode(rawProductPriceId, 1, 10);
        const foundInSearch = searchResponse.data.find((item: { productPriceId: string; }) => item.productPriceId === rawProductPriceId);

        if (foundInSearch) {
          const details = {
            productName: foundInSearch.product?.productName || 'منتج غير محدد',
            unitName: foundInSearch.unit?.unitName || 'وحدة غير محددة',
            unitFactor: foundInSearch.unitFactor || 1,
            price: foundInSearch.price || 0,
            barcode: foundInSearch.barcode || '',
            productId: foundInSearch.product?.productID || ''
          };

          setComponentDetails(prev => ({
            ...prev,
            [rawProductPriceId]: details
          }));
        }
      } catch (error) {
        } finally {
        setLoadingComponents(prev => ({ ...prev, [rawProductPriceId]: false }));
      }
    }, [componentDetails, loadingComponents]);

    return (
      <Box sx={{ mt: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="subtitle2" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconComponents size={16} />
            {t('products.components')} ({componentFields.length})
          </Typography>
          
          <Stack direction="row" spacing={1}>
            <Button
              size="small"
              variant="outlined"
              onClick={copyComponents}
              disabled={componentFields.length === 0}
              startIcon={<IconCopy size={14} />}
              sx={{ minWidth: 80 }}
            >
              {t('common.copy')}
            </Button>
            
            <Button
              size="small"
              variant="outlined"
              onClick={pasteComponents}
              disabled={!hasCopiedData}
              startIcon={hasCopiedData ? <IconClipboardCheck size={14} /> : <IconClipboard size={14} />}
              color={hasCopiedData ? 'success' : 'inherit'}
              sx={{ minWidth: 80 }}
            >
              {t('common.paste')}
            </Button>
            
            <Button
              size="small"
              variant="outlined"
              onClick={addComponent}
              startIcon={<IconPlus size={14} />}
              sx={{ minWidth: 80 }}
            >
              {t('products.addComponent')}
            </Button>
          </Stack>
        </Box>

        {componentFields.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
            {t('products.noComponents')}
          </Typography>
        ) : (
          <Stack spacing={2}>
            {componentFields.map((field, componentIndex) => {
              
              return (
                <Card key={field.id} variant="outlined" sx={{ p: 2 }}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} md={5}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.rawProductPriceId`}
                        control={control}
                        rules={{ required: t('products.componentRequired') }}
                        render={({ field, fieldState }) => (
                          <ProductPriceSearchSelect
                            value={field.value}
                            onChange={(value) => {
                              field.onChange(value);
                              if (value && !componentDetails[value]) {
                                fetchComponentDetails(value);
                              }
                            }}
                            label={t('products.selectComponent')}
                            error={!!fieldState.error}
                            excludeProductId={watchedProductId}
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={6} md={2}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.quantity`}
                        control={control}
                        rules={{ required: true, min: 0.01 }}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            label={t('products.quantity')}
                            type="number"
                            size="small"
                            fullWidth
                            inputProps={{ min: 0.01, step: 0.01 }}
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={6} md={3}>
                      <Controller
                        name={`productPrices.${priceIndex}.productComponents.${componentIndex}.notes`}
                        control={control}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            label={t('products.notes')}
                            size="small"
                            fullWidth
                          />
                        )}
                      />
                    </Grid>

                    <Grid item xs={12} md={2}>
                      <IconButton
                        size="small"
                        color="error"
                        onClick={() => removeComponent(componentIndex)}
                        sx={{ width: '100%' }}
                      >
                        <IconTrash size={16} />
                      </IconButton>
                    </Grid>
                  </Grid>

                </Card>
              );
            })}
          </Stack>
        )}
      </Box>
    );
  });

  // مكون منفصل لعرض الأسعار في الموبايل
  const MobilePriceCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Stack spacing={2}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="subtitle2" color="primary">
              {t('products.price')} #{index + 1}
            </Typography>
            <IconButton
              size="small"
              color="error"
              onClick={onRemove}
              type="button"
            >
              <IconTrash size={18} />
            </IconButton>
          </Box>

<Controller
  name={`productPrices.${index}.Price`}
  control={control}
  render={({ field }) => (
    <TextField
      {...field}
      type="number"
      size="small"
      inputProps={{ 
        min: 0, 
        step: 0.01,
        onBlur: (e) => {
          // التأكد من حفظ القيمة عند فقدان التركيز
          const value = parseFloat(e.target.value) || 0;
          field.onChange(value);
        }
      }}
      onFocus={(e) => {
        e.target.select();
        // منع re-render أثناء التركيز
        e.preventDefault();
      }}
      onChange={(e) => {
        // تأخير التحديث لتجنب re-render المستمر
        const value = e.target.value;
        setTimeout(() => {
          field.onChange(parseFloat(value) || 0);
        }, 100);
      }}
      onKeyDown={(e) => {
        // منع فقدان التركيز عند الضغط على مفاتيح معينة
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
          e.preventDefault();
        }
      }}
    />
  )}
/>

          {(productType === 1 || productType === 3) && (
            <Controller
              name={`productPrices.${index}.posPriceName`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('products.form.posPriceName')}
                  fullWidth
                  size="small"
                />
              )}
            />
          )}

          {productType === 2 && (
            <>
              <Controller
                name={`productPrices.${index}.unitId`}
                control={control}
                rules={{ required: true }}
                render={({ field, fieldState }) => (
                  <FormControl fullWidth size="small" error={!!fieldState.error}>
                    <InputLabel>{t('products.unit')}</InputLabel>
                    <Select
                      {...field}
                      label={t('products.unit')}
                      displayEmpty
                    >
                      <MenuItem value="">
                        <em>{t('products.selectUnit')}</em>
                      </MenuItem>
                      {units.map((unit) => (
                        <MenuItem key={unit.id} value={unit.id}>
                          {unit.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                )}
              />

              <Controller
                name={`productPrices.${index}.unitFactor`}
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('products.unitFactor')}
                    type="number"
                    fullWidth
                    size="small"
                    inputProps={{ min: 0.01, step: 0.01 }}
                  />
                )}
              />
            </>
          )}

          <Controller
            name={`productPrices.${index}.Price`}
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('products.price')}
                type="number"
                fullWidth
                size="small"
                inputProps={{ min: 0, step: 0.01 }}
              />
            )}
          />

          <Accordion>
            <AccordionSummary expandIcon={<IconChevronDown />}>
              <Typography variant="subtitle2">
                {t('products.components')} ({fields[index]?.productComponents?.length || 0})
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <ProductComponentsManager priceIndex={index} />
            </AccordionDetails>
          </Accordion>
        </Stack>
      </CardContent>
    </Card>
  );

// مكون الجدول للشاشات الكبيرة
const DesktopPriceTable = () => (
  <TableContainer component={Paper} variant="outlined">
    <Table size="small">
      <TableHead>
        <TableRow>
          <TableCell>{t('products.barcode')}</TableCell>
          {(productType === 1 || productType === 3) && (
            <TableCell>{t('products.form.posPriceName')}</TableCell>
          )}
          {productType === 2 && (
            <>
              <TableCell>{t('products.unit')}</TableCell>
              <TableCell>{t('products.unitFactor')}</TableCell>
            </>
          )}
          <TableCell>{t('products.price')}</TableCell>
          <TableCell>{t('products.components')}</TableCell>
          <TableCell width={50}></TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {fields.length === 0 ? (
          <TableRow>
            <TableCell colSpan={productType === 2 ? 6 : 5} align="center">
              <Typography color="text.secondary">
                {t('products.noPrices')}
              </Typography>
            </TableCell>
          </TableRow>
        ) : (
          fields.map((field, index) => (
            <React.Fragment key={field.id}>
              <TableRow>
                <TableCell>
                  <Controller
                    name={`productPrices.${index}.barcode`}
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        size="small"
                        placeholder={t('products.barcodeOptional')}
                        fullWidth
                        onKeyDown={(e) => {
                          if (e.key === 'ArrowDown') {
                            e.preventDefault();
                            const nextField = document.querySelector(`[name="productPrices.${index + 1}.barcode"]`) as HTMLElement;
                            if (nextField) {
                              nextField.focus();
                            }
                          }
                          if (e.key === 'ArrowUp') {
                            e.preventDefault();
                            const prevField = document.querySelector(`[name="productPrices.${index - 1}.barcode"]`) as HTMLElement;
                            if (prevField) {
                              prevField.focus();
                            }
                          }
                          if (e.key === 'ArrowRight') {
                            e.preventDefault();
                            const nextField = productType === 1 || productType === 3 
                              ? document.querySelector(`[name="productPrices.${index}.posPriceName"]`) as HTMLElement
                              : document.querySelector(`[name="productPrices.${index}.unitId"]`) as HTMLElement;
                            nextField?.focus();
                          }
                        }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </TableCell>
                
                {(productType === 1 || productType === 3) && (
                  <TableCell>
                    <Controller
                      name={`productPrices.${index}.posPriceName`}
                      control={control}
                      render={({ field }) => (
                        <TextField
                          {...field}
                          size="small"
                          placeholder={t('products.form.posNamePlaceholder')}
                          fullWidth
                          onKeyDown={(e) => {
                            if (e.key === 'ArrowDown') {
                              e.preventDefault();
                              const nextField = document.querySelector(`[name="productPrices.${index + 1}.posPriceName"]`) as HTMLElement;
                              if (nextField) {
                                nextField.focus();
                              }
                            }
                            if (e.key === 'ArrowUp') {
                              e.preventDefault();
                              const prevField = document.querySelector(`[name="productPrices.${index - 1}.posPriceName"]`) as HTMLElement;
                              if (prevField) {
                                prevField.focus();
                              }
                            }
                            if (e.key === 'ArrowLeft') {
                              e.preventDefault();
                              const prevField = document.querySelector(`[name="productPrices.${index}.barcode"]`) as HTMLElement;
                              prevField?.focus();
                            }
                            if (e.key === 'ArrowRight') {
                              e.preventDefault();
                              const nextField = document.querySelector(`[name="productPrices.${index}.Price"]`) as HTMLElement;
                              nextField?.focus();
                            }
                          }}
                          onFocus={(e) => e.target.select()}
                        />
                      )}
                    />
                  </TableCell>
                )}
                
                {productType === 2 && (
                  <>
                    <TableCell>
                      <Controller
                        name={`productPrices.${index}.unitId`}
                        control={control}
                        rules={{ required: true }}
                        render={({ field }) => (
                          <FormControl fullWidth size="small">
                            <Select
                              {...field}
                              displayEmpty
                              onKeyDown={(e) => {
                                if (e.key === 'ArrowRight') {
                                  e.preventDefault();
                                  const nextField = document.querySelector(`[name="productPrices.${index}.unitFactor"]`) as HTMLElement;
                                  nextField?.focus();
                                }
                                if (e.key === 'ArrowLeft') {
                                  e.preventDefault();
                                  const prevField = document.querySelector(`[name="productPrices.${index}.barcode"]`) as HTMLElement;
                                  prevField?.focus();
                                }
                              }}
                            >
                              <MenuItem value="">
                                <em>{t('products.selectUnit')}</em>
                              </MenuItem>
                              {units.map((unit) => (
                                <MenuItem key={unit.id} value={unit.id}>
                                  {unit.name}
                                </MenuItem>
                              ))}
                            </Select>
                          </FormControl>
                        )}
                      />
                    </TableCell>
                    <TableCell>
                      <Controller
                        name={`productPrices.${index}.unitFactor`}
                        control={control}
                        render={({ field }) => (
                          <TextField
                            {...field}
                            type="number"
                            size="small"
                            inputProps={{ min: 0.01, step: 0.01 }}
                            onKeyDown={(e) => {
                              if (e.key === 'ArrowDown') {
                                e.preventDefault();
                                const nextField = document.querySelector(`[name="productPrices.${index + 1}.unitFactor"]`) as HTMLElement;
                                if (nextField) {
                                  nextField.focus();
                                }
                              }
                              if (e.key === 'ArrowUp') {
                                e.preventDefault();
                                const prevField = document.querySelector(`[name="productPrices.${index - 1}.unitFactor"]`) as HTMLElement;
                                if (prevField) {
                                  prevField.focus();
                                }
                              }
                              if (e.key === 'ArrowLeft') {
                                e.preventDefault();
                                const prevField = document.querySelector(`[name="productPrices.${index}.unitId"]`) as HTMLElement;
                                prevField?.focus();
                              }
                              if (e.key === 'ArrowRight') {
                                e.preventDefault();
                                const nextField = document.querySelector(`[name="productPrices.${index}.Price"]`) as HTMLElement;
                                nextField?.focus();
                              }
                            }}
                            onFocus={(e) => e.target.select()}
                          />
                        )}
                      />
                    </TableCell>
                  </>
                )}
                
                <TableCell>
                  <Controller
                    name={`productPrices.${index}.Price`}
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        type="number"
                        size="small"
                        inputProps={{ min: 0, step: 0.01 }}
                        onKeyDown={(e) => {
                          if (e.key === 'ArrowDown') {
                            e.preventDefault();
                            const nextField = document.querySelector(`[name="productPrices.${index + 1}.Price"]`) as HTMLElement;
                            if (nextField) {
                              nextField.focus();
                            }
                          }
                          if (e.key === 'ArrowUp') {
                            e.preventDefault();
                            const prevField = document.querySelector(`[name="productPrices.${index - 1}.Price"]`) as HTMLElement;
                            if (prevField) {
                              prevField.focus();
                            }
                          }
                          if (e.key === 'ArrowLeft') {
                            e.preventDefault();
                            const prevField = productType === 2 
                              ? document.querySelector(`[name="productPrices.${index}.unitFactor"]`) as HTMLElement
                              : document.querySelector(`[name="productPrices.${index}.posPriceName"]`) as HTMLElement;
                            prevField?.focus();
                          }
                        }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </TableCell>
                
                <TableCell>
                  <Button
                    size="small"
                    variant="outlined"
                    onClick={() => setExpandedPriceIndex(expandedPriceIndex === index ? null : index)}
                    startIcon={<IconComponents size={16} />}
                  >
                    {fields[index]?.productComponents?.length || 0}
                  </Button>
                </TableCell>
                <TableCell>
                  <IconButton
                    size="small"
                    color="error"
                    onClick={() => remove(index)}
                    type="button"
                  >
                    <IconTrash size={18} />
                  </IconButton>
                </TableCell>
              </TableRow>
              {expandedPriceIndex === index && (
                <TableRow>
                  <TableCell colSpan={productType === 2 ? 6 : 5}>
                    <ProductComponentsManager priceIndex={index} />
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))
        )}
      </TableBody>
    </Table>
  </TableContainer>
);

  return (
    <>
<Dialog 
  open={open} 
  onClose={onClose} 
  maxWidth="lg" 
  fullWidth
  fullScreen={isMobile}
  scroll="body" // تغيير من paper إلى body
  sx={{
    '& .MuiDialog-paper': {
      maxHeight: isMobile ? '100vh' : '90vh',
      height: isMobile ? '100vh' : 'auto',
      margin: isMobile ? 0 : 2,
      overflowY: 'auto',
      overflowX: 'hidden'
    }
  }}
>
        <DialogTitle>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            flexDirection: { xs: 'column', sm: 'row' },
            gap: { xs: 2, sm: 0 }
          }}>
            <Typography variant="h6">
              {mode === 'add' ? t('products.add') : t('products.edit')}
            </Typography>
            
            <Stack direction="row" spacing={1}>
              <Button
                variant="outlined"
                size="small"
                startIcon={<IconCopy size={16} />}
                onClick={handleCopyProduct}
                disabled={!watch('productName')}
                sx={{ minWidth: { xs: 'auto', sm: 100 } }}
              >
                {isMobile ? '' : t('common.copy')}
              </Button>
              
              <Button
                variant="outlined"
                size="small"
                startIcon={productCopyPaste.hasCopiedData ? <IconClipboardCheck size={16} /> : <IconClipboard size={16} />}
                onClick={handlePasteProduct}
                disabled={!productCopyPaste.hasCopiedData}
                color={productCopyPaste.hasCopiedData ? 'success' : 'inherit'}
                sx={{ minWidth: { xs: 'auto', sm: 100 } }}
              >
                {isMobile ? '' : t('common.paste')}
              </Button>
              
              {productCopyPaste.hasCopiedData && (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<IconTrashX size={16} />}
                  onClick={productCopyPaste.clearData}
                  color="error"
                  sx={{ minWidth: { xs: 'auto', sm: 100 } }}
                >
                  {isMobile ? '' : t('common.clearCopy')}
                </Button>
              )}
            </Stack>
          </Box>
        </DialogTitle>

        <form>
<DialogContent 
  sx={{ 
    maxHeight: 'none', // إزالة maxHeight
    height: 'auto',
    overflowY: 'visible', // تغيير من auto إلى visible
    overflowX: 'hidden',
    p: isMobile ? 1.5 : 2,
    '&::-webkit-scrollbar': {
      display: 'none' // إخفاء scrollbar في webkit browsers
    },
    scrollbarWidth: 'none', // إخفاء scrollbar في Firefox
    msOverflowStyle: 'none' // إخفاء scrollbar في IE/Edge
  }}
>            {/* Tabs للتنقل */}
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
              <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>
                <Tab label={t('products.basicInfo')} />
                {(productType === 1 || productType === 3) && <Tab label={t('products.optionGroups')} />}
              </Tabs>
            </Box>

            {/* Tab 0: المعلومات الأساسية والأسعار */}
            {currentTab === 0 && (
              <Grid container spacing={3}>
                {/* Basic Info Section */}
<Grid item xs={12}>
  <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
    {t('products.basicInfo')}
  </Typography>
</Grid>

<Grid item xs={12} md={6}>
  <Controller
    name="productName"
    control={control}
    rules={{ required: t('products.nameRequired') }}
    render={({ field, fieldState }) => (
      <TextField
        {...field}
        inputRef={nameFieldRef}
        label={t('products.name')}
        fullWidth
        error={!!fieldState.error}
        helperText={fieldState.error?.message}
        autoFocus
        onFocus={(e) => e.target.select()}
      />
    )}
  />
</Grid>

<Grid item xs={12} md={6}>
  <Controller
    name="groupId"
    control={control}
    rules={{ required: t('products.groupRequired') }}
    render={({ field, fieldState }) => (
      <Box>
        <GroupTreeSelect
          groups={groups}
          value={field.value}
          onChange={field.onChange}
          label={t('products.group')}
        />
        {fieldState.error && (
          <Typography variant="caption" color="error" sx={{ mt: 1, ml: 2 }}>
            {fieldState.error.message}
          </Typography>
        )}
      </Box>
    )}
  />
</Grid>

{/* POS Screen Selection - محدث ليشمل Product Type = 3 */}
{(productType === 1 || productType === 3) && flatPosScreens.length > 0 && (
  <Grid item xs={12} md={6}>
    <Controller
      name="posScreenId"
      control={control}
      render={({ field }) => (
        <FormControl fullWidth>
          <InputLabel>{t('products.posScreen')}</InputLabel>
          <Select
            {...field}
            label={t('products.posScreen')}
          >
            <MenuItem value="">
              <em>{t('products.selectPosScreen')}</em>
            </MenuItem>
            {flatPosScreens.map((screen) => (
              <MenuItem key={screen.id} value={screen.id}>
                {'  '.repeat(screen.displayOrder || 0) + screen.name}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      )}
    />
  </Grid>
)}

<Grid item xs={12} md={6}>
  <Controller
    name="description"
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        label={t('products.description')}
        fullWidth
        onFocus={(e) => e.target.select()}
      />
    )}
  />
</Grid>

{/* إظهار الحقول فقط للمواد الخام (productType === 2) */}
{productType === 2 && (
  <>
    <Grid item xs={12} md={4}>
      <Controller
        name="reorderLevel"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.reorderLevel')}
            type="number"
            fullWidth
            inputProps={{ min: 0 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>

    <Grid item xs={12} md={4}>
      <Controller
        name="cost"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.cost')}
            type="number"
            fullWidth
            inputProps={{ min: 0, step: 0.01 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>

    <Grid item xs={12} md={4}>
      <Controller
        name="lastPurePrice"
        control={control}
        render={({ field }) => (
          <TextField
            {...field}
            label={t('products.lastPurePrice')}
            type="number"
            fullWidth
            inputProps={{ min: 0, step: 0.01 }}
            onFocus={(e) => e.target.select()}
          />
        )}
      />
    </Grid>
  </>
)}

                {/* <Grid item xs={12} md={4}>
                  <Controller
                    name="expirationDays"
                    control={control}
                    render={({ field }) => (
                      <TextField
                        {...field}
                        label={t('products.expirationDays')}
                        type="number"
                        fullWidth
                        inputProps={{ min: 0 }}
                        onFocus={(e) => e.target.select()}
                      />
                    )}
                  />
                </Grid> */}

                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Controller
                        name="isActive"
                        control={control}
                        render={({ field }) => (
                          <Switch
                            checked={field.value}
                            onChange={field.onChange}
                          />
                        )}
                      />
                    }
                    label={t('products.form.isActive')}
                  />
                </Grid>

                {/* Pricing Section */}
   {/* Pricing Section */}
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  
                  {/* عنوان قسم الأسعار */}
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6" sx={{ color: 'primary.main' }}>
                      {t('products.pricing')}
                    </Typography>
                    <Button
                      variant="contained"
                      startIcon={<IconPlus size={20} />}
                      onClick={addPrice}
                      size={isMobile ? "small" : "medium"}
                    >
                      {t('products.addPrice')}
                    </Button>
                  </Box>

                  {/* نظام التابات للأسعار */}
                  {userBranches.length === 0 ? (
                    // إذا لم توجد فروع، عرض الأسعار الافتراضية فقط
                    <Box>
                      <Typography variant="subtitle1" sx={{ mb: 2, color: 'primary.main' }}>
                        {t('products.defaultPrices')} ({fields.length})
                      </Typography>
                      
                      {fields.length === 0 ? (
                        <Card variant="outlined">
                          <CardContent>
                            <Typography color="text.secondary" align="center">
                              {t('products.noPrices')}
                            </Typography>
                          </CardContent>
                        </Card>
                      ) : isMobile ? (
                        <Stack spacing={2}>
                          {fields.map((field, index) => (
                            <MobilePriceCard 
                              key={field.id} 
                              index={index} 
                              onRemove={() => remove(index)} 
                            />
                          ))}
                        </Stack>
                      ) : (
                        <DesktopPriceTable />
                      )}
                    </Box>
                  ) : (
                    // إذا وجدت فروع، عرض نظام التابات
                    <Box>
                      {/* التابات */}
                      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
                        <Tabs 
                          value={expandedPriceIndex || 0} 
                          onChange={(_, newValue) => setExpandedPriceIndex(newValue)}
                          variant={isMobile ? "scrollable" : "standard"}
                          scrollButtons="auto"
                        >
                          <Tab 
                            label={`${t('products.defaultPrices')} (${fields.length})`}
                            id="prices-tab-0"
                            aria-controls="prices-tabpanel-0"
                          />
                          {userBranches.map((branch, index) => (
                            <Tab
                              key={branch.id}
                              label={branch.name}
                              id={`prices-tab-${index + 1}`}
                              aria-controls={`prices-tabpanel-${index + 1}`}
                            />
                          ))}
                        </Tabs>
                      </Box>

                      {/* محتوى التابات */}
                      
                      {/* تاب الأسعار الافتراضية */}
                      {(expandedPriceIndex || 0) === 0 && (
                        <Box>
                          {fields.length === 0 ? (
                            <Card variant="outlined">
                              <CardContent>
                                <Typography color="text.secondary" align="center">
                                  {t('products.noPrices')}
                                </Typography>
                              </CardContent>
                            </Card>
                          ) : isMobile ? (
                            <Stack spacing={2}>
                              {fields.map((field, index) => (
                                <MobilePriceCard 
                                  key={field.id} 
                                  index={index} 
                                  onRemove={() => remove(index)} 
                                />
                              ))}
                            </Stack>
                          ) : (
                            <DesktopPriceTable />
                          )}
                        </Box>
                      )}

                      {/* تابات أسعار الفروع */}
                      {userBranches.map((branch, branchIndex) => (
                        (expandedPriceIndex || 0) === branchIndex + 1 && (
                          <Box key={branch.id}>
                            <Typography variant="subtitle1" sx={{ mb: 2, color: 'secondary.main' }}>
                              {t('products.branchPrices')} - {branch.name}
                            </Typography>
                            
                            {fields.length === 0 ? (
                              <Card variant="outlined">
                                <CardContent>
                                  <Typography color="text.secondary" align="center">
                                    {t('products.noPricesForBranchPricing')}
                                  </Typography>
                                </CardContent>
                              </Card>
                            ) : (
                              <TableContainer component={Paper} variant="outlined">
                                <Table size="small">
                                  <TableHead>
                                    <TableRow>
                                      <TableCell>{t('products.productPrice')}</TableCell>
                                      <TableCell>{t('products.defaultPrice')}</TableCell>
                                      <TableCell>{t('products.branchPrice')}</TableCell>
                                      <TableCell>{t('products.difference')}</TableCell>
                                    </TableRow>
                                  </TableHead>
                                  <TableBody>
                                    {fields.map((field, priceIndex) => {
                                      const defaultPrice = watch(`productPrices.${priceIndex}.Price`) || 0;
                                      const branchPrices = watch(`productPrices.${priceIndex}.branchPrices`) || [];
                                      const branchPriceIndex = branchPrices.findIndex(
                                        (bp: any) => bp.rawBranchId === branch.id
                                      );
                                      const branchPrice = branchPriceIndex >= 0 
                                        ? branchPrices[branchPriceIndex]?.price || 0
                                        : 0;
                                      const difference = branchPrice - defaultPrice;
                                      const priceName = productType === 1 || productType === 3 
                                        ? watch(`productPrices.${priceIndex}.posPriceName`) || `${t('products.price')} ${priceIndex + 1}`
                                        : `${t('products.price')} ${priceIndex + 1}`;

                                      return (
                                        <TableRow key={field.id}>
                                          <TableCell>
                                            <Typography variant="body2" fontWeight={500}>
                                              {priceName}
                                            </Typography>
                                            {watch(`productPrices.${priceIndex}.barcode`) && (
                                              <Typography variant="caption" color="text.secondary">
                                                {watch(`productPrices.${priceIndex}.barcode`)}
                                              </Typography>
                                            )}
                                          </TableCell>
                                          <TableCell>
                                            <Typography variant="body2" color="text.secondary">
                                              {defaultPrice.toFixed(2)} {t('common.currency')}
                                            </Typography>
                                          </TableCell>
                                          <TableCell>
                                            <TextField
                                              type="number"
                                              size="small"
                                              value={branchPrice}
                                              onChange={(e) => {
                                                const newPrice = Number(e.target.value);
                                                const currentBranchPrices = [...branchPrices];
                                                
                                                if (branchPriceIndex >= 0) {
                                                  currentBranchPrices[branchPriceIndex] = {
                                                    ...currentBranchPrices[branchPriceIndex],
                                                    price: newPrice
                                                  };
                                                } else {
                                                  currentBranchPrices.push({
                                                    rawBranchId: branch.id,
                                                    price: newPrice,
                                                    isActive: true
                                                  });
                                                }
                                                
                                                setValue(`productPrices.${priceIndex}.branchPrices`, currentBranchPrices);
                                              }}
                                              inputProps={{ min: 0, step: 0.01 }}
                                              sx={{ width: 120 }}
                                              onFocus={(e) => e.target.select()}
                                            />
                                          </TableCell>
                                          <TableCell>
                                            <Typography 
                                              variant="body2" 
                                              color={difference > 0 ? 'success.main' : difference < 0 ? 'error.main' : 'text.secondary'}
                                              fontWeight={difference !== 0 ? 600 : 400}
                                            >
                                              {difference > 0 ? '+' : ''}{difference.toFixed(2)}
                                            </Typography>
                                          </TableCell>
                                        </TableRow>
                                      );
                                    })}
                                  </TableBody>
                                </Table>
                              </TableContainer>
                            )}
                          </Box>
                        )
                      ))}
                    </Box>
                  )}
                </Grid>
              </Grid>
            )}

            {/* Tab 1: Option Groups */}
            {currentTab === 1 && (productType === 1 || productType === 3) && (
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                    <Typography variant="h6" color="primary.main">
                      {t('products.optionGroups')} ({optionGroupFields.length})
                    </Typography>
                    <Button
                      variant="contained"
                      startIcon={<IconPlus />}
                      onClick={addOptionGroup}
                    >
                      {t('products.addOptionGroup')}
                    </Button>
                  </Box>

                  {optionGroupFields.length === 0 ? (
                    <Card variant="outlined">
                      <CardContent>
                        <Typography color="text.secondary" align="center">
                          {t('products.noOptionGroups')}
                        </Typography>
                      </CardContent>
                    </Card>
                  ) : (
                    <Stack spacing={2}>
                      {optionGroupFields.map((field, index) => (
                        <OptionGroupComponent key={field.id} groupIndex={index} />
                      ))}
                    </Stack>
                  )}
                </Grid>
              </Grid>
            )}
          </DialogContent>

          <DialogActions sx={{ 
            position: 'sticky', 
            bottom: 0, 
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            p: 2,
            flexDirection: isMobile ? 'column' : 'row',
            gap: isMobile ? 1 : 0
          }}>
            <Button 
              onClick={onClose} 
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('common.cancel')}
            </Button>
            
            <Stack direction={isMobile ? "column" : "row"} spacing={1} sx={{ width: isMobile ? '100%' : 'auto' }}>
              <Button 
                variant="outlined"
                startIcon={<IconDeviceFloppy size={20} />}
                onClick={handleSubmit((data) => submit(data, 'save'))}
                disabled={isSubmitting}
                fullWidth={isMobile}
              >
                {t('products.saveAndExit')}
              </Button>
              
              <Button 
                variant="contained"
                startIcon={<IconPlusNew size={20} />}
                onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
                disabled={isSubmitting}
                fullWidth={isMobile}
              >
                {t('products.saveAndNew')}
              </Button>
            </Stack>
          </DialogActions>
        </form>
      </Dialog>
    </>
  );
};

export default ProductForm;



============================================================
FILE: src/Pages/Products/components/ProductMultiSelectDialog.tsx
============================================================
// File: src/pages/products/components/ProductMultiSelectDialog.tsx
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Button, TextField, Box, Checkbox,
  Table, TableBody, TableCell, TableContainer, TableHead,
  TableRow, Paper, Chip, Stack, Typography, InputAdornment,
  FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { IconSearch, IconSelectAll } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import { Product } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';

interface SelectedProduct {
  productPriceId: string;
  productName: string;
  priceName: string;
  price: number;
}

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (products: SelectedProduct[]) => void;
  excludeProductId?: string;
  productType?: number;
  preSelectedItems?: string[]; // ⭐ إضافة المنتجات المختارة مسبقاً
}

const ProductMultiSelectDialog: React.FC<Props> = ({
  open, onClose, onSelect, excludeProductId, productType = 1, preSelectedItems = []
}) => {
  const { t } = useTranslation();
  const [products, setProducts] = React.useState<Product[]>([]);
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [selectedGroupId, setSelectedGroupId] = React.useState('');
  const [selectedProducts, setSelectedProducts] = React.useState<Set<string>>(new Set());

  // تحميل المجموعات
  React.useEffect(() => {
    if (open) {
      loadGroups();
      loadProducts();
      // ⭐ تحميل المنتجات المختارة مسبقاً
      setSelectedProducts(new Set(preSelectedItems));
    }
  }, [open, preSelectedItems]);

  const loadGroups = async () => {
    try {
      const groupsData = await groupsApi.getAll();
      setGroups(groupsData);
    } catch (error) {
      }
  };

  const loadProducts = async () => {
    try {
      setLoading(true);
      const data = await productsApi.getByType(productType, 1, 100);
      const filteredProducts = data.data.filter(p => 
        p.id !== excludeProductId && 
        p.productPrices && 
        p.productPrices.length > 0 &&
        p.isActive
      );
      setProducts(filteredProducts);
    } catch (error) {
      } finally {
      setLoading(false);
    }
  };

  // ⭐ فلترة المنتجات مع البحث في Product Name و Price Name
  const filteredProducts = React.useMemo(() => {
    let result = [...products];

    if (searchQuery.trim()) {
      const searchLower = searchQuery.toLowerCase();
      result = result.filter(product => {
        // البحث في اسم المنتج
        const productNameMatch = product.name.toLowerCase().includes(searchLower);
        
        // البحث في أسماء الأسعار
        const priceNameMatch = product.productPrices.some(price => 
          price.posPriceName && price.posPriceName.toLowerCase().includes(searchLower)
        );
        
        return productNameMatch || priceNameMatch;
      });
    }

    if (selectedGroupId) {
      result = result.filter(product => product.groupId === selectedGroupId);
    }

    return result;
  }, [products, searchQuery, selectedGroupId]);

  const allProductPrices = React.useMemo(() => {
    const prices: Array<{
      productPriceId: string;
      productId: string;
      productName: string;
      priceName: string;
      price: number;
      barcode: string;
    }> = [];

    filteredProducts.forEach(product => {
      product.productPrices.forEach(price => {
        prices.push({
          productPriceId: price.id,
          productId: product.id,
          productName: product.name,
          priceName: price.posPriceName || product.name,
          price: price.price,
          barcode: price.barcode
        });
      });
    });

    return prices;
  }, [filteredProducts]);

  const handleSelectAll = () => {
    if (selectedProducts.size === allProductPrices.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(allProductPrices.map(p => p.productPriceId)));
    }
  };

  const handleProductToggle = (productPriceId: string) => {
    const newSelected = new Set(selectedProducts);
    if (newSelected.has(productPriceId)) {
      newSelected.delete(productPriceId);
    } else {
      newSelected.add(productPriceId);
    }
    setSelectedProducts(newSelected);
  };

  const handleConfirm = () => {
    const selectedProductsData = allProductPrices
      .filter(p => selectedProducts.has(p.productPriceId))
      .map(p => ({
        productPriceId: p.productPriceId,
        productName: p.productName,
        priceName: p.priceName,
        price: p.price
      }));
    
    onSelect(selectedProductsData);
    onClose();
    setSelectedProducts(new Set());
  };

  const handleCancel = () => {
    onClose();
    setSelectedProducts(new Set());
  };

  return (
    <Dialog open={open} onClose={handleCancel} maxWidth="lg" fullWidth>
      <DialogTitle>
        {t('products.form.selectProducts')}
      </DialogTitle>
      
      <DialogContent>
        <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
          <TextField
            placeholder={t('products.form.searchProductsAndPrices')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              )
            }}
            sx={{ flex: 1 }}
          />
          
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>{t('products.form.filterByGroup')}</InputLabel>
            <Select
              value={selectedGroupId}
              onChange={(e) => setSelectedGroupId(e.target.value)}
              label={t('products.form.filterByGroup')}
            >
              <MenuItem value="">
                <em>{t('products.form.allGroups')}</em>
              </MenuItem>
              {groups.map((group) => (
                <MenuItem key={group.id} value={group.id}>
                  {group.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>

        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            {t('products.form.productsFound', { count: allProductPrices.length })}
          </Typography>
          
          <Stack direction="row" spacing={1} alignItems="center">
            <Chip 
              label={t('products.form.selected', { count: selectedProducts.size })}
              color="primary"
              variant="outlined"
            />
            <Button
              size="small"
              startIcon={<IconSelectAll />}
              onClick={handleSelectAll}
            >
              {selectedProducts.size === allProductPrices.length 
                ? t('products.form.deselectAll') 
                : t('products.form.selectAll')
              }
            </Button>
          </Stack>
        </Box>

        <TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 400 }}>
          <Table stickyHeader size="small">
            <TableHead>
              <TableRow>
                <TableCell padding="checkbox">
                  <Checkbox
                    checked={selectedProducts.size === allProductPrices.length && allProductPrices.length > 0}
                    indeterminate={selectedProducts.size > 0 && selectedProducts.size < allProductPrices.length}
                    onChange={handleSelectAll}
                  />
                </TableCell>
                <TableCell>{t('products.form.productName')}</TableCell>
                <TableCell>{t('products.form.priceName')}</TableCell>
                <TableCell>{t('products.form.price')}</TableCell>
                <TableCell>{t('products.form.barcode')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    {t('common.loading')}
                  </TableCell>
                </TableRow>
              ) : allProductPrices.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    {t('products.form.noProductsFound')}
                  </TableCell>
                </TableRow>
              ) : (
                allProductPrices.map((productPrice) => (
                  <TableRow key={productPrice.productPriceId}>
                    <TableCell padding="checkbox">
                      <Checkbox
                        checked={selectedProducts.has(productPrice.productPriceId)}
                        onChange={() => handleProductToggle(productPrice.productPriceId)}
                      />
                    </TableCell>
                    <TableCell>{productPrice.productName}</TableCell>
                    <TableCell>
                      <Box>
                        <Typography variant="body2">
                          {productPrice.priceName}
                        </Typography>
                        {productPrice.priceName !== productPrice.productName && (
                          <Typography variant="caption" color="text.secondary">
                            ({productPrice.productName})
                          </Typography>
                        )}
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" sx={{ fontWeight: 600, color: 'primary.main' }}>
                        {productPrice.price.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" color="text.secondary">
                        {productPrice.barcode || '-'}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={handleCancel}>
          {t('common.cancel')}
        </Button>
        <Button 
          onClick={handleConfirm} 
          variant="contained"
          disabled={selectedProducts.size === 0}
        >
          {t('products.form.addSelected', { count: selectedProducts.size })}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ProductMultiSelectDialog;


============================================================
FILE: src/Pages/Products/components/ProductPricesDrawer.tsx
============================================================
// File: src/pages/products/components/ProductPricesDrawer.tsx
import React from 'react';
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Stack,
  Card,
  CardContent,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { IconX, IconBarcode, IconComponents } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  open: boolean;
  product: Product | null;
  units: Unit[];
  onClose: () => void;
}

const ProductPricesDrawer: React.FC<Props> = ({
  open,
  product,
  units,
  onClose
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  if (!product) return null;

  const getUnitName = (unitId: string) => {
    const unit = units.find(u => u.id === unitId);
    return unit?.name || t('common.notSpecified');
  };

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';
      case 2: return 'secondary';
      case 3: return 'info';
      default: return 'default';
    }
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: isMobile ? '100%' : 600,
          maxWidth: '100%'
        }
      }}
    >
      <Box sx={{ p: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ mb: 1 }}>
              {product.name}
            </Typography>
            <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
              <Chip
                label={getProductTypeLabel(product.productType)}
                color={getProductTypeColor(product.productType)}
                size="small"
                variant="outlined"
              />
              {/* ⭐ عرض حالة المنتج */}
              <Chip
                label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
                color={product.isActive ? 'success' : 'error'}
                size="small"
                variant={product.isActive ? 'filled' : 'outlined'}
              />
            </Stack>
            <Typography variant="body2" color="text.secondary">
              {t('products.code')}: {product.code}
            </Typography>
            {product.group && (
              <Typography variant="body2" color="text.secondary">
                {t('products.group')}: {product.group.name}
              </Typography>
            )}
            {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
            {product.productType === 1 && product.posScreen && (
              <Typography variant="body2" color="text.secondary">
                📱 {t('products.form.posScreen')}: {product.posScreen.name}
              </Typography>
            )}
          </Box>
          
          <IconButton onClick={onClose}>
            <IconX />
          </IconButton>
        </Box>

        <Divider sx={{ mb: 3 }} />

        {/* Product Description */}
        {product.description && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" sx={{ mb: 1 }}>
              {t('products.description')}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {product.description}
            </Typography>
          </Box>
        )}

        {/* Product Options (للـ POS و Addition فقط) */}
        {(product.productType === 1 || product.productType === 3) && 
         product.productOptionGroups && 
         product.productOptionGroups.length > 0 && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" sx={{ mb: 2 }}>
              {t('products.form.productOptions')} ({product.productOptionGroups.length})
            </Typography>
            {product.productOptionGroups.map((group, index) => (
              <Card key={group.id || index} variant="outlined" sx={{ mb: 2 }}>
                <CardContent sx={{ pb: '16px !important' }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="subtitle2">
                      {group.name}
                    </Typography>
                    <Stack direction="row" spacing={1}>
                      {group.isRequired && (
                        <Chip label={t('products.form.required')} size="small" color="error" variant="outlined" />
                      )}
                      {group.allowMultiple && (
                        <Chip label={t('products.form.allowMultiple')} size="small" color="info" variant="outlined" />
                      )}
                    </Stack>
                  </Box>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 2, display: 'block' }}>
                    {t('products.form.minSelection')}: {group.minSelection} | {t('products.form.maxSelection')}: {group.maxSelection}
                  </Typography>
                  
                  {group.optionItems && group.optionItems.length > 0 && (
                    <Box>
                      {group.optionItems.map((item, itemIndex) => (
                        <Box key={item.id || itemIndex} sx={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          py: 0.5,
                          borderBottom: itemIndex < group.optionItems.length - 1 ? 1 : 0,
                          borderColor: 'divider'
                        }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body2">
                              {item.name}
                            </Typography>
                            {item.isCommentOnly && (
                              <Chip label={t('products.form.comment')} size="small" color="info" />
                            )}
                          </Box>
                          {item.extraPrice > 0 && (
                            <Typography variant="body2" color="primary.main" sx={{ fontWeight: 600 }}>
                              +{item.extraPrice.toFixed(2)}
                            </Typography>
                          )}
                        </Box>
                      ))}
                    </Box>
                  )}
                </CardContent>
              </Card>
            ))}
          </Box>
        )}

        {/* Prices */}
        <Typography variant="subtitle2" sx={{ mb: 2 }}>
          {t('products.prices')} ({product.productPrices.length})
        </Typography>

        {product.productPrices.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
            {t('products.noPrices')}
          </Typography>
        ) : isMobile ? (
          // Mobile View
          <Stack spacing={2}>
            {product.productPrices.map((price, index) => (
              <Card key={price.id} variant="outlined">
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Typography variant="subtitle2">
                      {t('products.price')} #{index + 1}
                    </Typography>
                    <Typography variant="h6" color="primary.main">
                      {price.price.toFixed(2)}
                    </Typography>
                  </Box>

                  <Stack spacing={1}>
                    {/* ⭐ عرض posPriceName للـ POS/Addition */}
                    {(product.productType === 1 || product.productType === 3) && price.posPriceName && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.form.priceName')}:
                        </Typography>
                        <Typography variant="body2">
                          {price.posPriceName}
                        </Typography>
                      </Box>
                    )}

                    {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                    {product.productType === 2 && (
                      <>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                          <Typography variant="body2" color="text.secondary">
                            {t('products.unit')}:
                          </Typography>
                          <Typography variant="body2">
                            {getUnitName(price.unitId)}
                          </Typography>
                        </Box>

                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                          <Typography variant="body2" color="text.secondary">
                            {t('products.unitFactor')}:
                          </Typography>
                          <Typography variant="body2">
                            {price.unitFactor}x
                          </Typography>
                        </Box>
                      </>
                    )}

                    {price.barcode && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.barcode')}:
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconBarcode size={16} />
                          <Typography variant="body2" fontFamily="monospace">
                            {price.barcode}
                          </Typography>
                        </Box>
                      </Box>
                    )}

                    {price.productComponents && price.productComponents.length > 0 && (
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2" color="text.secondary">
                          {t('products.components')}:
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconComponents size={16} />
                          <Typography variant="body2">
                            {price.productComponents.length}
                          </Typography>
                        </Box>
                      </Box>
                    )}
                  </Stack>
                </CardContent>
              </Card>
            ))}
          </Stack>
        ) : (
          // Desktop Table View
          <TableContainer component={Paper} variant="outlined">
            <Table size="small">
              <TableHead>
                <TableRow>
                  {/* ⭐ عرض posPriceName للـ POS/Addition */}
                  {(product.productType === 1 || product.productType === 3) && (
                    <TableCell>{t('products.form.priceName')}</TableCell>
                  )}
                  {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                  {product.productType === 2 && (
                    <>
                      <TableCell>{t('products.unit')}</TableCell>
                      <TableCell>{t('products.unitFactor')}</TableCell>
                    </>
                  )}
                  <TableCell>{t('products.price')}</TableCell>
                  <TableCell>{t('products.barcode')}</TableCell>
                  <TableCell>{t('products.components')}</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {product.productPrices.map((price) => (
                  <TableRow key={price.id}>
                    {/* ⭐ عرض posPriceName للـ POS/Addition */}
                    {(product.productType === 1 || product.productType === 3) && (
                      <TableCell>
                        <Typography variant="body2">
                          {price.posPriceName || '-'}
                        </Typography>
                      </TableCell>
                    )}
                    
                    {/* ⭐ إخفاء الوحدة ومعامل التحويل للـ POS/Addition */}
                    {product.productType === 2 && (
                      <>
                        <TableCell>
                          <Typography variant="body2">
                            {getUnitName(price.unitId)}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2">
                            {price.unitFactor}x
                          </Typography>
                        </TableCell>
                      </>
                    )}
                    
                    <TableCell>
                      <Typography variant="body2" fontWeight={600} color="primary.main">
                        {price.price.toFixed(2)}
                      </Typography>
                    </TableCell>
                    
                    <TableCell>
                      {price.barcode ? (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconBarcode size={16} />
                          <Typography variant="body2" fontFamily="monospace">
                            {price.barcode}
                          </Typography>
                        </Box>
                      ) : (
                        <Typography variant="body2" color="text.secondary">-</Typography>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      {price.productComponents && price.productComponents.length > 0 ? (
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <IconComponents size={16} />
                          <Typography variant="body2">
                            {price.productComponents.length}
                          </Typography>
                        </Box>
                      ) : (
                        <Typography variant="body2" color="text.secondary">-</Typography>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Box>
    </Drawer>
  );
};

export default ProductPricesDrawer;


============================================================
FILE: src/Pages/Products/components/ProductPriceSearchSelect.tsx
============================================================
// File: src/pages/products/components/ProductPriceSearchSelect.tsx
import React from 'react';
import {
  Autocomplete,
  TextField,
  Box,
  Typography,
  Chip,
  CircularProgress,
  Paper
} from '@mui/material';
import { debounce } from '@mui/material/utils';
import { useTranslation } from 'react-i18next';
import { searchProductPricesByNameOrBarcode } from 'src/utils/api/pagesApi/productsApi';

interface ProductPriceOption {
  productPriceId: string;
  product: {
    productID: string;
    productName: string;
  };
  unit: {
    unitName: string;
  };
  unitFactor: number;
  price: number;
  barcode: string;
  posPriceName?: string;
}

interface Props {
  value: string;
  onChange: (value: string) => void;
  label: string;
  error?: boolean;
  excludeProductId?: string;
  showPriceName?: boolean;
  hideUnitInfo?: boolean;
  placeholder?: string;
}

const ProductPriceSearchSelect: React.FC<Props> = ({
  value,
  onChange,
  label,
  error = false,
  excludeProductId,
  showPriceName = false,
  hideUnitInfo = false,
  placeholder
}) => {
  const { t } = useTranslation();
const [options, setOptions] = React.useState<ProductPriceOption[]>([]); // ✅ دايماً array فاضي
  const [loading, setLoading] = React.useState(false);
  const [inputValue, setInputValue] = React.useState('');
  const [selectedOption, setSelectedOption] = React.useState<ProductPriceOption | null>(null);
  const [open, setOpen] = React.useState(false);

  // إضافة AbortController لإلغاء الطلبات السابقة
  const abortControllerRef = React.useRef<AbortController | null>(null);

  // ⭐ دالة لتحميل النتائج الأولية (أول 10)
const loadInitialResults = React.useCallback(async () => {
  if (abortControllerRef.current) {
    abortControllerRef.current.abort();
  }

  abortControllerRef.current = new AbortController();
  setLoading(true);
  
  try {
    const response = await searchProductPricesByNameOrBarcode('', 1, 10);
    
    let filteredData: ProductPriceOption[] = [];
    // ⭐ تحديث المسار للبيانات
    const apiData = response.data;
    if (apiData && Array.isArray(apiData)) {
      filteredData = apiData
        .filter(item => item && item.product && item.productPriceId)
        .map(item => ({
          productPriceId: item.productPriceId,
          product: {
            productID: item.product.productID,
            productName: item.product.productName
          },
          unit: {
            unitName: item.unit?.unitName || 'قطعة'
          },
          unitFactor: item.unitFactor || 1,
          price: item.price || 0,
          barcode: item.barcode || '',
          posPriceName: item.posPriceName || ''
        }));
    }

    if (excludeProductId) {
      filteredData = filteredData.filter(item => 
        item.product?.productID !== excludeProductId
      );
    }

    setOptions(filteredData);
  } catch (error) {
    setOptions([]);
  } finally {
    setLoading(false);
  }
}, [excludeProductId]);

  // دالة البحث مع debounce
const debouncedSearch = React.useMemo(
  () => debounce(async (searchTerm: string) => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    abortControllerRef.current = new AbortController();

    if (!searchTerm.trim()) {
      await loadInitialResults();
      return;
    }

    setLoading(true);
    try {
      const response = await searchProductPricesByNameOrBarcode(searchTerm, 1, 50);
      
      // ⭐ تحديد نوع البيانات
      let filteredData: ProductPriceOption[] = [];
      if (response.data && Array.isArray(response.data)) {
        filteredData = response.data
          .filter(item => item && item.product && item.productPriceId)
          .map(item => ({
            productPriceId: item.productPriceId,
            product: {
              productID: item.product.productID,
              productName: item.product.productName
            },
            unit: {
              unitName: item.unit?.unitName || 'قطعة'
            },
            unitFactor: item.unitFactor || 1,
            price: item.price || 0,
            barcode: item.barcode || '',
            posPriceName: item.posPriceName || ''
          }));
      }

      if (excludeProductId) {
        filteredData = filteredData.filter(item => 
          item.product?.productID !== excludeProductId
        );
      }

      setOptions(filteredData);
    } catch (error) {
      if (typeof error === 'object' && error !== null && 'name' in error && (error as any).name !== 'AbortError') {
        setOptions([]);
      }
    } finally {
      setLoading(false);
    }
  }, 300),
  [excludeProductId, loadInitialResults]
);

  // ⭐ تحديث useEffect للبحث
  React.useEffect(() => {
    if (open) {
      if (inputValue.trim()) {
        debouncedSearch(inputValue);
      } else {
        // عرض أول 10 نتائج عند فتح القائمة بدون بحث
        loadInitialResults();
      }
    }
  }, [inputValue, debouncedSearch, open, loadInitialResults]);

  // تنظيف عند unmount
  React.useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      debouncedSearch.clear();
    };
  }, [debouncedSearch]);

  // تحديد الخيار المحدد عند تغيير القيمة
  React.useEffect(() => {
    if (value && options.length > 0) {
      const found = options.find(option => option.productPriceId === value);
      if (found && (!selectedOption || selectedOption.productPriceId !== found.productPriceId)) {
        setSelectedOption(found);
      }
    } else if (!value && selectedOption) {
      setSelectedOption(null);
    }
  }, [value, options]);

  // دالة عرض الخيار في القائمة
  const renderOption = (props: any, option: ProductPriceOption) => {
    const isSelected = selectedOption?.productPriceId === option.productPriceId;
    
    return (
      <Box 
        component="li" 
        {...props} 
        key={option.productPriceId}
        sx={{
          ...props.sx,
          backgroundColor: isSelected ? 'rgba(25, 118, 210, 0.08)' : 'transparent',
          '&:hover': {
            backgroundColor: isSelected 
              ? 'rgba(25, 118, 210, 0.12)' 
              : 'rgba(0, 0, 0, 0.04)'
          }
        }}
      >
        <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%', py: 0.5 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Typography variant="body2" sx={{ fontWeight: 500 }}>
              {showPriceName && option.posPriceName 
                ? option.posPriceName 
                : option.product?.productName || 'منتج غير محدد'
              }
            </Typography>
            {isSelected && (
              <Chip 
                label="محدد" 
                size="small" 
                color="primary" 
                sx={{ height: 20, fontSize: '0.7rem' }}
              />
            )}
          </Box>
          
          {!hideUnitInfo && (
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 0.5 }}>
              <Typography variant="caption" color="text.secondary">
                {option.unit?.unitName || 'وحدة غير محددة'} × {option.unitFactor}
              </Typography>
              <Typography variant="caption" sx={{ fontWeight: 600, color: 'primary.main' }}>
                {option.price?.toFixed(2)} جنيه
              </Typography>
            </Box>
          )}
          
          {showPriceName && option.posPriceName && (
            <Typography variant="caption" color="text.secondary">
              {option.product?.productName} - {option.price?.toFixed(2)} جنيه
            </Typography>
          )}
          
          {option.barcode && (
            <Typography variant="caption" color="text.secondary">
              {option.barcode}
            </Typography>
          )}
        </Box>
      </Box>
    );
  };

  // دالة عرض النص المحدد في الـ input
  const getOptionLabel = (option: ProductPriceOption | string) => {
    if (typeof option === 'string') return option;
    if (!option.product?.productName) return '';
    
    if (showPriceName && option.posPriceName) {
      return option.posPriceName;
    }
    
    if (hideUnitInfo) {
      return option.product.productName;
    }
    
    return `${option.product.productName} - ${option.unit?.unitName || 'وحدة'} × ${option.unitFactor} - ${option.price?.toFixed(2)} جنيه`;
  };

  return (
    <Autocomplete
      open={open}
      onOpen={() => setOpen(true)}
      onClose={() => setOpen(false)}
      value={selectedOption}
      onChange={(_, newValue) => {
        onChange(newValue?.productPriceId || '');
      }}
      inputValue={inputValue}
      onInputChange={(_, newInputValue, reason) => {
        if (reason === 'input') {
          setInputValue(newInputValue);
        }
      }}
      options={options}
      getOptionLabel={getOptionLabel}
      renderOption={renderOption}
      loading={loading}
      loadingText={t('common.loading')}
      noOptionsText={inputValue ? t('products.noProductsFound') : t('products.startTyping')}
      isOptionEqualToValue={(option, value) => option.productPriceId === value.productPriceId}
      filterOptions={(x) => x}
      PaperComponent={(props) => (
        <Paper 
          {...props} 
          sx={{ 
            '& .MuiAutocomplete-option': {
              '&[aria-selected="true"]': {
                backgroundColor: 'rgba(25, 118, 210, 0.08)',
              },
              '&.Mui-focused': {
                backgroundColor: 'rgba(0, 0, 0, 0.04)',
              },
              '&[aria-selected="true"].Mui-focused': {
                backgroundColor: 'rgba(25, 118, 210, 0.12)',
              }
            }
          }}
        />
      )}
      renderInput={(params) => (
        <TextField
          {...params}
          label={label}
          error={error}
          size="small"
          placeholder={placeholder || (selectedOption ? selectedOption.product?.productName : t('products.searchPlaceholder'))}
          InputProps={{
            ...params.InputProps,
            endAdornment: (
              <>
                {loading ? <CircularProgress color="inherit" size={20} /> : null}
                {params.InputProps.endAdornment}
              </>
            ),
          }}
          // ⭐ تحديد النص عند Focus
          onFocus={(e) => {
            if (e.target.value) {
              e.target.select();
            }
          }}
        />
      )}
      sx={{
        '& .MuiAutocomplete-input': {
          fontSize: '0.875rem'
        },
        '& .MuiOutlinedInput-root': {
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            borderColor: 'primary.main',
            borderWidth: 1,
          }
        }
      }}
    />
  );
};

export default ProductPriceSearchSelect;


============================================================
FILE: src/Pages/Products/components/ProductsRow.tsx
============================================================
// File: src/pages/products/components/ProductsRow.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  IconButton,
  Stack,
  Divider,
  Tooltip
} from '@mui/material';
import { IconEdit, IconEye, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  product: Product;
  onEdit: () => void;
  onViewPrices: () => void;
  isSelected?: boolean;
}

const ProductRow: React.FC<Props> = ({
  product,
  onEdit,
  onViewPrices,
  isSelected = false
}) => {
  const { t } = useTranslation();

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';   // POS
      case 2: return 'secondary'; // Material
      case 3: return 'info';      // Addition
      default: return 'default';
    }
  };

  return (
    <Card 
      variant="outlined" 
      sx={{ 
        mb: 2,
        ...(isSelected && {
          borderColor: 'primary.main',
          backgroundColor: 'action.selected'
        })
      }}
    >
      <CardContent>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" sx={{ fontSize: '1.1rem', fontWeight: 600, mb: 0.5 }}>
              {product.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('products.code')}: {product.code}
            </Typography>
          </Box>
          
          {/* ⭐ عرض حالة المنتج */}
          <Chip
            label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
            color={product.isActive ? 'success' : 'error'}
            size="small"
            variant={product.isActive ? 'filled' : 'outlined'}
          />
        </Box>

        {/* Product Info */}
        <Stack spacing={1} sx={{ mb: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.group')}:
            </Typography>
            <Typography variant="body2">
              {product.group?.name || t('common.notSpecified')}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.type')}:
            </Typography>
            <Chip
              label={getProductTypeLabel(product.productType)}
              color={getProductTypeColor(product.productType)}
              size="small"
              variant="outlined"
            />
          </Box>
          
          {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
          {product.productType === 1 && product.posScreen && (
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                {t('products.form.posScreen')}:
              </Typography>
              <Typography variant="body2">
                📱 {product.posScreen.name}
              </Typography>
            </Box>
          )}
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              {t('products.prices')}:
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2">
                {product.productPrices.length}
              </Typography>
              {product.productPrices.some(p => p.barcode) && (
                <Tooltip title={t('products.hasBarcode')}>
                  <IconBarcode size={16} color="green" />
                </Tooltip>
              )}
            </Box>
          </Box>
        </Stack>

        {/* Description */}
        {product.description && (
          <>
            <Divider sx={{ my: 1 }} />
            <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.875rem' }}>
              {product.description}
            </Typography>
          </>
        )}

        {/* Actions */}
        <Divider sx={{ my: 2 }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
          <Tooltip title={t('products.viewPrices')}>
            <IconButton
              size="small"
              onClick={onViewPrices}
              color="info"
            >
              <IconEye size={18} />
            </IconButton>
          </Tooltip>
          
          <Tooltip title={t('common.edit')}>
            <IconButton
              size="small"
              onClick={onEdit}
              color="primary"
            >
              <IconEdit size={18} />
            </IconButton>
          </Tooltip>
        </Box>
      </CardContent>
    </Card>
  );
};

export default ProductRow;


============================================================
FILE: src/Pages/Products/components/ProductTable.tsx
============================================================
// File: src/pages/products/components/ProductTable.tsx
import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Chip,
  Typography,
  Box,
  Tooltip
} from '@mui/material';
import { IconEdit, IconEye, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Product } from 'src/utils/api/pagesApi/productsApi';

interface Props {
  rows: Product[];
  onEdit: (product: Product) => void;
  onViewPrices: (product: Product) => void;
  selectedProductId?: string;
}

const ProductTable: React.FC<Props> = ({
  rows,
  onEdit,
  onViewPrices,
  selectedProductId
}) => {
  const { t } = useTranslation();

  const getProductTypeLabel = (type: number) => {
    switch (type) {
      case 1: return t('products.types.pos');
      case 2: return t('products.types.material');
      case 3: return t('products.types.addition');
      default: return t('products.types.unknown');
    }
  };

  const getProductTypeColor = (type: number): "default" | "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
    switch (type) {
      case 1: return 'primary';   // POS
      case 2: return 'secondary'; // Material
      case 3: return 'info';      // Addition
      default: return 'default';
    }
  };

  return (
    <TableContainer component={Paper} variant="outlined">
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>{t('products.code')}</TableCell>
            <TableCell>{t('products.name')}</TableCell>
            <TableCell>{t('products.group')}</TableCell>
            <TableCell>{t('products.type')}</TableCell>
            <TableCell>{t('products.prices')}</TableCell>
            {/* ⭐ إضافة عمود الحالة */}
            <TableCell>{t('products.status.title')}</TableCell>
            <TableCell>{t('products.description')}</TableCell>
            <TableCell width={120}>{t('common.actions')}</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((product) => (
            <TableRow
              key={product.id}
              selected={selectedProductId === product.id}
              sx={{
                '&:hover': {
                  backgroundColor: 'action.hover',
                },
                ...(selectedProductId === product.id && {
                  backgroundColor: 'action.selected',
                }),
              }}
            >
              <TableCell>
                <Typography variant="body2" fontWeight={500}>
                  {product.code}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Box>
                  <Typography variant="body2" fontWeight={500}>
                    {product.name}
                  </Typography>
                  {/* ⭐ عرض POS Screen للمنتجات من نوع POS */}
                  {product.productType === 1 && product.posScreen && (
                    <Typography variant="caption" color="text.secondary">
                      📱 {product.posScreen.name}
                    </Typography>
                  )}
                </Box>
              </TableCell>
              
              <TableCell>
                <Typography variant="body2">
                  {product.group?.name || t('common.notSpecified')}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Chip
                  label={getProductTypeLabel(product.productType)}
                  color={getProductTypeColor(product.productType)}
                  size="small"
                  variant="outlined"
                />
              </TableCell>
              
              <TableCell>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Typography variant="body2">
                    {product.productPrices.length}
                  </Typography>
                  {product.productPrices.some(p => p.barcode) && (
                    <Tooltip title={t('products.hasBarcode')}>
                      <IconBarcode size={16} color="green" />
                    </Tooltip>
                  )}
                </Box>
              </TableCell>
              
              {/* ⭐ عمود الحالة */}
              <TableCell>
                <Chip
                  label={product.isActive ? t('products.status.active') : t('products.status.inactive')}
                  color={product.isActive ? 'success' : 'error'}
                  size="small"
                  variant={product.isActive ? 'filled' : 'outlined'}
                />
              </TableCell>
              
              <TableCell>
                <Typography 
                  variant="body2" 
                  color="text.secondary"
                  sx={{
                    maxWidth: 200,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap'
                  }}
                >
                  {product.description || '-'}
                </Typography>
              </TableCell>
              
              <TableCell>
                <Box sx={{ display: 'flex', gap: 0.5 }}>
                  <Tooltip title={t('common.edit')}>
                    <IconButton
                      size="small"
                      onClick={() => onEdit(product)}
                      color="primary"
                    >
                      <IconEdit size={18} />
                    </IconButton>
                  </Tooltip>
                  
                  <Tooltip title={t('products.viewPrices')}>
                    <IconButton
                      size="small"
                      onClick={() => onViewPrices(product)}
                      color="info"
                    >
                      <IconEye size={18} />
                    </IconButton>
                  </Tooltip>
                </Box>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default ProductTable;


============================================================
FILE: src/Pages/Products/ProductsPage.tsx
============================================================
// File: src/pages/products/ProductsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Pagination,
  Stack, TextField, InputAdornment, IconButton, Chip, Button, Fab, Badge
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import ProductTable from './components/ProductTable';
import ProductRow from './components/ProductsRow';
import ProductForm from './components/ProductForm';
import ProductPricesDrawer from './components/ProductPricesDrawer';
import MobileProductsFilter, { ProductsFilterState } from './components/mobile/MobileProductsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/productsApi';
import * as groupsApi from 'src/utils/api/pagesApi/groupsApi';
import * as unitsApi from 'src/utils/api/pagesApi/unitsApi';
import { Product, ProductsResponse } from 'src/utils/api/pagesApi/productsApi';
import { Group } from 'src/utils/api/pagesApi/groupsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const ProductsPage: React.FC<Props> = (props) => {
  const { canAdd = true } = props;
  const { t } = useTranslation();
  const [productsData, setProductsData] = React.useState<ProductsResponse>({
    totalCount: 0,
    pageCount: 0,
    pageNumber: 1,
    pageSize: 20,
    data: []
  });
  const [groups, setGroups] = React.useState<Group[]>([]);
  const [units, setUnits] = React.useState<Unit[]>([]);
  const [selectedProduct, setSelectedProduct] = React.useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = React.useState('');
  const [searchMode, setSearchMode] = React.useState<'name' | 'barcode' | null>(null);
  const [currentPage, setCurrentPage] = React.useState(1);  const [loading, setLoad] = React.useState(true);
  const [searching, setSearching] = React.useState(false);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Product;
  }>({ open: false, mode: 'add', current: undefined });
  const [pricesDrawerOpen, setPricesDrawerOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<ProductsFilterState>({
    searchQuery: '',
    groupId: '',
    productType: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch products with pagination ───── */
const fetchProducts = async (page: number = 1, pageSize: number = 20) => {
  try {
    setLoad(true);
    // ⭐ هنا التغيير الوحيد - نجيب Materials بس
    const data = await apiSrv.getByType(2, page, pageSize); // ProductType.Material = 2
    setProductsData(data);
    setCurrentPage(page);
  } catch (e: any) {  } finally {
    setLoad(false);
  }
};

  /* ───── search products ───── */
  const searchProducts = async (query: string, mode: 'name' | 'barcode') => {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    try {
      setSearching(true);
      
      if (mode === 'barcode') {
        const product = await apiSrv.getByBarcode(query);
        if (product) {
          setProductsData({
            totalCount: 1,
            pageCount: 1,
            pageNumber: 1,
            pageSize: 1,
            data: [product]
          });
        } else {
          setProductsData({
            totalCount: 0,
            pageCount: 0,
            pageNumber: 1,
            pageSize: 20,
            data: []
          });
        }
      } else {
        const data = await apiSrv.searchByName(query, 1, 50);
        setProductsData(data);
      }
      
      setSearchMode(mode);
      setCurrentPage(1);
    } catch (e: any) {    } finally {
      setSearching(false);
    }
  };

  /* ───── clear search ───── */
  const clearSearch = async () => {
    setSearchQuery('');
    setSearchMode(null);
    await fetchProducts(1);
  };

  /* ───── initial load ───── */
  React.useEffect(() => {
    (async () => {
      try { 
        const [groupsData, unitsData] = await Promise.all([
          groupsApi.getAll(),
          unitsApi.getAll()
        ]);
        setGroups(groupsData);
        setUnits(unitsData);
        await fetchProducts(1);
      }
      catch (e: any) {      }
    })();
  }, []);

  /* ───── handle page change ───── */
  const handlePageChange = async (_event: React.ChangeEvent<unknown>, page: number) => {
    if (searchMode === 'name' && searchQuery) {
      try {
        setSearching(true);
        const data = await apiSrv.searchByName(searchQuery, page, 50);
        setProductsData(data);
        setCurrentPage(page);
      } catch (e: any) {      } finally {
        setSearching(false);
      }
    } else if (!searchMode) {
      await fetchProducts(page);
    }
  };

  /* ───── search handlers ───── */
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query.trim()) {
      // تحديد نوع البحث بناءً على المحتوى
      const isBarcode = /^\d+$/.test(query.trim());
      searchProducts(query, isBarcode ? 'barcode' : 'name');
    } else {
      clearSearch();
    }
  };

  const handleBarcodeSearch = () => {
    if (searchQuery.trim()) {
      searchProducts(searchQuery, 'barcode');
    }
  };

  /* ───── mobile filter data ───── */
  const mobileFilteredData = React.useMemo(() => {
    let result = [...productsData.data];

    // تطبيق فلاتر الموبايل على البيانات المحملة
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.code.toString().includes(searchLower) ||
        product.group?.name.toLowerCase().includes(searchLower)
      );
    }

    if (mobileFilters.groupId) {
      result = result.filter(product => product.groupId === mobileFilters.groupId);
    }

    if (mobileFilters.productType) {
      result = result.filter(product => product.productType.toString() === mobileFilters.productType);
    }

    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(product => product.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [productsData.data, mobileFilters]);

  // اختيار البيانات المعروضة حسب نوع الجهاز
  const displayedData = isMobile ? mobileFilteredData : productsData.data;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.groupId) count++;
    if (mobileFilters.productType) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      // إعادة تحميل الصفحة الحالية
      if (searchMode) {
        await clearSearch();
      } else {
        await fetchProducts(currentPage);
      }
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      const updatedProduct = await apiSrv.update(data);
      
      // تحديث المنتج في القائمة الحالية
      setProductsData(prev => ({
        ...prev,
        data: prev.data.map(p => p.id === updatedProduct.id ? updatedProduct : p)
      }));
      
      // تحديث المنتج في الـ drawer إذا كان مفتوح
      if (selectedProduct && selectedProduct.id === data.ProductId) {
        setSelectedProduct(updatedProduct);
      }
      
      return updatedProduct;
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      } else {
        setDialog({ open: true, mode: 'add', current: undefined });
      }
    } catch (error) {
      throw error;
    }
  };

  const handleViewPrices = (product: Product) => {
    setSelectedProduct(product);
    setPricesDrawerOpen(true);
  };

  const handleEdit = (product: Product) => {
    setDialog({ open: true, mode: 'edit', current: product });
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={displayedData} loading={loading} title={t('products.title')}/>
      
      {/* شريط البحث المحسن - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <Box mb={3}>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" justifyContent="space-between">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: { xs: '100%', sm: 'auto' } }}>
              <TextField
                placeholder={t('products.searchPlaceholder')}
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <IconSearch size={20} />
                    </InputAdornment>
                  ),
                  endAdornment: searchQuery && (
                    <InputAdornment position="end">
                      <IconButton size="small" onClick={clearSearch}>
                        <IconX size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ width: { xs: '100%', sm: 300 } }}
                disabled={searching}
              />
              
              <IconButton 
                onClick={handleBarcodeSearch}
                color="primary"
                title={t('products.searchByBarcode')}
                disabled={!searchQuery.trim() || searching}
              >
                <IconBarcode size={20} />
              </IconButton>
            </Box>

            <ActionsBar
              onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
            />
          </Stack>

          {/* مؤشرات البحث */}
          {searchMode && (
            <Box mt={2}>
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  label={searchMode === 'barcode' 
                    ? `${t('products.searchByBarcode')}: ${searchQuery}`
                    : `${t('products.searchByName')}: ${searchQuery}`
                  }
                  onDelete={clearSearch}
                  color="primary"
                  variant="outlined"
                />
                <Typography variant="body2" color="text.secondary">
                  {t('products.searchResults', { count: productsData.totalCount })}
                </Typography>
              </Stack>
            </Box>
          )}
        </Box>
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('products.add')}
          </Button>
        )}
        </Box>
      )}

      {/* جدول المنتجات */}
      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('products.title')} ({isMobile ? displayedData.length : productsData.totalCount})
        </Typography>
        
        {loading || searching ? (
          <Box textAlign="center" py={4}>
            <Typography>{searching ? t('products.searching') : t('common.loading')}</Typography>
          </Box>
        ) : displayedData.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {searchMode || getActiveFiltersCount() > 0 ? t('products.noSearchResults') : t('products.noProducts')}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? displayedData.map(p => (
                  <ProductRow
                    key={p.id}
                    product={p}
                    onEdit={() => handleEdit(p)}
                    onViewPrices={() => handleViewPrices(p)}
                    isSelected={selectedProduct?.id === p.id}
                  />
                ))
              : (
                  <ProductTable
                    rows={displayedData}
                    onEdit={handleEdit}
                    onViewPrices={handleViewPrices}
                    selectedProductId={selectedProduct?.id}
                  />
                )}

            {/* Pagination - يظهر فقط في الديسكتوب */}
            {!isMobile && productsData.pageCount > 1 && (
              <Box display="flex" justifyContent="center" mt={3}>
                <Pagination
                  count={productsData.pageCount}
                  page={currentPage}
                  onChange={handlePageChange}
                  color="primary"
                  size={isDownSm ? "small" : "medium"}
                  disabled={searching}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileProductsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          groups={groups}
          totalResults={productsData.totalCount}
          filteredResults={displayedData.length}
        />
      )}

      {/* Form Dialog */}
<ProductForm
  open={dialog.open}
  mode={dialog.mode}
  initialValues={dialog.current}
  groups={groups}
  units={units}
  productType={2} // ⭐ Material
  onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
  onSubmit={handleSubmit}
/>

      {/* Prices Drawer */}
      <ProductPricesDrawer
        open={pricesDrawerOpen}
        product={selectedProduct}
        units={units}
        onClose={() => setPricesDrawerOpen(false)}
      /></Container>
  );
};

export default ProductsPage;


============================================================
FILE: src/Pages/purchase-orders/components/mobile/MobileProductSearch.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/mobile/MobileProductSearch.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  Box,
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip,
  IconButton,
  CircularProgress
} from '@mui/material';
import { IconSearch, IconX, IconBarcode } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (productPrice: ProductPrice) => void;
}

const MobileProductSearch: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<ProductPrice[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  useEffect(() => {
    if (!open) {
      setSearchQuery('');
      setSearchResults([]);
      setHasSearched(false);
    }
  }, [open]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) return;

    try {
      setLoading(true);
      setHasSearched(true);
      const result = await productsApi.searchProductPrices(searchQuery, 1, 50);
      setSearchResults(result.data);
    } catch (error) {
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSelect = (item: ProductPrice) => {
    onSelect(item);
    onClose();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <Dialog open={open} onClose={onClose} fullScreen>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('products.selectProduct')}
          <IconButton onClick={onClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        {/* شريط البحث */}
        <Box sx={{ mb: 2 }}>
          <TextField
            fullWidth
            placeholder={t('products.searchPlaceholder')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={handleKeyPress}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton size="small">
                    <IconBarcode size={20} />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            sx={{ mb: 1 }}
          />
          
          <Button
            variant="contained"
            fullWidth
            onClick={handleSearch}
            disabled={!searchQuery.trim() || loading}
            size="large"
          >
            {loading ? <CircularProgress size={20} /> : t('common.search')}
          </Button>
        </Box>

        {/* النتائج */}
        <Box>
          {loading ? (
            <Box textAlign="center" py={4}>
              <CircularProgress />
              <Typography sx={{ mt: 2 }}>{t('common.searching')}</Typography>
            </Box>
          ) : hasSearched && searchResults.length === 0 ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">
                {t('products.noSearchResults')}
              </Typography>
            </Box>
          ) : !hasSearched ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">
                {t('products.enterSearchTerm')}
              </Typography>
            </Box>
          ) : (
            <List>
              {searchResults.map((price) => (
                <ListItem key={price.id} disablePadding>
                  <ListItemButton
                    onClick={() => handleSelect(price)}
                    sx={{
                      border: 1,
                      borderColor: 'divider',
                      borderRadius: 1,
                      mb: 1,
                      p: 2
                    }}
                  >
                    <ListItemText
                      primary={
                        <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
                          {price.productName}
                        </Typography>
                      }
                      secondary={
                        <Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            {t('products.unit')}: {price.unitName}
                          </Typography>
                          
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                            <Chip
                              label={`${t('products.price')}: ${price.price.toFixed(2)}`}
                              color="primary"
                              size="small"
                            />
                            <Chip
                              label={`${t('products.unitFactor')}: ${price.unitFactor}`}
                              variant="outlined"
                              size="small"
                            />
                            {price.barcode && (
                              <Chip
                                label={`${t('products.barcode')}: ${price.barcode}`}
                                variant="outlined"
                                size="small"
                              />
                            )}
                          </Box>
                          
                          <Chip
                            label={price.isActive ? t('products.active') : t('products.inactive')}
                            color={price.isActive ? 'success' : 'default'}
                            size="small"
                          />
                        </Box>
                      }
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} fullWidth>
          {t('common.cancel')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default MobileProductSearch;


============================================================
FILE: src/Pages/purchase-orders/components/mobile/MobilePurchaseOrderForm.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/mobile/MobilePurchaseOrderForm.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Card,
  CardContent,
  IconButton,
  Divider,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Fab
} from '@mui/material';
import {
  IconPlus,
  IconTrash,
  IconArrowLeft,
} from '@tabler/icons-react';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import MobileProductSearch from './MobileProductSearch';
import MobileSearchableSelect from './MobileSearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

type FormValues = {
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseOrderDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: PurchaseOrder;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const MobilePurchaseOrderForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [expandedSection, setExpandedSection] = useState<string>('basic');

  const defaults: FormValues = {
    referenceDocNumber: `PO-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 0,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // حساب الإجماليات
  const recalculateAll = () => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)));
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)));
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)));
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)));

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)));
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)));
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)));
    setValue('total', parseFloat(total.toFixed(2)));
  };

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);
    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent]);

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      const convertedDetails = initialValues.details.map((d) => ({
        purchaseOrderDetailID: d.id || '',
        productId: d.productID,
        productPriceId: d.productPriceID || '',
        productName: d.unitName || 'منتج غير محدد',
        unitId: d.unitId,
        unitName: d.unitName,
        unitFactor: d.unitFactor,
        quantity: d.quantity,
        price: d.price,
        discountPercent: d.discountPercent,
        discountValue: d.discountValue,
        taxPercent: d.taxPercent,
        taxValue: d.taxValue,
        subTotal: d.subTotal,
        total: d.total
      }));

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset]);

  const addProductToForm = (productPrice: ProductPrice) => {
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 0,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    append(newItem);
    setProductSearchOpen(false);
    setExpandedSection('items');
  };

  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  const submit = async (data: FormValues) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setAlertMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setAlertSeverity('error');
      return;
    }

    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchaseOrders.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchaseOrders.price')} ${t('common.inLine')} ${i + 1}`)) return;
    }

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d) => {
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseOrderDetailID && d.purchaseOrderDetailID.trim() !== '') {
            detailData.id = d.purchaseOrderDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);

      if (data.status === 1 && mode === 'add') {
        reset(defaults);
        setExpandedSection('basic');
      } else {
        navigate('/purchases/purchase-orders');
      }
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  return (
    <Container maxWidth="sm" sx={{ py: 1, px: 1 }}>
      {/* Header مع الإجمالي */}
      <Card sx={{ mb: 2, position: 'sticky', top: 0, zIndex: 100 }}>
        <CardContent sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">
              {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
            </Typography>
            <IconButton onClick={() => navigate('/purchases/purchase-orders')} size="small">
              <IconArrowLeft />
            </IconButton>
          </Box>
          
          <Typography variant="h4" color="primary" sx={{ textAlign: 'center', fontWeight: 'bold' }}>
            {t('purchaseOrders.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
          
          <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
            {watchedStatus !== 3 && (
              <>
                <Button
                  variant="contained"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 1;
                    submit(data);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchaseOrders.savePending')}
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 3;
                    submit(data);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchaseOrders.submit')}
                </Button>
              </>
            )}
          </Stack>
        </CardContent>
      </Card>

      {/* المعلومات الأساسية */}
      <Accordion 
        expanded={expandedSection === 'basic'} 
        onChange={handleAccordionChange('basic')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">{t('purchaseOrders.basicInfo')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="referenceDocNumber"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.docNumber')}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="date1"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.date')}
                  type="date"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputLabelProps={{ shrink: true }}
                />
              )}
            />

            <Controller
              name="supplierId"
              control={control}
              rules={{ required: t('validation.supplierRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchaseOrders.supplier')}
                  value={field.value}
                  onChange={field.onChange}
                  options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                  placeholder={t('purchaseOrders.selectSupplier')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="warehouseId"
              control={control}
              rules={{ required: t('validation.warehouseRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchaseOrders.warehouse')}
                  value={field.value}
                  onChange={field.onChange}
                  options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                  placeholder={t('purchaseOrders.selectWarehouse')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الخصومات والضرائب */}
      <Accordion 
        expanded={expandedSection === 'discounts'} 
        onChange={handleAccordionChange('discounts')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">{t('purchaseOrders.discountsAndTaxes')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="discountPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchaseOrders.totalDiscount')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />

            <Controller
              name="taxPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchaseOrders.totalTax')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأصناف */}
      <Accordion 
        expanded={expandedSection === 'items'} 
        onChange={handleAccordionChange('items')}
        sx={{ mb: 1 }}
      >
<AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">
            {t('purchaseOrders.items')} ({fields.length})
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            {fields.length === 0 ? (
              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                {t('purchaseOrders.noItems')}
              </Typography>
            ) : (
              fields.map((field, index) => (
                <Card key={field.id} variant="outlined">
                  <CardContent sx={{ p: 2 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="subtitle2">
                        #{index + 1} - {watch(`details.${index}.productName`)}
                      </Typography>
                      {watchedStatus !== 3 && (
                        <IconButton onClick={() => remove(index)} size="small" color="error">
                          <IconTrash size={16} />
                        </IconButton>
                      )}
                    </Box>

                    <Grid container spacing={1}>
                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.quantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchaseOrders.quantity')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.price`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchaseOrders.price')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.discountPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchaseOrders.discount')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.taxPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchaseOrders.tax')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>
                    </Grid>

                    <Divider sx={{ my: 1 }} />
                    
                    <Typography variant="body2" sx={{ textAlign: 'right', fontWeight: 'bold' }}>
                      {t('purchaseOrders.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                    </Typography>
                  </CardContent>
                </Card>
              ))
            )}
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* زر إضافة منتج عائم */}
{watchedStatus !== 3 && (
  <Fab
    color="primary"
    onClick={() => setProductSearchOpen(true)}
    sx={{
      position: 'fixed',
      bottom: 16,
      left: 16, // تغيير من right إلى left
      zIndex: 1000
    }}
  >
    <IconPlus />
  </Fab>
)}

      {/* البحث عن المنتجات */}
      <MobileProductSearch
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={addProductToForm}
      />

      {/* التنبيهات */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default MobilePurchaseOrderForm;


============================================================
FILE: src/Pages/purchase-orders/components/mobile/MobilePurchaseOrdersFilter.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/mobile/MobilePurchaseOrdersFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PurchaseOrderFilterState {
  searchQuery: string;
  status: string;
  supplierId: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PurchaseOrderFilterState;
  onFiltersChange: (filters: PurchaseOrderFilterState) => void;
  suppliers: Array<{ id: string; name: string }>;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobilePurchaseOrdersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  suppliers,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PurchaseOrderFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('purchaseOrders.status.pending') },
    { value: '2', label: t('purchaseOrders.status.draft') },
    { value: '3', label: t('purchaseOrders.status.submitted') }
  ];

  const sortOptions = [
    { value: 'date1', label: t('purchaseOrders.table.date') },
    { value: 'referenceDocNumber', label: t('purchaseOrders.table.docNumber') },
    { value: 'total', label: t('purchaseOrders.table.total') },
    { value: 'status', label: t('purchaseOrders.table.status') }
  ];

  const handleLocalChange = (field: keyof PurchaseOrderFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PurchaseOrderFilterState = {
      searchQuery: '',
      status: '',
      supplierId: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'date1',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.supplierId) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('purchaseOrders.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('purchaseOrders.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('purchaseOrders.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('purchaseOrders.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('purchaseOrders.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('purchaseOrders.filter.filters')}</Typography>
            {(localFilters.status || localFilters.supplierId || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.supplierId, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('purchaseOrders.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.supplier')}</InputLabel>
              <Select
                value={localFilters.supplierId}
                label={t('purchaseOrders.table.supplier')}
                onChange={(e) => handleLocalChange('supplierId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {suppliers.map(supplier => (
                  <MenuItem key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('purchaseOrders.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('purchaseOrders.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('purchaseOrders.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('purchaseOrders.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('purchaseOrders.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('purchaseOrders.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchaseOrders.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('purchaseOrders.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('purchaseOrders.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('purchaseOrders.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('purchaseOrders.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('purchaseOrders.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePurchaseOrdersFilter;


============================================================
FILE: src/Pages/purchase-orders/components/mobile/MobileSearchableSelect.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/mobile/MobileSearchableSelect.tsx
import React, { useState } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Box,
  Typography,
  IconButton
} from '@mui/material';
import { IconX, IconSearch } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Option {
  id: string;
  name: string;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
}

const MobileSearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled
}) => {
  const { t } = useTranslation();
  const [open, setOpen] = useState(false);
  const [searchText, setSearchText] = useState('');

  const filteredOptions = options.filter(option =>
    option.name.toLowerCase().includes(searchText.toLowerCase())
  );

  const selectedOption = options.find(opt => opt.id === value);

  const handleSelect = (optionId: string) => {
    onChange(optionId);
    setOpen(false);
    setSearchText('');
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
  };

  return (
    <>
      <FormControl fullWidth error={error} disabled={disabled}>
        <InputLabel>{label}</InputLabel>
        <Select
          value={value}
          label={label}
          onClick={() => setOpen(true)}
          readOnly
        >
          <MenuItem value={value}>
            {selectedOption ? selectedOption.name : placeholder}
          </MenuItem>
        </Select>
      </FormControl>

      <Dialog open={open} onClose={handleClose} fullScreen>
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            {label}
            <IconButton onClick={handleClose}>
              <IconX size={20} />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          <TextField
            fullWidth
            placeholder={t('common.search')}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            InputProps={{
              startAdornment: <IconSearch size={20} style={{ marginRight: 8 }} />
            }}
            sx={{ mb: 2 }}
          />

          <List>
            {filteredOptions.length === 0 ? (
              <ListItem>
                <ListItemText
                  primary={
                    <Typography color="text.secondary" textAlign="center">
                      {t('common.noResults')}
                    </Typography>
                  }
                />
              </ListItem>
            ) : (
              filteredOptions.map((option) => (
                <ListItem key={option.id} disablePadding>
                  <ListItemButton
                    onClick={() => handleSelect(option.id)}
                    selected={option.id === value}
                    sx={{
                      border: 1,
                      borderColor: option.id === value ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      mb: 1,
                      backgroundColor: option.id === value ? 'action.selected' : 'transparent'
                    }}
                  >
                    <ListItemText
                      primary={option.name}
                      primaryTypographyProps={{
                        fontWeight: option.id === value ? 'bold' : 'normal'
                      }}
                    />
                  </ListItemButton>
                </ListItem>
              ))
            )}
          </List>
        </DialogContent>

        <DialogActions>
          <Button onClick={handleClose} fullWidth>
            {t('common.cancel')}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default MobileSearchableSelect;


============================================================
FILE: src/Pages/purchase-orders/components/ActionsBar.tsx
============================================================
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

type Props = {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
  searchPlaceholder?: string;
  addButtonText?: string;
};

const ActionsBar: React.FC<Props> = ({ 
  query, 
  onQueryChange, 
  onAdd, 
  searchPlaceholder,
  addButtonText 
}) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={searchPlaceholder || t('purchaseOrders.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 300 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {addButtonText || t('purchaseOrders.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/purchase-orders/components/BarcodeScanner.tsx
============================================================
import React, { useState, useRef, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  IconButton,
  Alert,
  CircularProgress
} from '@mui/material';
import { IconX, IconCamera, IconCameraOff, IconRefresh } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onScan: (barcode: string) => void;
}

const BarcodeScanner: React.FC<Props> = ({ open, onClose, onScan }) => {
  const { t } = useTranslation();
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState('');
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // تنظيف الكاميرا عند الإغلاق
  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  // إيقاف الكاميرا عند إغلاق المودال
  useEffect(() => {
    if (!open) {
      stopCamera();
      setError('');
      setHasPermission(null);
      setIsLoading(false);
    }
  }, [open]);

  const checkCameraPermission = async () => {
    try {
      // التحقق من دعم المتصفح للكاميرا
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('المتصفح لا يدعم الوصول للكاميرا');
      }

      // التحقق من الصلاحيات
      try {
        const permission = await navigator.permissions.query({ name: 'camera' as PermissionName });
        
        if (permission.state === 'denied') {
          throw new Error('تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا من إعدادات المتصفح');
        }
      } catch (permError) {
        // بعض المتصفحات لا تدعم permissions API
        console.log('Permissions API not supported, continuing...');
      }

      setHasPermission(true);
      return true;
    } catch (err: any) {
      console.error('Permission check error:', err);
      setError(err.message || 'خطأ في التحقق من صلاحيات الكاميرا');
      setHasPermission(false);
      return false;
    }
  };

  const startCamera = async () => {
    try {
      setError('');
      setIsLoading(true);
      
      // التحقق من الصلاحيات أولاً
      const hasAccess = await checkCameraPermission();
      if (!hasAccess) {
        setIsLoading(false);
        return;
      }

      console.log('Starting camera...');

      // محاولة الحصول على الكاميرا الخلفية أولاً
      let constraints = {
        video: { 
          facingMode: 'environment', // الكاميرا الخلفية
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };

      let stream: MediaStream;
      
      try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);
      } catch (err) {
        console.log('Back camera failed, trying front camera:', err);
        // إذا فشلت الكاميرا الخلفية، جرب الأمامية
        constraints = {
          video: { 
            facingMode: 'user', // الكاميرا الأمامية
            width: { ideal: 1280 },
            height: { ideal: 720 }
          }
        };
        
        try {
          stream = await navigator.mediaDevices.getUserMedia(constraints);
        } catch (frontErr) {
          console.log('Front camera failed, trying any camera:', frontErr);
          // إذا فشلت الكاميرا الأمامية، جرب أي كاميرا متاحة
          stream = await navigator.mediaDevices.getUserMedia({ video: true });
        }
      }
      
      console.log('Camera stream obtained:', stream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        
        // انتظار تحميل الفيديو
        videoRef.current.onloadedmetadata = () => {
          console.log('Video metadata loaded');
          if (videoRef.current) {
            videoRef.current.play()
              .then(() => {
                console.log('Video playing successfully');
                setIsScanning(true);
                setIsLoading(false);
                startBarcodeDetection();
              })
              .catch((playError) => {
                console.error('Video play error:', playError);
                setError('خطأ في تشغيل الفيديو');
                setIsLoading(false);
              });
          }
        };

        // معالجة أخطاء الفيديو
        videoRef.current.onerror = (videoError) => {
          console.error('Video error:', videoError);
          setError('خطأ في عرض الفيديو');
          setIsLoading(false);
        };
      }
    } catch (err: any) {
      console.error('Camera error:', err);
      let errorMessage = 'خطأ في الوصول للكاميرا';
      
      if (err.name === 'NotAllowedError') {
        errorMessage = 'تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا وإعادة المحاولة';
      } else if (err.name === 'NotFoundError') {
        errorMessage = 'لم يتم العثور على كاميرا متاحة';
      } else if (err.name === 'NotReadableError') {
        errorMessage = 'الكاميرا مستخدمة من تطبيق آخر';
      } else if (err.name === 'OverconstrainedError') {
        errorMessage = 'إعدادات الكاميرا غير مدعومة';
      } else if (err.name === 'AbortError') {
        errorMessage = 'تم إلغاء الوصول للكاميرا';
      } else if (err.name === 'SecurityError') {
        errorMessage = 'خطأ أمني في الوصول للكاميرا';
      }
      
      setError(errorMessage);
      setHasPermission(false);
      setIsLoading(false);
    }
  };

  const stopCamera = () => {
    console.log('Stopping camera...');
    
    // إيقاف البحث عن الباركود
    if (scanIntervalRef.current) {
      clearInterval(scanIntervalRef.current);
      scanIntervalRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        console.log('Stopping track:', track.kind);
        track.stop();
      });
      streamRef.current = null;
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    
    setIsScanning(false);
  };

  // محاكاة البحث عن الباركود (يمكن استبدالها بمكتبة حقيقية)
  const startBarcodeDetection = () => {
    // هذا مثال بسيط - في التطبيق الحقيقي يجب استخدام مكتبة مثل QuaggaJS أو ZXing
    scanIntervalRef.current = setInterval(() => {
      // محاكاة اكتشاف الباركود
      if (Math.random() > 0.98) { // احتمال 2% لاكتشاف باركود وهمي
        const mockBarcode = generateMockBarcode();
        handleBarcodeDetected(mockBarcode);
      }
    }, 100);
  };

  const generateMockBarcode = () => {
    // توليد باركود وهمي للاختبار
    const barcodes = [
      '1234567890123',
      '9876543210987',
      '5555666677778',
      '1111222233334',
      '9999888877776'
    ];
    return barcodes[Math.floor(Math.random() * barcodes.length)];
  };

  const handleBarcodeDetected = (barcode: string) => {
    console.log('Barcode detected:', barcode);
    onScan(barcode);
    handleClose();
  };

  const handleClose = () => {
    stopCamera();
    onClose();
  };

  const simulateScan = () => {
    const mockBarcode = '1234567890123';
    handleBarcodeDetected(mockBarcode);
  };

  const retryCamera = () => {
    setError('');
    setHasPermission(null);
    startCamera();
  };

  // قائمة الكاميرات المتاحة (للتشخيص)
  const listCameras = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const cameras = devices.filter(device => device.kind === 'videoinput');
      console.log('Available cameras:', cameras);
      return cameras;
    } catch (err) {
      console.error('Error listing cameras:', err);
      return [];
    }
  };

  // تشخيص المشكلة
  const diagnoseCamera = async () => {
    console.log('=== Camera Diagnosis ===');
    console.log('Navigator.mediaDevices:', !!navigator.mediaDevices);
    console.log('getUserMedia support:', !!navigator.mediaDevices?.getUserMedia);
    console.log('Is HTTPS:', window.location.protocol === 'https:');
    console.log('User agent:', navigator.userAgent);
    
    const cameras = await listCameras();
    console.log('Number of cameras found:', cameras.length);
    
    if (cameras.length === 0) {
      setError('لم يتم العثور على أي كاميرا متاحة');
    }
  };

  // تشغيل التشخيص عند فتح المودال
  useEffect(() => {
    if (open) {
      diagnoseCamera();
    }
  }, [open]);

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('barcode.scanTitle') || 'مسح الباركود'}
          <IconButton onClick={handleClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box textAlign="center">
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
              <Box mt={1}>
                <Typography variant="caption" display="block">
                  تأكد من:
                </Typography>
                <Typography variant="caption" component="ul" sx={{ textAlign: 'left', mt: 1 }}>
                  <li>السماح بالوصول للكاميرا في المتصفح</li>
                  <li>عدم استخدام الكاميرا من تطبيق آخر</li>
                  <li>وجود كاميرا متصلة بالجهاز</li>
                  <li>استخدام HTTPS (مطلوب للكاميرا)</li>
                </Typography>
              </Box>
            </Alert>
          )}

          {isLoading && (
            <Box py={2}>
              <CircularProgress />
              <Typography variant="body2" sx={{ mt: 1 }}>
                جاري تشغيل الكاميرا...
              </Typography>
            </Box>
          )}

          {!isScanning && !isLoading ? (
            <Box py={4}>
              <IconCamera size={64} color="gray" />
              <Typography variant="h6" sx={{ mt: 2, mb: 3 }}>
                {hasPermission === false 
                  ? 'يرجى السماح بالوصول للكاميرا' 
                  : (t('barcode.clickToStart') || 'انقر لبدء المسح')
                }
              </Typography>
              <Button
                variant="contained"
                onClick={startCamera}
                startIcon={<IconCamera size={20} />}
                disabled={hasPermission === false}
                sx={{ mb: 2 }}
              >
                {t('barcode.startCamera') || 'تشغيل الكاميرا'}
              </Button>
              
              {error && (
                <Box mt={2}>
                  <Button
                    variant="outlined"
                    onClick={retryCamera}
                    startIcon={<IconRefresh size={20} />}
                    size="small"
                    sx={{ mr: 1 }}
                  >
                    إعادة المحاولة
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={() => window.location.reload()}
                    size="small"
                  >
                    إعادة تحميل الصفحة
                  </Button>
                </Box>
              )}
            </Box>
          ) : isScanning ? (
            <Box>
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                style={{
                  width: '100%',
                  maxHeight: '300px',
                  border: '2px solid #ddd',
                  borderRadius: '8px',
                  backgroundColor: '#000'
                }}
              />
              <Typography variant="body2" sx={{ mt: 2, mb: 2 }}>
                {t('barcode.pointCamera') || 'وجه الكاميرا نحو الباركود'}
              </Typography>
              
              <Box display="flex" justifyContent="center" gap={1}>
                <Button
                  variant="outlined"
                  onClick={stopCamera}
                  startIcon={<IconCameraOff size={20} />}
                  size="small"
                >
                  إيقاف الكاميرا
                </Button>
                <Button
                  variant="outlined"
                  onClick={simulateScan}
                  size="small"
                >
                  محاكاة المسح (للاختبار)
                </Button>
              </Box>
            </Box>
          ) : null}

          {!isScanning && !isLoading && (
            <Button
              variant="outlined"
              onClick={simulateScan}
              sx={{ mt: 2 }}
            >
              {t('barcode.simulateScan') || 'محاكاة المسح'} (للاختبار)
            </Button>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose}>
          {t('common.cancel') || 'إلغاء'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BarcodeScanner;


============================================================
FILE: src/Pages/purchase-orders/components/PageHeader.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/PageHeader.tsx
import React from 'react';
import PageHeader from '../../components/PageHeader';

interface Props {
  exportData?: any[];
  loading?: boolean;
}

const PurchaseOrdersPageHeader: React.FC<Props> = ({ exportData = [], loading = false }) => {
  const exportColumns = [
    { field: 'referenceDocNumber', headerName: 'رقم المستند', type: 'string' as const },
    { field: 'code', headerName: 'الكود', type: 'number' as const },
    { field: 'supplier.name', headerName: 'المورد', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'warehouse.name', headerName: 'المخزن', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'date1', headerName: 'التاريخ', type: 'date' as const },
    { field: 'total', headerName: 'الإجمالي', type: 'number' as const },
    { field: 'status', headerName: 'الحالة', type: 'string' as const, format: (value: number) => value === 1 ? 'معلق' : value === 3 ? 'مرسل' : 'غير محدد' },
  ];

  return (
    <PageHeader
      titleKey="purchaseOrders.title"
      subtitleKey="purchaseOrders.subtitle"
      exportData={exportData}
      exportColumns={exportColumns}
      exportFileName="purchase-orders"
      exportLoading={loading}
    />
  );
};

export default PurchaseOrdersPageHeader;


============================================================
FILE: src/Pages/purchase-orders/components/ProductPriceSearchDialog.tsx
============================================================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  Typography,
  CircularProgress,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconArrowUp, IconArrowDown } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import BarcodeScanner from './BarcodeScanner';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (productPrice: ProductPrice) => void;
}

// Debounce hook to avoid querying on every keystroke
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
};

const ProductPriceSearchDialog: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const searchInputRef = useRef<HTMLInputElement>(null);
  const listRef = useRef<HTMLDivElement>(null);

  const [searchQuery, setSearchQuery] = useState('');
  const debouncedSearchQuery = useDebounce(searchQuery, 400);

  const [allPrices, setAllPrices] = useState<ProductPrice[]>([]);
  const [displayItems, setDisplayItems] = useState<ProductPrice[]>([]);
  const [loading, setLoading] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [isSearchMode, setIsSearchMode] = useState(false);

  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Focus on the search field when dialog opens
  useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        searchInputRef.current?.focus();
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [open]);

  // Reset state when dialog closes
  useEffect(() => {
    if (!open) {
      setSearchQuery('');
      setAllPrices([]);
      setDisplayItems([]);
      setCurrentPage(1);
      setHasMore(true);
      setIsSearchMode(false);
      setSelectedIndex(0);
    }
  }, [open]);

  // Initial load of products
  useEffect(() => {
    if (open && !isSearchMode && allPrices.length === 0) {
      loadInitialProducts();
    }
  }, [open, isSearchMode, allPrices.length]);

  // Debounced search logic
  useEffect(() => {
    if (debouncedSearchQuery.trim()) {
      handleDebouncedSearch(debouncedSearchQuery);
    } else {
      setIsSearchMode(false);
      setDisplayItems(allPrices);
      setSelectedIndex(0);
    }
  }, [debouncedSearchQuery, allPrices]);

  const loadInitialProducts = async () => {
    try {
      setLoading(true);
      const result = await productsApi.searchProductPrices('', 1, 20);
      setAllPrices(result.data);
      setDisplayItems(result.data);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(1);
      setSelectedIndex(0);
    } catch (err) {
      } finally {
      setLoading(false);
    }
  };

  const loadMoreProducts = useCallback(async () => {
    if (loadingMore || !hasMore || isSearchMode) return;
    try {
      setLoadingMore(true);
      const result = await productsApi.searchProductPrices('', currentPage + 1, 20);
      setAllPrices(prev => [...prev, ...result.data]);
      setDisplayItems(prev => [...prev, ...result.data]);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(result.pageNumber);
    } catch (err) {
      } finally {
      setLoadingMore(false);
    }
  }, [currentPage, hasMore, isSearchMode, loadingMore]);

  const handleDebouncedSearch = async (q: string) => {
    try {
      setLoading(true);
      setIsSearchMode(true);
      const result = await productsApi.searchProductPrices(q, 1, 50);
      setDisplayItems(result.data);
      setSelectedIndex(0);
    } catch (err) {
      setDisplayItems([]);
    } finally {
      setLoading(false);
    }
  };

  // دالة محسنة للـ scroll - الحل الأساسي للمشكلة
  const scrollToItem = useCallback((index: number) => {
    if (!listRef.current) return;
    
    const listElement = listRef.current;
    const itemElement = listElement.children[0]?.children[index] as HTMLElement; // الوصول للعنصر الصحيح داخل الـ List
    
    if (itemElement) {
      // استخدام scrollIntoView مع خيارات محددة
      itemElement.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest', // هذا هو المهم - يمنع القفز للأعلى أو الأسفل
        inline: 'nearest'
      });
    }
  }, []);

  // Arrow key handling on the search input, without ever losing focus
  const handleSearchKeyDown = (e: React.KeyboardEvent) => {
    if (displayItems.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.min(prev + 1, displayItems.length - 1);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.max(prev - 1, 0);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (displayItems[selectedIndex]) {
          handleSelect(displayItems[selectedIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setSelectedIndex(0);
  };

  // Ensure selectedIndex is reset if items change
  useEffect(() => {
    if (displayItems.length > 0 && selectedIndex >= displayItems.length) {
      setSelectedIndex(0);
    }
  }, [displayItems.length, selectedIndex]);

  // useEffect لمراقبة تغيير selectedIndex
  useEffect(() => {
    if (selectedIndex >= 0 && displayItems.length > 0) {
      scrollToItem(selectedIndex);
    }
  }, [selectedIndex, scrollToItem, displayItems.length]);

  const handleSelect = (item: ProductPrice) => {
    if (!item.productId) {
      return;
    }
    onSelect(item);
    onClose();
  };

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    if (scrollHeight - scrollTop - clientHeight < 100) {
      loadMoreProducts();
    }
  };

  const handleScanResult = (barcode: string) => {
    setSearchQuery(barcode);
    setScannerOpen(false);
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            {t('products.selectPriceTitle')}
            <IconButton onClick={onClose}>
              <IconX size={20} />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ height: '70vh', display: 'flex', flexDirection: 'column' }}>
          {/* Search field */}
          <Box mb={1}>
            <TextField
              inputRef={searchInputRef}
              fullWidth
              placeholder={t('products.searchPricesPlaceholder')}
              value={searchQuery}
              onChange={handleInputChange}
              onKeyDown={handleSearchKeyDown}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <Button
                      size="small"
                      variant="outlined"
                      onClick={() => setScannerOpen(true)}
                      startIcon={<IconBarcode size={16} />}
                    >
                      {t('barcode.scan')}
                    </Button>
                  </InputAdornment>
                )
              }}
              autoFocus
            />
          </Box>

          {/* Results info */}
          <Box mb={1}>
            <Typography variant="body2" color="text.secondary">
              {t('products.searchResults')}: {displayItems.length}
              {displayItems.length > 0 && (
                <Typography component="span" sx={{ ml: 2, color: 'primary.main' }}>
                  ({selectedIndex + 1} / {displayItems.length} {t('products.selected')})
                </Typography>
              )}
              {loading && (
                <Typography component="span" sx={{ ml: 2, color: 'info.main' }}>
                  - {t('common.searching')}...
                </Typography>
              )}
            </Typography>
          </Box>

          {/* Results list */}
          <Box
            ref={listRef}
            sx={{
              flex: 1,
              overflow: 'auto',
              border: 1,
              borderColor: 'divider',
              borderRadius: 1,
              // إضافة scroll behavior محسن
              scrollBehavior: 'smooth'
            }}
            onScroll={handleScroll}
          >
            {loading && displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <CircularProgress />
                <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
              </Box>
            ) : displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <Typography color="text.secondary">
                  {searchQuery
                    ? t('products.noSearchResults')
                    : t('products.startTypingPrices')}
                </Typography>
              </Box>
            ) : (
              <>
                <List dense sx={{ p: 0 }}>
                  {displayItems.map((price, index) => (
                    <ListItem key={`${price.id}-${index}`} disablePadding>
                      <ListItemButton
                        onClick={() => handleSelect(price)}
                        selected={index === selectedIndex}
                        onMouseEnter={() => setSelectedIndex(index)} // تحديث الاختيار عند hover
                        sx={{
                          border: index === selectedIndex ? 2 : 1,
                          borderColor:
                            index === selectedIndex ? 'primary.main' : 'divider',
                          borderRadius: 1,
                          mb: 0.5,
                          mx: 1,
                          backgroundColor:
                            index === selectedIndex
                              ? 'action.selected'
                              : 'transparent',
                          '&:hover': {
                            backgroundColor: 'action.hover',
                            borderColor: 'primary.main'
                          },
                          py: 0.5,
                          // إضافة ارتفاع ثابت للعناصر لتحسين الـ scroll
                          minHeight: 80
                        }}
                      >
                        <ListItemText
                          primary={
                            <Box>
                              <Typography
                                variant="subtitle2"
                                color="primary"
                                sx={{ mb: 0.5, fontSize: '0.9rem' }}
                              >
                                {price.productName} – {price.unitName}
                              </Typography>
                              <Box display="flex" gap={2} flexWrap="wrap" alignItems="center">
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.barcode')}: {price.barcode || '-'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.unitFactor')}: {price.unitFactor}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.cost')}:{' '}
                                  {price.cost?.toFixed(2) || '0.00'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  color="success.main"
                                  sx={{ fontSize: '0.75rem', fontWeight: 'bold' }}
                                >
                                  {t('products.salePrice')}: {price.price.toFixed(2)}
                                </Typography>
                                <Chip
                                  label={
                                    price.isActive
                                      ? t('products.active')
                                      : t('products.inactive')
                                  }
                                  color={price.isActive ? 'success' : 'default'}
                                  size="small"
                                  sx={{ fontSize: '0.65rem', height: '18px' }}
                                />
                              </Box>
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>

                {/* Loading more indicator */}
                {loadingMore && (
                  <Box textAlign="center" py={1}>
                    <CircularProgress size={20} />
                    <Typography variant="caption" sx={{ mt: 1, display: 'block' }}>
                      {t('products.loadingMore')}
                    </Typography>
                  </Box>
                )}

                {/* All results loaded */}
                {!hasMore && !isSearchMode && displayItems.length > 0 && (
                  <Box textAlign="center" py={1}>
                    <Typography variant="caption" color="text.secondary">
                      {t('products.allResultsLoaded')}
                    </Typography>
                  </Box>
                )}
              </>
            )}
          </Box>

          {/* Navigation hints */}
          {displayItems.length > 0 && (
            <Box mt={1} sx={{ backgroundColor: 'background.default', p: 0.5, borderRadius: 1 }}>
              <Typography variant="caption" color="text.secondary">
                <IconArrowUp size={14} style={{ verticalAlign: 'middle' }} /> /{' '}
                <IconArrowDown size={14} style={{ verticalAlign: 'middle' }} />{' '}
                {t('products.navigateWithArrows')} | {t('products.selectWithEnter')} |{' '}
                Esc {t('common.close')}
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>{t('common.cancel')}</Button>
        </DialogActions>
      </Dialog>

      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleScanResult}
      />
    </>
  );
};

export default ProductPriceSearchDialog;


============================================================
FILE: src/Pages/purchase-orders/components/PurchaseOrderForm.tsx
============================================================
// File: src/pages/purchases/purchase-orders/components/PurchaseOrderForm.tsx
import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ClickAwayListener,
  Alert,
  Snackbar
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconHome,
  IconSearch,
  IconBarcode
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import ProductPriceSearchDialog from './ProductPriceSearchDialog';
import BarcodeScanner from './BarcodeScanner';
import SearchableSelect from './SearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

type FormValues = {
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseOrderDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: PurchaseOrder;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const PurchaseOrderForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [lastAddedIndex, setLastAddedIndex] = useState<number | null>(null);

  // Quick-search states
  const [quickSearchQuery, setQuickSearchQuery] = useState('');
  const [quickSearchResults, setQuickSearchResults] = useState<ProductPrice[]>([]);
  const [quickSearchOpen, setQuickSearchOpen] = useState(false);
  const [, setQuickSearchLoading] = useState(false);
  const [quickSearchSelectedIndex, setQuickSearchSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Alert states
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  // Ref for quick search input
  const quickSearchInputRef = useRef<HTMLInputElement>(null);
  const quickSearchRef = useRef<HTMLDivElement>(null);
  const debouncedQuickSearch = useDebounce(quickSearchQuery, 300);

  // Default values
  const defaults: FormValues = {
    referenceDocNumber: `PO-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 0,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // دالة للعودة للـ Quick Search
  const focusQuickSearch = useCallback(() => {
    setTimeout(() => {
      if (quickSearchInputRef.current) {
        const inputElement = quickSearchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select();
        }
      }
    }, 200);
  }, []);

  const handleFieldKeyDown = useCallback((e: React.KeyboardEvent, nextFieldName?: string) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (nextFieldName) {
        setTimeout(() => {
          const nextInput = document.querySelector(`input[name="${nextFieldName}"]`) as HTMLInputElement;
          if (nextInput) {
            nextInput.focus();
            nextInput.select();
          }
        }, 50);
      } else {
        focusQuickSearch();
      }
    }
  }, [focusQuickSearch]);

  // دالة محسنة لإعادة الحساب
  const recalculateAll = useCallback(() => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)), { shouldValidate: false });

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)), { shouldValidate: false });
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)), { shouldValidate: false });
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)), { shouldValidate: false });
    setValue('total', parseFloat(total.toFixed(2)), { shouldValidate: false });
  }, [setValue, watch]);

  // Upon initial render in "add" mode, focus quick-search
  useLayoutEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current) {
      quickSearchInputRef.current.focus();
    }
  }, [mode]);

  // Fallback if ref isn't attached yet
  useEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current === null) {
      const timer = setTimeout(() => {
        if (quickSearchInputRef.current) {
          quickSearchInputRef.current.focus();
        }
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [mode]);

  // After adding a product, focus its quantity input
  useEffect(() => {
    if (lastAddedIndex !== null) {
      const timer = setTimeout(() => {
        const quantityInput = document.querySelector(
          `input[name="details.${lastAddedIndex}.quantity"]`
        ) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
        setLastAddedIndex(null);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [lastAddedIndex]);

  // Recalculate totals whenever details, discountPercent, or taxPercent change
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent, recalculateAll]);

  useEffect(() => {
    if (mode === 'add') {
      setTimeout(() => {
        focusQuickSearch();
      }, 500);
    }
  }, [mode, focusQuickSearch]);

  // Populate form in "edit" mode, or reset in "add" mode
  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      console.log('Initial values from API:', initialValues);
      console.log('Details from API:', initialValues.details);
      
      const convertedDetails = initialValues.details.map((d, index) => {
        console.log(`Converting detail ${index}:`, d);
        const converted = {
          purchaseOrderDetailID: d.id || '',
          productId: d.productID,
          productPriceId: d.productPriceID || '',
          productName: d.unitName || 'منتج غير محدد',
          unitId: d.unitId,
          unitName: d.unitName,
          unitFactor: d.unitFactor,
          quantity: d.quantity,
          price: d.price,
          discountPercent: d.discountPercent,
          discountValue: d.discountValue,
          taxPercent: d.taxPercent,
          taxValue: d.taxValue,
          subTotal: d.subTotal,
          total: d.total
        };
        console.log(`Converted detail ${index}:`, converted);
        return converted;
      });

      console.log('All converted details:', convertedDetails);

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset, t]);

  // Handle debounced quick-search
  useEffect(() => {
    if (debouncedQuickSearch.trim()) {
      handleQuickSearch(debouncedQuickSearch);
    } else {
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    }
  }, [debouncedQuickSearch]);

  const handleQuickSearch = async (query: string) => {
    try {
      setQuickSearchLoading(true);
      const result = await productsApi.searchProductPrices(query, 1, 10);
      setQuickSearchResults(result.data);
      setQuickSearchOpen(result.data.length > 0);
      setQuickSearchSelectedIndex(0);
    } catch (error) {
      console.error('Quick search error:', error);
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    } finally {
      setQuickSearchLoading(false);
    }
  };

  // Handle barcode scan result
  const handleBarcodeScanned = async (barcode: string) => {
    try {
      const result = await productsApi.searchProductPrices(barcode, 1, 1);
      if (result.data.length > 0) {
        const productPrice = result.data[0];
        addProductToForm(productPrice);
        setAlertMessage(`${t('products.productAdded')}: ${productPrice.productName}`);
        setAlertSeverity('success');
      } else {
        setAlertMessage(t('products.noProductFoundWithBarcode'));
        setAlertSeverity('warning');
      }
    } catch (error) {
      setAlertMessage(t('products.searchError'));
      setAlertSeverity('error');
    }
    setScannerOpen(false);
  };

  // Add a product from quick-search or barcode into the form's details
  const addProductToForm = (productPrice: ProductPrice) => {
    console.log('Adding product to form:', productPrice);
    
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 0,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    console.log('New item being added:', newItem);

    const currentDetails = watch('details') || [];
    setValue('details', [newItem, ...currentDetails]);
    setLastAddedIndex(0);
    setQuickSearchQuery('');
    setQuickSearchOpen(false);

    setTimeout(() => {
      if (quickSearchInputRef.current) {
        quickSearchInputRef.current.focus();
      }
    }, 100);
  };

  // Navigate quick-search results with arrows + Enter/Escape
  const handleQuickSearchKeyDown = (e: React.KeyboardEvent) => {
    if (quickSearchResults.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.min(prev + 1, quickSearchResults.length - 1);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (quickSearchResults[quickSearchSelectedIndex]) {
          addProductToForm(quickSearchResults[quickSearchSelectedIndex]);
        }
        break;
      case 'Escape':
        setQuickSearchOpen(false);
        setQuickSearchQuery('');
        break;
    }
  };

  // Ensure the selected quick-search item is visible
  const scrollToQuickSearchItem = (index: number) => {
    const listElement = quickSearchRef.current;
    if (listElement) {
      const itemElement = listElement.children[index] as HTMLElement;
      if (itemElement) {
        const listRect = listElement.getBoundingClientRect();
        const itemRect = itemElement.getBoundingClientRect();
        const itemHeight = itemRect.height;
        const listHeight = listRect.height;
        const itemTop = itemElement.offsetTop;

        if (itemRect.bottom > listRect.bottom) {
          const newScrollTop = itemTop - listHeight + itemHeight + 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        } else if (itemRect.top < listRect.top) {
          const newScrollTop = itemTop - 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        }
      }
    }
  };

  const addDetailWithSearch = () => {
    setProductSearchOpen(true);
  };

  const handleProductPriceSelect = (productPrice: ProductPrice) => {
    addProductToForm(productPrice);
  };

  // Validate numeric fields
  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  // On submit, build payload (with status from form) and call onSubmit
  const submit = async (data: FormValues) => {
    if (isSubmitting) return;

    // التحقق من المورد والمخزن
    if (!data.supplierId) {
      setAlertMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setAlertSeverity('error');
      return;
    }

    // التحقق من صحة البيانات
    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchaseOrders.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchaseOrders.price')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.discountPercent, `${t('purchaseOrders.discount')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.taxPercent, `${t('purchaseOrders.tax')} ${t('common.inLine')} ${i + 1}`)) return;
    }
    if (!validateNumber(data.discountPercent, t('purchaseOrders.totalDiscount'))) return;
    if (!validateNumber(data.taxPercent, t('purchaseOrders.totalTax'))) return;

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d, index) => {
          // التحقق من البيانات المطلوبة
          if (!d.productId) {
            console.error(`Detail ${index} missing productId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف المنتج`);
          }
          if (!d.productPriceId) {
            console.error(`Detail ${index} missing productPriceId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف السعر`);
          }
          
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          // إضافة ID للسطور الموجودة في التحديث
          if (mode === 'edit' && d.purchaseOrderDetailID && d.purchaseOrderDetailID.trim() !== '') {
            detailData.id = d.purchaseOrderDetailID;
            console.log(`Detail ${index} has existing ID:`, d.purchaseOrderDetailID);
          } else {
            console.log(`Detail ${index} is new - no ID`);
          }

          console.log(`Detail ${index} final data:`, detailData);
          return detailData;
        })
      };

      console.log('Submit data before sending:', JSON.stringify(submitData, null, 2));

      await onSubmit(submitData);

      if (data.status === 1 && mode === 'add') {
        reset(defaults);
        setTimeout(() => {
          if (quickSearchInputRef.current) {
            quickSearchInputRef.current.focus();
          }
        }, 200);
      } else {
        navigate('/purchases/purchase-orders');
      }
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Mobile-only detail card
  const MobileDetailCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle2">#{index + 1}</Typography>
          {watchedStatus !== 3 && (
            <IconButton onClick={onRemove} size="small" color="error">
              <IconTrash size={16} />
            </IconButton>
          )}
        </Box>
        <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.quantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.quantity')}
                  type="number"
                  size="small"
                  name={`details.${index}.quantity`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.price`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.price`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.price')}
                  type="number"
                  size="small"
                  name={`details.${index}.price`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.discountPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.discountPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.discount') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.discountPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.taxPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.taxPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchaseOrders.tax') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.taxPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>
        </Grid>

        <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
          {t('purchaseOrders.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
        </Typography>
      </CardContent>
    </Card>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Breadcrumbs + Header + Total */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchase-orders');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchaseOrders.list')}
          </Link>
          <Typography color="text.primary">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchaseOrders.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchase-orders')}
            disabled={isSubmitting}
          >
            {t('common.back')}
          </Button>

          {/* "Save (Pending)" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={handleSubmit((data) => {
                data.status = 1;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.savePending')}
            </Button>
          )}

          {/* "Submit" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              color="secondary"
              startIcon={<IconDeviceFloppy />}
              onClick={handleSubmit((data) => {
                data.status = 3;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.submit')}
            </Button>
          )}
        </Stack>
      </Box>

      {/* Row 1: Doc#, Date, Supplier, Warehouse */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <Controller
            name="referenceDocNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.docNumber')}
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="date1"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.date')}
                type="date"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                InputLabelProps={{ shrink: true }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="supplierId"
            control={control}
            rules={{ required: t('validation.supplierRequired') || 'يجب اختيار المورد' }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchaseOrders.supplier')}
                value={field.value}
                onChange={field.onChange}
                options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                placeholder={t('purchaseOrders.selectSupplier')}
                error={!!fieldState.error}
                size="small"
                autoFocusSearch={true}
                disabled={watchedStatus === 3}
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="warehouseId"
            control={control}
            rules={{ required: t('validation.warehouseRequired') || 'يجب اختيار المخزن' }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchaseOrders.warehouse')}
                value={field.value}
                onChange={field.onChange}
                options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                placeholder={t('purchaseOrders.selectWarehouse')}
                error={!!fieldState.error}
                size="small"
                autoFocusSearch={true}
                disabled={watchedStatus === 3}
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Row 2: Total Discount & Total Tax */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={6}>
          <Controller
            name="discountPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalDiscount')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <Controller
            name="taxPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalTax')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Hidden "status" field */}
      <Controller
        name="status"
        control={control}
        render={({ field }) => (
          <input type="hidden" {...field} />
        )}
      />

      {/* Quick summary row */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.subTotal')}: {watch('subTotal')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.discountValue')}: {watch('discountValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.taxValue')}: {watch('taxValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchaseOrders.total')}: {watch('total')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{
          display: 'flex',
          gap: 2,
          mb: 2,
          p: 2,
          backgroundColor: 'grey.50',
          borderRadius: 1,
          boxShadow: 1,
          alignItems: 'center'
        }}>
          <Typography variant="h6" sx={{ minWidth: 'fit-content' }}>
            {t('purchaseOrders.items')}
          </Typography>

          <Box sx={{ position: 'relative', flex: 1 }}>
            <ClickAwayListener onClickAway={() => setQuickSearchOpen(false)}>
              <Box>
                <TextField
                  ref={quickSearchInputRef}
                  autoFocus
                  placeholder={t('products.quickSearch')}
                  value={quickSearchQuery}
                  onChange={(e) => setQuickSearchQuery(e.target.value)}
                  onKeyDown={handleQuickSearchKeyDown}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    ),
                  }}
                />

                {/* Quick Search Results Dropdown */}
                {quickSearchOpen && quickSearchResults.length > 0 && (
                  <Paper
                    ref={quickSearchRef}
                    sx={{
                      position: 'absolute',
                      top: '100%',
                      left: 0,
                      right: 0,
                      zIndex: 1000,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    <List dense>
                      {quickSearchResults.map((price, index) => (
                        <ListItem key={price.id} disablePadding>
                          <ListItemButton
                            onClick={() => addProductToForm(price)}
                            selected={index === quickSearchSelectedIndex}
                            disabled={watchedStatus === 3}
                            sx={{
                              py: 0.25,
                              backgroundColor:
                                index === quickSearchSelectedIndex ? 'action.selected' : 'transparent'
                            }}
                          >
                            <ListItemText
                              primary={`${price.productName} — ${price.unitName}`}
                              secondary={`${t('products.price')}: ${price.price.toFixed(2)}`}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </Paper>
                )}
              </Box>
            </ClickAwayListener>
          </Box>

          <Button
            variant="outlined"
            size="small"
            onClick={() => setScannerOpen(true)}
            startIcon={<IconBarcode />}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('barcode.scan')}
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<IconPlus />}
            onClick={addDetailWithSearch}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('purchaseOrders.addItemWithSearch')}
          </Button>
        </Box>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {fields.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchaseOrders.noItems')}
                </Typography>
              ) : (
                fields.map((field, index) => (
                  <MobileDetailCard
                    key={field.id}
                    index={index}
                    onRemove={() => remove(index)}
                  />
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchaseOrders.product')}</TableCell>
                    <TableCell>{t('purchaseOrders.unit')}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.quantity')}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.price')}</TableCell>
                    <TableCell align="right">{`${t('purchaseOrders.discount')} %`}</TableCell>
                    <TableCell align="right">{`${t('purchaseOrders.tax')} %`}</TableCell>
                    <TableCell align="right">{t('purchaseOrders.total')}</TableCell>
                    <TableCell />
                  </TableRow>
                </TableHead>
                <TableBody>
                  {fields.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchaseOrders.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    fields.map((field, index) => (
                      <TableRow key={field.id}>
                        <TableCell>{watch(`details.${index}.productName`)}</TableCell>
                        <TableCell>{watch(`details.${index}.unitName`)}</TableCell>
                        
                        {/* الكمية */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.quantity`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.quantity`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.price`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* السعر */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.price`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.price`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.discountPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 120,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الخصم */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.discountPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.discountPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.taxPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الضريبة */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.taxPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.taxPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                disabled={watchedStatus === 3}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الإجمالي */}
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>

                        <TableCell>
                          {watchedStatus !== 3 && (
                            <IconButton
                              onClick={() => remove(index)}
                              size="small"
                              color="error"
                            >
                              <IconTrash size={16} />
                            </IconButton>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* Product Price Search Dialog */}
      <ProductPriceSearchDialog
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={handleProductPriceSelect}
      />

      {/* Barcode Scanner */}
      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />

      {/* Alert Snackbar */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseOrderForm;


============================================================
FILE: src/Pages/purchase-orders/components/PurchaseOrderRow.tsx
============================================================
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Chip
} from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { useTranslation } from 'react-i18next';

interface Props {
  purchaseOrder: PurchaseOrder;
  onEdit: () => void;
}

const PurchaseOrderRow: React.FC<Props> = ({ purchaseOrder, onEdit }) => {
  const { t } = useTranslation();

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');
      case 3:
        return t('purchaseOrders.submitted');
      default:
        return '-';
    }
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography variant="h6" component="div">
              {purchaseOrder.referenceDocNumber}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('purchaseOrders.code')}: {purchaseOrder.code}
            </Typography>
            <Box>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.supplier')}: {purchaseOrder.supplier?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.warehouse')}: {purchaseOrder.warehouse?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.date')}: {new Date(purchaseOrder.date1).toLocaleDateString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.total')}: {purchaseOrder.total.toFixed(2)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.itemsCount')}: {purchaseOrder.details?.length || 0}
              </Typography>
            </Box>
            <Chip
              label={renderStatus(purchaseOrder.status)}
              color={purchaseOrder.status === 1 ? 'warning' : purchaseOrder.status === 3 ? 'primary' : 'default'}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            />
          </Stack>

          {/*
            إذا كان status === 3 → iconEye (view)، وإلا iconEdit.
          */}
          <IconButton onClick={onEdit}>
            {purchaseOrder.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default PurchaseOrderRow;


============================================================
FILE: src/Pages/purchase-orders/components/PurchaseOrderTable.tsx
============================================================
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';

interface Props {
  rows: PurchaseOrder[];
  onEdit: (po: PurchaseOrder) => void;
}

const PurchaseOrderTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const handleEdit = (row: PurchaseOrder) => {
    // ✅ للتأكد من البيانات

    // ✅ تأكد من وجود id
    if (!row.id) {
      alert('خطأ: معرف أمر الشراء غير موجود');
      return;
    }

    onEdit(row);
  };

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');   // “Pending”
      case 3:
        return t('purchaseOrders.submitted'); // “Submitted”
      default:
        return '-';
    }
  };

  const cols: GridColDef[] = [
    {
      field: 'referenceDocNumber',
      headerName: t('purchaseOrders.docNumber'),
      flex: 1,
      minWidth: 150
    },
    {
      field: 'code',
      headerName: t('purchaseOrders.code'),
      width: 100
    },
    {
      field: 'supplier',
      headerName: t('purchaseOrders.supplier'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.supplier?.name || 'N/A'
    },
    {
      field: 'warehouse',
      headerName: t('purchaseOrders.warehouse'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.warehouse?.name || 'N/A'
    },
    {
      field: 'date1',
      headerName: t('purchaseOrders.date'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch {
          return '-';
        }
      }
    },
    {
      field: 'total',
      headerName: t('purchaseOrders.total'),
      width: 120,
      renderCell: ({ value }) => `${Number(value).toFixed(2)}`
    },
    {
      field: 'details',
      headerName: t('purchaseOrders.itemsCount'),
      width: 120,
      renderCell: ({ value }) => `${value?.length || 0} ${t('purchaseOrders.items')}`
    },
    {
      // ← Changed from isActive → status
      field: 'status',
      headerName: t('purchaseOrders.status.title'),
      width: 110,
      renderCell: ({ value }) => (
        <Chip
          label={renderStatus(value)}
          color={value === 1 ? 'warning' : value === 3 ? 'primary' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'actions',
      headerName: '',
      width: 110,
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          {/*
            If status === 3 (Submitted), show “view” icon; otherwise show edit.
          */}
          {row.status === 3 ? (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEye size={18} />
            </IconButton>
          ) : (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => {
        // ✅ إصلاح: تأكد من وجود id وإلا اطبع خطأ
        if (!row.id) {
          return `temp-${Math.random()}`; // استخدم prefix للتمييز
        }
        return row.id;
      }}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default PurchaseOrderTable;


============================================================
FILE: src/Pages/purchase-orders/components/SearchableSelect.tsx
============================================================
import React, { useState, useEffect, useRef } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment,
  Typography,
  ListSubheader,
  MenuProps
} from '@mui/material';
import { IconSearch } from '@tabler/icons-react';
import { t } from 'i18next';

interface Option {
  id: string;
  name: string;
  [key: string]: any;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  size?: 'small' | 'medium';
  autoFocusSearch?: boolean;
  onSelectionComplete?: () => void; // موجود بالفعل
}

const SearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled,
  fullWidth = true,
  size = 'medium',
  autoFocusSearch = false,
  onSelectionComplete
}) => {
  const [searchText, setSearchText] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const [open, setOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const searchInputRef = useRef<HTMLInputElement>(null);

  // Recompute filteredOptions when options or searchText change:
  useEffect(() => {
    const filtered = options.filter(option =>
      option.name.toLowerCase().includes(searchText.toLowerCase())
    );
    setFilteredOptions(filtered);
    setSelectedIndex(-1);
  }, [searchText, options]);

  // Whenever `open` becomes true and autoFocusSearch is set, focus the search input:
useEffect(() => {
  if (open && autoFocusSearch) {
    // تأكد من الـ focus فوراً
    const timer = setTimeout(() => {
      if (searchInputRef.current) {
        const inputElement = searchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select(); // تحديد النص الموجود
        }
      }
    }, 50); // وقت أقل للاستجابة الأسرع

    return () => clearTimeout(timer);
  }
}, [open, autoFocusSearch]);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
    setSelectedIndex(-1);
  };

  const handleChange = (event: any) => {
    onChange(event.target.value);
    handleClose();
    
    // التعديل الوحيد هنا - إضافة callback
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  };

  // Arrow-key navigation inside the search box:
const handleSearchKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'ArrowUp') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.max(prev - 1, -1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'Enter' && selectedIndex >= 0) {
    e.preventDefault();
    e.stopPropagation();
    onChange(filteredOptions[selectedIndex].id);
    handleClose();
    
    // إضافة callback هنا كمان
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    e.stopPropagation();
    handleClose();
  }
};

  // If the closed Select is focused and the user starts typing a letter,
  // open the dropdown with that letter in the search field:
  const handleSelectKeyDown = (e: React.KeyboardEvent) => {
    if (
      e.key.length === 1 &&
      !e.ctrlKey &&
      !e.altKey &&
      !e.metaKey
    ) {
      e.preventDefault();
      setOpen(true);
      setSearchText(e.key);
      // Focus the search input after the dropdown appears:
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
          searchInputRef.current.setSelectionRange(1, 1);
        }
      }, 100);
    }
  };

  const customMenuProps: Partial<MenuProps> = {
    PaperProps: {
      style: {
        maxHeight: 300,
      },
    },
    onClose: (_event, reason) => {
      if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
        handleClose();
      }
    },
  };

  return (
    <FormControl fullWidth={fullWidth} size={size} error={error} disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value}
        label={label}
        open={open}
        onOpen={handleOpen}
        onClose={handleClose}
        onChange={handleChange}
        onKeyDown={handleSelectKeyDown}
        MenuProps={customMenuProps}
      >
        <ListSubheader>
          <TextField
            ref={searchInputRef}
            size="small"
            placeholder={t('common.search') || 'البحث...'}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            onKeyDown={handleSearchKeyDown}
            onClick={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            autoComplete="off"
          />
        </ListSubheader>

        {placeholder && !value && (
          <MenuItem value="" disabled>
            <Typography color="text.secondary">{placeholder}</Typography>
          </MenuItem>
        )}

        {filteredOptions.length === 0 ? (
          <MenuItem disabled>
            <Typography color="text.secondary">
              {t('common.noResults') || 'لا توجد نتائج'}
            </Typography>
          </MenuItem>
        ) : (
          filteredOptions.map((option, index) => (
            <MenuItem
              key={option.id}
              value={option.id}
              selected={index === selectedIndex}
              sx={{
                backgroundColor:
                  index === selectedIndex ? 'action.selected' : 'transparent',
              }}
            >
              {option.name}
            </MenuItem>
          ))
        )}
      </Select>
    </FormControl>
  );
};

export default SearchableSelect;


============================================================
FILE: src/Pages/purchase-orders/AddPurchaseOrderPage.tsx
============================================================
// File: src/pages/purchases/purchase-orders/AddPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { useMediaQuery, useTheme, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import MobilePurchaseOrderForm from './components/mobile/MobilePurchaseOrderForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const AddPurchaseOrderPage: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [suppliersData, warehousesData] = await Promise.all([
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSubmit = async (data: any) => {
    try {
      await apiSrv.add(data);
    } catch (e: any) {
      throw e;
    }
  };

  if (loading) {
    return (
      <Box textAlign="center" py={4}>
        <CircularProgress />
        <Typography sx={{ mt: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseOrderForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseOrderForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}</>
  );
};

export default AddPurchaseOrderPage;


============================================================
FILE: src/Pages/purchase-orders/EditPurchaseOrderPage.tsx
============================================================
// File: src/pages/purchases/purchase-orders/EditPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useMediaQuery, useTheme, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import MobilePurchaseOrderForm from './components/mobile/MobilePurchaseOrderForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const EditPurchaseOrderPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [purchaseOrder, setPurchaseOrder] = useState<PurchaseOrder | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!id) {
          throw new Error('Purchase Order ID is required');
        }
        const [purchaseOrderData, suppliersData, warehousesData] = await Promise.all([
          apiSrv.getById(id),
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setPurchaseOrder(purchaseOrderData);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleSubmit = async (data: any) => {
    try {
      if (!purchaseOrder) {
        throw new Error('No purchase order loaded');
      }
      await apiSrv.update({ ...data, id: purchaseOrder.id! });
    } catch (e: any) {
      throw e;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  if (error && !purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  if (!purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">أمر الشراء غير موجود</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseOrderForm
          mode="edit"
          initialValues={purchaseOrder}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseOrderForm
          mode="edit"
          initialValues={purchaseOrder}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}</>
  );
};

export default EditPurchaseOrderPage;


============================================================
FILE: src/Pages/purchase-orders/PurchaseOrdersPage.tsx
============================================================
// File: src/pages/purchases/purchase-orders/PurchaseOrdersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Fab, Badge
} from '@mui/material';
import { IconFilter } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import PurchaseOrderTable from './components/PurchaseOrderTable';
import PurchaseOrderRow from './components/PurchaseOrderRow';
import MobilePurchaseOrdersFilter, { PurchaseOrderFilterState } from './components/mobile/MobilePurchaseOrdersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { t } from 'i18next';

const PurchaseOrdersPage: React.FC = () => {
  const navigate = useNavigate();
  const [purchaseOrders, setPurchaseOrders] = React.useState<PurchaseOrder[]>([]);
  const [suppliers, setSuppliers] = React.useState<Array<{ id: string; name: string }>>([]);
  const [warehouses, setWarehouses] = React.useState<Array<{ id: string; name: string }>>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PurchaseOrderFilterState>({
    searchQuery: '',
    status: '',
    supplierId: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'date1',
    sortOrder: 'desc'
  });

  /* ───── fetch all ───── */
  const fetchPurchaseOrders = async () => {
    try {
      const purchaseOrdersData = await apiSrv.getAll();
      setPurchaseOrders(purchaseOrdersData);
    } catch (e: any) {    }
  };

  const fetchSuppliers = async () => {
    try {
      const suppliersData = await suppliersApi.getAll();
      setSuppliers(suppliersData.map((s: { id: any; name: any; }) => ({ id: s.id, name: s.name })));
    } catch (e: any) {
      }
  };

  const fetchWarehouses = async () => {
    try {
      const warehousesData = await warehousesApi.getAll();
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (e: any) {
      }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await Promise.all([
          fetchPurchaseOrders(),
          fetchSuppliers(),
          fetchWarehouses()
        ]);
      }
      catch (e: any) {      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? purchaseOrders.filter(po => 
      po.referenceDocNumber.toLowerCase().includes(query.toLowerCase()) ||
      po.supplier?.name.toLowerCase().includes(query.toLowerCase()) ||
      po.warehouse?.name.toLowerCase().includes(query.toLowerCase())
    ) : purchaseOrders,
    [purchaseOrders, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...purchaseOrders];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(order => 
        order.referenceDocNumber.toLowerCase().includes(searchLower) ||
        order.supplier?.name.toLowerCase().includes(searchLower) ||
        order.warehouse?.name.toLowerCase().includes(searchLower) ||
        order.id?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      result = result.filter(order => order.status.toString() === mobileFilters.status);
    }

    // فلتر المورد
    if (mobileFilters.supplierId) {
      result = result.filter(order => order.supplierId === mobileFilters.supplierId);
    }

    // فلتر المخزن
    if (mobileFilters.warehouseId) {
      result = result.filter(order => order.warehouseId === mobileFilters.warehouseId);
    }

    // فلتر التاريخ
    if (mobileFilters.dateFrom) {
      result = result.filter(order => {
        const orderDate = new Date(order.date1).toISOString().split('T')[0];
        return orderDate >= mobileFilters.dateFrom;
      });
    }

    if (mobileFilters.dateTo) {
      result = result.filter(order => {
        const orderDate = new Date(order.date1).toISOString().split('T')[0];
        return orderDate <= mobileFilters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'date1') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [purchaseOrders, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.supplierId) count++;
    if (mobileFilters.warehouseId) count++;
    if (mobileFilters.dateFrom || mobileFilters.dateTo) count++;
    return count;
  };

  /* ───── Navigation handlers ───── */
  const handleAdd = () => {
    navigate('/purchases/purchase-orders/add');
  };

  const handleEdit = (purchaseOrder: PurchaseOrder) => {
    navigate(`/purchases/purchase-orders/edit/${purchaseOrder.id}`);
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={handleAdd}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          <ActionsBar
            onAdd={handleAdd} query={''} onQueryChange={function (): void {
              throw new Error('Function not implemented.');
            } }          />
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('purchaseOrders.title')} {` (${filtered.length})`}
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>جاري التحميل...</Typography>
          </Box>
        ) : filtered.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {(isMobile ? mobileFilters.searchQuery : query) || getActiveFiltersCount() > 0 
                ? 'لا توجد نتائج للبحث' 
                : 'لا توجد أوامر شراء'
              }
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? filtered.map(po => (
                  <PurchaseOrderRow
                    key={po.id}
                    purchaseOrder={po}
                    onEdit={() => handleEdit(po)}
                  />
                ))
              : (
                  <PurchaseOrderTable
                    rows={filtered}
                    onEdit={handleEdit}
                  />
                )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePurchaseOrdersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          suppliers={suppliers}
          warehouses={warehouses}
          totalResults={purchaseOrders.length}
          filteredResults={filtered.length}
        />
      )}</Container>
  );
};

export default PurchaseOrdersPage;


============================================================
FILE: src/Pages/purchases/components/mobile/MobilePurchaseForm.tsx
============================================================
// File: src/pages/purchases/components/mobile/MobilePurchaseForm.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Card,
  CardContent,
  IconButton,
  Divider,
  Alert,
  Snackbar,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Fab
} from '@mui/material';
import {
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconChevronDown,
  IconChevronUp,
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import MobileSearchableSelect from '../../../purchase-orders/components/mobile/MobileSearchableSelect';
import MobileProductSearch from '../../../purchase-orders/components/mobile/MobileProductSearch';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';

type FormValues = {
  referenceDocNumber: string;
  purchaseOrderId?: string | null;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: Purchase;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const MobilePurchaseForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [alertMessage, setMessage] = useState('');
  const [alertSeverity, setSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');
  const [expandedSection, setExpandedSection] = useState<string>('basic');

  const defaults: FormValues = {
    referenceDocNumber: `PI-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    purchaseOrderId: null,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 14,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // حساب الإجماليات
  const recalculateAll = () => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)));
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)));
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)));
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)));

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)));
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)));
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)));
    setValue('total', parseFloat(total.toFixed(2)));
  };

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);
    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent]);

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      const convertedDetails = initialValues.details.map((d) => ({
        purchaseDetailID: d.id || '',
        productId: d.productID,
        productPriceId: d.productPriceID || '',
        productName: d.productName || d.unitName || 'منتج غير محدد',
        unitId: d.unitId,
        unitName: d.unitName,
        unitFactor: d.unitFactor,
        quantity: d.quantity,
        price: d.price,
        discountPercent: d.discountPercent,
        discountValue: d.discountValue,
        taxPercent: d.taxPercent,
        taxValue: d.taxValue,
        subTotal: d.subTotal,
        total: d.total
      }));

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        purchaseOrderId: initialValues.purchaseOrderId,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset]);

  const addProductToForm = (productPrice: ProductPrice) => {
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 14,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    append(newItem);
    setProductSearchOpen(false);
    setExpandedSection('items');
  };

  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setSeverity('error');
      return false;
    }
    return true;
  };

  const submit = async (data: FormValues, submitStatus: number) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setSeverity('error');
      return;
    }

    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchases.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchases.price')} ${t('common.inLine')} ${i + 1}`)) return;
    }

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        status: submitStatus,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d) => {
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseDetailID && d.purchaseDetailID.trim() !== '') {
            detailData.id = d.purchaseDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);

      if (submitStatus === 1 && mode === 'add') {
        reset(defaults);
        setExpandedSection('basic');
      } else {
        navigate('/purchases/purchases');
      }
    } catch (error) {
      setSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  return (
    <Container maxWidth="sm" sx={{ py: 1, px: 1 }}>
      {/* Header مع الإجمالي */}
      <Card sx={{ mb: 2, position: 'sticky', top: 0, zIndex: 100 }}>
        <CardContent sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">
              {mode === 'add' ? t('purchases.add') : t('purchases.edit')}
            </Typography>
            <IconButton onClick={() => navigate('/purchases/purchases')} size="small">
              <IconArrowLeft />
            </IconButton>
          </Box>
          
          <Typography variant="h4" color="primary" sx={{ textAlign: 'center', fontWeight: 'bold' }}>
            {t('purchases.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
          
          <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
            {watchedStatus !== 3 && (
              <>
                <Button
                  variant="contained"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 1;
                    submit(data, 1);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchases.savePending')}
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  size="small"
                  fullWidth
                  onClick={handleSubmit((data) => {
                    data.status = 3;
                    submit(data, 3);
                  })}
                  disabled={isSubmitting}
                >
                  {t('purchases.submit')}
                </Button>
              </>
            )}
          </Stack>
        </CardContent>
      </Card>

      {/* المعلومات الأساسية */}
      <Accordion 
        expanded={expandedSection === 'basic'} 
        onChange={handleAccordionChange('basic')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'basic' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">{t('purchases.basicInfo')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="referenceDocNumber"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.invoiceNumber')}
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="date1"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.invoiceDate')}
                  type="date"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  InputLabelProps={{ shrink: true }}
                />
              )}
            />

            <Controller
              name="supplierId"
              control={control}
              rules={{ required: t('validation.supplierRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchases.supplier')}
                  value={field.value}
                  onChange={field.onChange}
                  options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                  placeholder={t('purchases.selectSupplier')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />

            <Controller
              name="warehouseId"
              control={control}
              rules={{ required: t('validation.warehouseRequired') }}
              render={({ field, fieldState }) => (
                <MobileSearchableSelect
                  label={t('purchases.warehouse')}
                  value={field.value}
                  onChange={field.onChange}
                  options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                  placeholder={t('purchases.selectWarehouse')}
                  error={!!fieldState.error}
                  disabled={watchedStatus === 3}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الخصومات والضرائب */}
      <Accordion 
        expanded={expandedSection === 'discounts'} 
        onChange={handleAccordionChange('discounts')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'discounts' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">{t('purchases.discountsAndTaxes')}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <Controller
              name="discountPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchases.totalDiscount')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />

            <Controller
              name="taxPercent"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={`${t('purchases.totalTax')} %`}
                  type="number"
                  fullWidth
                  size="small"
                  disabled={watchedStatus === 3}
                  inputProps={{ inputMode: 'decimal' }}
                />
              )}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأصناف */}
      <Accordion 
        expanded={expandedSection === 'items'} 
        onChange={handleAccordionChange('items')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'items' ? <IconChevronUp /> : <IconChevronDown />}>
          <Typography variant="h6">
            {t('purchases.items')} ({fields.length})
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            {fields.length === 0 ? (
              <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                {t('purchases.noItems')}
              </Typography>
            ) : (
              fields.map((field, index) => (
                <Card key={field.id} variant="outlined">
                  <CardContent sx={{ p: 2 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="subtitle2">
                        #{index + 1} - {watch(`details.${index}.productName`)}
                      </Typography>
                      {watchedStatus !== 3 && (
                        <IconButton onClick={() => remove(index)} size="small" color="error">
                          <IconTrash size={16} />
                        </IconButton>
                      )}
                    </Box>

                    <Grid container spacing={1}>
                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.quantity`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchases.quantity')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.price`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={t('purchases.price')}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.discountPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchases.discount')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <Controller
                          name={`details.${index}.taxPercent`}
                          control={control}
                          render={({ field }) => (
                            <TextField
                              {...field}
                              label={`${t('purchases.tax')} %`}
                              type="number"
                              size="small"
                              fullWidth
                              disabled={watchedStatus === 3}
                              inputProps={{ inputMode: 'decimal' }}
                            />
                          )}
                        />
                      </Grid>
                    </Grid>

                    <Divider sx={{ my: 1 }} />
                    
                    <Typography variant="body2" sx={{ textAlign: 'right', fontWeight: 'bold' }}>
                      {t('purchases.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                    </Typography>
                  </CardContent>
                </Card>
              ))
            )}
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* زر إضافة منتج عائم */}
      {watchedStatus !== 3 && (
        <Fab
          color="primary"
          onClick={() => setProductSearchOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <IconPlus />
        </Fab>
      )}

      {/* البحث عن المنتجات */}
      <MobileProductSearch
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={addProductToForm}
      />

      {/* التنبيهات */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default MobilePurchaseForm;


============================================================
FILE: src/Pages/purchases/components/mobile/MobilePurchasesFilter.tsx
============================================================
// File: src/pages/purchases/components/mobile/MobilePurchasesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface PurchasesFilterState {
  searchQuery: string;
  status: string;
  supplierId: string;
  warehouseId: string;
  dateFrom: string;
  dateTo: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: PurchasesFilterState;
  onFiltersChange: (filters: PurchasesFilterState) => void;
  suppliers: Array<{ id: string; name: string }>;
  warehouses: Array<{ id: string; name: string }>;
  totalResults: number;
  filteredResults: number;
}

const MobilePurchasesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  suppliers,
  warehouses,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<PurchasesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: '1', label: t('purchases.status.pending') },
    { value: '3', label: t('purchases.status.submitted') }
  ];

  const sortOptions = [
    { value: 'referenceDocNumber', label: t('purchases.table.invoiceNumber') },
    { value: 'date1', label: t('purchases.table.invoiceDate') },
    { value: 'total', label: t('purchases.table.total') },
    { value: 'status', label: t('purchases.table.status') }
  ];

  const handleLocalChange = (field: keyof PurchasesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: PurchasesFilterState = {
      searchQuery: '',
      status: '',
      supplierId: '',
      warehouseId: '',
      dateFrom: '',
      dateTo: '',
      sortBy: 'date1',
      sortOrder: 'desc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    if (localFilters.supplierId) count++;
    if (localFilters.warehouseId) count++;
    if (localFilters.dateFrom || localFilters.dateTo) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('purchases.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('purchases.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('purchases.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('purchases.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('purchases.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('purchases.filter.filters')}</Typography>
            {(localFilters.status || localFilters.supplierId || localFilters.warehouseId) && (
              <Chip 
                size="small" 
                label={[localFilters.status, localFilters.supplierId, localFilters.warehouseId].filter(Boolean).length} 
                color="primary" 
              />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.status')}</InputLabel>
              <Select
                value={localFilters.status}
                label={t('purchases.table.status')}
                onChange={(e) => handleLocalChange('status', e.target.value)}
              >
                {statusOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.supplier')}</InputLabel>
              <Select
                value={localFilters.supplierId}
                label={t('purchases.table.supplier')}
                onChange={(e) => handleLocalChange('supplierId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {suppliers.map(supplier => (
                  <MenuItem key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.table.warehouse')}</InputLabel>
              <Select
                value={localFilters.warehouseId}
                label={t('purchases.table.warehouse')}
                onChange={(e) => handleLocalChange('warehouseId', e.target.value)}
              >
                <MenuItem value="">
                  {t('common.all')}
                </MenuItem>
                {warehouses.map(warehouse => (
                  <MenuItem key={warehouse.id} value={warehouse.id}>
                    {warehouse.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* التواريخ */}
      <Accordion 
        expanded={expandedSection === 'dates'} 
        onChange={handleAccordionChange('dates')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'dates' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography>{t('purchases.filter.dateRange')}</Typography>
            {(localFilters.dateFrom || localFilters.dateTo) && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <TextField
              label={t('purchases.filter.dateFrom')}
              type="date"
              value={localFilters.dateFrom}
              onChange={(e) => handleLocalChange('dateFrom', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label={t('purchases.filter.dateTo')}
              type="date"
              value={localFilters.dateTo}
              onChange={(e) => handleLocalChange('dateTo', e.target.value)}
              size="small"
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('purchases.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('purchases.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('purchases.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('purchases.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('purchases.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('purchases.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('purchases.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('purchases.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobilePurchasesFilter;


============================================================
FILE: src/Pages/purchases/components/PageHeader.tsx
============================================================
// File: src/pages/purchases/components/PageHeader.tsx
import React from 'react';
import PageHeader from '../../components/PageHeader';

interface Props {
  exportData?: any[];
  loading?: boolean;
}

const PurchasesPageHeader: React.FC<Props> = ({ exportData = [], loading = false }) => {
  const exportColumns = [
    { field: 'referenceDocNumber', headerName: 'رقم الفاتورة', type: 'string' as const },
    { field: 'purchaseOrder.referenceDocNumber', headerName: 'أمر الشراء', type: 'string' as const, format: (value: any) => value?.referenceDocNumber || 'فاتورة مباشرة' },
    { field: 'supplier.name', headerName: 'المورد', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'warehouse.name', headerName: 'المخزن', type: 'string' as const, format: (value: any) => value?.name || 'غير محدد' },
    { field: 'date1', headerName: 'تاريخ الفاتورة', type: 'date' as const },
    { field: 'total', headerName: 'الإجمالي', type: 'number' as const },
    { field: 'status', headerName: 'الحالة', type: 'string' as const, format: (value: number) => value === 1 ? 'معلق' : value === 3 ? 'مرسل' : 'غير محدد' },
  ];

  return (
    <PageHeader
      titleKey="purchases.title"
      subtitleKey="purchases.subtitle"
      exportData={exportData}
      exportColumns={exportColumns}
      exportFileName="purchases"
      exportLoading={loading}
    />
  );
};

export default PurchasesPageHeader;


============================================================
FILE: src/Pages/purchases/components/PurchaseForm.tsx
============================================================
// File: src/pages/purchases/components/PurchaseForm.tsx
import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ClickAwayListener,
  Alert,
  Snackbar,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconHome,
  IconSearch,
  IconBarcode,
  IconFileImport,
  IconSend
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';
import PurchaseOrderSelectDialog from './PurchaseOrderSelectDialog';
import ProductPriceSearchDialog from '../../purchase-orders/components/ProductPriceSearchDialog';
import BarcodeScanner from '../../purchase-orders/components/BarcodeScanner';
import SearchableSelect from '../../purchase-orders/components/SearchableSelect';
import { ProductPrice } from 'src/utils/api/pagesApi/purchaseProductsApi';
import * as productsApi from 'src/utils/api/pagesApi/purchaseProductsApi';

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

type FormValues = {
  referenceDocNumber: string;
  purchaseOrderId?: string | null;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: Purchase;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const PurchaseForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [purchaseOrderSelectOpen, setPurchaseOrderSelectOpen] = useState(false);
  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState<PurchaseOrder | null>(null);
  const [lastAddedIndex, setLastAddedIndex] = useState<number | null>(null);

  // Quick-search states
  const [quickSearchQuery, setQuickSearchQuery] = useState('');
  const [quickSearchResults, setQuickSearchResults] = useState<ProductPrice[]>([]);
  const [quickSearchOpen, setQuickSearchOpen] = useState(false);
  const [, setQuickSearchLoading] = useState(false);
  const [quickSearchSelectedIndex, setQuickSearchSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Alert states
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  // Ref for quick search input
  const quickSearchInputRef = useRef<HTMLInputElement>(null);
  const quickSearchRef = useRef<HTMLDivElement>(null);
  const debouncedQuickSearch = useDebounce(quickSearchQuery, 300);

  // Default values
  const defaults: FormValues = {
    referenceDocNumber: `PI-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    purchaseOrderId: null,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 14,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1, // Default to Pending
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedPurchaseOrderId = watch('purchaseOrderId');

  // Status options
  const statusOptions = [
    { value: 1, label: t('purchases.status.pending'), color: 'warning' },
    { value: 3, label: t('purchases.status.submitted'), color: 'success' }
  ];

  // دالة للعودة للـ Quick Search
  const focusQuickSearch = useCallback(() => {
    setTimeout(() => {
      if (quickSearchInputRef.current) {
        const inputElement = quickSearchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select();
        }
      }
    }, 200);
  }, []);

  const handleFieldKeyDown = useCallback((e: React.KeyboardEvent, nextFieldName?: string) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (nextFieldName) {
        setTimeout(() => {
          const nextInput = document.querySelector(`input[name="${nextFieldName}"]`) as HTMLInputElement;
          if (nextInput) {
            nextInput.focus();
            nextInput.select();
          }
        }, 50);
      } else {
        focusQuickSearch();
      }
    }
  }, [focusQuickSearch]);

  // دالة محسنة لإعادة الحساب
  const recalculateAll = useCallback(() => {
    const currentDetails = watch('details');
    const currentDiscountPercent = watch('discountPercent');
    const currentTaxPercent = watch('taxPercent');
    
    let subTotal = 0;

    currentDetails.forEach((detail: any, idx: number) => {
      const quantity = parseFloat(detail.quantity?.toString() || '0');
      const price = parseFloat(detail.price?.toString() || '0');
      const unitFactor = parseFloat(detail.unitFactor?.toString() || '1');
      const discountPercent = parseFloat(detail.discountPercent?.toString() || '0');
      const taxPercent = parseFloat(detail.taxPercent?.toString() || '0');

      if (isNaN(quantity) || isNaN(price) || isNaN(unitFactor)) return;

      const lineSubTotal = quantity * price * unitFactor;
      const lineDiscountValue = lineSubTotal * (discountPercent / 100);
      const afterDiscount = lineSubTotal - lineDiscountValue;
      const lineTaxValue = afterDiscount * (taxPercent / 100);
      const lineTotal = afterDiscount + lineTaxValue;

      setValue(`details.${idx}.subTotal` as any, parseFloat(lineSubTotal.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.discountValue` as any, parseFloat(lineDiscountValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.taxValue` as any, parseFloat(lineTaxValue.toFixed(2)), { shouldValidate: false });
      setValue(`details.${idx}.total` as any, parseFloat(lineTotal.toFixed(2)), { shouldValidate: false });

      subTotal += lineSubTotal;
    });

    const globalDiscountPercent = parseFloat(currentDiscountPercent?.toString() || '0');
    const globalTaxPercent = parseFloat(currentTaxPercent?.toString() || '0');

    const totalDiscountValue = subTotal * (globalDiscountPercent / 100);
    const afterDiscount = subTotal - totalDiscountValue;
    const totalTaxValue = afterDiscount * (globalTaxPercent / 100);
    const total = afterDiscount + totalTaxValue;

    setValue('subTotal', parseFloat(subTotal.toFixed(2)), { shouldValidate: false });
    setValue('discountValue', parseFloat(totalDiscountValue.toFixed(2)), { shouldValidate: false });
    setValue('taxValue', parseFloat(totalTaxValue.toFixed(2)), { shouldValidate: false });
    setValue('total', parseFloat(total.toFixed(2)), { shouldValidate: false });
  }, [setValue, watch]);

  // Upon initial render in "add" mode, focus quick-search
  useLayoutEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current) {
      quickSearchInputRef.current.focus();
    }
  }, [mode]);

  // Fallback if ref isn't attached yet
  useEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current === null) {
      const timer = setTimeout(() => {
        if (quickSearchInputRef.current) {
          quickSearchInputRef.current.focus();
        }
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [mode]);

  // After adding a product, focus its quantity input
  useEffect(() => {
    if (lastAddedIndex !== null) {
      const timer = setTimeout(() => {
        const quantityInput = document.querySelector(
          `input[name="details.${lastAddedIndex}.quantity"]`
        ) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
        setLastAddedIndex(null);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [lastAddedIndex]);

  // Recalculate totals whenever details, discountPercent, or taxPercent change
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      recalculateAll();
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent, recalculateAll]);

  useEffect(() => {
    if (mode === 'add') {
      setTimeout(() => {
        focusQuickSearch();
      }, 500);
    }
  }, [mode, focusQuickSearch]);

  // Populate form in "edit" mode, or reset in "add" mode
  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      console.log('Initial values from API:', initialValues);
      console.log('Details from API:', initialValues.details);
      
      const convertedDetails = initialValues.details.map((d, index) => {
        console.log(`Converting detail ${index}:`, d);
        const converted = {
          purchaseDetailID: d.id || '',
          productId: d.productID,
          productPriceId: d.productPriceID || '',
          productName: d.productName || d.unitName || t('purchases.form.unknownProduct'),
          unitId: d.unitId,
          unitName: d.unitName,
          unitFactor: d.unitFactor,
          quantity: d.quantity,
          price: d.price,
          discountPercent: d.discountPercent,
          discountValue: d.discountValue,
          taxPercent: d.taxPercent,
          taxValue: d.taxValue,
          subTotal: d.subTotal,
          total: d.total
        };
        console.log(`Converted detail ${index}:`, converted);
        return converted;
      });

      console.log('All converted details:', convertedDetails);

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        purchaseOrderId: initialValues.purchaseOrderId,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });

      // إذا كان مرتبط بأمر شراء، قم بإنشاء كائن كامل
      if (initialValues.purchaseOrder) {
        setSelectedPurchaseOrder(initialValues.purchaseOrder as PurchaseOrder);
      }
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset, t]);

  // Handle debounced quick-search
  useEffect(() => {
    if (debouncedQuickSearch.trim()) {
      handleQuickSearch(debouncedQuickSearch);
    } else {
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    }
  }, [debouncedQuickSearch]);

  const handleQuickSearch = async (query: string) => {
    try {
      setQuickSearchLoading(true);
      const result = await productsApi.searchProductPrices(query, 1, 10);
      setQuickSearchResults(result.data);
      setQuickSearchOpen(result.data.length > 0);
      setQuickSearchSelectedIndex(0);
    } catch (error) {
      console.error('Quick search error:', error);
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    } finally {
      setQuickSearchLoading(false);
    }
  };

  // Handle purchase order selection
  const handlePurchaseOrderSelect = (purchaseOrder: PurchaseOrder) => {
    setSelectedPurchaseOrder(purchaseOrder);
    
    // تعبئة البيانات من أمر الشراء - المورد فقط غير قابل للتعديل
    setValue('purchaseOrderId', purchaseOrder.id!);
    setValue('supplierId', purchaseOrder.supplierId); // المورد غير قابل للتعديل
    // المخزن قابل للتعديل
    setValue('warehouseId', purchaseOrder.warehouseId);
    setValue('discountPercent', purchaseOrder.discountPercent);
    setValue('taxPercent', purchaseOrder.taxPercent);
    
    // تعبئة الأصناف
    const convertedDetails = purchaseOrder.details.map(d => ({
      productId: d.productID,
      productPriceId: d.productPriceID || '',
      productName: d.unitName || t('purchases.form.unknownProduct'),
      unitId: d.unitId,
      unitName: d.unitName,
      unitFactor: d.unitFactor,
      quantity: d.quantity,
      price: d.price,
      discountPercent: d.discountPercent,
      discountValue: d.discountValue,
      taxPercent: d.taxPercent,
      taxValue: d.taxValue,
      subTotal: d.subTotal,
      total: d.total
    }));

    setValue('details', convertedDetails);
    
    setAlertMessage(t('purchases.form.purchaseOrderImported', { number: purchaseOrder.referenceDocNumber }));
    setAlertSeverity('success');
  };

  // Handle barcode scan result
  const handleBarcodeScanned = async (barcode: string) => {
    try {
      const result = await productsApi.searchProductPrices(barcode, 1, 1);
      if (result.data.length > 0) {
        const productPrice = result.data[0];
        addProductToForm(productPrice);
        setAlertMessage(t('purchases.form.productAdded', { name: productPrice.productName }));
        setAlertSeverity('success');
      } else {
        setAlertMessage(t('purchases.form.barcodeNotFound'));
        setAlertSeverity('warning');
      }
    } catch (error) {
      setAlertMessage(t('purchases.form.searchError'));
      setAlertSeverity('error');
    }
    setScannerOpen(false);
  };

  // Add a product from quick-search or barcode into the form's details
  const addProductToForm = (productPrice: ProductPrice) => {
    console.log('Adding product to form:', productPrice);
    
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 14,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    console.log('New item being added:', newItem);

    const currentDetails = watch('details') || [];
    setValue('details', [newItem, ...currentDetails]);
    setLastAddedIndex(0);
    setQuickSearchQuery('');
    setQuickSearchOpen(false);

    setTimeout(() => {
      if (quickSearchInputRef.current) {
        quickSearchInputRef.current.focus();
      }
    }, 100);
  };

  // Navigate quick-search results with arrows + Enter/Escape
  const handleQuickSearchKeyDown = (e: React.KeyboardEvent) => {
    if (quickSearchResults.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.min(prev + 1, quickSearchResults.length - 1);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (quickSearchResults[quickSearchSelectedIndex]) {
          addProductToForm(quickSearchResults[quickSearchSelectedIndex]);
        }
        break;
      case 'Escape':
        setQuickSearchOpen(false);
        setQuickSearchQuery('');
        break;
    }
  };

  // Ensure the selected quick-search item is visible
  const scrollToQuickSearchItem = (index: number) => {
    const listElement = quickSearchRef.current;
    if (listElement) {
      const itemElement = listElement.children[index] as HTMLElement;
      if (itemElement) {
        const listRect = listElement.getBoundingClientRect();
        const itemRect = itemElement.getBoundingClientRect();
        const itemHeight = itemRect.height;
        const listHeight = listRect.height;
        const itemTop = itemElement.offsetTop;

        if (itemRect.bottom > listRect.bottom) {
          const newScrollTop = itemTop - listHeight + itemHeight + 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        } else if (itemRect.top < listRect.top) {
          const newScrollTop = itemTop - 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        }
      }
    }
  };

  const addDetailWithSearch = () => {
    setProductSearchOpen(true);
  };

  const handleProductPriceSelect = (productPrice: ProductPrice) => {
    addProductToForm(productPrice);
  };

  // Validate numeric fields
  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(t('purchases.form.invalidNumber', { field: fieldName }));
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  // Submit function with status
  const submit = async (data: FormValues, submitStatus: number) => {
    if (isSubmitting) return;

    if (!data.supplierId) {
      setAlertMessage(t('purchases.form.validation.supplierRequired'));
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('purchases.form.validation.warehouseRequired'));
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('purchases.form.validation.itemsRequired'));
      setAlertSeverity('error');
      return;
    }

    // التحقق من صحة البيانات
    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, t('purchases.form.quantity') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, t('purchases.form.price') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.discountPercent, t('purchases.form.discount') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.taxPercent, t('purchases.form.tax') + ` ${t('purchases.form.inLine')} ${i + 1}`)) return;
    }
    if (!validateNumber(data.discountPercent, t('purchases.form.totalDiscount'))) return;
    if (!validateNumber(data.taxPercent, t('purchases.form.totalTax'))) return;

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        status: submitStatus,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d, index) => {
          if (!d.productId) {
            throw new Error(`Detail ${t('purchases.form.inLine')} ${index + 1} ${t('purchases.form.missingProductId')}`);
          }
          if (!d.productPriceId) {
            throw new Error(`Detail ${t('purchases.form.inLine')} ${index + 1} ${t('purchases.form.missingPriceId')}`);
          }
          
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          if (mode === 'edit' && d.purchaseDetailID && d.purchaseDetailID.trim() !== '') {
            detailData.id = d.purchaseDetailID;
          }

          return detailData;
        })
      };

      await onSubmit(submitData);
      navigate('/purchases/purchases');
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Mobile-only detail card
  const MobileDetailCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle2">#{index + 1}</Typography>
          <IconButton onClick={onRemove} size="small" color="error">
            <IconTrash size={16} />
          </IconButton>
        </Box>
        <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Controller
              name={`details.${index}.quantity`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.quantity')}
                  type="number"
                  size="small"
                  name={`details.${index}.quantity`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.price`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.price`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.price')}
                  type="number"
                  size="small"
                  name={`details.${index}.price`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.discountPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.discountPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.discount') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.discountPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e, `details.${index}.taxPercent`);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.taxPercent`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label={t('purchases.form.tax') + ' %'}
                  type="number"
                  size="small"
                  name={`details.${index}.taxPercent`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleFieldKeyDown(e);
                    }
                  }}
                  onBlur={() => {
                    setTimeout(() => recalculateAll(), 50);
                  }}
                  onFocus={(e) => e.target.select()}
                  fullWidth
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>
        </Grid>

        <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
          {t('purchases.form.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
        </Typography>
      </CardContent>
    </Card>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchases');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchases.title')}
          </Link>
          <Typography color="text.primary">
            {mode === 'add' ? t('purchases.form.addTitle') : t('purchases.form.editTitle')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {mode === 'add' ? t('purchases.form.addTitle') : t('purchases.form.editTitle')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchases.form.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchases')}
            disabled={isSubmitting}
          >
            {t('common.back')}
          </Button>

          {mode === 'add' && (
            <Button
              variant="outlined"
              startIcon={<IconFileImport />}
              onClick={() => setPurchaseOrderSelectOpen(true)}
              disabled={isSubmitting}
            >
              {t('purchases.form.importFromPO')}
            </Button>
          )}

          <Button
            variant="outlined"
            startIcon={<IconDeviceFloppy />}
            onClick={handleSubmit((data) => submit(data, 1))}
            disabled={isSubmitting}
            color="warning"
          >
            {t('purchases.form.savePending')}
          </Button>

          <Button
            variant="contained"
            startIcon={<IconSend />}
            onClick={handleSubmit((data) => submit(data, 3))}
            disabled={isSubmitting}
          >
            {t('purchases.form.submitInvoice')}
          </Button>
        </Stack>
      </Box>

      {/* Purchase Order Info */}
      {selectedPurchaseOrder && (
        <Paper sx={{ p: 2, mb: 2, backgroundColor: 'info.light' }}>
          <Typography variant="h6" gutterBottom>
            {t('purchases.form.linkedToPO')}: {selectedPurchaseOrder.referenceDocNumber}
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poCode')}:</strong> {selectedPurchaseOrder.code}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poDate')}:</strong> {selectedPurchaseOrder.date1 ? new Date(selectedPurchaseOrder.date1).toLocaleDateString() : t('common.notSpecified')}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poTotal')}:</strong> {selectedPurchaseOrder.total?.toFixed(2) || '0.00'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.itemsCount')}:</strong> {selectedPurchaseOrder.details?.length || 0}
              </Typography>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* Form Fields */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <Controller
            name="referenceDocNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.invoiceNumber')}
                fullWidth
                size="small"
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="date1"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.invoiceDate')}
                type="date"
                fullWidth
                size="small"
                InputLabelProps={{ shrink: true }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="supplierId"
            control={control}
            rules={{ required: t('purchases.form.validation.supplierRequired') }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchases.form.supplier')}
                value={field.value}
                onChange={field.onChange}
                options={suppliers.map(s => ({ id: s.id, name: s.name }))}
                placeholder={t('purchases.form.selectSupplier')}
                error={!!fieldState.error}
                size="small"
                disabled={!!watchedPurchaseOrderId} // المورد غير قابل للتعديل عند الاستيراد
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="warehouseId"
            control={control}
            rules={{ required: t('purchases.form.validation.warehouseRequired') }}
            render={({ field, fieldState }) => (
              <SearchableSelect
                label={t('purchases.form.warehouse')}
                value={field.value}
                onChange={field.onChange}
                options={warehouses.map(w => ({ id: w.id, name: w.name }))}
                placeholder={t('purchases.form.selectWarehouse')}
                error={!!fieldState.error}
                size="small"
                // المخزن قابل للتعديل حتى لو تم الاستيراد
                onSelectionComplete={focusQuickSearch}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Status and Discount & Tax */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={4}>
          <Controller
            name="status"
            control={control}
            render={({ field }) => (
              <FormControl fullWidth size="small">
                <InputLabel>{t('purchases.form.status')}</InputLabel>
                <Select
                  {...field}
                  label={t('purchases.form.status')}
                >
                  {statusOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <Controller
            name="discountPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.totalDiscount') + ' %'}
                type="number"
                fullWidth
                size="small"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    focusQuickSearch();
                  }
                }}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <Controller
            name="taxPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchases.form.totalTax') + ' %'}
                type="number"
                fullWidth
                size="small"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    focusQuickSearch();
                  }
                }}
                onBlur={() => {
                  setTimeout(() => recalculateAll(), 50);
                  focusQuickSearch();
                }}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Summary */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.subTotal')}: {watch('subTotal')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.discountValue')}: {watch('discountValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.taxValue')}: {watch('taxValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchases.form.total')}: {watch('total')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{
          display: 'flex',
          gap: 2,
          mb: 2,
          p: 2,
          backgroundColor: 'grey.50',
          borderRadius: 1,
          boxShadow: 1,
          alignItems: 'center'
        }}>
          <Typography variant="h6" sx={{ minWidth: 'fit-content' }}>
            {t('purchases.form.items')}
          </Typography>

          <Box sx={{ position: 'relative', flex: 1 }}>
            <ClickAwayListener onClickAway={() => setQuickSearchOpen(false)}>
              <Box>
                <TextField
                  ref={quickSearchInputRef}
                  autoFocus
                  placeholder={t('purchases.form.quickSearch')}
                  value={quickSearchQuery}
                  onChange={(e) => setQuickSearchQuery(e.target.value)}
                  onKeyDown={handleQuickSearchKeyDown}
                  fullWidth
                  size="small"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    ),
                  }}
                />

                {/* Quick Search Results Dropdown */}
                {quickSearchOpen && quickSearchResults.length > 0 && (
                  <Paper
                    ref={quickSearchRef}
                    sx={{
                      position: 'absolute',
                      top: '100%',
                      left: 0,
                      right: 0,
                      zIndex: 1000,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    <List dense>
                      {quickSearchResults.map((price, index) => (
                        <ListItem key={price.id} disablePadding>
                          <ListItemButton
                            onClick={() => addProductToForm(price)}
                            selected={index === quickSearchSelectedIndex}
                            sx={{
                              py: 0.25,
                              backgroundColor:
                                index === quickSearchSelectedIndex ? 'action.selected' : 'transparent'
                            }}
                          >
                            <ListItemText
                              primary={`${price.productName} — ${price.unitName}`}
                              secondary={`${t('purchases.form.price')}: ${price.price.toFixed(2)}`}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </Paper>
                )}
              </Box>
            </ClickAwayListener>
          </Box>

          <Button
            variant="outlined"
            size="small"
            onClick={() => setScannerOpen(true)}
            startIcon={<IconBarcode />}
            sx={{ fontSize: '0.75rem' }}
          >
            {t('purchases.form.scanBarcode')}
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<IconPlus />}
            onClick={addDetailWithSearch}
            sx={{ fontSize: '0.75rem' }}
          >
            {t('purchases.form.addBySearch')}
          </Button>
        </Box>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {fields.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchases.form.noItems')}
                </Typography>
              ) : (
                fields.map((field, index) => (
                  <MobileDetailCard
                    key={field.id}
                    index={index}
                    onRemove={() => remove(index)}
                  />
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchases.form.product')}</TableCell>
                    <TableCell>{t('purchases.form.unit')}</TableCell>
                    <TableCell align="right">{t('purchases.form.quantity')}</TableCell>
                    <TableCell align="right">{t('purchases.form.price')}</TableCell>
                    <TableCell align="right">{t('purchases.form.discount')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.tax')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.total')}</TableCell>
                    <TableCell />
                  </TableRow>
                </TableHead>
                <TableBody>
                  {fields.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchases.form.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    fields.map((field, index) => (
                      <TableRow key={field.id}>
                        <TableCell>{watch(`details.${index}.productName`)}</TableCell>
                        <TableCell>{watch(`details.${index}.unitName`)}</TableCell>
                        
                        {/* الكمية */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.quantity`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.quantity`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.price`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* السعر */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.price`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.price`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.discountPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 120,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الخصم */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.discountPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.discountPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e, `details.${index}.taxPercent`);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الضريبة */}
                        <TableCell align="right">
                          <Controller
                            name={`details.${index}.taxPercent`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                type="number"
                                size="small"
                                name={`details.${index}.taxPercent`}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    handleFieldKeyDown(e);
                                  }
                                }}
                                onBlur={() => {
                                  setTimeout(() => recalculateAll(), 50);
                                }}
                                onFocus={(e) => e.target.select()}
                                sx={{
                                  width: 100,
                                  '& input[type=number]': {
                                    '-moz-appearance': 'textfield',
                                    textAlign: 'right',
                                  },
                                  '& input[type=number]::-webkit-outer-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                  '& input[type=number]::-webkit-inner-spin-button': {
                                    '-webkit-appearance': 'none',
                                    margin: 0,
                                  },
                                }}
                                inputProps={{
                                  step: "0.01",
                                  inputMode: 'decimal'
                                }}
                              />
                            )}
                          />
                        </TableCell>

                        {/* الإجمالي */}
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>

                        <TableCell>
                          <IconButton
                            onClick={() => remove(index)}
                            size="small"
                            color="error"
                          >
                            <IconTrash size={16} />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* Purchase Order Select Dialog */}
      <PurchaseOrderSelectDialog
        open={purchaseOrderSelectOpen}
        onClose={() => setPurchaseOrderSelectOpen(false)}
        onSelect={handlePurchaseOrderSelect}
      />

      {/* Product Price Search Dialog */}
      <ProductPriceSearchDialog
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={handleProductPriceSelect}
      />

      {/* Barcode Scanner */}
      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />

      {/* Alert Snackbar */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseForm;


============================================================
FILE: src/Pages/purchases/components/PurchaseOrderSelectDialog.tsx
============================================================
// File: src/pages/purchases/components/PurchaseOrderSelectDialog.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip,
  CircularProgress
} from '@mui/material';
import { IconSearch, IconX } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as purchaseOrdersApi from 'src/utils/api/pagesApi/purchaseOrdersApi';
import { PurchaseOrder } from 'src/utils/api/pagesApi/purchaseOrdersApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (purchaseOrder: PurchaseOrder) => void;
}

const PurchaseOrderSelectDialog: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const [searchQuery, setSearchQuery] = useState('');
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<PurchaseOrder[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (open) {
      loadPurchaseOrders();
    }
  }, [open]);

  useEffect(() => {
    if (searchQuery.trim()) {
      const filtered = purchaseOrders.filter(po =>
        po.referenceDocNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
        po.supplier?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        po.warehouse?.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredOrders(filtered);
    } else {
      setFilteredOrders(purchaseOrders);
    }
  }, [searchQuery, purchaseOrders]);

  const loadPurchaseOrders = async () => {
    try {
      setLoading(true);
      const orders = await purchaseOrdersApi.getAll();
      const submittedOrders = orders.filter(po => po.status === 3);
      setPurchaseOrders(submittedOrders);
      setFilteredOrders(submittedOrders);
    } catch (error) {
      } finally {
      setLoading(false);
    }
  };

  const handleSelect = async (purchaseOrder: PurchaseOrder) => {
    try {
      const fullPurchaseOrder = await purchaseOrdersApi.getByIdWithDetails(purchaseOrder.id!);
      onSelect(fullPurchaseOrder);
      onClose();
    } catch (error) {
      onSelect(purchaseOrder);
      onClose();
    }
  };

  const handleClose = () => {
    setSearchQuery('');
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('purchases.form.selectPurchaseOrder')}
          <IconButton onClick={handleClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box mb={2}>
          <TextField
            fullWidth
            placeholder={t('purchases.form.searchPurchaseOrders')}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
          />
        </Box>

        <Box sx={{ maxHeight: '400px', overflow: 'auto' }}>
          {loading ? (
            <Box textAlign="center" py={4}>
              <CircularProgress />
              <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
            </Box>
          ) : filteredOrders.length === 0 ? (
            <Typography color="text.secondary" textAlign="center" py={4}>
              {searchQuery ? t('common.noSearchResults') : t('purchases.form.noSubmittedPO')}
            </Typography>
          ) : (
            <List>
              {filteredOrders.map((order) => (
                <ListItem key={order.id} disablePadding>
                  <ListItemButton onClick={() => handleSelect(order)}>
                    <ListItemText
                      primary={
                        <Box>
                          <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
                            {order.referenceDocNumber}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.code')}: {order.code}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.supplier')}: {order.supplier?.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.warehouse')}: {order.warehouse?.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.date')}: {new Date(order.date1).toLocaleDateString()}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.total')}: {order.total.toFixed(2)}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.itemsCount')}: {order.details?.length || 0}
                          </Typography>
                          <Box mt={1}>
                            <Chip
                              label={t('purchases.status.submitted')}
                              color="primary"
                              size="small"
                            />
                          </Box>
                        </Box>
                      }
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose}>{t('common.cancel')}</Button>
      </DialogActions>
    </Dialog>
  );
};

export default PurchaseOrderSelectDialog;


============================================================
FILE: src/Pages/purchases/components/PurchaseRow.tsx
============================================================
// File: src/pages/purchases/components/PurchaseRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Chip
} from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

interface Props {
  purchase: Purchase;
  onEdit: () => void;
  onView: () => void;
}

const PurchaseRow: React.FC<Props> = ({ purchase, onEdit, onView }) => {
  const { t } = useTranslation();

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchases.status.pending');
      case 3:
        return t('purchases.status.submitted');
      default:
        return '-';
    }
  };

  const getStatusColor = (status: number | undefined) => {
    switch (status) {
      case 1:
        return 'warning';
      case 3:
        return 'success';
      default:
        return 'default';
    }
  };

  const renderPurchaseOrderInfo = () => {
    if (purchase.purchaseOrder) {
      return `${purchase.purchaseOrder.referenceDocNumber} (${purchase.purchaseOrder.code})`;
    }
    return t('purchases.table.directInvoice');
  };

  const handleAction = () => {
    if (purchase.status === 3) {
      onView(); // Submitted - View only
    } else {
      onEdit(); // Pending - Edit
    }
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography variant="h6" component="div">
              {purchase.referenceDocNumber}
            </Typography>
            <Box>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.purchaseOrder')}: {renderPurchaseOrderInfo()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.supplier')}: {purchase.supplier?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.warehouse')}: {purchase.warehouse?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.invoiceDate')}: {new Date(purchase.date1).toLocaleDateString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.total')}: {purchase.total.toFixed(2)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchases.table.itemsCount')}: {purchase.details?.length || 0}
              </Typography>
            </Box>
            <Chip
              label={renderStatus(purchase.status)}
              color={getStatusColor(purchase.status) as any}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            />
          </Stack>

          <IconButton onClick={handleAction}>
            {purchase.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default PurchaseRow;


============================================================
FILE: src/Pages/purchases/components/PurchaseTable.tsx
============================================================
// File: src/pages/purchases/components/PurchaseTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

interface Props {
  rows: Purchase[];
  onEdit: (purchase: Purchase) => void;
  onView: (purchase: Purchase) => void;
}

const PurchaseTable: React.FC<Props> = ({ rows, onEdit, onView }) => {
  const { t } = useTranslation();

  const handleAction = (row: Purchase) => {
    if (!row.id) {
      alert(t('purchases.errors.missingId'));
      return;
    }

    if (row.status === 3) {
      onView(row); // Submitted - View only
    } else {
      onEdit(row); // Pending - Edit
    }
  };

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchases.status.pending');
      case 3:
        return t('purchases.status.submitted');
      default:
        return '-';
    }
  };

  const getStatusColor = (status: number | undefined) => {
    switch (status) {
      case 1:
        return 'warning';
      case 3:
        return 'success';
      default:
        return 'default';
    }
  };

  const renderPurchaseOrderInfo = (purchase: Purchase) => {
    if (purchase.purchaseOrder) {
      return `${purchase.purchaseOrder.referenceDocNumber} (${purchase.purchaseOrder.code})`;
    }
    return t('purchases.table.directInvoice');
  };

  const cols: GridColDef[] = [
    {
      field: 'referenceDocNumber',
      headerName: t('purchases.table.invoiceNumber'),
      flex: 1,
      minWidth: 150
    },
    {
      field: 'purchaseOrder',
      headerName: t('purchases.table.purchaseOrder'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => renderPurchaseOrderInfo(row)
    },
    {
      field: 'supplier',
      headerName: t('purchases.table.supplier'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.supplier?.name || 'N/A'
    },
    {
      field: 'warehouse',
      headerName: t('purchases.table.warehouse'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.warehouse?.name || 'N/A'
    },
    {
      field: 'date1',
      headerName: t('purchases.table.invoiceDate'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString();
        } catch {
          return '-';
        }
      }
    },
    {
      field: 'total',
      headerName: t('purchases.table.total'),
      width: 120,
      renderCell: ({ value }) => `${Number(value).toFixed(2)}`
    },
    {
      field: 'details',
      headerName: t('purchases.table.itemsCount'),
      width: 120,
      renderCell: ({ value }) => `${value?.length || 0} ${t('purchases.table.items')}`
    },
    {
      field: 'status',
      headerName: t('purchases.table.status'),
      width: 110,
      renderCell: ({ value }) => (
        <Chip
          label={renderStatus(value)}
          color={getStatusColor(value) as any}
          size="small"
        />
      )
    },
    {
      field: 'actions',
      headerName: '',
      width: 110,
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => handleAction(row)}>
            {row.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => {
        if (!row.id) {
          return `temp-${Math.random()}`;
        }
        return row.id;
      }}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default PurchaseTable;


============================================================
FILE: src/Pages/purchases/components/ViewPurchasePage.tsx
============================================================
// File: src/pages/purchases/ViewPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  Chip} from '@mui/material';
import { IconArrowLeft, IconHome, IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';

const ViewPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [purchase, setPurchase] = useState<Purchase | null>(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPurchase = async () => {
      try {
        if (!id) {
          throw new Error(t('purchases.errors.idRequired'));
        }
        const purchaseData = await apiSrv.getById(id);
        setPurchase(purchaseData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchPurchase();
  }, [id, t]);

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return { label: t('purchases.status.pending'), color: 'warning' };
      case 3:
        return { label: t('purchases.status.submitted'), color: 'success' };
      default:
        return { label: '-', color: 'default' };
    }
  };

  const handleEdit = () => {
    if (purchase?.status === 1) {
      navigate(`/purchases/purchases/edit/${purchase.id}`);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="xl" sx={{ py: 2 }}>
        <Box textAlign="center" py={4}>
          <Typography>{t('common.loading')}</Typography>
        </Box>
      </Container>
    );
  }

  if (error || !purchase) {
    return (
      <Container maxWidth="xl" sx={{ py: 2 }}>
        <Box textAlign="center" py={4}>
          <Typography color="error">{error || t('purchases.errors.purchaseNotFound')}</Typography>
        </Box>
      </Container>
    );
  }

  const statusInfo = renderStatus(purchase.status);

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchases');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchases.title')}
          </Link>
          <Typography color="text.primary">
            {purchase.status === 1 ? t('purchases.form.editTitle') : t('purchases.view.title')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {purchase.status === 1 ? t('purchases.form.editTitle') : t('purchases.view.title')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchases.form.total')}: {purchase.total?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchases')}
          >
            {t('common.back')}
          </Button>

          {purchase.status === 1 && (
            <Button
              variant="contained"
              startIcon={<IconEdit />}
              onClick={handleEdit}
            >
              {t('common.edit')}
            </Button>
          )}
        </Stack>
      </Box>

      {/* Purchase Order Info */}
      {purchase.purchaseOrder && (
        <Paper sx={{ p: 2, mb: 2, backgroundColor: 'info.light' }}>
          <Typography variant="h6" gutterBottom>
            {t('purchases.form.linkedToPO')}: {purchase.purchaseOrder.referenceDocNumber}
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poDate')}:</strong> {purchase.purchaseOrder.date1 ? new Date(purchase.purchaseOrder.date1).toLocaleDateString() : t('common.notSpecified')}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.poTotal')}:</strong> {purchase.purchaseOrder.total?.toFixed(2) || '0.00'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={3}>
              <Typography variant="body2">
                <strong>{t('purchases.form.itemsCount')}:</strong> {purchase.purchaseOrder.details?.length || 0}
              </Typography>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* Form Fields - Read Only */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.invoiceNumber')}
            value={purchase.referenceDocNumber}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.invoiceDate')}
            value={purchase.date1.split('T')[0]}
            type="date"
            fullWidth
            size="small"
            InputLabelProps={{ shrink: true }}
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.supplier')}
            value={purchase.supplier?.name || 'N/A'}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <TextField
            label={t('purchases.form.warehouse')}
            value={purchase.warehouse?.name || 'N/A'}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>
      </Grid>

      {/* Status and Discount & Tax - Read Only */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Typography variant="body1">{t('purchases.form.status')}:</Typography>
            <Chip
              label={statusInfo.label}
              color={statusInfo.color as any}
              size="small"
            />
          </Box>
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            label={t('purchases.form.totalDiscount') + ' %'}
            value={purchase.discountPercent}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            label={t('purchases.form.totalTax') + ' %'}
            value={purchase.taxPercent}
            fullWidth
            size="small"
            InputProps={{ readOnly: true }}
          />
        </Grid>
      </Grid>

      {/* Summary */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.subTotal')}: {purchase.subTotal?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.discountValue')}: {purchase.discountValue?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchases.form.taxValue')}: {purchase.taxValue?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchases.form.total')}: {purchase.total?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section - Read Only */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('purchases.form.items')}
        </Typography>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {purchase.details.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchases.form.noItems')}
                </Typography>
              ) : (
                purchase.details.map((detail, index) => (
                  <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
                    <CardContent sx={{ p: 2 }}>
                      <Typography variant="subtitle2" sx={{ mb: 1 }}>#{index + 1}</Typography>
                      <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
                        {detail.unitName} — {detail.unitName}
                      </Typography>

                      <Grid container spacing={1}>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.quantity')}: {detail.quantity}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.price')}: {detail.price.toFixed(2)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.discount')}: {detail.discountPercent}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="body2" color="text.secondary">
                            {t('purchases.form.tax')}: {detail.taxPercent}%
                          </Typography>
                        </Grid>
                      </Grid>

                      <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
                        {t('purchases.form.total')}: {detail.total?.toFixed(2) || '0.00'}
                      </Typography>
                    </CardContent>
                  </Card>
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>{t('purchases.form.product')}</TableCell>
                    <TableCell>{t('purchases.form.unit')}</TableCell>
                    <TableCell align="right">{t('purchases.form.quantity')}</TableCell>
                    <TableCell align="right">{t('purchases.form.price')}</TableCell>
                    <TableCell align="right">{t('purchases.form.discount')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.tax')} %</TableCell>
                    <TableCell align="right">{t('purchases.form.total')}</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {purchase.details.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchases.form.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    purchase.details.map((detail, index) => (
                      <TableRow key={index}>
                        <TableCell>{detail.unitName}</TableCell>
                        <TableCell>{detail.unitName}</TableCell>
                        <TableCell align="right">{detail.quantity}</TableCell>
                        <TableCell align="right">{detail.price.toFixed(2)}</TableCell>
                        <TableCell align="right">{detail.discountPercent}%</TableCell>
                        <TableCell align="right">{detail.taxPercent}%</TableCell>
                        <TableCell align="right">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {detail.total?.toFixed(2) || '0.00'}
                          </Typography>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper></Container>
  );
};

export default ViewPurchasePage;


============================================================
FILE: src/Pages/purchases/AddPurchasePage.tsx
============================================================
// File: src/pages/purchases/AddPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useMediaQuery, useTheme, Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PurchaseForm from './components/PurchaseForm';
import MobilePurchaseForm from './components/mobile/MobilePurchaseForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const AddPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [suppliersData, warehousesData] = await Promise.all([
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [t]);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Adding purchase (data):', data);
      await apiSrv.add(data);
      setSuccess(t('purchases.messages.addSuccess'));
    } catch (e: any) {
      const msg = e?.message || t('purchases.errors.addFailed');
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box textAlign="center" py={4}>
        <CircularProgress />
        <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseForm
          mode="add"
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      <Snackbar open={!!success} autoHideDuration={4000} onClose={() => setSuccess('')}>
        <Alert severity="success" onClose={() => setSuccess('')}>
          {success}
        </Alert>
      </Snackbar>
    </>
  );
};

export default AddPurchasePage;


============================================================
FILE: src/Pages/purchases/EditPurchasePage.tsx
============================================================
// File: src/pages/purchases/EditPurchasePage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useMediaQuery, useTheme, Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PurchaseForm from './components/PurchaseForm';
import MobilePurchaseForm from './components/mobile/MobilePurchaseForm';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

const EditPurchasePage: React.FC = () => {
  const { t } = useTranslation();
  const { id } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [purchase, setPurchase] = useState<Purchase | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!id) {
          throw new Error(t('purchases.errors.idRequired'));
        }
        const [purchaseData, suppliersData, warehousesData] = await Promise.all([
          apiSrv.getById(id),
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setPurchase(purchaseData);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || t('purchases.errors.dataLoadFailed'));
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id, t]);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Updating purchase:', data);
      if (!purchase) {
        throw new Error(t('purchases.errors.noPurchaseLoaded'));
      }
      await apiSrv.update({ ...data, id: purchase.id! });
      setSuccess(t('purchases.messages.updateSuccess'));
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.message || t('purchases.errors.updateFailed');
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (error && !purchase) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  if (!purchase) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{t('purchases.errors.purchaseNotFound')}</Typography>
      </Box>
    );
  }

  return (
    <>
      {isMobile ? (
        <MobilePurchaseForm
          mode="edit"
          initialValues={purchase}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      ) : (
        <PurchaseForm
          mode="edit"
          initialValues={purchase}
          suppliers={suppliers}
          warehouses={warehouses}
          onSubmit={handleSubmit}
        />
      )}

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      <Snackbar open={!!success} autoHideDuration={4000} onClose={() => setSuccess('')}>
        <Alert severity="success" onClose={() => setSuccess('')}>
          {success}
        </Alert>
      </Snackbar>
    </>
  );
};

export default EditPurchasePage;


============================================================
FILE: src/Pages/purchases/PurchasesPage.tsx
============================================================
// File: src/pages/purchases/PurchasesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Typography, Fab, Badge, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import ActionsBar from '../purchase-orders/components/ActionsBar';
import PurchaseTable from './components/PurchaseTable';
import PurchaseRow from './components/PurchaseRow';
import MobilePurchasesFilter, { PurchasesFilterState } from './components/mobile/MobilePurchasesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/purchaseApi';
import * as suppliersApi from 'src/utils/api/pagesApi/suppliersApi';
import * as warehousesApi from 'src/utils/api/pagesApi/warehousesApi';
import { Purchase } from 'src/utils/api/pagesApi/purchaseApi';
import PageHeader from './components/PageHeader';

const PurchasesPage: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [purchases, setPurchases] = React.useState<Purchase[]>([]);
  const [suppliers, setSuppliers] = React.useState<Array<{ id: string; name: string }>>([]);
  const [warehouses, setWarehouses] = React.useState<Array<{ id: string; name: string }>>([]);
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<PurchasesFilterState>({
    searchQuery: '',
    status: '',
    supplierId: '',
    warehouseId: '',
    dateFrom: '',
    dateTo: '',
    sortBy: 'date1',
    sortOrder: 'desc'
  });

  const fetchPurchases = async () => {
    try {
      const purchasesData = await apiSrv.getAll();
      setPurchases(purchasesData);
    } catch (e: any) {
      setErr(e?.message || t('purchases.errors.loadFailed'));
    }
  };

  const fetchSuppliers = async () => {
    try {
      const suppliersData = await suppliersApi.getAll();
      setSuppliers(suppliersData.map((s: { id: any; name: any; }) => ({ id: s.id, name: s.name })));
    } catch (e: any) {
      }
  };

  const fetchWarehouses = async () => {
    try {
      const warehousesData = await warehousesApi.getAll();
      setWarehouses(warehousesData.map((w: { id: any; name: any; }) => ({ id: w.id, name: w.name })));
    } catch (e: any) {
      }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await Promise.all([
          fetchPurchases(),
          fetchSuppliers(),
          fetchWarehouses()
        ]);
      }
      catch (e: any) { 
        setErr(e?.message || t('purchases.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? purchases.filter(p => 
      p.referenceDocNumber.toLowerCase().includes(query.toLowerCase()) ||
      p.supplier?.name.toLowerCase().includes(query.toLowerCase()) ||
      p.warehouse?.name.toLowerCase().includes(query.toLowerCase()) ||
      p.purchaseOrder?.referenceDocNumber.toLowerCase().includes(query.toLowerCase())
    ) : purchases,
    [purchases, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...purchases];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(purchase => 
        purchase.referenceDocNumber.toLowerCase().includes(searchLower) ||
        purchase.supplier?.name.toLowerCase().includes(searchLower) ||
        purchase.warehouse?.name.toLowerCase().includes(searchLower) ||
        purchase.purchaseOrder?.referenceDocNumber.toLowerCase().includes(searchLower) ||
        purchase.id?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      result = result.filter(purchase => purchase.status.toString() === mobileFilters.status);
    }

    // فلتر المورد
    if (mobileFilters.supplierId) {
      result = result.filter(purchase => purchase.supplierId === mobileFilters.supplierId);
    }

    // فلتر المخزن
    if (mobileFilters.warehouseId) {
      result = result.filter(purchase => purchase.warehouseId === mobileFilters.warehouseId);
    }

    // فلتر التاريخ
    if (mobileFilters.dateFrom) {
      result = result.filter(purchase => {
        const purchaseDate = new Date(purchase.date1).toISOString().split('T')[0];
        return purchaseDate >= mobileFilters.dateFrom;
      });
    }

    if (mobileFilters.dateTo) {
      result = result.filter(purchase => {
        const purchaseDate = new Date(purchase.date1).toISOString().split('T')[0];
        return purchaseDate <= mobileFilters.dateTo;
      });
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'date1') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [purchases, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    if (mobileFilters.supplierId) count++;
    if (mobileFilters.warehouseId) count++;
    if (mobileFilters.dateFrom || mobileFilters.dateTo) count++;
    return count;
  };

  const handleAdd = () => {
    navigate('/purchases/purchases/add');
  };

  const handleEdit = (purchase: Purchase) => {
    navigate(`/purchases/purchases/edit/${purchase.id}`);
  };

  const handleView = (purchase: Purchase) => {
    navigate(`/purchases/purchases/view/${purchase.id}`);
  };

  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>

      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={handleAdd}
          searchPlaceholder={t('purchases.searchPlaceholder')}
          addButtonText={t('purchases.addButton')}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={handleAdd}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('purchases.addButton')}
          </Button>
        </Box>
      )}

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('purchases.listTitle')} {` (${filtered.length})`}
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>{t('common.loading')}</Typography>
          </Box>
        ) : filtered.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {(isMobile ? mobileFilters.searchQuery : query) || getActiveFiltersCount() > 0 
                ? t('common.noSearchResults') 
                : t('purchases.noData')
              }
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? filtered.map(p => (
                  <PurchaseRow
                    key={p.id}
                    purchase={p}
                    onEdit={() => handleEdit(p)}
                    onView={() => handleView(p)}
                  />
                ))
              : (
                  <PurchaseTable
                    rows={filtered}
                    onEdit={handleEdit}
                    onView={handleView}
                  />
                )}
          </>
        )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobilePurchasesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          suppliers={suppliers}
          warehouses={warehouses}
          totalResults={purchases.length}
          filteredResults={filtered.length}
        />
      )}</Container>
  );
};

export default PurchasesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/safes/components/mobile/MobileSafesFilter.tsx
============================================================
// File: src/pages/safes/components/mobile/MobileSafesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface SafesFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SafesFilterState;
  onFiltersChange: (filters: SafesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSafesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<SafesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('safes.active') },
    { value: 'false', label: t('safes.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('safes.name') },
    { value: 'typeName', label: t('safes.type') },
    { value: 'collectionFeePercent', label: t('safes.collectionFeePercent') },
    { value: 'isActive', label: t('safes.status') }
  ];

  const handleLocalChange = (field: keyof SafesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: SafesFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('safes.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('safes.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('safes.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('safes.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('safes.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('safes.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('safes.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('safes.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('safes.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('safes.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('safes.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('safes.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('safes.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('safes.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('safes.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('safes.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('safes.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileSafesFilter;


============================================================
FILE: src/Pages/safes/components/mobile/SafesCards.tsx
============================================================
// File: src/pages/safes/components/mobile/SafesCards.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Grid,
  Chip
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Safe } from 'src/utils/api/pagesApi/safesApi';
import { useTranslation } from 'react-i18next';

interface Props {
  safes: Safe[];
  onEdit: (safe: Safe) => void;
  loading: boolean;
}

const SafesCards: React.FC<Props> = ({ safes, onEdit, loading }) => {
  const { t } = useTranslation();

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography>{t('common.loading')}</Typography>
      </Box>
    );
  }

  if (safes.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <Typography variant="body2" color="text.secondary">
          {t('safes.noSafes')}
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={2}>
      {safes.map((safe) => (
        <Grid item xs={12} sm={6} md={4} key={safe.id}>
          <Card sx={{ 
            height: '100%',
            borderRadius: { xs: 1, sm: 2 },
            boxShadow: { xs: 1, sm: 2 }
          }}>
            <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
              <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                <Stack spacing={1} flex={1}>
                  <Typography 
                    variant="h6" 
                    component="div"
                    sx={{ 
                      fontSize: { xs: '1rem', sm: '1.25rem' },
                      fontWeight: 'bold'
                    }}
                  >
                    {safe.name}
                  </Typography>
                  
                  <Box>
                    <Chip
                      label={t(`safes.types.${safe.typeName.toLowerCase()}`)}
                      color="primary"
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                  
                  {safe.accountNumber && (
                    <Typography 
                      variant="body2" 
                      color="text.secondary"
                      sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                    >
                      {t('safes.accountNumber')}: {safe.accountNumber}
                    </Typography>
                  )}
                  
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
                  >
                    {t('safes.collectionFeePercent')}: {safe.collectionFeePercent}%
                  </Typography>
                  
                  <Box sx={{ mt: 1 }}>
                    <Chip
                      label={safe.isActive ? t('safes.active') : t('safes.inactive')}
                      color={safe.isActive ? 'success' : 'default'}
                      size="small"
                    />
                  </Box>
                </Stack>
                
                <IconButton 
                  onClick={() => onEdit(safe)} 
                  size="small"
                  sx={{
                    backgroundColor: 'action.hover',
                    '&:hover': {
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText'
                    }
                  }}
                >
                  <IconEdit size={18} />
                </IconButton>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default SafesCards;


============================================================
FILE: src/Pages/safes/components/ActionsBar.tsx
============================================================
// File: src/pages/safes/components/ActionsBar.tsx
import React from 'react';
import {
  Box,
  TextField,
  Button,
  Stack,
  InputAdornment
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (query: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({
  query,
  onQueryChange,
  onAdd
}) => {
  const { t } = useTranslation();

  return (
    <Box sx={{ mb: 3 }}>
      <Stack 
        direction={{ xs: 'column', sm: 'row' }} 
        spacing={2} 
        alignItems="center" 
        justifyContent="space-between"
      >
        <TextField
          placeholder={t('safes.searchPlaceholder')}
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <IconSearch size={20} />
              </InputAdornment>
            )
          }}
          sx={{ width: { xs: '100%', sm: 300 } }}
        />
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={onAdd}
          sx={{ minWidth: 150 }}
        >
          {t('safes.add')}
        </Button>
      </Stack>
    </Box>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/safes/components/PageHeader.tsx
============================================================
// File: src/pages/safes/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { safesImportExportConfig } from '../../components/configs/importExportConfigs';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  exportData: Safe[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...safesImportExportConfig,
    onExport: () => exportData.map(safe => ({
      name: safe.name,
      typeName: safe.typeName,
      accountNumber: safe.accountNumber,
      collectionFeePercent: safe.collectionFeePercent,
      isActive: safe.isActive
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('safes.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/safes/components/SafeForm.tsx
============================================================
// File: src/pages/safes/components/SafeForm.tsx
import React, { useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Stack,
  Switch,
  FormControlLabel,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Safe;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SafeForm: React.FC<Props> = ({
  open,
  mode,
  initialValues,
  onClose,
  onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const { control, handleSubmit, reset, formState: { errors } } = useForm({
    defaultValues: {
      name: '',
      typeName: 'Safe',
      accountNumber: '',
      collectionFeePercent: 0,
      isActive: true
    }
  });

  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      reset({
        name: initialValues.name,
        typeName: 'Safe',
        accountNumber: initialValues.accountNumber || '',
        collectionFeePercent: initialValues.collectionFeePercent,
        isActive: initialValues.isActive
      });
    } else if (mode === 'add') {
      reset({
        name: '',
        typeName: 'Safe',
        accountNumber: '',
        collectionFeePercent: 0,
        isActive: true
      });
    }
  }, [mode, initialValues, reset]);

  const submit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const submitData = mode === 'edit' 
        ? { ...data, id: initialValues?.id }
        : data;

      await onSubmit(submitData, saveAction);
      
      if (saveAction === 'saveAndNew') {
        reset({
          name: '',
          typeName: 'Safe',
          accountNumber: '',
          collectionFeePercent: 0,
          isActive: true
        });
      }
    } catch (error) {
      } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="sm" 
      fullWidth
      fullScreen={fullScreen}
    >
      <DialogTitle>
        {mode === 'add' ? t('safes.add') : t('safes.edit')}
      </DialogTitle>
      
      <DialogContent>
        <Stack spacing={3} sx={{ mt: 1 }}>
          <Controller
            name="name"
            control={control}
            rules={{ required: t('safes.validation.nameRequired') }}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.name')}
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="accountNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.accountNumber')}
                fullWidth
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="collectionFeePercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('safes.collectionFeePercent')}
                type="number"
                fullWidth
                inputProps={{ step: 0.01, min: 0, max: 100 }}
                disabled={isSubmitting}
              />
            )}
          />

          <Controller
            name="isActive"
            control={control}
            render={({ field }) => (
              <FormControlLabel
                control={
                  <Switch
                    checked={field.value}
                    onChange={field.onChange}
                    disabled={isSubmitting}
                  />
                }
                label={t('safes.isActive')}
              />
            )}
          />
        </Stack>
      </DialogContent>
      
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} disabled={isSubmitting}>
          {t('common.cancel')}
        </Button>
        
        {mode === 'add' && (
          <Button
            onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
            disabled={isSubmitting}
            variant="outlined"
          >
            {t('common.saveAndNew')}
          </Button>
        )}
        
        <Button
          onClick={handleSubmit((data) => submit(data, 'save'))}
          disabled={isSubmitting}
          variant="contained"
        >
          {isSubmitting ? t('common.saving') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default SafeForm;


============================================================
FILE: src/Pages/safes/components/SafesTable.tsx
============================================================
// File: src/pages/safes/components/SafesTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface Props {
  rows: Safe[];
  onEdit: (safe: Safe) => void;
}

const SafesTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef<Safe>[] = [
    { field: 'name', headerName: t('safes.name'), flex: 1, minWidth: 180 },
    { 
      field: 'typeName', 
      headerName: t('safes.type'), 
      flex: 0.8,
      renderCell: ({ value }) => (
        <Chip 
          label={t(`safes.types.${value.toLowerCase()}`)} 
          color="primary" 
          variant="outlined" 
          size="small" 
        />
      )
    },
    { field: 'accountNumber', headerName: t('safes.accountNumber'), flex: 1,
      renderCell: ({ value }) => value || '-' },
    { 
      field: 'collectionFeePercent', 
      headerName: t('safes.collectionFeePercent'), 
      flex: 0.8,
      renderCell: ({ value }) => `${value}%`
    },
    { 
      field: 'isActive', 
      headerName: t('safes.status'), 
      width: 110,
      renderCell: ({ value }) => (
        <Chip 
          label={value ? t('safes.active') : t('safes.inactive')} 
          color={value ? 'success' : 'default'} 
          size="small" 
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={0.5}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default SafesTable;


============================================================
FILE: src/Pages/safes/SafesPage.tsx
============================================================
// File: src/pages/safes/SafesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Button, Fab, Badge
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SafesTable from './components/SafesTable';
import SafesCards from './components/mobile/SafesCards';
import SafeForm from './components/SafeForm';
import MobileSafesFilter, { SafesFilterState } from './components/mobile/MobileSafesFilter';
import * as apiSrv from 'src/utils/api/pagesApi/safesApi';
import { Safe } from 'src/utils/api/pagesApi/safesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const SafesPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [safes, setSafes] = React.useState<Safe[]>([]);
  const { canAdd = true } = props; // Default to true if not provided
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Safe;
  }>({ open: false, mode: 'add', current: undefined });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<SafesFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchSafes = async () => {
    try {
      const safesData = await apiSrv.getAll();
      setSafes(safesData);
    } catch (e: any) {
      setErr(e?.message || t('safes.errors.loadFailed'));
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchSafes();
      }
      catch (e: any) { 
        setErr(e?.message || t('safes.errors.loadFailed')); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, [t]);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? safes.filter(s => 
      s.name.toLowerCase().includes(query.toLowerCase())
    ) : safes,
    [safes, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...safes];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(safe => 
        safe.name.toLowerCase().includes(searchLower) ||
        safe.typeName.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(safe => safe.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [safes, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSafes();
    } catch (e: any) {      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchSafes();
    } catch (e: any) {      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('safes.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? (
              <SafesCards
                safes={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
                loading={loading}
              />
            )
          : (
              <SafesTable
                rows={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileSafesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={safes.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <SafeForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default SafesPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/settings/components/PrinterSettings.tsx
============================================================
// File: src/pages/settings/PrinterSettingsPage.tsx
import React from 'react';
import {
  Container, Card, CardContent, Typography, Switch, FormControlLabel,
  TextField, Select, MenuItem, FormControl, InputLabel,
  Button, Box, Alert, Snackbar, Grid, Divider, Paper,
  List, ListItem, ListItemIcon, ListItemText, Chip
} from '@mui/material';
import { 
  IconPrinter, IconUsb, IconNetwork, 
  IconCheck, IconX, IconTestPipe, IconDeviceFloppy 
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { useThermalPrint } from 'src/hooks/useThermalPrint';

const PrinterSettingsPage: React.FC = () => {
  const { t } = useTranslation();
  const [snackbar, setSnackbar] = React.useState({ 
    open: false, 
    message: '', 
    severity: 'success' as 'success' | 'error' | 'warning' 
  });
  
  const [settings, setSettings] = React.useState({
    thermalEnabled: localStorage.getItem('thermal_printer_enabled') !== 'false',
    printerType: localStorage.getItem('thermal_printer_type') || 'usb',
    networkIp: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
    networkPort: Number(localStorage.getItem('thermal_printer_port')) || 9100,
    autoConnect: localStorage.getItem('thermal_auto_connect') !== 'false',
    silentPrint: localStorage.getItem('thermal_silent_print') !== 'false'
  });

  const [connectionStatus, setConnectionStatus] = React.useState<{
    status: 'unknown' | 'connected' | 'disconnected' | 'testing';
    message: string;
  }>({ status: 'unknown', message: '' });

  const { print: thermalPrint } = useThermalPrint({
    printerType: settings.printerType as 'usb' | 'network',
    networkConfig: {
      ip: settings.networkIp,
      port: settings.networkPort
    }
  });

  // تحديث الإعدادات
  const updateSetting = (key: string, value: any) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  // حفظ الإعدادات
  const saveSettings = () => {
    try {
      localStorage.setItem('thermal_printer_enabled', settings.thermalEnabled.toString());
      localStorage.setItem('thermal_printer_type', settings.printerType);
      localStorage.setItem('thermal_printer_ip', settings.networkIp);
      localStorage.setItem('thermal_printer_port', settings.networkPort.toString());
      localStorage.setItem('thermal_auto_connect', settings.autoConnect.toString());
      localStorage.setItem('thermal_silent_print', settings.silentPrint.toString());
      
      setSnackbar({ 
        open: true, 
        message: t('settings.printer.saved'), 
        severity: 'success' 
      });
      
      // إعادة تحميل الصفحة لتطبيق الإعدادات
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } catch (error) {
      setSnackbar({ 
        open: true, 
        message: t('settings.printer.saveError'), 
        severity: 'error' 
      });
    }
  };

  // تفعيل سريع للطباعة الحرارية
  const quickEnable = () => {
    setSettings(prev => ({
      ...prev,
      thermalEnabled: true,
      printerType: 'usb',
      autoConnect: true,
      silentPrint: true
    }));
  };

  // اختبار الاتصال
  const testConnection = async () => {
    setConnectionStatus({ status: 'testing', message: t('settings.printer.testing') });
    
    try {
      const testContent = `
=================================
        اختبار الاتصال
=================================
التاريخ: ${new Date().toLocaleDateString('ar-EG')}
الوقت: ${new Date().toLocaleTimeString('ar-EG')}

نوع الطابعة: ${settings.printerType.toUpperCase()}
${settings.printerType === 'network' ? 
  `IP: ${settings.networkIp}:${settings.networkPort}` : 
  'USB Connection'
}

اختبار الطباعة الحرارية
Test Print for Thermal Printer

=================================
      اختبار ناجح ✓
=================================
      `;

      const result = await thermalPrint(testContent);

      // Type assertion for result
      const typedResult = result as { success: boolean; error?: string };

      if (typedResult.success) {
        setConnectionStatus({ 
          status: 'connected', 
          message: t('settings.printer.connectionSuccess') 
        });
        setSnackbar({
          open: true,
          message: t('settings.printer.testSuccess'),
          severity: 'success'
        });
      } else {
        setConnectionStatus({ 
          status: 'disconnected', 
          message: typedResult.error || t('settings.printer.connectionFailed') 
        });
        setSnackbar({
          open: true,
          message: t('settings.printer.testFailed'),
          severity: 'error'
        });
      }
    } catch (error: any) {
      setConnectionStatus({ 
        status: 'disconnected', 
        message: error.message || t('settings.printer.connectionError') 
      });
      setSnackbar({
        open: true,
        message: t('settings.printer.testError'),
        severity: 'error'
      });
    }
  };

  // إعادة تعيين الإعدادات
  const resetSettings = () => {
    setSettings({
      thermalEnabled: false,
      printerType: 'usb',
      networkIp: '192.168.1.100',
      networkPort: 9100,
      autoConnect: true,
      silentPrint: true
    });
    
    // مسح البيانات المحفوظة
    localStorage.removeItem('thermal_usb_port');
    
    setSnackbar({
      open: true,
      message: t('settings.printer.resetSuccess'),
      severity: 'success'
    });
  };

  return (
    <Container maxWidth="md">
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" gutterBottom>
          {t('settings.printer.title')}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {t('settings.printer.description')}
        </Typography>
      </Box>

      {/* حالة الاتصال */}
      {connectionStatus.status !== 'unknown' && (
        <Alert 
          severity={
            connectionStatus.status === 'connected' ? 'success' : 
            connectionStatus.status === 'testing' ? 'info' : 'error'
          }
          sx={{ mb: 3 }}
          icon={
            connectionStatus.status === 'connected' ? <IconCheck /> :
            connectionStatus.status === 'testing' ? <IconTestPipe /> : <IconX />
          }
        >
          {connectionStatus.message}
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* الإعدادات الأساسية */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                <IconPrinter />
                <Typography variant="h6">
                  {t('settings.printer.basicSettings')}
                </Typography>
              </Box>

              {!settings.thermalEnabled && (
                <Alert 
                  severity="info" 
                  sx={{ mb: 3 }}
                  action={
                    <Button color="inherit" size="small" onClick={quickEnable}>
                      {t('settings.printer.quickEnable')}
                    </Button>
                  }
                >
                  {t('settings.printer.disabledInfo')}
                </Alert>
              )}

              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={settings.thermalEnabled}
                        onChange={(e) => updateSetting('thermalEnabled', e.target.checked)}
                      />
                    }
                    label={t('settings.printer.enableThermal')}
                  />
                </Grid>

                {settings.thermalEnabled && (
                  <>
                    <Grid item xs={12}>
                      <Divider />
                    </Grid>

                    <Grid item xs={12} md={6}>
                      <FormControl fullWidth>
                        <InputLabel>{t('settings.printer.type')}</InputLabel>
                        <Select
                          value={settings.printerType}
                          onChange={(e) => updateSetting('printerType', e.target.value)}
                          label={t('settings.printer.type')}
                        >
                          <MenuItem value="usb">
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <IconUsb size={16} />
                              USB Printer
                            </Box>
                          </MenuItem>
                          <MenuItem value="network">
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <IconNetwork size={16} />
                              {t('settings.printer.network')} Printer
                            </Box>
                          </MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>

                    {settings.printerType === 'network' && (
                      <>
                        <Grid item xs={12} md={6}>
                          <TextField
                            fullWidth
                            label={t('settings.printer.ip')}
                            value={settings.networkIp}
                            onChange={(e) => updateSetting('networkIp', e.target.value)}
                            placeholder="192.168.1.100"
                            helperText={t('settings.printer.ipHelp')}
                          />
                        </Grid>
                        <Grid item xs={12} md={6}>
                          <TextField
                            fullWidth
                            label={t('settings.printer.port')}
                            type="number"
                            value={settings.networkPort}
                            onChange={(e) => updateSetting('networkPort', Number(e.target.value))}
                            placeholder="9100"
                            helperText={t('settings.printer.portHelp')}
                          />
                        </Grid>
                      </>
                    )}
                  </>
                )}
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* الإعدادات المتقدمة */}
        {settings.thermalEnabled && (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 3 }}>
                  {t('settings.printer.advancedSettings')}
                </Typography>

                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={settings.autoConnect}
                          onChange={(e) => updateSetting('autoConnect', e.target.checked)}
                        />
                      }
                      label={t('settings.printer.autoConnect')}
                    />
                    <Typography variant="caption" color="text.secondary" display="block">
                      {t('settings.printer.autoConnectDesc')}
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={6}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={settings.silentPrint}
                          onChange={(e) => updateSetting('silentPrint', e.target.checked)}
                        />
                      }
                      label={t('settings.printer.silentPrint')}
                    />
                    <Typography variant="caption" color="text.secondary" display="block">
                      {t('settings.printer.silentPrintDesc')}
                    </Typography>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        )}

        {/* معلومات النظام */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                {t('settings.printer.systemInfo')}
              </Typography>
              
              <List dense>
                <ListItem>
                  <ListItemIcon>
                    <IconCheck size={20} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Web Serial API"
                    secondary={
                      'serial' in navigator ? 
                        t('settings.printer.supported') : 
                        t('settings.printer.notSupported')
                    }
                  />
                  <Chip 
                    label={'serial' in navigator ? t('common.supported') : t('common.notSupported')}
                    color={'serial' in navigator ? 'success' : 'error'}
                    size="small"
                  />
                </ListItem>
                
                <ListItem>
                  <ListItemIcon>
                    <IconNetwork size={20} />
                  </ListItemIcon>
                  <ListItemText 
                    primary={t('settings.printer.networkPrinting')}
                    secondary={t('settings.printer.networkDesc')}
                  />
                  <Chip 
                    label={t('common.supported')}
                    color="success"
                    size="small"
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* الأزرار */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'space-between', flexWrap: 'wrap' }}>
              <Box sx={{ display: 'flex', gap: 2 }}>
                {settings.thermalEnabled && (
                  <Button
                    variant="outlined"
                    onClick={testConnection}
                    startIcon={<IconTestPipe />}
                    disabled={connectionStatus.status === 'testing'}
                  >
                    {connectionStatus.status === 'testing' ? 
                      t('settings.printer.testing') : 
                      t('settings.printer.testConnection')
                    }
                  </Button>
                )}
                
                <Button
                  variant="outlined"
                  color="error"
                  onClick={resetSettings}
                >
                  {t('settings.printer.reset')}
                </Button>
              </Box>

              <Button
                variant="contained"
                onClick={saveSettings}
                startIcon={<IconDeviceFloppy />}
                size="large"
              >
                {t('common.save')}
              </Button>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PrinterSettingsPage;


============================================================
FILE: src/Pages/Suppliers/components/mobile/MobileSuppliersFilter.tsx
============================================================
// File: src/pages/suppliers/components/mobile/MobileSuppliersFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface SuppliersFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: SuppliersFilterState;
  onFiltersChange: (filters: SuppliersFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileSuppliersFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<SuppliersFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('suppliers.active') },
    { value: 'false', label: t('suppliers.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('suppliers.name') },
    { value: 'phone', label: t('suppliers.phone') },
    { value: 'address', label: t('suppliers.address') },
    { value: 'createdOn', label: t('suppliers.created') },
    { value: 'isActive', label: t('suppliers.status') }
  ];

  const handleLocalChange = (field: keyof SuppliersFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: SuppliersFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('suppliers.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('suppliers.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('suppliers.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('suppliers.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('suppliers.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('suppliers.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('suppliers.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('suppliers.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('suppliers.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('suppliers.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('suppliers.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('suppliers.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('suppliers.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('suppliers.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('suppliers.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('suppliers.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('suppliers.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileSuppliersFilter;


============================================================
FILE: src/Pages/Suppliers/components/ActionsBar.tsx
============================================================
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('suppliers.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 300 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('suppliers.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/Suppliers/components/PageHeader.tsx
============================================================
// File: src/pages/suppliers/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { suppliersImportExportConfig } from '../../components/configs/importExportConfigs';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

interface Props {
  exportData: Supplier[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...suppliersImportExportConfig,
    onExport: () => exportData.map(supplier => ({
      name: supplier.name,
      phone: supplier.phone,
      address: supplier.address,
      email: supplier.email,
      taxNumber: supplier.taxNumber,
      isActive: supplier.isActive,
      createdOn: supplier.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('suppliers.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/Suppliers/components/SupplierForm.tsx
============================================================
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button, Stack,
  useMediaQuery, useTheme
} from '@mui/material';
import { IconDeviceFloppy, IconPlus as IconPlusNew } from '@tabler/icons-react';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

/* ---------- types ---------- */
type FormValues = { 
  name: string; 
  phone: string;
  address: string;
  notes: string;
  isActive: boolean;
};

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Supplier;
  onClose: () => void;
  onSubmit: (data: any, saveAction: 'save' | 'saveAndNew') => Promise<void>;
}

const SupplierForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const nameFieldRef = React.useRef<HTMLInputElement>(null);
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  
  const defaults: FormValues = { 
    name: '', 
    phone: '',
    address: '',
    notes: '',
    isActive: true
  };

  const { control, handleSubmit, reset, setError, clearErrors } = useForm<FormValues>({
    defaultValues: defaults
  });

  // Focus على اسم المورد عند فتح المودال
  React.useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        if (nameFieldRef.current) {
          nameFieldRef.current.focus();
          nameFieldRef.current.select();
        }
      }, 200);
      
      return () => clearTimeout(timer);
    }
  }, [open]);

  // إعادة تعيين النموذج عند تغيير البيانات
  React.useEffect(() => {
    if (open) {
      clearErrors(); // مسح الأخطاء السابقة
      if (mode === 'add') {
        reset(defaults);
      } else if (initialValues) {
        reset({
          name: initialValues.name,
          phone: initialValues.phone,
          address: initialValues.address,
          notes: initialValues.notes,
          isActive: initialValues.isActive,
        });
      }
    }
  }, [open, mode, initialValues, reset, clearErrors]);

  const submit = async (data: FormValues, saveAction: 'save' | 'saveAndNew') => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      if (mode === 'edit' && initialValues) {
        const updateData = {
          ...initialValues,
          ...data
        };
        await onSubmit(updateData, saveAction);
      } else {
        await onSubmit(data, saveAction);
      }
      
      // إذا كان saveAndNew، إعادة تعيين النموذج
      if (saveAction === 'saveAndNew') {
        reset(defaults);
        // Focus على الحقل الأول مرة أخرى
        setTimeout(() => {
          if (nameFieldRef.current) {
            nameFieldRef.current.focus();
          }
        }, 100);
      }
    } catch (error: any) {
      // معالجة أخطاء الـ validation من الـ API
      if (error?.errors) {
        Object.keys(error.errors).forEach(field => {
          const fieldName = field.toLowerCase();
          if (fieldName.includes('name') || fieldName.includes('suppliername')) {
            setError('name', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.nameRequired') 
            });
          } else if (fieldName.includes('phone')) {
            setError('phone', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.phoneRequired') 
            });
          } else if (fieldName.includes('address')) {
            setError('address', { 
              type: 'server', 
              message: error.errors[field][0] || t('suppliers.addressRequired') 
            });
          }
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      disableEscapeKeyDown={false}
      fullScreen={isMobile}
    >
      <DialogTitle>
        {mode === 'add' ? t('suppliers.add') : t('suppliers.edit')}
      </DialogTitle>

      <form>
        <DialogContent sx={{ maxHeight: isMobile ? 'none' : '70vh', overflowY: 'auto' }}>
          <Grid container spacing={3}>
            {/* ---------- Name (Required) ---------- */}
            <Grid item xs={12} md={6}>
              <Controller
                name="name"
                control={control}
                rules={{ 
                  required: t('suppliers.nameRequired'),
                  minLength: {
                    value: 2,
                    message: t('suppliers.nameMinLength')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    inputRef={nameFieldRef}
                    label={`${t('suppliers.name')} *`}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    autoFocus
                  />
                )}
              />
            </Grid>

            {/* ---------- Phone (Optional) ---------- */}
            <Grid item xs={12} md={6}>
              <Controller
                name="phone"
                control={control}
                rules={{
                  pattern: {
                    value: /^[0-9+\-\s()]*$/,
                    message: t('suppliers.phoneInvalid')
                  }
                }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.phone')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    placeholder="01xxxxxxxxx"
                  />
                )}
              />
            </Grid>

            {/* ---------- Address (Optional) ---------- */}
            <Grid item xs={12}>
              <Controller
                name="address"
                control={control}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.address')}
                    fullWidth
                    multiline
                    rows={2}
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                  />
                )}
              />
            </Grid>

            {/* ---------- Notes (Optional) ---------- */}
            <Grid item xs={12}>
              <Controller
                name="notes"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label={t('suppliers.notes')}
                    fullWidth
                    multiline
                    rows={3}
                  />
                )}
              />
            </Grid>

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={
                      <Switch 
                        checked={field.value} 
                        onChange={(e) => field.onChange(e.target.checked)} 
                      />
                    }
                    label={t('suppliers.status')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        {/* أزرار ثابتة في الأسفل */}
        <DialogActions 
          sx={{ 
            position: 'sticky', 
            bottom: 0, 
            backgroundColor: 'background.paper',
            borderTop: 1,
            borderColor: 'divider',
            p: 2,
            flexDirection: isMobile ? 'column' : 'row',
            gap: isMobile ? 1 : 0
          }}
        >
          <Button 
            onClick={onClose} 
            type="button" 
            disabled={isSubmitting}
            fullWidth={isMobile}
          >
            {t('common.cancel')}
          </Button>
          
          <Stack direction={isMobile ? "column" : "row"} spacing={1} sx={{ width: isMobile ? '100%' : 'auto' }}>
            <Button 
              variant="outlined"
              startIcon={<IconDeviceFloppy size={20} />}
              onClick={handleSubmit((data) => submit(data, 'save'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('suppliers.saveAndExit')}
            </Button>
            
            <Button 
              variant="contained"
              startIcon={<IconPlusNew size={20} />}
              onClick={handleSubmit((data) => submit(data, 'saveAndNew'))}
              disabled={isSubmitting}
              fullWidth={isMobile}
            >
              {t('suppliers.saveAndNew')}
            </Button>
          </Stack>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default SupplierForm;


============================================================
FILE: src/Pages/Suppliers/components/SupplierRow.tsx
============================================================
// File: src/pages/suppliers/components/SupplierRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Chip,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';
import { useTranslation } from 'react-i18next';

interface Props {
  supplier: Supplier;
  onEdit: () => void;
}

const SupplierRow: React.FC<Props> = ({ supplier, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {supplier.name}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('suppliers.phone')}: {supplier.phone || '-'}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ 
                fontSize: { xs: '0.75rem', sm: '0.875rem' },
                lineHeight: 1.3
              }}
            >
              {t('suppliers.address')}: {supplier.address || '-'}
            </Typography>
            
            {supplier.notes && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ 
                  fontSize: { xs: '0.75rem', sm: '0.875rem' },
                  lineHeight: 1.3,
                  fontStyle: 'italic'
                }}
              >
                {t('suppliers.notes')}: {supplier.notes}
              </Typography>
            )}
            
            {supplier.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('suppliers.created')}: {formatDate(supplier.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <Chip
                label={supplier.isActive ? t('suppliers.active') : t('suppliers.inactive')}
                color={supplier.isActive ? 'success' : 'default'}
                size="small"
                sx={{ alignSelf: 'flex-start' }}
              />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default SupplierRow;


============================================================
FILE: src/Pages/Suppliers/components/SupplierTable.tsx
============================================================
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

interface Props {
  rows: Supplier[];
  onEdit: (s: Supplier) => void;
}

const SupplierTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef[] = [
    { field: 'name', headerName: t('suppliers.name'), flex: 1, minWidth: 200 },
    { field: 'phone', headerName: t('suppliers.phone'), flex: 0.8, minWidth: 150 },
    { field: 'address', headerName: t('suppliers.address'), flex: 1, minWidth: 200 },
    {
      field: 'createdOn',
      headerName: t('suppliers.created'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch (error) {
          return '-';
        }
      },
    },
    { 
      field: 'isActive', 
      headerName: t('suppliers.status'), 
      width: 110,
      renderCell: (p) => (
        <Chip
          label={p.value ? t('suppliers.active') : t('suppliers.inactive')}
          color={p.value ? 'success' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => row.id}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default SupplierTable;


============================================================
FILE: src/Pages/Suppliers/SuppliersPage.tsx
============================================================
// File: src/pages/suppliers/SuppliersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Box, Fab, Badge, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import SupplierTable from './components/SupplierTable';
import SupplierRow from './components/SupplierRow';
import SupplierForm from './components/SupplierForm';
import MobileSuppliersFilter, { SuppliersFilterState } from './components/mobile/MobileSuppliersFilter';
import * as apiSrv from 'src/utils/api/pagesApi/suppliersApi';
import { Supplier } from 'src/utils/api/pagesApi/suppliersApi';

const SuppliersPage: React.FC = () => {
  const { t } = useTranslation();
  const [suppliers, setSuppliers] = React.useState<Supplier[]>([]);
  const canAdd = true; // Set to true or fetch from permissions/props as needed
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Supplier;
  }>({ open: false, mode: 'add', current: undefined });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<SuppliersFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  const fetchSuppliers = async () => {
    try {
      const suppliersData = await apiSrv.getAll();
      setSuppliers(suppliersData);
    } catch (e: any) {    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchSuppliers();
      }
      catch (e: any) {      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? suppliers.filter(s => 
      s.name.toLowerCase().includes(query.toLowerCase()) ||
      s.phone.toLowerCase().includes(query.toLowerCase()) ||
      s.address.toLowerCase().includes(query.toLowerCase())
    ) : suppliers,
    [suppliers, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...suppliers];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(supplier => 
        supplier.name.toLowerCase().includes(searchLower) ||
        supplier.phone.toLowerCase().includes(searchLower) ||
        supplier.address.toLowerCase().includes(searchLower) ||
        supplier.notes?.toLowerCase().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(supplier => supplier.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [suppliers, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (data: any) => {
    try {
      await apiSrv.add(data);
      await fetchSuppliers();
    } catch (e: any) {
      throw e;
    }
  };

  const handleUpdate = async (data: any) => {
    try {
      await apiSrv.update(data);
      await fetchSuppliers();
    } catch (e: any) {
      throw e;
    }
  };

  const handleSubmit = async (data: any, saveAction: 'save' | 'saveAndNew') => {
    try {
      if (dialog.mode === 'add') {
        await handleAdd(data);
      } else {
        await handleUpdate(data);
      }
      
      if (saveAction === 'save') {
        setDialog({ open: false, mode: 'add', current: undefined });
      }
      
    } catch (error) {
      throw error;
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add', current: undefined })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add', current: undefined })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('suppliers.add')}
          </Button>
        )}
        </Box>
      )}

      <Box mb={4}>
        {isDownSm
          ? filtered.map(s => (
              <SupplierRow
                key={s.id}
                supplier={s}
                onEdit={() => setDialog({ open: true, mode: 'edit', current: s })}
              />
            ))
          : (
              <SupplierTable
                rows={filtered}
                onEdit={(s) => setDialog({ open: true, mode: 'edit', current: s })}
              />
            )}
      </Box>

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileSuppliersFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={suppliers.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <SupplierForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add', current: undefined })}
        onSubmit={handleSubmit}
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default SuppliersPage;


============================================================
FILE: src/Pages/Units/components/mobile/MobileUnitsFilter.tsx
============================================================
// File: src/pages/units/components/mobile/MobileUnitsFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface UnitsFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: UnitsFilterState;
  onFiltersChange: (filters: UnitsFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileUnitsFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<UnitsFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('units.active') },
    { value: 'false', label: t('units.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('units.name') },
    { value: 'createdOn', label: t('units.created') },
    { value: 'isActive', label: t('units.status') }
  ];

  const handleLocalChange = (field: keyof UnitsFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: UnitsFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('units.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('units.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('units.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('units.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('units.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('units.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('units.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('units.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('units.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('units.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('units.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('units.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('units.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('units.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('units.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('units.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('units.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileUnitsFilter;


============================================================
FILE: src/Pages/Units/components/ActionsBar.tsx
============================================================
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('units.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('units.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/Units/components/PageHeader.tsx
============================================================
// File: src/pages/units/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { unitsImportExportConfig } from '../../components/configs/importExportConfigs';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  exportData: Unit[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...unitsImportExportConfig,
    onExport: () => exportData.map(unit => ({
      name: unit.name,
      code: unit.code,
      isActive: unit.isActive,
      createdOn: unit.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('units.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/Units/components/StatusPill.tsx
============================================================
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ status: 'active' | 'inactive' }> = ({ status }) => {
  const { t } = useTranslation();

  return (
    <Chip
      label={t(`units.${status}`)}
      color={status === 'active' ? 'success' : 'default'}
      size="small"
    />
  );
};


============================================================
FILE: src/Pages/Units/components/UnitForm.tsx
============================================================
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

/* ---------- types ---------- */
type FormValues = { name: string; isActive: boolean };

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Unit;
  onClose: () => void;
  onSubmit: (data: FormValues | Unit) => void;
}

/* ---------- helpers ---------- */
const nextOnEnter = (e: React.KeyboardEvent) => {
  if (e.key !== 'Enter') return;
  const form = (e.currentTarget as HTMLInputElement).form!;
  const idx = Array.prototype.indexOf.call(form, e.currentTarget);
  if (idx > -1 && idx + 1 < form.elements.length) {
    (form.elements[idx + 1] as HTMLElement).focus();
  } else {
    (form as HTMLFormElement).requestSubmit();
  }
  e.preventDefault();
};

/* ---------- component ---------- */
const UnitForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();
  const defaults: FormValues = { name: '', isActive: true };

  const { control, handleSubmit, reset } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      name: initialValues?.name ?? '',
      isActive: initialValues?.isActive ?? true,
    },
  });

  /* -- reset القيم عند تغيير النمط -- */
  React.useEffect(() => {
    if (mode === 'add') reset(defaults);
    else if (initialValues) reset({
      name: initialValues.name,
      isActive: initialValues.isActive,
    });
  }, [mode, initialValues, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        {mode === 'add' ? t('units.add') : t('units.edit')}
      </DialogTitle>

      <form onSubmit={handleSubmit(submit)}>
        <DialogContent>
          <Grid container spacing={3}>
            {/* ---------- Name ---------- */}
            <Grid item xs={12}>
              <Controller
                name="name"
                control={control}
                rules={{ required: t('units.nameRequired') }}
                render={({ field, fieldState }) => (
                  <TextField
                    {...field}
                    label={t('units.name')}
                    fullWidth
                    error={!!fieldState.error}
                    helperText={fieldState.error?.message}
                    onKeyDown={nextOnEnter}
                  />
                )}
              />
            </Grid>

            {/* ---------- Status ---------- */}
            <Grid item xs={12}>
              <Controller
                name="isActive"
                control={control}
                render={({ field }) => (
                  <FormControlLabel
                    control={<Switch checked={field.value} onChange={(e) => field.onChange(e.target.checked)} />}
                    label={t('units.status')}
                  />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            {t('common.cancel')}
          </Button>
          <Button type="submit" variant="contained">
            {mode === 'add' ? t('units.add') : t('units.save')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default UnitForm;


============================================================
FILE: src/Pages/Units/components/UnitRow.tsx
============================================================
// File: src/pages/units/components/UnitRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { StatusPill } from './StatusPill';
import { useTranslation } from 'react-i18next';

interface Props {
  unit: Unit;
  onEdit: () => void;
}

const UnitRow: React.FC<Props> = ({ unit, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {unit.name}
            </Typography>
            
            
            {unit.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('units.created')}: {formatDate(unit.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <StatusPill status={unit.isActive ? 'active' : 'inactive'} />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default UnitRow;


============================================================
FILE: src/Pages/Units/components/UnitTable.tsx
============================================================
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';

interface Props {
  rows: Unit[];
  onEdit: (u: Unit) => void;
}

const UnitTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const cols: GridColDef[] = [
    { field: 'name', headerName: t('units.name'), flex: 1, minWidth: 180 },
    {
      field: 'createdOn',
      headerName: t('units.created'),
      flex: .8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch (error) {
          return '-';
        }
      },
    },
    { 
      field: 'isActive', 
      headerName: t('units.status'), 
      width: 110,
      renderCell: (p) => <StatusPill status={p.value ? 'active' : 'inactive'} />
    },
    {
      field: 'actions', 
      headerName: '', 
      width: 110, 
      sortable: false, 
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          <IconButton size="small" onClick={() => onEdit(row)}>
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => row.id}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default UnitTable;


============================================================
FILE: src/Pages/Units/UnitsPage.tsx
============================================================
// File: src/pages/units/UnitsPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Fab, Badge, Box, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import UnitTable from './components/UnitTable';
import UnitRow from './components/UnitRow';
import UnitForm from './components/UnitForm';
import MobileUnitsFilter, { UnitsFilterState } from './components/mobile/MobileUnitsFilter';
import * as apiSrv from 'src/utils/api/pagesApi/unitsApi';
import { Unit } from 'src/utils/api/pagesApi/unitsApi';
import { useTranslation } from 'react-i18next';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}

const UnitsPage: React.FC<PermissionProps> = (props) => {
  const { t } = useTranslation();
  const [items, setItems] = React.useState<Unit[]>([]);
  const { canAdd } = props;
  const [query, setQuery] = React.useState('');  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);
  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Unit;
  }>({ open: false, mode: 'add' });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<UnitsFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { setItems(await apiSrv.getAll()); }
      catch (e: any) { setErr(e?.message || 'Load failed'); }
      finally { setLoad(false); }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? items.filter(u => u.name.toLowerCase().includes(query.toLowerCase())) : items,
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(unit => 
        unit.name.toLowerCase().includes(searchLower)      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(unit => unit.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (body: { name: string; }) => {
    try {
      const nw = await apiSrv.add(body);
      setItems(p => [nw, ...p]);
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  const handleUpdate = async (u: Unit) => {
    try {
      const up = await apiSrv.update(u);
      setItems(p => p.map(x => x.id === up.id ? up : x));
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>
      
      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('units.add')}
          </Button>
        )}
        </Box>
      )}

      {isDownSm
        ? filtered.map(u => (
            <UnitRow
              key={u.id}
              unit={u}
              onEdit={() => setDialog({ open: true, mode: 'edit', current: u })}
            />
          ))
        : (
            <UnitTable
              rows={filtered}
              onEdit={(u) => setDialog({ open: true, mode: 'edit', current: u })}
            />
          )}

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileUnitsFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={items.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <UnitForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd(data as { name: string; }))
          : ((data) => handleUpdate(data as Unit))
        }
      />{loading && <div>Loading…</div>}
    </Container>
  );
};

export default UnitsPage;
function setErr(_arg0: any) {
  throw new Error('Function not implemented.');
}



============================================================
FILE: src/Pages/users/UsersManagementPage.tsx
============================================================
// File: src/pages/users/UsersManagementPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert,
  Snackbar,
  Stack,
  Card,
  CardContent,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  IconPlus,
  IconEdit,
  IconUser,
  IconPhone,
  IconMail,
  IconRefresh
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { getAllUsers, register, User } from 'src/utils/api/authApi';
import ImportExportManager from '../components/ImportExportManager';
import { usersImportExportConfig } from '../components/configs/importExportConfigs';

const UsersManagementPage: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  const [formData, setFormData] = useState({
    userName: '',
    phoneNo: '',
    password: ''
  });

  // تحميل المستخدمين
  const loadUsers = async () => {
    try {
      setLoading(true);
      const response = await getAllUsers();
      if (response.isvalid && response.data) {
        setUsers(response.data);
      }
    } catch (error) {
      console.error('Error loading users:', error);
      setSnackbar({
        open: true,
        message: t('users.errors.loadFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsers();
  }, []);

  // فتح dialog للإضافة
  const handleAdd = () => {
    setEditingUser(null);
    setFormData({ userName: '', phoneNo: '', password: '' });
    setDialogOpen(true);
  };

  // فتح dialog للتعديل
  const handleEdit = (user: User) => {
    setEditingUser(user);
    setFormData({
      userName: user.userName,
      phoneNo: user.phoneNo,
      password: ''
    });
    setDialogOpen(true);
  };

  // حفظ المستخدم
  const handleSave = async () => {
    try {
      if (!formData.userName.trim() || !formData.phoneNo.trim()) {
        setSnackbar({
          open: true,
          message: t('users.validation.requiredFields'),
          severity: 'warning'
        });
        return;
      }

      if (!editingUser && !formData.password.trim()) {
        setSnackbar({
          open: true,
          message: t('users.validation.passwordRequired'),
          severity: 'warning'
        });
        return;
      }

      if (editingUser) {
        setSnackbar({
          open: true,
          message: t('users.messages.editComingSoon'),
          severity: 'warning'
        });
      } else {
        const success = await register(formData.userName, formData.phoneNo, formData.password);
        
        if (success) {
          setSnackbar({
            open: true,
            message: t('users.messages.addSuccess'),
            severity: 'success'
          });
          setDialogOpen(false);
          loadUsers();
        } else {
          setSnackbar({
            open: true,
            message: t('users.messages.addFailed'),
            severity: 'error'
          });
        }
      }
    } catch (error) {
      console.error('Error saving user:', error);
      setSnackbar({
        open: true,
        message: t('users.errors.saveFailed'),
        severity: 'error'
      });
    }
  };

  // مكون عرض المستخدمين للموبايل
  const UserCard: React.FC<{ user: User }> = ({ user }) => (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Box sx={{ flex: 1 }}>
            <Typography variant="h6" gutterBottom>
              {user.userName}
            </Typography>
            
            <Stack spacing={1}>
              <Stack direction="row" alignItems="center" spacing={1}>
                <IconPhone size={16} />
                <Typography variant="body2">{user.phoneNo}</Typography>
              </Stack>
              
              <Stack direction="row" alignItems="center" spacing={1}>
                <IconMail size={16} />
                <Typography variant="body2">{user.email || t('common.notSpecified')}</Typography>
              </Stack>
            </Stack>
          </Box>
          
          <Stack direction="row" spacing={1}>
            <IconButton
              size="small"
              onClick={() => handleEdit(user)}
              color="primary"
            >
              <IconEdit size={16} />
            </IconButton>
          </Stack>
        </Stack>
      </CardContent>
    </Card>
  );

  const config = {
    ...usersImportExportConfig,
    onExport: () => users.map(user => ({
      userName: user.userName,
      phoneNo: user.phoneNo,
      email: user.email || '',
      id: user.id
    }))
  };

  return (
    <Container maxWidth="xl">
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          {t('users.title')}
        </Typography>
        
        {/* Import/Export */}
        <ImportExportManager
          config={config}
          data={users}
          loading={loading}
          compact={isMobile}
        />
      </Box>

      {/* Actions */}
      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={handleAdd}
        >
          {t('users.actions.add')}
        </Button>
        
        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={loadUsers}
          disabled={loading}
        >
          {t('common.refresh')}
        </Button>
      </Stack>

      {/* Content */}
      {isMobile ? (
        // Mobile View
        <Box>
          {users.length === 0 ? (
            <Card>
              <CardContent>
                <Typography color="text.secondary" align="center">
                  {t('users.noUsers')}
                </Typography>
              </CardContent>
            </Card>
          ) : (
            users.map((user) => (
              <UserCard key={user.id} user={user} />
            ))
          )}
        </Box>
      ) : (
        // Desktop View
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>{t('users.table.userName')}</TableCell>
                <TableCell>{t('users.table.phoneNumber')}</TableCell>
                <TableCell>{t('users.table.email')}</TableCell>
                <TableCell>{t('users.table.actions')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={4} align="center">
                    <Typography color="text.secondary">
                      {t('users.noUsers')}
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                users.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <IconUser size={20} />
                        <Typography>{user.userName}</Typography>
                      </Stack>
                    </TableCell>
                    <TableCell>{user.phoneNo}</TableCell>
                    <TableCell>{user.email || t('common.notSpecified')}</TableCell>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={() => handleEdit(user)}
                        color="primary"
                      >
                        <IconEdit size={16} />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {/* Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingUser ? t('users.dialog.editTitle') : t('users.dialog.addTitle')}
        </DialogTitle>
        
        <DialogContent>
          <Stack spacing={2} sx={{ mt: 1 }}>
            <TextField
              label={t('users.form.userName')}
              value={formData.userName}
              onChange={(e) => setFormData(prev => ({ ...prev, userName: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('users.form.phoneNumber')}
              value={formData.phoneNo}
              onChange={(e) => setFormData(prev => ({ ...prev, phoneNo: e.target.value }))}
              fullWidth
              required
            />
            
            <TextField
              label={t('users.form.password')}
              type="password"
              value={formData.password}
              onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
              fullWidth
              required={!editingUser}
              helperText={editingUser ? t('users.form.passwordHelp') : ''}
            />
          </Stack>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            {t('common.cancel')}
          </Button>
          <Button onClick={handleSave} variant="contained">
            {editingUser ? t('common.update') : t('common.add')}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default UsersManagementPage;


============================================================
FILE: src/Pages/warehouses/components/mobile/MobileWarehousesFilter.tsx
============================================================
// File: src/pages/warehouses/components/mobile/MobileWarehousesFilter.tsx
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Chip,
  Stack,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
} from '@mui/material';
import {
  IconChevronDown,
  IconChevronUp,
  IconFilter,
  IconX,
  IconSearch,
  IconSortAscending,
  IconSortDescending
} from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

export interface WarehousesFilterState {
  searchQuery: string;
  status: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface Props {
  open: boolean;
  onClose: () => void;
  filters: WarehousesFilterState;
  onFiltersChange: (filters: WarehousesFilterState) => void;
  totalResults: number;
  filteredResults: number;
}

const MobileWarehousesFilter: React.FC<Props> = ({
  open,
  onClose,
  filters,
  onFiltersChange,
  totalResults,
  filteredResults
}) => {
  const { t } = useTranslation();
  const [localFilters, setLocalFilters] = useState<WarehousesFilterState>(filters);
  const [expandedSection, setExpandedSection] = useState<string>('search');

  const statusOptions = [
    { value: '', label: t('common.all') },
    { value: 'true', label: t('warehouses.active') },
    { value: 'false', label: t('warehouses.inactive') }
  ];

  const sortOptions = [
    { value: 'name', label: t('warehouses.name') },
    { value: 'address', label: t('warehouses.address') },
    { value: 'createdOn', label: t('warehouses.created') },
    { value: 'isActive', label: t('warehouses.status') }
  ];

  const handleLocalChange = (field: keyof WarehousesFilterState, value: any) => {
    setLocalFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    onFiltersChange(localFilters);
    onClose();
  };

  const clearFilters = () => {
    const clearedFilters: WarehousesFilterState = {
      searchQuery: '',
      status: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    setLocalFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (localFilters.searchQuery) count++;
    if (localFilters.status) count++;
    return count;
  };

  const handleAccordionChange = (panel: string) => (_event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedSection(isExpanded ? panel : '');
  };

  if (!open) return null;

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'background.paper',
        zIndex: 1300,
        overflow: 'auto',
        p: 2
      }}
    >
      {/* Header */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        mb: 2,
        position: 'sticky',
        top: 0,
        backgroundColor: 'background.paper',
        zIndex: 1,
        pb: 1
      }}>
        <Typography variant="h6">
          {t('warehouses.filter.title')}
        </Typography>
        <IconButton onClick={onClose}>
          <IconX />
        </IconButton>
      </Box>

      {/* نتائج الفلترة */}
      <Box sx={{ mb: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          {t('warehouses.filter.results')}: {filteredResults} {t('common.of')} {totalResults}
        </Typography>
        {getActiveFiltersCount() > 0 && (
          <Typography variant="caption" color="primary">
            {getActiveFiltersCount()} {t('warehouses.filter.activeFilters')}
          </Typography>
        )}
      </Box>

      {/* البحث */}
      <Accordion 
        expanded={expandedSection === 'search'} 
        onChange={handleAccordionChange('search')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'search' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconSearch size={20} />
            <Typography>{t('warehouses.filter.search')}</Typography>
            {localFilters.searchQuery && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <TextField
            fullWidth
            placeholder={t('warehouses.filter.searchPlaceholder')}
            value={localFilters.searchQuery}
            onChange={(e) => handleLocalChange('searchQuery', e.target.value)}
            size="small"
          />
        </AccordionDetails>
      </Accordion>

      {/* الفلاتر */}
      <Accordion 
        expanded={expandedSection === 'filters'} 
        onChange={handleAccordionChange('filters')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'filters' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconFilter size={20} />
            <Typography>{t('warehouses.filter.filters')}</Typography>
            {localFilters.status && (
              <Chip size="small" label="1" color="primary" />
            )}
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <FormControl fullWidth size="small">
            <InputLabel>{t('warehouses.status')}</InputLabel>
            <Select
              value={localFilters.status}
              label={t('warehouses.status')}
              onChange={(e) => handleLocalChange('status', e.target.value)}
            >
              {statusOptions.map(option => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </AccordionDetails>
      </Accordion>

      {/* الترتيب */}
      <Accordion 
        expanded={expandedSection === 'sort'} 
        onChange={handleAccordionChange('sort')}
        sx={{ mb: 1 }}
      >
        <AccordionSummary expandIcon={expandedSection === 'sort' ? <IconChevronUp /> : <IconChevronDown />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {localFilters.sortOrder === 'asc' ? <IconSortAscending size={20} /> : <IconSortDescending size={20} />}
            <Typography>{t('warehouses.filter.sorting')}</Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Stack spacing={2}>
            <FormControl fullWidth size="small">
              <InputLabel>{t('warehouses.filter.sortBy')}</InputLabel>
              <Select
                value={localFilters.sortBy}
                label={t('warehouses.filter.sortBy')}
                onChange={(e) => handleLocalChange('sortBy', e.target.value)}
              >
                {sortOptions.map(option => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth size="small">
              <InputLabel>{t('warehouses.filter.sortOrder')}</InputLabel>
              <Select
                value={localFilters.sortOrder}
                label={t('warehouses.filter.sortOrder')}
                onChange={(e) => handleLocalChange('sortOrder', e.target.value)}
              >
                <MenuItem value="asc">{t('warehouses.filter.ascending')}</MenuItem>
                <MenuItem value="desc">{t('warehouses.filter.descending')}</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </AccordionDetails>
      </Accordion>

      {/* الأزرار */}
      <Box sx={{ 
        position: 'sticky', 
        bottom: 0, 
        backgroundColor: 'background.paper', 
        pt: 2, 
        mt: 2 
      }}>
        <Stack spacing={1}>
          <Button
            variant="contained"
            fullWidth
            onClick={applyFilters}
            size="large"
          >
            {t('warehouses.filter.apply')}
          </Button>
          
          <Button
            variant="outlined"
            fullWidth
            onClick={clearFilters}
            size="large"
          >
            {t('warehouses.filter.clear')}
          </Button>
        </Stack>
      </Box>
    </Box>
  );
};

export default MobileWarehousesFilter;


============================================================
FILE: src/Pages/warehouses/components/ActionsBar.tsx
============================================================
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', md: 'row' }}
      spacing={2}
      alignItems={{ md: 'center' }}
      justifyContent="space-between"
      sx={{ mb: 2 }}
    >
      <TextField
        size="small"
        placeholder={t('common.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={16} />
            </InputAdornment>
          )
        }}
        sx={{ width: { xs: '100%', sm: 250 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={18} />}
        onClick={onAdd}
      >
        {t('warehouses.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


============================================================
FILE: src/Pages/warehouses/components/PageHeader.tsx
============================================================
// File: src/pages/warehouses/components/PageHeader.tsx
import React from 'react';
import {
  Box,
  Typography,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import ImportExportManager from '../../components/ImportExportManager';
import { warehousesImportExportConfig } from '../../components/configs/importExportConfigs';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface Props {
  exportData: Warehouse[];
  loading: boolean;
}

const PageHeader: React.FC<Props> = ({ exportData, loading }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const config = {
    ...warehousesImportExportConfig,
    onExport: () => exportData.map(warehouse => ({
      name: warehouse.name,
      address: warehouse.address,
      isActive: warehouse.isActive,
      createdOn: warehouse.createdOn
    }))
  };

  return (
    <Box sx={{ mb: { xs: 2, sm: 3 } }}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' }, 
        mb: { xs: 1, sm: 2 },
        gap: { xs: 1, sm: 0 }
      }}>
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          component="h1"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
            fontWeight: { xs: 600, sm: 500 }
          }}
        >
          {t('warehouses.title')}
        </Typography>
      </Box>

      <ImportExportManager
        config={config}
        data={exportData}
        loading={loading}
        compact={isMobile}
      />
    </Box>
  );
};

export default PageHeader;


============================================================
FILE: src/Pages/warehouses/components/StatusPill.tsx
============================================================
import { Chip } from '@mui/material';
import { useTranslation } from 'react-i18next';

export const StatusPill: React.FC<{ status: 'active' | 'inactive' }> = ({ status }) => {
  const { t } = useTranslation();
  return (
    <Chip
      label={status === 'active' ? t('status.active') : t('status.inactive')}
      color={status === 'active' ? 'success' : 'default'}
      size="small"
    />
  );
};


============================================================
FILE: src/Pages/warehouses/components/WarehouseForm.tsx
============================================================
import React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid, TextField, Switch, FormControlLabel, Button
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

/* ---------- types ---------- */
type FormValues = { name: string; address: string; isActive: boolean };

interface Props {
  open: boolean;
  mode: 'add' | 'edit';
  initialValues?: Warehouse;
  onClose: () => void;
  onSubmit: (data: FormValues | Warehouse) => void;
}

/* ---------- helpers ---------- */
const nextOnEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {
  if (e.key !== 'Enter') return;
  const form = e.currentTarget.form!;
  const idx  = Array.prototype.indexOf.call(form, e.currentTarget);
  if (idx > -1 && idx + 1 < form.elements.length) {
    (form.elements[idx + 1] as HTMLElement).focus();
  } else {
    (form as HTMLFormElement).requestSubmit();
  }
  e.preventDefault();
};

/* ---------- component ---------- */
const WarehouseForm: React.FC<Props> = ({
  open, mode, initialValues, onClose, onSubmit
}) => {
  const { t } = useTranslation();

  const defaults: FormValues = { name: '', address: '', isActive: true };

  const { control, handleSubmit, reset } = useForm<FormValues>({
    defaultValues: mode === 'add' ? defaults : {
      name:      initialValues?.name   ?? '',
      address:   initialValues?.address?? '',
      isActive:  initialValues?.isActive ?? true,
    },
  });

  /* -- reset القيم عند تغيير النمط -- */
  React.useEffect(() => {
    if (mode === 'add') reset(defaults);
    else if (initialValues) reset({
      name: initialValues.name,
      address: initialValues.address,
      isActive: initialValues.isActive,
    });
  }, [mode, initialValues, reset]);

  const submit = (data: FormValues) =>
    onSubmit(mode === 'add'
      ? data
      : { ...initialValues!, ...data }
    );

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>{mode === 'add' ? t('warehouses.add') : t('warehouses.edit')}</DialogTitle>

      <DialogContent dividers>
        <Grid container spacing={2}>
          {/* ---------- Name ---------- */}
          <Grid item xs={12}>
            <Controller
              name="name"
              control={control}
              rules={{ required: true }}
              render={({ field, fieldState }) => (
                <TextField
                  {...field}
                  autoFocus
                  fullWidth
                  label={t('warehouses.name')}
                  error={fieldState.invalid}
                  helperText={fieldState.invalid && t('validation.required')}
                  onKeyDown={nextOnEnter}
                />
              )}
            />
          </Grid>

          {/* ---------- Address ---------- */}
          <Grid item xs={12}>
            <Controller
              name="address"
              control={control}
              rules={{ required: true }}
              render={({ field, fieldState }) => (
                <TextField
                  {...field}
                  fullWidth
                  label={t('warehouses.address')}
                  error={fieldState.invalid}
                  helperText={fieldState.invalid && t('validation.required')}
                  onKeyDown={nextOnEnter}
                />
              )}
            />
          </Grid>

          {/* ---------- Status ---------- */}
          <Grid item xs={12}>
            <Controller
              name="isActive"
              control={control}
              render={({ field }) => (
                <FormControlLabel
                  control={<Switch checked={field.value}
                                   onChange={e => field.onChange(e.target.checked)} />}
                  label={t('warehouses.status')}
                />
              )}
            />
          </Grid>
        </Grid>
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>{t('common.cancel')}</Button>
        <Button variant="contained" onClick={handleSubmit(submit)}>
          {mode === 'add' ? t('warehouses.add') : t('warehouses.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default WarehouseForm;


============================================================
FILE: src/Pages/warehouses/components/WarehouseRow.tsx
============================================================
// File: src/pages/warehouses/components/WarehouseRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box
} from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { Warehouse } from './types';
import { StatusPill } from './StatusPill';
import { useTranslation } from 'react-i18next';

interface Props {
  warehouse: Warehouse;
  onEdit: () => void;
}

const WarehouseRow: React.FC<Props> = ({ warehouse, onEdit }) => {
  const { t } = useTranslation();

  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return '-';
    }
  };

  return (
    <Card sx={{ 
      mb: 2,
      borderRadius: { xs: 1, sm: 2 },
      boxShadow: { xs: 1, sm: 2 }
    }}>
      <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography 
              variant="h6" 
              component="div"
              sx={{ 
                fontSize: { xs: '1rem', sm: '1.25rem' },
                fontWeight: 'bold'
              }}
            >
              {warehouse.name}
            </Typography>
            
            <Typography 
              variant="body2" 
              color="text.secondary"
              sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
            >
              {t('warehouses.address')}: {warehouse.address}
            </Typography>

            {warehouse.createdOn && (
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.75rem', sm: '0.875rem' } }}
              >
                {t('warehouses.created')}: {formatDate(warehouse.createdOn)}
              </Typography>
            )}
            
            <Box sx={{ mt: 1 }}>
              <StatusPill status={warehouse.status} />
            </Box>
          </Stack>
          
          <IconButton 
            onClick={onEdit} 
            size="small"
            sx={{
              backgroundColor: 'action.hover',
              '&:hover': {
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          >
            <IconEdit size={18} />
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default WarehouseRow;


============================================================
FILE: src/Pages/warehouses/components/WarehouseTable.tsx
============================================================
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack } from '@mui/material';
import { IconEdit } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { StatusPill } from './StatusPill';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface Props {
  rows: Warehouse[];
  onEdit: (w: Warehouse) => void;
}

const WarehouseTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

const cols: GridColDef<Warehouse>[] = [
  { field: 'name',    headerName: t('warehouses.name'), flex: 1, minWidth: 180 },
  { field: 'address', headerName: t('warehouses.address'), flex: 1 },
  { 
    field: 'createdOn', 
    headerName: t('warehouses.created'), 
    flex: .8,
    renderCell: ({ value }) => {
      if (!value) return '-';
      try {
        return new Date(value).toLocaleDateString('en-US', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit'
        });
      } catch (error) {
        return '-';
      }
    }
  },
  { field: 'isActive', headerName: t('warehouses.status'), width: 110,
    renderCell: (p) => <StatusPill status={p.value ? 'active' : 'inactive'} /> },
  {
    field: 'actions', headerName: '', width: 110, sortable: false, filterable: false,
    renderCell: ({ row }) => (
      <Stack direction="row" spacing={0.5}>
        <IconButton size="small" onClick={() => onEdit(row)}><IconEdit size={18} /></IconButton>
      </Stack>
    )
  }
];


  return (
    <DataGrid
      rows={rows}
      columns={cols}
      autoHeight
      disableRowSelectionOnClick
      pageSizeOptions={[10, 25]}
      initialState={{ pagination: { paginationModel: { pageSize: 10 } } }}
    />
  );
};

export default WarehouseTable;


============================================================
FILE: src/Pages/warehouses/WarehousesPage.tsx
============================================================
// File: src/pages/warehouses/WarehousesPage.tsx
import React from 'react';
import {
  Container, useMediaQuery, Fab, Badge, Box, Button
} from '@mui/material';
import { IconFilter, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

import PageHeader     from './components/PageHeader';
import ActionsBar     from './components/ActionsBar';
import WarehouseTable from './components/WarehouseTable';
import WarehouseRow   from './components/WarehouseRow';
import WarehouseForm  from './components/WarehouseForm';
import MobileWarehousesFilter, { WarehousesFilterState } from './components/mobile/MobileWarehousesFilter';

import * as apiSrv from 'src/utils/api/pagesApi/warehousesApi';
import { Warehouse } from 'src/utils/api/pagesApi/warehousesApi';

interface PermissionProps {
  canAdd?: boolean;
  canEdit?: boolean;
  canDelete?: boolean;
  canExport?: boolean;
  canImport?: boolean;
  canView?: boolean;
}
interface Props extends PermissionProps {
  // Add other props here if needed
}

const WarehousesPage: React.FC<Props> = (props) => {
  const { t } = useTranslation();
  const [items, setItems] = React.useState<Warehouse[]>([]);
  const [query, setQuery] = React.useState('');
  const [, setErr]   = React.useState('');
  const [loading, setLoad] = React.useState(true);
  const [filterOpen, setFilterOpen] = React.useState(false);

  const [dialog, setDialog] = React.useState<{
    open: boolean;
    mode: 'add' | 'edit';
    current?: Warehouse;
  }>({ open: false, mode: 'add' });

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));
  const isMobile = useMediaQuery((th: any) => th.breakpoints.down('md'));

  // حالة الفلاتر للموبايل
  const [mobileFilters, setMobileFilters] = React.useState<WarehousesFilterState>({
    searchQuery: '',
    status: '',
    sortBy: 'name',
    sortOrder: 'asc'
  });

  /* ───── fetch all ───── */
  React.useEffect(() => {
    (async () => {
      try { setItems(await apiSrv.getAll()); }
      catch (e: any) { setErr(e?.message || 'Load failed'); }
      finally { setLoad(false); }
    })();
  }, []);

  /* ───── filter for desktop ───── */
  const desktopFiltered = React.useMemo(
    () => query ? items.filter(w => w.name.toLowerCase().includes(query.toLowerCase())) : items,
    [items, query]
  );

  /* ───── filter for mobile ───── */
  const mobileFiltered = React.useMemo(() => {
    let result = [...items];

    // البحث
    if (mobileFilters.searchQuery.trim()) {
      const searchLower = mobileFilters.searchQuery.toLowerCase();
      result = result.filter(warehouse => 
        warehouse.name.toLowerCase().includes(searchLower) ||
        warehouse.address?.toLowerCase().includes(searchLower) ||
        warehouse.code?.toString().includes(searchLower)
      );
    }

    // فلتر الحالة
    if (mobileFilters.status) {
      const isActive = mobileFilters.status === 'true';
      result = result.filter(warehouse => warehouse.isActive === isActive);
    }

    // الترتيب
    result.sort((a, b) => {
      let aValue: any = a[mobileFilters.sortBy as keyof typeof a];
      let bValue: any = b[mobileFilters.sortBy as keyof typeof b];

      // معالجة خاصة للتواريخ
      if (mobileFilters.sortBy === 'createdOn') {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // معالجة خاصة للنصوص
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }

      if (mobileFilters.sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return result;
  }, [items, mobileFilters]);

  // اختيار البيانات المفلترة حسب نوع الجهاز
  const filtered = isMobile ? mobileFiltered : desktopFiltered;

  // حساب عدد الفلاتر النشطة للموبايل
  const getActiveFiltersCount = () => {
    let count = 0;
    if (mobileFilters.searchQuery) count++;
    if (mobileFilters.status) count++;
    return count;
  };

  /* ───── CRUD ───── */
  const handleAdd = async (body: { name: string; address: string }) => {
    try {
      const nw = await apiSrv.add(body);
      setItems(p => [nw, ...p]);
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
      const msg = e?.errors?.WarehouseName?.[0] || e?.message || 'Add failed';
      setErr(msg)
    }
  };

  const handleUpdate = async (w: Warehouse) => {
    try {
      const up = await apiSrv.update(w);
      setItems(p => p.map(x => x.id === up.id ? up : x));
      setDialog({ open: false, mode: 'add' });
    } catch (e: any) {
    }
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader exportData={filtered} loading={loading}/>

      {/* شريط الأدوات - يظهر فقط في الديسكتوب */}
      {!isMobile && (
        <ActionsBar
          query={query}
          onQueryChange={setQuery}
          onAdd={() => setDialog({ open: true, mode: 'add' })}
        />
      )}

      {/* زر الإضافة للموبايل */}
      {isMobile && (
        <Box sx={{ mb: 2, textAlign: 'center' }}>
          {props.canAdd && (
        <Button
            variant="contained"
            startIcon={<IconPlus />}
            onClick={() => setDialog({ open: true, mode: 'add' })}
            fullWidth
            size="large"
            sx={{
              minHeight: 48,
              fontSize: '1rem'
            }}
          >
            {t('warehouses.add')}
          </Button>
        )}
        </Box>
      )}

      {isDownSm
        ? filtered.map(w => (
            <WarehouseRow
              key={w.id}
              warehouse={{
                ...w,
                status: w.isActive ? "active" : "inactive"
              }}
              onEdit={() => setDialog({ open: true, mode: 'edit', current: w })}
            />
          ))
        : (
          <WarehouseTable
            rows={filtered}
            onEdit={w => setDialog({ open: true, mode: 'edit', current: w })}
          />
        )}

      {/* زر الفلترة للموبايل */}
      {isMobile && (
        <Fab
          color="primary"
          onClick={() => setFilterOpen(true)}
          sx={{
            position: 'fixed',
            bottom: 16,
            left: 16,
            zIndex: 1000
          }}
        >
          <Badge badgeContent={getActiveFiltersCount()} color="error">
            <IconFilter />
          </Badge>
        </Fab>
      )}

      {/* مكون الفلترة للموبايل */}
      {isMobile && (
        <MobileWarehousesFilter
          open={filterOpen}
          onClose={() => setFilterOpen(false)}
          filters={mobileFilters}
          onFiltersChange={setMobileFilters}
          totalResults={items.length}
          filteredResults={filtered.length}
        />
      )}

      {/* ------------ Form Dialog ------------ */}
      <WarehouseForm
        open={dialog.open}
        mode={dialog.mode}
        initialValues={dialog.current}
        onClose={() => setDialog({ open: false, mode: 'add' })}
        onSubmit={dialog.mode === 'add'
          ? ((data) => handleAdd(data as { name: string; address: string }))
          : ((data) => handleUpdate(data as Warehouse))
        }
      />{loading && <p>Loading…</p>}
    </Container>
  );
};

export default WarehousesPage;


============================================================
FILE: src/routes/Router.tsx
============================================================
// File: src/routes/Router.tsx
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React, { lazy } from 'react';
import Loadable from '../layouts/full/shared/loadable/Loadable';
import { createBrowserRouter, Navigate } from 'react-router-dom';
import { authLoader } from './authLoader';
import { createProtectedPage } from 'src/utils/pageWrapper';
import DeliveryAgentsPage from 'src/Pages/pos/delivery/agents/DeliveryAgentsPage';
import DeliveryZonesPage from 'src/Pages/pos/delivery/zones/DeliveryZonesPage';
import TableSectionsPage from 'src/Pages/pos/table-sections/TableSectionsPage';
import PrinterSettingsPage from 'src/Pages/settings/components/PrinterSettings';
import HallCaptainsPage from 'src/Pages/pos/hall-captains/HallCaptainsPage';
import CustomersPage from 'src/Pages/pos/customers/CustomersPage';
import OffersPage from 'src/Pages/pos/offers/OffersPage';
import DeliveryCompaniesPage from 'src/Pages/pos/delivery/companies/DeliveryCompaniesPage';
// import SalesPage from 'src/Pages/pos/sales/SalesPage';

/* ***Layouts**** */
const FullLayout = Loadable(lazy(() => import('../layouts/full/FullLayout')));
const BlankLayout = Loadable(lazy(() => import('../layouts/blank/BlankLayout')));

/* ****Dashboard***** */
const ModernDash = Loadable(lazy(() => import('../views/dashboard/Ecommerce')));

/* ****Auth Pages***** */
const Login = Loadable(lazy(() => import('../Pages/auth/LoginPage')));
const BranchSelection = Loadable(lazy(() => import('../Pages/auth/BranchSelectionPage')));
const Register = Loadable(lazy(() => import('../Pages/auth/RegisterPage')));

/* ****Error Pages***** */
const Error = Loadable(lazy(() => import('../views/authentication/Error')));
const Unauthorized = Loadable(lazy(() => import('../Pages/errors/UnauthorizedPage')));
const NoBranches = Loadable(lazy(() => import('../Pages/errors/NoBranchesPage')));

/* ****تحميل الصفحات الأصلية***** */
const UsersManagementOriginal = Loadable(lazy(() => import('../Pages/users/UsersManagementPage')));
const CompanySettingsOriginal = Loadable(lazy(() => import('../Pages/company/CompanySettingsPage')));
const PermissionsPageOriginal = Loadable(lazy(() => import('../Pages/permissions/PermissionsPage')));
const ProductsPageOriginal = Loadable(lazy(() => import('../Pages/products/ProductsPage')));
const GroupsPageOriginal = Loadable(lazy(() => import('../Pages/groups/GroupsPage')));
const UnitsPageOriginal = Loadable(lazy(() => import('../Pages/units/UnitsPage')));
const PosScreensPageOriginal = Loadable(lazy(() => import('../Pages/pos/screens/PosScreensPage')));
const PosPaymentMethodsPageOriginal = Loadable(lazy(() => import('../Pages/pos/payment-methods/PosPaymentMethodsPage')));
const SuppliersPageOriginal = Loadable(lazy(() => import('../Pages/suppliers/SuppliersPage')));
const WarehousesPageOriginal = Loadable(lazy(() => import('../Pages/warehouses/WarehousesPage')));
const AccountsPageOriginal = Loadable(lazy(() => import('../Pages/accounts/AccountsPage')));
const SafesPageOriginal = Loadable(lazy(() => import('../Pages/safes/SafesPage')));
const AdjustmentsListPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/AdjustmentsListPage')));
const InventoryAdjustmentPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/InventoryAdjustmentPage')));
const AdjustmentViewPageOriginal = Loadable(lazy(() => import('../Pages/inventory/adjustments-list/components/AdjustmentViewPage')));
const PurchaseOrdersPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/PurchaseOrdersPage')));
const AddPurchaseOrderPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/AddPurchaseOrderPage')));
const EditPurchaseOrderPageOriginal = Loadable(lazy(() => import('../Pages/purchase-orders/EditPurchaseOrderPage')));
const PurchasesPageOriginal = Loadable(lazy(() => import('../Pages/purchases/PurchasesPage')));
const AddPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/AddPurchasePage')));
const EditPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/EditPurchasePage')));
const ViewPurchasePageOriginal = Loadable(lazy(() => import('../Pages/purchases/components/ViewPurchasePage')));
const ProductBalanceReportPageOriginal = Loadable(lazy(() => import('../Pages/reports/ProductBalanceReportPage')));
const PosProductsPageOriginal = Loadable(lazy(() => import('../Pages/pos/products/PosProductsPage')));
const AdditionProductsPage = Loadable(lazy(() => import('../Pages/pos/additions/AdditionProductsPage')))
const SalesPage2 = Loadable(lazy(() => import('../Pages/pos/newSales/index')));
/* ****إنشاء الصفحات المحمية***** */
const UsersManagement = createProtectedPage(UsersManagementOriginal, 'USERS');
const CompanySettings = createProtectedPage(CompanySettingsOriginal, 'COMPANY');
const PermissionsPage = createProtectedPage(PermissionsPageOriginal, 'PERMISSIONS');
const ProductsPage = createProtectedPage(ProductsPageOriginal, 'PRODUCTS');
const GroupsPage = createProtectedPage(GroupsPageOriginal, 'GROUPS');
const UnitsPage = createProtectedPage(UnitsPageOriginal, 'UNITS');
const PosScreensPage = createProtectedPage(PosScreensPageOriginal, 'POS_SCREENS');
const PosPaymentMethodsPage = createProtectedPage(PosPaymentMethodsPageOriginal, 'PAYMENT_METHODS');
const SuppliersPage = createProtectedPage(SuppliersPageOriginal, 'SUPPLIERS');
const WarehousesPage = createProtectedPage(WarehousesPageOriginal, 'WAREHOUSES');
const AccountsPage = createProtectedPage(AccountsPageOriginal, 'ACCOUNTS');
const SafesPage = createProtectedPage(SafesPageOriginal, 'SAFES');
const AdjustmentsListPage = createProtectedPage(AdjustmentsListPageOriginal, 'INVENTORY_ADJUSTMENTS');
const InventoryAdjustmentPage = createProtectedPage(InventoryAdjustmentPageOriginal, 'INVENTORY_ADJUSTMENTS');
const AdjustmentViewPage = createProtectedPage(AdjustmentViewPageOriginal, 'INVENTORY_ADJUSTMENTS');
const PurchaseOrdersPage = createProtectedPage(PurchaseOrdersPageOriginal, 'PURCHASE_ORDERS');
const AddPurchaseOrderPage = createProtectedPage(AddPurchaseOrderPageOriginal, 'PURCHASE_ORDERS');
const EditPurchaseOrderPage = createProtectedPage(EditPurchaseOrderPageOriginal, 'PURCHASE_ORDERS');
const PurchasesPage = createProtectedPage(PurchasesPageOriginal, 'PURCHASES');
const AddPurchasePage = createProtectedPage(AddPurchasePageOriginal, 'PURCHASES');
const EditPurchasePage = createProtectedPage(EditPurchasePageOriginal, 'PURCHASES');
const ViewPurchasePage = createProtectedPage(ViewPurchasePageOriginal, 'PURCHASES');
const ProductBalanceReportPage = createProtectedPage(ProductBalanceReportPageOriginal, 'REPORTS');
const PosProductsPage = createProtectedPage(PosProductsPageOriginal, 'POS_PRODUCTS');
const AdditionProducts = createProtectedPage(AdditionProductsPage, 'ADDITION_PRODUCTS');
const Router = [
  {
    path: '/',
    element: <FullLayout />,
    loader: authLoader,
    children: [
      // Dashboard Routes
      { path: '/', element: <Navigate to="/dashboard" /> },
      { path: '/dashboard', element: <ModernDash /> },
      { path: '/dashboards/modern', element: <ModernDash /> },
      {path: '/settings/printer', element: <PrinterSettingsPage />},

      // User Management Routes
      { path: '/users', element: <UsersManagement /> },
      { path: '/company', element: <CompanySettings /> },
      { path: '/permissions', element: <PermissionsPage /> },
 
      // Product Management Routes
      { path: '/products', element: <ProductsPage /> },
      { path: '/inventory/products', element: <ProductsPage /> },
      { path: '/groups', element: <GroupsPage /> },
      { path: '/inventory/groups', element: <GroupsPage /> },
      { path: '/units', element: <UnitsPage /> },
      { path: '/inventory/units', element: <UnitsPage /> },

      // POS System Routes
      { path: '/pos/screens', element: <PosScreensPage /> },
      { path: '/pos/payment-methods', element: <PosPaymentMethodsPage /> },
      { path: '/pos/products', element: <PosProductsPage /> },
      { path: '/addition/products', element: <AdditionProducts /> },
      { path: '/pos/delivery/agents', element: <DeliveryAgentsPage /> },
      { path: '/pos/delivery/zones', element: <DeliveryZonesPage /> },
      { path: '/pos/table-sections', element: <TableSectionsPage /> },
      { path: '/pos/hall-captains', element: <HallCaptainsPage /> },
      { path: '/pos/customers', element: <CustomersPage /> },
      // Offers and Delivery Companies
      { path: '/pos/offers', element: <OffersPage /> },
      { path: '/pos/delivery/companies', element: <DeliveryCompaniesPage /> },
      // Business Entities Routes
      { path: '/suppliers', element: <SuppliersPage /> },
      { path: '/purchases/suppliers', element: <SuppliersPage /> },
      { path: '/warehouses', element: <WarehousesPage /> },
      { path: '/inventory/warehouses', element: <WarehousesPage /> },

      // Financial Routes
      { path: '/accounts', element: <AccountsPage /> },
      { path: '/accounting/accounts', element: <AccountsPage /> },
      { path: '/safes', element: <SafesPage /> },
      { path: '/accounting/safes', element: <SafesPage /> },

      // Inventory Routes
      { path: '/inventory/adjustments', element: <AdjustmentsListPage /> },
      { path: '/inventory/inventory-adjustments', element: <AdjustmentsListPage /> },
      { path: '/inventory/inventory-adjustments/new', element: <InventoryAdjustmentPage /> },
      { path: '/inventory/inventory-adjustments/:id', element: <AdjustmentViewPage /> },

      // Purchase Routes
      { path: '/purchase-orders', element: <PurchaseOrdersPage /> },
      { path: '/purchases/purchase-orders', element: <PurchaseOrdersPage /> },
      { path: '/purchases/purchase-orders/add', element: <AddPurchaseOrderPage /> },
      { path: '/purchases/purchase-orders/edit/:id', element: <EditPurchaseOrderPage /> },
      { path: '/purchases', element: <PurchasesPage /> },
      { path: '/purchases/purchases', element: <PurchasesPage /> },
      { path: '/purchases/purchases/add', element: <AddPurchasePage /> },
      { path: '/purchases/purchases/edit/:id', element: <EditPurchasePage /> },
      { path: '/purchases/purchases/view/:id', element: <ViewPurchasePage /> },

      // Reports Routes
      { path: '/reports/product-balance', element: <ProductBalanceReportPage /> },

      // Fallback for protected routes
      { path: '*', element: <Navigate to="/dashboard" /> },
    ],
  },
  {
    path: '/',
    element: <BlankLayout />,
    children: [
      // Auth Routes
      { path: '/auth/login', element: <Login /> },
      { path: '/auth/branch-selection', element: <BranchSelection /> },
      { path: '/auth/register', element: <Register /> },
      // { path: '/pos/sales', element: <SalesPage /> },
      // Error Routes
      { path: '/auth/404', element: <Error /> },
      { path: '/unauthorized', element: <Unauthorized /> },
      { path: '/auth/no-branches', element: <NoBranches /> },
      { path: '/pos/sales', element: <SalesPage2 /> },
      // Fallback for public routes
      { path: '*', element: <Navigate to="/auth/login" /> },
    ],
  },
];

const router = createBrowserRouter(Router);

export default router;


============================================================
FILE: src/store/customizer/CustomizerSlice.tsx
============================================================
import { createSlice } from '@reduxjs/toolkit';

interface StateType {
  activeDir?: string | any;
  activeMode?: string; // This can be light or dark
  activeTheme?: string; // BLUE_THEME, GREEN_THEME, BLACK_THEME, PURPLE_THEME, ORANGE_THEME
  SidebarWidth?: number;
  MiniSidebarWidth?: number;
  TopbarHeight?: number;
  isCollapse?: boolean;
  isLayout?: string;
  isSidebarHover?: boolean;
  isMobileSidebar?: boolean;
  isHorizontal?: boolean;
  isLanguage?: string;
  isCardShadow?: boolean;
  borderRadius?: number | any;
}

const initialState: StateType = {
  activeDir: 'ltr',
  activeMode: 'light', // This can be light or dark
  activeTheme: 'BLUE_THEME', // BLUE_THEME, GREEN_THEME, BLACK_THEME, PURPLE_THEME, ORANGE_THEME
  SidebarWidth: 270,
  MiniSidebarWidth: 87,
  TopbarHeight: 70,
  isLayout: 'full', // This can be full or boxed
  isCollapse: false, // to make sidebar Mini by default
  isSidebarHover: false,
  isMobileSidebar: false,
  isHorizontal: false,
  isLanguage: 'en',
  isCardShadow: true,
  borderRadius: 7,
};

export const CustomizerSlice = createSlice({
  name: 'customizer',
  initialState,
  reducers: {
    setTheme: (state: StateType, action) => {
      state.activeTheme = action.payload;
    },
    setDarkMode: (state: StateType, action) => {
      state.activeMode = action.payload;
    },

    setDir: (state: StateType, action) => {
      state.activeDir = action.payload;
    },
    setLanguage: (state: StateType, action) => {
      state.isLanguage = action.payload;
    },
    setCardShadow: (state: StateType, action) => {
      state.isCardShadow = action.payload;
    },
    toggleSidebar: (state) => {
      state.isCollapse = !state.isCollapse;
    },
    hoverSidebar: (state: StateType, action) => {
      state.isSidebarHover = action.payload;
    },
    toggleMobileSidebar: (state) => {
      state.isMobileSidebar = !state.isMobileSidebar;
    },
    toggleLayout: (state: StateType, action) => {
      state.isLayout = action.payload;
    },
    toggleHorizontal: (state: StateType, action) => {
      state.isHorizontal = action.payload;
    },
    setBorderRadius: (state: StateType, action) => {
      state.borderRadius = action.payload;
    },
  },
});

export const {
  setTheme,
  setDarkMode,
  setDir,
  toggleSidebar,
  hoverSidebar,
  toggleMobileSidebar,
  toggleLayout,
  setBorderRadius,
  toggleHorizontal,
  setLanguage,
  setCardShadow,
} = CustomizerSlice.actions;

export default CustomizerSlice.reducer;


============================================================
FILE: src/store/Store.tsx
============================================================
// File: src/store/Store.ts
import { configureStore } from '@reduxjs/toolkit';
import CustomizerReducer from './customizer/CustomizerSlice';
import {
  useDispatch as useAppDispatch,
  useSelector as useAppSelector,
  TypedUseSelectorHook,
} from 'react-redux';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import { combineReducers } from '@reduxjs/toolkit';

// إعداد Redux Persist للحفاظ على حالة Customizer
const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['customizer'], // فقط customizer سيتم حفظه
};

const rootReducer = combineReducers({
  customizer: CustomizerReducer
});

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],
      },
    }),
  devTools: process.env.NODE_ENV !== 'production',
});

export const persistor = persistStore(store);

export type AppState = ReturnType<typeof rootReducer>;
export type AppDispatch = typeof store.dispatch;
export const { dispatch } = store;
export const useDispatch = () => useAppDispatch<AppDispatch>();
export const useSelector: TypedUseSelectorHook<AppState> = useAppSelector;

export default store;


============================================================
FILE: src/theme/Components.tsx
============================================================
// project imports
import './DefaultColors';
import { Theme } from '@mui/material/styles';

const components: any = (theme: Theme) => {
  return {
    MuiCssBaseline: {
      styleOverrides: {
        '*': {
          boxSizing: 'border-box',
        },
        html: {
          height: '100%',
          width: '100%',
        },
        a: {
          textDecoration: 'none',
        },
        body: {
          height: '100%',
          margin: 0,
          padding: 0,
        },
        '.ql-container.ql-snow, .ql-toolbar.ql-snow': {
          border: '0 !important', borderRadius: '7px'
        },
        '.ql-editor, .ql-snow *': {
          fontFamiy: 'inherit !important'
        },
        '#root': {
          height: '100%',
        },
        "*[dir='rtl'] .buyNowImg": {
          transform: 'scaleX(-1)',
        },
        '.border-none': {
          border: '0px',
          td: {
            border: '0px',
          },
        },
        'pre': {
          background: `${theme.palette.grey[100]} !important`,
        },
        '.btn-xs': {
          minWidth: '30px !important',
          width: '30px',
          height: '30px',
          borderRadius: '6px !important',
          padding: '0px !important',
        },
        '.hover-text-primary:hover .text-hover': {
          color: theme.palette.primary.main,
        },
        '.hoverCard:hover': {
          scale: '1.01',
          transition: ' 0.1s ease-in',
        },
        '.signup-bg': {
          position: 'absolute',
          top: 0,
          right: 0,
          height: '100%',
        },
        '.MuiBox-root': {
          borderRadius: theme.shape.borderRadius,
        },
        '.MuiCardHeader-action': {
          alignSelf: 'center !important',
        },
        '.emoji-picker-react .emoji-scroll-wrapper': {
          overflowX: 'hidden',
        },
        '.scrollbar-container': {
          borderRight: '0 !important',
        },
        '.theme-timeline .MuiTimelineOppositeContent-root': {
          minWidth: '90px',
        },
        '.Mui-root .Mui-icon': {
          color: 'inherit!important',
        },
        '.MuiTimelineConnector-root': {
          width: '1px !important',
        },
        ' .simplebar-scrollbar:before': {
          background: `${theme.palette.grey[300]} !important`,
        },
        '@keyframes gradient': {
          '0%': {
            backgroundPosition: '0% 50%',
          },
          '50%': {
            backgroundPosition: ' 100% 50%',
          },
          '100% ': {
            backgroundPosition: ' 0% 50%',
          },
        },
        '@keyframes slide': {
          '0%': {
            transform: 'translate3d(0, 0, 0)',
          },
          '100% ': {
            transform: 'translate3d(-2086px, 0, 0)',
          },
        },
        '.rounded-bars .apexcharts-bar-series.apexcharts-plot-series .apexcharts-series path': {
          clipPath: 'inset(0 0 5% 0 round 20px)',
        },
      },
    },
    MuiButtonGroup: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
      },
    },
    MuiAccordion: {
      styleOverrides: {
        root: {
          ':before': {
            backgroundColor: theme.palette.grey[100],
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          // border: `1px solid ${theme.palette.divider}`,
          backgroundImage: 'none',
        },
      },
    },
    MuiStepConnector: {
      styleOverrides: {
        line: {
          borderColor: theme.palette.divider,
        },
      },
    },
    MuiFab: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
        sizeSmall: {
          width: 30,
          height: 30,
          minHeight: 30,
        },
      },
    },
    MuiIconButton: {
      styleOverrides: {
        root: {
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        colorPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        colorSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        colorSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        colorError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        colorWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        colorInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          boxShadow: 'none',
        },
        text: {
          padding: '5px 15px',
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        textPrimary: {
          backgroundColor: theme.palette.primary.light,
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        textSecondary: {
          backgroundColor: theme.palette.secondary.light,
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        textSuccess: {
          backgroundColor: theme.palette.success.light,
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        textError: {
          backgroundColor: theme.palette.error.light,
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        textInfo: {
          backgroundColor: theme.palette.info.light,
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        textWarning: {
          backgroundColor: theme.palette.warning.light,
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        outlinedPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        outlinedSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        outlinedError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        outlinedSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        outlinedInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        outlinedWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
      },
    },
    MuiCardHeader: {
      styleOverrides: {
        root: {
          padding: '16px 24px',
        },
        title: {
          fontSize: '1.125rem',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          width: '100%',
          padding: '15px',
          backgroundImage: 'none',
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          padding: '24px',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          borderBottom: `1px solid ${theme.palette.divider}`,
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiGridItem: {
      styleOverrides: {
        root: {
          paddingTop: '30px',
          paddingLeft: '30px !important',
        },
      },
    },
    MuiLinearProgress: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.grey[200],
          borderRadius: '6px',
        },
      },
    },
    MuiTimelineConnector: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.divider,
        },
      },
    },
    MuiDivider: {
      styleOverrides: {
        root: {
          borderColor: theme.palette.divider,
        },
      },
    },

    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 600,
          fontSize: '0.75rem',
        },
      },
    },
    Mui: {
      styleOverrides: {
        filledSuccess: {
          color: 'white',
        },
        filledInfo: {
          color: 'white',
        },
        filledError: {
          color: 'white',
        },
        filledWarning: {
          color: 'white',
        },
        standardSuccess: {
          backgroundColor: theme.palette.success.light,
          color: theme.palette.success.main,
        },
        standardError: {
          backgroundColor: theme.palette.error.light,
          color: theme.palette.error.main,
        },
        standardWarning: {
          backgroundColor: theme.palette.warning.light,
          color: theme.palette.warning.main,
        },
        standardInfo: {
          backgroundColor: theme.palette.info.light,
          color: theme.palette.info.main,
        },
        outlinedSuccess: {
          borderColor: theme.palette.success.main,
          color: theme.palette.success.main,
        },
        outlinedWarning: {
          borderColor: theme.palette.warning.main,
          color: theme.palette.warning.main,
        },
        outlinedError: {
          borderColor: theme.palette.error.main,
          color: theme.palette.error.main,
        },
        outlinedInfo: {
          borderColor: theme.palette.info.main,
          color: theme.palette.info.main,
        },
        successIcon: {
          color: theme.palette.info.main,
        },
      },
    },
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor:
              theme.palette.mode === 'dark' ? theme.palette.grey[200] : theme.palette.grey[300],
          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: theme.palette.grey[300],
          },
        },
        input: {
          padding: '12px 14px',
        },
        inputSizeSmall: {
          padding: '8px 14px',
        },
      },
    },
    MuiAutocomplete: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            padding: '4px 9px'
          }
        }
      }
    },
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          color: theme.palette.background.paper,
          background: theme.palette.text.primary,
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          borderColor: `${theme.palette.divider}`,
        },
      },
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          fontSize: '1.25rem',
        },
      },
    },
    MuiPopover: {
      styleOverrides: {
        paper: {
          boxShadow: theme.shadows[9],
        },
      },
    },
  };
};
export default components;


============================================================
FILE: src/theme/DarkThemeColors.tsx
============================================================
const DarkThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#253662',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#1C455D',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
      background: {
        default: '#2A3447',
        dark: '#2A3547',
        paper: '#2A3447',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#103247',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#0C4339',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#26153C',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#09454B',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#05313F',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#282917',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#003638',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#40241C',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#402E32',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#082E45',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { DarkThemeColors };


============================================================
FILE: src/theme/DefaultColors.tsx
============================================================
const baselightTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#49BEFF',
      light: '#E8F7FF',
      dark: '#23afdb',
    },
    success: {
      main: '#13DEB9',
      light: '#E6FFFA',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#EBF3FE',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#FDEDE8',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#FEF5E5',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#F2F6FA',
      200: '#EAEFF4',
      300: '#DFE5EF',
      400: '#7C8FAC',
      500: '#5A6A85',
      600: '#2A3547',
    },
    text: {
      primary: '#2A3547',
      secondary: '#2A3547',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#f6f9fc',
    },
    divider: '#e5eaef',
    background: {
      default: '#ffffff',
    },
  },
};

const baseDarkTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#777e89',
      light: '#1C455D',
      dark: '#173f98',
    },
    success: {
      main: '#13DEB9',
      light: '#1B3C48',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#223662',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#4B313D',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#4D3A2A',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#333F55',
      200: '#465670',
      300: '#7C8FAC',
      400: '#DFE5EF',
      500: '#EAEFF4',
      600: '#F2F6FA',
    },
    text: {
      primary: '#EAEFF4',
      secondary: '#7C8FAC',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#333F55',
    },
    divider: '#333F55',
    background: {
      default: '#171c23',
      dark: '#171c23',
      paper: '#171c23',
    },
  },
};

export { baseDarkTheme, baselightTheme };


============================================================
FILE: src/theme/LightThemeColors.tsx
============================================================
const LightThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#ECF2FF',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#E8F7FF',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { LightThemeColors };


============================================================
FILE: src/theme/Shadows.tsx
============================================================
const shadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 12%) 0px 12px 24px -4px',
  '0px 6px 12px rgba(127, 145, 156, 0.12)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

const darkshadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 2%) 0px 12px 24px -4px',
  '0px 6px 12px rgba(127, 145, 156, 0.12)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

export { shadows, darkshadows };


============================================================
FILE: src/theme/Theme.tsx
============================================================
// File: src/theme/Theme.ts
import _ from 'lodash';
import createTheme from '@mui/material/styles/createTheme';
import type { ThemeOptions, Shadows } from '@mui/material/styles';
import { arSD, enUS } from '@mui/material/locale';
import { useSelector } from 'src/store/Store';
import { useEffect, useMemo } from 'react';
import { AppState } from '../store/Store';
import components from './Components';
import typography from './Typography';
import { shadows, darkshadows } from './Shadows';
import { DarkThemeColors } from './DarkThemeColors';
import { LightThemeColors } from './LightThemeColors';
import { baseDarkTheme, baselightTheme } from './DefaultColors';

// Cache للثيمات لتجنب إعادة الإنشاء
const themeCache = new Map<string, ReturnType<typeof createTheme>>();

export const BuildTheme = (config: any = {}) => {
  const cacheKey = `${config.theme}-${config.direction}-${config.mode}`;
  if (themeCache.has(cacheKey)) {
    return themeCache.get(cacheKey)!;
  }

  const themeOptions = LightThemeColors.find((t) => t.name === config.theme);
  const darkThemeOptions = DarkThemeColors.find((t) => t.name === config.theme);
  const defaultTheme = config.mode === 'dark' ? baseDarkTheme : baselightTheme;
  const defaultShadow = (config.mode === 'dark' ? darkshadows : shadows) as Shadows;
  const themeSelect = config.mode === 'dark' ? darkThemeOptions : themeOptions;

  const fontFamily = '"Cairo"';
  const enhancedTypography = {
    ...typography,
    fontFamily,
    h1: { ...typography.h1, fontFamily, fontWeight: config.direction === 'rtl' ? 700 : 500 },
    h2: { ...typography.h2, fontFamily, fontWeight: config.direction === 'rtl' ? 600 : 500 },
    h3: { ...typography.h3, fontFamily, fontWeight: config.direction === 'rtl' ? 600 : 500 },
    h4: { ...typography.h4, fontFamily, fontWeight: config.direction === 'rtl' ? 600 : 500 },
    h5: { ...typography.h5, fontFamily, fontWeight: config.direction === 'rtl' ? 600 : 500 },
    h6: { ...typography.h6, fontFamily, fontWeight: config.direction === 'rtl' ? 600 : 500 },
    body1: { ...typography.body1, fontFamily, fontWeight: 400 },
    body2: { ...typography.body2, fontFamily, fontWeight: 400 },
    button: { ...typography.button, fontFamily, fontWeight: 500 },
    caption: { ...typography.caption, fontFamily },
    overline: { ...typography.overline, fontFamily },
    subtitle1: { ...typography.subtitle1, fontFamily, fontWeight: 500 },
    subtitle2: { ...typography.subtitle2, fontFamily, fontWeight: 500 },
  };

  const baseMode: ThemeOptions = {
    palette: { mode: config.mode },
    shape: { borderRadius: config.borderRadius || 8 },
    shadows: defaultShadow,
    typography: enhancedTypography,
    direction: config.direction,
  };

  const locale = config.direction === 'rtl' ? arSD : enUS;

  const mergedOptions: ThemeOptions = _.merge(
    {},
    baseMode,
    defaultTheme,
    themeSelect,
  );

  const theme = createTheme(mergedOptions, locale);
  theme.components = { ...components(theme) };
  themeCache.set(cacheKey, theme);
  return theme;
};

const ThemeSettings = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const { activeDir, activeTheme, activeMode, borderRadius } = customizer;

  const theme = useMemo(
    () =>
      BuildTheme({
        direction: activeDir,
        theme: activeTheme,
        mode: activeMode,
        borderRadius,
      }),
    [activeDir, activeTheme, activeMode, borderRadius]
  );

  useEffect(() => {
    requestAnimationFrame(() => {
      document.dir = activeDir;
      document.documentElement.dir = activeDir;
      document.body.classList.remove('rtl', 'ltr');
      document.body.classList.add(activeDir);
      document.body.style.fontFamily = '"Cairo"';
    });
  }, [activeDir]);

  return theme;
};

export const clearThemeCache = () => {
  themeCache.clear();
};

export { ThemeSettings };


============================================================
FILE: src/theme/ThemeColors.tsx
============================================================
const ThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
      },
      background: {
        default: '#f8fffc',
        dark: '#ffffff',
        paper: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
      },
    },
  },
];

export default ThemeColors;


============================================================
FILE: src/theme/Typography.tsx
============================================================
const typography: any = {
  fontFamily: "'Plus Jakarta Sans', sans-serif;",
  h1: {
    fontWeight: 600,
    fontSize: '2.25rem',
    lineHeight: '2.75rem',
  },
  h2: {
    fontWeight: 600,
    fontSize: '1.875rem',
    lineHeight: '2.25rem',
  },
  h3: {
    fontWeight: 600,
    fontSize: '1.5rem',
    lineHeight: '1.75rem',
  },
  h4: {
    fontWeight: 600,
    fontSize: '1.3125rem',
    lineHeight: '1.6rem',
  },
  h5: {
    fontWeight: 600,
    fontSize: '1.125rem',
    lineHeight: '1.6rem',
  },
  h6: {
    fontWeight: 600,
    fontSize: '1rem',
    lineHeight: '1.2rem',
  },
  button: {
    textTransform: 'capitalize',
    fontWeight: 400,
  },
  body1: {
    fontSize: '0.875rem',
    fontWeight: 400,
    lineHeight: '1.334rem',
  },
  body2: {
    fontSize: '0.75rem',
    letterSpacing: '0rem',
    fontWeight: 400,
    lineHeight: '1rem',
  },
  subtitle1: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
  subtitle2: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
};

export default typography;


============================================================
FILE: src/utils/languages/ar.json
============================================================
{
    "Modern": "عصري",
    "Ecommerce": "التجارة الإلكترونية",
    "eCommerce": "التجارة الإلكترونية",
    "Contacts": "جهات الاتصال",
    "Blog": "مقالات",
    "Posts": "المشاركات",
    "Detail": "التفاصيل",
    "Shop": "متجر",
    "List": "قائمة",
    "Checkout": "الدفع",
    "Chats": "الدردشات",
    "Users": "المستخدمون",
    "Profile": "الملف الشخصي",
    "Followers": "متابعون",
    "Friends": "أصدقاء",
    "Gallery": "صالة عرض",
    "Notes": "ملاحظات",
    "Calendar": "التقويم",
    "Email": "بريد إلكتروني",
    "Tickets": "تذاكر",
 "header": {
    "print": {
      "tooltip": "خيارات الطباعة",
      "normal": "طباعة عادية",
      "normalDesc": "طباعة باستخدام طابعة النظام",
      "thermal": "طباعة حرارية",
      "printer": "طابعة",
      "test": "اختبار الطباعة",
      "testDesc": "اختبار الطابعة الحرارية",
      "testSuccess": "تم اختبار الطباعة بنجاح",
      "testFailed": "فشل في اختبار الطباعة",
      "testError": "خطأ في اختبار الطباعة",
      "thermalDisabled": "الطباعة الحرارية غير مفعلة",
      "enableThermal": "تفعيل الطباعة الحرارية",
      "goToSettings": "الذهاب للإعدادات",
      "clickToEnable": "اضغط هنا لتفعيل الطباعة الحرارية",
      "settings": "إعدادات الطباعة",
      "manageSettings": "إدارة إعدادات الطابعة",
      "printerSettings": "إعدادات الطابعة",
      "configureOptions": "تكوين خيارات الطباعة"
    },
    "printerSettings": "إعدادات الطابعة"
  },
  "settings": {
    "printer": {
      "title": "إعدادات الطابعة",
      "description": "إدارة إعدادات الطباعة العادية والحرارية",
      "thermalSettings": "إعدادات الطباعة الحرارية",
      "enableThermal": "تفعيل الطباعة الحرارية",
      "quickEnable": "تفعيل سريع",
      "disabledInfo": "الطباعة الحرارية غير مفعلة. يمكنك تفعيلها للحصول على خيارات طباعة إضافية.",
      "type": "نوع الطابعة",
      "network": "شبكة",
      "ip": "عنوان IP",
      "port": "المنفذ",
      "ipHelp": "عنوان IP الخاص بالطابعة الحرارية",
      "portHelp": "منفذ الاتصال (عادة 9100)",
      "testPrint": "اختبار الطباعة",
      "ctrlPInfo": "بعد الحفظ، يمكنك استخدام زرار الطباعة في الشريط العلوي",
      "saved": "تم حفظ الإعدادات بنجاح",
      "saveError": "خطأ في حفظ الإعدادات",
      "testCompleted": "تم إجراء اختبار الطباعة",
        "basicSettings": "الإعدادات الأساسية",
      "advancedSettings": "الإعدادات المتقدمة",
      "systemInfo": "معلومات النظام",
      "testing": "جاري الاختبار...",
      "testConnection": "اختبار الاتصال",
      "connectionSuccess": "تم الاتصال بالطابعة بنجاح",
      "connectionFailed": "فشل الاتصال بالطابعة",
      "connectionError": "خطأ في الاتصال",
      "testSuccess": "تم اختبار الطباعة بنجاح",
      "testFailed": "فشل اختبار الطباعة",
      "testError": "خطأ في اختبار الطباعة",
      "resetSuccess": "تم إعادة تعيين الإعدادات",
      "reset": "إعادة تعيين",
      "autoConnect": "اتصال تلقائي",
      "autoConnectDesc": "الاتصال بالطابعة تلقائياً بدون طلب اختيار البورت",
      "silentPrint": "طباعة صامتة",
      "silentPrintDesc": "طباعة مباشرة بدون عرض نوافذ اختيار",
      "supported": "مدعوم",
      "notSupported": "غير مدعوم",
      "networkPrinting": "الطباعة الشبكية",
      "networkDesc": "طباعة عبر الشبكة المحلية"
    }
  },

  "sidebar": {
    "stock": "المخزون",
     "tableSections": "أقسام الطاولات",
    "posProducts": "منتجات نقاط البيع",
       "hallCaptains": "كباتن الصالة",
            "systemAdmin": "إدارة النظام",
       "deliveryZones": "مناطق التوصيل",
      "offers": "العروض",
      "deliveryCompanies": "شركات التوصيل",
    "deliveryAgents": "مناديب التوصيل",
     "additionProducts": "منتجات الإضافات",
    "userManagement": "إدارة المستخدمين",
    "companySettings": "إعدادات الشركة",
    "permissions": "الصلاحيات",
    "inventory": "المخزون",
    "inventoryadjustments": "تسويات المخزون",
    "sales": "المبيعات",
    "screens": "الشاشات",
    "promo": "العروض",
    "purchases": "المشتريات",
    "finance": "المالية والحسابات",
    "peoples": "الأشخاص",
    "hrm": "الموارد البشرية",
    "reports": "التقارير",
    "data": "البيانات",
    "transactions": "الحركات",
    "products": "المنتجات",
    "createProduct": "إنشاء منتج",
    "expiredProducts": "منتجات منتهية الصلاحية",
    "lowStocks": "مخزون منخفض",
    "category": "الفئات",
    "subCategory": "الفئات الفرعية",
    "brands": "العلامات التجارية",
    "units": "الوحدات",
    "variantAttributes": "سمات المتغير",
    "warranties": "الضمانات",
    "printBarcode": "طباعة الباركود",
    "printQrCode": "طباعة رمز QR",
    "manageStock": "إدارة المخزون",
    "stockAdjustment": "تعديل المخزون",
    "stockTransfer": "تحويل المخزون",
    "invoices": "الفواتير",
    "salesReturn": "مرتجعات المبيعات",
    "quotation": "عرض سعر",
    "pos": "نقطة البيع",
    "coupons": "كوبونات",
    "giftCards": "بطاقات الهدايا",
    "discount": "خصم",
    "purchaseOrders": "أوامر الشراء",
    "purchaseReturn": "مرتجعات المشتريات",
    "expenses": "المصروفات",
    "income": "الإيرادات",
    "bankAccounts": "الحسابات البنكية",
    "moneyTransfer": "تحويل الأموال",
    "balanceSheet": "الميزانية العمومية",
    "trialBalance": "ميزان المراجعة",
    "cashFlow": "التدفق النقدي",
    "accountStatement": "كشف الحساب",
    "customers": "العملاء",
    "billers": "المفوترون",
    "suppliers": "الموردون",
    "stores": "المتاجر",
    "warehouses": "المخازن",
    "employees": "الموظفون",
    "departments": "الأقسام",
    "designation": "المسميات الوظيفية",
    "shifts": "الورديات",
    "attendance": "الحضور",
    "leaves": "الإجازات",
    "holidays": "العطلات",
    "payroll": "الرواتب",
    "salesReport": "تقرير المبيعات",
    "purchaseReport": "تقرير المشتريات",
    "inventoryReport": "تقرير المخزون",
    "invoiceReport": "تقرير الفواتير",
    "supplierReport": "تقرير الموردين",
    "customerReport": "تقرير العملاء",
    "productReport": "تقرير المنتجات",
    "expenseReport": "تقرير المصروفات",
    "incomeReport": "تقرير الإيرادات",
    "taxReport": "تقرير الضرائب",
    "profitLoss": "الأرباح والخسائر",
    "annualReport": "التقرير السنوي",
    "settings": "الإعدادات",
    "productBalance": "أرصدة المنتجات",
    "accounting": "المحاسبة",
    "safes": "الخزائن",
    "accounts": "الحسابات",
    "posPaymentMethods": "طرق دفع نقاط البيع",
    "paymentMethods": "طرق الدفع",
    "safesAndAccounts": "الخزائن والحسابات"
  },
 "products": {
    "title": "المنتجات",
     "pricing": "التسعير",
    "defaultPrices": "الأسعار الافتراضية", 
    "branchPrices": "أسعار الفرع",
    "branchPrice": "سعر الفرع",
    "difference": "الفرق",
    "defaultPrice": "السعر الافتراضي",
    "productPrice": "سعر المنتج",
    "noPricesForBranchPricing": "لا توجد أسعار افتراضية لتسعير الفروع",
    "noBranchesAccess": "لا توجد فروع متاحة للمستخدم",
    "manageBranchPrices": "إدارة أسعار الفروع",
    "selectGroup": "اختر مجموعة",
    "selectPosScreen": "اختر شاشة نقطة البيع",
    "optionGroups": "مجموعات الخيارات",
    "noOptionGroups": "لا توجد مجموعات خيارات",
    "addOptionGroup": "إضافة مجموعة خيارات",
    "basicInfo": "المعلومات الأساسية",
    "tabs": {
      "basicInfoAndPrices": "المعلومات الأساسية والأسعار",
      "basicInfo": "المعلومات الأساسية",
      "prices": "الأسعار",
      "options": "خيارات المنتج"
    },
     "types": {
      "pos": "نقطة بيع",
      "material": "مادة خام",
      "addition": "إضافة",
      "unknown": "غير محدد"
    },
      "form": {
         "isActive": "نشط",
      "posPriceName": "اسم السعر",
      "posNamePlaceholder": "أدخل اسم السعر...",
      "required": "مطلوب",
      "addComment": "إضافة تعليق",
      "comment": "تعليق",
      "product": "منتج",
      "useOriginalPrice": "استخدام السعر الأصلي",
      "selectProductPrice": "اختر سعر المنتج",
      "selectProductPricePlaceholder": "ابحث عن منتج...",
      "addFromProducts": "إضافة من المنتجات",
      "selectProducts": "اختيار المنتجات",
      "searchProducts": "البحث في المنتجات...",
      "filterByGroup": "فلترة حسب المجموعة",
      "allGroups": "كل المجموعات",
      "productsFound": "تم العثور على {{count}} منتج",
      "selected": "مختار: {{count}}",
      "selectAll": "اختيار الكل",
      "deselectAll": "إلغاء اختيار الكل",
      "priceName": "اسم السعر",
      "noProductsFound": "لا توجد منتجات",
      "addSelected": "إضافة المختار ({{count}})",
      "productName": "اسم المنتج",
      "price": "السعر",
      "barcode": "الباركود",
      "productOptions": "خيارات المنتج",
      "addOptionGroup": "إضافة مجموعة خيارات",
      "noOptionGroups": "لا توجد مجموعات خيارات",
      "optionGroup": "مجموعة خيارات",
      "optionGroupName": "اسم مجموعة الخيارات",
      "isRequired": "مطلوب",
      "allowMultiple": "السماح بالاختيار المتعدد",
      "minSelection": "الحد الأدنى للاختيار",
      "maxSelection": "الحد الأقصى للاختيار",
      "optionItems": "عناصر الخيارات",
      "addOptionItem": "إضافة عنصر",
      "optionItemName": "اسم العنصر",
      "extraPrice": "سعر إضافي",
      "commentOnly": "تعليق فقط",
            "posScreen": "شاشة نقطة البيع",
      "noPosScreen": "بدون شاشة"
    },
  "status": {
      "active": "نشط",
      "title": "الحالة",
      "inactive": "غير نشط"
    },
    "validation": {
      "optionGroupNameRequired": "اسم مجموعة الخيارات مطلوب",
      "optionItemNameRequired": "اسم عنصر الخيار مطلوب"
    },
       "hasBarcode": "يحتوي على باركود",
    "optionGroup": "مجموعة خيارات",
    "subtitle": "إدارة المنتجات والأسعار في النظام",
    "searchPlaceholder": "البحث بالاسم أو الباركود...",
    "searchByBarcode": "البحث بالباركود",
       "components": "المكونات",
           "loadingComponentDetails": "جاري تحميل تفاصيل المكون",
           "selectedComponent": "المكون المحدد",
               "copySuccess": "تم نسخ إعدادات المنتج بنجاح",
    "pasteSuccess": "تم لصق الإعدادات مع {{count}} أسعار",
    "nameRequiredForCopy": "يجب إدخال اسم المنتج أولاً للنسخ",
    "componentsCopySuccess": "تم نسخ المكونات بنجاح",
    "componentsPasteSuccess": "تم لصق المكونات بنجاح",
    "noComponentsToCopy": "لا توجد مكونات للنسخ",
        "addComponentTitle": "إضافة مكون جديد",
        "editComponentTitle": "تعديل المكون",
        "componentName": "اسم المكون",
        "componentCode": "كود المكون",
        "componentGroup": "مجموعة المكون",
        "componentType": "نوع المكون",
        "componentDescription": "وصف المكون",
        "componentReorderLevel": "حد الطلب للمكون",
        "componentCost": "تكلفة المكون",
        "componentLastPurePrice": "آخر سعر شراء للمكون",
        "componentExpirationDays": "أيام انتهاء صلاحية المكون",
    "addComponent": "إضافة مكون",
        "scrollForMore": "مرر لأسفل لتحميل المزيد",
    "noComponents": "لا توجد مكونات",
    "quantity": "الكمية",
        "searchProductPrices": "ابحث في أسعار المنتجات...",
    "noProductPricesFound": "لا توجد أسعار منتجات",
    "selectedPrice": "السعر المحدد",
    "selectComponent": "اختر المكون",
    "componentRequired": "المكون مطلوب",
    "componentProduct": "المنتج المكون",
    "notes": "ملاحظات",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات",
    "name": "اسم المنتج",
    "code": "كود المنتج",
    "group": "المجموعة",
    "type": "نوع المنتج",
    "description": "الوصف",
    "reorderLevel": "حد الطلب",
    "cost": "التكلفة",
    "lastPurePrice": "آخر سعر شراء",
    "expirationDays": "أيام انتهاء الصلاحية",
    "created": "تاريخ الإنشاء",
    "add": "إضافة منتج",
    "edit": "تعديل المنتج",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وجديد",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المنتج مطلوب",
    "groupRequired": "المجموعة مطلوبة",
    "viewPrices": "عرض الأسعار",
    "pricesFor": "أسعار",
    "prices": "أسعار",
    "pricesCount": "عدد الأسعار",
    "unit": "الوحدة",
    "unitFactor": "معامل الوحدة",
    "barcode": "الباركود",
    "price": "السعر",
    "generated": "مولد تلقائياً",
    "autoGenerated": "مولد تلقائياً",
    "yes": "نعم",
    "no": "لا",
    "noPrices": "لا توجد أسعار",
    "selectUnit": "اختر الوحدة",
    "barcodeOptional": "الباركود (اختياري)",
    "addPrice": "إضافة سعر",
      "searchPricesTitle": "البحث في أسعار المنتجات",
    "searchPricesPlaceholder": "البحث بالاسم أو الباركود...",
    "startTypingPrices": "ابدأ بكتابة اسم المنتج أو الباركود للبحث",
    "salePrice": "سعر البيع",
     "product": "منتج",
    "quickSearchPlaceholder": "بحث سريع...",
    "productAdded": "تم إضافة المنتج",
    "noProductFoundWithBarcode": "لم يتم العثور على منتج بهذا الباركود",
    "searchError": "خطأ في البحث",
    "selectPriceTitle": "اختيار سعر المنتج",
    "selected": "محدد",
    "loadingMore": "جاري تحميل المزيد",
    "allResultsLoaded": "تم تحميل جميع النتائج",
    "navigateWithArrows": "التنقل بالأسهم",
    "selectWithEnter": "للاختيار",
     "selectProduct": "اختيار منتج",

    "enterSearchTerm": "أدخل كلمة البحث",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المنتجات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "common": {
    "copy": "نسخ",
    "paste": "لصق",
    "clearCopy": "مسح المنسوخ",
    "currency": "ج.م"
  }
  },


    "reports": {
    "productBalance": {
      "title": "تقرير أرصدة المنتجات",
      "description": "عرض تفصيلي لأرصدة المنتجات في جميع المخازن"
    },
    "filters": {
      "title": "المرشحات",
      "searchProducts": "البحث في المنتجات...",
      "warehouse": "المخزن",
      "allWarehouses": "جميع المخازن",
      "stockStatus": "حالة المخزون",
      "all": "الكل"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المنتجات والمخازن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "stockFilter": {
      "all": "جميع المنتجات",
      "inStock": "متوفر في المخزون",
      "outOfStock": "غير متوفر",
      "lowStock": "مخزون منخفض"
    },
    "stockStatus": {
      "inStock": "متوفر",
      "outOfStock": "غير متوفر",
      "lowStock": "مخزون منخفض"
    },
    "stats": {
      "totalProducts": "إجمالي المنتجات",
      "totalWarehouses": "إجمالي المخازن",
      "inStock": "متوفر في المخزون",
      "outOfStock": "غير متوفر",
      "totalCostValue": "قيمة التكلفة",
      "totalLastPurePriceValue": "قيمة آخر سعر شراء"
    },
    "table": {
      "product": "المنتج",
      "warehouse": "المخزن",
      "totalQuantity": "إجمالي الكمية",
      "remainder": "المتبقي",
      "status": "الحالة",
      "unitBreakdown": "تفصيل الوحدات",
      "unit": "الوحدة",
      "factor": "المعامل",
      "quantity": "الكمية",
      "totalCostValue": "إجمالي قيمة التكلفة",
      "totalLastPurePriceValue": "إجمالي قيمة آخر سعر شراء",
      "cost": "التكلفة",
      "totalCost": "إجمالي التكلفة",
      "lastPurePrice": "آخر سعر شراء",
      "totalLastPurePrice": "إجمالي آخر سعر شراء"
    },
    "noData": "لا توجد بيانات لعرضها",
    "errors": {
      "loadFailed": "فشل في تحميل البيانات"
    }
  },

  "barcode": {
    "scan": "مسح الباركود",
    "scanTitle": "مسح الباركود",
    "pointCamera": "وجه الكاميرا نحو الباركود",
    "clickToStart": "انقر لبدء المسح",
    "startCamera": "تشغيل الكاميرا",
    "simulateScan": "محاكاة المسح"
  },
  "validation": {
    "enterValidNumber": "يرجى إدخال رقم صحيح في حقل",
    "minValue": "القيمة لا يمكن أن تكون أقل من 0",
    "maxPercent": "القيمة لا يمكن أن تزيد عن 100%",
        "supplierRequired": "يجب اختيار المورد",
    "warehouseRequired": "يجب اختيار المخزن",
    "itemsRequired": "يجب إضافة منتج واحد على الأقل"
  },

   "export": {
    "title": "تصدير البيانات",
    "pdf": "تصدير PDF",
    "excel": "تصدير Excel",
    "recordsCount": "{{count}} سجل",
    "exportedOn": "تم التصدير في",
    "subject": "تقرير البيانات",
    "author": "نظام إدارة المخزون",
    "errorPdf": "حدث خطأ أثناء تصدير PDF",
    "errorExcel": "حدث خطأ أثناء تصدير Excel",
        "exportExcel": "تصدير Excel",
    "exportPdf": "تصدير PDF"
  },
   "suppliers": {
    "title": "الموردين",
    "subtitle": "إدارة الموردين والشركات الموردة",
    "name": "اسم المورد",
    "code": "كود المورد",
    "phone": "رقم الهاتف",
    "address": "العنوان",
    "notes": "ملاحظات",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في الموردين...",
    "add": "إضافة مورد",
    "edit": "تعديل المورد",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وجديد",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المورد مطلوب",
    "nameMinLength": "اسم المورد يجب أن يكون على الأقل حرفين",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "addressRequired": "العنوان مطلوب",
      "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الموردين...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
    },
"purchaseOrders": {
    "title": "أوامر الشراء",
    "list": "قائمة أوامر الشراء",
    "add": "إضافة أمر شراء",
    "edit": "تعديل أمر شراء",
    "docNumber": "رقم المستند",
    "docNumberRequired": "رقم المستند مطلوب",
    "date": "التاريخ",
    "dateRequired": "التاريخ مطلوب",
    "supplier": "المورد",
    "supplierRequired": "المورد مطلوب",
    "selectSupplier": "اختر المورد",
    "warehouse": "المخزن",
    "warehouseRequired": "المخزن مطلوب",
    "selectWarehouse": "اختر المخزن",
    "totalDiscount": "إجمالي الخصم",
    "totalTax": "إجمالي الضريبة",
    "items": "الأصناف",
    "addItemWithSearch": "إضافة صنف بالبحث",
    "quantity": "الكمية",
    "price": "السعر",
    "discount": "الخصم",
    "tax": "الضريبة",
    "total": "الإجمالي",
    "subTotal": "المجموع الفرعي",
    "discountValue": "قيمة الخصم",
    "taxValue": "قيمة الضريبة",
    "noItems": "لا توجد أصناف",
    "saveAndNew": "حفظ وجديد",
    "product": "المنتج",
    "unit": "الوحدة",
    "code": "الرمز",
    "itemsCount": "عدد العناصر",
    "pending": "قيد الانتظار",
    "submitted": "مُرسل",
    "active": "نشط",
    "inactive": "غير نشط",
      "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر", 
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في أوامر الشراء...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "status": {
      "title": "حالة أمر الشراء",
      "pending": "معلق",
      "draft": "مسودة", 
      "submitted": "مؤكد",
      "unknown": "غير معروف"
    },
    "table": {
      "docNumber": "رقم المستند",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "date": "التاريخ",
      "total": "الإجمالي",
      "status": "الحالة"
    }
    
  },
    "purchases": {
    "title": "فواتير الشراء",
    "description": "إدارة فواتير الشراء والمدفوعات",
    "addButton": "إضافة فاتورة شراء",
    "searchPlaceholder": "البحث في فواتير الشراء...",
    "listTitle": "فواتير الشراء",
    "noData": "لا توجد فواتير شراء",
     "view": {
      "title": "عرض فاتورة الشراء"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في فواتير الشراء...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "basicInfo": "المعلومات الأساسية",
    "discountsAndTaxes": "الخصومات والضرائب",
    "items": "الأصناف",
    "noItems": "لا توجد أصناف",
    "invoiceNumber": "رقم الفاتورة",
    "invoiceDate": "تاريخ الفاتورة",
    "supplier": "المورد",
    "warehouse": "المخزن",
    "selectSupplier": "اختر المورد",
    "selectWarehouse": "اختر المخزن",
    "quantity": "الكمية",
    "price": "السعر",
    "discount": "الخصم",
    "tax": "الضريبة",
    "total": "الإجمالي",
    "totalDiscount": "إجمالي الخصم",
    "totalTax": "إجمالي الضريبة",
    "savePending": "حفظ معلق",
    "submit": "تأكيد",
    "edit": "تعديل فاتورة الشراء",
    "status": {
      "pending": "معلقة",
      "submitted": "مقدمة"
    },
    
    "table": {
      "invoiceNumber": "رقم الفاتورة",
      "code": "الكود",
      "purchaseOrder": "أمر الشراء",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "invoiceDate": "تاريخ الفاتورة",
      "total": "الإجمالي",
      "itemsCount": "عدد الأصناف",
      "status": "الحالة",
      "items": "صنف",
      "directInvoice": "فاتورة مباشرة"
    },
    "form": {
      "addTitle": "إضافة فاتورة شراء",
      "editTitle": "تعديل فاتورة شراء",
      "invoiceNumber": "رقم الفاتورة",
      "invoiceDate": "تاريخ الفاتورة",
      "supplier": "المورد",
      "warehouse": "المخزن",
      "selectSupplier": "اختر المورد",
      "selectWarehouse": "اختر المخزن",
      "status": "الحالة",
      "totalDiscount": "إجمالي الخصم",
      "totalTax": "إجمالي الضريبة",
      "subTotal": "المجموع الفرعي",
      "discountValue": "قيمة الخصم",
      "taxValue": "قيمة الضريبة",
      "total": "الإجمالي",
      "items": "الأصناف",
      "quickSearch": "البحث السريع في المنتجات...",
      "scanBarcode": "مسح الباركود",
      "addBySearch": "إضافة بالبحث",
      "noItems": "لا توجد أصناف",
      "product": "المنتج",
      "unit": "الوحدة",
      "quantity": "الكمية",
      "price": "السعر",
      "discount": "الخصم",
      "tax": "الضريبة",
      "importFromPO": "استيراد من أمر شراء",
      "savePending": "حفظ معلق",
      "submitInvoice": "تقديم الفاتورة",
      "linkedToPO": "مرتبط بأمر الشراء",
      "poCode": "كود الأمر",
      "poDate": "تاريخ الأمر",
      "poTotal": "إجمالي الأمر",
      "itemsCount": "عدد الأصناف",
      "selectPurchaseOrder": "اختيار أمر شراء",
      "searchPurchaseOrders": "البحث في أوامر الشراء...",
      "noSubmittedPO": "لا توجد أوامر شراء مقدمة",
      "code": "الكود",
      "date": "التاريخ",
      "unknownProduct": "منتج غير محدد",
      "purchaseOrderImported": "تم تحميل أمر الشراء: {{number}}",
      "productAdded": "تم إضافة المنتج: {{name}}",
      "barcodeNotFound": "لم يتم العثور على منتج بهذا الباركود",
      "searchError": "خطأ في البحث عن المنتج",
      "inLine": "في السطر",
      "missingProductId": "مفقود معرف المنتج",
      "missingPriceId": "مفقود معرف السعر",
      "invalidNumber": "يرجى إدخال رقم صحيح في {{field}}",
      "validation": {
        "supplierRequired": "يجب اختيار المورد",
        "warehouseRequired": "يجب اختيار المخزن",
        "itemsRequired": "يجب إضافة منتج واحد على الأقل"
      }
    },
    "errors": {
      "loadFailed": "فشل في تحميل فواتير الشراء",
      "dataLoadFailed": "فشل في تحميل البيانات",
      "addFailed": "فشل في إضافة فاتورة الشراء",
      "updateFailed": "فشل في تحديث فاتورة الشراء",
      "idRequired": "معرف فاتورة الشراء مطلوب",
      "noPurchaseLoaded": "لا توجد فاتورة شراء محملة",
      "purchaseNotFound": "فاتورة الشراء غير موجودة",
      "missingId": "خطأ: معرف فاتورة الشراء غير موجود"
    },
    "messages": {
      "addSuccess": "تم إنشاء فاتورة الشراء بنجاح",
      "updateSuccess": "تم تحديث فاتورة الشراء بنجاح"
    }
  },
  "common": {
    "search": "بحث",
    "update": "تحديث",
    "saveChanges": "حفظ التغييرات",
    "selected": "محدد",
    "active": "نشط",
    "inactive": "غير نشط",
    "currency": "جنيه",
    "hideColumn": "إخفاء العمود",
    "all": "الكل",
    "home": "الرئيسية",
    "add": "إضافة",
        "copy": "نسخ",
    "paste": "لصق",
    "clear": "مسح",
    "expoerDate": "تاريخ التصدير",
    "edit": "تعديل",
    "cancel": "إلغاء",
    "loading": "جاري التحميل...",
    "save": "حفظ",
    "back": "رجوع",
    "saveError": "خطأ في الحفظ",
    "inLine": "في السطر",
    "searching": "جاري البحث",
    "view": "عرض",
    "submit": "تقديم",
    "delete": "حذف",
    "noSearchResults": "لا توجد نتائج للبحث",
    "notSpecified": "غير محدد",
    "required": "مطلوب",
    "refresh": "تحديث",
        "yes": "نعم",
    "no": "لا",
    "exportedOn": "تم التصدير في",
    "actions": "الإجراءات",
       "density": "الكثافة",
    "compact": "مضغوط",
    "standard": "قياسي",
    "comfortable": "مريح",
    "export": "تصدير",
    "exportCSV": "تصدير CSV",
    "print": "طباعة",
    "columns": "الأعمدة",
    "filters": "المرشحات",
    "hideFilters": "إخفاء المرشحات",
    "showFilters": "إظهار المرشحات",
    "findColumn": "البحث عن عمود",
    "columnTitle": "عنوان العمود",
    "reorderColumn": "إعادة ترتيب العمود",
    "showAll": "إظهار الكل",
    "hideAll": "إخفاء الكل",
    "addFilter": "إضافة مرشح",
    "operators": "العوامل",
    "and": "و",
    "or": "أو",
    "value": "القيمة",
    "filterValue": "قيمة المرشح",
    "contains": "يحتوي على",
    "equals": "يساوي",
    "startsWith": "يبدأ بـ",
    "endsWith": "ينتهي بـ",
    "is": "هو",
    "isNot": "ليس",
    "isAfter": "بعد",
    "isOnOrAfter": "في أو بعد",
    "isBefore": "قبل",
    "isOnOrBefore": "في أو قبل",
    "isEmpty": "فارغ",
    "isNotEmpty": "غير فارغ",
    "menu": "القائمة",
    "showColumns": "إظهار الأعمدة",
    "filter": "مرشح",
    "hide": "إخفاء",
    "unsort": "إلغاء الترتيب",
    "sortAsc": "ترتيب تصاعدي",
    "sortDesc": "ترتيب تنازلي",
    "activeFilters": "مرشحات نشطة",
    "activeFilter": "مرشح نشط",
    "sort": "ترتيب",
    "rowsSelected": "صفوف محددة",
    "rowSelected": "صف محدد",
    "totalRows": "إجمالي الصفوف",
    "of": "من",
    "checkboxSelection": "تحديد الصناديق",
    "noResults": "لا توجد نتائج",
    "saveAndNew": "حفظ مع جديد",
       "supported": "مدعوم",
    "notSupported": "غير مدعوم"

    
  },
  "warehouses": {
    "title": "المخازن",
    "subtitle": "إدارة المخزن",
    "save": "حفظ التغييرات",
    "name": "اسم المخزن",
    "code": "رمز المخزن",
    "address": "عنوان المخزن",
    "phone": "رقم الهاتف",
    "email": "البريد الإلكتروني",
    "status": "الحالة",
    "add": "إضافة مخزن",
    "edit": "تعديل المخزن",
    "contact": "شخص الاتصال",
    "workPhone": "رقم الهاتف (العمل)",
    "city": "المدينة",
    "state": "الولاية",
    "country": "البلد",
    "postal": "الرمز البريدي",
    "totalProducts": "إجمالي المنتجات",
    "qty": "الكمية",
    "created": "تاريخ الإنشاء",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المخازن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
      "active": "نشط"
  },
  "status": {
    "active": "نشط",
    "inactive": "غير نشط"
  },
   "units": {
    "title": "الوحدات",
    "subtitle": "إدارة وحدات القياس في النظام",
    "name": "اسم الوحدة",
    "code": "كود الوحدة",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في الوحدات...",
    "add": "إضافة وحدة",
    "edit": "تعديل الوحدة",
    "save": "حفظ",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم الوحدة مطلوب",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الوحدات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
  },
  "groups": {
    "title": "المجموعات",
    "subtitle": "إدارة المجموعات والتصنيفات في النظام",
    "name": "اسم المجموعة",
    "code": "كود المجموعة",
    "status": "الحالة",
    "created": "تاريخ الإنشاء",
    "search": "البحث في المجموعات...",
    "add": "إضافة مجموعة",
    "addChild": "إضافة مجموعة فرعية",
    "edit": "تعديل المجموعة",
    "save": "حفظ",
    "active": "نشط",
    "inactive": "غير نشط",
    "nameRequired": "اسم المجموعة مطلوب",
    "parentGroup": "المجموعة الأب",
    "backgroundColor": "لون الخلفية",
    "fontColor": "لون الخط",
    "preview": "معاينة",
    "sampleText": "نص تجريبي",
     "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في المجموعات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "level": "المستوى",
    "childrenCount": "عدد المجموعات الفرعية",
    "noGroups": "لا توجد مجموعات",
    "rootGroups": "المجموعات الرئيسية"
  },




   "adjustment": {
    "title": "تسوية الجرد",
    "types": {
      "openingBalance": "أرصدة أول المدة",
      "manualAdjustment": "تسوية جرد",
      "notSelected": "لم يتم اختيار نوع التسوية"
    },
      "search": {
      "title": "البحث في الأصناف",
      "placeholder": "ابحث بالاسم أو الباركود...",
      "scanBarcode": "مسح الباركود",
      "currentQuantity": "الكمية الحالية",
      "barcode": "الباركود",
      "noResults": "لا توجد نتائج للبحث",
      "filteredFrom": "مفلتر من {total}"
    },
     "barcode": {
      "title": "مسح الباركود",
      "instruction": "امسح الباركود أو أدخله يدوياً",
      "label": "الباركود",
      "placeholder": "أدخل الباركود هنا...",
      "scan": "بحث"
    },
    "form": {
      "warehouse": "المخزن",
      "selectWarehouse": "اختر المخزن",
      "adjustmentType": "نوع التسوية",
      "referenceNumber": "الرقم المرجعي",
      "reason": "السبب",
      "items": "الأصناف",
      "product": "المنتج",
            "barcode": "الباركود",
      "unit": "الوحدة",
      "unitFactor": "معامل التحويل",
      "oldQuantity": "الكمية القديمة",
      "newQuantity": "الكمية الجديدة",
      "difference": "الفرق",
      "notes": "ملاحظات",
      "noItems": "لا توجد أصناف",
      "save": "حفظ",
      "submit": "تأكيد التسوية",
      "validation": {
        "warehouseRequired": "يجب اختيار المخزن"
      }
    },
    "dialog": {
      "newAdjustmentTitle": "تسوية جرد جديدة",
      "newAdjustmentMessage": "تم بدء عملية جرد جديدة",
      "selectAdjustmentType": "يرجى اختيار نوع التسوية:"
    },
    "messages": {
      "newAdjustmentStarted": "تم بدء عملية جرد جديدة بنجاح",
      "saveSuccess": "تم حفظ التسوية بنجاح",
      "submitSuccess": "تم تأكيد التسوية بنجاح",
            "selectWarehouseToStart": "برجاء اختيار المخزن لبدء تسوية جرد جديدة"

    },
    "errors": {
      "loadWarehousesFailed": "فشل في تحميل المخازن",
      "loadAdjustmentFailed": "فشل في تحميل بيانات التسوية",
      "saveFailed": "فشل في حفظ التسوية",
      "submitFailed": "فشل في تأكيد التسوية"
    }
  },
    "adjustments": {
    "list": {
      "title": "قائمة تسويات الجرد",
      "newAdjustment": "تسوية جرد جديدة",
      "noAdjustments": "لا توجد تسويات جرد"
    },
    "view": {
      "title": "عرض تسوية الجرد",
      "adjustmentInfo": "معلومات التسوية"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "dateRange": "نطاق التاريخ",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في التسويات...",
      "dateFrom": "من تاريخ",
      "dateTo": "إلى تاريخ",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "table": {
      "adjustmentId": "معرف التسوية",
      "type": "النوع",
      "date": "التاريخ",
      "referenceNumber": "الرقم المرجعي",
      "reason": "السبب",
      "totalItems": "عدد الأصناف",
      "totalDifference": "إجمالي الفرق",
      "status": "الحالة",
            "warehouse": "المخزن"

    },
    "types": {
      "new": "جديدة",
      "openingBalance": "أرصدة أول المدة",
      "manualAdjustment": "تسوية جرد",
      "unknown": "غير معروف"
    },
    "status": {
      "saved": "محفوظة",
      "submitted": "مقدمة",
      "unknown": "غير معروف"
    },
    "actions": {
      "view": "عرض"
    },
    "errors": {
      "loadFailed": "فشل في تحميل قائمة التسويات",
      "notFound": "التسوية غير موجودة"
    },
    "summary": {
      "totalItems": "إجمالي الأصناف",
      "totalPositive": "إجمالي الزيادة",
      "totalNegative": "إجمالي النقص"
    },
     "common": {
    "all": "الكل",
    "of": "من"
  }
  },




























  "safes": {
    "title": "الخزائن",
    "add": "إضافة خزنة",
    "edit": "تعديل خزنة",
    "name": "اسم الخزنة",
    "type": "النوع",
    "accountNumber": "رقم الحساب",
    "collectionFeePercent": "نسبة رسوم التحصيل",
    "status": "الحالة",
    "isActive": "نشط",
    "active": "نشط",
    "inactive": "غير نشط",
    "noSafes": "لا توجد خزائن",
    "searchPlaceholder": "ابحث في الخزائن...",
    "types": {
      "cash": "نقدي",
        "safe": "خزنة"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الخزائن...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم الخزنة مطلوب",
      "typeRequired": "نوع الخزنة مطلوب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الخزائن",
      "addFailed": "فشل في إضافة الخزنة",
      "updateFailed": "فشل في تحديث الخزنة"
    }
  },
  "accounts": {
    "title": "الحسابات",
    "add": "إضافة حساب",
    "edit": "تعديل حساب",
    "name": "اسم الحساب",
    "type": "النوع",
    "accountNumber": "رقم الحساب",
    "collectionFeePercent": "نسبة رسوم التحصيل",
    "status": "الحالة",
    "isActive": "نشط",
    "active": "نشط",
    "inactive": "غير نشط",
    "noAccounts": "لا توجد حسابات",
    "searchPlaceholder": "ابحث في الحسابات...",
    "typePlaceholder": "مثل: Bank, Wallet, Visa, InstaPay, StaffAccount",
    "types": {
      "bank": "بنك",
      "wallet": "محفظة إلكترونية",
      "visa": "فيزا",
      "instapay": "إنستاباي",
      "staffaccount": "حساب موظف",
      "other": "أخرى",
      "cash": "نقدي"
    },
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الحسابات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم الحساب مطلوب",
      "typeRequired": "نوع الحساب مطلوب",
      "accountNumberRequired": "رقم الحساب مطلوب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الحسابات",
      "addFailed": "فشل في إضافة الحساب",
      "updateFailed": "فشل في تحديث الحساب"
    }
  },
    "posPaymentMethods": {
    "title": "طرق الدفع",
    "add": "إضافة طريقة دفع",
    "edit": "تعديل طريقة دفع",
    "name": "اسم طريقة الدفع",
    "safeOrAccount": "الخزنة أو الحساب",
    "selectedAccount": "الحساب المحدد",
    "branchesNote": "يمكن ربط طريقة الدفع بفروع مختلفة لاحقاً",
    "status": "الحالة",
    "active": "نشط",
    "inactive": "غير نشط",
    "noPaymentMethods": "لا توجد طرق دفع",
    "searchPlaceholder": "ابحث في طرق الدفع...",
       "accountType": "نوع الحساب",
    "accountNumber": "رقم الحساب",
    "collectionFee": "رسوم التحصيل",
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في طرق الدفع...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    },
    "validation": {
      "nameRequired": "اسم طريقة الدفع مطلوب",
      "accountRequired": "يجب اختيار خزنة أو حساب"
    },
    "errors": {
      "loadFailed": "فشل في تحميل طرق الدفع",
      "addFailed": "فشل في إضافة طريقة الدفع",
      "updateFailed": "فشل في تحديث طريقة الدفع"
    }
  },





 "errors": {
    "title": "خطأ",
    "validationError": "خطأ في البيانات",
    "forbidden": "ممنوع",
    "notFound": "غير موجود",
    "conflict": "تعارض في البيانات",
    "serverError": "خطأ في الخادم",
    "multipleErrors": "أخطاء متعددة",
        "unauthorized": {
      "title": "غير مصرح لك",
      "message": "ليس لديك صلاحية للوصول إلى هذه الصفحة",
      "backToDashboard": "العودة للرئيسية"
    },
    "noBranches": {
      "title": "لا توجد فروع متاحة",
      "message": "لا يوجد فروع مخصصة لهذا المستخدم. يرجى التواصل مع الإدارة لتخصيص الفروع المناسبة."
    }
  },
  "success": {
    "title": "نجح"
  },
  "warning": {
    "title": "تحذير"
  },
  "info": {
    "title": "معلومات"
  },













    "posScreens": {
    "title": "شاشات نقاط البيع",
    "add": "إضافة شاشة",
    "addChild": "إضافة شاشة فرعية",
    "edit": "تعديل شاشة",
    "save": "حفظ",
    "name": "اسم الشاشة",
    "parentScreen": "الشاشة الأب",
    "noParent": "بدون شاشة أب",
    "displayOrder": "ترتيب العرض",
    "visibility": "الرؤية",
    "icon": "الأيقونة",
    "color": "اللون",
    "preview": "معاينة",
    "sampleText": "نص تجريبي",
    "visible": "مرئي",
    "hidden": "مخفي",
    "active": "نشط",
    "inactive": "غير نشط",
    "status": "الحالة",
    "level": "المستوى",
    "noScreens": "لا توجد شاشات",
    "rootScreens": "الشاشات الجذرية",
    "searchPlaceholder": "ابحث في الشاشات...",
    "nameRequired": "اسم الشاشة مطلوب",
    "iconRequired": "الأيقونة مطلوبة",
    "iconHelp": "استخدم رمز تعبيري أو نص قصير",
    "filter": {
      "title": "البحث والفلترة",
      "search": "البحث",
      "filters": "الفلاتر",
      "sorting": "الترتيب",
      "searchPlaceholder": "ابحث في الشاشات...",
      "sortBy": "ترتيب حسب",
      "sortOrder": "نوع الترتيب",
      "ascending": "تصاعدي",
      "descending": "تنازلي",
      "apply": "تطبيق",
      "clear": "مسح الكل",
      "results": "النتائج",
      "activeFilters": "فلاتر نشطة"
    }
  },


    "import": {
    "import": "استيراد",
    "downloadTemplate": "تحميل القالب",
    "importTitle": "استيراد البيانات",
    "selectFile": "اختر ملف Excel",
    "importing": "جاري الاستيراد",
    "errorsFound": "تم العثور على أخطاء",
    "importComplete": "تم الاستيراد بنجاح",
        "rowError": "الصف {{row}}:",
    "addError": "خطأ في الإضافة",
    "successfulRecords": "السجلات الناجحة",
    "failedRecords": "السجلات الفاشلة",
    "andMore": "و {count} أخطاء أخرى",
    "dataPreview": "معاينة البيانات",
    "records": "سجل",
    "andMoreRecords": "و {count} سجلات أخرى",
    "fileReadError": "خطأ في قراءة الملف",
    "requiredField": "الحقل المطلوب",
    "inRow": "في الصف",
    "validationError": "خطأ في التحقق",
    "importError": "خطأ في الاستيراد"
  },

  "auth": {
    "login": {
      "title": "تسجيل الدخول",
      "tenantId": "كود الشركة",
      "tenantPlaceholder": "أدخل كود الشركة",
      "description": "صفحة تسجيل الدخول",
      "phoneNumber": "رقم الهاتف",
      "password": "كلمة المرور",
      "phonePlaceholder": "01xxxxxxxxx",
      "passwordPlaceholder": "أدخل كلمة المرور",
      "rememberMe": "تذكرني",
      "forgotPassword": "نسيت كلمة المرور؟",
      "signIn": "تسجيل الدخول",
      "signingIn": "جاري تسجيل الدخول...",
      "failed": "فشل في تسجيل الدخول",
      "newUser": "مستخدم جديد؟",
      "createAccount": "إنشاء حساب"
    },
    "branchSelection": {
      "title": "اختيار الفرع",
      "description": "صفحة اختيار الفرع",
      "selectBranch": "اختر الفرع",
      "welcomeMessage": "مرحباً {{userName}}، لديك صلاحية الوصول لأكثر من فرع",
      "selectThisBranch": "اختيار هذا الفرع",
      "selecting": "جاري التحديد...",
      "noBranches": "لا توجد فروع متاحة",
      "noBranchesMessage": "لا يوجد فروع مخصصة لهذا المستخدم. يرجى التواصل مع الإدارة."
    },
    "logout": "تسجيل الخروج",
     "errors": {
      "noBranches": "لا يوجد فروع متاحة لهذا المستخدم"
    }
  },
  "users": {
    "userName": "اسم المستخدم",
    "phoneNo": "رقم الهاتف",
    "email": "البريد الإلكتروني",
    "password": "كلمة المرور",
    "title": "إدارة المستخدمين",
    "noUsers": "لا توجد مستخدمين",
        "validation": {
      "userNameTooShort": "اسم المستخدم يجب أن يكون أكثر من حرفين",
      "userNameTooLong": "اسم المستخدم طويل جداً",
      "invalidPhone": "رقم هاتف غير صحيح",
      "invalidEmail": "بريد إلكتروني غير صحيح",
            "requiredFields": "يرجى إدخال جميع البيانات المطلوبة",
      "passwordRequired": "يرجى إدخال كلمة المرور للمستخدم الجديد",
      "passwordTooShort": "كلمة المرور يجب أن تكون 6 أحرف على الأقل"
    },
    "table": {
      "userName": "اسم المستخدم",
      "phoneNumber": "رقم الهاتف",
      "email": "البريد الإلكتروني",
      "actions": "الإجراءات"
    },
    "actions": {
      "add": "إضافة مستخدم"
    },
    "dialog": {
      "addTitle": "إضافة مستخدم جديد",
      "editTitle": "تعديل مستخدم"
    },
    "form": {
      "userName": "اسم المستخدم",
      "phoneNumber": "رقم الهاتف",
      "password": "كلمة المرور",
      "passwordHelp": "اتركها فارغة إذا كنت لا تريد تغييرها"
    },
    "messages": {
      "addSuccess": "تم إضافة المستخدم بنجاح",
      "addFailed": "فشل في إضافة المستخدم",
      "editComingSoon": "سيتم إضافة وظيفة التعديل قريباً"
    },
    "errors": {
      "loadFailed": "خطأ في تحميل المستخدمين",
      "saveFailed": "خطأ في حفظ المستخدم"
    }
  },
  "company": {
    "title": "إعدادات الشركة والفروع",
    "description": "إدارة بيانات الشركة والفروع التابعة لها",
    "tabs": {
      "companyInfo": "بيانات الشركة",
      "branchManagement": "إدارة الفروع"
    },
    "form": {
      "companyName": "اسم الشركة",
      "companyAddress": "عنوان الشركة",
      "companyPhone": "هاتف الشركة",
      "companyEmail": "بريد الشركة الإلكتروني",
      "branchName": "اسم الفرع",
      "branchAddress": "عنوان الفرع",
      "branchPhone": "هاتف الفرع"
    },
    "info": {
      "currentCompanyInfo": "معلومات الشركة الحالية",
      "companyName": "اسم الشركة",
      "branchCount": "عدد الفروع",
      "branchCountValue": "{{count}} فرع",
      "currentBranch": "الفرع الحالي"
    },
    "branches": {
      "title": "فروع الشركة ({{count}})",
      "currentBranch": "الفرع الحالي",
      "otherBranch": "فرع آخر"
    },
    "table": {
      "branchName": "اسم الفرع",
      "address": "العنوان",
      "phone": "الهاتف",
      "status": "الحالة",
      "actions": "الإجراءات"
    },
    "dialog": {
      "editBranch": "تعديل بيانات الفرع"
    },
    "messages": {
      "updateSuccess": "تم تحديث بيانات الشركة بنجاح",
      "branchUpdateSuccess": "تم تحديث بيانات الفرع بنجاح"
    },
    "errors": {
      "updateFailed": "خطأ في تحديث بيانات الشركة",
      "branchUpdateFailed": "خطأ في تحديث بيانات الفرع"
    }
  },
   "permissions": {
    "title": "إدارة الصلاحيات",
    "description": "إدارة صلاحيات المستخدمين للوصول إلى صفحات ووظائف النظام",
    "loading": "جاري تحميل البيانات...",
    "noData": "لا توجد بيانات مستخدمين",
    "pagesCount": "{{accessible}}/{{total}} صفحة",
    "enabled": "مفعل",
    "disabled": "معطل",
    "subPermissions": "الصلاحيات الفرعية",
    "messages": {
      "updateSuccess": "تم تحديث الصلاحية بنجاح"
    },
    "errors": {
      "loadFailed": "خطأ في تحميل البيانات",
      "updateFailed": "خطأ في تحديث الصلاحية"
    }
  },

  "branch": {
    "selectBranch": "اختر الفرع"
  },
  "profile": {
    "user": "المستخدم",
    "menu": {
      "userManagement": "إدارة المستخدمين",
      "companySettings": "إعدادات الشركة",
      "permissions": "الصلاحيات",
      "inbox": "صندوق الرسائل",
      "taskList": "قائمة المهام"
    }
  },

   "posProducts": {
    "title": "منتجات نقاط البيع",
    "searchPlaceholder": "البحث في منتجات نقاط البيع...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة منتج POS",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات POS",
    "errors": {
      "loadFailed": "فشل في تحميل منتجات نقاط البيع",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المنتج",
      "updateFailed": "فشل في تحديث المنتج"
    }
  },
    "materials": {
    "title": "المواد الخام",
    "searchPlaceholder": "البحث في المواد الخام...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة مادة خام",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noMaterials": "لا توجد مواد خام",
    "errors": {
      "loadFailed": "فشل في تحميل المواد الخام",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المادة",
      "updateFailed": "فشل في تحديث المادة"
    }
  },
    "additionProducts": {
    "title": "منتجات الإضافات",
    "searchPlaceholder": "البحث في منتجات الإضافات...",
    "searchByBarcode": "البحث بالباركود",
    "searchByName": "البحث بالاسم",
    "searchResults": "{{count}} نتيجة",
    "add": "إضافة منتج إضافة",
    "searching": "جاري البحث...",
    "noSearchResults": "لا توجد نتائج للبحث",
    "noProducts": "لا توجد منتجات إضافات",
    "errors": {
      "loadFailed": "فشل في تحميل منتجات الإضافات",
      "searchFailed": "فشل في البحث",
      "addFailed": "فشل في إضافة المنتج",
      "updateFailed": "فشل في تحديث المنتج"
    }
  },

    "deliveryZones": {
    "title": "مناطق التوصيل",
    "add": "إضافة منطقة",
    "edit": "تعديل منطقة",
    "searchPlaceholder": "البحث في المناطق...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noZones": "لا توجد مناطق توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم المنطقة مطلوب",
    "deliveryChargeRequired": "رسوم التوصيل مطلوبة",
    "defaultBonusRequired": "المكافأة الافتراضية مطلوبة",
    "form": {
      "name": "اسم المنطقة",
      "deliveryCharge": "رسوم التوصيل",
      "defaultBonus": "المكافأة الافتراضية",
      "branch": "الفرع",
      "allBranches": "كل الفروع",
      "status": "الحالة",
      "isActive": "نشط"
    },
    "errors": {
      "loadFailed": "فشل في تحميل المناطق",
      "addFailed": "فشل في إضافة المنطقة",
      "updateFailed": "فشل في تحديث المنطقة"
    }
  },
  "deliveryAgents": {
    "title": "مناديب التوصيل",
    "add": "إضافة مندوب",
    "edit": "تعديل مندوب",
    "searchPlaceholder": "البحث في المناديب...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noAgents": "لا توجد مناديب توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم المندوب مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "branchRequired": "الفرع مطلوب",
    "deleteConfirmTitle": "تأكيد الحذف",
    "deleteConfirmMessage": "هل أنت متأكد من حذف المندوب {{name}}؟",
    "form": {
      "name": "اسم المندوب",
      "phone": "رقم الهاتف",
      "branch": "الفرع",
      "status": "الحالة"
    },
    "errors": {
      "loadFailed": "فشل في تحميل المناديب",
      "addFailed": "فشل في إضافة المندوب",
      "updateFailed": "فشل في تحديث المندوب",
      "deleteFailed": "فشل في حذف المندوب"
    }
  },
   "tableSections": {
    "title": "أقسام الطاولات",
    "add": "إضافة قسم",
    "edit": "تعديل قسم",
    "searchPlaceholder": "البحث في الأقسام والطاولات...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noSections": "لا توجد أقسام",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم القسم مطلوب",
    "serviceChargeRequired": "رسوم الخدمة مطلوبة",
    "tableNameRequired": "اسم الطاولة مطلوب",
    "capacityRequired": "سعة الطاولة مطلوبة",
    "totalTables": "إجمالي الطاولات: {{count}}",
    "form": {
      "name": "اسم القسم",
      "serviceCharge": "رسوم الخدمة",
      "tables": "الطاولات",
      "tablesCount": "عدد الطاولات",
      "totalCapacity": "السعة الإجمالية",
      "branch": "الفرع",
      "status": "الحالة",
      "tableName": "اسم الطاولة",
      "capacity": "السعة",
      "persons": "شخص",
      "addTable": "إضافة طاولة",
      "noTables": "لا توجد طاولات - اضغط لإضافة طاولة"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الأقسام",
      "addFailed": "فشل في إضافة القسم",
      "updateFailed": "فشل في تحديث القسم"
    }
  },

  "hallCaptains": {
    "title": "كباتن الصالة",
    "add": "إضافة كابتن",
    "edit": "تعديل كابتن",
    "searchPlaceholder": "البحث في الكباتن...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCaptains": "لا توجد كباتن",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "nameRequired": "اسم الكابتن مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "branchRequired": "الفرع مطلوب",
    "form": {
      "name": "اسم الكابتن",
      "phone": "رقم الهاتف",
      "notes": "ملاحظات",
      "notesPlaceholder": "أدخل أي ملاحظات إضافية...",
      "branch": "الفرع",
      "isActive": "نشط"
    },
    "errors": {
      "loadFailed": "فشل في تحميل الكباتن",
      "addFailed": "فشل في إضافة الكابتن",
      "updateFailed": "فشل في تحديث الكابتن"
    }
  },
  "customers": {
    "title": "العملاء",
    "add": "إضافة عميل",
    "edit": "تعديل عميل",
    "searchPlaceholder": "البحث في العملاء...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCustomers": "لا توجد عملاء",
    "noSearchResults": "لا توجد نتائج للبحث",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "pageInfo": "الصفحة {{page}} من {{total}}",
    "nameRequired": "اسم العميل مطلوب",
    "phone1Required": "رقم الهاتف الأساسي مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "addressLineRequired": "عنوان الشارع مطلوب",
    "zoneRequired": "المنطقة مطلوبة",
    "deleteConfirmTitle": "تأكيد الحذف",
    "deleteConfirmMessage": "هل أنت متأكد من حذف العميل {{name}}؟",
    "form": {
      "basicInfo": "البيانات الأساسية",
      "name": "اسم العميل",
      "phone1": "الهاتف الأساسي",
      "phone2": "الهاتف الثاني",
      "phone3": "الهاتف الثالث",
      "phone4": "الهاتف الرابع",
      "isVIP": "عميل مميز",
      "isBlocked": "محظور",
      "isActive": "نشط",
      "type": "نوع العميل",
      "vip": "مميز",
      "blocked": "محظور",
      "regular": "عادي",
      "addresses": "العناوين",
      "addressCount": "عنوان",
      "addressesCount": "عدد العناوين",
      "primaryAddress": "العنوان الأساسي",
      "addAddress": "إضافة عنوان",
      "noAddresses": "لا توجد عناوين - اضغط لإضافة عنوان",
      "address": "العنوان",
      "addressLine": "عنوان الشارع",
      "zone": "المنطقة",
      "floor": "الطابق",
      "apartment": "الشقة",
      "landmark": "علامة مميزة",
      "notes": "ملاحظات"
    },
    "errors": {
      "loadFailed": "فشل في تحميل العملاء",
      "addFailed": "فشل في إضافة العميل",
      "updateFailed": "فشل في تحديث العميل",
      "deleteFailed": "فشل في حذف العميل"
    }
  },
 "offers": {
    "title": "العروض",
    "add": "إضافة عرض",
    "edit": "تعديل عرض",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "searchPlaceholder": "البحث في العروض...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noOffers": "لا توجد عروض",
    "noSearchResults": "لا توجد نتائج للبحث",
    "nameRequired": "اسم العرض مطلوب",
    "startDateRequired": "تاريخ البداية مطلوب",
    "endDateRequired": "تاريخ النهاية مطلوب",
    "form": {
      "name": "اسم العرض",
       "basicInfo": "المعلومات الأساسية",
      "offerGroups": "عدد المجموعات",
      "offerItems": "عناصر العرض",
         "fixedItems": "العناصر الثابتة",
      "noFixedItems": "لا توجد عناصر ثابتة",
      "selectFixedItems": "اختيار عناصر ثابتة",
      "original": "أصلي",
      "addGroup": "إضافة مجموعة",
      "addItem": "إضافة عنصر",
        "generalItems": "العناصر العامة",
      "groupItems": "عناصر المجموعة",
      "noItemsInGroup": "لا توجد عناصر في هذه المجموعة",
      "selectProduct": "اختر منتج",
      "selectProducts": "اختيار المنتجات",
      "selectItemsForGroup": "اختيار عناصر للمجموعة",
      "selectGeneralItems": "اختيار عناصر عامة",
      "searchProducts": "البحث في المنتجات...",
      "filterByGroup": "فلترة حسب المجموعة",
      "selectedItems": "العناصر المختارة ({{count}})",
      "addSelectedItems": "إضافة العناصر المختارة",
      "noProductsFound": "لا توجد منتجات",
            "searchProductsAndPrices": "البحث في المنتجات والأسعار...",
      "allGroups": "كل المجموعات",
      "productsFound": "تم العثور على {{count}} منتج",
      "selected": "مختار ({{count}})",
      "selectAll": "اختيار الكل",
      "deselectAll": "إلغاء اختيار الكل",
      "productName": "اسم المنتج",
      "priceName": "اسم السعر",
      "price": "السعر",
      "barcode": "الباركود",
      "addSelected": "إضافة المختار ({{count}})",
      "noGroups": "لا توجد مجموعات - اضغط لإضافة مجموعة",
      "noItems": "لا توجد عناصر - اضغط لإضافة عنصر",
      "group": "المجموعة",
      "item": "العنصر",
      "groupTitle": "عنوان المجموعة",
      "minSelection": "الحد الأدنى للاختيار",
      "maxSelection": "الحد الأقصى للاختيار",
      "mandatory": "إجباري",
      "active": "نشط",
      "product": "المنتج",
      "quantity": "الكمية",
      "useOriginalPrice": "استخدام السعر الأصلي",
      "customPrice": "سعر مخصص",
      "defaultSelected": "مختار افتراضياً",
      "priceType": "نوع التسعير",
      "fixedPrice": "السعر الثابت",
      "startDate": "تاريخ البداية",
      "endDate": "تاريخ النهاية",
      "orderType": "نوع الطلب",
      "isActive": "نشط",
      "fixed": "ثابت",
      "dynamic": "ديناميكي",
      "dineIn": "تناول في المكان",
      "takeaway": "تيك أواي",
      "delivery": "توصيل",
      "groups": "المجموعات",
      "items": "العناصر",
      "period": "الفترة"
    },
      "groupTitleRequired": "عنوان المجموعة مطلوب",
    "productRequired": "المنتج مطلوب",
    "errors": {
      "loadFailed": "فشل في تحميل العروض",
      "addFailed": "فشل في إضافة العرض",
      "updateFailed": "فشل في تحديث العرض"
    }
  },
"deliveryCompanies": {
    "title": "شركات التوصيل",
    "add": "إضافة شركة",
    "edit": "تعديل شركة",
    "save": "حفظ",
    "saveAndExit": "حفظ وخروج",
    "saveAndNew": "حفظ وإضافة جديد",
    "searchPlaceholder": "البحث في شركات التوصيل...",
    "searchResults": "نتائج البحث",
    "resultsCount": "{{count}} نتيجة",
    "noCompanies": "لا توجد شركات توصيل",
    "noSearchResults": "لا توجد نتائج للبحث",
    "nameRequired": "اسم الشركة مطلوب",
    "phoneRequired": "رقم الهاتف مطلوب",
    "phoneInvalid": "رقم الهاتف غير صحيح",
    "emailRequired": "البريد الإلكتروني مطلوب",
    "emailInvalid": "البريد الإلكتروني غير صحيح",
    "contactPersonRequired": "الشخص المسؤول مطلوب",
    "companyShareRequired": "نسبة الشركة مطلوبة",
    "percentageMin": "النسبة لا يمكن أن تكون أقل من 0",
    "percentageMax": "النسبة لا يمكن أن تكون أكثر من 100",
    "form": {
      "name": "اسم الشركة",
      "paymentType": "طريقة الدفع",
      "companySharePercentage": "نسبة الشركة",
      "companyShare": "نسبة الشركة",
      "visaCollectionCommissionPercentage": "عمولة تحصيل الفيزا",
      "visaCommission": "عمولة الفيزا",
      "taxPercentage": "نسبة الضريبة",
      "tax": "الضريبة",
      "phone": "الهاتف",
      "email": "البريد الإلكتروني",
      "contactPerson": "الشخص المسؤول",
      "notes": "ملاحظات",
      "notesPlaceholder": "أدخل أي ملاحظات إضافية...",
      "isActive": "نشطة",
      "cash": "نقدي",
      "visa": "فيزا",
      "percentages": "النسب المئوية"
    },
    "errors": {
      "loadFailed": "فشل في تحميل شركات التوصيل",
      "addFailed": "فشل في إضافة الشركة",
      "updateFailed": "فشل في تحديث الشركة"
    }
  },
   "pos": {
    "todayOrders": "طلبات اليوم",
    "table": "طاولة", 
    "discount": "خصم",
    "void": "إلغاء",
    "takeaway": "تيك أواي",
    "search": "بحث",
    "extra": "إضافي",
    "without": "بدون", 
    "offer": "عرض",
    "orderDetails": "تفاصيل الطلب",
    "walkInCustomer": "عميل مباشر",
    "subTotal": "المجموع الفرعي",
    "tax": "ضريبة",
    "service": "خدمة", 
    "total": "الإجمالي",
    "send": "إرسال",
    "print": "طباعة",
    "pay": "دفع"
  }



}


============================================================
FILE: src/utils/languages/en.json
============================================================
{
    "Modern": "Modern",
    "Ecommerce": "Ecommerce",
    "eCommerce": "eCommerce",
    "Contacts": "Contacts",
    "Blog": "Blog",
    "Posts": "Posts",
    "Detail": "Detail",
    "Shop": "Shop",
    "List": "List",
    "Checkout": "Checkout",
    "Chats": "Chats",
    "Users": "Users",
    "Profile": "Profile",
    "Followers": "Followers",
    "Friends": "Friends",
    "Gallery": "Gallery",
    "Notes": "Notes",
    "Calendar": "Calendar",
    "Email": "Email",
    "Tickets": "Tickets",
  "reports": {
    "productBalance": {
      "title": "Product Balance Report",
      "description": "Detailed view of product balances across all warehouses"
    },
    "filters": {
      "title": "Filters",
      "searchProducts": "Search products...",
      "warehouse": "Warehouse",
      "allWarehouses": "All Warehouses",
      "stockStatus": "Stock Status",
      "all": "All"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search products and warehouses...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "stockFilter": {
      "all": "All Products",
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "lowStock": "Low Stock"
    },
    "stockStatus": {
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "lowStock": "Low Stock"
    },
    "stats": {
      "totalProducts": "Total Products",
      "totalWarehouses": "Total Warehouses",
      "inStock": "In Stock",
      "outOfStock": "Out of Stock",
      "totalCostValue": "Cost Value",
      "totalLastPurePriceValue": "Last Pure Price Value"
    },
    "table": {
      "product": "Product",
      "warehouse": "Warehouse",
      "totalQuantity": "Total Quantity",
      "remainder": "Remainder",
      "status": "Status",
      "unitBreakdown": "Unit Breakdown",
      "unit": "Unit",
      "factor": "Factor",
      "quantity": "Quantity",
      "totalCostValue": "Total Cost Value",
      "totalLastPurePriceValue": "Total Last Pure Price Value",
      "cost": "Cost",
      "totalCost": "Total Cost",
      "lastPurePrice": "Last Pure Price",
      "totalLastPurePrice": "Total Last Pure Price"
    },
    "noData": "No data to display",
    "errors": {
      "loadFailed": "Failed to load data"
    }
  },
      "export": {
    "title": "Export Data",
    "pdf": "Export PDF",
    "excel": "Export Excel",
    "recordsCount": "{{count}} records",
    "exportedOn": "Exported on",
    "subject": "Data Report",
        "exportExcel": "Export Excel",
    "exportPdf": "Export PDF",
    "author": "Inventory Management System",
    "errorPdf": "Error occurred while exporting PDF",
    "errorExcel": "Error occurred while exporting Excel"
  },
 "purchases": {
    "title": "Purchase Invoices",
    "description": "Manage purchase invoices and payments",
    "addButton": "Add Purchase Invoice",
    "searchPlaceholder": "Search purchase invoices...",
    "listTitle": "Purchase Invoices",
    "noData": "No purchase invoices found",
     "view": {
      "title": "View Purchase Invoice"
    },
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search purchase invoices...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "basicInfo": "Basic Information",
    "discountsAndTaxes": "Discounts & Taxes",
    "items": "Items",
    "noItems": "No items",
    "invoiceNumber": "Invoice Number",
    "invoiceDate": "Invoice Date",
    "supplier": "Supplier",
    "warehouse": "Warehouse",
    "selectSupplier": "Select Supplier",
    "selectWarehouse": "Select Warehouse",
    "quantity": "Quantity",
    "price": "Price",
    "discount": "Discount",
    "tax": "Tax",
    "total": "Total",
    "totalDiscount": "Total Discount",
    "totalTax": "Total Tax",
    "savePending": "Save Pending",
    "submit": "Submit",
    "edit": "Edit Purchase Invoice",
    "status": {
      "pending": "Pending",
      "submitted": "Submitted"
    },
    "table": {
      "invoiceNumber": "Invoice Number",
      "code": "Code",
      "purchaseOrder": "Purchase Order",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "invoiceDate": "Invoice Date",
      "total": "Total",
      "itemsCount": "Items Count",
      "status": "Status",
      "items": "items",
      "directInvoice": "Direct Invoice"
    },
    
    "form": {
      "addTitle": "Add Purchase Invoice",
      "editTitle": "Edit Purchase Invoice",
      "invoiceNumber": "Invoice Number",
      "invoiceDate": "Invoice Date",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "selectSupplier": "Select Supplier",
      "selectWarehouse": "Select Warehouse",
      "status": "Status",
      "totalDiscount": "Total Discount",
      "totalTax": "Total Tax",
      "subTotal": "Sub Total",
      "discountValue": "Discount Value",
      "taxValue": "Tax Value",
      "total": "Total",
      "items": "Items",
      "quickSearch": "Quick search in products...",
      "scanBarcode": "Scan Barcode",
      "addBySearch": "Add by Search",
      "noItems": "No items",
      "product": "Product",
      "unit": "Unit",
      "quantity": "Quantity",
      "price": "Price",
      "discount": "Discount",
      "tax": "Tax",
      "importFromPO": "Import from Purchase Order",
      "savePending": "Save as Pending",
      "submitInvoice": "Submit Invoice",
      "linkedToPO": "Linked to Purchase Order",
      "poCode": "PO Code",
      "poDate": "PO Date",
      "poTotal": "PO Total",
      "itemsCount": "Items Count",
      "selectPurchaseOrder": "Select Purchase Order",
      "searchPurchaseOrders": "Search purchase orders...",
      "noSubmittedPO": "No submitted purchase orders",
      "code": "Code",
      "date": "Date",
      "unknownProduct": "Unknown Product",
      "purchaseOrderImported": "Purchase order imported: {{number}}",
      "productAdded": "Product added: {{name}}",
      "barcodeNotFound": "No product found with this barcode",
      "searchError": "Error searching for product",
      "inLine": "in line",
      "missingProductId": "missing product ID",
      "missingPriceId": "missing price ID",
      "invalidNumber": "Please enter a valid number in {{field}}",
      "validation": {
        "supplierRequired": "Supplier is required",
        "warehouseRequired": "Warehouse is required",
        "itemsRequired": "At least one product must be added"
      }
    },
    "errors": {
      "loadFailed": "Failed to load purchase invoices",
      "dataLoadFailed": "Failed to load data",
      "addFailed": "Failed to add purchase invoice",
      "updateFailed": "Failed to update purchase invoice",
      "idRequired": "Purchase invoice ID is required",
      "noPurchaseLoaded": "No purchase invoice loaded",
      "purchaseNotFound": "Purchase invoice not found",
      "missingId": "Error: Purchase invoice ID is missing"
    },
    "messages": {
      "addSuccess": "Purchase invoice created successfully",
      "updateSuccess": "Purchase invoice updated successfully"
    }
  },

    "errors": {
    "title": "Error",
    "validationError": "Validation Error",
    "forbidden": "Forbidden",
    "notFound": "Not Found",
    "conflict": "Data Conflict",
    "serverError": "Server Error",
    "multipleErrors": "Multiple Errors",
        "unauthorized": {
      "title": "Unauthorized",
      "message": "You don't have permission to access this page",
      "backToDashboard": "Back to Dashboard"
    },
    "noBranches": {
      "title": "No Branches Available",
      "message": "No branches are assigned to this user. Please contact administration to assign appropriate branches."
    }
  },
  "success": {
    "title": "Success"
  },
  "warning": {
    "title": "Warning"
  },
  "info": {
    "title": "Information"
  },

  "sidebar": {
    "inventory": "Inventory",
    "posProducts": "POS Products",
        "hallCaptains": "Hall Captains",
       "deliveryZones": "Delivery Zones",
        "tableSections": "Table Sections",
    "deliveryAgents": "Delivery Agents",
     "systemAdmin": "System Administration",
    "offers": "Offers",
    "deliveryCompanies": "Delivery Companies",
     "additionProducts": "Addition Products",
    "userManagement": "User Management",
    "companySettings": "Company Settings",
    "permissions": "Permissions",
    "inventoryadjustments": "Inventory Adjustment",
    "stock": "Stock",
    "sales": "Sales",
    "promo": "Promo",
    "screens": "Screens",
    "purchases": "Purchases",
    "finance": "Finance & Accounts",
    "peoples": "Peoples",
    "hrm": "HRM",
    "data": "Data",
    "transactions": "Transactios",
    "reports": "Reports",
    "purchaseOrder": "Purchase Order",
    "products": "Products",
    "createProduct": "Create Product",
    "expiredProducts": "Expired Products",
    "lowStocks": "Low Stocks",
    "category": "Category",
    "subCategory": "Sub Category",
    "brands": "Brands",
    "units": "Units",
    "variantAttributes": "Variant Attributes",
    "warranties": "Warranties",
    "printBarcode": "Print Barcode",
    "printQrCode": "Print QR Code",
    "manageStock": "Manage Stock",
    "stockAdjustment": "Stock Adjustment",
    "stockTransfer": "Stock Transfer",
    "invoices": "Invoices",
    "salesReturn": "Sales Return",
    "quotation": "Quotation",
    "pos": "POS",
    "coupons": "Coupons",
    "giftCards": "Gift Cards",
    "discount": "Discount",
    "purchaseOrders": "Purchase Orders",
    "purchaseReturn": "Purchase Return",

    "expenses": "Expenses",
    "income": "Income",
    "bankAccounts": "Bank Accounts",
    "moneyTransfer": "Money Transfer",
    "balanceSheet": "Balance Sheet",
    "trialBalance": "Trial Balance",
    "cashFlow": "Cash Flow",
    "accountStatement": "Account Statement",

    "customers": "Customers",
    "billers": "Billers",
    "suppliers": "Suppliers",
    "stores": "Stores",
    "warehouses": "Warehouses",

    "employees": "Employees",
    "departments": "Departments",
    "designation": "Designation",
    "shifts": "Shifts",
    "attendance": "Attendance",
    "leaves": "Leaves",
    "holidays": "Holidays",
    "payroll": "Payroll",

    "salesReport": "Sales Report",
    "purchaseReport": "Purchase Report",
    "inventoryReport": "Inventory Report",
    "invoiceReport": "Invoice Report",
    "supplierReport": "Supplier Report",
    "customerReport": "Customer Report",
    "productReport": "Product Report",
    "expenseReport": "Expense Report",
    "incomeReport": "Income Report",
    "taxReport": "Tax Report",
    "profitLoss": "Profit & Loss",
    "annualReport": "Annual Report",
    "settings": "Settings",
    "productBalance": "Product Balance",
    "productStock": "Product Stock",
    "accounting": "Accounting",
    "safes": "Safes",
    "accounts": "Accounts",
    "posPaymentMethods": "POS Payment Methods",
    "paymentMethods": "Payment Methods",
    "safesAndAccounts": "Safes & Accounts"
  },

 "products": {
    "title": "Products",
        "pricing": "Pricing",
    "defaultPrices": "Default Prices",
    "branchPrices": "Branch Prices", 
    "branchPrice": "Branch Price",
    "difference": "Difference",
    "defaultPrice": "Default Price",
    "productPrice": "Product Price",
    "noPricesForBranchPricing": "No default prices available for branch pricing",
    "noBranchesAccess": "No branches available for user",
    "manageBranchPrices": "Manage Branch Prices",
    "selectGroup": "Select Group",
    "selectPosScreen": "Select POS Screen",
    "optionGroups": "Option Groups",
    "noOptionGroups": "No option groups",
    "addOptionGroup": "Add Option Group",
    "basicInfo": "Basic Information",
  "common": {
    "copy": "Copy",
    "paste": "Paste", 
    "clearCopy": "Clear Copy",
    "currency": "EGP"
  },
  "tabs": {
      "basicInfoAndPrices": "Basic Info & Prices",
      "basicInfo": "Basic Information", 
      "prices": "Prices",
      "options": "Product Options"
    },
      "types": {
      "pos": "POS",
      "material": "Material",
      "addition": "Addition",
      "unknown": "Unknown"
    },
    "form": {
       "isActive": "Active",
      "posPriceName": "Price Name",
      "posNamePlaceholder": "Enter price name...",
      "required": "Required",
      "addComment": "Add Comment",
      "comment": "Comment",
      "product": "Product",
      "selectProductPrice": "Select Product Price",
      "selectProductPricePlaceholder": "Search for product...",
      "addFromProducts": "Add from Products",
      "selectProducts": "Select Products",
      "searchProducts": "Search products...",
      "filterByGroup": "Filter by Group",
      "allGroups": "All Groups",
      "productsFound": "Found {{count}} products",
      "selected": "Selected: {{count}}",
      "selectAll": "Select All",
      "deselectAll": "Deselect All",
      "useOriginalPrice": "Use Original Price",
      "priceName": "Price Name",
      "noProductsFound": "No products found",
      "addSelected": "Add Selected ({{count}})",
      "productName": "Product Name",
      "price": "Price",
      "barcode": "Barcode",
      "productOptions": "Product Options",
      "addOptionGroup": "Add Option Group",
      "noOptionGroups": "No option groups",
      "optionGroup": "Option Group",
      "optionGroupName": "Option Group Name",
      "isRequired": "Required",
      "allowMultiple": "Allow Multiple Selection",
      "minSelection": "Minimum Selection",
      "maxSelection": "Maximum Selection",
      "optionItems": "Option Items",
      "addOptionItem": "Add Item",
      "optionItemName": "Item Name",
      "extraPrice": "Extra Price",
      "commentOnly": "Comment Only",
            "posScreen": "POS Screen",
      "noPosScreen": "Without Screen"
    },
    "validation": {
      "optionGroupNameRequired": "Option group name is required",
      "optionItemNameRequired": "Option item name is required"
    },
      "status": {
      "title": "Status",
      "active": "Active",
      "inactive": "Inactive"
    },
      "hasBarcode": "Has Barcode",
    "optionGroup": "Option Group",
    "subtitle": "Manage products and prices in the system",
    "searchPlaceholder": "Search by name or barcode...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
        "copySuccess": "Product settings copied successfully",
    "pasteSuccess": "Settings pasted with {{count}} prices",
    "nameRequiredForCopy": "Product name is required for copying",
    "componentsCopySuccess": "Components copied successfully",
    "componentsPasteSuccess": "Components pasted successfully",
    "noComponentsToCopy": "No components to copy",
    "searchResults": "{{count}} results",
    "searching": "Searching...",
        "components": "Components",
    "addComponent": "Add Component",
        "loadingComponentDetails": "Loading component details",
        "selectedComponent": "Selected Component",
    "quantity": "Quantity",
        "scrollForMore": "Scroll down to load more",
    "noComponents": "No components",
      "searchProductPrices": "Search product prices...",
    "noProductPricesFound": "No product prices found",
    "selectedPrice": "Selected Price",
    "selectComponent": "Select Component",
    "componentRequired": "Component is required",
    "componentProduct": "Component Product",
    "notes": "Notes",
    "noSearchResults": "No search results found",
    "noProducts": "No products available",
    "name": "Product Name",
    "code": "Product Code",
    "group": "Group",
    "type": "Product Type",
    "description": "Description",
    "reorderLevel": "Reorder Level",
    "cost": "Cost",
    "lastPurePrice": "Last Pure Price",
    "expirationDays": "Expiration Days",
    "created": "Created Date",
    "add": "Add Product",
    "edit": "Edit Product",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Product name is required",
    "groupRequired": "Group is required",
    "viewPrices": "View Prices",
    "pricesFor": "Prices for",
    "prices": "prices",
    "pricesCount": "Prices Count",
    "unit": "Unit",
    "unitFactor": "Unit Factor",
    "barcode": "Barcode",
    "price": "Price",
    "generated": "Generated",
    "autoGenerated": "Auto Generated",
    "yes": "Yes",
    "no": "No",
    "noPrices": "No prices available",
    "selectUnit": "Select Unit",
    "barcodeOptional": "Barcode (optional)",
    "addPrice": "Add Price",
       "searchPricesTitle": "Search Product Prices",
    "searchPricesPlaceholder": "Search by name or barcode...",
    "startTypingPrices": "Start typing product name or barcode to search",
    "salePrice": "Sale Price",
     "product": "Product",
    "quickSearchPlaceholder": "Quick Search...",
    "productAdded": "Product added",
    "noProductFoundWithBarcode": "No product found with this barcode",
    "searchError": "Search error",
    "selectPriceTitle": "Select Product Price",
    "selected": "selected",
    "loadingMore": "Loading more",
    "allResultsLoaded": "All results loaded",
    "navigateWithArrows": "Navigate with arrows",
    "selectWithEnter": "to select",
     "selectProduct": "Select Product",
    "enterSearchTerm": "Enter search term",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search products...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
   "barcode": {
    "scan": "Scan Barcode",
    "scanTitle": "Scan Barcode",
    "pointCamera": "Point camera towards barcode",
    "clickToStart": "Click to start scanning",
    "startCamera": "Start Camera",
    "simulateScan": "Simulate Scan"
  },
  "validation": {
    "enterValidNumber": "Please enter a valid number in",
    "minValue": "Value cannot be less than 0",
    "maxPercent": "Value cannot be more than 100%",
        "supplierRequired": "Supplier is required",
    "warehouseRequired": "Warehouse is required",
    "itemsRequired": "At least one item is required"
    },
   "suppliers": {
    "title": "Suppliers",
    "subtitle": "Manage suppliers and vendor companies",
    "name": "Supplier Name",
    "code": "Supplier Code",
    "phone": "Phone Number",
    "address": "Address",
    "notes": "Notes",
    "status": "Status",
    "created": "Created Date",
    "search": "Search suppliers...",
    "add": "Add Supplier",
    "edit": "Edit Supplier",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Supplier name is required",
    "nameMinLength": "Supplier name must be at least 2 characters",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number format",
    "addressRequired": "Address is required",
      "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search suppliers...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
 "purchaseOrders": {
    "title": "Purchase Orders",
    "subtitle": "Manage purchase orders from suppliers",
    "search": "Search purchase orders...",
    "add": "Add Purchase Order",
    "edit": "Edit Purchase Order",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & New",
    "docNumber": "Document Number",
    "docNumberRequired": "Document number is required",
    "code": "Code",
    "date": "Date",
    "dateRequired": "Date is required",
    "supplier": "Supplier",
    "supplierRequired": "Supplier is required",
    "warehouse": "Warehouse",
    "warehouseRequired": "Warehouse is required",
    "totalDiscount": "Total Discount",
    "totalTax": "Total Tax",
    "items": "Items",
    "addItem": "Add Item",
    "noItems": "No items",
    "item": "Item",
    "product": "Product",
    "selectProduct": "Select Product",
    "quantity": "Quantity",
    "price": "Price",
    "discount": "Discount",
    "tax": "Tax",
    "total": "Total",
    "lineTotal": "Line Total",
    "summary": "Invoice Summary",
    "subTotal": "Sub Total",
    "discountValue": "Discount Value",
    "taxValue": "Tax Value",
    "itemsCount": "Items Count",
    "active": "Active",
    "inactive": "Inactive",
    "addItemWithSearch": "Add Item with Search",
    "list": "Purchase Orders List",
    "selectSupplier": "Select Supplier",
    "selectWarehouse": "Select Warehouse",
    "unit": "Unit",
    "pending": "Pending",
    "submitted": "Submitted",
    "savePending": "Save Pending",
    "submit": "Save Submitted",

    "basicInfo": "Basic Information",
    "discountsAndTaxes": "Discounts & Taxes",
    "unitFactor": "Unit Factor",
      "status": {
        "title": "Status",
      "pending": "pending",
      "draft": "draft",
      "submitted": "submitted",
      "unknown": "unknown"
    },
    "table": {
      "docNumber": "Document Number",
      "supplier": "Supplier",
      "warehouse": "Warehouse",
      "date": "Date",
      "total": "Total",
      "status": "Status"
    },
        "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search purchase orders...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }

  },
  "common": {
    "update": "Update",
    "saveChanges": "Save Changes",
    "search": "Search",
    "all": "All",
        "active": "Active",
    "inactive": "Inactive",
    "home": "Home",
    "currency": "EGP",
    "exportDate": "Export Date",
    "selected": "selected",
    "hideColumn": "Hide Column",
    "loading": "Loading...",
    "cancel": "Cancel",
    "save": "Save",
    "back": "Back",
        "copy": "Copy",
    "paste": "Paste",
    "clear": "Clear",
    "saveError": "Save Error",
    "inLine": "in line",
    "searching": "Searching",
        "edit": "Edit",
    "view": "View",
    "submit": "Submit",
    "delete": "Delete",
    "add": "Add",
    "noSearchResults": "No search results",
    "notSpecified": "Not Specified",
    "noData": "No data available",
    "refresh": "Refresh",
        "yes": "Yes",
    "no": "No",
    "exportedOn": "Exported on",
    "actions": "Actions",
       "density": "Density",
    "compact": "Compact",
    "standard": "Standard",
    "comfortable": "Comfortable",
    "export": "Export",
    "exportCSV": "Export CSV",
    "print": "Print",
    "columns": "Columns",
    "filters": "Filters",
    "hideFilters": "Hide Filters",
    "showFilters": "Show Filters",
    "findColumn": "Find Column",
    "columnTitle": "Column Title",
    "reorderColumn": "Reorder Column",
    "showAll": "Show All",
    "hideAll": "Hide All",
    "addFilter": "Add Filter",
    "operators": "Operators",
    "and": "And",
    "or": "Or",
    "value": "Value",
    "filterValue": "Filter Value",
    "contains": "Contains",
    "equals": "Equals",
    "startsWith": "Starts With",
    "endsWith": "Ends With",
    "is": "Is",
    "isNot": "Is Not",
    "isAfter": "Is After",
    "isOnOrAfter": "Is On Or After",
    "isBefore": "Is Before",
    "isOnOrBefore": "Is On Or Before",
    "isEmpty": "Is Empty",
    "isNotEmpty": "Is Not Empty",
    "menu": "Menu",
    "showColumns": "Show Columns",
    "filter": "Filter",
    "hide": "Hide",
    "unsort": "Unsort",
    "sortAsc": "Sort Ascending",
    "sortDesc": "Sort Descending",
    "activeFilters": "Active Filters",
    "activeFilter": "Active Filter",
    "sort": "Sort",
    "rowsSelected": "Rows Selected",
    "rowSelected": "Row Selected",
    "totalRows": "Total Rows",
    "of": "Of",
    "checkboxSelection": "Checkbox Selection",
    "noResults": "No results found",
    "saveAndNew": "Save & New",
    "supported": "Supported",
    "notSupported": "Not Supported"

  },
    "warehouses": {
    "title": "Warehouses",
    "subtitle": "Manage your warehouses",
    "add": "Add Warehouse",
    "edit": "Edit Warehouse",
    "save": "Save Changes",
    "name": "Warehouse",
    "contact": "Contact Person",
    "email": "Email",
    "phone": "Phone",
    "workPhone": "Phone (Work)",
    "address": "Address",
    "city": "City",
    "state": "State",
    "country": "Country",
    "postal": "Postal Code",
    "status": "Status",
    "totalProducts": "Total Products",
    "qty": "Qty",
      "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search warehouses...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "active": "Active",
    "inactive": "Inactive",
    "code": "Code",
    "created": "Created Date"
  },
  "status": {
    "active": "Active",
    "inactive": "Inactive"
  },
   "units": {
    "title": "Units",
    "subtitle": "Manage measurement units in the system",
    "name": "Unit Name",
    "code": "Unit Code",
    "status": "Status",
    "created": "Created Date",
    "search": "Search units...",
    "add": "Add Unit",
    "edit": "Edit Unit",
    "save": "Save",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Unit name is required",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search units...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },
   "groups": {
    "title": "Groups",
    "subtitle": "Manage groups and categories in the system",
    "name": "Group Name",
    "code": "Group Code",
    "status": "Status",
    "created": "Created Date",
    "search": "Search groups...",
    "add": "Add Group",
    "addChild": "Add Child Group",
    "edit": "Edit Group",
    "save": "Save",
    "active": "Active",
    "inactive": "Inactive",
    "nameRequired": "Group name is required",
    "parentGroup": "Parent Group",
    "backgroundColor": "Background Color",
    "fontColor": "Font Color",
    "preview": "Preview",
    "sampleText": "Sample Text",
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search groups...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "level": "Level",
    "childrenCount": "Children Count",
    "noGroups": "No groups found",
    "rootGroups": "Root Groups"
  },


   "adjustment": {
    "title": "Inventory Adjustment",
    "types": {
      "openingBalance": "Opening Balance",
      "manualAdjustment": "Manual Adjustment",
      "notSelected": "Adjustment Type Not Selected"
    },
    "form": {
      "warehouse": "Warehouse",
      "selectWarehouse": "Select Warehouse",
      "adjustmentType": "Adjustment Type",
      "referenceNumber": "Reference Number",
      "reason": "Reason",
      "items": "Items",
      "product": "Product",
      "unit": "Unit",
      "unitFactor": "Unit Factor",
      "oldQuantity": "Old Quantity",
      "newQuantity": "New Quantity",
      "difference": "Difference",
      "notes": "Notes",
      "noItems": "No items found",
      "save": "Save",
      "submit": "Submit Adjustment",
      "barcode": "Barcode",
      "validation": {
        "warehouseRequired": "Warehouse is required"
      }
    },
    "dialog": {
      "newAdjustmentTitle": "New Inventory Adjustment",
      "newAdjustmentMessage": "A new inventory adjustment has been started",
      "selectAdjustmentType": "Please select adjustment type:"
    },
    "messages": {
      "newAdjustmentStarted": "New inventory adjustment started successfully",
      "saveSuccess": "Adjustment saved successfully",
      "submitSuccess": "Adjustment submitted successfully",
      "selectWarehouseToStart": "Please select a warehouse to start a new inventory adjustment"
    },
      "search": {
      "title": "Search Items",
      "placeholder": "Search by name or barcode...",
      "scanBarcode": "Scan Barcode",
      "currentQuantity": "Current Quantity",
      "barcode": "Barcode",
      "noResults": "No search results found",
      "filteredFrom": "filtered from {total}"
    },
    "barcode": {
      "title": "Barcode Scanner",
      "instruction": "Scan the barcode or enter it manually",
      "label": "Barcode",
      "placeholder": "Enter barcode here...",
      "scan": "Search"
    },
    "errors": {
      "loadWarehousesFailed": "Failed to load warehouses",
      "loadAdjustmentFailed": "Failed to load adjustment data",
      "saveFailed": "Failed to save adjustment",
      "submitFailed": "Failed to submit adjustment"
    }
  },
    "adjustments": {
    "list": {
      "title": "Inventory Adjustments",
      "newAdjustment": "New Adjustment",
      "noAdjustments": "No adjustments found"
    },
     "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "dateRange": "Date Range",
      "sorting": "Sorting",
      "searchPlaceholder": "Search adjustments...",
      "dateFrom": "From Date",
      "dateTo": "To Date",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "view": {
      "title": "View Adjustment",
      "adjustmentInfo": "Adjustment Information"
    },
    "table": {
      "adjustmentId": "Adjustment ID",
      "type": "Type",
      "date": "Date",
      "referenceNumber": "Reference Number",
      "reason": "Reason",
      "totalItems": "Total Items",
      "totalDifference": "Total Difference",
      "status": "Status",
            "warehouse": "Warehouse"

    },
    "types": {
      "new": "New",
      "openingBalance": "Opening Balance",
      "manualAdjustment": "Manual Adjustment",
      "unknown": "Unknown"
    },
    "status": {
      "saved": "Saved",
      "submitted": "Submitted",
      "unknown": "Unknown"
    },
    "actions": {
      "view": "View"
    },
    "errors": {
      "loadFailed": "Failed to load adjustments list",
      "notFound": "Adjustment not found"
    },
      "summary": {
      "totalItems": "Total Items",
      "totalPositive": "Total Increase",
      "totalNegative": "Total Decrease"
    }
  },


   "safes": {
    "title": "Safes",
    "add": "Add Safe",
    "edit": "Edit Safe",
    "name": "Safe Name",
    "type": "Type",
    "accountNumber": "Account Number",
    "collectionFeePercent": "Collection Fee Percent",
    "status": "Status",
    "isActive": "Active",
    "active": "Active",
    "inactive": "Inactive",
    "noSafes": "No safes found",
    "searchPlaceholder": "Search safes...",
    "types": {
      "cash": "Cash",
        "safe": "خزنة"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search safes...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Safe name is required",
      "typeRequired": "Safe type is required"
    },
    "errors": {
      "loadFailed": "Failed to load safes",
      "addFailed": "Failed to add safe",
      "updateFailed": "Failed to update safe"
    }
  },
  "accounts": {
    "title": "Accounts",
    "add": "Add Account",
    "edit": "Edit Account",
    "typePlaceholder": "e.g: Bank, Wallet, Visa, InstaPay, StaffAccount",
    "name": "Account Name",
    "type": "Type",
    "accountNumber": "Account Number",
    "collectionFeePercent": "Collection Fee Percent",
    "status": "Status",
    "isActive": "Active",
    "active": "Active",
    "inactive": "Inactive",
    "noAccounts": "No accounts found",
    "searchPlaceholder": "Search accounts...",
    "types": {
      "bank": "Bank",
      "wallet": "Wallet",
      "visa": "Visa",
      "instapay": "InstaPay",
      "staffaccount": "Staff Account",
      "other": "Other",
      "cash": "Cash"
    },
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search accounts...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Account name is required",
      "typeRequired": "Account type is required",
      "accountNumberRequired": "Account number is required"
    },
    "errors": {
      "loadFailed": "Failed to load accounts",
      "addFailed": "Failed to add account",
      "updateFailed": "Failed to update account"
    }
  },
   "posPaymentMethods": {
    "title": "Payment Methods",
    "add": "Add Payment Method",
    "edit": "Edit Payment Method",
    "name": "Payment Method Name",
       "accountType": "Account Type",
    "accountNumber": "Account Number",
    "collectionFee": "Collection Fee",
    "safeOrAccount": "Safe or Account",
    "selectedAccount": "Selected Account",
    "branchesNote": "Payment method can be linked to different branches later",
    "status": "Status",
    "active": "Active",
    "inactive": "Inactive",
    "noPaymentMethods": "No payment methods found",
    "searchPlaceholder": "Search payment methods...",
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search payment methods...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    },
    "validation": {
      "nameRequired": "Payment method name is required",
      "accountRequired": "Safe or account must be selected"
    },
    "errors": {
      "loadFailed": "Failed to load payment methods",
      "addFailed": "Failed to add payment method",
      "updateFailed": "Failed to update payment method"
    }
  },

"import": {
    "import": "Import",
    "downloadTemplate": "Download Template",
    "importTitle": "Import Data",
    "selectFile": "Select Excel File",
        "rowError": "Row {{row}}:",
    "addError": "Error adding record",
    "importing": "Importing",
    "errorsFound": "Errors Found",
    "importComplete": "Import Complete",
    "successfulRecords": "Successful Records",
    "failedRecords": "Failed Records",
    "andMore": "and {count} more errors",
    "dataPreview": "Data Preview",
    "records": "records",
    "andMoreRecords": "and {count} more records",
    "fileReadError": "File read error",
    "requiredField": "Required field",
    "inRow": "in row",
    "validationError": "Validation error",
    "importError": "Import error"
  },


   "posScreens": {
    "title": "POS Screens",
    "add": "Add Screen",
    "addChild": "Add Child Screen",
    "edit": "Edit Screen",
    "save": "Save",
    "name": "Screen Name",
    "parentScreen": "Parent Screen",
    "noParent": "No Parent",
    "displayOrder": "Display Order",
    "visibility": "Visibility",
    "icon": "Icon",
    "color": "Color",
    "preview": "Preview",
    "sampleText": "Sample Text",
    "visible": "Visible",
    "hidden": "Hidden",
    "active": "Active",
    "inactive": "Inactive",
    "status": "Status",
    "level": "Level",
    "noScreens": "No screens found",
    "rootScreens": "Root Screens",
    "searchPlaceholder": "Search screens...",
    "nameRequired": "Screen name is required",
    "iconRequired": "Icon is required",
    "iconHelp": "Use emoji or short text",
    "filter": {
      "title": "Search & Filter",
      "search": "Search",
      "filters": "Filters",
      "sorting": "Sorting",
      "searchPlaceholder": "Search screens...",
      "sortBy": "Sort By",
      "sortOrder": "Sort Order",
      "ascending": "Ascending",
      "descending": "Descending",
      "apply": "Apply",
      "clear": "Clear All",
      "results": "Results",
      "activeFilters": "active filters"
    }
  },

  "auth": {
    "login": {
      "title": "Login",
      "tenantId": "Company Code",
      "tenantPlaceholder": "Enter company code",
      "description": "Login page",
      "phoneNumber": "Phone Number",
      "password": "Password",
      "phonePlaceholder": "01xxxxxxxxx",
      "passwordPlaceholder": "Enter your password",
      "rememberMe": "Remember me",
      "forgotPassword": "Forgot password?",
      "signIn": "Sign In",
      "signingIn": "Signing in...",
      "failed": "Login failed",
      "newUser": "New user?",
      "createAccount": "Create an account"
    },
    "branchSelection": {
      "title": "Branch Selection",
      "description": "Branch selection page",
      "selectBranch": "Select Branch",
      "welcomeMessage": "Welcome {{userName}}, you have access to multiple branches",
      "selectThisBranch": "Select This Branch",
      "selecting": "Selecting...",
      "noBranches": "No Branches Available",
      "noBranchesMessage": "No branches are assigned to this user. Please contact administration."
    },
    "logout": "Logout",
    "errors": {
      "noBranches": "No branches available for this user"
    }
  },


 "users": {
    "userName": "User Name",
    "phoneNo": "Phone Number",
    "email": "Email",
    "password": "Password",
    "title": "User Management",
    "noUsers": "No users found",
    "table": {
      "userName": "User Name",
      "phoneNumber": "Phone Number",
      "email": "Email",
      "actions": "Actions"
    },
    "actions": {
      "add": "Add User"
    },
    "dialog": {
      "addTitle": "Add New User",
      "editTitle": "Edit User"
    },
    "form": {
      "userName": "User Name",
      "phoneNumber": "Phone Number",
      "password": "Password",
      "passwordHelp": "Leave empty if you don't want to change it"
    },
    "validation": {
      "requiredFields": "Please enter all required fields",
      "passwordRequired": "Please enter password for new user",
            "userNameTooShort": "User name must be more than 2 characters",
      "userNameTooLong": "User name is too long",
      "invalidPhone": "Invalid phone number",
      "invalidEmail": "Invalid email address",
      "passwordTooShort": "Password must be at least 6 characters"
    },
    "messages": {
      "addSuccess": "User added successfully",
      "addFailed": "Failed to add user",
      "editComingSoon": "Edit functionality coming soon"
    },
    "errors": {
      "loadFailed": "Error loading users",
      "saveFailed": "Error saving user"
    }
  },
  "company": {
    "title": "Company & Branch Settings",
    "description": "Manage company data and its branches",
    "tabs": {
      "companyInfo": "Company Information",
      "branchManagement": "Branch Management"
    },
    "form": {
      "companyName": "Company Name",
      "companyAddress": "Company Address",
      "companyPhone": "Company Phone",
      "companyEmail": "Company Email",
      "branchName": "Branch Name",
      "branchAddress": "Branch Address",
      "branchPhone": "Branch Phone"
    },
    "info": {
      "currentCompanyInfo": "Current Company Information",
      "companyName": "Company Name",
      "branchCount": "Number of Branches",
      "branchCountValue": "{{count}} branch",
      "branchCountValue_plural": "{{count}} branches",
      "currentBranch": "Current Branch"
    },
    "branches": {
      "title": "Company Branches ({{count}})",
      "currentBranch": "Current Branch",
      "otherBranch": "Other Branch"
    },
    "table": {
      "branchName": "Branch Name",
      "address": "Address",
      "phone": "Phone",
      "status": "Status",
      "actions": "Actions"
    },
    "dialog": {
      "editBranch": "Edit Branch Data"
    },
    "messages": {
      "updateSuccess": "Company data updated successfully",
      "branchUpdateSuccess": "Branch data updated successfully"
    },
    "errors": {
      "updateFailed": "Error updating company data",
      "branchUpdateFailed": "Error updating branch data"
    }
  },
  "permissions": {
    "title": "Permissions Management",
    "description": "Manage user permissions to access system pages and functions",
    "loading": "Loading data...",
    "noData": "No user data available",
    "pagesCount": "{{accessible}}/{{total}} pages",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "subPermissions": "Sub Permissions",
    "messages": {
      "updateSuccess": "Permission updated successfully"
    },
    "errors": {
      "loadFailed": "Error loading data",
      "updateFailed": "Error updating permission"
    }
  },
  "branch": {
    "selectBranch": "Select Branch"
  },
   "profile": {
    "user": "User",
    "menu": {
      "userManagement": "User Management",
      "companySettings": "Company Settings",
      "permissions": "Permissions",
      "inbox": "Inbox",
      "taskList": "Task List"
    }
  },


  "posProducts": {
    "title": "POS Products",
    "searchPlaceholder": "Search in POS products...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add POS Product",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noProducts": "No POS products",
    "errors": {
      "loadFailed": "Failed to load POS products",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add product",
      "updateFailed": "Failed to update product"
    }
  },
    "materials": {
    "title": "Raw Materials",
    "searchPlaceholder": "Search in raw materials...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add Raw Material",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noMaterials": "No raw materials",
    "errors": {
      "loadFailed": "Failed to load raw materials",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add material",
      "updateFailed": "Failed to update material"
    }
  },
    "additionProducts": {
    "title": "Addition Products",
    "searchPlaceholder": "Search in addition products...",
    "searchByBarcode": "Search by Barcode",
    "searchByName": "Search by Name",
    "searchResults": "{{count}} results",
    "add": "Add Addition Product",
    "searching": "Searching...",
    "noSearchResults": "No search results",
    "noProducts": "No addition products",
    "errors": {
      "loadFailed": "Failed to load addition products",
      "searchFailed": "Search failed",
      "addFailed": "Failed to add product",
      "updateFailed": "Failed to update product"
    }
  },



    "deliveryZones": {
    "title": "Delivery Zones",
    "add": "Add Zone",
    "edit": "Edit Zone",
    "searchPlaceholder": "Search zones...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noZones": "No delivery zones",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Zone name is required",
    "deliveryChargeRequired": "Delivery charge is required",
    "defaultBonusRequired": "Default bonus is required",
    "form": {
      "name": "Zone Name",
      "deliveryCharge": "Delivery Charge",
      "defaultBonus": "Default Bonus",
      "branch": "Branch",
      "allBranches": "All Branches",
      "status": "Status",
      "isActive": "Active"
    },
    "errors": {
      "loadFailed": "Failed to load zones",
      "addFailed": "Failed to add zone",
      "updateFailed": "Failed to update zone"
    }
  },
  "deliveryAgents": {
    "title": "Delivery Agents",
    "add": "Add Agent",
    "edit": "Edit Agent",
    "searchPlaceholder": "Search agents...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noAgents": "No delivery agents",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Agent name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "branchRequired": "Branch is required",
    "deleteConfirmTitle": "Confirm Delete",
    "deleteConfirmMessage": "Are you sure you want to delete agent {{name}}?",
    "form": {
      "name": "Agent Name",
      "phone": "Phone Number",
      "branch": "Branch",
      "status": "Status"
    },
    "errors": {
      "loadFailed": "Failed to load agents",
      "addFailed": "Failed to add agent",
      "updateFailed": "Failed to update agent",
      "deleteFailed": "Failed to delete agent"
    }
  },
  "header": {
    "print": {
      "instantPrint": "Instant Print",
      "printSuccess": "Print completed successfully",
      "fallbackToNormal": "Switched to normal printing",
      "printError": "Print error",
      "tooltip": "Print Options",
      "normal": "Normal Print",
      "normalDesc": "Print using system printer",
      "thermal": "Thermal Print",
      "printer": "printer",
      "test": "Test Print",
      "testDesc": "Test thermal printer",
      "testSuccess": "Print test completed successfully",
      "testFailed": "Print test failed",
      "testError": "Print test error",
      "thermalDisabled": "Thermal printing is disabled",
      "enableThermal": "Enable Thermal Printing",
      "goToSettings": "Go to Settings",
      "clickToEnable": "Click here to enable thermal printing",
      "settings": "Print Settings",
      "manageSettings": "Manage printer settings",
      "printerSettings": "Printer Settings",
      "configureOptions": "Configure print options"
    },
    "printerSettings": "Printer Settings"
  },
  "settings": {
    "printer": {
      "title": "Printer Settings",
      "description": "Manage normal and thermal printing settings",
      "thermalSettings": "Thermal Printing Settings",
      "enableThermal": "Enable Thermal Printing",
      "quickEnable": "Quick Enable",
      "disabledInfo": "Thermal printing is disabled. You can enable it to get additional printing options.",
      "type": "Printer Type",
      "network": "Network",
      "ip": "IP Address",
      "port": "Port",
      "ipHelp": "IP address of the thermal printer",
      "portHelp": "Connection port (usually 9100)",
      "testPrint": "Test Print",
      "ctrlPInfo": "After saving, you can use the print button in the top bar",
      "saved": "Settings saved successfully",
      "saveError": "Error saving settings",
      "testCompleted": "Print test completed",
      "basicSettings": "Basic Settings",
      "advancedSettings": "Advanced Settings",
      "systemInfo": "System Information",
      "testing": "Testing...",
      "testConnection": "Test Connection",
      "connectionSuccess": "Successfully connected to printer",
      "connectionFailed": "Failed to connect to printer",
      "connectionError": "Connection error",
      "testSuccess": "Print test completed successfully",
      "testFailed": "Print test failed",
      "testError": "Print test error",
      "resetSuccess": "Settings reset successfully",
      "reset": "Reset",
      "autoConnect": "Auto Connect",
      "autoConnectDesc": "Connect to printer automatically without requesting port selection",
      "silentPrint": "Silent Print",
      "silentPrintDesc": "Print directly without showing selection dialogs",
      "supported": "Supported",
      "notSupported": "Not Supported",
      "networkPrinting": "Network Printing",
      "networkDesc": "Print via local network"
    }
  },
    "tableSections": {
    "title": "Table Sections",
    "add": "Add Section",
    "edit": "Edit Section",
    "searchPlaceholder": "Search sections and tables...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noSections": "No sections",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Section name is required",
    "serviceChargeRequired": "Service charge is required",
    "tableNameRequired": "Table name is required",
    "capacityRequired": "Table capacity is required",
    "totalTables": "Total Tables: {{count}}",
    "form": {
      "name": "Section Name",
      "serviceCharge": "Service Charge",
      "tables": "Tables",
      "tablesCount": "Tables Count",
      "totalCapacity": "Total Capacity",
      "branch": "Branch",
      "status": "Status",
      "tableName": "Table Name",
      "capacity": "Capacity",
      "persons": "persons",
      "addTable": "Add Table",
      "noTables": "No tables - Click to add table"
    },
    "errors": {
      "loadFailed": "Failed to load sections",
      "addFailed": "Failed to add section",
      "updateFailed": "Failed to update section"
    }
  },
   "hallCaptains": {
    "title": "Hall Captains",
    "add": "Add Captain",
    "edit": "Edit Captain",
    "searchPlaceholder": "Search captains...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCaptains": "No captains",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "nameRequired": "Captain name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "branchRequired": "Branch is required",
    "form": {
      "name": "Captain Name",
      "phone": "Phone Number",
      "notes": "Notes",
      "notesPlaceholder": "Enter any additional notes...",
      "branch": "Branch",
      "isActive": "Active"
    },
    "errors": {
      "loadFailed": "Failed to load captains",
      "addFailed": "Failed to add captain",
      "updateFailed": "Failed to update captain"
    }
  },
  "customers": {
    "title": "Customers",
    "add": "Add Customer",
    "edit": "Edit Customer",
    "searchPlaceholder": "Search customers...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCustomers": "No customers",
    "noSearchResults": "No search results",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "pageInfo": "Page {{page}} of {{total}}",
    "nameRequired": "Customer name is required",
    "phone1Required": "Primary phone is required",
    "phoneInvalid": "Invalid phone number",
    "addressLineRequired": "Address line is required",
    "zoneRequired": "Zone is required",
    "deleteConfirmTitle": "Confirm Delete",
    "deleteConfirmMessage": "Are you sure you want to delete customer {{name}}?",
    "form": {
      "basicInfo": "Basic Information",
      "name": "Customer Name",
      "phone1": "Primary Phone",
      "phone2": "Secondary Phone",
      "phone3": "Third Phone",
      "phone4": "Fourth Phone",
      "isVIP": "VIP Customer",
      "isBlocked": "Blocked",
      "isActive": "Active",
      "type": "Customer Type",
      "vip": "VIP",
      "blocked": "Blocked",
      "regular": "Regular",
      "addresses": "Addresses",
      "addressCount": "addresses",
      "addressesCount": "Addresses Count",
      "primaryAddress": "Primary Address",
      "addAddress": "Add Address",
      "noAddresses": "No addresses - Click to add address",
      "address": "Address",
      "addressLine": "Address Line",
      "zone": "Zone",
      "floor": "Floor",
      "apartment": "Apartment",
      "landmark": "Landmark",
      "notes": "Notes"
    },
    "errors": {
      "loadFailed": "Failed to load customers",
      "addFailed": "Failed to add customer",
      "updateFailed": "Failed to update customer",
      "deleteFailed": "Failed to delete customer"
    }
  },
 "offers": {
    "title": "Offers",
    "add": "Add Offer",
    "edit": "Edit Offer",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "searchPlaceholder": "Search offers...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noOffers": "No offers",
    "noSearchResults": "No search results",
    "nameRequired": "Offer name is required",
    "startDateRequired": "Start date is required",
    "endDateRequired": "End date is required",
    "form": {
      "name": "Offer Name",
      "priceType": "Price Type",
      "fixedPrice": "Fixed Price",
      "startDate": "Start Date",
      "endDate": "End Date",
      "orderType": "Order Type",
         "generalItems": "General Items",
      "groupItems": "Group Items",
      "noItemsInGroup": "No items in this group",
      "selectProduct": "Select Product",
      "selectProducts": "Select Products",
      "selectItemsForGroup": "Select Items for Group",
      "selectGeneralItems": "Select General Items",
      "searchProducts": "Search products...",
      "filterByGroup": "Filter by Group",
      "selectedItems": "Selected Items ({{count}})",
         "searchProductsAndPrices": "Search products and prices...",
      "allGroups": "All Groups",
      "productsFound": "{{count}} products found",
      "selected": "Selected ({{count}})",
      "selectAll": "Select All",
      "deselectAll": "Deselect All",
      "productName": "Product Name",
      "priceName": "Price Name",
      "price": "Price",
      "barcode": "Barcode",
      "addSelected": "Add Selected ({{count}})",
      "addSelectedItems": "Add Selected Items",
      "noProductsFound": "No products found",
      "isActive": "Active",
      "fixed": "Fixed",
        "basicInfo": "Basic Information",
      "offerGroups": "Offer Groups Count",
      "offerItems": "Offer Items",
      "addGroup": "Add Group",
      "addItem": "Add Item",
      "noGroups": "No groups - Click to add group",
      "noItems": "No items - Click to add item",
      "group": "Group",
      "item": "Item",
           "fixedItems": "Fixed Items",
      "noFixedItems": "No fixed items",
      "selectFixedItems": "Select Fixed Items",
      "original": "Original",
      "groupTitle": "Group Title",
      "minSelection": "Min Selection",
      "maxSelection": "Max Selection",
      "mandatory": "Mandatory",
      "active": "Active",
      "product": "Product",
      "quantity": "Quantity",
      "useOriginalPrice": "Use Original Price",
      "customPrice": "Custom Price",
      "defaultSelected": "Default Selected",
      "dynamic": "Dynamic",
      "dineIn": "Dine In",
      "takeaway": "Takeaway",
      "delivery": "Delivery",
      "groups": "Groups",
      "items": "Items",
      "period": "Period"
    },
     "groupTitleRequired": "Group title is required",
    "productRequired": "Product is required",
    "errors": {
      "loadFailed": "Failed to load offers",
      "addFailed": "Failed to add offer",
      "updateFailed": "Failed to update offer"
    }
  },
 "deliveryCompanies": {
    "title": "Delivery Companies",
    "add": "Add Company",
    "edit": "Edit Company",
    "save": "Save",
    "saveAndExit": "Save & Exit",
    "saveAndNew": "Save & Add New",
    "searchPlaceholder": "Search delivery companies...",
    "searchResults": "Search Results",
    "resultsCount": "{{count}} results",
    "noCompanies": "No delivery companies",
    "noSearchResults": "No search results",
    "nameRequired": "Company name is required",
    "phoneRequired": "Phone number is required",
    "phoneInvalid": "Invalid phone number",
    "emailRequired": "Email is required",
    "emailInvalid": "Invalid email address",
    "contactPersonRequired": "Contact person is required",
    "companyShareRequired": "Company share percentage is required",
    "percentageMin": "Percentage cannot be less than 0",
    "percentageMax": "Percentage cannot be more than 100",
    "form": {
      "name": "Company Name",
      "paymentType": "Payment Type",
      "companySharePercentage": "Company Share %",
      "companyShare": "Company Share",
      "visaCollectionCommissionPercentage": "Visa Commission %",
      "visaCommission": "Visa Commission",
      "taxPercentage": "Tax %",
      "tax": "Tax",
      "phone": "Phone",
      "email": "Email",
      "contactPerson": "Contact Person",
      "notes": "Notes",
      "notesPlaceholder": "Enter any additional notes...",
      "isActive": "Active",
      "cash": "Cash",
      "visa": "Visa",
      "percentages": "Percentages"
    },
    "errors": {
      "loadFailed": "Failed to load delivery companies",
      "addFailed": "Failed to add company",
      "updateFailed": "Failed to update company"
    }
  },

  "pos": {
    "todayOrders": "Today Orders",
    "table": "Table",
    "discount": "Discount", 
    "void": "Void",
    "takeaway": "Takeaway",
    "search": "Search",
    "extra": "Extra",
    "without": "Without",
    "offer": "Offer", 
    "orderDetails": "Order Details",
    "walkInCustomer": "Walk in Customer",
    "subTotal": "Sub Total",
    "tax": "Tax",
    "service": "Service",
    "total": "Total", 
    "send": "Send",
    "print": "Print", 
    "pay": "Pay"
  }
}

============================================================
FILE: src/utils/pageWrapper.tsx
============================================================
// File: src/utils/pageWrapper.tsx
import React from 'react';
import withPermissions from 'src/hoc/withPermissions';
import { PAGE_PERMISSIONS } from 'src/config/pagePermissions';

// ⭐ مفتاح تعطيل مؤقت
const DISABLE_PROTECTION = true;

export const createProtectedPage = (
  Component: React.ComponentType<any>,
  permissionKey: keyof typeof PAGE_PERMISSIONS
) => {
  // إذا التحكم معطل، ارجع المكون بدون حماية
  if (DISABLE_PROTECTION) {
    const UnprotectedWrapper: React.FC<any> = (props) => {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };
      
      return <Component {...props} {...allPermissions} />;
    };
    
    return UnprotectedWrapper;
  }
  
  // الحماية العادية
  const config = PAGE_PERMISSIONS[permissionKey];
  return withPermissions(Component, config);
};

export const createCustomProtectedPage = (
  Component: React.ComponentType<any>,
  config: {
    pageId?: number;
    pageName?: string;
    moduleId?: number;
    requiredPermissions?: string[];
  }
) => {
  if (DISABLE_PROTECTION) {
    const UnprotectedWrapper: React.FC<any> = (props) => {
      const allPermissions = {
        canAdd: true,
        canEdit: true,
        canDelete: true,
        canExport: true,
        canImport: true,
        canView: true,
      };
      
      return <Component {...props} {...allPermissions} />;
    };
    
    return UnprotectedWrapper;
  }
  
  return withPermissions(Component, config);
};


============================================================
FILE: src/views/authentication/auth1/ForgotPassword.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import img1 from 'src/assets/images/backgrounds/login-bg.svg';

import AuthForgotPassword from '../authForms/AuthForgotPassword';

const ForgotPassword = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Grid container justifyContent="center" spacing={0} sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 8,
          xl: 9
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 4,
          xl: 3
        }}>
        <Box p={4}>
          <Typography variant="h4" fontWeight="700">
            Forgot your password?
          </Typography>

          <Typography color="textSecondary" variant="subtitle2" fontWeight="400" mt={2}>
            Please enter the email address associated with your account and We will email you a link
            to reset your password.
          </Typography>
          <AuthForgotPassword />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default ForgotPassword;


============================================================
FILE: src/views/authentication/auth1/Login.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Link } from 'react-router';
import { Grid2 as Grid, Box, Stack, Typography } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from '../authForms/AuthLogin';

const Login = () => (
  <PageContainer title="Login" description="this is Login page">
    <Grid container spacing={0} sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 7,
          xl: 8
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 5,
          xl: 4
        }}>
        <Box p={4}>
          <AuthLogin
            title="Welcome to Modernize"
            subtext={<Typography variant="subtitle1" color="textSecondary" mb={1}>
              Your Admin Dashboard
            </Typography>}
            subtitle={<Stack direction="row" spacing={1} mt={3}>
              <Typography color="textSecondary" variant="h6" fontWeight="500">
                New to Modernize?
              </Typography>
              <Typography
                component={Link}
                to="/auth/register"
                fontWeight="500"
                sx={{
                  textDecoration: 'none',
                  color: 'primary.main',
                }}
              >
                Create an account
              </Typography>
            </Stack>} onSubmit={function (_phone: string): void {
              throw new Error('Function not implemented.');
            } }          />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default Login;


============================================================
FILE: src/views/authentication/auth1/Register.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Link } from 'react-router';
import { Grid2 as Grid, Box, Typography, Stack } from '@mui/material';

import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthRegister from '../authForms/AuthRegister';

const Register = () => (
  <PageContainer title="Register" description="this is Register page">
    <Grid container spacing={0} justifyContent="center" sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 7,
          xl: 8
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 5,
          xl: 4
        }}>
        <Box p={4}>
          <AuthRegister
            title="Welcome to Modernize"
            subtext={
              <Typography variant="subtitle1" color="textSecondary" mb={1}>
                Your Admin Dashboard
              </Typography>
            }
            subtitle={
              <Stack direction="row" spacing={1} mt={3}>
                <Typography color="textSecondary" variant="h6" fontWeight="400">
                  Already have an Account?
                </Typography>
                <Typography
                  component={Link}
                  to="/auth/login"
                  fontWeight="500"
                  sx={{
                    textDecoration: 'none',
                    color: 'primary.main',
                  }}
                >
                  Sign In
                </Typography>
              </Stack>
            }
          />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default Register;


============================================================
FILE: src/views/authentication/auth1/TwoSteps.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Typography } from '@mui/material';

import PageContainer from 'src/components/container/PageContainer';
import img1 from 'src/assets/images/backgrounds/login-bg.svg';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthTwoSteps from '../authForms/AuthTwoSteps';

const TwoSteps = () => (
  <PageContainer title="Two Steps" description="this is Two Steps page">
    <Grid container spacing={0} justifyContent="center" sx={{ overflowX: 'hidden' }}>
      <Grid
        sx={{
          position: 'relative',
          '&:before': {
            content: '""',
            background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
            backgroundSize: '400% 400%',
            animation: 'gradient 15s ease infinite',
            position: 'absolute',
            height: '100%',
            width: '100%',
            opacity: '0.3',
          },
        }}
        size={{
          xs: 12,
          sm: 12,
          lg: 8,
          xl: 9
        }}>
        <Box position="relative">
          <Box px={3}>
            <Logo />
          </Box>
          <Box
            alignItems="center"
            justifyContent="center"
            height={'calc(100vh - 75px)'}
            sx={{
              display: {
                xs: 'none',
                lg: 'flex',
              },
            }}
          >
            <img
              src={img1}
              alt="bg"
              style={{
                width: '100%',
                maxWidth: '500px',
              }}
            />
          </Box>
        </Box>
      </Grid>
      <Grid
        display="flex"
        justifyContent="center"
        alignItems="center"
        size={{
          xs: 12,
          sm: 12,
          lg: 4,
          xl: 3
        }}>
        <Box p={4}>
          <Typography variant="h4" fontWeight="700">
            Two Step Verification
          </Typography>

          <Typography variant="subtitle1" color="textSecondary" mt={2} mb={1}>
            We sent a verification code to your mobile. Enter the code from the mobile in the field
            below.
          </Typography>
          <Typography variant="subtitle1" fontWeight="700" mb={1}>
            ******1234
          </Typography>
          <AuthTwoSteps />
        </Box>
      </Grid>
    </Grid>
  </PageContainer>
);

export default TwoSteps;


============================================================
FILE: src/views/authentication/auth2/ForgotPassword2.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import AuthForgotPassword from '../authForms/AuthForgotPassword';

const ForgotPassword2 = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 4,
            xl: 3
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '500px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <Typography
              color="textSecondary"
              textAlign="center"
              variant="subtitle2"
              fontWeight="400"
            >
              Please enter the email address associated with your account and We will email you a
              link to reset your password.
            </Typography>
            <AuthForgotPassword />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default ForgotPassword2;


============================================================
FILE: src/views/authentication/auth2/Login2.tsx
============================================================
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Grid, Box, Card, Stack, Typography} from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';
import AuthLogin from '../authForms/AuthLogin';
import api from 'src/utils/axios';
import { saveAuth } from 'src/utils/auth';

const Login2: React.FC = () => {
  const navigate = useNavigate();
  const [msg, setMsg] = React.useState('');

  /* هذه الدالة يستدعيها AuthLogin عبر prop */
  const handleLogin = async (phone: string, password: string) => {
    try {
      const { data } = await api.post('/login?PhoneNo=' + phone + '&Password=' + password, {
      });
      saveAuth(data.token, data.expiration);
      navigate('/dashboards/modern', { replace: true });
    } catch (err: any) {
      setMsg(err?.message || 'Login failed');
    }
  };

  return (
    <PageContainer title="Login" description="Login page">
      <Box sx={{ position: 'relative', '&:before': {
        content: '""',
        background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
        backgroundSize: '400% 400%',
        animation: 'gradient 15s ease infinite',
        position: 'absolute', inset: 0, opacity: 0.3 }}}>
        <Grid container justifyContent="center" sx={{ minHeight: '100vh' }}>
          <Grid item xs={12} sm={8} md={5} lg={4} display="flex" alignItems="center">
            <Card elevation={9} sx={{ p: 4, width: '100%', zIndex: 1 }}>
              <Box textAlign="center" mb={2}><Logo /></Box>

              <AuthLogin
                onSubmit={handleLogin}
                subtitle={
                  <Stack direction="row" spacing={1} justifyContent="center" mt={3}>
                    <Typography color="textSecondary" variant="h6">
                      New user?
                    </Typography>
                    <Typography component={Link} to="/auth/register" sx={{ color: 'primary.main' }}>
                      Create an account
                    </Typography>
                  </Stack>
                }
              />
            </Card>
          </Grid>
        </Grid>
      </Box>

      <open={!!msg} autoHideDuration={4000} onClose={() => setMsg('')}>
        <severity="error" onClose={() => setMsg('')}>{msg}</>
      </>
    </PageContainer>
  );
};

export default Login2;


============================================================
FILE: src/views/authentication/auth2/Register2.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography, Stack } from '@mui/material';
import { Link } from 'react-router';
import PageContainer from 'src/components/container/PageContainer';
import Logo from 'src/layouts/full/shared/logo/Logo';

import AuthRegister from '../authForms/AuthRegister';

const Register2 = () => (
  <PageContainer title="Register" description="this is Register page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 5,
            xl: 4
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '450px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <AuthRegister
              subtext={
                <Typography variant="subtitle1" textAlign="center" color="textSecondary" mb={1}>
                  Your Social Campaigns
                </Typography>
              }
              subtitle={
                <Stack direction="row" spacing={1} mt={3}>
                  <Typography color="textSecondary" variant="h6" fontWeight="400">
                    Already have an Account?
                  </Typography>
                  <Typography
                    component={Link}
                    to="/auth/login2"
                    fontWeight="500"
                    sx={{
                      textDecoration: 'none',
                      color: 'primary.main',
                    }}
                  >
                    Sign In
                  </Typography>
                </Stack>
              }
            />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default Register2;


============================================================
FILE: src/views/authentication/auth2/TwoSteps2.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Card, Typography } from '@mui/material';

import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

import AuthTwoSteps from '../authForms/AuthTwoSteps';

const TwoSteps2 = () => (
  <PageContainer title="Forgot Password" description="this is Forgot Password page">
    <Box
      sx={{
        position: 'relative',
        '&:before': {
          content: '""',
          background: 'radial-gradient(#d2f1df, #d3d7fa, #bad8f4)',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite',
          position: 'absolute',
          height: '100%',
          width: '100%',
          opacity: '0.3',
        },
      }}
    >
      <Grid container spacing={0} justifyContent="center" sx={{ height: '100vh' }}>
        <Grid
          display="flex"
          justifyContent="center"
          alignItems="center"
          size={{
            xs: 12,
            sm: 12,
            lg: 5,
            xl: 4
          }}>
          <Card elevation={9} sx={{ p: 4, zIndex: 1, width: '100%', maxWidth: '450px' }}>
            <Box display="flex" alignItems="center" justifyContent="center">
              <Logo />
            </Box>
            <Typography variant="subtitle1" textAlign="center" color="textSecondary" mb={1}>
              We sent a verification code to your mobile. Enter the code from the mobile in the
              field below.
            </Typography>
            <Typography variant="subtitle1" textAlign="center" fontWeight="700" mb={1}>
              ******1234
            </Typography>
            <AuthTwoSteps />
          </Card>
        </Grid>
      </Grid>
    </Box>
  </PageContainer>
);

export default TwoSteps2;


============================================================
FILE: src/views/authentication/authForms/AuthForgotPassword.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Button, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';

const AuthForgotPassword = () => (
  <>
    <Stack mt={4} spacing={2}>
      <CustomFormLabel htmlFor="reset-email">Email Adddress</CustomFormLabel>
      <CustomTextField id="reset-email" variant="outlined" fullWidth />

      <Button color="primary" variant="contained" size="large" fullWidth component={Link} to="/">
        Forgot Password
      </Button>
      <Button color="primary" size="large" fullWidth component={Link} to="/auth/login">
        Back to Login
      </Button>
    </Stack>
  </>
);

export default AuthForgotPassword;


============================================================
FILE: src/views/authentication/authForms/AuthLogin.tsx
============================================================
/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-ignore
import React from 'react';
import { Box, Stack, Button, Typography, FormGroup, FormControlLabel } from '@mui/material';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import { Link } from 'react-router';

interface Props {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  subtext?: React.ReactNode;
  onSubmit: (phone: string, password: string) => void;   // <── هنا
}

const AuthLogin: React.FC<Props> = ({ subtitle, subtext, onSubmit }) => {
  const [phone, setPhone] = React.useState('');
  const [password, setPassword] = React.useState('');

  const handle = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(phone, password);
  };

  return (
    <>
      {subtext}

      <form onSubmit={handle}>
        <Stack spacing={2}>
          <Box>
            <CustomFormLabel htmlFor="phone">Phone</CustomFormLabel>
            <CustomTextField id="phone" fullWidth value={phone} onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPhone(e.target.value)} />
          </Box>
          <Box>
            <CustomFormLabel htmlFor="password">Password</CustomFormLabel>
            <CustomTextField id="password" type="password" fullWidth value={password} onChange={(e: { target: { value: React.SetStateAction<string>; }; }) => setPassword(e.target.value)} />
          </Box>

          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <FormGroup>
              <FormControlLabel control={<CustomCheckbox defaultChecked />} label="Remember me" />
            </FormGroup>
            <Typography component={Link} to="/auth/forgot-password" sx={{ color: 'primary.main', textDecoration: 'none' }}>
              Forgot password?
            </Typography>
          </Stack>

          <Button variant="contained" type="submit" fullWidth>Sign In</Button>
        </Stack>
      </form>

      {subtitle}
    </>
  );
};

export default AuthLogin;


============================================================
FILE: src/views/authentication/authForms/AuthRegister.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Button, Divider, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';
import { registerType } from 'src/types/auth/auth';
import AuthSocialButtons from './AuthSocialButtons';


const AuthRegister = ({ title, subtitle, subtext }: registerType) => (
  <>
    {title ? (
      <Typography fontWeight="700" variant="h3" mb={1}>
        {title}
      </Typography>
    ) : null}

    {subtext}
    <AuthSocialButtons title="Sign up with" />

    <Box mt={3}>
      <Divider>
        <Typography
          component="span"
          color="textSecondary"
          variant="h6"
          fontWeight="400"
          position="relative"
          px={2}
        >
          or sign up with
        </Typography>
      </Divider>
    </Box>

    <Box>
      <Stack mb={3}>
        <CustomFormLabel htmlFor="name">Name</CustomFormLabel>
        <CustomTextField id="name" variant="outlined" fullWidth />
        <CustomFormLabel htmlFor="email">Email Adddress</CustomFormLabel>
        <CustomTextField id="email" variant="outlined" fullWidth />
        <CustomFormLabel htmlFor="password">Password</CustomFormLabel>
        <CustomTextField id="password" variant="outlined" fullWidth />
      </Stack>
      <Button color="primary" variant="contained" size="large" fullWidth component={Link} to="/auth/login">
        Sign Up
      </Button>
    </Box>
    {subtitle}
  </>
);

export default AuthRegister;


============================================================
FILE: src/views/authentication/authForms/AuthSocialButtons.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import icon1 from 'src/assets/images/svgs/google-icon.svg';
import icon2 from 'src/assets/images/svgs/facebook-icon.svg';
import CustomSocialButton from '../../../components/forms/theme-elements/CustomSocialButton';
import { Avatar, Box, Stack } from '@mui/material';
import { signInType } from 'src/types/auth/auth';

const AuthSocialButtons = ({ title }: signInType) => (
  <>
    <Stack direction="row" justifyContent="center" spacing={2} mt={3}>
      <CustomSocialButton>
        <Avatar
          src={icon1}
          alt={icon1}
          sx={{
            width: 16,
            height: 16,
            borderRadius: 0,
            mr: 1,
          }}
        />
        <Box sx={{ display: { xs: 'none', sm: 'flex' }, whiteSpace: 'nowrap', mr: { sm: '3px' } }}>
          {title}{' '}
        </Box>{' '}
        Google
      </CustomSocialButton>
      <CustomSocialButton>
        <Avatar
          src={icon2}
          alt={icon2}
          sx={{
            width: 25,
            height: 25,
            borderRadius: 0,
            mr: 1,
          }}
        />
        <Box sx={{ display: { xs: 'none', sm: 'flex' }, whiteSpace: 'nowrap', mr: { sm: '3px' } }}>
          {title}{' '}
        </Box>{' '}
        FB
      </CustomSocialButton>
    </Stack>
  </>
);

export default AuthSocialButtons;


============================================================
FILE: src/views/authentication/authForms/AuthTwoSteps.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Typography, Button, Stack } from '@mui/material';
import { Link } from 'react-router';

import CustomTextField from '../../../components/forms/theme-elements/CustomTextField';
import CustomFormLabel from '../../../components/forms/theme-elements/CustomFormLabel';

const AuthTwoSteps = () => (
    <>
        <Box mt={4} >
            <Stack mb={3}>
                <CustomFormLabel htmlFor="code">Type your 6 digits security code </CustomFormLabel>
                <Stack spacing={2} direction="row">
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                    <CustomTextField id="code" variant="outlined" fullWidth />
                </Stack>

            </Stack>
            <Button
                color="primary"
                variant="contained"
                size="large"
                fullWidth
                component={Link}
                to="/">
                Verify My Account
            </Button>



            <Stack direction="row" spacing={1} mt={3}>
                <Typography
                    color="textSecondary"
                    variant="h6"
                    fontWeight="400"
                >
                    Didn't get the code?
                </Typography>
                <Typography
                    component={Link}
                    to="/"
                    fontWeight="500"
                    sx={{
                        textDecoration: 'none',
                        color: 'primary.main',
                    }}
                >
                    Resend
                </Typography>
            </Stack>
        </Box>
    </>
);

export default AuthTwoSteps;


============================================================
FILE: src/views/authentication/Error.tsx
============================================================
import { Box, Container, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import ErrorImg from 'src/assets/images/backgrounds/errorimg.svg';

const Error = () => (
  <Box
    display="flex"
    flexDirection="column"
    height="100vh"
    textAlign="center"
    justifyContent="center"
  >
    <Container maxWidth="md">
      <img src={ErrorImg} alt="404" />
      <Typography align="center" variant="h1" mb={4}>
        Opps!!!
      </Typography>
      <Typography align="center" variant="h4" mb={4}>
        This page you are looking for could not be found.
      </Typography>
      <Button
        color="primary"
        variant="contained"
        component={Link}
        to="/dashboards/modern"
        disableElevation
      >
        Go Back to Home
      </Button>
    </Container>
  </Box>
);

export default Error;


============================================================
FILE: src/views/authentication/Maintenance.tsx
============================================================
import { Box, Container, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import MaintenanceImg from 'src/assets/images/backgrounds/maintenance.svg';

const Maintenance = () => (
  <Box
    display="flex"
    flexDirection="column"
    height="100vh"
    textAlign="center"
    justifyContent="center"
  >
    <Container maxWidth="md">
      <img src={MaintenanceImg} alt="404" style={{ width: '100%', maxWidth: '500px' }} />
      <Typography align="center" variant="h1" mb={4}>
        Maintenance Mode!!!
      </Typography>
      <Typography align="center" variant="h4" mb={4}>
        Website is Under Construction. Check back later!
      </Typography>
      <Button color="primary" variant="contained" component={Link} to="/" disableElevation>
        Go Back to Home
      </Button>
    </Container>
  </Box>
);

export default Maintenance;


============================================================
FILE: src/views/charts/AreaChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import AreaChartCode from 'src/components/charts/Area Chart/code/AreaChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Area Chart',
  },
];

const AreaChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionsareachart: Props = {
    chart: {
      id: 'area-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        enabled: true,
      },
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      width: '3',
      curve: 'smooth',
    },
    colors: [primary, secondary],
    xaxis: {
      type: 'datetime',
      categories: [
        '2018-09-19T00:00:00',
        '2018-09-19T01:30:00',
        '2018-09-19T02:30:00',
        '2018-09-19T03:30:00',
        '2018-09-19T04:30:00',
        '2018-09-19T05:30:00',
        '2018-09-19T06:30:00',
      ],
    },
    yaxis: {
      opposite: false,
      labels: {
        show: true,
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    grid: {
      show: false,
    },
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesareachart = [
    {
      name: 'Sales Summery 1',
      data: [31, 40, 28, 51, 42, 109, 100],
    },
    {
      name: 'Sales Summery 2',
      data: [11, 32, 45, 32, 34, 52, 41],
    },
  ];

  return (
    <PageContainer title="Area Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Area Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Area Chart" codeModel={<AreaChartCode />}>
        <Chart options={optionsareachart} series={seriesareachart} type="area" height="300px" />
      </ParentCard>
    </PageContainer>
  );
};

export default AreaChart;

============================================================
FILE: src/views/charts/CandlestickChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import CandlestickChartCode from 'src/components/charts/Candlestick Chart/code/CandlestickChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Candlestick Chart',
  },
];

const CandlestickChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionscandlestickchart: Props = {
    chart: {
      height: 350,
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    xaxis: {
      type: 'datetime',
    },
    yaxis: {
      tooltip: {
        enabled: true,
      },
    },
    plotOptions: {
      candlestick: {
        colors: {
          upward: primary,
          downward: secondary,
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriecandlestickchart: any = [
    {
      data: [
        { x: new Date(1538778600000), y: [6629.81, 6650.5, 6623.04, 6633.33] },
        { x: new Date(1538780400000), y: [6632.01, 6643.59, 6620, 6630.11] },
        { x: new Date(1538782200000), y: [6630.71, 6648.95, 6623.34, 6635.65] },
        { x: new Date(1538784000000), y: [6635.65, 6651, 6629.67, 6638.24] },
        { x: new Date(1538785800000), y: [6638.24, 6640, 6620, 6624.47] },
        { x: new Date(1538787600000), y: [6624.53, 6636.03, 6621.68, 6624.31] },
        { x: new Date(1538789400000), y: [6624.61, 6632.2, 6617, 6626.02] },
        { x: new Date(1538791200000), y: [6627, 6627.62, 6584.22, 6603.02] },
        { x: new Date(1538793000000), y: [6605, 6608.03, 6598.95, 6604.01] },
        { x: new Date(1538794800000), y: [6604.5, 6614.4, 6602.26, 6608.02] },
        { x: new Date(1538796600000), y: [6608.02, 6610.68, 6601.99, 6608.91] },
        { x: new Date(1538798400000), y: [6608.91, 6618.99, 6608.01, 6612] },
        { x: new Date(1538800200000), y: [6612, 6615.13, 6605.09, 6612] },
        { x: new Date(1538802000000), y: [6612, 6624.12, 6608.43, 6622.95] },
        { x: new Date(1538803800000), y: [6623.91, 6623.91, 6615, 6615.67] },
        { x: new Date(1538805600000), y: [6618.69, 6618.74, 6610, 6610.4] },
        { x: new Date(1538807400000), y: [6611, 6622.78, 6610.4, 6614.9] },
        { x: new Date(1538809200000), y: [6614.9, 6626.2, 6613.33, 6623.45] },
        { x: new Date(1538811000000), y: [6623.48, 6627, 6618.38, 6620.35] },
        { x: new Date(1538812800000), y: [6619.43, 6620.35, 6610.05, 6615.53] },
        { x: new Date(1538814600000), y: [6615.53, 6617.93, 6610, 6615.19] },
        { x: new Date(1538816400000), y: [6615.19, 6621.6, 6608.2, 6620] },
        { x: new Date(1538818200000), y: [6619.54, 6625.17, 6614.15, 6620] },
        { x: new Date(1538820000000), y: [6620.33, 6634.15, 6617.24, 6624.61] },
        { x: new Date(1538821800000), y: [6625.95, 6626, 6611.66, 6617.58] },
        { x: new Date(1538823600000), y: [6619, 6625.97, 6595.27, 6598.86] },
        { x: new Date(1538825400000), y: [6598.86, 6598.88, 6570, 6587.16] },
        { x: new Date(1538827200000), y: [6588.86, 6600, 6580, 6593.4] },
        { x: new Date(1538829000000), y: [6593.99, 6598.89, 6585, 6587.81] },
        { x: new Date(1538830800000), y: [6587.81, 6592.73, 6567.14, 6578] },
        { x: new Date(1538832600000), y: [6578.35, 6581.72, 6567.39, 6579] },
        { x: new Date(1538834400000), y: [6579.38, 6580.92, 6566.77, 6575.96] },
        { x: new Date(1538836200000), y: [6575.96, 6589, 6571.77, 6588.92] },
        { x: new Date(1538838000000), y: [6588.92, 6594, 6577.55, 6589.22] },
        { x: new Date(1538839800000), y: [6589.3, 6598.89, 6589.1, 6596.08] },
        { x: new Date(1538841600000), y: [6597.5, 6600, 6588.39, 6596.25] },
        { x: new Date(1538843400000), y: [6598.03, 6600, 6588.73, 6595.97] },
        { x: new Date(1538845200000), y: [6595.97, 6602.01, 6588.17, 6602] },
        { x: new Date(1538847000000), y: [6602, 6607, 6596.51, 6599.95] },
        { x: new Date(1538848800000), y: [6600.63, 6601.21, 6590.39, 6591.02] },
        { x: new Date(1538850600000), y: [6591.02, 6603.08, 6591, 6591] },
        { x: new Date(1538852400000), y: [6591, 6601.32, 6585, 6592] },
        { x: new Date(1538854200000), y: [6593.13, 6596.01, 6590, 6593.34] },
        { x: new Date(1538856000000), y: [6593.34, 6604.76, 6582.63, 6593.86] },
        { x: new Date(1538857800000), y: [6593.86, 6604.28, 6586.57, 6600.01] },
        { x: new Date(1538859600000), y: [6601.81, 6603.21, 6592.78, 6596.25] },
        { x: new Date(1538861400000), y: [6596.25, 6604.2, 6590, 6602.99] },
        { x: new Date(1538863200000), y: [6602.99, 6606, 6584.99, 6587.81] },
        { x: new Date(1538865000000), y: [6587.81, 6595, 6583.27, 6591.96] },
        { x: new Date(1538866800000), y: [6591.97, 6596.07, 6585, 6588.39] },
        { x: new Date(1538868600000), y: [6587.6, 6598.21, 6587.6, 6594.27] },
        { x: new Date(1538870400000), y: [6596.44, 6601, 6590, 6596.55] },
        { x: new Date(1538872200000), y: [6598.91, 6605, 6596.61, 6600.02] },
        { x: new Date(1538874000000), y: [6600.55, 6605, 6589.14, 6593.01] },
        { x: new Date(1538875800000), y: [6593.15, 6605, 6592, 6603.06] },
        { x: new Date(1538877600000), y: [6603.07, 6604.5, 6599.09, 6603.89] },
        { x: new Date(1538879400000), y: [6604.44, 6604.44, 6600, 6603.5] },
        { x: new Date(1538881200000), y: [6603.5, 6603.99, 6597.5, 6603.86] },
        { x: new Date(1538883000000), y: [6603.85, 6605, 6600, 6604.07] },
        { x: new Date(1538884800000), y: [6604.98, 6606, 6604.07, 6606] },
      ],
    },
  ];

  return (
    <PageContainer title="Candlestick Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Candlestick Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Candlestick Chart" codeModel={<CandlestickChartCode />}>
        <Chart
          options={optionscandlestickchart}
          series={seriecandlestickchart}
          type="candlestick"
          height="308px"
          width={'95%'}
        />
      </ParentCard>
    </PageContainer>
  );
};

export default CandlestickChart;


============================================================
FILE: src/views/charts/ColumnChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import ColumnChartCode from 'src/components/charts/Column Chart/code/ColumnChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Column Chart',
  },
];

const ColumnChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const error = theme.palette.error.main;

  const optionscolumnchart: Props = {
    chart: {
      id: 'column-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, error],
    plotOptions: {
      bar: {
        horizontal: false,
        endingShape: 'rounded',
        columnWidth: '20%',
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 2,
      colors: ['transparent'],
    },
    xaxis: {
      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],
    },
    yaxis: {
      title: {
        text: '$ (thousands)',
      },
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      y: {
        formatter(val: any) {
          return `$ ${val} thousands`;
        },
      },
      theme: 'dark',
    },
    grid: {
      show: false,
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
  };
  const seriescolumnchart: any = [
    {
      name: 'Desktop',
      data: [44, 55, 57, 56, 61, 58, 63, 60, 66],
    },
    {
      name: 'Mobile',
      data: [76, 85, 101, 98, 87, 105, 91, 114, 94],
    },
    {
      name: 'Other',
      data: [35, 41, 36, 26, 45, 48, 52, 53, 41],
    },
  ];

  return (
    <PageContainer title="Column Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Column Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title='Column Chart' codeModel={<ColumnChartCode />}>
        <Chart
          options={optionscolumnchart}
          series={seriescolumnchart}
          type="bar"
          height="300px"
        />
      </ParentCard>
    </PageContainer>
  );
};

export default ColumnChart;


============================================================
FILE: src/views/charts/DoughnutChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import Grid from '@mui/material/Grid2';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import DoughnutChartsCode from 'src/components/charts/Doughnut Charts/code/DoughnutChartsCode';
import PieChartsCode from 'src/components/charts/Pie Charts/code/PieChartsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Doughtnut Chart',
  },
];

const DoughnutChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const primarylight = theme.palette.primary.light;
  const secondary = theme.palette.secondary.main;
  const secondarylight = theme.palette.secondary.light;
  const warning = theme.palette.warning.main;

  // 1
  const optionsdoughnutchart: Props = {
    chart: {
      id: 'donut-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      theme: 'dark',
      fillSeriesColor: false,
    },
  };
  const seriesdoughnutchart = [45, 15, 27, 18, 35];

  // 2
  const optionspiechart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    dataLabels: {
      enabled: false,
    },
    plotOptions: {
      pie: {
        donut: {
          size: '70px',
        },
      },
    },
    legend: {
      show: true,
      position: 'bottom',
      width: '50px',
    },
    colors: [primary, primarylight, secondary, secondarylight, warning],
    tooltip: {
      fillSeriesColor: false,
    },
  };
  const seriespiechart = [45, 15, 27, 18, 35];

  return (
    (<PageContainer title="Doughnut & Pie Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Doughtnut Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Doughnut Charts" codeModel={<DoughnutChartsCode />}>
            <Chart
              options={optionsdoughnutchart}
              series={seriesdoughnutchart}
              type="donut"
              height="300px"
            />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title='Pie Charts' codeModel={<PieChartsCode />}>
            <Chart options={optionspiechart} series={seriespiechart} type="pie" height="300px" />
          </ParentCard>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default DoughnutChart;


============================================================
FILE: src/views/charts/GredientChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import GradientChartCode from 'src/components/charts/Gradient Chart/code/GradientChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Gradient Chart',
  },
];

const GredientChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  
  const optionsgredientchart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
      dropShadow: {
        enabled: true,
        color: 'rgba(0,0,0,0.2)',
        top: 12,
        left: 4,
        blur: 3,
        opacity: 0.4,
      },
    },
    stroke: {
      width: 7,
      curve: 'smooth',
    },

    xaxis: {
      type: 'datetime',
      categories: [
        '1/11/2000',
        '2/11/2000',
        '3/11/2000',
        '4/11/2000',
        '5/11/2000',
        '6/11/2000',
        '7/11/2000',
        '8/11/2000',
        '9/11/2000',
        '10/11/2000',
        '11/11/2000',
        '12/11/2000',
        '1/11/2001',
        '2/11/2001',
        '3/11/2001',
        '4/11/2001',
        '5/11/2001',
        '6/11/2001',
      ],
    },
    fill: {
      type: 'gradient',
      gradient: {
        shade: 'dark',
        gradientToColors: [primary],
        shadeIntensity: 1,
        type: 'horizontal',
        opacityFrom: 1,
        opacityTo: 0.9,
        stops: [0, 100, 100, 100],
      },
    },
    markers: {
      size: 4,
      opacity: 0.9,
      colors: [primary],
      strokeColor: '#fff',
      strokeWidth: 2,

      hover: {
        size: 7,
      },
    },
    yaxis: {
      min: 0,
      max: 40,
    },
    tooltip: {
      theme: 'dark',
    },
    grid: {
      show: false,
    },
  };
  const seriesgredientchart: any = [
    {
      name: 'Likes',
      data: [4, 3, 10, 9, 35, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5],
    },
  ];

  return (
    <PageContainer title="Gredient Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Gradient Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title='Gradient Chart' codeModel={<GradientChartCode />} >
        <Chart
          options={optionsgredientchart}
          series={seriesgredientchart}
          type="line"
          height="300px"
        />
      </ParentCard>
    </PageContainer>
  );
};

export default GredientChart;


============================================================
FILE: src/views/charts/LineChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import LineChartCode from 'src/components/charts/Line Chart/code/LineChartCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Line Chart',
  },
];

const LineChart = () => {
  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;

  const optionslinechart: Props = {
    chart: {
      height: 350,
      type: 'line',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      zoom: {
        type: 'x',
        enabled: true,
      },
      toolbar: {
        show: false,
      },
      shadow: {
        enabled: true,
        color: '#000',
        top: 18,
        left: 7,
        blur: 10,
        opacity: 1,
      },
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
      title: {
        text: 'Month',
      },
    },
    grid: {
      show: false,
    },
    colors: [primary, secondary],
    dataLabels: {
      enabled: true,
    },
    stroke: {
      curve: 'straight',
      width: '2',
    },
    legend: {
      position: 'top',
      horizontalAlign: 'right',
      floating: true,
      offsetY: -25,
      offsetX: -5,
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const serieslinechart: any = [
    {
      name: 'High - 2013',
      data: [28, 29, 33, 36, 32, 32, 33],
    },
    {
      name: 'Low - 2013',
      data: [12, 11, 14, 18, 17, 13, 13],
    },
  ];

  return (
    <PageContainer title="Line Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Line Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Line Chart" codeModel={<LineChartCode />}>
        <Chart
          options={optionslinechart}
          series={serieslinechart}
          type="line"
          height="308px"
          width={'90%'}
        />
      </ParentCard>
    </PageContainer>
  );
};

export default LineChart;


============================================================
FILE: src/views/charts/RadialbarChart.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Chart from 'react-apexcharts';
import Grid from '@mui/material/Grid2';
import { useTheme } from '@mui/material/styles';
import PageContainer from '../../components/container/PageContainer';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { Props } from 'react-apexcharts';

import RadialbarChartsCode from 'src/components/charts/Radialbar Charts/code/RadialbarChartsCode';
import RadarChartsCode from 'src/components/charts/Radar Charts/code/RadarChartsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radialbar Chart',
  },
];

const RadialbarChart = () => {

  // chart color
  const theme = useTheme();
  const primary = theme.palette.primary.main;
  const secondary = theme.palette.secondary.main;
  const success = theme.palette.success.main;
  const warning = theme.palette.warning.main;

  const optionsradialchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      foreColor: '#adb0bb',
      toolbar: {
        show: false,
      },
    },
    colors: [primary, secondary, success, warning],
    plotOptions: {
      radialBar: {
        dataLabels: {
          name: {
            fontSize: '22px',
          },
          value: {
            fontSize: '16px',
          },
          total: {
            show: true,
            label: 'Total',
            formatter() {
              return 249;
            },
          },
        },
      },
    },
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradialchart: any = [44, 55, 67, 83];

  // 2
  const optionsradarchart: Props = {
    chart: {
      id: 'pie-chart',
      fontFamily: "'Plus Jakarta Sans', sans-serif",
      toolbar: {
        show: false,
      },
    },
    colors: [primary],
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    tooltip: {
      theme: 'dark',
    },
  };
  const seriesradarchart: any = [
    {
      name: 'Sales',
      data: [80, 50, 30, 40, 100, 20],
    },
  ];

  return (
    (<PageContainer title="Radialbar & Radar Chart" description="this is innerpage">
      {/* breadcrumb */}
      <Breadcrumb title="Radialbar Chart" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Radialbar Charts" codeModel={<RadialbarChartsCode />}>
            <Chart
              options={optionsradialchart}
              series={seriesradialchart}
              type="radialBar"
              height="338px"
            />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            lg: 6,
            md: 12,
            xs: 12
          }}>
          <ParentCard title="Radar Charts" codeModel={<RadarChartsCode />}>
            <Chart
              options={optionsradarchart}
              series={seriesradarchart}
              type="radar"
              height="300px"
            />
          </ParentCard>
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default RadialbarChart;

============================================================
FILE: src/views/dashboard/Ecommerce.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Box, Grid2 as Grid } from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';

import YearlySales from 'src/components/dashboards/ecommerce/YearlySales';
import PaymentGateways from 'src/components/dashboards/ecommerce/PaymentGateways';
import WelcomeCard from 'src/components/dashboards/ecommerce/WelcomeCard';
import Expence from 'src/components/dashboards/ecommerce/Expence';
import Growth from 'src/components/dashboards/ecommerce/Growth';
import RevenueUpdates from 'src/components/dashboards/ecommerce/RevenueUpdates';
import SalesOverview from 'src/components/dashboards/ecommerce/SalesOverview';
import SalesTwo from 'src/components/dashboards/ecommerce/SalesTwo';
import Sales from 'src/components/dashboards/ecommerce/Sales';
import MonthlyEarnings from 'src/components/dashboards/ecommerce/MonthlyEarnings';
import ProductPerformances from 'src/components/dashboards/ecommerce/ProductPerformances';
import RecentTransactions from 'src/components/dashboards/ecommerce/RecentTransactions';

const Ecommerce = () => {
  return (
    (<PageContainer title="eCommerce Dashboard" description="this is eCommerce Dashboard page">
      <Box mt={3}>
        <Grid container spacing={3}>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <WelcomeCard />
          </Grid>

          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Expence />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Sales />
              </Grid>
            </Grid>
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <RevenueUpdates />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <SalesOverview />
          </Grid>
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
            <Grid container spacing={3}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <SalesTwo />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6
                }}>
                <Growth />
              </Grid>
              <Grid size={12}>
                <MonthlyEarnings />
              </Grid>
            </Grid>
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              sm: 6,
              lg: 4
            }}>
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <YearlySales />
          </Grid>
          {/* column */}
          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <PaymentGateways />
          </Grid>
          {/* column */}

          <Grid
            size={{
              xs: 12,
              lg: 4
            }}>
            <RecentTransactions />
          </Grid>
          {/* column */}

          <Grid
            size={{
              xs: 12,
              lg: 8
            }}>
            <ProductPerformances />
          </Grid>
        </Grid>
      </Box>
    </PageContainer>)
  );
};

export default Ecommerce;


============================================================
FILE: src/views/forms/form-elements/MuiAutoComplete.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';

import ComboBoxAutocomplete from 'src/components/forms/form-elements/autoComplete/ComboBoxAutocomplete';
import CountrySelectAutocomplete from 'src/components/forms/form-elements/autoComplete/CountrySelectAutocomplete';
import ControlledStateAutocomplete from 'src/components/forms/form-elements/autoComplete/ControlledStateAutocomplete';
import FreeSoloAutocomplete from 'src/components/forms/form-elements/autoComplete/FreeSoloAutocomplete';
import MultipleValuesAutocomplete from 'src/components/forms/form-elements/autoComplete/MultipleValuesAutocomplete';
import CheckboxesAutocomplete from 'src/components/forms/form-elements/autoComplete/CheckboxesAutocomplete';
import SizesAutocomplete from 'src/components/forms/form-elements/autoComplete/SizesAutocomplete';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

// codeModel
import ComboBoxCode from 'src/components/forms/form-elements/autoComplete/code/ComboBoxCode';
import CountrySelectCode from 'src/components/forms/form-elements/autoComplete/code/CountrySelectCode';
import ControlledStateCode from 'src/components/forms/form-elements/autoComplete/code/ControlledStateCode';
import FreeSoloCode from 'src/components/forms/form-elements/autoComplete/code/FreeSoloCode';
import MultipleValuesCode from 'src/components/forms/form-elements/autoComplete/code/MultipleValuesCode';
import CheckboxesCode from 'src/components/forms/form-elements/autoComplete/code/CheckboxesCode';
import SizesCode from 'src/components/forms/form-elements/autoComplete/code/SizesCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'AutoComplete',
  },
];

const MuiAutoComplete = () => (
  <PageContainer title="Autocomplete" description="this is Autocomplete page">
    {/* breadcrumb */}
    <Breadcrumb title="AutoComplete" items={BCrumb} />
    {/* end breadcrumb */}

    <ParentCard title="Autocomplete">
      <Grid container spacing={3}>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Combo Box" codeModel={<ComboBoxCode />}>
            <ComboBoxAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Country Select" codeModel={<CountrySelectCode />}>
            <CountrySelectAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Controlled State" codeModel={<ControlledStateCode />}>
            <ControlledStateAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Free Solo" codeModel={<FreeSoloCode />}>
            <FreeSoloAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Multiple Values" codeModel={<MultipleValuesCode />}>
            <MultipleValuesAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Checkboxes" codeModel={<CheckboxesCode />}>
            <CheckboxesAutocomplete />
          </ChildCard>
        </Grid>
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 4,
            sm: 6
          }}>
          <ChildCard title="Sizes" codeModel={<SizesCode />}>
            <SizesAutocomplete />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiAutoComplete;


============================================================
FILE: src/views/forms/form-elements/MuiButton.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import DefaultButtons from 'src/components/forms/form-elements/button/DefaultButtons';
import ColorButtons from 'src/components/forms/form-elements/button/ColorButtons';
import IconLoadingButtons from 'src/components/forms/form-elements/button/IconLoadingButtons';
import SizeButton from 'src/components/forms/form-elements/button/SizeButton';

import OutlinedIconButtons from 'src/components/forms/form-elements/button/OutlinedIconButtons';
import OutlinedSizeButton from 'src/components/forms/form-elements/button/OutlinedSizeButton';

import TextDefaultButtons from 'src/components/forms/form-elements/button/TextDefaultButtons';
import TextColorButtons from 'src/components/forms/form-elements/button/TextColorButtons';
import TextIconButtons from 'src/components/forms/form-elements/button/TextIconButtons';
import TextSizeButton from 'src/components/forms/form-elements/button/TextSizeButton';

import IconColorButtons from 'src/components/forms/form-elements/button/IconColorButtons';
import IconSizeButtons from 'src/components/forms/form-elements/button/IconSizeButtons';

import FabDefaultButton from 'src/components/forms/form-elements/button/FabDefaultButton';
import FabColorButtons from 'src/components/forms/form-elements/button/FabColorButtons';
import FabSizeButtons from 'src/components/forms/form-elements/button/FabSizeButtons';

import DefaultButtonGroup from 'src/components/forms/form-elements/button/DefaultButtonGroup';
import SizeButtonGroup from 'src/components/forms/form-elements/button/SizeButtonGroup';
import VerticalButtonGroup from 'src/components/forms/form-elements/button/VerticalButtonGroup';
import ColorButtonGroup from 'src/components/forms/form-elements/button/ColorButtonGroup';
import TextButtonGroup from 'src/components/forms/form-elements/button/TextButtonGroup';
import OutlinedColorButtons from '../../../components/forms/form-elements/button/OutlinedColorButtons';

// codeModel
import DefaultCode from 'src/components/forms/form-elements/button/code/DefaultCode';
import ColorsCode from 'src/components/forms/form-elements/button/code/ColorsCode';
import LoadingButtonsCode from 'src/components/forms/form-elements/button/code/LoadingButtonsCode';
import SizesCode from 'src/components/forms/form-elements/button/code/SizesCode';
import OutlinedCode from 'src/components/forms/form-elements/button/code/OutlinedCode';
import OutlinedIconCode from 'src/components/forms/form-elements/button/code/OutlinedIconCode';
import OutlineSizeCode from 'src/components/forms/form-elements/button/code/OutlineSizeCode';
import TextCode from 'src/components/forms/form-elements/button/code/TextCode';
import TextColorCode from 'src/components/forms/form-elements/button/code/TextColorCode';
import TextIconColor from 'src/components/forms/form-elements/button/code/TextIconColor';
import TextSizesCode from 'src/components/forms/form-elements/button/code/TextSizesCode';
import IconColorCode from 'src/components/forms/form-elements/button/code/IconColorCode';
import IconSizesCode from 'src/components/forms/form-elements/button/code/IconSizesCode';
import FABCode from 'src/components/forms/form-elements/button/code/FABCode';
import FABColorCode from 'src/components/forms/form-elements/button/code/FABColorCode';
import FABSizeCode from 'src/components/forms/form-elements/button/code/FABSizeCode';
import DefaultButtonGroupCode from 'src/components/forms/form-elements/button/code/DefaultButtonGroupCode';
import SizeButtonGroupCode from 'src/components/forms/form-elements/button/code/SizeButtonGroupCode';
import VerticalButtonGroupCode from 'src/components/forms/form-elements/button/code/VerticalButtonGroupCode';
import TextButtonGroupCode from 'src/components/forms/form-elements/button/code/TextButtonGroupCode';
import ColorButtonGroupCode from 'src/components/forms/form-elements/button/code/ColorButtonGroupCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Button',
  },
];

const MuiButton = () => (
  <PageContainer title="Buttons" description="this is Buttons page">
    {/* breadcrumb */}
    <Breadcrumb title="Button" items={BCrumb} />
    {/* end breadcrumb */}
    <Grid container spacing={3}>
      <Grid size={12}>
        <ParentCard title='Buttons'>
          <Grid container spacing={3}>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Default" codeModel={<DefaultCode />}>
                <DefaultButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Colors" codeModel={<ColorsCode />}>
                <ColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Loading Buttons" codeModel={<LoadingButtonsCode />}>
                <IconLoadingButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Sizes" codeModel={<SizesCode />}>
                <SizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outlined" codeModel={<OutlinedCode />}>
                <OutlinedColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outlined Icon" codeModel={<OutlinedIconCode />}>
                <OutlinedIconButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Outline Size" codeModel={<OutlineSizeCode />}>
                <OutlinedSizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text" codeModel={<TextCode />}>
                <TextDefaultButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Color" codeModel={<TextColorCode />}>
                <TextColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Icon" codeModel={<TextIconColor />}>
                <TextIconButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text Sizes" codeModel={<TextSizesCode />}>
                <TextSizeButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Icon Color" codeModel={<IconColorCode />}>
                <IconColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Icon Sizes" codeModel={<IconSizesCode />}>
                <IconSizeButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB" codeModel={<FABCode />}>
                <FabDefaultButton />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB Color" codeModel={<FABColorCode />}>
                <FabColorButtons />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="FAB Size" codeModel={<FABSizeCode />}>
                <FabSizeButtons />
              </ChildCard>
            </Grid>
          </Grid>
        </ParentCard>
      </Grid>
      <Grid size={12}>
        <ParentCard title='Button Group'>
          <Grid container spacing={3}>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Default" codeModel={<DefaultButtonGroupCode />}>
                <DefaultButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Sizes" codeModel={<SizeButtonGroupCode />}>
                <SizeButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Verical" codeModel={<VerticalButtonGroupCode />}>
                <VerticalButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid
              display="flex"
              alignItems="stretch"
              size={{
                xs: 12,
                lg: 6
              }}>
              <ChildCard title="Text" codeModel={<TextButtonGroupCode />}>
                <TextButtonGroup />
              </ChildCard>
            </Grid>
            {/* ------------------------- row 1 ------------------------- */}
            <Grid display="flex" alignItems="stretch" size={12}>
              <ChildCard title="Color" codeModel={<ColorButtonGroupCode />}>
                <ColorButtonGroup />
              </ChildCard>
            </Grid>
          </Grid>
        </ParentCard>
      </Grid>
    </Grid>
  </PageContainer >
);
export default MuiButton;


============================================================
FILE: src/views/forms/form-elements/MuiCheckbox.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';

import Grid from '@mui/material/Grid2';

// custom components
import PositionCheckbox from "src/components/forms/form-elements/checkbox/Position";
import SizesCheckbox from "src/components/forms/form-elements/checkbox/Sizes";
import DefaultcolorsCheckbox from "src/components/forms/form-elements/checkbox/DefaultColors"
import CustomEleCheckbox from "src/components/forms/form-elements/checkbox/Custom";
import DefaultCheckbox from "src/components/forms/form-elements/checkbox/Default";
import ColorsCheckbox from "src/components/forms/form-elements/checkbox/Colors";

// codeModel
import CustomEleCheckboxCode from 'src/components/forms/form-elements/checkbox/code/CustomEleCheckboxCode';
import ColorsCheckboxCode from 'src/components/forms/form-elements/checkbox/code/ColorsCheckboxCode';
import DefaultCheckboxCode from 'src/components/forms/form-elements/checkbox/code/DefaultCheckboxCode';
import DefaultcolorsCheckboxCode from 'src/components/forms/form-elements/checkbox/code/DefaultcolorsCheckboxCode';
import SizesCheckboxCode from 'src/components/forms/form-elements/checkbox/code/SizesCheckboxCode';
import PositionCheckboxCode from 'src/components/forms/form-elements/checkbox/code/PositionCheckboxCode';
const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Checkbox',
  },
];

const MuiCheckbox = () => {

  return (
    (<PageContainer title="Checkbox" description="this is Checkbox page">
      {/* breadcrumb */}
      <Breadcrumb title="Checkbox" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Checkbox">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom  */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomEleCheckboxCode />}>
              <CustomEleCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Colors  */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Colors" codeModel={<ColorsCheckboxCode />}>
              <ColorsCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default Checkbox */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultCheckboxCode />}>
              <DefaultCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default with colors */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default with Colors" codeModel={<DefaultcolorsCheckboxCode />}>
              <DefaultcolorsCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Sizes */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Sizes & Custom Icon" codeModel={<SizesCheckboxCode />}>
              <SizesCheckbox />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Position */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Position" codeModel={<PositionCheckboxCode />}>
              <PositionCheckbox />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiCheckbox;


============================================================
FILE: src/views/forms/form-elements/MuiDateTime.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import dayjs, { Dayjs } from 'dayjs';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers'

// codeModel
import BasicDateTimeCode from 'src/components/forms/form-elements/date-time/code/BasicDateTimeCode';
import DifferentDesignCode from 'src/components/forms/form-elements/date-time/code/DifferentDesignCode';
import TimepickerCode from 'src/components/forms/form-elements/date-time/code/TimepickerCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Date Time',
  },
];

const MuiDateTime = () => {
  const [value, setValue] = React.useState<Dayjs | null>(null);
  const [value2, setValue2] = React.useState<Dayjs | null>(null);

  // date time
  const [value3, setValue3] = React.useState<Dayjs | null>(dayjs('2018-01-01T00:00:00.000Z'));

  return (
    (<PageContainer title="Date Time" description="this is Date Time page">
      {/* breadcrumb */}
      <Breadcrumb title="Date Picker" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Date Time">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Basic */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Basic" codeModel={<BasicDateTimeCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <MobileDateTimePicker
                  onChange={(newValue) => {
                    setValue3(newValue);
                  }}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      variant: 'outlined',
                      size: 'small',
                      inputProps: { 'aria-label': 'basic date picker' },
                    },
                  }}
                  value={value3}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Different */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Different Design" codeModel={<DifferentDesignCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DateTimePicker
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      size: 'small',
                      sx: {
                        '& .MuiSvgIcon-root': {
                          width: '18px',
                          height: '18px',
                        },
                        '& .MuiFormHelperText-root': {
                          display: 'none',
                        },
                      },
                    },
                  }}
                  value={value}
                  onChange={(newValue) => {
                    setValue(newValue)
                  }}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Timepicker */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Timepicker" codeModel={<TimepickerCode />}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <TimePicker
                  value={value2}
                  onChange={(newValue) => {
                    setValue2(newValue)
                  }}
                  viewRenderers={{
                    hours: renderTimeViewClock,
                    minutes: renderTimeViewClock,
                    seconds: renderTimeViewClock,
                  }}
                  slotProps={{
                    textField: {
                      size: 'small',
                      fullWidth: true,
                      sx: {
                        '& .MuiSvgIcon-root': {
                          width: '18px',
                          height: '18px',
                        },
                        '& .MuiFormHelperText-root': {
                          display: 'none',
                        },
                      },
                    },
                  }}
                />
              </LocalizationProvider>
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiDateTime;


============================================================
FILE: src/views/forms/form-elements/MuiRadio.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ColorLabelRadio from "src/components/forms/form-elements/radio/ColorLabel";
import DefaultRadio from "src/components/forms/form-elements/radio/Default";
import ColorsRadio from "src/components/forms/form-elements/radio/Colors";
import SizesRadio from "src/components/forms/form-elements/radio/Sizes";
import CustomExRadio from "src/components/forms/form-elements/radio/Custom";
import PositionRadio from "src/components/forms/form-elements/radio/Position";

// codeModel
import CustomExRadioCode from 'src/components/forms/form-elements/radio/code/CustomExRadioCode';
import ColorLabelRadioCode from 'src/components/forms/form-elements/radio/code/ColorLabelRadioCode';
import DefaultRadioCode from 'src/components/forms/form-elements/radio/code/DefaultRadioCode';
import ColorsRadioCode from 'src/components/forms/form-elements/radio/code/ColorsRadioCode';
import SizesRadioCode from 'src/components/forms/form-elements/radio/code/SizesRadioCode';
import PositionRadioCode from 'src/components/forms/form-elements/radio/code/PositionRadioCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Radio',
  },
];

const ExRadio = () => {

  return (
    (<PageContainer title="Radio" description="this is Radio page">
      {/* breadcrumb */}
      <Breadcrumb title="Radio" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Radio">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomExRadioCode />}>
              <CustomExRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Color with label */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Color with Label" codeModel={<ColorLabelRadioCode />}>
              <ColorLabelRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultRadioCode />}>
              <DefaultRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default Colors */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Default Colors" codeModel={<ColorsRadioCode />}>
              <ColorsRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Sizes */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Sizes" codeModel={<SizesRadioCode />}>
              <SizesRadio />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Position */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 6,
              sm: 6
            }}>
            <ChildCard title="Position" codeModel={<PositionRadioCode />}>
              <PositionRadio />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default ExRadio;


============================================================
FILE: src/views/forms/form-elements/MuiSlider.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Box, Slider, Typography, SliderThumb, SliderValueLabelProps, Stack } from '@mui/material';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import CustomRangeSlider from 'src/components/forms/theme-elements/CustomRangeSlider';
import CustomSlider from 'src/components/forms/theme-elements/CustomSlider';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';

// codeModel
import CustomSliderCode from 'src/components/forms/form-elements/slider/code/CustomSliderCode';
import VolumesliderCode from 'src/components/forms/form-elements/slider/code/VolumesliderCode';
import RangesliderCode from 'src/components/forms/form-elements/slider/code/RangesliderCode';
import DefaultsliderCode from 'src/components/forms/form-elements/slider/code/DefaultsliderCode';
import DisabledSliderCode from 'src/components/forms/form-elements/slider/code/DisabledSliderCode';
import DiscreteSliderCode from 'src/components/forms/form-elements/slider/code/DiscreteSliderCode';
import TemperatureRangeCode from 'src/components/forms/form-elements/slider/code/TemperatureRangeCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Slider',
  },
];

const valuetext = (value: any) => `${value}°C`;

function valuetext2(value: any) {
  return `${value}°C`;
}

function AirbnbThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}

const MuiSlider = () => {
  const [value, setValue] = React.useState(30);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange = (event: any, newValue: any) => {
    setValue(newValue);
  };
  const [value2, setValue2] = React.useState([20, 37]);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange2 = (event2: any, newValue2: any) => {
    setValue2(newValue2);
  };

  return (
    (<PageContainer title="Slider" description="this is Slider page">
      {/* breadcrumb */}
      <Breadcrumb title="Slider" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Slider">
        <Grid container spacing={3}>
          {/* ------------------------------------------------------------------- */}
          {/* Custom */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Custom" codeModel={<CustomSliderCode />}>
              <CustomSlider defaultValue={[30]} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Volume */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Volume" codeModel={<VolumesliderCode />}>
              <CustomSlider defaultValue={30} aria-label="volume slider" />
              <Box display="flex" alignItems="center">
                <Typography>
                  <IconVolume2 width={20} />
                </Typography>
                <Box ml="auto">
                  <Typography>
                    <IconVolume width={20} />
                  </Typography>
                </Box>
              </Box>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Range */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Range" codeModel={<RangesliderCode />}>
              <CustomRangeSlider
                slots={{ thumb: AirbnbThumbComponent }}
                getAriaLabel={(index: any) => (index === 0 ? 'Minimum price' : 'Maximum price')}
                defaultValue={[20, 40]}
              />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Default" codeModel={<DefaultsliderCode />}>
              <Slider defaultValue={30} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Disabled */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Disabled" codeModel={<DisabledSliderCode />}>
              <Slider disabled defaultValue={30} />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Volume */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Volume">
              <Stack direction="row" spacing={1}>
                <IconVolume2 width={20} />
                <Slider aria-label="Volume" value={value} onChange={handleChange} />
                <IconVolume width={20} />
              </Stack>
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Discrete */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Discrete" codeModel={<DiscreteSliderCode />}>
              <Slider
                aria-label="Temperature"
                defaultValue={30}
                getAriaValueText={valuetext}
                valueLabelDisplay="auto"
                step={10}
                marks
                min={10}
                max={110}
              />
            </ChildCard>
          </Grid>
          {/* ------------------------------------------------------------------- */}
          {/* Range Default */}
          {/* ------------------------------------------------------------------- */}
          <Grid
            display="flex"
            alignItems="stretch"
            size={{
              xs: 12,
              lg: 4,
              sm: 6
            }}>
            <ChildCard title="Range Default" codeModel={<TemperatureRangeCode />}>
              <Slider
                getAriaLabel={() => 'Temperature range'}
                value={value2}
                onChange={handleChange2}
                valueLabelDisplay="auto"
                getAriaValueText={valuetext2}
              />
            </ChildCard>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default MuiSlider;


============================================================
FILE: src/views/forms/form-elements/MuiSwitch.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import ParentCard from 'src/components/shared/ParentCard';
import ChildCard from 'src/components/shared/ChildCard';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import CustomExSwitch from 'src/components/forms/form-elements/switch/Custom';
import DefaultSwitch from 'src/components/forms/form-elements/switch/Default';
import DefaultLabelSwitch from 'src/components/forms/form-elements/switch/DefaultLabel';
import SizesSwitch from 'src/components/forms/form-elements/switch/Sizes';
import ColorsSwitch from 'src/components/forms/form-elements/switch/Colors';
import PositionSwitch from 'src/components/forms/form-elements/switch/Position';

import CustomSwitchCode from 'src/components/forms/form-elements/switch/code/ColorsSwitchCode';
import DefaultSwitchCode from 'src/components/forms/form-elements/switch/code/DefaultSwitchCode';
import DefaultLabelSwitchCode from 'src/components/forms/form-elements/switch/code/DefaultLabelSwitchCode';
import SizesSwitchCode from 'src/components/forms/form-elements/switch/code/SizesSwitchCode';
import ColorsSwitchCode from 'src/components/forms/form-elements/switch/code/ColorsSwitchCode';
import PositionSwitchCode from 'src/components/forms/form-elements/switch/code/PositionSwitchCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Switch',
  },
];

const MuiSwitch = () => (
  <PageContainer title="Switch" description="this is Switch page">
    {/* breadcrumb */}
    <Breadcrumb title="Switch" items={BCrumb} />
    {/* end breadcrumb */}
    <ParentCard title="Switch">
      <Grid container spacing={3}>
        {/* ------------------------------------------------------------------- */}
        {/* Custom */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Custom" codeModel={<CustomSwitchCode />}>
            <CustomExSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default" codeModel={<DefaultSwitchCode />}>
            <DefaultSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default with label */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default with Label" codeModel={<DefaultLabelSwitchCode />}>
            <DefaultLabelSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Sizes */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Sizes" codeModel={<SizesSwitchCode />}>
            <SizesSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Default Colors */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Default Colors" codeModel={<ColorsSwitchCode />}>
            <ColorsSwitch />
          </ChildCard>
        </Grid>
        {/* ------------------------------------------------------------------- */}
        {/* Placement */}
        {/* ------------------------------------------------------------------- */}
        <Grid
          display="flex"
          alignItems="stretch"
          size={{
            xs: 12,
            lg: 6,
            sm: 6
          }}>
          <ChildCard title="Placement" codeModel={<PositionSwitchCode />}>
            <PositionSwitch />
          </ChildCard>
        </Grid>
      </Grid>
    </ParentCard>
  </PageContainer>
);
export default MuiSwitch;


============================================================
FILE: src/views/forms/from-tiptap/Tiptap.css
============================================================
.MuiTiptap-FieldContainer-root{
  min-height: 250px;
 }


============================================================
FILE: src/views/forms/from-tiptap/TiptapEdit.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { useEditor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import {
  MenuButtonBold,
  MenuButtonItalic,
  MenuControlsContainer,
  MenuDivider,
  MenuSelectHeading,
  RichTextEditorProvider,
  RichTextField,
  MenuButtonStrikethrough,
  MenuButtonOrderedList,
  MenuButtonBulletedList,
  MenuButtonBlockquote,
  MenuButtonCode,
  MenuButtonHorizontalRule,
  MenuButtonUndo,
  MenuButtonRedo,
  MenuButtonRemoveFormatting,
} from "mui-tiptap";
import './Tiptap.css';


const TiptapEdit = () => {

  const editor = useEditor({
    extensions: [StarterKit],
    content: "<p>Type here...</p>",
  });



  return (

    <RichTextEditorProvider editor={editor} >
      <RichTextField
        controls={
          <MenuControlsContainer>
            <MenuSelectHeading />
            <MenuDivider />
            <MenuButtonBold />
            <MenuButtonItalic />

            <MenuButtonStrikethrough />
            <MenuDivider />

            <MenuButtonOrderedList />
            <MenuButtonBulletedList />
            <MenuDivider />
            <MenuButtonBlockquote />
            <MenuButtonCode />
            <MenuButtonHorizontalRule />
            <MenuDivider />

            <MenuButtonUndo />
            <MenuButtonRedo />
            <MenuDivider />

            <MenuButtonRemoveFormatting />

          </MenuControlsContainer>
        }

      />
    </RichTextEditorProvider>

  );
};
export default TiptapEdit;


============================================================
FILE: src/views/forms/from-tiptap/TiptapEditor.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import TiptapEdit from './TiptapEdit';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Tiptap Editor',
  },
];

const TiptapEditor = () => {
  return (
    <PageContainer title="Tiptap Editor" description="this is Tiptap Editor page">
      {/* breadcrumb */}
      <Breadcrumb title="Tiptap Editor" items={BCrumb} />
      {/* end breadcrumb */}
      <ParentCard title="Tiptap Editor">
        <TiptapEdit />
      </ParentCard>
    </PageContainer>
  );
};

export default TiptapEditor;



============================================================
FILE: src/views/forms/FormCustom.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Grid2 as Grid,
  Box,
  Typography,
  FormControl,
  MenuItem,
  RadioGroup,
  FormControlLabel,
  Button,
  SliderValueLabelProps,
  Stack
} from '@mui/material';
import { SliderThumb } from '@mui/material/Slider';

import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';

import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';

import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomSelect from 'src/components/forms/theme-elements/CustomSelect';
import CustomSlider from 'src/components/forms/theme-elements/CustomSlider';
import CustomRangeSlider from 'src/components/forms/theme-elements/CustomRangeSlider';
import CustomSwitch from 'src/components/forms/theme-elements/CustomSwitch';
import CustomDisabledButton from 'src/components/forms/theme-elements/CustomDisabledButton';
import CustomOutlinedButton from 'src/components/forms/theme-elements/CustomOutlinedButton';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomRadio from 'src/components/forms/theme-elements/CustomRadio';
import ParentCard from 'src/components/shared/ParentCard';
import { IconVolume, IconVolume2 } from '@tabler/icons-react';

import FormCustomCode from 'src/components/forms/form-custom/code/FormCustomCode';

function CustomThumbComponent(props: SliderValueLabelProps) {
  const { children, ...other } = props;

  return (
    <SliderThumb {...other}>
      {children}
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
        }}
      />
      <Box
        sx={{
          height: '14px',
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
      <Box
        sx={{
          height: 9,
          width: '2px',
          backgroundColor: '#fff',
          ml: '2px',
        }}
      />
    </SliderThumb>
  );
}

const FormCustom = () => {
  const [age, setAge] = React.useState('1');
  const [select1, setSelect] = React.useState('1');
  const [select2, setSelect2] = React.useState('1');

  const handleChange = (event: any) => {
    setAge(event.target.value);
  };
  const handleChange4 = (event2: any) => {
    setSelect(event2.target.value);
  };

  const handleChange5 = (event3: any) => {
    setSelect2(event3.target.value);
  };

  const [value, setValue] = React.useState<any | null>(null);
  const [value2, setValue2] = React.useState<any | null>(null);

  const [value3, setValue3] = React.useState(30);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const handleChange6 = (event: any, newValue: any) => {
    setValue3(newValue);
  };

  return (
    (<PageContainer title="Custom Form" description="this is Custom Form page">
      {/* breadcrumb */}
      <Breadcrumb title="Custom Form" subtitle="custom designed element" />
      {/* end breadcrumb */}
      <ParentCard title="Custom Form" codeModel={<FormCustomCode />}>
        <Grid container spacing={3}>
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="name">Name</CustomFormLabel>
            <CustomTextField id="name" placeholder="Enter text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="demo-simple-select">Select Dropdown</CustomFormLabel>
            <CustomSelect
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              value={age}
              onChange={handleChange}
              fullWidth
            >
              <MenuItem value={1}>One</MenuItem>
              <MenuItem value={2}>Two</MenuItem>
              <MenuItem value={3}>Three</MenuItem>
            </CustomSelect>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 2 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="cname">Company Name</CustomFormLabel>
            <CustomTextField id="cname" placeholder="Enter text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="time">Time</CustomFormLabel>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <TimePicker
                value={value2}
                onChange={(newValue) => {
                  setValue2(newValue);
                }}
                slotProps={{
                  textField: {
                    fullWidth: true,

                    sx: {
                      '& .MuiSvgIcon-root': {
                        width: '18px',
                        height: '18px',
                      },
                      '& .MuiFormHelperText-root': {
                        display: 'none',
                      },
                    },
                  },
                }}
              />
            </LocalizationProvider>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 3 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel htmlFor="disabled">Industry Type</CustomFormLabel>
            <CustomTextField
              id="disabled"
              placeholder="Disabled filled"
              variant="outlined"
              fullWidth
              disabled
              sx={{
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: (theme: any) =>
                    `${theme.palette.mode === 'dark'
                      ? 'rgba(255, 255, 255, 0.12) !important'
                      : '#dee3e9 !important'
                    }`,
                },
              }}
            />
            <CustomFormLabel htmlFor="date">Date</CustomFormLabel>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DateTimePicker
                slotProps={{
                  textField: {
                    fullWidth: true,

                    sx: {
                      '& .MuiSvgIcon-root': {
                        width: '18px',
                        height: '18px',
                      },
                      '& .MuiFormHelperText-root': {
                        display: 'none',
                      },
                    },
                  },
                }}
                value={value}
                onChange={(newValue) => {
                  setValue(newValue);
                }}
              />
            </LocalizationProvider>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 4 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Lorem ipsum dolor sit amet</CustomFormLabel>
            <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
              <Grid container>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel value="radio1" control={<CustomRadio />} label="Male" />
                  </FormControl>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel value="radio2" control={<CustomRadio />} label="Female" />
                  </FormControl>
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControl component="fieldset">
                    <FormControlLabel
                      value="radio3"
                      control={<CustomRadio disabled />}
                      label="Disabled"
                    />
                  </FormControl>
                </Grid>
              </Grid>
            </RadioGroup>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 5 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Industry Type</CustomFormLabel>
            <RadioGroup aria-label="gender" defaultValue="radio1" name="radio-buttons-group">
              <Grid container>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel
                    control={<CustomCheckbox defaultChecked />}
                    label="Enter text"
                  />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel control={<CustomCheckbox />} label="Enter text" />
                </Grid>
                <Grid
                  size={{
                    xs: 12,
                    sm: 4,
                    lg: 4
                  }}>
                  <FormControlLabel
                    disabled
                    control={<CustomCheckbox disabled />}
                    label="Disabled"
                  />
                </Grid>
              </Grid>
            </RadioGroup>
          </Grid>
          {/* ----------------------------------- */}
          {/* column 6 */}
          {/* ----------------------------------- */}
          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 4
            }}>
            <CustomFormLabel>Slider</CustomFormLabel>
            <CustomRangeSlider
              slots={{ thumb: CustomThumbComponent }}
              getAriaLabel={(index) => (index === 0 ? 'Minimum price' : 'Maximum price')}
              defaultValue={[20, 40]}
            />
            <Grid container spacing={2} mt={1}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 6
                }}>
                <CustomSelect id="range1" value={select1} onChange={handleChange4} fullWidth>
                  <MenuItem value={1}>750</MenuItem>
                  <MenuItem value={2}>850</MenuItem>
                  <MenuItem value={3}>950</MenuItem>
                </CustomSelect>
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 6
                }}>
                <CustomSelect id="rang2" value={select2} onChange={handleChange5} fullWidth>
                  <MenuItem value={1}>950</MenuItem>
                  <MenuItem value={2}>1050</MenuItem>
                  <MenuItem value={3}>1150</MenuItem>
                </CustomSelect>
              </Grid>
            </Grid>
            <CustomFormLabel sx={{ mt: 3 }}>Volume</CustomFormLabel>
            <CustomSlider aria-label="Volume" value={value3} onChange={handleChange6} />
            <Box display="flex" alignItems="stretch">
              <Typography>
                <IconVolume2 width={20} />
              </Typography>
              <Box ml="auto">
                <Typography>
                  <IconVolume width={20} />
                </Typography>
              </Box>
            </Box>
          </Grid>

          {/* ----------------------------------- */}
          {/* column 7 */}
          {/* ----------------------------------- */}

          <Grid
            size={{
              xs: 12,
              sm: 12,
              lg: 12
            }}>
            <CustomFormLabel>Switch</CustomFormLabel>
            <Grid container spacing={0}>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel control={<CustomSwitch />} label="Enter text" />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel control={<CustomSwitch defaultChecked />} label="Enter text" />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel
                  control={
                    <CustomSwitch
                      disabled
                      sx={{
                        '& .MuiSwitch-switchBase.Mui-disabled+.MuiSwitch-track': {
                          opacity: 1,
                        },
                      }}
                    />
                  }
                  label="Disabled"
                />
              </Grid>
              <Grid
                size={{
                  xs: 12,
                  sm: 6,
                  lg: 3
                }}>
                <FormControlLabel
                  control={
                    <CustomSwitch
                      defaultChecked
                      disabled
                      sx={{
                        '& .MuiSwitch-switchBase.Mui-checked.Mui-disabled': {
                          opacity: 0.5,
                        },
                      }}
                    />
                  }
                  label="Disabled"
                />
              </Grid>
            </Grid>
            {/* button */}
            <Stack
              direction={{ xs: 'column', sm: 'row' }}
              spacing={2}
              justifyContent="space-between"
              mt={2}
            >
              <Stack spacing={1} direction="row">
                <Button variant="contained" color="primary">
                  Add New
                </Button>
                <CustomDisabledButton variant="contained" disabled>
                  Add New
                </CustomDisabledButton>
                <CustomOutlinedButton variant="outlined">Add New</CustomOutlinedButton>
              </Stack>
              <Stack direction="row" spacing={1}>
                <Button variant="contained" color="secondary">
                  Add New
                </Button>
                <Button variant="contained" color="success">
                  Add New
                </Button>
              </Stack>
            </Stack>
          </Grid>
        </Grid>
      </ParentCard>
    </PageContainer>)
  );
};

export default FormCustom;





============================================================
FILE: src/views/forms/FormHorizontal.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';

// components
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';
import BasicLayout from '../../components/forms/form-horizontal/BasicLayout';
import BasicIcons from '../../components/forms/form-horizontal/BasicIcons';
import FormSeparator from '../../components/forms/form-horizontal/FormSeparator';
import FormLabelAlignment from '../../components/forms/form-horizontal/FormLabelAlignment';
import CollapsibleForm from '../../components/forms/form-horizontal/CollapsibleForm';
import FormTabs from '../../components/forms/form-horizontal/FormTabs';

import BasicLayoutCode from 'src/components/forms/form-horizontal/code/BasicIconsCode';
import BasicIconsCode from 'src/components/forms/form-horizontal/code/BasicIconsCode';
import FormSeparatorCode from 'src/components/forms/form-horizontal/code/FormSeparatorCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Horizontal Form',
  },
];

const FormHorizontal = () => {
  return (
    (<PageContainer title="Horizontal Form" description="this is Horizontal Form">
      {/* breadcrumb */}
      <Breadcrumb title="Horizontal Form" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid size={12}>
          <ParentCard title="Basic Layout" codeModel={<BasicLayoutCode />}>
            <BasicLayout />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Basic with Icons" codeModel={<BasicIconsCode />}>
            <BasicIcons />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Form Separator" codeModel={<FormSeparatorCode />}>
            <FormSeparator />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Form Label Alignment">
            <FormLabelAlignment />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Collapsible Section</Typography>
          <CollapsibleForm />
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Form with Tabs</Typography>
          <FormTabs />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default FormHorizontal;


============================================================
FILE: src/views/forms/FormLayouts.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Grid from '@mui/material/Grid2';
import {
  FbOrdinaryForm,
  FbDefaultForm,
  FbBasicHeaderForm,
  FbReadonlyForm,
  FbDisabledForm,
  FbLeftIconForm,
  FbRightIconForm,
  FbInputVariants,
} from 'src/components/forms/form-layouts/index';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Form Layouts',
  },
];

const FormLayouts = () => (
  <PageContainer title="Form Layouts" description="this is innerpage">
    {/* breadcrumb */}
    <Breadcrumb title="Form Layouts" items={BCrumb} />
    {/* end breadcrumb */}

    <Grid container spacing={3}>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbOrdinaryForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbInputVariants />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbDefaultForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbBasicHeaderForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbReadonlyForm />
      </Grid>
      <Grid
        size={{
          lg: 12,
          md: 12,
          xs: 12
        }}>
        <FbDisabledForm />
      </Grid>
      <Grid
        size={{
          lg: 6,
          md: 12,
          xs: 12
        }}>
        <FbLeftIconForm />
      </Grid>
      <Grid
        size={{
          lg: 6,
          md: 12,
          xs: 12
        }}>
        <FbRightIconForm />
      </Grid>
    </Grid>
  </PageContainer>
);

export default FormLayouts;


============================================================
FILE: src/views/forms/FormValidation.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
    CardContent,
    Grid2 as Grid
} from '@mui/material';

// common components
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import ChildCard from 'src/components/shared/ChildCard';
import BlankCard from 'src/components/shared/BlankCard';
import Logo from "src/layouts/full/shared/logo/Logo";

// custom components
import FVLogin from 'src/components/forms/form-validation/FVLogin';
import FVRegister from 'src/components/forms/form-validation/FVRegister';
import FVOnLeave from 'src/components/forms/form-validation/FVOnLeave';
import FVRadio from 'src/components/forms/form-validation/FVRadio';
import FVCheckbox from 'src/components/forms/form-validation/FVCheckbox';
import FVSelect from 'src/components/forms/form-validation/FVSelect';

import OnLeaveCode from "src/components/forms/form-validation/code/OnLeaveCode";
import SelectCode from "src/components/forms/form-validation/code/SelectCode";
import RadioCode from "src/components/forms/form-validation/code/RadioCode";
import CheckboxCode from "src/components/forms/form-validation/code/CheckboxCode";

const BCrumb = [
    {
        to: '/',
        title: 'Home',
    },
    {
        title: 'Form Validation',
    },
];

const FormValidation = () => {
    return (
        (<PageContainer title="Form Validation" description="this is Form Validation page">
            <Breadcrumb title="Form Validation" items={BCrumb} />
            <Grid container spacing={3}>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <BlankCard>
                        <CardContent sx={{ pt: 0 }}>
                            <Logo />
                            <FVRegister />
                        </CardContent>
                    </BlankCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <BlankCard>
                        <CardContent sx={{ pt: 0 }}>
                            <Logo />
                            <FVLogin />
                        </CardContent>
                    </BlankCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="On Leave" codeModel={<OnLeaveCode />}>
                        <FVOnLeave />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Select" codeModel={<SelectCode />}>
                        <FVSelect />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Radio" codeModel={<RadioCode />}>
                        <FVRadio />
                    </ChildCard>
                </Grid>
                <Grid
                    size={{
                        xs: 12,
                        sm: 6
                    }}>
                    <ChildCard title="Checkboxes" codeModel={<CheckboxCode />}>
                        <FVCheckbox />
                    </ChildCard>
                </Grid>
            </Grid>
        </PageContainer>)
    );
};

export default FormValidation;


============================================================
FILE: src/views/forms/FormVertical.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography } from '@mui/material';

// components
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import ParentCard from 'src/components/shared/ParentCard';


import BasicLayout from '../../components/forms/form-vertical/BasicLayout';

import BasicIcons from '../../components/forms/form-vertical/BasicIcons';
import FormSeparator from '../../components/forms/form-vertical/FormSeparator';
import CollapsibleForm from '../../components/forms/form-vertical/CollapsibleForm';
import FormTabs from '../../components/forms/form-vertical/FormTabs';

import BasicLayoutCode from 'src/components/forms/form-vertical/code/BasicLayoutCode';
import BasicIconsCode from 'src/components/forms/form-vertical/code/BasicIconsCode';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Vertical Form',
  },
];

const FormVertical = () => {
  return (
    (<PageContainer title="Vertical Form" description="this is Vertical Form page">
      {/* breadcrumb */}
      <Breadcrumb title="Vertical Form" items={BCrumb} />
      {/* end breadcrumb */}
      <Grid container spacing={3}>
        <Grid
          size={{
            xs: 12,
            lg: 6
          }}>
          <ParentCard title="Basic Layout" codeModel={<BasicLayoutCode />}>
            <BasicLayout />
          </ParentCard>
        </Grid>
        <Grid
          size={{
            xs: 12,
            lg: 6
          }}>
          <ParentCard title="Basic with Icons" codeModel={<BasicIconsCode />}>
            <BasicIcons />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <ParentCard title="Multi Column with Form Separator">
            <FormSeparator />
          </ParentCard>
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Collapsible Section</Typography>
          <CollapsibleForm />
        </Grid>
        <Grid size={12}>
          <Typography variant="h5" mb={3}>Form with Tabs</Typography>
          <FormTabs />
        </Grid>
      </Grid>
    </PageContainer>)
  );
};

export default FormVertical;


============================================================
FILE: src/views/forms/FormWizard.tsx
============================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  FormControlLabel
  Stack
} from '@mui/material';
import PageContainer from 'src/components/container/PageContainer';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import FormWizardCode from 'src/components/forms/form-wizard/code/FormWizardCode';
import CustomTextField from 'src/components/forms/theme-elements/CustomTextField';
import CustomCheckbox from 'src/components/forms/theme-elements/CustomCheckbox';
import CustomFormLabel from 'src/components/forms/theme-elements/CustomFormLabel';
import ParentCard from 'src/components/shared/ParentCard';

const steps = ['Account', 'Profile', 'Finish'];

const FormWizard = () => {
  const [activeStep, setActiveStep] = React.useState(0);
  const [skipped, setSkipped] = React.useState(new Set());

  const isStepOptional = (step:any) => step === 1;

  const isStepSkipped = (step:any) => skipped.has(step);

  const handleNext = () => {
    let newSkipped = skipped;
    if (isStepSkipped(activeStep)) {
      newSkipped = new Set(newSkipped.values());
      newSkipped.delete(activeStep);
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped(newSkipped);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this,
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.");
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values());
      newSkipped.add(activeStep);

      return newSkipped;
    });
  };

  // eslint-disable-next-line consistent-return
  const handleSteps = (step: any) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <CustomFormLabel htmlFor="Name">Name</CustomFormLabel>
            <CustomTextField id="Name" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Email">Email</CustomFormLabel>
            <CustomTextField id="Email" type="email" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Password">Password</CustomFormLabel>
            <CustomTextField id="Password" type="password" variant="outlined" fullWidth />
          </Box>
        );
      case 1:
        return (
          <Box>
            <CustomFormLabel htmlFor="Fname">First Name</CustomFormLabel>
            <CustomTextField id="Fname" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Lname">Last Name</CustomFormLabel>
            <CustomTextField id="Lname" type="text" variant="outlined" fullWidth />
            <CustomFormLabel htmlFor="Address">Address</CustomFormLabel>
            <CustomTextField id="Address" multiline rows={4} variant="outlined" fullWidth />
          </Box>
        );
      case 2:
        return (
          <Box pt={3}>
            <Typography variant="h5">Terms and condition</Typography>
            <Typography variant="body2" sx={{ mt: 1 }}>
              Sard about this site or you have been to it, but you cannot figure out what it is or
              what it can do. MTA web directory isSard about this site or you have been to it, but
              you cannot figure out what it is or what it can do. MTA web directory is
            </Typography>
            <FormControlLabel
              control={<CustomCheckbox defaultChecked />}
              label="Agree with terms?"
            />
          </Box>
        );
      default:
        break;
    }
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  return (
    <PageContainer>
      <Breadcrumb title="Form Wizard" subtitle="this is Form Wizard page" />
      <ParentCard title="Form Wizard" codeModel={<FormWizardCode />}>
        <Box width="100%">
          <Stepper activeStep={activeStep}>
            {steps.map((label, index) => {
              const stepProps: { completed?: boolean } = {};
              const labelProps: {
                optional?: React.ReactNode;
              } = {};
              if (isStepOptional(index)) {
                labelProps.optional = <Typography variant="caption">Optional</Typography>;
              }
              if (isStepSkipped(index)) {
                stepProps.completed = false;
              }

              return (
                <Step key={label} {...stepProps}>
                  <StepLabel {...labelProps}>{label}</StepLabel>
                </Step>
              );
            })}
          </Stepper>
          {activeStep === steps.length ? (
            <>
              <Stack spacing={2} mt={3}>
                <severity="success">
                  All steps completed - you&apos;re finished
                </>

                <Box textAlign="right">
                  <Button onClick={handleReset} variant="contained" color="error">
                    Reset
                  </Button>
                </Box>
              </Stack>
            </>
          ) : (
            <>
              <Box>{handleSteps(activeStep)}</Box>

              <Box display="flex" flexDirection="row" mt={3}>
                <Button
                  color="inherit"
                  variant="contained"
                  disabled={activeStep === 0}
                  onClick={handleBack}
                  sx={{ mr: 1 }}
                >
                  Back
                </Button>
                <Box flex="1 1 auto" />
                {isStepOptional(activeStep) && (
                  <Button color="inherit" onClick={handleSkip} sx={{ mr: 1 }}>
                    Skip
                  </Button>
                )}

                <Button
                  onClick={handleNext}
                  variant="contained"
                  color={activeStep === steps.length - 1 ? 'success' : 'secondary'}
                >
                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
                </Button>
              </Box>
            </>
          )}
        </Box>
      </ParentCard>
    </PageContainer>
  );
};

export default FormWizard;


============================================================
FILE: src/views/spinner/Spinner.tsx
============================================================
import { FC } from "react";
// import "./spinner.css";

const Spinner: FC = () => (
  <div className="fallback-spinner">
    <div className="loading component-loader">
      <div className="effect-1 effects" />
      <div className="effect-2 effects" />
      <div className="effect-3 effects" />
    </div>
  </div>
);
export default Spinner;


============================================================
FILE: src/App.css
============================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


============================================================
FILE: src/App.tsx
============================================================
// File: src/App.tsx
import { CssBaseline, ThemeProvider } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { ThemeSettings } from './theme/Theme';
import RTL from './layouts/full/shared/customizer/RTL';
import { RouterProvider } from 'react-router';
import router from './routes/Router';
import { AppState } from './store/Store';
import { useEffect, useRef } from 'react';
import { useDispatch } from 'src/store/Store';
import { setLanguage, setDir } from './store/customizer/CustomizerSlice';
import { useTranslation } from 'react-i18next';
import Cookies from 'js-cookie';
import { AuthProvider } from './contexts/AuthContext';
import { ErrorProvider } from './contexts/ErrorContext';
import GlobalPrintHandler from './components/GlobalPrintHandler';

function App() {
  const theme = ThemeSettings();
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();
  const { i18n } = useTranslation();
  const isInitialized = useRef(false);

  const thermalPrinterConfig = {
    enabled: localStorage.getItem('thermal_printer_enabled') === 'true',
    type: (localStorage.getItem('thermal_printer_type') as 'usb' | 'network') || 'usb',
    networkConfig: {
      ip: localStorage.getItem('thermal_printer_ip') || '192.168.1.100',
      port: Number(localStorage.getItem('thermal_printer_port')) || 9100
    }
  };

  useEffect(() => {
    if (isInitialized.current) return;
    
    const savedLanguage = Cookies.get('language');
    const savedDirection = Cookies.get('direction');
    
    if (savedLanguage && savedLanguage.trim() !== '') {
      dispatch(setLanguage(savedLanguage));
      i18n.changeLanguage(savedLanguage);
      document.documentElement.lang = savedLanguage;
    } else {
      const defaultLang = 'en';
      dispatch(setLanguage(defaultLang));
      i18n.changeLanguage(defaultLang);
      document.documentElement.lang = defaultLang;
      Cookies.set('language', defaultLang, { expires: 365 });
    }
    
    if (savedDirection && savedDirection.trim() !== '') {
      dispatch(setDir(savedDirection));
      document.documentElement.dir = savedDirection;
    } else {
      const defaultDir = 'ltr';
      dispatch(setDir(defaultDir));
      document.documentElement.dir = defaultDir;
      Cookies.set('direction', defaultDir, { expires: 365 });
    }
    
    isInitialized.current = true;
  }, []);

  const themeWithDirection = {
    ...theme,
    direction: customizer.activeDir,
  };

  return (
    <ThemeProvider theme={themeWithDirection}>
      <RTL>
        <CssBaseline />
        <ErrorProvider>
          <AuthProvider>
            <GlobalPrintHandler thermalPrinterConfig={thermalPrinterConfig}>
              <RouterProvider router={router} />
            </GlobalPrintHandler>
          </AuthProvider>
        </ErrorProvider>
      </RTL>
    </ThemeProvider>
  );
}

export default App;


============================================================
FILE: src/index.css
============================================================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}



/* ===== Print Styles ===== */
@media print {
  /* إخفاء العناصر غير المرغوب فيها */
  .no-print,
  header,
  nav,
  .sidebar,
  .toolbar,
  .actions,
  button,
  .MuiButton-root,
  .MuiIconButton-root,
  .MuiAppBar-root,
  .MuiDrawer-root,
  .MuiFab-root {
    display: none !important;
  }
  
  /* إظهار العناصر المخصصة للطباعة */
  .print-only {
    display: block !important;
  }
  
  /* تحسين عرض الجداول */
  .MuiDataGrid-root {
    box-shadow: none !important;
    border: 1px solid #ddd !important;
  }
  
  .MuiDataGrid-cell {
    border-right: 1px solid #ddd !important;
  }
  
  .MuiDataGrid-columnHeaders {
    background-color: #f5f5f5 !important;
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
  }
  
  /* تحسين عرض الكاردز */
  .MuiCard-root {
    box-shadow: none !important;
    border: 1px solid #ddd !important;
    margin-bottom: 10px !important;
  }
  
  /* تحسين النصوص */
  body {
    font-size: 12pt !important;
    line-height: 1.4 !important;
    color: black !important;
    background: white !important;
  }
  
  h1, h2, h3, h4, h5, h6 {
    color: black !important;
    page-break-after: avoid !important;
  }
  
  /* منع تقسيم العناصر */
  .MuiTableRow-root,
  .MuiCard-root,
  .print-keep-together {
    page-break-inside: avoid !important;
  }
  
  /* إعدادات الصفحة */
  @page {
    margin: 1cm;
    size: A4;
  }
  
  /* تحسين المساحات */
  .MuiContainer-root {
    max-width: none !important;
    padding: 0 !important;
    margin: 0 !important;
  }
}

/* ===== Thermal Print Preparation ===== */
.thermal-print-ready {
  font-family: 'Courier New', monospace !important;
  font-size: 12px !important;
  line-height: 1.2 !important;
  max-width: 300px !important;
}


/* منع double scrollbar */
.MuiDialog-paper {
  overflow-y: auto !important;
}

.MuiDialogContent-root {
  overflow-y: visible !important;
  overflow-x: hidden !important;
}

/* إخفاء scrollbar مع الاحتفاظ بالوظيفة */
.MuiDialog-paper::-webkit-scrollbar {
  width: 8px;
}

.MuiDialog-paper::-webkit-scrollbar-track {
  background: transparent;
}

.MuiDialog-paper::-webkit-scrollbar-thumb {
  background: rgba(0,0,0,0.2);
  border-radius: 4px;
}

.MuiDialog-paper::-webkit-scrollbar-thumb:hover {
  background: rgba(0,0,0,0.3);
}

/* للموبايل */
@media (max-width: 768px) {
  .MuiDialog-paper {
    margin: 0 !important;
    max-height: 100vh !important;
    height: 100vh !important;
    border-radius: 0 !important;
  }
}

============================================================
FILE: src/LoadingBar.tsx
============================================================
import { useState, useEffect } from 'react';
import TopLoadingBar from 'react-top-loading-bar';
import { useLocation } from 'react-router';


function LoadingBar() {
    const [progress, setProgress] = useState(0);
    const location = useLocation(); // page navigation.

    const startLoading = () => {
        setProgress(10); // Start loading
    };

    const finishLoading = () => {
        setProgress(100); // Complete loading
        setTimeout(() => setProgress(0), 10); // Reset progress after completion
    };

    // Trigger loading when route changes
    useEffect(() => {
        startLoading();
        setTimeout(() => {
            finishLoading(); // Complete the loader after 2 seconds (or after data load)
        }, 2000); // 2-second delay 
    }, [location]); // trigger whenever the route changes

    return (
        <TopLoadingBar
            color="#5D87FF"
            height={3}
            progress={progress}
        />
    );
}

export default LoadingBar;





============================================================
FILE: src/main.tsx
============================================================
// File: src/main.tsx
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';
import { Provider } from 'react-redux';
import ReactDOM from 'react-dom/client';
import App from './App';
import { store } from './store/Store';
import Spinner from './views/spinner/Spinner';
import ErrorBoundary from './components/ErrorBoundary';
import './utils/i18n';
import './_mockApis';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <ErrorBoundary>
    <Provider store={store}>
      <Suspense fallback={<Spinner />}>
        <App />
      </Suspense>
    </Provider>
  </ErrorBoundary>
);


============================================================
FILE: .firebaserc
============================================================
{
  "projects": {
    "default": "point-of-sale-9e576"
  }
}


============================================================
FILE: export-src-to-txt.js
============================================================
// export-src-to-txt.js
// Collects every file inside src/Pages/pos/newSales/ and writes them (with paths) to src-files.txt

import { promises as fs } from 'fs';
import path from 'path';

const PROJECT_ROOT = process.cwd();     // where you launched the script
const SRC_DIR      = path.join(PROJECT_ROOT, 'src', 'Pages', 'pos', 'newSales');
const OUT_FILE     = path.join(PROJECT_ROOT, 'src-files.txt');

async function getAllFiles(dir) {
  const dirents = await fs.readdir(dir, { withFileTypes: true });
  const files   = await Promise.all(
    dirents.map((d) => {
      const res = path.join(dir, d.name);
      return d.isDirectory() ? getAllFiles(res) : res;
    })
  );
  return files.flat();
}

async function main() {
  console.time('⏱  Done in');

  const files = await getAllFiles(SRC_DIR);
  const outParts = [];

  for (const file of files) {
    const relPath = path.relative(PROJECT_ROOT, file).replace(/\\/g, '/');
    const content = await fs.readFile(file, 'utf8');

    outParts.push(`\n===== ${relPath} =====\n`);
    outParts.push(content);
  }

  await fs.writeFile(OUT_FILE, outParts.join(''), 'utf8');
  console.log(`✅  Wrote ${files.length} files into ${path.basename(OUT_FILE)}`);
  console.timeEnd('⏱  Done in');
}

main().catch((err) => {
  console.error('❌  Error:', err);
  process.exit(1);
});


============================================================
FILE: export-src-to-txt2.js
============================================================
// export-src-to-txt.js
// Collects every file inside src/ and writes them (with paths) to src-files.txt

import { promises as fs } from 'fs';
import path from 'path';

const PROJECT_ROOT = process.cwd();     // where you launched the script
const SRC_DIR      = path.join(PROJECT_ROOT, 'src');
const OUT_FILE     = path.join(PROJECT_ROOT, 'src-files.txt');

async function getAllFiles(dir) {
  const dirents = await fs.readdir(dir, { withFileTypes: true });
  const files   = await Promise.all(
    dirents.map((d) => {
      const res = path.join(dir, d.name);
      return d.isDirectory() ? getAllFiles(res) : res;
    })
  );
  return files.flat();
}

async function main() {
  console.time('⏱  Done in');

  const files = await getAllFiles(SRC_DIR);
  const outParts = [];

  for (const file of files) {
    const relPath = path.relative(PROJECT_ROOT, file).replace(/\\/g, '/');
    const content = await fs.readFile(file, 'utf8');

    outParts.push(`\n===== ${relPath} =====\n`);
    outParts.push(content);
  }

  await fs.writeFile(OUT_FILE, outParts.join(''), 'utf8');
  console.log(`✅  Wrote ${files.length} files into ${path.basename(OUT_FILE)}`);
  console.timeEnd('⏱  Done in');
}

main().catch((err) => {
  console.error('❌  Error:', err);
  process.exit(1);
});


============================================================
FILE: firebase.json
============================================================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "/static/**",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "**/*.@(js|css)",
        "headers": [
          {
            "key": "Cache-Control", 
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "/",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=0, must-revalidate"
          }
        ]
      }
    ]
  }
}


============================================================
FILE: package.json
============================================================
{
  "name": "main-vite-ts",
  "private": true,
  "version": "5.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --mode development",
    "build": "vite build --mode production",
    "build-dev": "vite build --mode development",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
  },
  "dependencies": {
    "@casl/ability": "^6.3.3",
    "@casl/react": "^3.1.0",
    "@dhiwise/component-tagger": "^1.0.10",
    "@dnd-kit/core": "^6.1.0",
    "@dnd-kit/sortable": "^8.0.0",
    "@dnd-kit/utilities": "^3.2.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/react": "^11.14.0",
    "@emotion/server": "^11.11.0",
    "@emotion/styled": "^11.14.1",
    "@faker-js/faker": "^9.8.0",
    "@hello-pangea/dnd": "^17.0.0",
    "@hookform/resolvers": "^5.0.1",
    "@mui/icons-material": "^5.18.0",
    "@mui/lab": "6.0.0-beta.10",
    "@mui/material": "^6.5.0",
    "@mui/system": "^6.1.10",
    "@mui/x-charts": "7.23.1",
    "@mui/x-data-grid": "^8.8.0",
    "@mui/x-date-pickers": "7.18.0",
    "@mui/x-internals": "^8.5.3",
    "@mui/x-license": "^8.5.3",
    "@mui/x-tree-view": "^8.5.3",
    "@mui/x-tree-view-pro": "^8.5.3",
    "@reduxjs/toolkit": "2.2.3",
    "@svgr/rollup": "8.1.0",
    "@tabler/icons-react": "^2.39.0",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/typography": "^0.5.16",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-table": "^8.20.1",
    "@tiptap/core": "^2.9.1",
    "@tiptap/extension-image": "^2.9.1",
    "@tiptap/extension-table": "^2.9.1",
    "@tiptap/react": "^2.9.1",
    "@tiptap/starter-kit": "^2.9.1",
    "apexcharts": "3.48.0",
    "arabic-reshaper": "^1.1.0",
    "axios": "^1.7.7",
    "axios-mock-adapter": "2.0.0",
    "bidi-js": "^1.0.3",
    "chance": "^1.1.11",
    "codetxt": "^1.0.1",
    "date-fns": "^2.30.0",
    "dayjs": "^1.11.13",
    "emoji-picker-react": "^4.12.0",
    "firebase": "^11.8.1",
    "formik": "^2.4.5",
    "formik-mui": "^5.0.0-alpha.0",
    "framer-motion": "^10.16.4",
    "fslightbox-react": "^1.7.6",
    "gray-matter": "^4.0.3",
    "html2canvas": "^1.4.1",
    "http": "^0.0.1-security",
    "https": "^1.0.0",
    "i18next": "^23.5.1",
    "i18next-browser-languagedetector": "^8.2.0",
    "js-cookie": "^3.0.5",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "lodash": "^4.17.21",
    "moment": "^2.29.4",
    "mui-tiptap": "^1.13.0",
    "prop-types": "^15.7.2",
    "qs": "^6.14.0",
    "react": "19.0.0-rc-02c0e824-20241028",
    "react-apexcharts": "^1.4.1",
    "react-big-calendar": "1.11.3",
    "react-dom": "19.0.0-rc-02c0e824-20241028",
    "react-dropzone": "^14.2.3",
    "react-helmet": "^6.1.0",
    "react-hook-form": "^7.56.4",
    "react-i18next": "^13.2.2",
    "react-intersection-observer": "^9.5.2",
    "react-qr-barcode-scanner": "^2.1.5",
    "react-redux": "9.1.2",
    "react-router": "^7.0.2",
    "react-router-dom": "^7.6.1",
    "react-slick": "^0.29.0",
    "react-smooth-dnd": "^0.11.1",
    "react-spring": "^9.7.3",
    "react-syntax-highlighter": "^15.5.0",
    "react-to-print": "^3.1.0",
    "react-toastify": "^11.0.5",
    "react-top-loading-bar": "^2.3.1",
    "recharts": "^2.15.2",
    "redux": "^5.0.1",
    "redux-persist": "^6.0.0",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "sharp": "^0.32.6",
    "simplebar": "^6.2.7",
    "simplebar-react": "^3.2.4",
    "slick-carousel": "^1.8.1",
    "stylis-plugin-rtl": "^2.1.1",
    "tailwindcss": "^4.1.11",
    "uuid": "^11.1.0",
    "xlsx": "^0.18.5",
    "yarn": "^1.22.22",
    "yup": "^0.32.11"
  },
  "devDependencies": {
    "@types/chance": "^1.1.6",
    "@types/fslightbox-react": "^1.7.8",
    "@types/js-cookie": "^3.0.6",
    "@types/node": "22.10.1",
    "@types/qs": "^6.14.0",
    "@types/react": "19.0.1",
    "@types/react-big-calendar": "^1.15.0",
    "@types/react-dnd": "^2.0.36",
    "@types/react-dom": "19.0.1",
    "@types/react-helmet": "^6.1.11",
    "@types/react-slick": "^0.23.13",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@typescript-eslint/eslint-plugin": "^8.36.0",
    "@typescript-eslint/parser": "^8.36.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "10.4.2",
    "eslint": "latest",
    "eslint-config-next": "latest",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.15.0",
    "postcss": "8.4.8",
    "prettier": "^3.5.3",
    "tailwindcss": "3.4.6",
    "typescript": "5.7.2",
    "vite": "6.0.3"
  }
}


============================================================
FILE: postcss.config.js
============================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}

============================================================
FILE: README.md
============================================================
# POS React Admin Dashboard – Project Overview

## 1. Purpose

A Point‑of‑Sale (POS) admin dashboard built with **React 19, Vite, TypeScript** and **Material‑UI v6**.  It ships with a modern component library, state‑management via **Redux‑Toolkit**, and is pre‑wired for deployment on **Firebase Hosting**.

---

## 2. Tech Stack

| Layer             | Library / Tool                   | Notes                                   |
| ----------------- | -------------------------------- | --------------------------------------- |
| **Frontend**      | React 19 (RC) + Vite 6           | Hot‑module reload, fast build           |
| Styling           | Material‑UI v6 + Emotion         | RTL support via `stylis-plugin-rtl`     |
| State Management  | Redux‑Toolkit 2 + React‑Redux 9  | Persisted with `redux‑persist`          |
| Forms             | Formik + Yup                     | Re‑usable form controls                 |
| Charts            | ApexCharts + MUI X Charts        | KPI & sales analytics                   |
| Drag & Drop       | `@dnd-kit` + `@hello-pangea/dnd` | Re‑orderable lists and Kanban           |
| Rich Text         | Tiptap Editor                    | Product descriptions, notes             |
| Auth & Deployment | Firebase v11                     | `.firebaserc`, `firebase.json` present  |
| i18n              | i18next + react‑i18next          | EN / AR translations                    |
| Testing           | — (not yet configured)           | Jest/React‑Testing‑Library can be added |

---

## 3. Package.json Scripts

```json
"dev":    "vite",
"build":  "tsc && vite build",
"preview":"vite preview",
"lint":   "eslint --ext ts,tsx ..."
```

> **Node 20+ required** – earlier warnings appear if Node 18 is used.

---

## 4. Directory Structure (high‑level)

```
src/
 ├─ App.tsx              # ThemeProvider + Router wrapper
 ├─ main.tsx             # ReactDOM createRoot
 ├─ assets/              # Static images & SVGs
 ├─ theme/               # MUI palette & shape overrides
 ├─ layouts/             # Full/Blank layouts, AppBar, Sidebar
 ├─ components/          # Reusable UI widgets (Buttons, Cards, LoadingBar)
 ├─ pages/
 │   ├─ dashboard/       # Sales, Inventory, Analytics widgets
 │   ├─ products/        # CRUD tables & dialogs
 │   └─ auth/            # Login / Register
 ├─ routes/Router.tsx    # `react-router v7` nested routes
 ├─ store/               # Redux slices & root store
 ├─ hooks/               # Custom React hooks (auth, media‑query)
 ├─ utils/               # helpers: axios instance, formatters, guards
 └─ types/               # Global TS types & interfaces
```

*(Tree based on repository inspection; we can drill into any path you need.)*

---

## 5. State Management

* Global store in `src/store/Store.ts`
* Feature slices (e.g., `productSlice`, `authSlice`)
* Persistence layer configured to `localStorage` via `redux‑persist`.

---

## 6. Theming & RTL

`ThemeSettings()` centralises palette, typography and component overrides, auto‑switching RTL when the `customizer.direction` flag toggles.

---

## 7. Routing Guards

Route file exports a lazy‑loaded tree.  A simple **AuthGuard** wrapper redirects unauthenticated users to `/auth/login`.

---

## 8. Firebase Hosting

`firebase.json` defines two rewrites:

```json
{"source":"/**","destination":"/index.html"}
```

Run `firebase deploy` after `yarn build` to push the `dist/` folder.

---

## 9. Outstanding Items / Potential Enhancements

1. **Backend API integration** – axios base URL currently points to a mock adapter.
2. **Unit tests** – Jest & RTL not yet configured.
3. **CI/CD** – GitHub Actions workflow missing.
4. **PWA** – Optional (service worker, manifest).

---

## 10. Next Steps Together

1. **Clarify Scope** – Which module do you want to tackle first (e.g., Products CRUD, Sales report, Auth flow)?
2. **Environment Check** – Confirm Node version ≥ 20 and Firebase CLI configured.
3. **Road‑map** – Define sprint tasks; I can generate issue templates and starter PRs.

Let me know which area you’d like to dive into, and I’ll prepare concrete tasks or code samples.


============================================================
FILE: src-files.txt
============================================================

===== src/Pages/pos/newSales/components/ActionButtons.tsx =====
// src/Pages/pos/newSales/components/ActionButtons.tsx
import React from 'react';

interface ActionButtonsProps {
  selectedChips: string[];
  onChipClick: (chipType: string) => void;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  onExtraClick: () => void;
  onWithoutClick: () => void;
  searchQuery: string;
  onSearchChange: (query: string) => void;
    hasSelectedOrderItem: boolean; // إضافة جديدة

}

const ActionButtons: React.FC<ActionButtonsProps> = ({
  selectedChips,
  onChipClick,
  isExtraMode,
  isWithoutMode,
  onExtraClick,
  onWithoutClick,
  searchQuery,
  onSearchChange,
  hasSelectedOrderItem

}) => {
  return (
    <div className="action-buttons-bar">
      <div className="action-chips">
        <button 
          className={`action-chip extra ${selectedChips.includes('extra') || isExtraMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onExtraClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_addcircle.svg" alt="" />
          <span>Extra</span>
        </button>
        <button 
          className={`action-chip without ${selectedChips.includes('without') || isWithoutMode ? 'active' : ''} ${!hasSelectedOrderItem ? 'disabled' : ''}`}
          onClick={hasSelectedOrderItem ? onWithoutClick : undefined}
          disabled={!hasSelectedOrderItem}
          title={!hasSelectedOrderItem ? 'يجب اختيار منتج من الفاتورة أولاً' : ''}
        >
          <img src="/images/img_removecircle.svg" alt="" />
          <span>Without</span>
        </button>
        <button 
          className={`action-chip offer ${selectedChips.includes('offer') ? 'active' : ''}`}
          onClick={() => onChipClick('offer')}
        >
          <img src="/images/img_tags.svg" alt="" />
          <span>Offer</span>
        </button>
      </div>
      
      <div className="search-container">
        <img src="/images/img_search01.svg" alt="search" className="search-icon" />
        <input
          type="text"
          placeholder="Search"
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          className="search-input"
        />
        <button className="filter-button">
          <img src="/images/img_group_7.svg" alt="Filter" />
        </button>
      </div>
    </div>
  );
};

export default ActionButtons;

===== src/Pages/pos/newSales/components/common/Header.tsx =====
// src/Pages/pos/newSales/components/Header.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import { DeliveryCompany } from '../../../../../utils/api/pagesApi/deliveryCompaniesApi';
import '../../styles/Header.css';

interface HeaderProps {
  selectedOrderType: string;
  onOrderTypeChange: (type: string) => void;
  onResetOrder?: () => void;
  onTableClick?: () => void;
  tableDisplayName?: string;
  deliveryCompanies?: DeliveryCompany[];
  selectedDeliveryCompany?: DeliveryCompany | null;
  onDeliveryCompanySelect?: (company: DeliveryCompany) => void;
  selectedCustomer?: Customer | null;
  selectedAddress?: CustomerAddress | null;
}

const Header: React.FC<HeaderProps> = ({ 
  selectedOrderType, 
  onOrderTypeChange, 
  onResetOrder,
  onTableClick,
  tableDisplayName = 'Table',
  deliveryCompanies = [],
  selectedDeliveryCompany,
  onDeliveryCompanySelect,
  selectedCustomer,
  selectedAddress
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const orderTypes = [
    { id: 1, name: 'Takeaway', displayName: 'Takeaway', icon: '/images/takeaway.png', color: '#28a745', description: 'عميل يأخذ الطلب' },
    { id: 2, name: 'Dine-in', displayName: 'Dine-in', icon: '/images/dine-in.png', color: '#007bff', description: 'تناول في المطعم' },
    { id: 3, name: 'Delivery', displayName: 'Delivery', icon: '/images/delivery.png', color: '#dc3545', description: 'توصيل للمنزل' },
    { id: 4, name: 'Pickup', displayName: 'Pickup', icon: '/images/pickup.png', color: '#ffc107', description: 'استلام من المطعم' }
  ];

  const handleDeliveryCompanySelect = (company: DeliveryCompany) => {
    if (onDeliveryCompanySelect) {
      onDeliveryCompanySelect(company);
    }
    setIsDropdownOpen(false);
  };

  const activeDeliveryCompanies = deliveryCompanies.filter(company => company.isActive);

  return (
    <header className="pos-header">
      <div className="header-content">
        <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify Logo" className="header-logo" />
        
        {/* Customer Info Section */}
        {selectedCustomer && (
          <div className="customer-info-section">
            <div className="customer-info-card">
              <div className="customer-basic-info">
                <div className="customer-name">
                  <span className="customer-icon">👤</span>
                  <span>{selectedCustomer.name}</span>
                  {selectedCustomer.isVIP && <span className="vip-badge">VIP</span>}
                </div>
                <div className="customer-phone">
                  <span className="phone-icon">📞</span>
                  <span>{selectedCustomer.phone1}</span>
                </div>
              </div>
              
              {selectedAddress && selectedAddress.addressLine && (
                <div className="customer-address">
                  <span className="address-icon">📍</span>
                  <span className="address-text">
                    {selectedAddress.addressLine}
                    {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
                  </span>
                </div>
              )}
            </div>
          </div>
        )}
        
        <nav className="header-nav">
          <a href="#" className="nav-item active">
            <img src="/images/img_sending_order.svg" alt="" />
            <span>Today Orders</span>
          </a>
          
          <a href="#" className="nav-item" onClick={(e) => { e.preventDefault(); if (onTableClick) onTableClick(); }}>
            <img src="/images/img_table_02.svg" alt="" />
            <span>{tableDisplayName}</span>
          </a>
          
          <a href="#" className="nav-item">
            <img src="/images/img_discount_tag_01.svg" alt="" />
            <span>Discount</span>
          </a>
          
          <a href="#" className="nav-item">
            <img src="/images/img_delete_01.svg" alt="" />
            <span>Void</span>
          </a>
          
          <button className="order-type-display clickable" onClick={onResetOrder}>
            {selectedOrderType}
          </button>
          
          <div className="menu-dropdown-container" ref={dropdownRef}>
            <button className="menu-button" onClick={() => setIsDropdownOpen(!isDropdownOpen)}>
              <img src="/images/img_menu_01.svg" alt="Menu" />
            </button>
            
            {isDropdownOpen && (
              <div className="professional-dropdown">
                <div className="dropdown-section">
                  <div className="section-header">
                    <h3 className="section-title">نوع الطلب</h3>
                    <div className="section-divider"></div>
                  </div>
                  
                  <div className="order-types-grid">
                    {orderTypes.map((type) => (
                      <button
                        key={type.id}
                        className={`order-type-card ${selectedOrderType === type.name ? 'selected' : ''}`}
                        onClick={() => { onOrderTypeChange(type.name); setIsDropdownOpen(false); }}
                        style={{ '--accent-color': type.color } as React.CSSProperties}
                      >
                        <div className="card-icon-container">
                          <img src={type.icon} alt={type.displayName} className="card-icon" />
                        </div>
                        <div className="card-content">
                          <div className="card-title">{type.displayName}</div>
                        </div>
                        <div className="card-check">
                          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                            <path d="M13 4L6 11L3 8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {activeDeliveryCompanies.length > 0 && (
                  <div className="dropdown-section">
                    <div className="section-header">
                      <h3 className="section-title">شركاء التوصيل</h3>
                      <div className="section-divider"></div>
                    </div>
                    
                    <div className="delivery-partners-grid">
                      {activeDeliveryCompanies.map((company) => (
                        <button
                          key={company.id}
                          className={`delivery-partner-card ${selectedDeliveryCompany?.id === company.id ? 'selected' : ''}`}
                          onClick={() => handleDeliveryCompanySelect(company)}
                          style={{ 
                            '--partner-color': '#0373ed',
                            '--partner-bg': '#f8f9fa' 
                          } as React.CSSProperties}
                        >
                          <div className="partner-icon-container">
                            <img src="/images/default-delivery.png" alt={company.name} className="partner-icon" />
                          </div>
                          <div className="partner-content">
                            <div className="partner-name">{company.name}</div>
                            <div className="partner-status">{company.paymentType}</div>
                          </div>
                          <div className="partner-badge">
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                              <circle cx="6" cy="6" r="6" fill="currentColor"/>
                            </svg>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </nav>
      </div>
    </header>
  );
};

export default Header;

===== src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx =====
// src/Pages/pos/newSales/components/CustomerDetailsPopup.tsx
import React, { useState, useEffect } from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  TextField, Button, Box, Typography, Card, CardContent,
  Radio, RadioGroup, FormControlLabel, Divider, IconButton
} from '@mui/material';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import { Edit as EditIcon, LocationOn as LocationIcon } from '@mui/icons-material';
import CustomerForm from '../../customers/components/CustomerForm';

interface CustomerDetailsPopupProps {
  open: boolean;
  customer: Customer | null;
  onClose: () => void;
  onSelectCustomer: (customer: Customer, address: CustomerAddress) => void;
}

const CustomerDetailsPopup: React.FC<CustomerDetailsPopupProps> = ({
  open,
  customer,
  onClose,
  onSelectCustomer
}) => {
  const [selectedAddressId, setSelectedAddressId] = useState<string>('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [zones, setZones] = useState<any[]>([]);
  const [updatedCustomer, setUpdatedCustomer] = useState<Customer | null>(null);

  useEffect(() => {
    if (customer) {
      setUpdatedCustomer(customer);
      setSelectedAddressId('');
    }
  }, [customer]);

  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    if (open) {
      loadZones();
    }
  }, [open]);

  const handleAddressSelect = (addressId: string) => {
    setSelectedAddressId(addressId);
  };

  const handleConfirmSelection = () => {
    if (updatedCustomer && selectedAddressId) {
      const selectedAddress = updatedCustomer.addresses.find(
        addr => addr.id === selectedAddressId
      );
      if (selectedAddress) {
        onSelectCustomer(updatedCustomer, selectedAddress);
        onClose();
      }
    }
  };

  const handleEditCustomer = () => {
    setShowEditForm(true);
  };

  const handleCustomerUpdate = async (data: any) => {
    try {
      const updated = await customersApi.update(data);
      setUpdatedCustomer(updated);
      setShowEditForm(false);
    } catch (error) {
      console.error('Error updating customer:', error);
    }
  };

  const getZoneName = (zoneId: string): string => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.name : 'غير محدد';
  };

  const getDeliveryCharge = (zoneId: string): number => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.deliveryCharge : 0;
  };

  if (!updatedCustomer) return null;

  return (
    <>
      <Dialog 
        open={open && !showEditForm} 
        onClose={onClose} 
        maxWidth="md" 
        fullWidth
        PaperProps={{
          style: { minHeight: '600px' }
        }}
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6">بيانات العميل</Typography>
            <IconButton onClick={handleEditCustomer} color="primary">
              <EditIcon />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          {/* Customer Basic Info */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                المعلومات الأساسية
              </Typography>
              <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 2 }}>
                <TextField
                  label="الاسم"
                  value={updatedCustomer.name}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                <TextField
                  label="الهاتف الأساسي"
                  value={updatedCustomer.phone1}
                  InputProps={{ readOnly: true }}
                  variant="outlined"
                />
                {updatedCustomer.phone2 && (
                  <TextField
                    label="الهاتف الثاني"
                    value={updatedCustomer.phone2}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
                {updatedCustomer.phone3 && (
                  <TextField
                    label="الهاتف الثالث"
                    value={updatedCustomer.phone3}
                    InputProps={{ readOnly: true }}
                    variant="outlined"
                  />
                )}
              </Box>
              
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                {updatedCustomer.isVIP && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: 'gold', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    عميل VIP
                  </Typography>
                )}
                {updatedCustomer.isBlocked && (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      bgcolor: '#f44336', 
                      color: 'white', 
                      px: 1, 
                      py: 0.5, 
                      borderRadius: 1 
                    }}
                  >
                    محظور
                  </Typography>
                )}
              </Box>
            </CardContent>
          </Card>

          <Divider sx={{ my: 2 }} />

          {/* Address Selection */}
          <Typography variant="h6" sx={{ mb: 2 }}>
            اختر العنوان للطلب ({updatedCustomer.addresses.length})
          </Typography>
          
          <RadioGroup
            value={selectedAddressId}
            onChange={(e) => handleAddressSelect(e.target.value)}
          >
            {updatedCustomer.addresses.map((address) => (
              <FormControlLabel
                key={address.id}
                value={address.id}
                control={<Radio />}
                label={
                  <Card 
                    sx={{ 
                      width: '100%', 
                      ml: 1,
                      border: selectedAddressId === address.id ? '2px solid #1976d2' : '1px solid #e0e0e0'
                    }}
                  >
                    <CardContent sx={{ py: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                        <LocationIcon color="primary" />
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body1" fontWeight="bold">
                            {address.addressLine}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            المنطقة: {getZoneName(address.zoneId)}
                          </Typography>
                          <Typography variant="body2" color="primary">
                            رسوم التوصيل: {getDeliveryCharge(address.zoneId)} جنيه
                          </Typography>
                          
                          {address.floor && (
                            <Typography variant="body2" color="text.secondary">
                              الدور: {address.floor}
                            </Typography>
                          )}
                          {address.apartment && (
                            <Typography variant="body2" color="text.secondary">
                              الشقة: {address.apartment}
                            </Typography>
                          )}
                          {address.landmark && (
                            <Typography variant="body2" color="text.secondary">
                              علامة مميزة: {address.landmark}
                            </Typography>
                          )}
                          {address.notes && (
                            <Typography variant="body2" color="text.secondary">
                              ملاحظات: {address.notes}
                            </Typography>
                          )}
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                }
                sx={{ 
                  alignItems: 'flex-start',
                  mb: 1,
                  ml: 0,
                  mr: 0
                }}
              />
            ))}
          </RadioGroup>

          {updatedCustomer.addresses.length === 0 && (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                لا توجد عناوين مسجلة لهذا العميل
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>
            إلغاء
          </Button>
          <Button 
            variant="contained" 
            onClick={handleConfirmSelection}
            disabled={!selectedAddressId}
          >
            حفظ واختيار
          </Button>
        </DialogActions>
      </Dialog>

      {/* Customer Edit Form */}
      {showEditForm && (
        <CustomerForm
          open={showEditForm}
          mode="edit"
          initialValues={updatedCustomer}
          onClose={() => setShowEditForm(false)}
          onSubmit={handleCustomerUpdate}
        />
      )}
    </>
  );
};

export default CustomerDetailsPopup;

===== src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx =====
// src/Pages/pos/newSales/components/OrderItemDetailsPopup.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OrderItem } from '../types/PosSystem';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import styles from '../styles/OrderItemDetailsPopup.module.css';

interface OrderItemDetailsPopupProps {
  orderItem: OrderItem | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdateItem: (itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => void;
  onRemoveItem: (itemId: string) => void;
}

const OrderItemDetailsPopup: React.FC<OrderItemDetailsPopupProps> = ({
  orderItem,
  isOpen,
  onClose,
  onUpdateItem
}) => {
  const [quantity, setQuantity] = useState(1);
  const [notes, setNotes] = useState('');
  const [discountPercentage, setDiscountPercentage] = useState(0);
  const [discountAmount, setDiscountAmount] = useState(0);
  
  // States مؤقتة للتحكم في التحديث
  const [tempDiscountPercentage, setTempDiscountPercentage] = useState('0');
  const [tempDiscountAmount, setTempDiscountAmount] = useState('0');
  
  // Refs للـ inputs
  const percentageInputRef = useRef<HTMLInputElement>(null);
  const amountInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (orderItem) {
      setQuantity(orderItem.quantity);
      setNotes(orderItem.notes || '');
      const currentDiscount = orderItem.discountAmount || 0;
      const baseTotal = orderItem.selectedPrice.price * orderItem.quantity;
      const currentDiscountPercentage = baseTotal > 0 ? (currentDiscount / baseTotal) * 100 : 0;
      setDiscountAmount(currentDiscount);
      setDiscountPercentage(currentDiscountPercentage);
      setTempDiscountAmount(currentDiscount.toFixed(2));
      setTempDiscountPercentage(currentDiscountPercentage.toFixed(1));
    }
  }, [orderItem]);

  if (!isOpen || !orderItem) return null;

  const unitPrice = orderItem.selectedPrice.price;
  const subItemsTotal = orderItem.subItems?.reduce((sum, item) => sum + item.price, 0) || 0;
  const baseTotal = (unitPrice * quantity) + subItemsTotal;
  const finalTotal = baseTotal - discountAmount;

  const handleQuantityChange = (change: number) => {
    const newQuantity = Math.max(1, quantity + change);
    setQuantity(newQuantity);
    
    const newBaseTotal = (unitPrice * newQuantity) + subItemsTotal;
    const newDiscountAmount = (newBaseTotal * discountPercentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير نسبة الخصم
  const handleDiscountPercentageChange = (value: number) => {
    const percentage = Math.max(0, Math.min(100, value));
    setDiscountPercentage(percentage);
    const newDiscountAmount = (baseTotal * percentage) / 100;
    setDiscountAmount(newDiscountAmount);
    setTempDiscountAmount(newDiscountAmount.toFixed(2));
  };

  // معالج تغيير قيمة الخصم
  const handleDiscountAmountChange = (value: number) => {
    const amount = Math.max(0, Math.min(baseTotal, value));
    setDiscountAmount(amount);
    const newDiscountPercentage = baseTotal > 0 ? (amount / baseTotal) * 100 : 0;
    setDiscountPercentage(newDiscountPercentage);
    setTempDiscountPercentage(newDiscountPercentage.toFixed(1));
  };

  // معالج Focus للنسبة المئوية
  const handlePercentageFocus = () => {
    if (percentageInputRef.current) {
      percentageInputRef.current.select();
    }
  };

  // معالج Focus لقيمة الخصم
  const handleAmountFocus = () => {
    if (amountInputRef.current) {
      amountInputRef.current.select();
    }
  };

  // معالج Blur للنسبة المئوية
  const handlePercentageBlur = () => {
    const value = parseFloat(tempDiscountPercentage) || 0;
    handleDiscountPercentageChange(value);
  };

  // معالج Blur لقيمة الخصم
  const handleAmountBlur = () => {
    const value = parseFloat(tempDiscountAmount) || 0;
    handleDiscountAmountChange(value);
  };

  // معالج Enter للنسبة المئوية
  const handlePercentageKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountPercentage) || 0;
      handleDiscountPercentageChange(value);
      percentageInputRef.current?.blur();
    }
  };

  // معالج Enter لقيمة الخصم
  const handleAmountKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      const value = parseFloat(tempDiscountAmount) || 0;
      handleDiscountAmountChange(value);
      amountInputRef.current?.blur();
    }
  };

  const handleConfirm = () => {
    onUpdateItem(orderItem.id, {
      quantity,
      notes,
      discountPercentage,
      discountAmount
    });
    onClose();
  };

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.orderItemDetails}>
        
        {/* سطر واحد فقط: اسم المنتج + السعر + الكمية + الإجمالي */}
        <div className={styles.mainRow}>
          {/* اسم المنتج والسعر على اليمين */}
          <div className={styles.productInfo}>
            <span className={styles.productName}>{orderItem.product.nameArabic}</span>
            {orderItem.product.hasMultiplePrices && (
              <span className={styles.productSize}> - {orderItem.selectedPrice.nameArabic}</span>
            )}
            <span className={styles.unitPrice}>{unitPrice} EGP</span>
          </div>

          {/* الكمية في النص */}
          <div className={styles.quantityControls}>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(-1)}
              disabled={quantity <= 1}
            >
              <RemoveIcon />
            </button>
            <span className={styles.quantityDisplay}>{quantity}</span>
            <button
              className={styles.quantityBtn}
              onClick={() => handleQuantityChange(1)}
            >
              <AddIcon />
            </button>
          </div>
          
          {/* الإجمالي على الشمال */}
          <div className={styles.totalDisplay}>
            <span className={styles.totalAmount}>{finalTotal.toFixed(2)} EGP</span>
          </div>
        </div>

        {/* حقل الملاحظات */}
        <div className={styles.notesSection}>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="ملاحظات الصنف..."
            className={styles.notesInput}
            rows={3}
          />
        </div>

        {/* قسم الخصم */}
        <div className={styles.discountSection}>
          <div className={styles.discountInputs}>
            <div className={styles.discountField}>
              <label>نسبة الخصم %</label>
              <input
                ref={percentageInputRef}
                type="number"
                value={tempDiscountPercentage}
                onChange={(e) => setTempDiscountPercentage(e.target.value)}
                onFocus={handlePercentageFocus}
                onBlur={handlePercentageBlur}
                onKeyDown={handlePercentageKeyDown}
                min="0"
                max="100"
                step="0.1"
                className={styles.discountInput}
              />
            </div>
            
            <div className={styles.discountField}>
              <label>قيمة الخصم</label>
              <input
                ref={amountInputRef}
                type="number"
                value={tempDiscountAmount}
                onChange={(e) => setTempDiscountAmount(e.target.value)}
                onFocus={handleAmountFocus}
                onBlur={handleAmountBlur}
                onKeyDown={handleAmountKeyDown}
                min="0"
                max={baseTotal}
                step="0.01"
                className={styles.discountInput}
              />
            </div>
          </div>
        </div>

        {/* أزرار التأكيد والإلغاء */}
        <div className={styles.actionButtons}>
          <button className={styles.confirmBtn} onClick={handleConfirm}>
            تأكيد
          </button>
          <button className={styles.cancelBtn} onClick={onClose}>
            إلغاء
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderItemDetailsPopup;

===== src/Pages/pos/newSales/components/OrderManager.tsx =====
// src/Pages/pos/newSales/components/OrderManager.tsx - الكود الكامل المُحدث
import React from 'react';
import { PosProduct, PosPrice, SelectedOption, OrderItem, SubItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface OrderManagerProps {
  keypadValue: string;
  isExtraMode: boolean;
  isWithoutMode: boolean;
  selectedOrderItemId: string | null;
  onOrderAdd: (orderItem: OrderItem) => void;
  onOrderUpdate: (itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => void;
  onModeReset: () => void;
  onLoadNormalProducts: () => void;
}

export const useOrderManager = ({
  keypadValue,
  isExtraMode,
  isWithoutMode,
  selectedOrderItemId,
  onOrderAdd,
  onOrderUpdate,
  onModeReset,
  onLoadNormalProducts
}: OrderManagerProps) => {
  
  const addToOrder = React.useCallback((
    product: PosProduct, 
    price: PosPrice, 
    selectedOptions: SelectedOption[]
  ) => {
  const quantity = parseFloat(keypadValue) || 1; // استخدام parseFloat بدلاً من parseInt
    const basePrice = posService.calculateTotalPrice(price.price, selectedOptions, quantity);
    
    // إذا كان Extra أو Without mode مع منتج محدد
    if ((isExtraMode || isWithoutMode) && selectedOrderItemId) {
      const subItem: SubItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        type: isExtraMode ? 'extra' : 'without',
        name: `${product.nameArabic}${price.nameArabic ? ` - ${price.nameArabic}` : ''}`,
        quantity,
        price: isWithoutMode ? 0 : basePrice,
        productId: product.id
      };
      
      onOrderUpdate(selectedOrderItemId, 'addSubItem', subItem);
    } else {
      // إضافة منتج جديد (سواء عادي أو Extra/Without منفصل)
      const subItems: SubItem[] = [];
      
      // تحويل الخيارات إلى sub-items
      selectedOptions.forEach(option => {
        subItems.push({
          id: `option_${option.itemId}_${Date.now()}`,
          type: 'option',
          name: option.itemName,
          quantity: option.quantity,
          price: option.extraPrice * option.quantity,
          isRequired: true,
          groupId: option.groupId
        });
      });
      
      const orderItem: OrderItem = {
        id: `${product.id}_${price.id}_${Date.now()}`,
        product,
        selectedPrice: price,
        quantity,
        totalPrice: basePrice,
        subItems: subItems.length > 0 ? subItems : undefined,
        // إضافة كمنتج Extra/Without منفصل إذا لم يكن هناك منتج محدد
        isExtra: isExtraMode && !selectedOrderItemId,
        isWithout: isWithoutMode && !selectedOrderItemId,
      };

      onOrderAdd(orderItem);
    }
    
    onModeReset();
    onLoadNormalProducts();
  }, [
    keypadValue, 
    isExtraMode, 
    isWithoutMode, 
    selectedOrderItemId, 
    onOrderAdd,
    onOrderUpdate,
    onModeReset, 
    onLoadNormalProducts
  ]);

  const removeSubItem = React.useCallback((orderItemId: string, subItemId: string) => {
    onOrderUpdate(orderItemId, 'removeSubItem', subItemId);
  }, [onOrderUpdate]);

  return { addToOrder, removeSubItem };
};

===== src/Pages/pos/newSales/components/OrderSummary.tsx =====
// src/Pages/pos/newSales/components/OrderSummary.tsx - تصحيح مشكلة إغلاق الـ dropdown
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { OrderSummary as OrderSummaryType, OrderItem, SubItem } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import * as customersApi from 'src/utils/api/pagesApi/customersApi';
import * as deliveryZonesApi from 'src/utils/api/pagesApi/deliveryZonesApi';
import CustomerDetailsPopup from './CustomerDetailsPopup';
import CustomerForm from '../../customers/components/CustomerForm';
import styles from '../styles/OrderSummary.module.css';
import PaymentPopup from './PaymentPopup';

interface OrderSummaryProps {
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: OrderItem) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  readOnly: boolean;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick,
  selectedCustomer,
  selectedAddress,
  onCustomerSelect,
  orderType,
  onDeliveryChargeChange,
  readOnly = false // إضافة جديدة

}) => {
  const [selectedSubItemId, setSelectedSubItemId] = useState<string | null>(null);
  const [phoneInput, setPhoneInput] = useState('');
  const [searchResults, setSearchResults] = useState<Customer[]>([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [showCustomerForm, setShowCustomerForm] = useState(false);
  const [showCustomerDetails, setShowCustomerDetails] = useState(false);
  const [selectedCustomerForDetails, setSelectedCustomerForDetails] = useState<Customer | null>(null);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [zones, setZones] = useState<any[]>([]);
  const [selectedResultIndex, setSelectedResultIndex] = useState(-1);
  const [searchCache, setSearchCache] = useState<{[key: string]: Customer[]}>({});
  const [inputHasFocus, setInputHasFocus] = useState(false); // إضافة حالة التركيز
  
  // استخدام useRef بدلاً من state للمتغيرات المساعدة
  const searchDebounceTimer = useRef<NodeJS.Timeout | null>(null);
  const searchAbortController = useRef<AbortController | null>(null);
  const lastSearchQuery = useRef<string>('');
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
const [showPaymentPopup, setShowPaymentPopup] = useState(false);

  // تحميل المناطق عند بدء التشغيل
  useEffect(() => {
    const loadZones = async () => {
      try {
        const zonesData = await deliveryZonesApi.getAll();
        setZones(zonesData);
      } catch (error) {
        console.error('Error loading zones:', error);
      }
    };
    
    loadZones();
  }, []);

  // حساب رسوم التوصيل عند تغيير العنوان أو نوع الطلب
  useEffect(() => {
    if (orderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      const zone = zones.find(z => z.id === selectedAddress.zoneId);
      const charge = zone ? zone.deliveryCharge : 0;
      setDeliveryCharge(charge);
      onDeliveryChargeChange(charge);
    } else {
      setDeliveryCharge(0);
      onDeliveryChargeChange(0);
    }
  }, [orderType, selectedAddress, zones, onDeliveryChargeChange]);

  // دالة البحث المصححة
  const searchCustomers = useCallback(async (query: string): Promise<Customer[]> => {
    // التحقق من الكاش
    if (searchCache[query]) {
      return searchCache[query];
    }

    // إلغاء البحث السابق
    if (searchAbortController.current) {
      searchAbortController.current.abort();
    }

    const newController = new AbortController();
    searchAbortController.current = newController;

    try {
      const results = await customersApi.searchByPhone(query);
      
      // حفظ في الكاش
      setSearchCache(prev => ({
        ...prev,
        [query]: results
      }));
      
      return results;
    } catch (error: any) {
      if (error.name === 'AbortError') {
        throw error;
      }
      console.error('Error searching customers:', error);
      throw error;
    }
  }, [searchCache]);

  // useEffect للبحث مع تحسين عرض الـ dropdown
  useEffect(() => {
    // إلغاء المؤقت السابق
    if (searchDebounceTimer.current) {
      clearTimeout(searchDebounceTimer.current);
    }

    const query = phoneInput.trim();
    
    // إذا النص فاضي، امسح النتائج ولكن لا تُخفي الـ dropdown إذا كان الـ input له focus
    if (!query) {
      setSearchResults([]);
      if (!inputHasFocus) {
        setShowDropdown(false);
      }
      setSelectedResultIndex(-1);
      setIsSearching(false);
      return;
    }

    // إذا النص أقل من 3 أحرف، ما تبحثش ولكن أظهر رسالة
    if (query.length < 3) {
      setSearchResults([]);
      setSelectedResultIndex(-1);
      // أظهر الـ dropdown مع رسالة "اكتب 3 أحرف على الأقل" إذا كان الـ input له focus
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // إذا هو نفس البحث السابق والنتائج موجودة، أظهر النتائج فقط
    if (query === lastSearchQuery.current && searchResults.length >= 0) {
      if (inputHasFocus) {
        setShowDropdown(true);
      }
      return;
    }

    // بدء البحث مع تأخير
    const performSearch = async () => {
      // التأكد إن النص لسه نفسه (مش اتغير أثناء التأخير)
      if (phoneInput.trim() !== query) {
        return;
      }

      setIsSearching(true);
      lastSearchQuery.current = query;
      
      try {
        const results = await searchCustomers(query);
        
        // التأكد إن النص لسه نفسه بعد البحث
        if (phoneInput.trim() === query) {
          setSearchResults(results);
          // أظهر الـ dropdown فقط إذا كان الـ input له focus أو كان مفتوح من قبل
          if (inputHasFocus || showDropdown) {
            setShowDropdown(true);
          }
          setSelectedResultIndex(-1);
        }
      } catch (error: any) {
        if (error.name !== 'AbortError') {
          console.error('Search failed:', error);
          // عرض النتائج الفارغة فقط إذا النص لسه نفسه والـ input له focus
          if (phoneInput.trim() === query && inputHasFocus) {
            setSearchResults([]);
            setShowDropdown(true);
          }
        }
      } finally {
        // إيقاف مؤشر التحميل فقط إذا النص لسه نفسه
        if (phoneInput.trim() === query) {
          setIsSearching(false);
        }
      }
    };

    // تأخير البحث 500ms
    searchDebounceTimer.current = setTimeout(performSearch, 500);

    // تنظيف المؤقت عند التغيير
    return () => {
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, [phoneInput, searchCustomers, inputHasFocus, showDropdown, searchResults.length]);

  // إغلاق الـ dropdown عند الضغط خارجه
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        setInputHasFocus(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // تنظيف عند إلغاء المكون
  useEffect(() => {
    return () => {
      if (searchAbortController.current) {
        searchAbortController.current.abort();
      }
      if (searchDebounceTimer.current) {
        clearTimeout(searchDebounceTimer.current);
      }
    };
  }, []);

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setPhoneInput(value);
    onCustomerNameChange(value);
    
    // إعادة تعيين الاختيار عند تغيير النص
    setSelectedResultIndex(-1);
    
    // أظهر الـ dropdown عند الكتابة
    if (value.trim().length > 0) {
      setShowDropdown(true);
    }
  }, [onCustomerNameChange]);

  // معالج Focus للـ input
  const handleInputFocus = useCallback(() => {
    setInputHasFocus(true);
    // أظهر الـ dropdown إذا كان هناك نص أو نتائج
    if (phoneInput.trim().length > 0 || searchResults.length > 0) {
      setShowDropdown(true);
    }
  }, [phoneInput, searchResults.length]);

  const canOpenPayment = orderSummary.items.length > 0;

  // معالج Blur للـ input
  const handleInputBlur = useCallback(() => {
    // تأخير إخفاء الـ dropdown للسماح بالنقر على النتائج
    setTimeout(() => {
      setInputHasFocus(false);
    }, 200);
  }, []);

  // معالج Enter محسن

    const handleCustomerSelect = useCallback((customer: Customer) => {
    setSelectedCustomerForDetails(customer);
    setShowCustomerDetails(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);

const handleKeyDown = useCallback(async (e: React.KeyboardEvent<HTMLInputElement>) => {
  if (showDropdown && searchResults.length > 0) {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedResultIndex(prev => 
          prev < searchResults.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedResultIndex(prev => prev > 0 ? prev - 1 : -1);
        break;
      case 'Enter':
        e.preventDefault();
        if (isSearching) {
          return;
        }
        // اختيار فقط إذا كان هناك عنصر محدد بالأسهم
        if (selectedResultIndex >= 0 && selectedResultIndex < searchResults.length) {
          handleCustomerSelect(searchResults[selectedResultIndex]);
        } else {
          // إذا مفيش اختيار بالأسهم، تحقق من وجود مطابقة تامة
          const query = phoneInput.trim();
          const exactMatch = searchResults.find(customer => 
            customer.phone1 === query || 
            customer.phone2 === query ||
            customer.phone3 === query ||
            customer.phone4 === query
          );
          
          if (!exactMatch) {
            // مفيش مطابقة تامة، افتح dialog الإضافة
            setShowCustomerForm(true);
            setShowDropdown(false);
          }
        }
        break;
      case 'Escape':
        setShowDropdown(false);
        setSelectedResultIndex(-1);
        inputRef.current?.blur();
        break;
    }
  } else if (e.key === 'Enter') {
    e.preventDefault();
    
    const query = phoneInput.trim();
    if (query.length >= 3) {
      if (isSearching) {
        return;
      }

      setIsSearching(true);
      try {
        const results = await searchCustomers(query);
        
        if (results.length > 0) {
          // تحقق من وجود مطابقة تامة
          const exactMatch = results.find(customer => 
            customer.phone1 === query || 
            customer.phone2 === query ||
            customer.phone3 === query ||
            customer.phone4 === query
          );
          
          setSearchResults(results);
          setShowDropdown(true);
          setSelectedResultIndex(-1);
          
          // إذا مفيش مطابقة تامة، افتح dialog الإضافة كمان
          if (!exactMatch) {
            setShowCustomerForm(true);
          }
        } else {
          setShowCustomerForm(true); // مفيش نتائج، افتح عميل جديد
        }
      } catch (error) {
        console.error('Immediate search failed:', error);
        setShowCustomerForm(true);
      } finally {
        setIsSearching(false);
      }
    }
  }
}, [showDropdown, searchResults, selectedResultIndex, phoneInput, isSearching, searchCustomers, handleCustomerSelect]);





  const handleCustomerDetailsSelect = useCallback((customer: Customer, address: CustomerAddress) => {
    onCustomerSelect(customer, address);
    
    // إفراغ حقل البحث
    setPhoneInput('');
    setShowCustomerDetails(false);
    
    // إخفاء الـ dropdown
    setShowDropdown(false);
    setSearchResults([]);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, [onCustomerSelect]);

  const handleAddCustomerClick = useCallback(() => {
    setShowCustomerForm(true);
    setShowDropdown(false);
    setSelectedResultIndex(-1);
    setInputHasFocus(false);
  }, []);

  const handleCustomerFormSubmit = useCallback(async (data: any) => {
    try {
      const newCustomer = await customersApi.add(data);
      if (newCustomer.addresses.length > 0) {
        onCustomerSelect(newCustomer, newCustomer.addresses[0]);
        // إفراغ حقل البحث
        setPhoneInput('');
      }
      setShowCustomerForm(false);
      
      // إخفاء الـ dropdown
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    } catch (error) {
      console.error('Error creating customer:', error);
    }
  }, [onCustomerSelect]);

  // إضافة معالج إغلاق نموذج العميل
  const handleCustomerFormClose = useCallback(() => {
    setShowCustomerForm(false);
  }, []);

  // إضافة معالج إغلاق تفاصيل العميل
  const handleCustomerDetailsClose = useCallback(() => {
    setShowCustomerDetails(false);
  }, []);

  useEffect(() => {
    if (selectedCustomer) {
      // إفراغ حقل البحث عند اختيار عميل فقط
      setPhoneInput('');
      setShowDropdown(false);
      setSearchResults([]);
      setSelectedResultIndex(-1);
      setInputHasFocus(false);
    }
  }, [selectedCustomer]);

  // حساب الإجمالي النهائي
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // دوال العرض
  const renderSubItem = (subItem: SubItem, orderItemId: string) => {
    const canDelete = subItem.type === 'extra' || subItem.type === 'without';
    const isSelected = selectedSubItemId === subItem.id && canDelete;
    
    return (
      <div 
        key={subItem.id} 
        className={`${styles.subItem} ${isSelected ? styles.selectedSubItem : ''}`}
        onClick={(e) => {
          e.stopPropagation();
          
          if (canDelete) {
            const rect = e.currentTarget.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            
            if (isSelected && clickX <= 30) {
              onRemoveSubItem(orderItemId, subItem.id);
              setSelectedSubItemId(null);
            } else {
              setSelectedSubItemId(isSelected ? null : subItem.id);
            }
          }
        }}
        style={{
          cursor: canDelete ? 'pointer' : 'default'
        }}
      >
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            {!isSelected && (
              <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
                {subItem.type === 'extra' && '+'}
                {subItem.type === 'without' && '-'}
                {subItem.type === 'option' && '•'}
              </span>
            )}
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>💬</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  // تحديد محتوى الـ dropdown
  const renderDropdownContent = () => {
    const query = phoneInput.trim();
    
    if (isSearching) {
      return (
        <div className={styles.searchingMessage}>
          <div className={styles.loadingSpinner}></div>
          <span>جاري البحث...</span>
        </div>
      );
    }
    
    if (query.length < 3) {
      return (
        <div className={styles.minLengthMessage}>
          <span>اكتب 3 أرقام على الأقل للبحث</span>
        </div>
      );
    }
    
    if (searchResults.length > 0) {
      return (
        <>
          <div className={styles.dropdownHeader}>
            <span>نتائج البحث ({searchResults.length})</span>
          </div>
          {searchResults.map((customer, index) => (
            <div
              key={customer.id}
              className={`${styles.customerOption} ${
                index === selectedResultIndex ? styles.selectedOption : ''
              }`}
              onClick={() => handleCustomerSelect(customer)}
            >
              <div className={styles.customerInfo}>
                <div className={styles.customerName}>{customer.name}</div>
                <div className={styles.customerPhone}>
                  {customer.phone1}
                  {customer.phone2 && ` - ${customer.phone2}`}
                </div>
                <div className={styles.customerDetails}>
                  {customer.addresses.length} عنوان
                  {customer.isVIP && ' • VIP'}
                  {customer.isBlocked && ' • محظور'}
                </div>
              </div>
            </div>
          ))}
        </>
      );
    }
    
    return (
      <div className={styles.noResults}>
        <span>لا توجد نتائج لهذا الرقم</span>
        <button 
          className={styles.addNewCustomerBtn}
          onClick={handleAddCustomerClick}
          disabled={isSearching}
        >
          إضافة عميل جديد
        </button>
      </div>
    );
  };


  const shouldShowAllButtons = orderType !== 'Takeaway';
const shouldShowPayOnly = orderType === 'Takeaway';

  return (
    <aside className={styles.orderSummary}>
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      <div className={styles.orderContent}>
        {/* Customer Search Input with Enhanced Dropdown */}
        <div className={styles.customerInputContainer} ref={dropdownRef}>
          <div className={styles.customerInput}>
<input
  ref={inputRef}
  type="text"
  placeholder="Customer Phone Number - رقم هاتف العميل"
  value={phoneInput}
  onChange={handleInputChange}
  onFocus={handleInputFocus}
  onBlur={handleInputBlur}
  onKeyDown={handleKeyDown}
  className={styles.customerField}
/>
            <button 
              className={styles.customerButton}
              onClick={handleAddCustomerClick}
              disabled={isSearching}
            >
              <img src="/images/img_group_1000004320.svg" alt="Add customer" />
            </button>
          </div>

          {/* Search Results Dropdown */}
          {showDropdown && (
            <div className={styles.customerDropdown}>
              {renderDropdownContent()}
            </div>
          )}
        </div>

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div 
                className={`${styles.orderItem} ${selectedOrderItemId === item.id ? styles.selected : ''} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}
                onClick={(e) => {
                  const rect = e.currentTarget.getBoundingClientRect();
                  const clickX = e.clientX - rect.left;
                  
                  if (selectedOrderItemId === item.id && clickX <= 30) {
                    onRemoveOrderItem(item.id);
                  } else {
                    onOrderItemSelect(item.id);
                  }
                }}
                onDoubleClick={() => onOrderItemDoubleClick?.(item)}
              >
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem, item.id))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>
{!readOnly && (
  <div className={`${styles.actionButtons} ${shouldShowPayOnly ? styles.takeawayButtons : ''}`}>
      {shouldShowAllButtons && (
        <>
          <button className={`${styles.actionButton} ${styles.send}`}>
            <img src="/images/img_tabler_send.svg" alt="Send" />
            <span>Send</span>
          </button>
          <button onClick={() => canOpenPayment && setShowPaymentPopup(true)}
                  disabled={!canOpenPayment}
                  className={`${styles.actionButton} ${styles.print} ${!canOpenPayment ? styles.disabledBtn : ''}`}>
            <img src="/images/img_printer.svg" alt="Print" />
            <span>Print</span>
          </button>
        </>
      )}
      <button
        onClick={() => canOpenPayment && setShowPaymentPopup(true)}
        disabled={!canOpenPayment}
        className={`${styles.actionButton} ${styles.pay} ${shouldShowPayOnly ? styles.fullWidth : ''} ${!canOpenPayment ? styles.disabledBtn : ''}`}
        title={!canOpenPayment ? "لا يمكن الدفع بدون إضافة أصناف" : undefined}
      >
        <img src="/images/img_payment_02.svg" alt="Pay" />
        <span>Pay</span>
      </button>
  </div>
)}

    </div>

      {/* Customer Details Popup */}
      <CustomerDetailsPopup
        open={showCustomerDetails}
        customer={selectedCustomerForDetails}
        onClose={handleCustomerDetailsClose}
        onSelectCustomer={handleCustomerDetailsSelect}
      />


<PaymentPopup
  isOpen={showPaymentPopup}
  onClose={() => setShowPaymentPopup(false)}
  orderSummary={orderSummary}
  customerName={customerName}
  onCustomerNameChange={onCustomerNameChange}
  onRemoveOrderItem={onRemoveOrderItem}
  onRemoveSubItem={onRemoveSubItem}
  selectedOrderItemId={selectedOrderItemId}
  onOrderItemSelect={onOrderItemSelect}
  onOrderItemDoubleClick={onOrderItemDoubleClick}
  selectedCustomer={selectedCustomer}
  selectedAddress={selectedAddress}
  onCustomerSelect={onCustomerSelect}
  orderType={orderType}
  onDeliveryChargeChange={onDeliveryChargeChange}
  onPaymentComplete={(payments) => {
    console.log('مدفوعات:', payments);
    setShowPaymentPopup(false);
    // هنا يمكنك إضافة منطق حفظ الدفع
  }}
/>


      {/* Customer Form Popup */}
      {showCustomerForm && (
        <CustomerForm
          key={phoneInput}
          open={showCustomerForm}
          mode="add"
          onClose={handleCustomerFormClose}
          onSubmit={handleCustomerFormSubmit}
          initialValues={{
            id: '',
            name: '',
            phone1: phoneInput.trim(),
            phone2: '',
            phone3: '',
            phone4: '',
            isVIP: false,
            isBlocked: false,
            isActive: true,
            addresses: []
          }}
        />
      )}
    </aside>
  );
};

export default OrderSummary;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentCenter.tsx
import React from 'react';
import styles from './styles/PaymentCenter.module.css';

interface PaymentCenterProps {
  totalAmount: number;
  paidAmount: string;
  remainingAmount: number;
  changeAmount: number;
  totalPaidFromMethods: number;
  onAmountChange: (amount: string) => void;
  onQuickAmountSelect: (amount: number) => void;
}

const PaymentCenter: React.FC<PaymentCenterProps> = ({
  totalAmount,
  paidAmount,
  remainingAmount,
  changeAmount,
  totalPaidFromMethods,
  onAmountChange,
  onQuickAmountSelect
}) => {
  const handleKeypadClick = (value: string) => {
    if (value === 'c') {
      onAmountChange('0');
    } else if (value === 'erase') {
      const newValue = paidAmount.slice(0, -1);
      onAmountChange(newValue || '0');
    } else if (value === '.') {
      if (!paidAmount.includes('.')) {
        onAmountChange(paidAmount === '0' ? '0.' : paidAmount + '.');
      }
    } else {
      const newValue = paidAmount === '0' ? value : paidAmount + value;
      onAmountChange(newValue);
    }
  };

  // حساب إجمالي المدفوع (من الطرق + النقدي الحالي)
  const currentInputAmount = parseFloat(paidAmount) || 0;
  const totalPaidAmount = totalPaidFromMethods + currentInputAmount;
  
  // حساب الباقي للعميل (إذا كان المدفوع أكبر من المطلوب)
  const customerChange = Math.max(0, totalPaidAmount - totalAmount);

  return (
    <div className={styles.wrapper}>
      <div className={styles.headerRow}>
        <h2 className={styles.balanceTitle}>
          إجمالي الفاتورة: {totalAmount.toFixed(2)} جنيه
        </h2>
      </div>

      {/* عرض المبلغ المدفوع من طرق أخرى */}
      {/* {totalPaidFromMethods > 0 && (
        <div className={styles.paidMethodsRow}>
          <div className={styles.paidMethodsInfo}>
            <span className={styles.paidMethodsLabel}>مدفوع بطرق أخرى:</span>
            <span className={styles.paidMethodsAmount}>{totalPaidFromMethods.toFixed(2)} جنيه</span>
          </div>
        </div>
      )} */}

      <div className={styles.fieldsRow}>
        <div className={styles.fieldBlock}>
          <label className={styles.label}>المبلغ المتبقي (كاش)</label>
          <div className={styles.remainingBox}>{remainingAmount.toFixed(2)}</div>
        </div>

        <div className={styles.fieldBlock}>
          <label className={styles.label}>المدفوع نقداً</label>
          <input 
            type="text" 
            readOnly 
            value={paidAmount} 
            className={styles.input} 
          />
        </div>
      </div>

      <div className={styles.quickButtons}>
        {[5, 10, 15, 20].map(val => (
          <button key={val} className={styles.quickBtn} onClick={() => onQuickAmountSelect(val)}>
            {val} EGP
          </button>
        ))}
      </div>

      <div className={styles.keypad}>
        {[
          ['1','2','3','50'],
          ['4','5','6','100'],
          ['7','8','9','200'],
          ['c','0','.','erase']
        ].map((row, rowIndex) => (
          <div key={rowIndex} className={styles.keypadRow}>
            {row.map(key => (
              <button
                key={key}
                className={`${styles.keypadBtn} ${['50','100','200'].includes(key) ? styles.gray : ''}`}
                onClick={() => key === 'erase' ? handleKeypadClick('erase') : handleKeypadClick(key)}
              >
                {key === 'erase' ? '×' : key === 'c' ? 'C' : key + (['50','100','200'].includes(key) ? ' EGP' : '')}
              </button>
            ))}
          </div>
        ))}
      </div>

      {/* قسم الباقي للعميل - يظهر دائماً */}
      <div className={styles.changeSection}>
        {/* <div className={styles.changeHeader}>
          <div className={styles.changeSummary}>
            <span className={styles.summaryLabel}>إجمالي المدفوع:</span>
            <span className={styles.summaryValue}>{totalPaidAmount.toFixed(2)} جنيه</span>
          </div>
        </div> */}
        
        <div className={styles.changeDisplay}>
          <div className={styles.changeLabel}>الباقي للعميل</div>
          <div className={`${styles.changeAmount} ${customerChange > 0 ? styles.hasChange : styles.noChange}`}>
            {customerChange.toFixed(2)} جنيه
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentCenter;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentLeft.tsx
import React from 'react';
import PaymentOrderSummary from './PaymentOrderSummary';
import styles from './styles/PaymentLeft.module.css';

interface PaymentLeftProps {
  orderSummary: any;
  selectedCustomer: any;
  selectedAddress: any;
  orderType: string;
  deliveryCharge: number;
}

const PaymentLeft: React.FC<PaymentLeftProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  orderType,
  deliveryCharge,
}) => {
  return (
    <div className={styles.container}>
        <PaymentOrderSummary 
          orderSummary={orderSummary}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          orderType={orderType}
          deliveryCharge={deliveryCharge} onGoBack={function (): void {
            throw new Error('Function not implemented.');
          } }        />
    </div>
  );
};

export default PaymentLeft;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx =====
// src/Pages/pos/newSales/components/paymentPopup components/PaymentOrderSummary.tsx
import React from 'react';
import { OrderSummary as OrderSummaryType, OrderItem, SubItem } from '../../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import styles from './styles/PaymentOrderSummary.module.css';

interface PaymentOrderSummaryProps {
  orderSummary: OrderSummaryType;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  orderType: string;
  deliveryCharge: number;
    onGoBack: () => void;

}

const PaymentOrderSummary: React.FC<PaymentOrderSummaryProps> = ({
  orderSummary,
  selectedCustomer,
  selectedAddress,
  orderType,
  deliveryCharge,
  onGoBack
}) => {
  // حساب الإجمالي النهائي
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const finalTotal = subtotalWithDelivery + taxAmount - orderSummary.discount;

  // دالة عرض SubItem
  const renderSubItem = (subItem: SubItem) => {
    return (
      <div key={subItem.id} className={styles.subItem}>
        <div className={styles.subItemDetails}>
          <div className={styles.subItemInfo}>
            <span className={`${styles.subItemBadge} ${styles[subItem.type]}`}>
              {subItem.type === 'extra' && '+'}
              {subItem.type === 'without' && '-'}
              {subItem.type === 'option' && '•'}
            </span>
            <div className={styles.subItemName}>
              {subItem.quantity} X {subItem.name}
            </div>
          </div>
        </div>
        
        <div className={styles.subItemPrices}>
          <div className={styles.subItemPrice}>
            {subItem.type === 'without' ? '0' : (subItem.price / subItem.quantity).toFixed(2)}
          </div>
          <div className={`${styles.subItemTotal} ${subItem.price < 0 ? styles.negative : ''}`}>
            {subItem.type === 'without' ? '0' : subItem.price.toFixed(2)}
          </div>
        </div>
      </div>
    );
  };

  // دالة عرض Options
  const renderOptions = (options: any[]) => {
    return options.map((option: any, index: number) => (
      <div key={index} className={styles.optionDetail}>
        <span className={styles.optionText}>
          {option.quantity} X {option.itemName}
        </span>
        <div className={styles.optionPrices}>
          <div className={styles.optionPrice}>
            {option.extraPrice > 0 ? `+${option.extraPrice}` : '0'}
          </div>
          <div className={styles.optionTotal}>
            {(option.extraPrice * option.quantity).toFixed(2)}
          </div>
        </div>
      </div>
    ));
  };

  // دالة عرض Notes
  const renderNotes = (notes: string) => {
    if (!notes || notes.trim() === '') return null;
    
    return (
      <div className={styles.commentsContainer}>
        <div className={styles.commentItem}>
          <span className={styles.commentIcon}>💬</span>
          <span className={styles.commentText}>{notes}</span>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.orderSummary}>
      {/* Header */}
      <div className={styles.orderHeader}>
        <div className={styles.orderNumber}>#123</div>
        <div className={styles.orderTotal}>
          <span className={styles.amount}>{finalTotal.toFixed(2)}</span>
          <span className={styles.currency}>EGP</span>
        </div>
      </div>

      {/* Content */}
      <div className={styles.orderContent}>
        {/* Customer Info */}
        {selectedCustomer && (
          <div className={styles.customerInfo}>
            <div className={styles.customerName}>
              👤 {selectedCustomer.name}
              {selectedCustomer.isVIP && <span className={styles.vipBadge}>VIP</span>}
            </div>
            <div className={styles.customerPhone}>
              📞 {selectedCustomer.phone1}
            </div>
            {selectedAddress && selectedAddress.addressLine && (
              <div className={styles.customerAddress}>
                📍 {selectedAddress.addressLine}
                {selectedAddress.zoneName && ` - ${selectedAddress.zoneName}`}
              </div>
            )}
          </div>
        )}

        {/* Order Items */}
        <div className={styles.orderItems}>
          {orderSummary.items.map((item) => (
            <div key={item.id} className={styles.orderItemContainer}>
              <div className={`${styles.orderItem} ${item.isExtra ? styles.extraItem : ''} ${item.isWithout ? styles.withoutItem : ''}`}>
                <div className={styles.itemDetails}>
                  <div className={styles.itemInfo}>
                    <div className={styles.itemName}>
                      {item.isExtra && <span className={styles.extraBadge}>+</span>}
                      {item.isWithout && <span className={styles.withoutBadge}>-</span>}
                      {item.quantity} X {item.product.nameArabic}
                      {item.product.hasMultiplePrices && (
                        <span className={styles.itemSizeInline}> - {item.selectedPrice.nameArabic}</span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className={styles.itemPrices}>
                  <div className={styles.itemPrice}>{item.selectedPrice.price}</div>
                  <div className={`${styles.itemTotal} ${item.isWithout ? styles.negative : ''}`}>
                    {item.totalPrice.toFixed(2)}
                  </div>
                </div>
              </div>
              
              {item.notes && renderNotes(item.notes)}
              
              {item.subItems && item.subItems.length > 0 && (
                <div className={styles.subItemsContainer}>
                  {item.subItems.map(subItem => renderSubItem(subItem))}
                </div>
              )}
              
              {item.selectedOptions && item.selectedOptions.length > 0 && !item.subItems && (
                <div className={styles.itemOptions}>
                  {renderOptions(item.selectedOptions)}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className={styles.orderFooter}>
        <div className={styles.summaryRows}>
          <div className={styles.summaryRow}>
            <span>Sub Total</span>
            <span>{orderSummary.subtotal.toFixed(2)} <small>EGP</small></span>
          </div>
          
          {deliveryCharge > 0 && (
            <div className={styles.summaryRow}>
              <span>Delivery</span>
              <span>{deliveryCharge.toFixed(2)} <small>EGP</small></span>
            </div>
          )}
          
          <div className={styles.summaryRow}>
            <span>Discount</span>
            <span>{orderSummary.discount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Tax</span>
            <span>{taxAmount.toFixed(2)} <small>EGP</small></span>
          </div>
          
          <div className={styles.summaryRow}>
            <span>Service</span>
            <span>{orderSummary.service.toFixed(2)} <small>EGP</small></span>
          </div>
        </div>

        <div className={styles.totalRow}>
          <span>Total</span>
          <span>{finalTotal.toFixed(2)} <small>EGP</small></span>
        </div>

              <div className={styles.backButtonContainer}>
        <button className={styles.backButton} onClick={onGoBack}>
          رجوع
        </button>
      </div>
      </div>
    </div>
  );
};

export default PaymentOrderSummary;

===== src/Pages/pos/newSales/components/paymentPopup components/PaymentRight.tsx =====
import React from 'react';
import styles from './styles/PaymentRight.module.css';

interface PaymentMethod {
  id: string;
  name: string;
  amount: number;
}

interface PaymentRightProps {
  availablePaymentMethods: string[];
  selectedPayments: PaymentMethod[];
  onPaymentMethodAdd: (method: string, amount: number) => void;
  onPaymentMethodRemove: (id: string) => void;
  onFinishPayment: () => void;
  currentAmount: number;
  remainingAmount: number;
  onAmountReset: () => void; // إضافة function لتصفير المبلغ
}

const PaymentRight: React.FC<PaymentRightProps> = ({
  availablePaymentMethods = [],
  selectedPayments,
  onPaymentMethodAdd,
  onPaymentMethodRemove,
  onFinishPayment,
  currentAmount,
  remainingAmount,
  onAmountReset
}) => {
  const handleSelect = (method: string) => {
    // التأكد من وجود مبلغ قبل الإضافة
    if (currentAmount > 0) {
      onPaymentMethodAdd(method, currentAmount);
      onAmountReset(); // تصفير المبلغ بعد الإضافة
    }
  };

  // البحث عن طريقة دفع موجودة لتحديث مبلغها
  const getPaymentMethodTotal = (methodName: string) => {
    return selectedPayments
      .filter(payment => payment.name === methodName)
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  // التحقق من إمكانية إنهاء الدفع
  const canFinish = selectedPayments.length > 0;

  if (availablePaymentMethods.length === 0) {
    return (
      <div className={styles.container}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100%',
          fontFamily: 'Cairo, sans-serif',
          color: '#666'
        }}>
          جاري تحميل طرق الدفع...
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* زر الإنهاء في الأعلى */}
      <button 
        className={`${styles.finishBtn} ${!canFinish ? styles.disabled : ''}`}
        onClick={onFinishPayment}
        disabled={!canFinish}
      >
        إنهاء الدفع
      </button>
      
      {/* طرق الدفع في عمودين */}
      <div className={styles.methodGrid}>
        {availablePaymentMethods.map((method) => {
          const totalForMethod = getPaymentMethodTotal(method);
          const hasPayment = totalForMethod > 0;
          
          return (
            <button
              key={method}
              className={`${styles.methodBtn} ${hasPayment ? styles.hasPayment : ''}`}
              onClick={() => handleSelect(method)}
              disabled={currentAmount <= 0} // تعطيل الزر إذا لم يكن هناك مبلغ
            >
              <div className={styles.methodContent}>
                <span className={styles.methodType}>{method}</span>
                {hasPayment && (
                  <span className={styles.methodAmount}>
                    {totalForMethod.toFixed(2)} جنيه
                  </span>
                )}
              </div>
            </button>
          );
        })}
      </div>

      {/* عرض ملخص المدفوعات المحددة */}
      {selectedPayments.length > 0 && (
        <div className={styles.selectedPayments}>
          <h4 className={styles.paymentsTitle}>المدفوعات المحددة:</h4>
          <div className={styles.paymentsList}>
            {selectedPayments.map((payment) => (
              <div key={payment.id} className={styles.selectedPayment}>
                <div className={styles.paymentInfo}>
                  <span className={styles.paymentMethod}>{payment.name}</span>
                  <span className={styles.paymentAmount}>{payment.amount.toFixed(2)} جنيه</span>
                </div>
                <button 
                  onClick={() => onPaymentMethodRemove(payment.id)}
                  className={styles.removeBtn}
                  title="حذف"
                >
                  ×
                </button>
              </div>
            ))}
          </div>
          <div className={styles.totalPayments}>
            <strong>
              إجمالي المدفوع: {selectedPayments.reduce((sum, payment) => sum + payment.amount, 0).toFixed(2)} جنيه
            </strong>
          </div>
        </div>
      )}

      {/* عرض معلومات المبلغ المتبقي */}
      <div className={styles.paymentSummary}>
        <div className={styles.summaryRow}>
          <span>المتبقي للدفع:</span>
          <span className={styles.remainingAmount}>{remainingAmount.toFixed(2)} جنيه</span>
        </div>
        {currentAmount > 0 && (
          <div className={styles.summaryRow}>
            <span>المبلغ الحالي:</span>
            <span className={styles.currentAmount}>{currentAmount.toFixed(2)} جنيه</span>
          </div>
        )}
      </div>

      {/* رسالة توضيحية */}
      {currentAmount <= 0 && (
        <div className={styles.instructionMessage}>
          <p>اكتب المبلغ أولاً ثم اختر طريقة الدفع</p>
        </div>
      )}
    </div>
  );
};

export default PaymentRight;

===== src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentCenter.module.css =====
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentCenter.module.css */

.wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  padding: 0.8rem;
  box-sizing: border-box;
  font-family: "Cairo", sans-serif;
  overflow: hidden;
  gap: 0.6rem; /* مسافة صغيرة ثابتة */
}

.headerRow {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
  height: 50px; /* ارتفاع ثابت */
}

.balanceTitle {
  font-size: 1.4rem;
  font-weight: 700;
  color: #000;
  direction: rtl;
  text-align: center;
}

.paidMethodsRow {
  background: #f8f9fa;
  border-radius: 8px;
  padding: 0.6rem;
  border-left: 4px solid #28a745;
  flex-shrink: 0;
  min-height: 40px; /* حد أدنى للارتفاع */
}

.paidMethodsInfo {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.paidMethodsLabel {
  font-size: 0.9rem;
  color: #333;
  font-weight: 600;
}

.paidMethodsAmount {
  font-size: 1rem;
  color: #28a745;
  font-weight: 700;
}

.fieldsRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
  flex-shrink: 0;
  height: 80px; /* ارتفاع ثابت */
}

.fieldBlock {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  height: 100%;
}

.label {
  font-size: 0.8rem;
  font-weight: 700;
  color: #333;
  direction: rtl;
  text-align: right;
  flex-shrink: 0;
}

.input, .remainingBox {
  padding: 0.6rem;
  font-size: 1.1rem;
  text-align: center;
  border-radius: 8px;
  font-weight: 600;
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.input {
  border: 1px solid #ccc;
  background: #fff;
}

.remainingBox {
  background-color: #0373ed;
  color: white;
}

.quickButtons {
  display: flex;
  justify-content: space-between;
  gap: 0.6rem;
  flex-shrink: 0;
  height: 45px; /* ارتفاع ثابت */
}

.quickBtn {
  flex: 1;
  background-color: #d9d9d9;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.quickBtn:hover {
  background-color: #c8c8c8;
}

.keypad {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  flex: 1; /* يأخذ المساحة المتبقية */
  min-height: 0;
  overflow: hidden;
}

.keypadRow {
  display: flex;
  justify-content: space-between;
  gap: 0.5rem;
  flex: 1; /* توزيع متساوي */
  min-height: 0;
}

.keypadBtn {
  flex: 1;
  font-size: 1rem;
  font-weight: 700;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  min-height: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypadBtn.gray {
  background-color: #d9d9d9;
}

.keypadBtn:hover {
  background-color: #f0f0f0;
}

.keypadBtn:active {
  transform: scale(0.96);
}

.changeSection {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  padding: 0.8rem;
  background: linear-gradient(135deg, #e3f2fd, #bbdefb);
  border: 2px solid #2196f3;
  border-radius: 10px;
  flex-shrink: 0;
  height: 100px; /* ارتفاع ثابت */
  overflow: hidden;
}

.changeHeader {
  display: flex;
  justify-content: center;
  flex-shrink: 0;
}

.changeSummary {
  display: flex;
  gap: 0.8rem;
  align-items: center;
  direction: rtl;
}

.summaryLabel {
  font-size: 0.85rem;
  font-weight: 600;
  color: #1976d2;
}

.summaryValue {
  font-size: 0.9rem;
  font-weight: 700;
  color: #0d47a1;
}

.changeDisplay {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.2rem;
  flex: 1;
  justify-content: center;
}

.changeLabel {
  font-size: 0.95rem;
  font-weight: 600;
  color: #1976d2;
  direction: rtl;
}

.changeAmount {
  font-size: 1.4rem;
  font-weight: 800;
  letter-spacing: 1px;
  padding: 0.3rem 0.6rem;
  border-radius: 6px;
  transition: all 0.3s ease;
}

.hasChange {
  background: linear-gradient(135deg, #28a745, #20c95e);
  color: white;
  text-shadow: 0 1px 2px rgba(0,0,0,0.2);
  box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
}

.noChange {
  background: #f8f9fa;
  color: #6c757d;
  border: 2px dashed #dee2e6;
}

/* تكيف مع دقة 1920x1080 مع zoom 125% */
@media screen and (width: 1536px) and (height: 864px) {
  .wrapper {
    padding: 0.6rem;
    gap: 0.5rem;
  }
  
  .headerRow {
    height: 45px;
  }
  
  .balanceTitle {
    font-size: 1.3rem;
  }
  
  .fieldsRow {
    height: 70px;
  }
  
  .quickButtons {
    height: 40px;
  }
  
  .changeSection {
    height: 85px;
    padding: 0.6rem;
  }
  
  .changeAmount {
    font-size: 1.2rem;
  }
}

/* للشاشات عالية الدقة مع zoom */
@media screen and (min-width: 1400px) and (max-width: 1600px) {
  .wrapper {
    gap: 0.5rem;
  }
  
  .keypadBtn {
    font-size: 0.95rem;
  }
}

===== src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentLeft.module.css =====
.container {
  width: 100%;
  height: 100%;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
  display: flex;
  flex-direction: column;
}

/* قاعدة عامة للخطوط */
:where(.container,
       .container *) { 
  font-size: var(--fs); 
}

.header {
  background: #0373ed;
  color: white;
  padding: clamp(12px, 2vw, 20px);
  text-align: center;
  border-bottom: 2px solid #e9ecef;
}

.title {
  margin: 0;
  font-family: "Cairo-Bold", Helvetica;
  font-weight: 700;
  font-size: calc(var(--fs) * 1.4);
  direction: rtl;
}

.orderSummaryWrapper {
  flex: 1;
  width: 100%;
  height: 100%;
  overflow-y: auto;
  padding: clamp(8px, 1.5vw, 16px);
}

.orderSummaryWrapper::-webkit-scrollbar {
  width: clamp(4px, 0.8vw, 8px);
}

.orderSummaryWrapper::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

.orderSummaryWrapper::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 10px;
}

.orderSummaryWrapper::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Responsive للشاشات المختلفة */
@media (max-width: 1600px) {
  .orderSummaryWrapper {
    padding: clamp(6px, 1.2vw, 14px);
  }
}

@media (max-width: 1024px) {
  .container {
    border-radius: 8px;
  }
  
  .orderSummaryWrapper {
    padding: clamp(6px, 1vw, 12px);
  }
}



===== src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentOrderSummary.module.css =====
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentOrderSummary.module.css */
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');

:root {
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
}

.orderSummary {
  width: 100%;
  height: 100%;
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
}

/* Header */
.orderHeader {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.orderNumber {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.orderTotal {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.orderTotal .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.orderTotal .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

/* Content */
.orderContent {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
}

.orderContent::-webkit-scrollbar {
  width: 6px;
}

.orderContent::-webkit-scrollbar-track {
  background: transparent;
}

.orderContent::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

/* Customer Info */
.customerInfo {
  background: #e3f2fd;
  border: 1px solid #bbdefb;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: var(--spacing-lg);
  font-family: 'Cairo', sans-serif;
}

.customerName {
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 600;
  font-size: 14px;
  color: #1976d2;
  margin-bottom: 4px;
}

.vipBadge {
  background: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
  color: #8b4513;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase;
}

.customerPhone {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #1976d2;
  font-size: 12px;
  margin-bottom: 4px;
}

.customerAddress {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #1976d2;
  font-size: 11px;
}

/* Order Items */
.orderItems {
  max-height: 50vh;
  margin-bottom: var(--spacing-md);
  scrollbar-width: thin;
}

.orderItems::-webkit-scrollbar {
  width: 4px;
}

.orderItems::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.orderItemContainer {
  margin-bottom: clamp(12px, 1.5vw, 16px);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding-bottom: clamp(8px, 1vw, 12px);
}

.orderItemContainer:last-child {
  border-bottom: none;
}

.orderItem {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  border-radius: 6px;
  margin-bottom: 0;
}

.orderItem.extraItem {
  border-left: 3px solid #28a745;
}

.orderItem.withoutItem {
  border-left: 3px solid #dc3545;
}

.itemDetails {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0;
}

.itemInfo {
  flex: 1;
  min-width: 0;
}

.itemName {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.itemSizeInline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em;
}

.extraBadge, .withoutBadge {
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.extraBadge {
  background: #28a745;
}

.withoutBadge {
  background: #dc3545;
}

.itemPrices {
  display: flex;
  align-items: center;
  gap: clamp(6px, 1vw, 10px);
  flex-shrink: 0;
  min-width: fit-content;
}

.itemPrice {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
  padding-right: clamp(6px, 1vw, 10px);
  border-right: 1px solid #ccc;
}

.itemTotal {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
  padding-left: clamp(6px, 1vw, 10px);
}

.itemTotal.negative {
  color: #dc3545;
  font-weight: 600;
}

/* Sub Items */
.subItemsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #f0f0f0;
}

.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  border-radius: 4px;
}

.subItemDetails {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.subItemBadge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.subItemPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.subItemPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd;
}

.subItemTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

.subItemTotal.negative {
  color: #dc3545;
}

/* Options */
.itemOptions {
  margin-top: 0;
  padding-left: 16px;
}

.optionDetail {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1px;
  padding: 2px 0;
  min-height: 18px;
}

.optionText {
  font-size: 10px;
  color: #666;
  font-weight: 400;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
  flex: 1;
}

.optionPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.optionPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd;
}

.optionTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

/* Comments */
.commentsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #e3f2fd;
}

.commentItem {
  display: flex;
  align-items: flex-start;
  gap: 6px;
  padding: 3px 0;
  margin-bottom: 2px;
  min-height: 20px;
}

.commentIcon {
  font-size: 10px;
  color: #2196f3;
  margin-top: 1px;
  flex-shrink: 0;
}

.commentText {
  font-size: 10px;
  color: #2196f3;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
  font-style: italic;
  word-wrap: break-word;
  flex: 1;
}

/* Footer */
.orderFooter {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summaryRows {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-sm) * 0.8);
  margin-bottom: var(--spacing-md);
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px);
  font-weight: 500;
  line-height: 1.3;
}

.summaryRow span:last-child {
  font-weight: 700;
  color: var(--text-primary);
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px);
  font-weight: 700;
  padding-top: var(--spacing-md);
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md);
}

/* Responsive */
@media (max-width: 1024px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .orderItems {
    max-height: 42vh;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 4px;
  }
}

@media (max-width: 768px) {
  .subItemName {
    font-size: 9px;
  }
  
  .subItemPrice {
    font-size: 7px;
  }
  
  .subItemTotal {
    font-size: 8px;
  }
  
  .optionText {
    font-size: 9px;
  }
  
  .optionPrice {
    font-size: 7px;
  }
  
  .optionTotal {
    font-size: 8px;
  }
  
  .commentText {
    font-size: 9px;
  }
}



/* إضافة أنماط زر الرجوع */
.backButtonContainer {
  padding: clamp(8px, 1.5vw, 16px);
}

.backButton {
  background: var(--primary-blue);
  color: white;
  border: none;
  border-radius: 8px;
  padding: clamp(12px, 2vw, 16px) clamp(24px, 4vw, 32px);
  font-size: clamp(14px, 1.6vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: 'Cairo', sans-serif;
  width: 100%;
  margin: 0 auto;
  display: block;
}

.backButton:hover {
  background: #025bb5;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.3);
}

.backButton:active {
  transform: translateY(0);
}

===== src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentRight.module.css =====
/* src/Pages/pos/newSales/components/paymentPopup components/styles/PaymentRight.module.css */

.container {
  width: 100%;
  height: 100%;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e9ecef;
  display: flex;
  flex-direction: column;
  padding: 0.8rem;
  font-family: "Cairo", sans-serif;
  gap: 0.6rem;
  min-height: 0;
}

.finishBtn {
  width: 100%;
  height: 50px; /* ارتفاع ثابت */
  font-size: 1.2rem;
  font-weight: 700;
  background: #28a745;
  color: white;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.2s ease;
  direction: rtl;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.finishBtn:hover:not(.disabled) {
  background: #218838;
}

.finishBtn.disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.methodGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.6rem;
  flex: 1;
  overflow-y: auto;
  padding-right: 0.2rem;
  min-height: 0;
  align-content: start; /* محاذاة للأعلى */
}

.methodBtn {
  padding: 0.8rem;
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.2s ease;
  direction: rtl;
  height: 65px; /* ارتفاع ثابت */
  display: flex;
  align-items: center;
}

.methodBtn:hover:not(:disabled) {
  background: #e9ecef;
  border-color: #0373ed;
}

.methodBtn:disabled {
  background: #f5f5f5;
  color: #999;
  cursor: not-allowed;
  border-color: #ddd;
}

.methodBtn.hasPayment {
  background: #e8f5e8;
  border-color: #28a745;
  color: #155724;
}

.methodBtn.hasPayment:hover {
  background: #d4edda;
}

.methodContent {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 0.2rem;
}

.methodType {
  font-size: 0.95rem;
  font-weight: 600;
  text-align: right;
}

.methodAmount {
  font-size: 0.8rem;
  font-weight: 700;
  color: #28a745;
}

.selectedPayments {
  border-top: 1px solid #e9ecef;
  padding-top: 0.6rem;
  flex-shrink: 0;
  max-height: 150px;
  overflow-y: auto;
}

.paymentsTitle {
  font-size: 1rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  direction: rtl;
  color: #333;
}

.paymentsList {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  margin-bottom: 0.5rem;
}

.selectedPayment {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.4rem;
  background: #f8f9fa;
  border-radius: 6px;
  border-right: 3px solid #0373ed;
  min-height: 40px;
}

.paymentInfo {
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
  flex: 1;
  direction: rtl;
  text-align: right;
}

.paymentMethod {
  font-weight: 600;
  color: #333;
  font-size: 0.9rem;
}

.paymentAmount {
  font-size: 0.8rem;
  color: #0373ed;
  font-weight: 600;
}

.removeBtn {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 50%;
  width: 22px;
  height: 22px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.removeBtn:hover {
  background: #c82333;
}

.totalPayments {
  padding: 0.6rem;
  background: #e9ecef;
  border-radius: 6px;
  text-align: center;
  direction: rtl;
  color: #333;
  font-size: 0.9rem;
}

.paymentSummary {
  border-top: 1px solid #e9ecef;
  padding-top: 0.6rem;
  flex-shrink: 0;
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.3rem 0;
  direction: rtl;
  font-size: 0.9rem;
}

.remainingAmount {
  color: #0373ed;
  font-weight: 700;
}

.currentAmount {
  color: #ff6b35;
  font-weight: 700;
}

.instructionMessage {
  background: #fff3cd;
  border: 1px solid #ffeaa7;
  border-radius: 8px;
  padding: 0.8rem;
  text-align: center;
  direction: rtl;
  color: #856404;
  font-weight: 600;
  flex-shrink: 0;
  font-size: 0.9rem;
}

.instructionMessage p {
  margin: 0;
}

===== src/Pages/pos/newSales/components/PaymentPopup.tsx =====
// src/Pages/pos/newSales/components/PaymentPopup.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OrderSummary as OrderSummaryType } from '../types/PosSystem';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';
import PaymentLeft from './paymentPopup components/PaymentLeft';
import PaymentCenter from './paymentPopup components/PaymentCenter';
import PaymentRight from './paymentPopup components/PaymentRight';
import * as posPaymentMethodsApi from '../../../../utils/api/pagesApi/posPaymentMethodsApi';
import styles from '../styles/PaymentPopup.module.css';
import { usePosPaymentMethods } from '../hooks/usePosPaymentMethods';

interface PaymentMethod {
  id: string;
  name: string;
  amount: number;
}

interface PaymentPopupProps {
  isOpen: boolean;
  onClose: () => void;
  orderSummary: OrderSummaryType;
  customerName: string;
  onCustomerNameChange: (name: string) => void;
  onRemoveOrderItem: (itemId: string) => void;
  onRemoveSubItem: (orderItemId: string, subItemId: string) => void;
  selectedOrderItemId: string | null;
  onOrderItemSelect: (itemId: string) => void;
  onOrderItemDoubleClick?: (item: any) => void;
  selectedCustomer: Customer | null;
  selectedAddress: CustomerAddress | null;
  onCustomerSelect: (customer: Customer, address: CustomerAddress) => void;
  orderType: string;
  onDeliveryChargeChange: (charge: number) => void;
  onPaymentComplete: (payments: PaymentMethod[]) => void;
}

const PaymentPopup: React.FC<PaymentPopupProps> = ({
  isOpen,
  onClose,
  orderSummary,
  customerName,
  onCustomerNameChange,
  onRemoveOrderItem,
  onRemoveSubItem,
  selectedOrderItemId,
  onOrderItemSelect,
  onOrderItemDoubleClick,
  selectedCustomer,
  selectedAddress,
  onCustomerSelect,
  orderType,
  onDeliveryChargeChange,
  onPaymentComplete
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

   // استدعاء hook طرق الدفع الموحدة
  const { paymentMethods, loading, error } = usePosPaymentMethods();
  const [availablePaymentMethods, setAvailablePaymentMethods] = useState<string[]>([]);
  const [selectedPayments, setSelectedPayments] = useState<PaymentMethod[]>([]);
  const [paidAmount, setPaidAmount] = useState('0');

  // حساب المبالغ
  const deliveryCharge = 0; // يمكن تمريره من props
  const subtotalWithDelivery = orderSummary.subtotal + deliveryCharge;
  const taxAmount = 0;
  const totalAmount = subtotalWithDelivery + taxAmount - orderSummary.discount;
  
  // حساب المبلغ المدفوع من طرق الدفع المحددة
  const totalPaidFromMethods = selectedPayments.reduce((sum, payment) => sum + payment.amount, 0);
  
  // حساب المبلغ المتبقي (يجب أن يُدفع نقداً)
  const remainingAmount = Math.max(0, totalAmount - totalPaidFromMethods);
  
  // المبلغ الحالي من الكيبورد
  const currentInputAmount = parseFloat(paidAmount) || 0;
  
  // حساب الباقي للعميل (التغيير) - فقط للكاش
  const changeAmount = Math.max(0, currentInputAmount - remainingAmount);

  // إغلاق عند الضغط على الخلفية
  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

 // **تهيئة الدفع الافتراضي بالكاش بقيمة الفاتورة**  
  useEffect(() => {
    if (!isOpen || !paymentMethods?.length) return;
    // إذا لا يوجد مدفوعات حالية، اجعل الكاش جاهز وحدد المبلغ افتراضاً.
    setSelectedPayments([]);
    setPaidAmount(totalAmount.toFixed(2));
    // لا نضيف فعليًا PaymentMethod، بل فقط نجهز الـ paidAmount وزر الكاش مفعّل.
  }, [isOpen, totalAmount, paymentMethods]);

  // Handlers للقسم الأوسط
  const handleAmountChange = (amount: string) => setPaidAmount(amount);
  const handleQuickAmountSelect = (amount: number) => setPaidAmount(amount.toFixed(2));

  // Handlers للقسم الأيمن
  const handlePaymentMethodAdd = (method: string, amount: number) => {
    if (amount <= 0) return;
    const newPayment: PaymentMethod = {
      id: Date.now().toString(),
      name: method,
      amount: amount
    };
    setSelectedPayments(prev => [...prev, newPayment]);
    const newRemainingAmount = Math.max(0, totalAmount - totalPaidFromMethods - amount);
    setPaidAmount(newRemainingAmount.toFixed(2));
  };

  const handlePaymentMethodRemove = (id: string) => {
    setSelectedPayments(prev => prev.filter(payment => payment.id !== id));
  };

  const handleAmountReset = () => setPaidAmount('0');

  const handleFinishPayment = () => {
    let finalPayments = [...selectedPayments];
    if (currentInputAmount > 0) {
      // أول طريقة دفع = الكاش إن وجدت وإلا أول طريقة متاحة
      const cashMethod = paymentMethods.find(
        m => m.id.toLowerCase() === 'cash' || m.name.toLowerCase() === 'كاش'
      );
      finalPayments.push({
        id: Date.now().toString(),
        name: cashMethod?.name || paymentMethods[0]?.name || 'كاش',
        amount: currentInputAmount
      });
    }
    onPaymentComplete(finalPayments);
    onClose();
  };

  if (!isOpen) return null;


  return (
    <div className={styles.overlay} ref={overlayRef}>
      <div className={styles.popup}>
        <div className={styles.header}>
          <div className={styles.logo}>
            <img src="/images/img_foodify_logo_2_78x166.png" alt="Foodify" />
          </div>
          <h2 className={styles.title}>تأكيد الدفع</h2>
          <button className={styles.closeBtn} onClick={onClose}>×</button>
        </div>

        <div className={styles.content}>
          <div className={styles.leftSection}>
            <PaymentLeft
              orderSummary={orderSummary}
              selectedCustomer={selectedCustomer}
              selectedAddress={selectedAddress}
              orderType={orderType}
              deliveryCharge={deliveryCharge}
            />
          </div>
          <div className={styles.centerSection}>
            <PaymentCenter
              totalAmount={totalAmount}
              paidAmount={paidAmount}
              remainingAmount={remainingAmount}
              changeAmount={changeAmount}
              totalPaidFromMethods={totalPaidFromMethods}
              onAmountChange={handleAmountChange}
              onQuickAmountSelect={handleQuickAmountSelect}
            />
          </div>
          <div className={styles.rightSection}>
            {loading ? (
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
                fontFamily: 'Cairo, sans-serif'
              }}>
                جاري تحميل طرق الدفع...
              </div>
            ) : error ? (
              <div style={{ color: 'red', textAlign: 'center', marginTop: 20 }}>{error}</div>
            ) : (
              <PaymentRight
                availablePaymentMethods={paymentMethods.map(m => m.name)}
                selectedPayments={selectedPayments}
                onPaymentMethodAdd={handlePaymentMethodAdd}
                onPaymentMethodRemove={handlePaymentMethodRemove}
                onFinishPayment={handleFinishPayment}
                currentAmount={currentInputAmount}
                remainingAmount={remainingAmount}
                onAmountReset={handleAmountReset}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentPopup;
===== src/Pages/pos/newSales/components/PriceSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/PriceSelectionPopup.tsx
import React, { useEffect, useRef } from 'react';
import { PosProduct, PosPrice } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/PriceSelectionPopup.module.css';

interface PriceSelectionPopupProps {
  product: PosProduct | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onSelectPrice: (price: PosPrice) => void;
}

const PriceSelectionPopup: React.FC<PriceSelectionPopupProps> = ({
  product,
  quantity,
  isOpen,
  onClose,
  onSelectPrice
}) => {
  const overlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleOverlayClick = (e: MouseEvent) => {
      if (overlayRef.current && e.target === overlayRef.current) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleOverlayClick);
    }

    return () => {
      document.removeEventListener('mousedown', handleOverlayClick);
    };
  }, [isOpen, onClose]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen || !product) return null;

  return (
    <div className={styles.popupOverlay} ref={overlayRef}>
      <div className={styles.popupContent}>
        <div className={styles.popupHeader}>
          <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
          <button className={styles.popupClose} onClick={onClose}>
            <CloseIcon />
          </button>
        </div>
        
        <div className={styles.popupBody}>
          
          <div className={styles.pricesGrid}>
            {product.productPrices.map((price) => (
              <button
                key={price.id}
                className={styles.priceCard}
                onClick={() => onSelectPrice(price)}
              >
                <div className={styles.priceName}>{price.nameArabic}</div>
                <div className={styles.priceValue}>
                  <span className={styles.price}>{price.price}</span>
                  <span className={styles.currency}>EGP</span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSelectionPopup;

===== src/Pages/pos/newSales/components/ProductCard.tsx =====
// src/Pages/pos/newSales/components/ProductCard.tsx
import React from 'react';
import { PosProduct } from '../types/PosSystem';
import styles from '../styles/ProductCard.module.css';

interface ProductCardProps {
  product: PosProduct;
  onClick: (product: PosProduct) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onClick }) => {
  const handleClick = () => {
    onClick(product);
  };

  // تحديد ما إذا كان المنتج له سعر واحد أم أكثر
  const hasMultiplePrices = product.hasMultiplePrices;
  const singlePrice = !hasMultiplePrices && product.productPrices.length > 0 
    ? product.productPrices[0].price 
    : null;

  return (
    <div className={styles.productCard} onClick={handleClick}>
      <div className={styles.productImageContainer}>
        <img 
          src={product.image} 
          alt={product.nameArabic} 
          className={styles.productImage}
        />
        
        {/* عرض السعر على الصورة إذا كان المنتج له سعر واحد */}
        {singlePrice !== null && (
          <div className={styles.priceOverlay}>
            {singlePrice.toFixed(2)} EGP
          </div>
        )}
      </div>
      
      <div className={styles.productInfo}>
        <h3 className={styles.productName}>
          {product.nameArabic}
        </h3>
      </div>
    </div>
  );
};

export default ProductCard;

===== src/Pages/pos/newSales/components/ProductOptionsPopup.tsx =====
// src/Pages/pos/newSales/components/ProductOptionsPopup.tsx
import React, { useState, useEffect } from 'react';
import { PosProduct, PosPrice, ProductOptionGroup, ProductOptionItem, SelectedOption } from '../types/PosSystem';
import CloseIcon from '@mui/icons-material/Close';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import CheckIcon from '@mui/icons-material/Check';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import styles from '../styles/ProductOptionsPopup.module.css';

interface ProductOptionsPopupProps {
  product: PosProduct | null;
  selectedPrice: PosPrice | null;
  quantity: number;
  isOpen: boolean;
  onClose: () => void;
  onComplete: (selectedOptions: SelectedOption[]) => void;
}

const ProductOptionsPopup: React.FC<ProductOptionsPopupProps> = ({
  product,
  selectedPrice,
  quantity,
  isOpen,
  onClose,
  onComplete
}) => {
  const [selectedOptions, setSelectedOptions] = useState<SelectedOption[]>([]);
  const [groupSelections, setGroupSelections] = useState<{[groupId: string]: {[itemId: string]: number}}>({});
  const [currentGroupIndex, setCurrentGroupIndex] = useState(0);

  useEffect(() => {
    if (isOpen && product) {
      setSelectedOptions([]);
      setGroupSelections({});
      setCurrentGroupIndex(0);
    }
  }, [isOpen, product]);

  if (!isOpen || !product || !selectedPrice) return null;

  const optionGroups = product.productOptionGroups || [];

  if (optionGroups.length === 0) {
    onComplete([]);
    return null;
  }

  const currentGroup = optionGroups[currentGroupIndex];

  const handleItemSelection = (group: ProductOptionGroup, item: ProductOptionItem, change: number) => {
    const newSelections = { ...groupSelections };
    
    if (!newSelections[group.id]) {
      newSelections[group.id] = {};
    }
    
    const currentCount = newSelections[group.id][item.id] || 0;
    const newCount = Math.max(0, currentCount + change);
    
    const totalSelected = Object.values(newSelections[group.id]).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      if (newCount + otherItemsTotal <= group.maxSelection) {
        newSelections[group.id][item.id] = newCount;
      }
    } else {
      if (newCount > 0) {
        newSelections[group.id] = { [item.id]: 1 };
      } else {
        newSelections[group.id][item.id] = 0;
      }
    }
    
    setGroupSelections(newSelections);
  };

  const handleCardClick = (group: ProductOptionGroup, item: ProductOptionItem) => {
    const currentCount = groupSelections[group.id]?.[item.id] || 0;
    const totalSelected = Object.values(groupSelections[group.id] || {}).reduce((sum, count) => sum + count, 0);
    const otherItemsTotal = totalSelected - currentCount;
    
    if (group.allowMultiple) {
      // للمجموعات المتعددة: زيادة الكمية
      if (otherItemsTotal < group.maxSelection) {
        handleItemSelection(group, item, 1);
      }
    } else {
      // للمجموعات الفردية: تغيير الحالة
      handleItemSelection(group, item, currentCount > 0 ? -1 : 1);
    }
  };

  const isCurrentGroupValid = (): boolean => {
    const selections = groupSelections[currentGroup.id] || {};
    const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
    
    if (currentGroup.isRequired) {
      return totalSelected >= currentGroup.minSelection;
    }
    
    return true; // المجموعات غير المطلوبة صحيحة دائما
  };

  const isAllGroupsValid = (): boolean => {
    return optionGroups.every(group => {
      const selections = groupSelections[group.id] || {};
      const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);
      
      if (group.isRequired) {
        return totalSelected >= group.minSelection;
      }
      
      return totalSelected === 0 || totalSelected >= group.minSelection;
    });
  };

  const handleNext = () => {
    if (currentGroupIndex < optionGroups.length - 1) {
      setCurrentGroupIndex(currentGroupIndex + 1);
    }
  };

  const handlePrevious = () => {
    if (currentGroupIndex > 0) {
      setCurrentGroupIndex(currentGroupIndex - 1);
    }
  };

  const handleComplete = () => {
    const allSelectedOptions: SelectedOption[] = [];
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            allSelectedOptions.push({
              groupId: group.id,
              itemId: itemId,
              itemName: item.name,
              quantity: count,
              extraPrice: item.extraPrice,
              isCommentOnly: item.isCommentOnly
            });
          }
        }
      });
    });
    
    onComplete(allSelectedOptions);
  };

  const calculateTotalPrice = () => {
    let total = selectedPrice.price * quantity;
    
    optionGroups.forEach(group => {
      const selections = groupSelections[group.id] || {};
      Object.entries(selections).forEach(([itemId, count]) => {
        if (count > 0) {
          const item = group.optionItems.find(i => i.id === itemId);
          if (item) {
            total += item.extraPrice * count * quantity;
          }
        }
      });
    });
    
    return total;
  };

  const selections = groupSelections[currentGroup.id] || {};
  const totalSelected = Object.values(selections).reduce((sum, count) => sum + count, 0);

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContent}>
<div className={styles.popupHeader}>
  <div className={styles.popupTitleSection}>
    <h3 className={styles.popupTitle}>{product.nameArabic}</h3>
    <div className={styles.popupSubtitle}>
      {selectedPrice.nameArabic} - الكمية: {quantity}
    </div>
  </div>
  <div style={{ display: 'flex', gap: '8px' }}>
    {currentGroupIndex > 0 && (
      <button 
        className={styles.popupClose} 
        onClick={handlePrevious}
        title="الرجوع للمجموعة السابقة"
      >
        <ArrowBackIcon />
      </button>
    )}
    <button className={styles.popupClose} onClick={onClose}>
      <CloseIcon />
    </button>
  </div>
</div>
        
        <div className={styles.popupBody}>
          {/* مؤشر التقدم */}
          <div className={styles.progressIndicator}>
            <div className={styles.progressText}>
              مجموعة {currentGroupIndex + 1} من {optionGroups.length}
            </div>
            <div className={styles.progressBar}>
              <div 
                className={styles.progressFill} 
                style={{ width: `${((currentGroupIndex + 1) / optionGroups.length) * 100}%` }}
              />
            </div>
          </div>

          <div className={styles.optionsContainer}>
            <div className={styles.optionGroup}>
              <div className={styles.groupHeader}>
                <div className={styles.groupTitle}>
                  <span className={styles.groupName}>{currentGroup.name}</span>
                  {currentGroup.isRequired && (
                    <span className={styles.requiredBadge}>مطلوب</span>
                  )}
                </div>
                <div className={styles.groupInfo}>
                  <span className={styles.selectionCount}>
                    {totalSelected} من {currentGroup.maxSelection}
                  </span>
                  {currentGroup.minSelection > 0 && (
                    <span className={styles.minSelection}>
                      (الحد الأدنى: {currentGroup.minSelection})
                    </span>
                  )}
                </div>
              </div>
              
              <div className={styles.optionsGrid}>
                {currentGroup.optionItems
                  .sort((a, b) => a.sortOrder - b.sortOrder)
                  .map((item) => {
                    const itemCount = selections[item.id] || 0;
                    const canAdd = currentGroup.allowMultiple 
                      ? totalSelected < currentGroup.maxSelection
                      : itemCount === 0;
                    
                    return (
                      <div 
                        key={item.id} 
                        className={`${styles.optionCard} ${itemCount > 0 ? styles.selected : ''}`}
                        onClick={() => handleCardClick(currentGroup, item)}
                      >
                        <div className={styles.optionContent}>
                          <div className={styles.optionInfo}>
                            <div className={styles.optionName}>{item.name}</div>
                            {item.extraPrice > 0 && (
                              <div className={styles.optionPrice}>
                                +{item.extraPrice} EGP
                              </div>
                            )}
                          </div>
                          
                          <div className={styles.optionControls}>
                            {currentGroup.allowMultiple ? (
                              <div className={styles.quantitySection}>
                                {itemCount > 0 && (
                                  <button
                                    className={styles.removeBtn}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleItemSelection(currentGroup, item, -1);
                                    }}
                                  >
                                    <RemoveIcon />
                                  </button>
                                )}
                                
                                {itemCount > 0 ? (
                                  <div className={styles.quantityBadge}>
                                    {itemCount}
                                  </div>
                                ) : canAdd ? (
                                  <div className={styles.addIcon}>
                                    <AddIcon />
                                  </div>
                                ) : (
                                  <div className={styles.maxReached}>
                                    <span>الحد الأقصى</span>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className={styles.singleSelect}>
                                {itemCount > 0 ? (
                                  <div className={styles.selectedIcon}>
                                    <CheckIcon />
                                  </div>
                                ) : (
                                  <div className={styles.unselectedIcon}>
                                    <AddIcon />
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
          
          <div className={styles.totalSection}>
            <div className={styles.totalRow}>
              <span className={styles.totalLabel}>الإجمالي:</span>
              <span className={styles.totalValue}>{calculateTotalPrice().toFixed(2)} EGP</span>
            </div>
          </div>
        </div>
        
        <div className={styles.popupFooter}>
          <button className={styles.btnCancel} onClick={onClose}>
            إلغاء
          </button>
          
          {currentGroupIndex < optionGroups.length - 1 ? (
            <button
              className={styles.btnConfirm}
              onClick={handleNext}
              disabled={currentGroup.isRequired && !isCurrentGroupValid()}
            >
              التالي
              <ArrowForwardIcon />
            </button>
          ) : (
            <button
              className={styles.btnConfirm}
              onClick={handleComplete}
              disabled={!isAllGroupsValid()}
            >
              تأكيد الاختيار
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductOptionsPopup;

===== src/Pages/pos/newSales/components/TableSelectionPopup.tsx =====
// src/Pages/pos/newSales/components/TableSelectionPopup.tsx
import React, { useState, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import CloseIcon from '@mui/icons-material/Close';
import styles from '../styles/TableSelectionPopup.module.css';

interface TableSelectionPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSelectTable: (selection: TableSelection) => void;
  tableSections: TableSection[];
}

const TableSelectionPopup: React.FC<TableSelectionPopupProps> = ({
  isOpen,
  onClose,
  onSelectTable,
  tableSections
}) => {
  const [selectedSection, setSelectedSection] = useState<TableSection | null>(null);

  useEffect(() => {
    if (isOpen && tableSections.length > 0) {
      setSelectedSection(tableSections[0]);
    }
  }, [isOpen, tableSections]);

  if (!isOpen) return null;

  const handleSectionClick = (section: TableSection) => {
    setSelectedSection(section);
  };

  const handleTableClick = (table: Table) => {
    if (selectedSection && !table.isOccupied) {
      onSelectTable({
        section: selectedSection,
        table: table
      });
    }
  };

  const displayedTables = selectedSection?.tables || [];

  return (
    <div className={styles.popupOverlay}>
      <div className={styles.popupContainer}>
        <div className={styles.posSystem}>
          {/* زر الإغلاق */}
          <button className={styles.closeBtn} onClick={onClose}>
            <CloseIcon />
            <span>إغلاق</span>
          </button>

          <main className={styles.mainContent}>
            {/* قسم الطاولات */}
            <section className={styles.productsSection}>
              <div className={styles.productGrid}>
                {displayedTables.map((table) => (
                  <div
                    key={table.id}
                    className={`${styles.productItem} ${table.isOccupied ? styles.occupied : ''}`}
                    onClick={() => handleTableClick(table)}
                  >
                    <div className={styles.productImage}>
                      <img 
                        src="/images/default-table.png" 
                        alt={table.name}
                        onError={(e) => {
                          e.currentTarget.src = '/images/placeholder.png';
                        }}
                      />
                    </div>
                    <div className={styles.productName}>
                      <span>{table.name}</span>
                      <small>{table.capacity} أشخاص</small>
                      <div className={`${styles.status} ${table.isOccupied ? styles.occupied : styles.available}`}>
                        {table.isOccupied ? 'مشغولة' : 'متاحة'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>

            {/* الشريط الجانبي للأقسام */}
            <aside className={styles.categoriesSidebar}>
              <div className={styles.categoriesList}>
                {tableSections.map((section) => (
                  <div
                    key={section.id}
                    className={`${styles.categoryItem} ${selectedSection?.id === section.id ? styles.active : ''}`}
                    onClick={() => handleSectionClick(section)}
                  >
                    <img 
                      src="/images/default-section.png" 
                      alt={section.name}
                      onError={(e) => {
                        e.currentTarget.src = '/images/placeholder.png';
                      }}
                    />
                    <div>
                      <span>{section.name}</span>
                      <br />
                      <small>{section.serviceCharge}% خدمة</small>
                    </div>
                  </div>
                ))}
              </div>
            </aside>
          </main>
        </div>
      </div>
    </div>
  );
};

export default TableSelectionPopup;

===== src/Pages/pos/newSales/components/ui/Button.tsx =====
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  fullWidth = false,
  className = '',
  ...props 
}) => {
  const baseClasses = 'font-nunito font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-blue text-white hover:bg-blue-700 disabled:bg-gray-400',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 disabled:bg-gray-100',
    outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:border-gray-200 disabled:text-gray-400',
  };
  
  const sizes = {
    small: 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm',
    medium: 'px-3 py-1.5 text-sm sm:px-4 sm:py-2 sm:text-base',
    large: 'px-4 py-2 text-base sm:px-6 sm:py-3 sm:text-lg',
  };
  
  const buttonClasses = `
    ${baseClasses} 
    ${variants[variant]} 
    ${sizes[size]} 
    ${fullWidth ? 'w-full' : ''} 
    ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}
    ${className}
  `.trim().replace(/\s+/g, ' ');
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClasses}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
===== src/Pages/pos/newSales/components/ui/ChipView.tsx =====
import React, { useState } from 'react';

interface ChipItemProps {
  children: React.ReactNode;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  selected?: boolean;
  onClick?: () => void;
  variant?: 'extra' | 'without' | 'offer';
  className?: string;
}

interface ChipViewProps {
  children: React.ReactNode;
  className?: string;
}

const ChipItem: React.FC<ChipItemProps> = ({
  children,
  leftImage,
  selected = false,
  onClick,
  variant = 'extra',
  className = ''
}) => {
  const variants = {
    extra: 'bg-primary-green text-white',
    without: 'bg-primary-red text-white',
    offer: 'bg-primary-orange text-white'
  };

  return (
    <button
      type="button"
      onClick={onClick}
      className={`
        inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-nunito text-sm sm:text-base font-medium
        transition-all duration-200 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current
        ${variants[variant]}
        ${selected ? 'ring-2 ring-offset-2 ring-current' : ''}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    >
      {leftImage && (
        <img
          src={leftImage.src}
          alt=""
          className="w-4 h-4 sm:w-6 sm:h-6"
        />
      )}
      {children}
    </button>
  );
};

const ChipView: React.FC<ChipViewProps> = ({ children, className = '' }) => {
  return (
    <div className={`flex flex-wrap gap-2 sm:gap-4 ${className}`}>
      {children}
    </div>
  );
};

export { ChipView, ChipItem };
export default ChipView;
===== src/Pages/pos/newSales/components/ui/Dropdown.tsx =====
import React, { useState } from 'react';

interface DropdownProps {
  placeholder?: string;
  options?: string[];
  value?: string;
  onChange?: (value: string) => void;
  rightImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  placeholder = 'Select option',
  options = ['Option 1', 'Option 2', 'Option 3'],
  value,
  onChange,
  rightImage,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState(value || placeholder);

  const handleSelect = (option: string) => {
    setSelectedValue(option);
    setIsOpen(false);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between gap-2 px-3 py-1 text-left rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue transition-colors duration-200"
      >
        <span className="font-nunito text-sm sm:text-base text-primary truncate">
          {selectedValue}
        </span>
        {rightImage && (
          <img
            src={rightImage.src}
            alt="dropdown arrow"
            className={`w-4 h-4 sm:w-6 sm:h-6 transition-transform duration-200 ${
              isOpen ? 'rotate-180' : ''
            }`}
          />
        )}
      </button>

      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-card border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-auto">
          {options.map((option, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelect(option)}
              className="w-full px-3 py-2 text-left font-nunito text-sm sm:text-base text-primary hover:bg-gray-50 focus:outline-none focus:bg-gray-50 transition-colors duration-200"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;
===== src/Pages/pos/newSales/components/ui/EditText.tsx =====
import React, { useState } from 'react';

interface EditTextProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  type?: 'text' | 'number' | 'email' | 'password';
  disabled?: boolean;
  required?: boolean;
  className?: string;
  variant?: 'primary' | 'secondary';
  style?: React.CSSProperties;
}

const EditText: React.FC<EditTextProps> = ({
  placeholder = '',
  value,
  onChange,
  type = 'text',
  disabled = false,
  required = false,
  className = '',
  variant = 'primary'
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const variants = {
    primary: 'bg-primary-blue text-white placeholder-white/70 border-primary-blue focus:ring-primary-blue',
    secondary: 'bg-card text-primary placeholder-secondary border-gray-300 focus:ring-primary-blue focus:border-primary-blue'
  };

  return (
    <input
      type={type}
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      disabled={disabled}
      required={required}
      className={`
        w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base font-bold
        border rounded-lg transition-colors duration-200
        focus:outline-none  focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${variants[variant]}
        ${className}
      `.trim().replace(/\s+/g, ' ')}
    />
  );
};

export default EditText;
===== src/Pages/pos/newSales/components/ui/SearchView.tsx =====
import React, { useState } from 'react';

interface SearchViewProps {
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  onSearch?: (value: string) => void;
  leftImage?: {
    src: string;
    width: number;
    height: number;
  };
  className?: string;
}

const SearchView: React.FC<SearchViewProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  leftImage,
  className = ''
}) => {
  const [searchValue, setSearchValue] = useState(value || '');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setSearchValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchValue);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && onSearch) {
      onSearch(searchValue);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={`relative ${className}`}>
      <div className="relative">
        {leftImage && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <img
              src={leftImage.src}
              alt="search"
              className="w-4 h-4 sm:w-5 sm:h-5 text-secondary"
            />
          </div>
        )}
        <input
          type="text"
          value={searchValue}
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          placeholder={placeholder}
          className={`
            w-full px-3 py-2 sm:px-4 sm:py-3 font-nunito text-sm sm:text-base
            bg-card border border-gray-300 rounded-lg
            text-primary placeholder-secondary
            focus:outline-none focus:ring-2 focus:ring-primary-blue focus:border-primary-blue
            transition-colors duration-200
            ${leftImage ? 'pl-10 sm:pl-12' : ''}
          `.trim().replace(/\s+/g, ' ')}
        />
      </div>
    </form>
  );
};

export default SearchView;
===== src/Pages/pos/newSales/hooks/useDataManager.tsx =====
// src/Pages/pos/newSales/hooks/useDataManager.tsx
import { useState, useEffect, useCallback } from 'react';
import { PosProduct, CategoryItem } from '../types/PosSystem';
import * as posService from '../../../../services/posService';

interface DataState {
  mainProducts: PosProduct[];
  mainCategories: CategoryItem[];
  additionProducts: PosProduct[];
  additionCategories: CategoryItem[];
  normalModeProducts: PosProduct[];
  normalModeCategories: CategoryItem[];
  loading: boolean;
  error: string | null;
  defaultCategoryId: string | null;
}

export const useDataManager = () => {
  const [dataState, setDataState] = useState<DataState>({
    mainProducts: [],
    mainCategories: [],
    additionProducts: [],
    additionCategories: [],
    normalModeProducts: [],
    normalModeCategories: [],
    loading: true,
    error: null,
    defaultCategoryId: null
  });

  const loadAllData = useCallback(async () => {
    try {
      setDataState(prev => ({ ...prev, loading: true, error: null }));

      // تحميل البيانات من posService (التي تحتوي على productType)
      const [mainProducts, additionProducts] = await Promise.all([
        posService.getAllPosProducts(),
        posService.getAdditionProducts()
      ]);

      // تحويل البيانات إلى النوع المطلوب
      const convertedMainProducts: PosProduct[] = mainProducts.map(product => ({
        ...product,
        productType: product.productType || 1 // ضمان وجود productType
      }));

      const convertedAdditionProducts: PosProduct[] = additionProducts.map(product => ({
        ...product,
        productType: product.productType || 3 // ضمان وجود productType
      }));

      const [mainCategories, additionCategories] = await Promise.all([
        posService.getAllCategories(mainProducts),
        posService.getCategoriesByProductType(3)
      ]);

      // تحويل الفئات إلى النوع المطلوب
      const convertedMainCategories: CategoryItem[] = mainCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const convertedAdditionCategories: CategoryItem[] = additionCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 3
        }))
      }));

      // دمج المنتجات للعرض العادي
      const normalModeProducts = [...convertedMainProducts, ...convertedAdditionProducts];
      const normalModeCategories = await posService.getAllCategories([...mainProducts, ...additionProducts]);
      
      const convertedNormalModeCategories: CategoryItem[] = normalModeCategories.map(category => ({
        ...category,
        products: category.products?.map(product => ({
          ...product,
          productType: product.productType || 1
        }))
      }));

      const rootMainCategories = convertedNormalModeCategories.filter(cat => !cat.parentId);
      const defaultCategoryId = rootMainCategories.length > 0 ? rootMainCategories[0].id : null;

      setDataState({
        mainProducts: convertedMainProducts,
        mainCategories: convertedMainCategories,
        additionProducts: convertedAdditionProducts,
        additionCategories: convertedAdditionCategories,
        normalModeProducts,
        normalModeCategories: convertedNormalModeCategories,
        loading: false,
        error: null,
        defaultCategoryId
      });

    } catch (error) {
      console.error('Error loading data:', error);
      setDataState(prev => ({
        ...prev,
        loading: false,
        error: 'فشل في تحميل البيانات'
      }));
    }
  }, []);

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // دالة للحصول على المنتجات المفلترة حسب الوضع
  const getProducts = useCallback((isAdditionMode: boolean): PosProduct[] => {
    if (isAdditionMode) {
      return dataState.additionProducts.filter(product => product.productType === 3);
    }
    return dataState.normalModeProducts;
  }, [dataState.additionProducts, dataState.normalModeProducts]);

  // دالة للحصول على الفئات المفلترة حسب الوضع
  const getCategories = useCallback((isAdditionMode: boolean): CategoryItem[] => {
    if (isAdditionMode) {
      return dataState.additionCategories.filter(category => 
        category.products && category.products.some(product => product.productType === 3)
      );
    }
    return dataState.normalModeCategories;
  }, [dataState.additionCategories, dataState.normalModeCategories]);

  // إضافة دوال مساعدة متوافقة مع posService

const searchProducts = useCallback((products: PosProduct[], query: string): PosProduct[] => {
  if (!query.trim()) return [];
  
  const searchTerm = query.toLowerCase();
  return products.filter(product => 
    product.nameArabic.toLowerCase().includes(searchTerm) ||
    product.name.toLowerCase().includes(searchTerm)
  );
}, []);

  const getProductsByScreenId = useCallback((products: PosProduct[], screenId: string): PosProduct[] => {
    return products.filter(product => product.categoryId === screenId);
  }, []);

  const hasProductOptions = useCallback((product: PosProduct): boolean => {
    return !!(product.productOptionGroups && product.productOptionGroups.length > 0);
  }, []);

  return {
    ...dataState,
    loadAllData,
    getProducts,
    getCategories,
    // إضافة الدوال المساعدة
    searchProducts,
    getProductsByScreenId,
    hasProductOptions,
    // مؤشرات الحالة
    isLoading: dataState.loading,
    hasError: !!dataState.error,
    isDataReady: !dataState.loading && !dataState.error && dataState.normalModeProducts.length > 0
  };
};

===== src/Pages/pos/newSales/hooks/usePosPaymentMethods.tsx =====
// src/Pages/pos/newSales/hooks/usePosPaymentMethods.ts
import { useState, useEffect } from "react";
import * as posPaymentMethodsApi from 'src/utils/api/pagesApi/posPaymentMethodsApi';

export interface PaymentMethod {
  id: string;
  name: string;
  safeOrAccountID?: string | null;
  safeOrAccount?: any;
}

function isUUID(id: string) {
  // detect uuid-like
  return !!id && id.length > 20 && id.includes("-");
}

function isManualMethod(method: PaymentMethod) {
  // methods added by restaurant (id is uuid)
  return isUUID(method.id);
}
function isDefaultCash(method: PaymentMethod) {
  return method.id.toLowerCase() === 'cash' || method.name.toLowerCase() === 'كاش';
}
function isDefaultVisa(method: PaymentMethod) {
  return method.id.toLowerCase() === 'visa' || method.name.toLowerCase() === 'فيزا';
}
function isDefaultBuiltIn(method: PaymentMethod) {
  // ids like visa/cash/instapay/wallet/isntapay/etc (not pure uuid)
  return !isManualMethod(method) && !isDefaultCash(method) && !isDefaultVisa(method);
}

function sortPaymentMethods(methods: PaymentMethod[]): PaymentMethod[] {
  const cash = methods.find(isDefaultCash);
  const visa = methods.find(isDefaultVisa);

  // Exclude cash/visa for building the rest
  const rest = methods.filter(
    m => !isDefaultCash(m) && !isDefaultVisa(m)
  );
  const builtIn = rest.filter(isDefaultBuiltIn);
  const manual = rest.filter(isManualMethod);

  const result: PaymentMethod[] = [];
  if (cash) result.push(cash);
  if (visa) result.push(visa);
  result.push(...builtIn);
  result.push(...manual);
  return result;
}

export function usePosPaymentMethods() {
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    async function fetch() {
      try {
        setLoading(true);
        const res = await posPaymentMethodsApi.getAll();
        const usable = Array.isArray(res)
          ? res.filter((m) =>
              !['CL', 'ضيافة', 'نقاط'].includes(m.id)
            )
          : [];
        const sorted = sortPaymentMethods(usable);
        if (mounted) {
          setMethods(sorted);
          setLoading(false);
        }
      } catch (err: any) {
        setError('حدث خطأ أثناء تحميل طرق الدفع');
        setLoading(false);
        setMethods([]);
      }
    }
    fetch();
    return () => {
      mounted = false;
    };
  }, []);

  return { paymentMethods: methods, loading, error };
}

===== src/Pages/pos/newSales/hooks/useTableManager.tsx =====
// src/Pages/pos/newSales/hooks/useTableManager.tsx
import { useState, useCallback, useEffect } from 'react';
import { TableSection, Table, TableSelection } from '../types/TableSystem';
import * as tableSectionsApi from '../../../../utils/api/pagesApi/tableSectionsApi';
import { useError } from '../../../../contexts/ErrorContext';

export const useTableManager = () => {
  const [tableSections, setTableSections] = useState<TableSection[]>([]);
  const [selectedTable, setSelectedTable] = useState<TableSelection | null>(null);
  const [isChooseTable] = useState<boolean>(true); // سيتم ملؤه من الإعدادات لاحقاً
  const [loading, setLoading] = useState(false);
  const { showSuccess, showWarning } = useError();

  // تحميل الأقسام والطاولات
const loadTableSections = useCallback(async () => {
  try {
    setLoading(true);
    const sections = await tableSectionsApi.getAll();
    
    // تحويل البيانات للنوع المطلوب
    const convertedSections: TableSection[] = sections.map(section => ({
      ...section,
      image: '/images/default-section.png', // صورة افتراضية للقسم
      tables: section.tables.map(table => ({
        ...table,
        isOccupied: false, // هنا يمكن جلب الحالة الحقيقية من API آخر
        image: '/images/default-table.png' // صورة افتراضية للطاولة
      }))
    }));
    
    setTableSections(convertedSections);
  } catch (error) {
    console.error('Error loading table sections:', error);
    setTableSections([]);
  } finally {
    setLoading(false);
  }
}, []);

  useEffect(() => {
    loadTableSections();
  }, [loadTableSections]);

  const selectTable = useCallback((selection: TableSelection) => {
    setSelectedTable(selection);
        showSuccess(`تم اختيار طاولة ${selection.table.name} - ${selection.section.name}`);

  }, []);

  const clearSelectedTable = useCallback(() => {
    setSelectedTable(null);
  }, []);

  const getTableDisplayName = useCallback((): string => {
    if (!selectedTable) return 'Table';
    return `${selectedTable.section.name} / ${selectedTable.table.name}`;
  }, [selectedTable]);

  const getServiceCharge = useCallback((): number => {
    if (!selectedTable) return 0;
    return selectedTable.section.serviceCharge;
  }, [selectedTable]);

  const isTableRequired = useCallback((orderType: string): boolean => {
    return isChooseTable && orderType === 'Dine-in';
  }, [isChooseTable]);

  const canAddProduct = useCallback((orderType: string): boolean => {
    if (!isTableRequired(orderType)) return true;
    return selectedTable !== null;
  }, [selectedTable, isTableRequired]);


  // إضافة دالة للتحقق مع عرض الرسالة
  const checkTableSelection = useCallback((orderType: string): boolean => {
    if (!canAddProduct(orderType)) {
      showWarning('يجب اختيار الطاولة أولاً');
      return false;
    }
    return true;
  }, [canAddProduct, showWarning]);

  return {
    tableSections,
    selectedTable,
    isChooseTable,
    loading,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct,
    checkTableSelection, // إضافة الدالة الجديدة
    loadTableSections
  };
};






===== src/Pages/pos/newSales/index.tsx =====
// src/Pages/pos/newSales/index.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { PosProduct, CategoryItem, OrderSummary as OrderSummaryType, OrderItem, PosPrice, SelectedOption } from './types/PosSystem';
import * as posService from '../../../services/posService';
import PriceSelectionPopup from './components/PriceSelectionPopup';
import ProductOptionsPopup from './components/ProductOptionsPopup';
import ProductCard from './components/ProductCard';
import Header from './components/common/Header';
import ActionButtons from './components/ActionButtons';
import OrderSummary from './components/OrderSummary';
import { useOrderManager } from './components/OrderManager';
import { useDataManager } from './hooks/useDataManager';
import './styles/responsive.css';
import './styles/popup.css';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import OrderItemDetailsPopup from './components/OrderItemDetailsPopup';
import TableSelectionPopup from './components/TableSelectionPopup';
import { useTableManager } from './hooks/useTableManager';
import { TableSelection } from './types/TableSystem';
import { useError } from '../../../contexts/ErrorContext';
import * as deliveryCompaniesApi from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { DeliveryCompany } from '../../../utils/api/pagesApi/deliveryCompaniesApi';
import { Customer, CustomerAddress } from 'src/utils/api/pagesApi/customersApi';

const PosSystem: React.FC = () => {
  const [keypadValue, setKeypadValue] = useState('0');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [selectedChips, setSelectedChips] = useState<string[]>([]);
  const [selectedOrderType, setSelectedOrderType] = useState('Takeaway');
  const [showTablePopup, setShowTablePopup] = useState(false);
  const { showWarning } = useError();
  const [deliveryCompanies, setDeliveryCompanies] = useState<DeliveryCompany[]>([]);
  const [selectedDeliveryCompany, setSelectedDeliveryCompany] = useState<DeliveryCompany | null>(null);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [selectedAddress, setSelectedAddress] = useState<CustomerAddress | null>(null);
  const [taxRate, setTaxRate] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);

  // إضافة Table Manager Hook
  const {
    tableSections,
    selectedTable,
    isChooseTable,
    selectTable,
    clearSelectedTable,
    getTableDisplayName,
    getServiceCharge,
    isTableRequired,
    canAddProduct
  } = useTableManager();

  // استخدام Data Manager الجديد
  const {
    loading,
    error,
    getProducts,
    getCategories,
    defaultCategoryId,
    searchProducts,
    getProductsByScreenId,
    hasProductOptions
  } = useDataManager();

  // دالة لجلب رسوم التوصيل من الـ zone
  const getDeliveryCharge = useCallback((): number => {
    if (selectedOrderType === 'Delivery' && selectedAddress && selectedAddress.zoneId) {
      return 15; // يمكن تحديثها من API
    }
    return 0;
  }, [selectedOrderType, selectedAddress]);

  const handleCustomerSelect = useCallback((customer: Customer, address: CustomerAddress) => {
    setSelectedCustomer(customer);
    setSelectedAddress(address);
    setCustomerName(`${customer.name} - ${customer.phone1}`);
  }, []);

  const handleDeliveryChargeChange = useCallback((charge: number) => {
    setDeliveryCharge(charge);
  }, []);

  // Extra/Without States
  const [isExtraMode, setIsExtraMode] = useState(false);
  const [isWithoutMode, setIsWithoutMode] = useState(false);
  const [selectedOrderItemId, setSelectedOrderItemId] = useState<string | null>(null);
  
  // Categories States
  const [showingChildren, setShowingChildren] = useState<string | null>(null);
  const [, setParentCategory] = useState<CategoryItem | null>(null);
  
  // Popup States
  const [showPricePopup, setShowPricePopup] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<PosProduct | null>(null);
  const [selectedProductForOptions, setSelectedProductForOptions] = useState<PosProduct | null>(null);
  const [selectedPriceForOptions, setSelectedPriceForOptions] = useState<PosPrice | null>(null);
  
  // Order Details Popup States
  const [showOrderDetailsPopup, setShowOrderDetailsPopup] = useState(false);
  const [selectedOrderItemForDetails, setSelectedOrderItemForDetails] = useState<OrderItem | null>(null);
  
  // Order States
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  // الحصول على البيانات الحالية
  const isAdditionMode = isExtraMode || isWithoutMode;
  const currentProducts = getProducts(isAdditionMode);
  const currentCategories = getCategories(isAdditionMode);
  const rootCategories = currentCategories.filter(cat => !cat.parentId);
  const categories = showingChildren 
    ? currentCategories.find(cat => cat.id === showingChildren)?.children || []
    : rootCategories;

  // تحميل البيانات مرة واحدة
  useEffect(() => {
    const loadDeliveryCompanies = async () => {
      try {
        const companies = await deliveryCompaniesApi.getAll();
        setDeliveryCompanies(companies);
      } catch (error) {
        console.error('Error loading delivery companies:', error);
      }
    };
    loadDeliveryCompanies();
  }, []);

  // المنتجات المعروضة
  const displayedProducts = useMemo(() => {
    if (searchQuery.trim()) {
      return searchProducts(currentProducts, searchQuery);
    }
    
    if (selectedCategory) {
      return getProductsByScreenId(currentProducts, selectedCategory);
    }
    
    return [];
  }, [currentProducts, selectedCategory, searchQuery, searchProducts, getProductsByScreenId]);

  // تحديث دالة updateOrderItem
  const updateOrderItem = useCallback((itemId: string, updateType: 'addSubItem' | 'removeSubItem', data: any) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        if (updateType === 'addSubItem') {
          const newSubItems = [...(item.subItems || []), data];
          
          const priceImpact = data.type === 'without' ? 0 : data.price;
          const newTotalPrice = item.totalPrice + priceImpact;
          
          return {
            ...item,
            subItems: newSubItems,
            totalPrice: newTotalPrice
          };
        } else if (updateType === 'removeSubItem') {
          const removedSubItem = item.subItems?.find(sub => sub.id === data);
          const newSubItems = item.subItems?.filter(sub => sub.id !== data) || [];
          
          const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
          const newTotalPrice = item.totalPrice - priceImpact;
          
          return {
            ...item,
            subItems: newSubItems.length > 0 ? newSubItems : undefined,
            totalPrice: newTotalPrice
          };
        }
      }
      return item;
    }));
  }, []);

  // Order Manager Hook
  const { addToOrder, removeSubItem } = useOrderManager({
    keypadValue,
    isExtraMode,
    isWithoutMode,
    selectedOrderItemId,
    onOrderAdd: (orderItem) => setOrderItems(prev => [...prev, orderItem]),
    onOrderUpdate: updateOrderItem,
    onModeReset: () => {
      setIsExtraMode(false);
      setIsWithoutMode(false);
      setSelectedOrderItemId(null);
      setKeypadValue('0');
    },
    onLoadNormalProducts: () => {
      // لا نحتاج لإعادة تحميل البيانات لأنها محملة مسبقاً
    }
  });

  // إضافة معالج double click
  const handleOrderItemDoubleClick = useCallback((item: OrderItem) => {
    setSelectedOrderItemForDetails(item);
    setShowOrderDetailsPopup(true);
  }, []);

  // إضافة معالج تحديث المنتج للـ OrderItemDetailsPopup
  const handleUpdateOrderItem = useCallback((itemId: string, updates: {
    quantity?: number;
    notes?: string;
    discountPercentage?: number;
    discountAmount?: number;
  }) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === itemId) {
        const updatedItem = { ...item };
        
        if (updates.quantity !== undefined) {
          updatedItem.quantity = updates.quantity;
        }
        
        if (updates.notes !== undefined) {
          updatedItem.notes = updates.notes;
        }
        
        if (updates.discountPercentage !== undefined) {
          updatedItem.discountPercentage = updates.discountPercentage;
        }
        
        if (updates.discountAmount !== undefined) {
          updatedItem.discountAmount = updates.discountAmount;
        }
        
        const basePrice = item.selectedPrice.price * (updates.quantity || item.quantity);
        const subItemsTotal = item.subItems?.reduce((sum, subItem) => {
          return sum + (subItem.type === 'without' ? 0 : subItem.price);
        }, 0) || 0;
        
        const totalBeforeDiscount = basePrice + subItemsTotal;
        const discountAmount = updates.discountAmount || item.discountAmount || 0;
        updatedItem.totalPrice = totalBeforeDiscount - discountAmount;
        
        return updatedItem;
      }
      return item;
    }));
  }, []);

  // إضافة معالج حذف sub-item
  const handleRemoveSubItem = useCallback((orderItemId: string, subItemId: string) => {
    setOrderItems(prev => prev.map(item => {
      if (item.id === orderItemId && item.subItems) {
        const removedSubItem = item.subItems.find(sub => sub.id === subItemId);
        const newSubItems = item.subItems.filter(sub => sub.id !== subItemId);
        
        const priceImpact = removedSubItem?.type === 'without' ? 0 : (removedSubItem?.price || 0);
        const newTotalPrice = item.totalPrice - priceImpact;
        
        return {
          ...item,
          subItems: newSubItems.length > 0 ? newSubItems : undefined,
          totalPrice: newTotalPrice
        };
      }
      return item;
    }));
  }, []);

  // إضافة useEffect لتحديد الفئة الافتراضية
  useEffect(() => {
    if (defaultCategoryId && !selectedCategory && !isAdditionMode) {
      setSelectedCategory(defaultCategoryId);
    }
  }, [defaultCategoryId, selectedCategory, isAdditionMode]);

  // معالج زر Extra - التحديث الجديد
  const handleExtraClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsExtraMode(true);
    setIsWithoutMode(false);
    setSelectedChips(prev => prev.includes('extra') ? prev : [...prev.filter(chip => chip !== 'without'), 'extra']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج زر Without - التحديث الجديد
  const handleWithoutClick = useCallback(() => {
    let targetItemId = selectedOrderItemId;
    
    if (!targetItemId && orderItems.length > 0) {
      targetItemId = orderItems[orderItems.length - 1].id;
      setSelectedOrderItemId(targetItemId);
    }
    
    if (!targetItemId) {
      return;
    }
    
    setIsWithoutMode(true);
    setIsExtraMode(false);
    setSelectedChips(prev => prev.includes('without') ? prev : [...prev.filter(chip => chip !== 'extra'), 'without']);
    
    const additionCategories = getCategories(true).filter(cat => !cat.parentId);
    if (additionCategories.length > 0) {
      setSelectedCategory(additionCategories[0].id);
    }
  }, [selectedOrderItemId, orderItems, getCategories]);

  // معالج الرجوع للمنتجات الأساسية
  const handleBackToMainProducts = useCallback(() => {
    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedOrderItemId(null);
    setSelectedChips(prev => prev.filter(chip => chip !== 'extra' && chip !== 'without'));
    
    if (defaultCategoryId) {
      setSelectedCategory(defaultCategoryId);
    }
    
    setShowingChildren(null);
    setParentCategory(null);
  }, [defaultCategoryId]);

  // معالج اختيار منتج في الفاتورة
  const handleOrderItemSelect = useCallback((itemId: string) => {
    if (selectedOrderItemId === itemId) {
      setSelectedOrderItemId(null);
    } else {
      setSelectedOrderItemId(itemId);
    }
  }, [selectedOrderItemId]);

  // معالج اختيار الفئة
  const handleCategorySelect = useCallback((categoryId: string) => {
    const category = categories.find(cat => cat.id === categoryId);
    
    if (category?.hasChildren && category.children) {
      setShowingChildren(categoryId);
      setParentCategory(category);
      if (category.children.length > 0) {
        setSelectedCategory(category.children[0].id);
      }
    } else {
      setSelectedCategory(categoryId);
    }
    setSearchQuery('');
  }, [categories]);

  const handleChildCategorySelect = useCallback((childId: string) => {
    setSelectedCategory(childId);
    setSearchQuery('');
  }, []);

  // دالة الرجوع للفئة الأب
  const handleBackToParent = useCallback(() => {
    setShowingChildren(null);
    setParentCategory(null);
    
    if (rootCategories.length > 0) {
      setSelectedCategory(rootCategories[0].id);
    }
  }, [rootCategories]);

  // معالج ضغط المنتج
  const handleProductClick = useCallback((product: PosProduct) => {
    if (!canAddProduct(selectedOrderType)) {
      showWarning('يجب اختيار الطاولة أولاً');
      return;
    }

    if (product.hasMultiplePrices) {
      setSelectedProduct(product);
      setShowPricePopup(true);
    } else if (product.productPrices.length > 0) {
      const price = product.productPrices[0];
      
      if (hasProductOptions(product)) {
        setSelectedProductForOptions(product);
        setSelectedPriceForOptions(price);
        setShowOptionsPopup(true);
      } else {
        addToOrder(product, price, []);
      }
    }
  }, [addToOrder, showWarning, hasProductOptions, selectedOrderType, canAddProduct]);

  // إضافة معالج اختيار الطاولة
  const handleTableSelect = useCallback((selection: TableSelection) => {
    selectTable(selection);
    setShowTablePopup(false);
  }, [selectTable]);

  // إضافة معالج فتح popup الطاولة
  const handleTableClick = useCallback(() => {
    setShowTablePopup(true);
  }, []);

  // تعديل معالج تغيير نوع الطلب
  const handleOrderTypeChange = useCallback((type: string) => {
    setSelectedOrderType(type);
    
    if (type === 'Dine-in' && isTableRequired(type)) {
      setShowTablePopup(true);
    }
    
    if (type !== 'Dine-in') {
      clearSelectedTable();
    }
  }, [isTableRequired, clearSelectedTable]);

  // معالج اختيار السعر
  const handlePriceSelect = useCallback((price: PosPrice) => {
    if (selectedProduct) {
      if (hasProductOptions(selectedProduct)) {
        setSelectedProductForOptions(selectedProduct);
        setSelectedPriceForOptions(price);
        setShowPricePopup(false);
        setShowOptionsPopup(true);
      } else {
        addToOrder(selectedProduct, price, []);
      }
    }
    setSelectedProduct(null);
  }, [selectedProduct, addToOrder, hasProductOptions]);

  // معالج إكمال اختيار المجموعات
  const handleOptionsComplete = useCallback((selectedOptions: SelectedOption[]) => {
    if (selectedProductForOptions && selectedPriceForOptions) {
      addToOrder(selectedProductForOptions, selectedPriceForOptions, selectedOptions);
    }
    setShowOptionsPopup(false);
    setSelectedProductForOptions(null);
    setSelectedPriceForOptions(null);
  }, [selectedProductForOptions, selectedPriceForOptions, addToOrder]);

  // تعديل حساب ملخص الطلب ليشمل الخدمة
  const orderSummary: OrderSummaryType = useMemo(() => {
    const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
    const serviceCharge = getServiceCharge();
    const service = (subtotal * serviceCharge) / 100;
    const discountPercentage = 0;
    const discount = (subtotal * discountPercentage) / 100;
    
    return {
      items: orderItems,
      subtotal,
      discount,
      tax: 0,
      service,
      total: subtotal + service + deliveryCharge - discount
    };
  }, [orderItems, getServiceCharge, deliveryCharge]);

  // حذف منتج من الطلب
  const removeOrderItem = useCallback((itemId: string) => {
    setOrderItems(prev => prev.filter(item => item.id !== itemId));
  }, []);

  // دالة التحقق من صحة الإدخال
  const validateKeypadInput = useCallback((value: string): boolean => {
    if (!value || value.trim() === '') return false;
    if (value === '.') return true;
    
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return false;
    if (numValue < 0) return false;
    
    const decimalPlaces = value.split('.')[1]?.length || 0;
    if (decimalPlaces > 3) return false;
    if (numValue > 999999) return false;
    
    return true;
  }, []);

  // معالج إدخال الأرقام المحسن
  const handleNumberClick = useCallback((number: string) => {
    let newValue = keypadValue;
    
    if (number === '.') {
      if (!keypadValue.includes('.')) {
        newValue = keypadValue + '.';
      } else {
        return;
      }
    } else {
      if (keypadValue === '0' && number !== '0') {
        newValue = number;
      } else {
        newValue = keypadValue + number;
      }
    }
    
    if (validateKeypadInput(newValue)) {
      setKeypadValue(newValue);
    }
  }, [keypadValue, validateKeypadInput]);

  // دالة للحصول على القيمة الرقمية
  const getNumericValue = useCallback((): number => {
    const value = parseFloat(keypadValue);
    return isNaN(value) || value <= 0 ? 1 : value;
  }, [keypadValue]);

  // دالة المسح
  const handleClearClick = useCallback(() => {
    setKeypadValue('0');
  }, []);

  // ✅ إصلاح دعم لوحة المفاتيح العادية مع حل خطأ contentEditable
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      // التحقق من عدم وجود popup مفتوح
      const isAnyPopupOpen = showPricePopup || showOptionsPopup || showOrderDetailsPopup || showTablePopup;
      
      // التحقق من عدم وجود input مركز عليه - مع إصلاح خطأ contentEditable
      const activeElement = document.activeElement;
      const isInputFocused = activeElement?.tagName === 'INPUT' || 
                            activeElement?.tagName === 'TEXTAREA' || 
                            (activeElement as HTMLElement)?.contentEditable === 'true';
      
      // إذا كان هناك popup مفتوح أو input مركز عليه، لا نتدخل
      if (isAnyPopupOpen || isInputFocused) {
        return;
      }
      
      const key = event.key;
      
      // الأرقام والنقطة العشرية
      if (/^[0-9]$/.test(key)) {
        event.preventDefault();
        handleNumberClick(key);
      } else if (key === '.') {
        event.preventDefault();
        handleNumberClick('.');
      } else if (key === 'Backspace') {
        event.preventDefault();
        // حذف آخر رقم
        if (keypadValue.length > 1) {
          const newValue = keypadValue.slice(0, -1);
          if (validateKeypadInput(newValue)) {
            setKeypadValue(newValue);
          }
        } else {
          setKeypadValue('0');
        }
      } else if (key === 'Delete' || key === 'Escape') {
        event.preventDefault();
        handleClearClick();
      } else if (key === 'Enter') {
        event.preventDefault();
        // يمكن إضافة وظيفة معينة عند الضغط على Enter
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [
    keypadValue, 
    handleNumberClick, 
    handleClearClick, 
    validateKeypadInput,
    showPricePopup,
    showOptionsPopup,
    showOrderDetailsPopup,
    showTablePopup
  ]);

  const handleChipClick = useCallback((chipType: string) => {
    setSelectedChips(prev => 
      prev.includes(chipType) 
        ? prev.filter(chip => chip !== chipType)
        : [...prev, chipType]
    );
  }, []);

  const handleResetOrder = useCallback(() => {
    setOrderItems([]);
    setSelectedOrderItemId(null);
    setCustomerName('');
    setKeypadValue('0');
    
    setSelectedCustomer(null);
    setSelectedAddress(null);
    setDeliveryCharge(0);

    clearSelectedTable();

    setIsExtraMode(false);
    setIsWithoutMode(false);
    setSelectedChips([]);
    
    handleBackToMainProducts();
    
    setSearchQuery('');
    
    console.log('Order reset successfully');
  }, [handleBackToMainProducts, clearSelectedTable]);

  // عرض حالة التحميل
  if (loading) {
    return (
      <div className="pos-system loading">
        <div className="loading-spinner">جاري تحميل البيانات...</div>
      </div>
    );
  }

  // عرض حالة الخطأ
  if (error) {
    return (
      <div className="pos-system error">
        <div className="error-message">{error}</div>
        <button onClick={() => window.location.reload()}>إعادة المحاولة</button>
      </div>
    );
  }

  return (
    <div className="pos-system">
      <Header
        selectedOrderType={selectedOrderType}
        onOrderTypeChange={handleOrderTypeChange}
        onResetOrder={handleResetOrder}
        onTableClick={handleTableClick}
        tableDisplayName={getTableDisplayName()}
        deliveryCompanies={deliveryCompanies}
        selectedDeliveryCompany={selectedDeliveryCompany}
        onDeliveryCompanySelect={setSelectedDeliveryCompany}
        selectedCustomer={selectedCustomer}
        selectedAddress={selectedAddress}
      />

      <main className="main-content">
        <section className="products-section">
          <div className="number-pad-bar">
            <div className="keypad-grid">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', 'C'].map((key) => (
                <button 
                  key={key}
                  className="keypad-key"
                  onClick={() => key === 'C' ? handleClearClick() : handleNumberClick(key)}
                >
                  {key}
                </button>
              ))}
            </div>
            <div className="keypad-display">
              {keypadValue}
            </div>
          </div>

          <ActionButtons
            selectedChips={selectedChips}
            onChipClick={handleChipClick}
            isExtraMode={isExtraMode}
            isWithoutMode={isWithoutMode}
            onExtraClick={handleExtraClick}
            onWithoutClick={handleWithoutClick}
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            hasSelectedOrderItem={true}
          />

          <div className="product-grid">
            {displayedProducts.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                onClick={handleProductClick}
              />
            ))}
          </div>
        </section>

        <aside className="categories-sidebar">
          <div className="categories-list">
            {isAdditionMode && (
              <button
                onClick={handleBackToMainProducts}
                className="category-item back-button main-back"
              >
                <ArrowBackIcon />
                <span>رجوع للمنتجات الأساسية</span>
              </button>
            )}
            
            {showingChildren && (
              <button
                onClick={handleBackToParent}
                className="category-item back-button"
              >
                <ArrowBackIcon />
                <span>رجوع</span>
              </button>
            )}
            
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => showingChildren ? handleChildCategorySelect(category.id) : handleCategorySelect(category.id)}
                className={`category-item ${category.id === selectedCategory ? 'active' : ''}`}
              >
                <img src={category.image} alt={category.name} />
                <span>{category.nameArabic}</span>
              </button>
            ))}
          </div>
        </aside>

        <OrderSummary
          orderSummary={orderSummary}
          customerName={customerName}
          onCustomerNameChange={setCustomerName}
          onRemoveOrderItem={removeOrderItem}
          onRemoveSubItem={handleRemoveSubItem}
          selectedOrderItemId={selectedOrderItemId}
          onOrderItemSelect={handleOrderItemSelect}
          onOrderItemDoubleClick={handleOrderItemDoubleClick}
          selectedCustomer={selectedCustomer}
          selectedAddress={selectedAddress}
          onCustomerSelect={handleCustomerSelect}
          orderType={selectedOrderType}
          onDeliveryChargeChange={handleDeliveryChargeChange} readOnly={false}        />
      </main>

      <PriceSelectionPopup
        product={selectedProduct}
        quantity={getNumericValue()}
        isOpen={showPricePopup}
        onClose={() => {
          setShowPricePopup(false);
          setSelectedProduct(null);
        }}
        onSelectPrice={handlePriceSelect}
      />

      <ProductOptionsPopup
        product={selectedProductForOptions}
        selectedPrice={selectedPriceForOptions}
        quantity={getNumericValue()}
        isOpen={showOptionsPopup}
        onClose={() => {
          setShowOptionsPopup(false);
          setSelectedProductForOptions(null);
          setSelectedPriceForOptions(null);
        }}
        onComplete={handleOptionsComplete}
      />

      <OrderItemDetailsPopup
        orderItem={selectedOrderItemForDetails}
        isOpen={showOrderDetailsPopup}
        onClose={() => {
          setShowOrderDetailsPopup(false);
          setSelectedOrderItemForDetails(null);
        }}
        onUpdateItem={handleUpdateOrderItem}
        onRemoveItem={removeOrderItem}
      />

      <TableSelectionPopup
        isOpen={showTablePopup}
        onClose={() => setShowTablePopup(false)}
        onSelectTable={handleTableSelect}
        tableSections={tableSections}
      />

      
    </div>
  );
};

export default PosSystem;

===== src/Pages/pos/newSales/srcdhiwise/component-tagger.tsx =====
import React, { useMemo } from 'react';

export interface TaggedComponentProps {
  tag?: string;
  id?: string;
  className?: string;
  'data-testid'?: string;
  children?: React.ReactNode;
}

export interface TaggerOptions {
  tag?: string;
  id?: string;
  className?: string;
  testId?: string;
  debug?: boolean;
}

/**
 * Component tagger utility for adding metadata and testing attributes to React components
 * @param Component - The React component to wrap
 * @param options - Tagging options including tag, id, className, testId, and debug
 * @returns Tagged React component with additional props
 */
export function tagger<T extends React.ComponentType<any>>(
  Component: T,
  options: TaggerOptions = {}
): React.ComponentType<React.ComponentProps<T> & TaggedComponentProps> {
  const { tag, id, className, testId, debug = false } = options;

  const TaggedComponent = React.forwardRef<any, React.ComponentProps<T> & TaggedComponentProps>(
    (props, ref) => {
      const enhancedProps = {
        ...props,
        ...(tag && { 'data-tag': tag }),
        ...(id && { id }),
        ...(className && { className: `${props.className || ''} ${className}`.trim() }),
        ...(testId && { 'data-testid': testId }),
        ref,
      };

      if (debug) {
        console.log('Tagged component props:', enhancedProps);
      }

      return React.createElement(Component, enhancedProps);
    }
  );

  TaggedComponent.displayName = `Tagged(${Component.displayName || Component.name || 'Component'})`;

  return TaggedComponent as React.ComponentType<React.ComponentProps<T> & TaggedComponentProps>;
}

/**
 * Higher-order component for tagging components with metadata
 * @param options - Tagging options
 * @returns HOC function that wraps components with tagging functionality
 */
export const withTagger = (options: TaggerOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return tagger(Component, options);
  };
};

/**
 * Hook for creating tagged element props
 * @param options - Tagging options
 * @returns Object with tagged props
 */
export const useTaggedProps = (options: TaggerOptions = {}) => {
  const { tag, id, className, testId } = options;
  
  return React.useMemo(() => ({
    ...(tag && { 'data-tag': tag }),
    ...(id && { id }),
    ...(className && { className }),
    ...(testId && { 'data-testid': testId }),
  }), [tag, id, className, testId]);
};

export default tagger;
===== src/Pages/pos/newSales/srcvitejs/plugin-react.tsx =====
import React, { useCallback } from 'react';

export interface ReactPluginOptions {
  enableHMR?: boolean;
  enableDevTools?: boolean;
  strictMode?: boolean;
  debug?: boolean;
}

export interface ReactComponentOptions {
  displayName?: string;
  propTypes?: any;
  defaultProps?: any;
}

/**
 * React plugin utility for enhancing React components with additional functionality
 * @param Component - The React component to enhance
 * @param options - Plugin options for React-specific enhancements
 * @returns Enhanced React component with plugin functionality
 */
export function react<T extends React.ComponentType<any>>(
  Component: T,
  options: ReactPluginOptions & ReactComponentOptions = {}
): React.ComponentType<React.ComponentProps<T>> {
  const {
    enableHMR = true,
    enableDevTools = process.env.NODE_ENV === 'development',
    strictMode = false,
    debug = false,
    displayName,
    propTypes,
    defaultProps,
  } = options;

  const EnhancedComponent = React.forwardRef<any, React.ComponentProps<T>>(
    (props, ref) => {
      // Debug logging in development
      if (debug && enableDevTools) {
        console.log(`[React Plugin] Rendering ${displayName || Component.name}:`, props);
      }

      // Error boundary for development
      if (enableDevTools) {
        try {
          const element = React.createElement(Component, { ...props, ref });
          return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
        } catch (error) {
          console.error(`[React Plugin] Error in ${displayName || Component.name}:`, error);
          return React.createElement(
            'div',
            { style: { color: 'red', padding: '10px', border: '1px solid red' } },
            `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
          );
        }
      }

      const element = React.createElement(Component, { ...props, ref });
      return strictMode ? React.createElement(React.StrictMode, {}, element) : element;
    }
  );

  // Set component metadata
  EnhancedComponent.displayName = displayName || `ReactPlugin(${Component.displayName || Component.name || 'Component'})`;
  
  if (propTypes) {
    (EnhancedComponent as any).propTypes = propTypes;
  }
  
  if (defaultProps) {
    (EnhancedComponent as any).defaultProps = defaultProps;
  }

  // Hot module replacement support
  if (enableHMR && enableDevTools && (module as any).hot) {
    (module as any).hot.accept();
  }

  return EnhancedComponent;
}

/**
 * Higher-order component for React plugin enhancements
 * @param options - Plugin options
 * @returns HOC function that wraps components with React plugin functionality
 */
export const withReactPlugin = (options: ReactPluginOptions & ReactComponentOptions = {}) => {
  return <T extends React.ComponentType<any>>(Component: T) => {
    return react(Component, options);
  };
};

/**
 * Hook for React plugin utilities
 * @param options - Plugin options
 * @returns Object with React plugin utilities
 */
export const useReactPlugin = (options: ReactPluginOptions = {}) => {
  const { enableDevTools = process.env.NODE_ENV === 'development', debug = false } = options;
  
  const logRender = React.useCallback((componentName: string, props?: any) => {
    if (debug && enableDevTools) {
      console.log(`[React Plugin] ${componentName} rendered:`, props);
    }
  }, [debug, enableDevTools]);

  const measurePerformance = React.useCallback((name: string, fn: () => void) => {
    if (enableDevTools) {
      const start = performance.now();
      fn();
      const end = performance.now();
      console.log(`[React Plugin] ${name} took ${end - start} milliseconds`);
    } else {
      fn();
    }
  }, [enableDevTools]);

  return {
    logRender,
    measurePerformance,
    isDevMode: enableDevTools,
  };
};

export default react;
===== src/Pages/pos/newSales/styles/ActionButtons.css =====
/* src/Pages/pos/newSales/components/ActionButtons.css */

.action-buttons-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  background: #ffffff;
  border-bottom: 1px solid #e9ecef;
}

.action-chips {
  display: flex;
  gap: 12px;
}

.action-chip {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  background: #ffffff;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  font-weight: 500;
}

.action-chip:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
}

.action-chip.active {
  background: #0373ed;
  color: white;
  border-color: #0373ed;
}

.action-chip img {
  width: 16px;
  height: 16px;
}

.search-container {
  display: flex;
  align-items: center;
  position: relative;
  gap: 8px;
}

.search-icon {
  position: absolute;
  left: 12px;
  width: 16px;
  height: 16px;
  z-index: 1;
}

.search-input {
  padding: 8px 12px 8px 36px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: 14px;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #0373ed;
}

.filter-button {
  padding: 8px;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  background: white;
  cursor: pointer;
}

.filter-button:hover {
  border-color: #0373ed;
}

.filter-button img {
  width: 16px;
  height: 16px;
}

===== src/Pages/pos/newSales/styles/Header.css =====
/* src/Pages/pos/newSales/components/Header.css */

.pos-header {
  height: clamp(60px, 8vh, 100px);
  background: #ffffff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
  z-index: 100;
  position: relative;
}

.header-content {
  height: 100%;
  padding: 0 clamp(16px, 3vw, 32px);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.header-nav {
  display: flex;
  align-items: center;
  gap: clamp(12px, 2vw, 24px);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  padding: clamp(6px, 1.2vw, 12px) clamp(8px, 1.6vw, 16px);
  border-radius: 6px;
  text-decoration: none;
  color: #333333;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 500;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
}

.nav-item img {
  width: clamp(14px, 1.8vw, 20px);
  height: clamp(14px, 1.8vw, 20px);
}

.order-type-display {
  padding: clamp(6px, 1.2vw, 12px) clamp(12px, 2.4vw, 20px);
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  font-size: clamp(11px, 1.4vw, 16px);
  font-weight: 600;
  color: #333333;
  min-width: clamp(80px, 12vw, 120px);
  text-align: center;
}

.menu-dropdown-container {
  position: relative;
}

.menu-button {
  padding: clamp(6px, 1.2vw, 12px);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(18px, 2.4vw, 28px);
  height: clamp(18px, 2.4vw, 28px);
}

/* Figma Dropdown - مع scroll مخفي */
.figma-dropdown {
  position: absolute;
  top: calc(100% + 8px);
  right: 0;
  background: transparent;
  z-index: 1000;
  animation: slideInFromRight 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  flex-direction: column;
  gap: clamp(16px, 2.5vw, 20px);
  max-height: calc(100vh - 120px);
  overflow-y: auto;
  overflow-x: hidden;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
  /* إخفاء الـ scrollbar */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* Internet Explorer 10+ */
}

/* إخفاء الـ scrollbar في WebKit browsers */
.figma-dropdown::-webkit-scrollbar {
  width: 0;
  height: 0;
  background: transparent;
  display: none;
}

/* Order Types Section */
.order-types-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  flex-shrink: 0;
}

/* Delivery Partners Section */
.delivery-partners-section {
  display: flex;
  flex-direction: column;
  gap: clamp(6px, 1vw, 8px);
  margin-top: clamp(12px, 2vw, 16px);
  flex-shrink: 0;
}

/* Section Separator */
.section-separator {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.1), transparent);
  margin: clamp(8px, 1.5vw, 12px) 0;
  flex-shrink: 0;
}

/* Figma Cards - مُحسنة بدون تأثير على الكروت المجاورة */
.figma-card {
  width: clamp(90px, 14vw, 110px);
  height: clamp(85px, 13vw, 105px);
  background: white;
  border-radius: 12px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: clamp(6px, 1.2vw, 8px);
  backdrop-filter: blur(8px);
  scroll-snap-align: start;
  contain: layout style paint;
  /* إضافة margin للحفاظ على المساحة */
  margin: 2px;
}

.figma-card:hover {
  border-color: #0373ed;
  /* تقليل الحركة لتجنب التأثير على الكروت المجاورة */
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(3, 115, 237, 0.2);
  /* استخدام brightness كبديل للـ scale */
  filter: brightness(1.05);
}

.figma-card.selected {
  border-color: #0373ed;
  box-shadow: 0 5px 12px rgba(3, 115, 237, 0.25);
  background: rgba(3, 115, 237, 0.02);
}

.delivery-card {
  border: 1px solid #e9ecef;
}

.delivery-card:hover {
  border-color: #0373ed;
  transform: translateX(-2px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  filter: brightness(1.05);
}

/* Card Icon Section */
.card-icon-section {
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1;
  width: 100%;
}

/* Card Icons - مُصغرة */
.card-icon {
  width: clamp(24px, 3.5vw, 32px);
  height: clamp(24px, 3.5vw, 32px);
  object-fit: contain;
}

.delivery-icon {
  max-width: clamp(45px, 7vw, 60px);
  max-height: clamp(15px, 2.5vw, 20px);
  object-fit: contain;
}

/* Card Labels - داخل الكارت */
.card-label {
  color: black;
  font-size: clamp(10px, 1.5vw, 14px);
  font-family: 'Nunito', sans-serif;
  font-weight: 400;
  word-wrap: break-word;
  text-align: center;
  line-height: 1.1;
  margin-top: clamp(2px, 0.5vw, 4px);
  width: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

.figma-card.selected .card-label {
  color: #0373ed;
  font-weight: 500;
}

/* Animations */
@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(15px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* تأثيرات إضافية للكروت */
.figma-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3));
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  border-radius: 10px;
}

.figma-card:hover::before {
  opacity: 1;
}

/* تأثيرات fade للـ scroll */
.figma-dropdown::before {
  content: '';
  position: sticky;
  top: 0;
  height: 6px;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

.figma-dropdown::after {
  content: '';
  position: sticky;
  bottom: 0;
  height: 6px;
  background: linear-gradient(to top, rgba(255, 255, 255, 0.9), transparent);
  z-index: 1;
  pointer-events: none;
  flex-shrink: 0;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .nav-item span {
    display: none;
  }
  
  .nav-item {
    padding: clamp(8px, 1.5vw, 12px);
  }
  
  .figma-dropdown {
    right: -5px;
  }
}

@media (max-width: 768px) {
  .header-nav {
    gap: clamp(8px, 1.5vw, 16px);
  }
  
  .order-type-display {
    min-width: clamp(60px, 10vw, 80px);
    font-size: clamp(10px, 1.2vw, 14px);
  }
  
  .figma-dropdown {
    right: -10px;
    gap: clamp(12px, 2vw, 16px);
    max-height: calc(100vh - 100px);
  }
  
  .figma-card {
    width: clamp(75px, 16vw, 95px);
    height: clamp(70px, 15vw, 90px);
    padding: clamp(4px, 1vw, 6px);
    margin: 1px;
  }
  
  .figma-card:hover {
    transform: translateX(-1px);
  }
  
  .delivery-card:hover {
    transform: translateX(-1px);
  }
  
  .card-icon {
    width: clamp(18px, 3vw, 24px);
    height: clamp(18px, 3vw, 24px);
  }
  
  .delivery-icon {
    max-width: clamp(35px, 6vw, 45px);
    max-height: clamp(12px, 2vw, 16px);
  }
  
  .card-label {
    font-size: clamp(8px, 1.3vw, 12px);
  }
}

@media (max-width: 480px) {
  .header-content {
    padding: 0 clamp(8px, 2vw, 16px);
  }
  
  .header-nav {
    gap: clamp(4px, 1vw, 8px);
  }
  
  .figma-dropdown {
    right: -15px;
    max-height: calc(100vh - 80px);
  }
  
  .figma-card {
    width: clamp(65px, 18vw, 85px);
    height: clamp(60px, 17vw, 80px);
    padding: clamp(3px, 0.8vw, 5px);
    margin: 1px;
  }
  
  /* إزالة الحركة نهائياً في الشاشات الصغيرة */
  .figma-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .delivery-card:hover {
    transform: none;
    filter: brightness(1.1);
  }
  
  .card-icon {
    width: clamp(16px, 2.5vw, 20px);
    height: clamp(16px, 2.5vw, 20px);
  }
  
  .delivery-icon {
    max-width: clamp(30px, 5vw, 40px);
    max-height: clamp(10px, 1.8vw, 14px);
  }
  
  .card-label {
    font-size: clamp(7px, 1.1vw, 10px);
  }
}

/* تحسينات للأجهزة اللمسية */
@media (hover: none) and (pointer: coarse) {
  .figma-dropdown {
    -webkit-overflow-scrolling: touch;
    scroll-snap-type: y proximity;
  }
  
  .figma-card {
    scroll-snap-align: start;
  }
}

/* تحسينات الأداء */
.figma-dropdown {
  will-change: scroll-position;
  contain: layout style paint;
}

.figma-card {
  will-change: transform, box-shadow;
  backface-visibility: hidden;
}

/* تحسينات للشاشات عالية الدقة */
@media (min-resolution: 150dpi) {
  .figma-card {
    border-width: 1.5px;
  }
}

@media (min-resolution: 200dpi) {
  .figma-card {
    border-width: 1px;
  }
}



/* إضافة هذا في Header.css */

.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 4px;
  padding: 8px 12px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid transparent;
  position: relative;
  overflow: hidden;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}

/* تأثير ripple عند النقر */
.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: width 0.3s ease, height 0.3s ease;
}

.order-type-display.clickable:active::before {
  width: 100px;
  height: 100px;
}

/* إضافة أيقونة صغيرة للإشارة للـ reset */
.order-type-display.clickable::after {
  content: '↻';
  position: absolute;
  top: 2px;
  right: 2px;
  font-size: 10px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.order-type-display.clickable:hover::after {
  opacity: 0.7;
}

/* تحسين الـ tooltip */
.order-type-display.clickable[title] {
  position: relative;
}

.order-type-display.clickable[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  opacity: 0.9;
}

/* Responsive */
@media (max-width: 768px) {
  .order-type-display.clickable {
    padding: 6px 8px;
    font-size: 12px;
  }
  
  .order-type-display.clickable::after {
    font-size: 8px;
  }
}



/* إضافة هذا في Header.css */

/* Professional Dropdown Styles */
.professional-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  width: 420px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
  border: 1px solid #e9ecef;
  z-index: 1000;
  transform: translateY(8px);
  opacity: 0;
  animation: dropdownSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  max-height: 80vh;
  overflow-y: auto;
}

@keyframes dropdownSlideIn {
  from {
    opacity: 0;
    transform: translateY(0);
  }
  to {
    opacity: 1;
    transform: translateY(8px);
  }
}

.dropdown-section {
  padding: 20px;
}

.dropdown-section:not(:last-child) {
  border-bottom: 1px solid #f1f3f4;
}

.section-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.section-title {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.section-divider {
  flex: 1;
  height: 1px;
  background: linear-gradient(to right, #e9ecef, transparent);
}

/* Order Types Cards */
.order-types-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.order-type-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  background: white;
  border: 2px solid #f1f3f4;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.order-type-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, var(--accent-color), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-card:hover {
  border-color: var(--accent-color);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.order-type-card:hover::before {
  opacity: 0.05;
}

.order-type-card.selected {
  border-color: var(--accent-color);
  background: rgba(var(--accent-color), 0.05);
  box-shadow: 0 4px 16px rgba(var(--accent-color), 0.2);
}

.order-type-card.selected::before {
  opacity: 0.08;
}

.card-icon-container {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: rgba(var(--accent-color), 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.card-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.card-content {
  flex: 1;
  text-align: left;
}

.card-title {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.card-description {
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.card-check {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--accent-color);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.order-type-card.selected .card-check {
  opacity: 1;
  transform: scale(1);
}

/* Delivery Partners Cards */
.delivery-partners-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.delivery-partner-card {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.delivery-partner-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.delivery-partner-card:hover {
  border-color: var(--partner-color);
  transform: translateX(4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
}

.delivery-partner-card:hover::before {
  opacity: 1;
}

.delivery-partner-card.selected {
  border-color: var(--partner-color);
  background: var(--partner-bg);
  box-shadow: 0 4px 16px rgba(var(--partner-color), 0.15);
}

.partner-icon-container {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  background: var(--partner-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.partner-icon {
  width: 24px;
  height: 24px;
  object-fit: contain;
}

.partner-content {
  flex: 1;
  text-align: left;
}

.partner-name {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 2px;
  font-family: 'Cairo', sans-serif;
}

.partner-status {
  font-size: 11px;
  color: #28a745;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.partner-badge {
  width: 16px;
  height: 16px;
  color: var(--partner-color);
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.delivery-partner-card.selected .partner-badge {
  opacity: 1;
  transform: scale(1);
}

/* Order Type Display Button Enhancement */
.order-type-display.clickable {
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 8px;
  padding: 8px 16px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.order-type-display.clickable::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.order-type-display.clickable:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
}

.order-type-display.clickable:hover::before {
  opacity: 1;
}

.order-type-display.clickable:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Design */
@media (max-width: 768px) {
  .professional-dropdown {
    width: 360px;
    right: -20px;
  }
  
  .order-types-grid {
    grid-template-columns: 1fr;
  }
  
  .dropdown-section {
    padding: 16px;
  }
  
  .order-type-card {
    padding: 12px;
  }
  
  .delivery-partner-card {
    padding: 10px 12px;
  }
}

@media (max-width: 480px) {
  .professional-dropdown {
    width: 320px;
    right: -40px;
  }
  
  .section-title {
    font-size: 14px;
  }
  
  .card-title,
  .partner-name {
    font-size: 13px;
  }
  
  .card-description {
    font-size: 11px;
  }
}

/* Scroll Styling */
.professional-dropdown::-webkit-scrollbar {
  width: 6px;
}

.professional-dropdown::-webkit-scrollbar-track {
  background: #f1f3f4;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb {
  background: #c1c8cd;
  border-radius: 3px;
}

.professional-dropdown::-webkit-scrollbar-thumb:hover {
  background: #a8b2ba;
}







/* إضافة هذا لـ Header.css */

.customer-info-section {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 20px;
}

.customer-info-card {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 10px 16px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
}

.customer-basic-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
}

.customer-name {
  display: flex;
  align-items: center;
  gap: 6px;
  font-weight: 600;
  color: #2c3e50;
  font-size: 14px;
}

.customer-phone {
  display: flex;
  align-items: center;
  gap: 4px;
  color: #6c757d;
  font-size: 12px;
}

.customer-address {
  display: flex;
  align-items: center;
  gap: 6px;
  color: #495057;
  font-size: 12px;
  border-top: 1px solid #dee2e6;
  padding-top: 4px;
  margin-top: 4px;
}

.address-text {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.customer-icon,
.phone-icon,
.address-icon {
  font-size: 14px;
  flex-shrink: 0;
}

.vip-badge {
  background: linear-gradient(135deg, #ffd700 0%, #ffed4a 100%);
  color: #8b4513;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

/* Responsive للـ customer info */
@media (max-width: 1200px) {
  .customer-info-section {
    margin: 0 10px;
  }
  
  .customer-info-card {
    padding: 8px 12px;
    max-width: 300px;
  }
  
  .customer-name {
    font-size: 13px;
  }
  
  .customer-phone,
  .customer-address {
    font-size: 11px;
  }
}

@media (max-width: 768px) {
  .customer-info-section {
    margin: 0 5px;
  }
  
  .customer-info-card {
    padding: 6px 10px;
    max-width: 250px;
  }
  
  .customer-name {
    font-size: 12px;
  }
  
  .customer-phone,
  .customer-address {
    font-size: 10px;
  }
  
  .address-text {
    max-width: 150px;
  }
}

===== src/Pages/pos/newSales/styles/OrderItemDetailsPopup.module.css =====
/* src/Pages/pos/newSales/components/OrderItemDetailsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.orderItemDetails {
  background: white;
  border-radius: 12px;
  padding: 24px;
  width: 90%;
  max-width: 600px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* السطر الرئيسي الوحيد */
.mainRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 0;
  border-bottom: 1px solid #eee;
}

/* اسم المنتج والسعر على اليمين */
.productInfo {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1;
}

.productName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.productSize {
  font-size: 12px;
  color: #666;
}

.unitPrice {
  font-size: 14px;
  font-weight: 600;
  color: #e74c3c;
}

/* الكمية في النص */
.quantityControls {
  display: flex;
  align-items: center;
  gap: 12px;
  flex: 0 0 auto;
}

.quantityBtn {
  width: 36px;
  height: 36px;
  border: 2px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantityBtn:hover:not(:disabled) {
  border-color: #0373ed;
  background: #f8f9ff;
}

.quantityBtn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantityDisplay {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  min-width: 30px;
  text-align: center;
}

/* الإجمالي على الشمال */
.totalDisplay {
  flex: 0 0 auto;
}

.totalAmount {
  font-size: 18px;
  font-weight: 700;
  color: #e74c3c;
}

/* حقل الملاحظات */
.notesSection {
  width: 100%;
}

.notesInput {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  resize: vertical;
  font-family: inherit;
  transition: border-color 0.2s ease;
}

.notesInput:focus {
  outline: none;
  border-color: #0373ed;
}

.notesInput::placeholder {
  color: #999;
}

/* قسم الخصم */
.discountSection {
  width: 100%;
}

.discountInputs {
  display: flex;
  gap: 16px;
}

.discountField {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.discountField label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
}

.discountInput {
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.2s ease;
  /* إزالة الأزرار من number input */
  -moz-appearance: textfield;
}

.discountInput::-webkit-outer-spin-button,
.discountInput::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.discountInput:focus {
  outline: none;
  border-color: #0373ed;
}

/* أزرار التأكيد والإلغاء */
.actionButtons {
  display: flex;
  gap: 0;
  width: 100%;
  margin-top: 8px;
}

.confirmBtn,
.cancelBtn {
  flex: 1;
  padding: 16px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.confirmBtn {
  background: #28a745;
  color: white;
  border-radius: 8px 0 0 8px;
}

.confirmBtn:hover {
  background: #218838;
}

.cancelBtn {
  background: #f8f9fa;
  color: #333;
  border-radius: 0 8px 8px 0;
  border-left: 1px solid #ddd;
}

.cancelBtn:hover {
  background: #e9ecef;
}

/* Responsive */
@media (max-width: 768px) {
  .mainRow {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .productInfo {
    align-items: center;
    text-align: center;
  }
  
  .quantityControls {
    justify-content: center;
  }
  
  .totalDisplay {
    text-align: center;
  }
  
  .discountInputs {
    flex-direction: column;
  }
  
  .actionButtons {
    flex-direction: column;
  }
  
  .confirmBtn,
  .cancelBtn {
    border-radius: 8px;
  }
  
  .cancelBtn {
    border-left: none;
    border-top: 1px solid #ddd;
  }
}

===== src/Pages/pos/newSales/styles/OrderSummary.module.css =====
/* OrderSummary Module CSS */
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');

:root {
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --scale-factor: clamp(0.8, 1vw, 1.2);
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
}

/* Main Container */
.orderSummary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

/* Header Section */
.orderHeader {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.orderNumber {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.orderTotal {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.orderTotal .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.orderTotal .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

/* Content Section */
.orderContent {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.orderContent::-webkit-scrollbar {
  width: 6px;
}

.orderContent::-webkit-scrollbar-track {
  background: transparent;
}

.orderContent::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

/* Customer Input */
.customerInput {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customerField {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Cairo', sans-serif;
  background: transparent;
}

.customerField:focus {
  outline: none;
}

.customerButton {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customerButton:hover {
  background: #025bb5;
}

.customerButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

/* Order Items */
.orderItems {
  max-height: 50vh;
  margin-bottom: var(--spacing-md);
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.orderItems::-webkit-scrollbar {
  width: 4px;
}

.orderItems::-webkit-scrollbar-track {
  background: transparent;
}

.orderItems::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

/* Order Item Container - التعديل الرئيسي للفاصل */
.orderItemContainer {
  margin-bottom: clamp(12px, 1.5vw, 16px); /* مسافة بين مجموعات المنتجات فقط */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* خط فاصل بين المجموعات */
  padding-bottom: clamp(8px, 1vw, 12px);
}

.orderItemContainer:last-child {
  border-bottom: none; /* إزالة الخط من آخر عنصر */
}

/* Main Order Item */
.orderItem {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 6px;
  margin-bottom: 0; /* إزالة المسافة السفلية */
}

.orderItem:hover {
  background: rgba(0, 0, 0, 0.05);
}

.orderItem.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 20px solid #0373ed;
  padding-left: 8px;
  position: relative;
}

/* حرف X للمنتج الرئيسي */
.orderItem.selected::before {
  content: '✕';
  position: absolute;
  left: -20px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 20px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للمنتج الرئيسي */
.orderItem.selected:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 18px;
  transform: scale(1.1);
}

.orderItem.extraItem {
  border-left: 3px solid #28a745;
}

.orderItem.withoutItem {
  border-left: 3px solid #dc3545;
}

/* Item Details */
.itemDetails {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0;
}

.deleteButton {
    order: -1; /* أول عنصر */

  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.deleteButton:hover {
  background: rgba(229, 57, 53, 0.1);
}

.deleteButton img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.itemInfo {
  flex: 1;
  min-width: 0;
}

.itemName {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

.itemSizeInline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em;
}

/* Item Prices - التعديل الرئيسي للأسعار */
.itemPrices {
  display: flex;
  align-items: center;
  gap: clamp(6px, 1vw, 10px);
  flex-shrink: 0;
  min-width: fit-content;
}

.itemPrice {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
  padding-right: clamp(6px, 1vw, 10px);
  border-right: 1px solid #ccc; /* الخط العمودي الفاصل */
}

.itemTotal {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
  padding-left: clamp(6px, 1vw, 10px);
}

.itemTotal.negative {
  color: #dc3545;
  font-weight: 600;
}

/* Badges */
.extraBadge, .withoutBadge {
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.extraBadge {
  background: #28a745;
}

.withoutBadge {
  background: #dc3545;
}

/* Sub-items Container - إزالة الفاصل مع المنتج الرئيسي */
.subItemsContainer {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
  border-left: 2px solid #f0f0f0;
}

/* Sub-item */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}


.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0;
  margin-bottom: 0px;
  min-height: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 4px;
  position: relative;
}

/* Sub-item المحدد - مع border أكبر */
.selectedSubItem {
  background: rgba(3, 115, 237, 0.1);
  border-left: 20px solid #0373ed;
  padding-left: 8px;
  position: relative;
}
.selectedSubItem::before {
  content: '✕';
  position: absolute;
  left: -20px; /* داخل الـ border بالسالب */
  top: 0;
  bottom: 0;
  width: 20px;
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1;
  background: transparent;
  transition: all 0.2s ease;
}

/* تأثير hover للـ sub-item */
.selectedSubItem:hover::before {
  background: rgba(255, 255, 255, 0.1);
  font-size: 16px;
  transform: scale(1.1);
}

/* تأثير الضغط للعناصر المحددة */
.orderItem.selected:active::before,
.selectedSubItem:active::before {
  transform: scale(0.9);
  background: rgba(0, 0, 0, 0.2);
}

/* الـ options لا تأخذ تأثيرات الـ hover */
.subItem[data-type="option"] {
  cursor: default;
}

.subItem[data-type="option"]:hover {
  background: initial;
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 35px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 35px;
    font-size: 15px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 38px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 38px;
    font-size: 16px;
  }
}

/* تحسين للشاشات الصغيرة جداً */
@media (max-width: 480px) {
  .orderItem.selected,
  .selectedSubItem {
    border-left: 40px solid #0373ed;
  }
  
  .orderItem.selected::before,
  .selectedSubItem::before {
    width: 40px;
    font-size: 17px;
  }
}

.subItemDetails {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
}

/* Sub-item Prices - نفس تصميم الأسعار الرئيسية */
.subItemPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.subItemPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.subItemTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

.subItemTotal.negative {
  color: #dc3545;
}

.subItemDelete {
  width: 14px;
  height: 14px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.subItemDelete:hover {
  opacity: 1;
}

.subItemDelete img {
  width: 8px;
  height: 8px;
}

/* Item Options - إزالة الفاصل مع المنتج الرئيسي */
.itemOptions {
  margin-top: 0; /* إزالة المسافة العلوية */
  padding-left: 16px;
}

.optionDetail {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1px;
  padding: 2px 0;
  min-height: 18px;
}

.optionText {
  font-size: 10px;
  color: #666;
  font-weight: 400;
  line-height: 1.2;
  font-family: 'Cairo', sans-serif;
  flex: 1;
}

/* Option Prices - نفس تصميم الأسعار الرئيسية */
.optionPrices {
  display: flex;
  align-items: center;
  gap: clamp(4px, 0.8vw, 8px);
  min-width: fit-content;
}

.optionPrice {
  font-size: 8px;
  color: #999;
  font-weight: 500;
  white-space: nowrap;
  padding-right: clamp(4px, 0.8vw, 8px);
  border-right: 1px solid #ddd; /* الخط العمودي الفاصل */
}

.optionTotal {
  font-size: 9px;
  color: #333;
  font-weight: 600;
  white-space: nowrap;
  padding-left: clamp(4px, 0.8vw, 8px);
}

/* Order Footer */
.orderFooter {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summaryRows {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-sm) * 0.8);
  margin-bottom: var(--spacing-md);
}

.summaryRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px);
  font-weight: 500;
  line-height: 1.3;
}

.summaryRow span:last-child {
  font-weight: 700;
  color: var(--text-primary);
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px);
  font-weight: 700;
  padding-top: var(--spacing-md);
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md);
}

.actionButtons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.actionButton {
  height: clamp(40px, 7vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.actionButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.actionButton:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.actionButton.send {
  background: var(--primary-red);
}

.actionButton.print {
  background: var(--primary-blue);
}

.actionButton.pay {
  background: var(--primary-green);
}

/* Responsive Design */
@media (max-width: 1366px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .orderItems {
    max-height: 45vh;
  }
}

@media (max-width: 1024px) {
  .summaryRows {
    gap: calc(var(--spacing-sm) * 0.4);
  }
  
  .orderItems {
    max-height: 42vh;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 4px;
  }
}

@media (max-width: 768px) {
  .subItemName {
    font-size: 9px;
  }
  
  .subItemPrice {
    font-size: 7px;
  }
  
  .subItemTotal {
    font-size: 8px;
  }
  
  .subItemDelete {
    width: 12px;
    height: 12px;
  }
  
  .subItemDelete img {
    width: 6px;
    height: 6px;
  }
  
  .optionText {
    font-size: 9px;
  }
  
  .optionPrice {
    font-size: 7px;
  }
  
  .optionTotal {
    font-size: 8px;
  }
}

@media (max-width: 480px) {
  .orderItemContainer {
    margin-bottom: 8px;
  }
  
  .subItem {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 16px;
  }
  
  .optionDetail {
    padding: 1px 0;
    margin-bottom: 0px;
    min-height: 14px;
  }
  
  .itemPrices, .subItemPrices, .optionPrices {
    gap: 3px;
  }
}


/* Comments Container */
.commentsContainer {
  margin-top: 0;
  padding-left: 16px;
  border-left: 2px solid #e3f2fd;
}

.commentItem {
  display: flex;
  align-items: flex-start;
  gap: 6px;
  padding: 3px 0;
  margin-bottom: 2px;
  min-height: 20px;
}

.commentIcon {
  font-size: 10px;
  color: #2196f3;
  margin-top: 1px;
  flex-shrink: 0;
}

.commentText {
  font-size: 10px;
  color: #2196f3;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
  font-style: italic;
  word-wrap: break-word;
  flex: 1;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .commentText {
    font-size: 9px;
  }
  
  .commentIcon {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .commentItem {
    padding: 2px 0;
    margin-bottom: 1px;
    min-height: 16px;
  }
  
  .commentText {
    font-size: 8px;
  }
  
  .commentIcon {
    font-size: 8px;
  }
}










/* زر الحذف المدمج */
.deleteButtonInline {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 10px;
  font-weight: 600;
  cursor: pointer;
  margin-left: 8px;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 18px;
  height: 16px;
}

.deleteButtonInline:hover {
  background: #c82333;
  transform: scale(1.1);
}

/* تحديث SubItem لتقليل المسافات */
.subItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1px 0; /* تقليل المسافة */
  margin-bottom: 0px; /* إزالة المسافة السفلية */
  min-height: 18px; /* تقليل الارتفاع */
  cursor: pointer;
}

.subItem:hover {
  background: rgba(0, 0, 0, 0.02);
}

.subItemName {
  font-size: 10px;
  color: #666;
  line-height: 1.1; /* تحسين المسافة بين الأسطر */
  font-family: 'Cairo', sans-serif;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

/* تحديث OrderItemContainer لتقليل المسافة */
.orderItemContainer {
  margin-bottom: clamp(6px, 1vw, 10px); /* تقليل المسافة */
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding-bottom: clamp(4px, 0.8vw, 8px); /* تقليل المسافة */
}

/* تحديث SubItemsContainer */
.subItemsContainer {
  margin-top: -2px; /* تقليل الفجوة مع المنتج الأساسي */
  padding-left: 12px; /* تقليل المسافة اليسرى */
  border-left: 2px solid #f0f0f0;
}

/* تحديث SubItemDetails */
.subItemDetails {
  display: flex;
  align-items: center;
  gap: 4px; /* تقليل المسافة */
  flex: 1;
}

.subItemInfo {
  display: flex;
  align-items: center;
  gap: 3px; /* تقليل المسافة */
  flex: 1;
}

.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* تحديث الـ responsive */
@media (max-width: 768px) {
  .deleteButtonInline {
    font-size: 8px;
    padding: 1px 4px;
    min-width: 16px;
    height: 14px;
  }
  
  .subItem {
    min-height: 16px;
  }
  
  .subItemName {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .deleteButtonInline {
    font-size: 7px;
    padding: 1px 3px;
    min-width: 14px;
    height: 12px;
  }
  
  .subItem {
    min-height: 14px;
  }
  
  .subItemName {
    font-size: 8px;
  }
  
  .orderItemContainer {
    margin-bottom: 4px;
    padding-bottom: 4px;
  }
  
  .subItemsContainer {
    padding-left: 8px;
  }
}









/* تحديث SubItemBadge */
.subItemBadge {
  width: 12px; /* زيادة الحجم قليلاً */
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 7px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

/* حالة الحذف - يكبر ويصبح قابل للنقر */
.subItemBadge.deletable {
  width: 18px;
  height: 18px;
  font-size: 10px;
  cursor: pointer;
  transform: scale(1.1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.subItemBadge.deletable:hover {
  transform: scale(1.2);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
}

.subItemBadge.deletable:active {
  transform: scale(1.0);
}
/* ألوان الـ badges */
.subItemBadge.extra {
  background: #28a745;
}

.subItemBadge.extra.deletable {
  background: #dc3545; /* أحمر للحذف */
}

.subItemBadge.without {
  background: #dc3545;
}

.subItemBadge.without.deletable {
  background: #dc3545; /* يبقى أحمر */
}

.subItemBadge.option {
  background: #6c757d;
}

.subItemBadge.option.deletable {
  background: #dc3545; /* أحمر للحذف */
}

/* تحسين للتابلت */
@media (max-width: 1024px) {
  .subItemBadge.deletable {
    width: 22px; /* أكبر للتابلت */
    height: 22px;
    font-size: 12px;
  }
}

/* تحسين للموبايل */
@media (max-width: 768px) {
  .subItemBadge.deletable {
    width: 20px;
    height: 20px;
    font-size: 11px;
  }
}

@media (max-width: 480px) {
  .subItemBadge.deletable {
    width: 24px; /* أكبر للشاشات الصغيرة */
    height: 24px;
    font-size: 12px;
  }
}















/* إضافة هذه الأنماط لـ OrderSummary.module.css */

.customerInputContainer {
  position: relative;
  margin-bottom: var(--spacing-lg);
}

.customerInput {
  display: flex;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customerField {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Cairo', sans-serif;
  background: transparent;
}

.customerField:focus {
  outline: none;
}

.customerButton {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customerButton:hover {
  background: #025bb5;
}

.customerButton img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

/* Customer Dropdown Styles */
.customerDropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid var(--border-color);
  border-top: none;
  border-radius: 0 0 6px 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 300px;
  overflow-y: auto;
}

.dropdownHeader {
  padding: 8px 12px;
  background: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  font-size: 12px;
  font-weight: 600;
  color: #495057;
}

.customerOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #f1f3f4;
  transition: background 0.2s ease;
}

.customerOption:hover {
  background: #f8f9fa;
}

.customerOption:last-child {
  border-bottom: none;
}

.customerInfo {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.customerName {
  font-weight: 600;
  font-size: 14px;
  color: #333;
}

.customerPhone {
  font-size: 12px;
  color: #666;
}

.customerDetails {
  font-size: 11px;
  color: #999;
}

.searchingMessage {
  padding: 16px;
  text-align: center;
  color: #666;
  font-size: 12px;
}

.noResults {
  padding: 16px;
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.noResults span {
  color: #666;
  font-size: 12px;
}

.addNewCustomerBtn {
  background: var(--primary-blue);
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  transition: background 0.2s ease;
}

.addNewCustomerBtn:hover {
  background: #025bb5;
}

/* Address Selection Dropdown */
.addressSelectionContainer {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid var(--border-color);
  border-top: none;
  border-radius: 0 0 6px 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 1001;
  max-height: 250px;
  overflow-y: auto;
}

.addressHeader {
  padding: 8px 12px;
  background: #e3f2fd;
  border-bottom: 1px solid #bbdefb;
  font-size: 12px;
  font-weight: 600;
  color: #1976d2;
}

.addressOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #f1f3f4;
  transition: background 0.2s ease;
}

.addressOption:hover {
  background: #f8f9fa;
}

.addressOption:last-child {
  border-bottom: none;
}

.addressInfo {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.addressLine {
  font-weight: 600;
  font-size: 13px;
  color: #333;
}

.addressDetails {
  font-size: 11px;
  color: #666;
}

.addressLandmark {
  font-size: 10px;
  color: #999;
  font-style: italic;
}

/* Selected Customer Display */
.selectedCustomerInfo {
  background: #e3f2fd;
  border: 1px solid #bbdefb;
  border-radius: 4px;
  padding: 8px 12px;
  margin-bottom: var(--spacing-md);
}

.customerDisplayName {
  font-weight: 600;
  font-size: 13px;
  color: #1976d2;
  margin-bottom: 4px;
}

.selectedAddressInfo {
  font-size: 11px;
  color: #1976d2;
  opacity: 0.8;
}

/* Responsive */
@media (max-width: 768px) {
  .customerDropdown,
  .addressSelectionContainer {
    max-height: 200px;
  }
  
  .customerOption,
  .addressOption {
    padding: 8px;
  }
  
  .customerName,
  .addressLine {
    font-size: 12px;
  }
  
  .customerPhone,
  .addressDetails {
    font-size: 10px;
  }
}






.selectedOption {
  background-color: #007bff !important;
  color: white !important;
}

.selectedOption .customerName,
.selectedOption .customerPhone,
.selectedOption .customerDetails {
  color: white !important;
}

.customerDropdown {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: white;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.customerOption {
  padding: 12px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
  transition: background-color 0.2s;
}

.customerOption:hover {
  background-color: #f5f5f5;
}

.customerOption:last-child {
  border-bottom: none;
}



/* أنماط البحث المحسن */
.customerField:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.customerButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.selectedOption {
  background-color: #007bff !important;
  color: white;
}

.selectedOption .customerName,
.selectedOption .customerPhone,
.selectedOption .customerDetails {
  color: white;
}

.addNewCustomerBtn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.searchingMessage {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  color: #666;
  font-size: 14px;
  justify-content: center;
}

.loadingSpinner {
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}





/* إضافة styles للحالة الخاصة بـ Takeaway */
.takeawayButtons {
  display: flex;
  justify-content: center;
}

.takeawayButtons .actionButton.pay.fullWidth {
  flex: 1;
  min-width: 100%;
  max-width: 100%;
}

/* للتأكد من أن الزر يأخذ العرض الكامل */
.actionButton.fullWidth {
  width: 100% !important;
  flex-grow: 1;
}

===== src/Pages/pos/newSales/styles/PaymentPopup.module.css =====
.overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.popup {
  background: #f5f5f5;
  width: clamp(90vw, 95vw, 1800px);
  height: clamp(85vh, 90vh, 1200px);
  border-radius: clamp(8px, 1.5vw, 16px);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

/* Header */
.header {
  background: white;
  height: clamp(60px, 10vh, 80px);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 clamp(20px, 4vw, 40px);
  border-bottom: 2px solid #e9ecef;
  position: relative;
}

.logo {
  display: flex;
  align-items: center;
}

.logo img {
  height: clamp(40px, 8vh, 60px);
  width: auto;
}

.title {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  font-family: "Cairo-Bold", Helvetica;
  font-weight: 700;
  color: #333;
  font-size: clamp(18px, 3vw, 24px);
  margin: 0;
  direction: rtl;
}

.closeBtn {
  background: #ff6b6b;
  color: white;
  border: none;
  width: clamp(30px, 5vw, 40px);
  height: clamp(30px, 5vw, 40px);
  border-radius: 50%;
  font-size: clamp(18px, 3vw, 24px);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.closeBtn:hover {
  background: #ff5252;
  transform: scale(1.1);
}

/* المحتوى الرئيسي */
.content {
  flex: 1;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: clamp(10px, 2vw, 20px);
  padding: clamp(10px, 2vw, 20px);
  overflow: hidden;
  min-height: 0;
}

/* الأجزاء الثلاثة */
.leftSection,
.centerSection,
.rightSection {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 0;
  border-radius: clamp(8px, 1.5vw, 12px);
  overflow: hidden;
}




/* Responsive Design لجميع شاشات الكمبيوتر/اللابتوب */

/* شاشات كبيرة جداً 2560px+ */
@media (min-width: 2560px) {
  .popup {
    width: 85vw;
    height: 85vh;
  }
  
  .content {
    gap: clamp(20px, 2.5vw, 30px);
    padding: clamp(20px, 2.5vw, 30px);
  }
}

/* شاشات كبيرة 1920px - 2559px */
@media (max-width: 2559px) and (min-width: 1920px) {
  .popup {
    width: 90vw;
    height: 88vh;
  }
}

/* شاشات قياسية 1680px - 1919px */
@media (max-width: 1919px) and (min-width: 1680px) {
  .popup {
    width: 92vw;
    height: 90vh;
  }
}

/* شاشات متوسطة 1440px - 1679px */
@media (max-width: 1679px) and (min-width: 1440px) {
  .popup {
    width: 95vw;
    height: 92vh;
  }
  
  .content {
    gap: clamp(12px, 1.8vw, 18px);
    padding: clamp(12px, 1.8vw, 18px);
  }
}

/* شاشات صغيرة 1366px - 1439px */
@media (max-width: 1439px) and (min-width: 1366px) {
  .popup {
    width: 98vw;
    height: 95vh;
  }
  
  .header {
    height: clamp(50px, 8vh, 70px);
    padding: 0 clamp(15px, 3vw, 30px);
  }
  
  .content {
    gap: clamp(10px, 1.5vw, 15px);
    padding: clamp(10px, 1.5vw, 15px);
  }
}

/* لابتوب كبير 1280px - 1365px */
@media (max-width: 1365px) and (min-width: 1280px) {
  .popup {
    width: 99vw;
    height: 98vh;
    border-radius: clamp(6px, 1vw, 12px);
  }
  
  .header {
    height: clamp(50px, 7vh, 65px);
  }
  
  .content {
    gap: clamp(8px, 1.2vw, 12px);
    padding: clamp(8px, 1.2vw, 12px);
  }
}

/* لابتوب متوسط 1024px - 1279px */
@media (max-width: 1279px) and (min-width: 1024px) {
  .popup {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
  }
  
  .header {
    height: clamp(45px, 6vh, 60px);
    padding: 0 clamp(12px, 2vw, 20px);
  }
  
  .logo img {
    height: clamp(35px, 6vh, 50px);
  }
  
  .title {
    font-size: clamp(16px, 2.5vw, 20px);
  }
  
  .closeBtn {
    width: clamp(28px, 4vw, 35px);
    height: clamp(28px, 4vw, 35px);
    font-size: clamp(16px, 2.5vw, 20px);
  }
  
  .content {
    gap: clamp(6px, 1vw, 10px);
    padding: clamp(6px, 1vw, 10px);
  }
}

/* لابتوب صغير/تابلت كبير 768px - 1023px */
@media (max-width: 1023px) {
  .popup {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
  }
  
  .header {
    height: clamp(40px, 5vh, 50px);
    padding: 0 clamp(10px, 1.5vw, 15px);
  }
  
  .logo img {
    height: clamp(30px, 4vh, 40px);
  }
  
  .title {
    font-size: clamp(14px, 2vw, 18px);
  }
  
  .closeBtn {
    width: clamp(25px, 3.5vw, 30px);
    height: clamp(25px, 3.5vw, 30px);
    font-size: clamp(14px, 2vw, 18px);
  }
  
  .content {
    grid-template-columns: 1fr;
    grid-template-rows: minmax(0, 0.4fr) minmax(0, 1fr) minmax(0, 0.6fr);
    gap: clamp(5px, 0.8vw, 8px);
    padding: clamp(5px, 0.8vw, 8px);
  }
  
  .leftSection {
    order: 1;
    overflow-y: auto;
  }
  
  .centerSection {
    order: 2;
  }
  
  .rightSection {
    order: 3;
    overflow-y: auto;
  }
}

/* شاشات صغيرة جداً */
@media (max-width: 768px) {
  .content {
    grid-template-rows: minmax(200px, 30vh) 1fr minmax(150px, 25vh);
  }
}

@media (max-width: 480px) {
  .header {
    flex-direction: row;
    justify-content: space-between;
  }
  
  .title {
    position: static;
    transform: none;
    font-size: clamp(12px, 3vw, 16px);
  }
  
  .content {
    grid-template-rows: minmax(150px, 25vh) 1fr minmax(120px, 20vh);
  }
}



===== src/Pages/pos/newSales/styles/popup.css =====
/* src/Pages/pos/newSales/styles/popup.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.popup-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.popup-title {
  font-size: 20px;
  font-weight: 700;
  color: var(--text-primary);
  margin: 0;
}

.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
}


.popup-close:hover {
  background: #f0f0f0;
  transform: scale(1.1);
}

.popup-close img {
  width: 20px;
  height: 20px;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
  transition: color 0.2s ease;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

.popup-body {
  padding: 20px;
}

.quantity-display {
  text-align: center;
  font-size: 18px;
  font-weight: 600;
  color: var(--primary-blue);
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 8px;
}

.prices-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
}

.price-card {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.price-card:hover {
  border-color: var(--primary-blue);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.price-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  text-align: center;
}

.price-value {
  display: flex;
  align-items: baseline;
  gap: 5px;
}

.price-value .price {
  font-size: 20px;
  font-weight: 700;
  color: var(--primary-blue);
}

.price-value .currency {
  font-size: 14px;
  color: var(--text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .popup-content {
    width: 95%;
    margin: 20px;
  }
  
  .prices-grid {
    grid-template-columns: 1fr;
  }
  
  .popup-header {
    padding: 15px;
  }
  
  .popup-body {
    padding: 15px;
  }
}



@media (max-width: 768px) {
  .popup-close {
    width: 32px;
    height: 32px;
    padding: 6px;
  }
  
  .popup-close .MuiSvgIcon-root {
    font-size: 18px !important;
  }
}


.options-popup {
  max-width: 600px;
  max-height: 85vh;
}

.popup-title-section {
  flex: 1;
}

.popup-subtitle {
  font-size: 14px;
  color: var(--text-secondary);
  margin-top: 4px;
}

.group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.group-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.group-progress {
  font-size: 12px;
  color: var(--text-secondary);
  background: #f0f0f0;
  padding: 4px 8px;
  border-radius: 4px;
}

.group-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.selection-info {
  display: flex;
  align-items: center;
  gap: 10px;
}

.required-badge {
  background: var(--primary-red);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.selection-count {
  font-size: 14px;
  color: var(--text-primary);
  font-weight: 500;
}

.min-selection {
  font-size: 12px;
  color: var(--text-secondary);
}

.options-list {
  max-height: 300px;
  overflow-y: auto;
  margin-bottom: 20px;
}

.option-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border: 1px solid #eee;
  border-radius: 8px;
  margin-bottom: 10px;
  transition: all 0.2s ease;
}

.option-item:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.option-info {
  flex: 1;
}

.option-name {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 4px;
}

.option-price {
  font-size: 14px;
  color: var(--primary-green);
  font-weight: 500;
}

.comment-only {
  font-size: 12px;
  color: var(--text-secondary);
  font-style: italic;
}

.option-controls {
  display: flex;
  align-items: center;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 10px;
}

.quantity-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.quantity-btn:hover:not(:disabled) {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.quantity-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantity-btn.plus {
  border-color: var(--primary-green);
  color: var(--primary-green);
}

.quantity-btn.minus {
  border-color: var(--primary-red);
  color: var(--primary-red);
}

.quantity-display {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 20px;
  text-align: center;
}

.select-btn {
  padding: 8px 16px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.select-btn:hover {
  border-color: var(--primary-blue);
  background: #f8f9ff;
}

.select-btn.selected {
  background: var(--primary-blue);
  color: white;
  border-color: var(--primary-blue);
}

.popup-footer {
  border-top: 1px solid #eee;
  padding: 15px 20px;
}

.footer-buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.footer-buttons button {
  padding: 10px 20px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-cancel {
  background: #f5f5f5;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-cancel:hover {
  background: #e0e0e0;
}

.btn-back {
  background: #f8f9fa;
  border: 1px solid #ddd;
  color: var(--text-primary);
}

.btn-back:hover {
  background: #e9ecef;
}

.btn-skip {
  background: var(--primary-orange);
  border: 1px solid var(--primary-orange);
  color: white;
}

.btn-skip:hover {
  opacity: 0.9;
}

.btn-skip:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-next {
  background: var(--primary-blue);
  border: 1px solid var(--primary-blue);
  color: white;
}

.btn-next:hover:not(:disabled) {
  opacity: 0.9;
}

.btn-next:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* عرض الخيارات في الفاتورة */
.item-options {
  margin-top: 4px;
  padding-left: 10px;
}

.option-detail {
  margin-bottom: 2px;
}

.option-text {
  font-size: 11px;
  color: var(--text-secondary);
  font-weight: 400;
  line-height: 1.3;
}

/* Responsive */
@media (max-width: 768px) {
  .options-popup {
    width: 98%;
    max-height: 90vh;
  }
  
  .option-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .option-controls {
    align-self: flex-end;
  }
  
  .footer-buttons {
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .footer-buttons button {
    flex: 1;
    min-width: 80px;
  }
}
===== src/Pages/pos/newSales/styles/PriceSelectionPopup.module.css =====
/* src/Pages/pos/newSales/components/PriceSelectionPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease-out;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  width: 50%;
  max-height: 80vh;
  overflow-y: auto;
  animation: slideIn 0.3s ease-out;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #eee;
}

.popupTitle {
  font-size: 20px;
  font-weight: 600;
  color: #333;
  margin: 0;
}

.popupClose {
  width: 36px;
  height: 36px;
  border: none;
  background: #f5f5f5;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #e9ecef;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.quantityDisplay {
  text-align: center;
  font-size: 16px;
  font-weight: 500;
  color: #666;
  margin-bottom: 20px;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 6px;
}

.pricesGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 15px;
}

.priceCard {
  border: 2px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.priceCard:hover {
  border-color: #0373ed;
  background: #f8f9ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(3, 115, 237, 0.2);
}

.priceName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  margin-bottom: 10px;
}

.priceValue {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
}

.price {
  font-size: 24px;
  font-weight: 700;
  color: #0373ed;
}

.currency {
  font-size: 14px;
  color: #666;
  font-weight: 500;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 95%;
    margin: 10px;
  }
  
  .pricesGrid {
    grid-template-columns: 1fr;
  }
  
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .popupTitle {
    font-size: 18px;
  }
}

===== src/Pages/pos/newSales/styles/ProductCard.module.css =====
/* src/Pages/pos/newSales/styles/ProductCard.module.css */

.productCard {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  height: auto; /* تغيير من fixed height إلى auto */
  min-height: 180px; /* حد أدنى للارتفاع */
}

.productCard:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.productCard:active {
  transform: translateY(-2px);
}

.productImageContainer {
  position: relative;
  width: 100%;
  height: 120px; /* ارتفاع ثابت للصورة */
  overflow: hidden;
}

.productImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.productCard:hover .productImage {
  transform: scale(1.05);
}

/* النص المعروض على الصورة (السعر) */
.priceOverlay {
  position: absolute;
  top: 8px;
  right: 8px;
  background: rgba(3, 115, 237, 0.9);
  color: white;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  backdrop-filter: blur(4px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.productInfo {
  padding: 12px;
  flex: 1; /* يأخذ باقي المساحة المتاحة */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.productName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin: 0;
  line-height: 1.4;
  text-align: center;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* إزالة height constraints لتسمح بالتوسع */
}

/* Responsive Design */
@media (max-width: 1366px) {
  .productCard {
    min-height: 160px;
  }
  
  .productImageContainer {
    height: 100px;
  }
  
  .productName {
    font-size: 13px;
  }
  
  .priceOverlay {
    font-size: 11px;
    padding: 3px 6px;
  }
}

@media (max-width: 1024px) {
  .productCard {
    min-height: 140px;
  }
  
  .productImageContainer {
    height: 90px;
  }
  
  .productName {
    font-size: 12px;
  }
  
  .productInfo {
    padding: 10px;
  }
  
  .priceOverlay {
    font-size: 10px;
    padding: 2px 5px;
  }
}

@media (max-width: 768px) {
  .productCard {
    min-height: 120px;
  }
  
  .productImageContainer {
    height: 80px;
  }
  
  .productName {
    font-size: 11px;
  }
  
  .productInfo {
    padding: 8px;
  }
  
  .priceOverlay {
    font-size: 9px;
    padding: 2px 4px;
  }
}

@media (max-width: 480px) {
  .productCard {
    min-height: 100px;
  }
  
  .productImageContainer {
    height: 70px;
  }
  
  .productName {
    font-size: 10px;
  }
  
  .productInfo {
    padding: 6px;
  }
  
  .priceOverlay {
    font-size: 8px;
    padding: 1px 3px;
  }
}

===== src/Pages/pos/newSales/styles/ProductOptionsPopup.module.css =====
/* src/Pages/pos/newSales/components/ProductOptionsPopup.module.css */

.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popupContent {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  max-width: 700px;
  width: 50%;
  max-height: 85vh;
  overflow-y: auto;
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 20px;
  border-bottom: 1px solid #e9ecef;
  background: #f8f9fa;
}

.popupTitleSection {
  flex: 1;
}

.popupTitle {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  margin: 0 0 5px 0;
  font-family: 'Cairo', sans-serif;
}

.popupSubtitle {
  font-size: 14px;
  color: #666;
  margin: 0;
  font-family: 'Cairo', sans-serif;
}

.popupClose {
  width: 32px;
  height: 32px;
  border: none;
  background: #e9ecef;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.popupClose:hover {
  background: #dee2e6;
  transform: scale(1.1);
}

.popupBody {
  padding: 20px;
}

.optionsContainer {
  display: flex;
  flex-direction: column;
  gap: 25px;
}

.optionGroup {
  background: #f8f9fa;
  border-radius: 12px;
  padding: 20px;
  border-left: 4px solid #0373ed;
}

.groupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #e9ecef;
}

.groupTitle {
  display: flex;
  align-items: center;
  gap: 10px;
}

.groupName {
  font-size: 16px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
}

.requiredBadge {
  background: #e74c3c;
  color: white;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 10px;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.groupInfo {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.selectionCount {
  font-weight: 600;
  color: #0373ed;
}

.minSelection {
  color: #666;
}

.optionsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 12px;
}

.optionCard {
  background: white;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  padding: 16px;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.optionCard:hover {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.05);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.15);
}

.optionCard.selected {
  border-color: #0373ed;
  background: rgba(3, 115, 237, 0.1);
  box-shadow: 0 4px 16px rgba(3, 115, 237, 0.2);
}

.optionContent {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
  text-align: center;
}

.optionInfo {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.optionName {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  line-height: 1.3;
  font-family: 'Cairo', sans-serif;
}

.optionPrice {
  font-size: 12px;
  color: #e74c3c;
  font-weight: 500;
  font-family: 'Cairo', sans-serif;
}

.optionControls {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

/* للمجموعات المتعددة */
.quantitySection {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  justify-content: center;
}

.removeBtn {
  width: 28px;
  height: 28px;
  border: none;
  border-radius: 50%;
  background: #dc3545;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

.removeBtn:hover {
  background: #c82333;
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

.quantityBadge {
  background: #0373ed;
  color: white;
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 14px;
  font-weight: 600;
  min-width: 32px;
  text-align: center;
  font-family: 'Cairo', sans-serif;
  box-shadow: 0 2px 4px rgba(3, 115, 237, 0.2);
}

.addIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .addIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.maxReached {
  padding: 6px 12px;
  background: #f8f9fa;
  border-radius: 16px;
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

/* للمجموعات الفردية */
.singleSelect {
  display: flex;
  justify-content: center;
  align-items: center;
}

.selectedIcon {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #28a745;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
}

.unselectedIcon {
  width: 32px;
  height: 32px;
  border: 2px dashed #0373ed;
  border-radius: 50%;
  color: #0373ed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.optionCard:hover .unselectedIcon {
  border-style: solid;
  background: rgba(3, 115, 237, 0.1);
}

.totalSection {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #e9ecef;
}

.totalRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 18px;
  font-weight: 600;
  font-family: 'Cairo', sans-serif;
}

.totalLabel {
  color: #333;
}

.totalValue {
  color: #0373ed;
}

.popupFooter {
  display: flex;
  gap: 12px;
  padding: 20px;
  border-top: 1px solid #e9ecef;
  background: #f8f9fa;
}

.btnCancel {
  flex: 1;
  padding: 12px;
  background: #f8f9fa;
  color: #666;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnCancel:hover {
  background: #e9ecef;
}

.btnConfirm {
  flex: 2;
  padding: 12px;
  background: #0373ed;
  color: white;
  border: 1px solid #0373ed;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.btnConfirm:hover:not(:disabled) {
  background: #0256c7;
}

.btnConfirm:disabled {
  background: #ccc;
  border-color: #ccc;
  cursor: not-allowed;
}

/* تأثيرات النقر */
.optionCard:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(3, 115, 237, 0.2);
}

/* Responsive */
@media (max-width: 768px) {
  .popupContent {
    width: 98%;
    max-height: 90vh;
  }
  
  .optionsGrid {
    grid-template-columns: 1fr;
  }
  
  .groupHeader {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .popupFooter {
    flex-direction: column;
  }
  
  .optionGroup {
    padding: 15px;
  }
}

@media (max-width: 480px) {
  .popupHeader {
    padding: 15px;
  }
  
  .popupBody {
    padding: 15px;
  }
  
  .optionCard {
    padding: 12px;
  }
  
  .popupTitle {
    font-size: 16px;
  }
  
  .groupName {
    font-size: 14px;
  }
  
  .optionName {
    font-size: 13px;
  }
  
  .removeBtn {
    width: 24px;
    height: 24px;
  }
  
  .quantityBadge {
    padding: 4px 8px;
    font-size: 12px;
  }
  
  .selectedIcon,
  .unselectedIcon,
  .addIcon {
    width: 28px;
    height: 28px;
  }
}

===== src/Pages/pos/newSales/styles/responsive.css =====
/* src/Pages/pos/newSales/styles/responsive.css */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');


html[dir="rtl"] .pos-system,
html[dir="rtl"] .pos-system * {
  direction: ltr !important;
}


/* تحديد نظام الوحدات المرن */
:root {
  --base-font-size: clamp(10px, 0.8vw, 16px);
  --scale-factor: clamp(0.8, 1vw, 1.2);
  
  /* Colors */
  --primary-blue: #0373ed;
  --primary-green: #23a929;
  --primary-red: #e53935;
  --primary-orange: #ffb74d;
  --bg-main: #f5f5f5;
  --bg-white: #ffffff;
  --text-primary: #000000;
  --text-secondary: rgba(0, 0, 0, 0.7);
  --border-color: rgba(0, 0, 0, 0.2);
  
  /* Responsive spacing */
  --spacing-xs: calc(0.25rem * var(--scale-factor));
  --spacing-sm: calc(0.5rem * var(--scale-factor));
  --spacing-md: calc(1rem * var(--scale-factor));
  --spacing-lg: calc(1.5rem * var(--scale-factor));
  --spacing-xl: calc(2rem * var(--scale-factor));
  --spacing-xxl: calc(3rem * var(--scale-factor));
  
  /* Component heights */
  --header-height: clamp(60px, 8vh, 100px);
  --keypad-height: clamp(80px, 8vh, 120px);
  --action-bar-height: clamp(50px, 7vh, 80px);
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
      font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;

}

html {
  font-size: var(--base-font-size);
  height: 100%;
}

body {
  font-family: 'Nunito', sans-serif;
  background-color: var(--bg-main);
  color: var(--text-primary);
  height: 100%;
  overflow: hidden;
    direction: ltr !important;

}

/* Main container */
.pos-system {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
    direction: ltr !important;
}

/* Top Bar */
.top-bar {
  height: var(--header-height);
  background: var(--bg-white);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.top-bar-content {
  height: 100%;
  padding: 0 var(--spacing-xl);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo {
  height: 70%;
  width: auto;
  object-fit: contain;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  text-decoration: none;
  color: var(--text-primary);
  font-size: clamp(12px, 1.2vw, 18px);
  font-weight: 500;
  transition: all 0.2s ease;
}

.nav-item:hover {
  background: rgba(3, 115, 237, 0.1);
}

.nav-item.active {
  color: var(--primary-blue);
}

.nav-item img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

.order-type-select {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: clamp(12px, 1.2vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: var(--bg-white);
  min-width: 120px;
}

.menu-button {
  padding: var(--spacing-sm);
  background: transparent;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s ease;
}

.menu-button:hover {
  background: rgba(0, 0, 0, 0.05);
}

.menu-button img {
  width: clamp(20px, 2vw, 28px);
  height: clamp(20px, 2vw, 28px);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  overflow: hidden;
}

/* Products Section */
.products-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  overflow: hidden;
}

/* Number Pad Bar */
.number-pad-bar {
  height: var(--keypad-height);
  display: flex;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.keypad-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1px;
  background: var(--border-color);
}

.keypad-key {
  background: var(--bg-white);
  border: none;
  font-size: clamp(18px, 2.5vw, 32px);
  font-weight: 600;
  color: var(--text-primary);
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.keypad-key:hover {
  background: #f8f9fa;
}

.keypad-display {
  width: clamp(120px, 15vw, 200px);
  background: var(--primary-blue);
  color: white;
  font-size: clamp(20px, 2.8vw, 36px);
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Action Buttons Bar */
.action-buttons-bar {
  height: var(--action-bar-height);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  flex-shrink: 0;
}

.action-chips {
  display: flex;
  gap: var(--spacing-md);
}

.action-chip {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(12px, 1.4vw, 18px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 100%;
}

.action-chip img {
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
}

.action-chip.extra { background: var(--primary-green); }
.action-chip.without { background: var(--primary-red); }
.action-chip.offer { background: var(--primary-orange); }

.action-chip:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.search-container {
  position: relative;
  display: flex;
  background: var(--bg-white);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  height: 85%;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  width: clamp(14px, 1.6vw, 20px);
  height: clamp(14px, 1.6vw, 20px);
  z-index: 1;
}

.search-input {
  width: clamp(200px, 25vw, 350px);
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: calc(var(--spacing-md) * 2 + 20px);
  border: none;
  font-size: clamp(12px, 1.4vw, 16px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
  height: 100%;
}

.search-input:focus {
  outline: none;
}

.filter-button {
  width: clamp(40px, 5vw, 60px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.filter-button:hover {
  background: #025bb5;
}

.filter-button img {
  width: clamp(16px, 1.8vw, 24px);
  height: clamp(16px, 1.8vw, 24px);
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  padding: 20px;
  max-height: calc(100vh - 200px);
  overflow-y: auto;
  overflow-x: hidden;
}


.product-grid::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-grid::-webkit-scrollbar-track {
  background: transparent;
}

.product-grid::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.product-card {
  aspect-ratio: 3/4;
  background: var(--bg-white);
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: none;
  display: flex;
  flex-direction: column;
    min-width: 0; /* للسماح بالتقلص */

}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.product-image {
  width: 100%;
  height: 70%;
  object-fit: cover;
    flex-shrink: 0;

}

.product-info {
  height: 30%;
  padding: clamp(4px, 0.8vw, 12px);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: clamp(4px, 0.6vw, 8px);
  width: 100%;
  min-height: 0;
}

.product-name {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1.2vw, 16px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
  text-align: right; /* محاذاة لليمين للنص العربي */
  flex: 1; /* يأخذ المساحة المتاحة */
  min-width: 0; /* يسمح بالتقلص */
  word-wrap: break-word;
    flex-direction: row; /* تغيير من column إلى row */

  overflow-wrap: break-word;
  hyphens: auto;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* السماح بسطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.product-price {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: clamp(2px, 0.3vw, 4px);
  width: 100%;
}

.product-price .price {
  font-size: clamp(9px, 1.4vw, 18px);
  font-weight: 700;
  color: var(--text-primary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}
.product-price .currency {
  font-size: clamp(7px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-secondary);
  white-space: nowrap; /* منع النقل للسطر التالي */
}

/* Categories Sidebar */
.categories-sidebar {
  width: clamp(80px, 10vw, 120px);
  background: transparent;
  flex-shrink: 0;
}

.categories-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  height: 100%;
  overflow-y: auto;
  padding: var(--spacing-sm);
 scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.categories-list::-webkit-scrollbar {
  width: 4px;
}

.categories-list::-webkit-scrollbar-track {
  background: transparent;
}

.categories-list::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.category-item {
  aspect-ratio: 1;
  background: var(--bg-white);
  border-radius: 8px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-sm);
  text-align: center;
}

.category-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.category-item.active {
  border-color: var(--primary-blue);
}

.category-item img {
  width: clamp(24px, 3vw, 48px);
  height: clamp(24px, 3vw, 48px);
  object-fit: contain;
}

.category-item span {
  font-family: 'Cairo', sans-serif;
  font-size: clamp(8px, 1vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  line-height: 1.2;
}

/* Order Summary */
.order-summary {
  width: clamp(280px, 35vw, 400px);
  background: var(--bg-white);
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
}

.order-header {
  height: clamp(50px, 7vh, 80px);
  display: flex;
  flex-shrink: 0;
}

.order-number {
  flex: 1;
  background: var(--primary-blue);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
  border-radius: 8px 0 0 0;
}

.order-total {
  width: clamp(100px, 12vw, 150px);
  border: 2px solid var(--primary-blue);
  color: var(--primary-blue);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  border-radius: 0 8px 0 0;
}

.order-total .amount {
  font-size: clamp(16px, 2vw, 24px);
  font-weight: 700;
}

.order-total .currency {
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
}

.order-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  scrollbar-width: none;
  scrollbar-color: var(--border-color) transparent;
}

.order-content::-webkit-scrollbar {
  width: 6px;
}

.order-content::-webkit-scrollbar-track {
  background: transparent;
}

.order-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.order-title {
  font-size: clamp(14px, 1.6vw, 20px);
  font-weight: 700;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  
}

.customer-input {
  display: flex;
  margin-bottom: var(--spacing-lg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  overflow: hidden;
}

.customer-field {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  font-size: clamp(10px, 1.2vw, 14px);
  font-family: 'Nunito', sans-serif;
  background: transparent;
}

.customer-field:focus {
  outline: none;
}

.customer-button {
  width: clamp(30px, 4vw, 45px);
  background: var(--primary-blue);
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.customer-button:hover {
  background: #025bb5;
}

.customer-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.order-items {
  max-height: 50vh; /* زيادة من 40vh إلى 50vh */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
  scrollbar-width: thin;
  scrollbar-color: var(--border-color) transparent;
}

.order-items::-webkit-scrollbar {
  width: 4px;
}

.order-items::-webkit-scrollbar-track {
  background: transparent;
}

.order-items::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 2px;
}

.order-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding-bottom: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.item-details {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  flex: 1;
  min-width: 0; /* للسماح بالتقلص */
}

.delete-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--spacing-xs);
  border-radius: 4px;
  transition: background 0.2s ease;
}

.delete-button:hover {
  background: rgba(229, 57, 53, 0.1);
}

.delete-button img {
  width: clamp(12px, 1.4vw, 16px);
  height: clamp(12px, 1.4vw, 16px);
}

.item-info {
  flex: 1;
  min-width: 0;
}

.item-name {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 600;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  line-height: 1.2;
}

.item-extra {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.extra-price,
.extra-total {
  font-size: clamp(9px, 1.1vw, 13px);
  color: var(--text-secondary);
}

.item-prices {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  min-width: fit-content;
}

.item-price::after {
  content: "|";
  margin-left: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: normal;
}

.item-price {
  font-size: clamp(10px, 1.2vw, 14px);
  font-weight: 600;
  color: var(--text-primary);
  white-space: nowrap;
}

.item-total {
  font-size: clamp(11px, 1.3vw, 16px);
  font-weight: 700;
  color: var(--primary-blue);
  white-space: nowrap;
}

.order-footer {
  padding: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 1px solid var(--border-color);
  flex-shrink: 0;
}

.summary-rows {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm); /* كان var(--spacing-md) */
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(10px, 1.2vw, 15px); /* كان 11px, 1.3vw, 16px */
  font-weight: 500;
  line-height: 1.3; /* إضافة line-height للوضوح */
}

.summary-row span:last-child {
  font-weight: 700;
  color: var(--text-primary); /* تأكيد اللون */
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: clamp(13px, 1.5vw, 19px); /* كان 14px, 1.6vw, 20px */
  font-weight: 700;
  padding-top: var(--spacing-md); /* كان var(--spacing-lg) */
  border-top: 2px solid var(--border-color);
  margin-bottom: var(--spacing-md); /* كان var(--spacing-lg) */
}

.action-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--spacing-md);
}

.action-button {
  height: clamp(40px, 6vh, 60px);
  border-radius: 6px;
  border: none;
  color: white;
  font-size: clamp(10px, 1.2vw, 16px);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
}

.action-button img {
  width: clamp(12px, 1.4vw, 18px);
  height: clamp(12px, 1.4vw, 18px);
}

.action-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.action-button.send { background: var(--primary-red); }
.action-button.print { background: var(--primary-blue); }
.action-button.pay { background: var(--primary-green); }

/* Responsive breakpoints */
@media (max-width: 1366px) {
  :root {
    --scale-factor: 0.9;
  }
    .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.8);
  }
  
  .order-items {
    max-height: 45vh;
  }
  
}

@media (max-width: 1024px) {
  :root {
    --scale-factor: 0.8;
  }
  
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
  }
    .summary-rows {
    gap: calc(var(--spacing-sm) * 0.6);
  }
  
  .order-items {
    max-height: 42vh;
  }
}

@media (min-width: 1920px) {
  :root {
    --scale-factor: 1.1;
  }
}

@media (min-width: 2560px) {
  :root {
    --scale-factor: 1.3;
  }
}

/* Print styles */
@media print {
  .pos-system {
    transform: none !important;
    width: 100% !important;
    height: auto !important;
  }
}



/* إضافة media query لمنطقة 1400-1600px */
@media (min-width: 1400px) and (max-width: 1600px) {
  :root {
    --scale-factor: 0.95; /* قيمة وسط */
    --base-font-size: clamp(12px, 1vw, 18px); /* تحسين الخط */
  }
  
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: var(--spacing-md);
  }
  
  /* تثبيت ارتفاعات العناصر */
  .action-buttons-bar {
    height: clamp(55px, 8vh, 85px);
  }
  
  
  .top-bar {
    height: clamp(65px, 9vh, 105px);
  }
}

.loading-message {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  font-size: 1.6rem;
  color: var(--text-secondary);
}

.item-size {
  font-size: clamp(9px, 1vw, 12px);
  color: var(--primary-blue);
  font-weight: 500;
}

.product-card .product-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-xs);
}

.product-card .product-name {
  order: 1;
}

.product-card .product-price {
  order: 2;
}


.item-size-inline {
  color: var(--primary-blue);
  font-weight: 500;
  font-size: 0.9em; /* أصغر قليلاً من اسم الصنف */
}

.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

/* تحسين responsive للشاشات المختلفة */
@media (max-width: 1366px) {
  .product-name {
    font-size: clamp(7px, 1.1vw, 14px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(8px, 1.3vw, 16px);
  }
  
  .product-price .currency {
    font-size: clamp(6px, 0.9vw, 12px);
  }
}

@media (max-width: 1024px) {
  .product-name {
    font-size: clamp(6px, 1vw, 12px);
    -webkit-line-clamp: 2;
  }
  
  .product-price .price {
    font-size: clamp(7px, 1.2vw, 14px);
  }
  
  .product-price .currency {
    font-size: clamp(5px, 0.8vw, 10px);
  }
  
  .item-prices {
    flex-direction: column;
    gap: 2px;
    align-items: flex-end;
  }
  
  .item-price::after {
    display: none;
  }
}

/* للشاشات الكبيرة */
@media (min-width: 1920px) {
  .product-name {
    font-size: clamp(10px, 1.4vw, 20px);
  }
  
  .product-price .price {
    font-size: clamp(12px, 1.6vw, 22px);
  }
  
  .product-price .currency {
    font-size: clamp(9px, 1.2vw, 18px);
  }
}

/* جعل الصفحة دائماً LTR */
.pos-system {
  direction: ltr !important;
}

.pos-system * {
  direction: ltr !important;
}

/* تحسين شكل الـ Material UI Icons */
.back-button {
  background-color: #f0f0f0 !important;
  border: 2px solid #ddd !important;
  color: var(--text-primary) !important;
  display: flex !important;
  align-items: center !important;
  gap: 8px !important;
}

.back-button:hover {
  background-color: #e0e0e0 !important;
}

.back-button .MuiSvgIcon-root {
  font-size: 18px !important;
  color: var(--text-primary) !important;
}

/* تحسين شكل زر الإغلاق في الـ popup */
.popup-close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup-close:hover {
  background: #f0f0f0;
}

.popup-close .MuiSvgIcon-root {
  font-size: 20px !important;
  color: var(--text-secondary) !important;
}

.popup-close:hover .MuiSvgIcon-root {
  color: var(--text-primary) !important;
}

/* التأكد من أن الـ popup overlay يمكن الضغط عليه */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  cursor: pointer; /* إضافة cursor للإشارة أنه قابل للضغط */
}

.popup-content {
  cursor: default; /* إزالة cursor من المحتوى */
  /* باقي الـ styles كما هي */
}

/* إضافة animation للـ popup */
.popup-overlay {
  animation: fadeIn 0.2s ease-out;
}

.popup-content {
  animation: slideIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}


/* ضمان عدد المنتجات في الصف حسب حجم الشاشة */

/* شاشات كبيرة جداً - 7 منتجات */
@media (min-width: 1920px) {
  .product-grid {
    grid-template-columns: repeat(7, 1fr);
    gap: 20px;
    padding: 24px;
  }
}

/* شاشات كبيرة - 6-7 منتجات */
@media (max-width: 1600px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 18px;
    padding: 22px;
  }
}

/* شاشات متوسطة - 6 منتجات */
@media (max-width: 1400px) {
  .product-grid {
    grid-template-columns: repeat(6, 1fr);
    gap: 16px;
    padding: 20px;
  }
}

/* شاشات لابتوب - 5-6 منتجات */
@media (max-width: 1200px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 14px;
    padding: 18px;
  }
}

/* شاشات صغيرة - 5 منتجات */
@media (max-width: 1024px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 12px;
    padding: 16px;
  }
}

/* تابلت - 5 منتجات */
@media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    padding: 14px;
  }
}

/* موبايل - 5 منتجات */
@media (max-width: 480px) {
  .product-grid {
    grid-template-columns: repeat(5, 1fr);
    gap: 8px;
    padding: 12px;
  }
}

/* تحسينات إضافية للشبكة */
.product-grid::-webkit-scrollbar {
  width: 8px;
}

.product-grid::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.product-grid::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* تأثيرات الانتقال للشبكة */
.product-grid {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



/* إضافة هذا للـ CSS الموجود */

/* Order Item Selection */
.order-item {
  cursor: pointer;
  transition: all 0.3s ease;
}

.order-item.selected {
  background: rgba(3, 115, 237, 0.1);
  border-left: 4px solid #0373ed;
}

.order-item:hover {
  background: rgba(0, 0, 0, 0.05);
}

/* Extra/Without Items */
.extra-item {
  border-left: 3px solid #28a745;
}

.without-item {
  border-left: 3px solid #dc3545;
}

.extra-badge {
  background: #28a745;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.without-badge {
  background: #dc3545;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  margin-right: 4px;
  font-weight: 600;
}

.item-total.negative {
  color: #dc3545;
  font-weight: 600;
}
/* Sub-items styling */
.sub-items-container {
  margin-top: 6px;
  padding-left: 8px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  margin-bottom: 3px;
}

.sub-item-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 2px 0;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-text {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 12px;
  height: 12px;
}

/* Loading and Error states */
.pos-system.loading,
.pos-system.error {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  flex-direction: column;
  gap: 20px;
}

.loading-spinner {
  font-size: 18px;
  color: #666;
}

.error-message {
  font-size: 16px;
  color: #dc3545;
  text-align: center;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-text {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 10px;
    height: 10px;
  }
}



* تصميم التعليق */
.item-note {
  display: flex;
  align-items: flex-start;
  gap: 4px;
  margin-top: 4px;
  padding: 3px 6px;
  background: rgba(108, 117, 125, 0.1);
  border-radius: 4px;
  border-left: 2px solid #6c757d;
}

.note-icon {
  font-size: 10px;
  line-height: 1;
  flex-shrink: 0;
  margin-top: 1px;
}

.note-text {
  font-size: 10px;
  color: #6c757d;
  line-height: 1.2;
  font-style: italic;
  word-wrap: break-word;
  overflow-wrap: break-word;
  flex: 1;
}

/* تأكيد أن التعليق بنفس حجم الخيارات */
.item-note,
.option-detail,
.sub-item {
  font-size: 10px;
  line-height: 1.2;
  margin-top: 3px;
}

/* Responsive للتعليقات */
@media (max-width: 768px) {
  .item-note {
    padding: 2px 4px;
    margin-top: 3px;
  }
  
  .note-icon {
    font-size: 9px;
  }
  
  .note-text {
    font-size: 9px;
  }
}

@media (max-width: 480px) {
  .item-note {
    padding: 2px 3px;
    margin-top: 2px;
  }
  
  .note-icon {
    font-size: 8px;
  }
  
  .note-text {
    font-size: 8px;
  }
}

/* تحسينات إضافية */
.item-note:empty {
  display: none;
}

.note-text:empty {
  display: none;
}

/* تأثير hover خفيف */
.order-item:hover .item-note {
  background: rgba(108, 117, 125, 0.15);
}


/* للمنتجات الإضافية */
.order-item.extra-item .item-note {
  background: rgba(40, 167, 69, 0.1);
  border-left-color: #28a745;
}

.order-item.extra-item .note-text {
  color: #28a745;
}

/* للمنتجات بدون */
.order-item.without-item .item-note {
  background: rgba(220, 53, 69, 0.1);
  border-left-color: #dc3545;
}

.order-item.without-item .note-text {
  color: #dc3545;
}




/* تحديث Sub-items styling */
.order-item-container {
  margin-bottom: 8px;
}

.sub-items-container {
  margin-top: 6px;
  padding-left: 20px;
  border-left: 2px solid #f0f0f0;
}

.sub-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 4px 0;
  margin-bottom: 2px;
  min-height: 24px;
}

.sub-item-details {
  display: flex;
  align-items: center;
  gap: 6px;
  flex: 1;
}

.sub-item-info {
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1;
}

.sub-item-badge {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.sub-item-badge.extra {
  background: #28a745;
}

.sub-item-badge.without {
  background: #dc3545;
}

.sub-item-badge.option {
  background: #6c757d;
}

.sub-item-name {
  font-size: 10px;
  color: #666;
  line-height: 1.2;
  font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
}

.sub-item-prices {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 2px;
  min-width: 60px;
}

.sub-item-price {
  font-size: 9px;
  color: #999;
  font-weight: 500;
}

.sub-item-total {
  font-size: 10px;
  color: #333;
  font-weight: 600;
}

.sub-item-total.negative {
  color: #dc3545;
}

.sub-item-delete {
  width: 16px;
  height: 16px;
  border: none;
  background: transparent;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
  transition: opacity 0.2s ease;
  margin-left: 4px;
}

.sub-item-delete:hover {
  opacity: 1;
}

.sub-item-delete img {
  width: 10px;
  height: 10px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .sub-item-name {
    font-size: 9px;
  }
  
  .sub-item-price {
    font-size: 8px;
  }
  
  .sub-item-total {
    font-size: 9px;
  }
  
  .sub-item-delete {
    width: 14px;
    height: 14px;
  }
  
  .sub-item-delete img {
    width: 8px;
    height: 8px;
  }
}


/* حالة الأزرار المعطلة */
.action-chip.disabled {
  opacity: 0.4;
  cursor: not-allowed;
  pointer-events: none;
}

.action-chip.disabled:hover {
  background: inherit;
  border-color: inherit;
  transform: none;
  box-shadow: none;
}

.action-chip.disabled img {
  opacity: 0.5;
}

.action-chip.disabled span {
  opacity: 0.5;
}

/* تحسين الـ tooltip */
.action-chip[title] {
  position: relative;
}

.action-chip[title]:hover::after {
  content: attr(title);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #333;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 1000;
  margin-bottom: 5px;
}

.action-chip[title]:hover::before {
  content: '';
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  border: 5px solid transparent;
  border-top-color: #333;
  z-index: 1000;
}



===== src/Pages/pos/newSales/styles/TableSelectionPopup.module.css =====
/* src/Pages/pos/newSales/components/TableSelectionPopup.module.css */

/* Popup Overlay */
.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popupContainer {
  background: white;
  border-radius: 16px;
  width: 95%;
  max-width: 1400px;
  height: 90vh;
  position: relative;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

/* Close Button */
.closeBtn {
  position: absolute;
  top: 20px;
  left: 20px;
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 8px 16px;
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
  z-index: 1001;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  font-family: 'Cairo', sans-serif;
}

.closeBtn:hover {
  background: #c82333;
  transform: translateY(-2px);
}

/* Main Layout */
.posSystem {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.mainContent {
  flex: 1;
  display: flex;
  height: 100%;
  overflow: hidden;
}

/* Products Section (Tables) */
.productsSection {
  flex: 1;
  background: #f8f9fa;
  padding: 20px;
  overflow-y: auto;
  padding-top: 80px; /* Space for close button */
}

.productGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 16px;
  padding: 20px;
}

.productItem {
  background: white;
  border-radius: 12px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  position: relative;
  min-height: 160px;
}

.productItem:hover:not(.occupied) {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  border-color: #0373ed;
}

.productItem.occupied {
  opacity: 0.6;
  cursor: not-allowed;
  background: #f8f9fa;
}

.productItem.occupied::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(220, 53, 69, 0.1);
  border-radius: 12px;
}

.productImage {
  width: 60px;
  height: 60px;
  border-radius: 8px;
  overflow: hidden;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f0f0f0;
}

.productImage img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.productName {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.productName span {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
}

.productName small {
  font-size: 12px;
  color: #666;
  font-family: 'Cairo', sans-serif;
}

.status {
  font-size: 10px;
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: 500;
  margin-top: 4px;
  display: inline-block;
  font-family: 'Cairo', sans-serif;
}

.status.available {
  background: #d4edda;
  color: #155724;
}

.status.occupied {
  background: #f8d7da;
  color: #721c24;
}

/* Categories Sidebar (Sections) */
.categoriesSidebar {
  width: 280px;
  background: white;
  border-left: 1px solid #e9ecef;
  padding: 20px;
  overflow-y: auto;
  height: 100%;
}

.categoriesList {
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding-top: 20px;
}

.categoryItem {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: #f8f9fa;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  text-align: left;
}

.categoryItem:hover {
  background: #e9ecef;
  transform: translateY(-2px);
}

.categoryItem.active {
  background: #0373ed;
  color: white;
  border-color: #0373ed;
}

.categoryItem.active span,
.categoryItem.active small {
  color: white;
}

.categoryItem img {
  width: 40px;
  height: 40px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
}

.categoryItem span {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  font-family: 'Cairo', sans-serif;
  line-height: 1.2;
}

.categoryItem small {
  font-size: 11px;
  color: #666;
  font-family: 'Cairo', sans-serif;
  margin-top: 2px;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 12px;
    padding: 15px;
  }
  
  .categoriesSidebar {
    width: 240px;
  }
  
  .productItem {
    min-height: 140px;
    padding: 12px;
  }
}

@media (max-width: 768px) {
  .popupContainer {
    width: 98%;
    height: 95vh;
  }
  
  .mainContent {
    flex-direction: column;
  }
  
  .categoriesSidebar {
    width: 100%;
    height: 120px;
    border-left: none;
    border-top: 1px solid #e9ecef;
    padding: 15px;
  }
  
  .categoriesList {
    flex-direction: row;
    overflow-x: auto;
    gap: 8px;
    padding-top: 10px;
  }
  
  .categoryItem {
    min-width: 120px;
    padding: 8px;
    gap: 8px;
  }
  
  .categoryItem img {
    width: 32px;
    height: 32px;
  }
  
  .categoryItem span {
    font-size: 12px;
  }
  
  .categoryItem small {
    font-size: 10px;
  }
  
  .productsSection {
    padding: 15px;
    padding-top: 70px;
  }
  
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 10px;
    padding: 10px;
  }
  
  .productItem {
    min-height: 120px;
    padding: 10px;
  }
  
  .productImage {
    width: 50px;
    height: 50px;
    margin-bottom: 8px;
  }
  
  .productName span {
    font-size: 12px;
  }
  
  .productName small {
    font-size: 10px;
  }
  
  .closeBtn {
    top: 10px;
    left: 10px;
    padding: 6px 12px;
    font-size: 12px;
  }
}

@media (max-width: 480px) {
  .productGrid {
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 8px;
  }
  
  .productItem {
    min-height: 100px;
    padding: 8px;
  }
  
  .productImage {
    width: 40px;
    height: 40px;
  }
  
  .productName span {
    font-size: 11px;
  }
  
  .status {
    font-size: 9px;
    padding: 1px 4px;
  }
}



/* أنماط المؤقت */
.timerOverlay {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  backdrop-filter: blur(4px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  z-index: 10;
}

.timerInfo {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.75rem;
  margin-top: 2px;
  color: #666;
}

.occupiedStatus {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.sectionStats {
  margin-top: 4px;
}

.tableCount {
  font-size: 0.7rem;
  color: #666;
  font-weight: 500;
}

.productItem.occupied {
  border: 2px solid #dc3545;
  background-color: #fee;
  cursor: not-allowed;
}

.productItem.available {
  border: 2px solid #28a745;
  background-color: #f0fff4;
  cursor: pointer;
}

.productItem.occupied:hover {
  transform: none;
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
}

.productItem.available:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 16px rgba(40, 167, 69, 0.2);
}

.tableName {
  font-weight: 600;
  font-size: 1rem;
}

.tableCapacity {
  color: #666;
  font-size: 0.8rem;
}

/* أنماط مؤشر التحميل المحسن */
.searchingMessage {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  color: #666;
  font-size: 14px;
}

.loadingSpinner {
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
===== src/Pages/pos/newSales/styles/tailwind.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Primary Colors */
    --primary-blue: #0373ed;
    --primary-green: #22a928;
    --primary-red: #e53935;
    --primary-orange: #ffb74d;

    /* Background Colors */
    --bg-main: #f5f5f5;
    --bg-card: #ffffff;
    --bg-overlay-light: #00000033;
    --bg-overlay-dark: #0000004c;

    /* Text Colors */
    --text-primary: #000000;
    --text-secondary: #0000007f;
    --text-white: #ffffff;
    --text-blue: #0373ed;
  }
}

@layer utilities {
  /* Primary Colors */
  .bg-primary-blue {
    background-color: var(--primary-blue);
  }
  .bg-primary-green {
    background-color: var(--primary-green);
  }
  .bg-primary-red {
    background-color: var(--primary-red);
  }
  .bg-primary-orange {
    background-color: var(--primary-orange);
  }

  /* Background Colors */
  .bg-main {
    background-color: var(--bg-main);
  }
  .bg-card {
    background-color: var(--bg-card);
  }
  .bg-overlay-light {
    background-color: var(--bg-overlay-light);
  }
  .bg-overlay-dark {
    background-color: var(--bg-overlay-dark);
  }

  /* Text Colors */
  .text-primary {
    color: var(--text-primary);
  }
  .text-secondary {
    color: var(--text-secondary);
  }
  .text-white {
    color: var(--text-white);
  }
  .text-blue {
    color: var(--text-blue);
  }
}
===== src/Pages/pos/newSales/types/PosSystem.tsx =====
// src/Pages/pos/newSales/types/PosSystem.tsx
export interface PosProduct {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  categoryId: string;
  productType: number; // ✅ إضافة هذا الحقل
  productPrices: PosPrice[];
  hasMultiplePrices: boolean;
  displayPrice?: number;
  productOptionGroups?: ProductOptionGroup[]; // إضافة المجموعات
}


export interface ProductOptionGroup {
  id: string;
  name: string;
  isRequired: boolean;
  allowMultiple: boolean;
  minSelection: number;
  maxSelection: number;
  sortOrder: number;
  optionItems: ProductOptionItem[];
}

export interface ProductOptionItem {
  id: string;
  name: string;
  productPriceId?: string | null; // Change this line to support null
  useOriginalPrice: boolean;
  extraPrice: number;
  isCommentOnly: boolean;
  sortOrder: number;
}

export interface SelectedOption {
  groupId: string;
  itemId: string;
  itemName: string;
  quantity: number;
  extraPrice: number;
  isCommentOnly: boolean;
}

export interface PosPrice {
  id: string;
  name: string;
  nameArabic: string;
  price: number;
  barcode: string;
}

export interface CategoryItem {
  id: string;
  name: string;
  nameArabic: string;
  image: string;
  products?: PosProduct[]; // ✅ إضافة هذا الحقل
  parentId?: string;
  children?: CategoryItem[];
  hasChildren: boolean;
  hasProducts?: boolean;
  selected?: boolean;
}

export interface OrderItem {
  id: string;
  product: PosProduct;
  selectedPrice: PosPrice;
  quantity: number;
  totalPrice: number;
  selectedOptions?: SelectedOption[]; // إضافة الخيارات المختارة
  notes?: string;
    isExtra?: boolean;        // جديد
  isWithout?: boolean;      // جديد
  parentItemId?: string;    // جديد - للربط بالمنتج الأصلي
  subItems?: SubItem[]; // جديد - للعناصر الفرعية
  discountPercentage?: number; // جديد
  discountAmount?: number; // جديد
}


export interface SubItem {
  id: string;
  type: 'option' | 'extra' | 'without';
  name: string;
  quantity: number;
  price: number;
  isRequired?: boolean; // للمجموعات المطلوبة
  groupId?: string; // للمجموعات
  productId?: string; // للإضافات/بدون
}

export interface OrderSummary {
  items: OrderItem[];
  subtotal: number;
  discount: number;
  tax: number;
  service: number;
  total: number;
}
===== src/Pages/pos/newSales/types/TableSystem.ts =====
// src/Pages/pos/newSales/types/TableSystem.ts
export interface Table {
  id?: string;
  name: string;
  sectionId: string;
  sectionName?: string;
  capacity: number;
  isOccupied?: boolean;
  currentOrderId?: string;
    image?: string; // إضافة جديدة
}

export interface TableSection {
  id: string;
  name: string;
  branchName?: string;
  serviceCharge: number;
  tables: Table[];
  branchId: string;
  companyID?: string;
  isActive: boolean;
    image?: string; // إضافة جديدة
}

export interface TableSelection {
  section: TableSection;
  table: Table;
}


============================================================
FILE: tailwind.config.js
============================================================
module.exports = {
  content: ["./src/**/*.{js,ts,jsx,tsx,html,mdx}"],
  darkMode: "class",
  theme: {
    extend: {
      colors: {
        primary: {
          blue: "var(--primary-blue)",
          green: "var(--primary-green)",
          red: "var(--primary-red)",
          orange: "var(--primary-orange)"
        },
        background: {
          main: "var(--bg-main)",
          card: "var(--bg-card)",
          overlayLight: "var(--bg-overlay-light)",
          overlayDark: "var(--bg-overlay-dark)"
        },
        text: {
          primary: "var(--text-primary)",
          secondary: "var(--text-secondary)",
          white: "var(--text-white)",
          blue: "var(--text-blue)"
        }
      },
      fontFamily: {
        nunito: ['Nunito', 'sans-serif']
      }
    }
  },
  plugins: []
};

============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "src/*": ["src/*"]
    },
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx", 

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
        "noEmitOnError": false,   // اخرج ملفات حتى مع الخطأ
    "skipLibCheck": true,     // تجاهل أخطاء مكتبات node_modules
    "allowJs": true           // لو عندك ملفات JS مختلطة
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}


============================================================
FILE: tsconfig.node.json
============================================================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}