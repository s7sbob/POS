// File: ActionsBar.tsx
import {
  Stack,
  TextField,
  InputAdornment,
  Button
} from '@mui/material';
import { IconSearch, IconPlus } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  query: string;
  onQueryChange: (v: string) => void;
  onAdd: () => void;
}

const ActionsBar: React.FC<Props> = ({ query, onQueryChange, onAdd }) => {
  const { t } = useTranslation();

  return (
    <Stack
      direction={{ xs: 'column', sm: 'row' }}
      spacing={2}
      alignItems="center"
      justifyContent="space-between"
      mb={3}
    >
      <TextField
        placeholder={t('purchaseOrders.search')}
        value={query}
        onChange={(e) => onQueryChange(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <IconSearch size={20} />
            </InputAdornment>
          ),
        }}
        sx={{ width: { xs: '100%', sm: 300 } }}
      />

      <Button
        variant="contained"
        startIcon={<IconPlus size={20} />}
        onClick={onAdd}
      >
        {t('purchaseOrders.add')}
      </Button>
    </Stack>
  );
};

export default ActionsBar;


// File: BarcodeScanner.tsx
import React, { useState, useRef, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  IconButton,
  Alert,
  CircularProgress
} from '@mui/material';
import { IconX, IconCamera, IconCameraOff, IconRefresh } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';

interface Props {
  open: boolean;
  onClose: () => void;
  onScan: (barcode: string) => void;
}

const BarcodeScanner: React.FC<Props> = ({ open, onClose, onScan }) => {
  const { t } = useTranslation();
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState('');
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // تنظيف الكاميرا عند الإغلاق
  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  // إيقاف الكاميرا عند إغلاق المودال
  useEffect(() => {
    if (!open) {
      stopCamera();
      setError('');
      setHasPermission(null);
      setIsLoading(false);
    }
  }, [open]);

  const checkCameraPermission = async () => {
    try {
      // التحقق من دعم المتصفح للكاميرا
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('المتصفح لا يدعم الوصول للكاميرا');
      }

      // التحقق من الصلاحيات
      try {
        const permission = await navigator.permissions.query({ name: 'camera' as PermissionName });
        
        if (permission.state === 'denied') {
          throw new Error('تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا من إعدادات المتصفح');
        }
      } catch (permError) {
        // بعض المتصفحات لا تدعم permissions API
        console.log('Permissions API not supported, continuing...');
      }

      setHasPermission(true);
      return true;
    } catch (err: any) {
      console.error('Permission check error:', err);
      setError(err.message || 'خطأ في التحقق من صلاحيات الكاميرا');
      setHasPermission(false);
      return false;
    }
  };

  const startCamera = async () => {
    try {
      setError('');
      setIsLoading(true);
      
      // التحقق من الصلاحيات أولاً
      const hasAccess = await checkCameraPermission();
      if (!hasAccess) {
        setIsLoading(false);
        return;
      }

      console.log('Starting camera...');

      // محاولة الحصول على الكاميرا الخلفية أولاً
      let constraints = {
        video: { 
          facingMode: 'environment', // الكاميرا الخلفية
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };

      let stream: MediaStream;
      
      try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);
      } catch (err) {
        console.log('Back camera failed, trying front camera:', err);
        // إذا فشلت الكاميرا الخلفية، جرب الأمامية
        constraints = {
          video: { 
            facingMode: 'user', // الكاميرا الأمامية
            width: { ideal: 1280 },
            height: { ideal: 720 }
          }
        };
        
        try {
          stream = await navigator.mediaDevices.getUserMedia(constraints);
        } catch (frontErr) {
          console.log('Front camera failed, trying any camera:', frontErr);
          // إذا فشلت الكاميرا الأمامية، جرب أي كاميرا متاحة
          stream = await navigator.mediaDevices.getUserMedia({ video: true });
        }
      }
      
      console.log('Camera stream obtained:', stream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        
        // انتظار تحميل الفيديو
        videoRef.current.onloadedmetadata = () => {
          console.log('Video metadata loaded');
          if (videoRef.current) {
            videoRef.current.play()
              .then(() => {
                console.log('Video playing successfully');
                setIsScanning(true);
                setIsLoading(false);
                startBarcodeDetection();
              })
              .catch((playError) => {
                console.error('Video play error:', playError);
                setError('خطأ في تشغيل الفيديو');
                setIsLoading(false);
              });
          }
        };

        // معالجة أخطاء الفيديو
        videoRef.current.onerror = (videoError) => {
          console.error('Video error:', videoError);
          setError('خطأ في عرض الفيديو');
          setIsLoading(false);
        };
      }
    } catch (err: any) {
      console.error('Camera error:', err);
      let errorMessage = 'خطأ في الوصول للكاميرا';
      
      if (err.name === 'NotAllowedError') {
        errorMessage = 'تم رفض الوصول للكاميرا. يرجى السماح بالوصول للكاميرا وإعادة المحاولة';
      } else if (err.name === 'NotFoundError') {
        errorMessage = 'لم يتم العثور على كاميرا متاحة';
      } else if (err.name === 'NotReadableError') {
        errorMessage = 'الكاميرا مستخدمة من تطبيق آخر';
      } else if (err.name === 'OverconstrainedError') {
        errorMessage = 'إعدادات الكاميرا غير مدعومة';
      } else if (err.name === 'AbortError') {
        errorMessage = 'تم إلغاء الوصول للكاميرا';
      } else if (err.name === 'SecurityError') {
        errorMessage = 'خطأ أمني في الوصول للكاميرا';
      }
      
      setError(errorMessage);
      setHasPermission(false);
      setIsLoading(false);
    }
  };

  const stopCamera = () => {
    console.log('Stopping camera...');
    
    // إيقاف البحث عن الباركود
    if (scanIntervalRef.current) {
      clearInterval(scanIntervalRef.current);
      scanIntervalRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        console.log('Stopping track:', track.kind);
        track.stop();
      });
      streamRef.current = null;
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    
    setIsScanning(false);
  };

  // محاكاة البحث عن الباركود (يمكن استبدالها بمكتبة حقيقية)
  const startBarcodeDetection = () => {
    // هذا مثال بسيط - في التطبيق الحقيقي يجب استخدام مكتبة مثل QuaggaJS أو ZXing
    scanIntervalRef.current = setInterval(() => {
      // محاكاة اكتشاف الباركود
      if (Math.random() > 0.98) { // احتمال 2% لاكتشاف باركود وهمي
        const mockBarcode = generateMockBarcode();
        handleBarcodeDetected(mockBarcode);
      }
    }, 100);
  };

  const generateMockBarcode = () => {
    // توليد باركود وهمي للاختبار
    const barcodes = [
      '1234567890123',
      '9876543210987',
      '5555666677778',
      '1111222233334',
      '9999888877776'
    ];
    return barcodes[Math.floor(Math.random() * barcodes.length)];
  };

  const handleBarcodeDetected = (barcode: string) => {
    console.log('Barcode detected:', barcode);
    onScan(barcode);
    handleClose();
  };

  const handleClose = () => {
    stopCamera();
    onClose();
  };

  const simulateScan = () => {
    const mockBarcode = '1234567890123';
    handleBarcodeDetected(mockBarcode);
  };

  const retryCamera = () => {
    setError('');
    setHasPermission(null);
    startCamera();
  };

  // قائمة الكاميرات المتاحة (للتشخيص)
  const listCameras = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const cameras = devices.filter(device => device.kind === 'videoinput');
      console.log('Available cameras:', cameras);
      return cameras;
    } catch (err) {
      console.error('Error listing cameras:', err);
      return [];
    }
  };

  // تشخيص المشكلة
  const diagnoseCamera = async () => {
    console.log('=== Camera Diagnosis ===');
    console.log('Navigator.mediaDevices:', !!navigator.mediaDevices);
    console.log('getUserMedia support:', !!navigator.mediaDevices?.getUserMedia);
    console.log('Is HTTPS:', window.location.protocol === 'https:');
    console.log('User agent:', navigator.userAgent);
    
    const cameras = await listCameras();
    console.log('Number of cameras found:', cameras.length);
    
    if (cameras.length === 0) {
      setError('لم يتم العثور على أي كاميرا متاحة');
    }
  };

  // تشغيل التشخيص عند فتح المودال
  useEffect(() => {
    if (open) {
      diagnoseCamera();
    }
  }, [open]);

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {t('barcode.scanTitle') || 'مسح الباركود'}
          <IconButton onClick={handleClose}>
            <IconX size={20} />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box textAlign="center">
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
              <Box mt={1}>
                <Typography variant="caption" display="block">
                  تأكد من:
                </Typography>
                <Typography variant="caption" component="ul" sx={{ textAlign: 'left', mt: 1 }}>
                  <li>السماح بالوصول للكاميرا في المتصفح</li>
                  <li>عدم استخدام الكاميرا من تطبيق آخر</li>
                  <li>وجود كاميرا متصلة بالجهاز</li>
                  <li>استخدام HTTPS (مطلوب للكاميرا)</li>
                </Typography>
              </Box>
            </Alert>
          )}

          {isLoading && (
            <Box py={2}>
              <CircularProgress />
              <Typography variant="body2" sx={{ mt: 1 }}>
                جاري تشغيل الكاميرا...
              </Typography>
            </Box>
          )}

          {!isScanning && !isLoading ? (
            <Box py={4}>
              <IconCamera size={64} color="gray" />
              <Typography variant="h6" sx={{ mt: 2, mb: 3 }}>
                {hasPermission === false 
                  ? 'يرجى السماح بالوصول للكاميرا' 
                  : (t('barcode.clickToStart') || 'انقر لبدء المسح')
                }
              </Typography>
              <Button
                variant="contained"
                onClick={startCamera}
                startIcon={<IconCamera size={20} />}
                disabled={hasPermission === false}
                sx={{ mb: 2 }}
              >
                {t('barcode.startCamera') || 'تشغيل الكاميرا'}
              </Button>
              
              {error && (
                <Box mt={2}>
                  <Button
                    variant="outlined"
                    onClick={retryCamera}
                    startIcon={<IconRefresh size={20} />}
                    size="small"
                    sx={{ mr: 1 }}
                  >
                    إعادة المحاولة
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={() => window.location.reload()}
                    size="small"
                  >
                    إعادة تحميل الصفحة
                  </Button>
                </Box>
              )}
            </Box>
          ) : isScanning ? (
            <Box>
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                style={{
                  width: '100%',
                  maxHeight: '300px',
                  border: '2px solid #ddd',
                  borderRadius: '8px',
                  backgroundColor: '#000'
                }}
              />
              <Typography variant="body2" sx={{ mt: 2, mb: 2 }}>
                {t('barcode.pointCamera') || 'وجه الكاميرا نحو الباركود'}
              </Typography>
              
              <Box display="flex" justifyContent="center" gap={1}>
                <Button
                  variant="outlined"
                  onClick={stopCamera}
                  startIcon={<IconCameraOff size={20} />}
                  size="small"
                >
                  إيقاف الكاميرا
                </Button>
                <Button
                  variant="outlined"
                  onClick={simulateScan}
                  size="small"
                >
                  محاكاة المسح (للاختبار)
                </Button>
              </Box>
            </Box>
          ) : null}

          {!isScanning && !isLoading && (
            <Button
              variant="outlined"
              onClick={simulateScan}
              sx={{ mt: 2 }}
            >
              {t('barcode.simulateScan') || 'محاكاة المسح'} (للاختبار)
            </Button>
          )}
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose}>
          {t('common.cancel') || 'إلغاء'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default BarcodeScanner;


// File: PageHeader.tsx
import { Box, Typography } from '@mui/material';
import { useTranslation } from 'react-i18next';

const PageHeader = () => {
  const { t } = useTranslation();

  return (
    <Box mb={3}>
      <Typography variant="h4" component="h1" gutterBottom>
        {t('purchaseOrders.title')}
      </Typography>
      <Typography variant="body1" color="text.secondary">
        {t('purchaseOrders.subtitle')}
      </Typography>
    </Box>
  );
};

export default PageHeader;


// File: ProductPriceSearchDialog.tsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  Typography,
  CircularProgress,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip
} from '@mui/material';
import { IconSearch, IconBarcode, IconX, IconArrowUp, IconArrowDown } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import BarcodeScanner from './BarcodeScanner';
import * as productsApi from 'src/utils/api/purchaseProductsApi';
import { ProductPrice } from 'src/utils/api/purchaseProductsApi';

interface Props {
  open: boolean;
  onClose: () => void;
  onSelect: (productPrice: ProductPrice) => void;
}

// Debounce hook to avoid querying on every keystroke
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
};

const ProductPriceSearchDialog: React.FC<Props> = ({ open, onClose, onSelect }) => {
  const { t } = useTranslation();
  const searchInputRef = useRef<HTMLInputElement>(null);
  const listRef = useRef<HTMLDivElement>(null);

  const [searchQuery, setSearchQuery] = useState('');
  const debouncedSearchQuery = useDebounce(searchQuery, 400);

  const [allPrices, setAllPrices] = useState<ProductPrice[]>([]);
  const [displayItems, setDisplayItems] = useState<ProductPrice[]>([]);
  const [loading, setLoading] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [isSearchMode, setIsSearchMode] = useState(false);

  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Focus on the search field when dialog opens
  useEffect(() => {
    if (open) {
      const timer = setTimeout(() => {
        searchInputRef.current?.focus();
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [open]);

  // Reset state when dialog closes
  useEffect(() => {
    if (!open) {
      setSearchQuery('');
      setAllPrices([]);
      setDisplayItems([]);
      setCurrentPage(1);
      setHasMore(true);
      setIsSearchMode(false);
      setSelectedIndex(0);
    }
  }, [open]);

  // Initial load of products
  useEffect(() => {
    if (open && !isSearchMode && allPrices.length === 0) {
      loadInitialProducts();
    }
  }, [open, isSearchMode, allPrices.length]);

  // Debounced search logic
  useEffect(() => {
    if (debouncedSearchQuery.trim()) {
      handleDebouncedSearch(debouncedSearchQuery);
    } else {
      setIsSearchMode(false);
      setDisplayItems(allPrices);
      setSelectedIndex(0);
    }
  }, [debouncedSearchQuery, allPrices]);

  const loadInitialProducts = async () => {
    try {
      setLoading(true);
      const result = await productsApi.searchProductPrices('', 1, 20);
      setAllPrices(result.data);
      setDisplayItems(result.data);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(1);
      setSelectedIndex(0);
    } catch (err) {
      console.error('Error loading initial products:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadMoreProducts = useCallback(async () => {
    if (loadingMore || !hasMore || isSearchMode) return;
    try {
      setLoadingMore(true);
      const result = await productsApi.searchProductPrices('', currentPage + 1, 20);
      setAllPrices(prev => [...prev, ...result.data]);
      setDisplayItems(prev => [...prev, ...result.data]);
      setHasMore(result.pageNumber < result.pageCount);
      setCurrentPage(result.pageNumber);
    } catch (err) {
      console.error('Error loading more products:', err);
    } finally {
      setLoadingMore(false);
    }
  }, [currentPage, hasMore, isSearchMode, loadingMore]);

  const handleDebouncedSearch = async (q: string) => {
    try {
      setLoading(true);
      setIsSearchMode(true);
      const result = await productsApi.searchProductPrices(q, 1, 50);
      setDisplayItems(result.data);
      setSelectedIndex(0);
    } catch (err) {
      console.error('Search error:', err);
      setDisplayItems([]);
    } finally {
      setLoading(false);
    }
  };

  // دالة محسنة للـ scroll - الحل الأساسي للمشكلة
  const scrollToItem = useCallback((index: number) => {
    if (!listRef.current) return;
    
    const listElement = listRef.current;
    const itemElement = listElement.children[0]?.children[index] as HTMLElement; // الوصول للعنصر الصحيح داخل الـ List
    
    if (itemElement) {
      // استخدام scrollIntoView مع خيارات محددة
      itemElement.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest', // هذا هو المهم - يمنع القفز للأعلى أو الأسفل
        inline: 'nearest'
      });
    }
  }, []);

  // Arrow key handling on the search input, without ever losing focus
  const handleSearchKeyDown = (e: React.KeyboardEvent) => {
    if (displayItems.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.min(prev + 1, displayItems.length - 1);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => {
          const nxt = Math.max(prev - 1, 0);
          // تأخير بسيط للتأكد من تحديث الـ state أولاً
          setTimeout(() => scrollToItem(nxt), 0);
          return nxt;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (displayItems[selectedIndex]) {
          handleSelect(displayItems[selectedIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setSelectedIndex(0);
  };

  // Ensure selectedIndex is reset if items change
  useEffect(() => {
    if (displayItems.length > 0 && selectedIndex >= displayItems.length) {
      setSelectedIndex(0);
    }
  }, [displayItems.length, selectedIndex]);

  // useEffect لمراقبة تغيير selectedIndex
  useEffect(() => {
    if (selectedIndex >= 0 && displayItems.length > 0) {
      scrollToItem(selectedIndex);
    }
  }, [selectedIndex, scrollToItem, displayItems.length]);

  const handleSelect = (item: ProductPrice) => {
    if (!item.productId) {
      console.error('ProductPrice missing productId:', item);
      return;
    }
    onSelect(item);
    onClose();
  };

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    if (scrollHeight - scrollTop - clientHeight < 100) {
      loadMoreProducts();
    }
  };

  const handleScanResult = (barcode: string) => {
    setSearchQuery(barcode);
    setScannerOpen(false);
  };

  return (
    <>
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            {t('products.selectPriceTitle')}
            <IconButton onClick={onClose}>
              <IconX size={20} />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ height: '70vh', display: 'flex', flexDirection: 'column' }}>
          {/* Search field */}
          <Box mb={1}>
            <TextField
              inputRef={searchInputRef}
              fullWidth
              placeholder={t('products.searchPricesPlaceholder')}
              value={searchQuery}
              onChange={handleInputChange}
              onKeyDown={handleSearchKeyDown}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <IconSearch size={20} />
                  </InputAdornment>
                ),
                endAdornment: (
                  <InputAdornment position="end">
                    <Button
                      size="small"
                      variant="outlined"
                      onClick={() => setScannerOpen(true)}
                      startIcon={<IconBarcode size={16} />}
                    >
                      {t('barcode.scan')}
                    </Button>
                  </InputAdornment>
                )
              }}
              autoFocus
            />
          </Box>

          {/* Results info */}
          <Box mb={1}>
            <Typography variant="body2" color="text.secondary">
              {t('products.searchResults')}: {displayItems.length}
              {displayItems.length > 0 && (
                <Typography component="span" sx={{ ml: 2, color: 'primary.main' }}>
                  ({selectedIndex + 1} / {displayItems.length} {t('products.selected')})
                </Typography>
              )}
              {loading && (
                <Typography component="span" sx={{ ml: 2, color: 'info.main' }}>
                  - {t('common.searching')}...
                </Typography>
              )}
            </Typography>
          </Box>

          {/* Results list */}
          <Box
            ref={listRef}
            sx={{
              flex: 1,
              overflow: 'auto',
              border: 1,
              borderColor: 'divider',
              borderRadius: 1,
              // إضافة scroll behavior محسن
              scrollBehavior: 'smooth'
            }}
            onScroll={handleScroll}
          >
            {loading && displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <CircularProgress />
                <Typography sx={{ mt: 2 }}>{t('common.loading')}</Typography>
              </Box>
            ) : displayItems.length === 0 ? (
              <Box textAlign="center" py={4}>
                <Typography color="text.secondary">
                  {searchQuery
                    ? t('products.noSearchResults')
                    : t('products.startTypingPrices')}
                </Typography>
              </Box>
            ) : (
              <>
                <List dense sx={{ p: 0 }}>
                  {displayItems.map((price, index) => (
                    <ListItem key={`${price.id}-${index}`} disablePadding>
                      <ListItemButton
                        onClick={() => handleSelect(price)}
                        selected={index === selectedIndex}
                        onMouseEnter={() => setSelectedIndex(index)} // تحديث الاختيار عند hover
                        sx={{
                          border: index === selectedIndex ? 2 : 1,
                          borderColor:
                            index === selectedIndex ? 'primary.main' : 'divider',
                          borderRadius: 1,
                          mb: 0.5,
                          mx: 1,
                          backgroundColor:
                            index === selectedIndex
                              ? 'action.selected'
                              : 'transparent',
                          '&:hover': {
                            backgroundColor: 'action.hover',
                            borderColor: 'primary.main'
                          },
                          py: 0.5,
                          // إضافة ارتفاع ثابت للعناصر لتحسين الـ scroll
                          minHeight: 80
                        }}
                      >
                        <ListItemText
                          primary={
                            <Box>
                              <Typography
                                variant="subtitle2"
                                color="primary"
                                sx={{ mb: 0.5, fontSize: '0.9rem' }}
                              >
                                {price.productName} – {price.unitName}
                              </Typography>
                              <Box display="flex" gap={2} flexWrap="wrap" alignItems="center">
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.barcode')}: {price.barcode || '-'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.unitFactor')}: {price.unitFactor}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: '0.75rem' }}
                                >
                                  {t('products.cost')}:{' '}
                                  {price.cost?.toFixed(2) || '0.00'}
                                </Typography>
                                <Typography
                                  variant="caption"
                                  color="success.main"
                                  sx={{ fontSize: '0.75rem', fontWeight: 'bold' }}
                                >
                                  {t('products.salePrice')}: {price.price.toFixed(2)}
                                </Typography>
                                <Chip
                                  label={
                                    price.isActive
                                      ? t('products.active')
                                      : t('products.inactive')
                                  }
                                  color={price.isActive ? 'success' : 'default'}
                                  size="small"
                                  sx={{ fontSize: '0.65rem', height: '18px' }}
                                />
                              </Box>
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>

                {/* Loading more indicator */}
                {loadingMore && (
                  <Box textAlign="center" py={1}>
                    <CircularProgress size={20} />
                    <Typography variant="caption" sx={{ mt: 1, display: 'block' }}>
                      {t('products.loadingMore')}
                    </Typography>
                  </Box>
                )}

                {/* All results loaded */}
                {!hasMore && !isSearchMode && displayItems.length > 0 && (
                  <Box textAlign="center" py={1}>
                    <Typography variant="caption" color="text.secondary">
                      {t('products.allResultsLoaded')}
                    </Typography>
                  </Box>
                )}
              </>
            )}
          </Box>

          {/* Navigation hints */}
          {displayItems.length > 0 && (
            <Box mt={1} sx={{ backgroundColor: 'background.default', p: 0.5, borderRadius: 1 }}>
              <Typography variant="caption" color="text.secondary">
                <IconArrowUp size={14} style={{ verticalAlign: 'middle' }} /> /{' '}
                <IconArrowDown size={14} style={{ verticalAlign: 'middle' }} />{' '}
                {t('products.navigateWithArrows')} | {t('products.selectWithEnter')} |{' '}
                Esc {t('common.close')}
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>{t('common.cancel')}</Button>
        </DialogActions>
      </Dialog>

      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleScanResult}
      />
    </>
  );
};

export default ProductPriceSearchDialog;


// File: PurchaseOrderForm.tsx
import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';
import {
  Container,
  Grid,
  TextField,
  Button,
  Stack,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Card,
  CardContent,
  useMediaQuery,
  useTheme,
  Breadcrumbs,
  Link,
  InputAdornment,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ClickAwayListener,
  Alert,
  Snackbar
} from '@mui/material';
import {
  IconDeviceFloppy,
  IconPlus,
  IconTrash,
  IconArrowLeft,
  IconHome,
  IconSearch,
  IconBarcode
} from '@tabler/icons-react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { PurchaseOrder } from 'src/utils/api/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/suppliersApi';
import { Warehouse } from 'src/utils/api/warehousesApi';
import ProductPriceSearchDialog from './ProductPriceSearchDialog';
import BarcodeScanner from './BarcodeScanner';
import SearchableSelect from './SearchableSelect';
import { ProductPrice } from 'src/utils/api/purchaseProductsApi';
import * as productsApi from 'src/utils/api/purchaseProductsApi';

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

type FormValues = {
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  supplierId: string;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: Array<{
    purchaseOrderDetailID?: string;
    productId: string;
    productPriceId: string;
    productName?: string;
    unitId: string;
    unitName?: string;
    unitFactor: number;
    quantity: number;
    price: number;
    discountPercent: number;
    discountValue: number;
    taxPercent: number;
    taxValue: number;
    subTotal: number;
    total: number;
  }>;
};

interface Props {
  mode: 'add' | 'edit';
  initialValues?: PurchaseOrder;
  suppliers: Supplier[];
  warehouses: Warehouse[];
  onSubmit: (data: any) => Promise<void>;
}

const PurchaseOrderForm: React.FC<Props> = ({
  mode, initialValues, suppliers, warehouses, onSubmit
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [productSearchOpen, setProductSearchOpen] = useState(false);
  const [lastAddedIndex, setLastAddedIndex] = useState<number | null>(null);

  // Quick-search states
  const [quickSearchQuery, setQuickSearchQuery] = useState('');
  const [quickSearchResults, setQuickSearchResults] = useState<ProductPrice[]>([]);
  const [quickSearchOpen, setQuickSearchOpen] = useState(false);
  const [, setQuickSearchLoading] = useState(false);
  const [quickSearchSelectedIndex, setQuickSearchSelectedIndex] = useState(0);
  const [scannerOpen, setScannerOpen] = useState(false);

  // Alert states
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState<'error' | 'warning' | 'info' | 'success'>('error');

  // Ref for quick search input
  const quickSearchInputRef = useRef<HTMLInputElement>(null);
  const quickSearchRef = useRef<HTMLDivElement>(null);
  const debouncedQuickSearch = useDebounce(quickSearchQuery, 300);

  // Default values
  const defaults: FormValues = {
    referenceDocNumber: `PO-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
    date1: new Date().toISOString().split('T')[0],
    date2: new Date().toISOString().split('T')[0],
    warehouseId: '',
    supplierId: '',
    discountPercent: 0,
    discountValue: 0,
    taxPercent: 14,
    taxValue: 0,
    subTotal: 0,
    total: 0,
    status: 1,
    details: []
  };

  const { control, handleSubmit, reset, watch, setValue } = useForm<FormValues>({
    defaultValues: defaults
  });

  const { fields, remove } = useFieldArray({
    control,
    name: 'details'
  });

  const watchedDetails = watch('details');
  const watchedDiscountPercent = watch('discountPercent');
  const watchedTaxPercent = watch('taxPercent');
  const watchedTotal = watch('total');
  const watchedStatus = watch('status');

  // دالة للعودة للـ Quick Search
const focusQuickSearch = useCallback(() => {
  setTimeout(() => {
    if (quickSearchInputRef.current) {
      const inputElement = quickSearchInputRef.current.querySelector('input') as HTMLInputElement;
      if (inputElement) {
        inputElement.focus();
        inputElement.select(); // هيحدد كل النص
      }
    }
  }, 200);
}, []);


   const handleFieldKeyDown = useCallback((e: React.KeyboardEvent, nextFieldName?: string) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (nextFieldName) {
        // البحث عن الحقل التالي
        setTimeout(() => {
          const nextInput = document.querySelector(`input[name="${nextFieldName}"]`) as HTMLInputElement;
          if (nextInput) {
            nextInput.focus();
            nextInput.select();
          }
        }, 50);
      } else {
        // العودة للـ Quick Search
        focusQuickSearch();
      }
    }
  }, [focusQuickSearch]);


  // دالة للتنقل بين الحقول

  // Upon initial render in "add" mode, focus quick-search
  useLayoutEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current) {
      quickSearchInputRef.current.focus();
    }
  }, [mode]);

  // Fallback if ref isn't attached yet
  useEffect(() => {
    if (mode === 'add' && quickSearchInputRef.current === null) {
      const timer = setTimeout(() => {
        if (quickSearchInputRef.current) {
          quickSearchInputRef.current.focus();
        }
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [mode]);

  // After adding a product, focus its quantity input
  useEffect(() => {
    if (lastAddedIndex !== null) {
      const timer = setTimeout(() => {
        const quantityInput = document.querySelector(
          `input[name="details.${lastAddedIndex}.quantity"]`
        ) as HTMLInputElement;
        if (quantityInput) {
          quantityInput.focus();
          quantityInput.select();
        }
        setLastAddedIndex(null);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [lastAddedIndex]);

  // Recalculate totals whenever details, discountPercent, or taxPercent change
  useEffect(() => {
    const calculateTotals = () => {
      let subTotal = 0;

      watchedDetails.forEach((detail, index) => {
        const lineSubTotal = detail.quantity * detail.price * detail.unitFactor;
        const lineDiscountValue = lineSubTotal * (detail.discountPercent / 100);
        const afterDiscount = lineSubTotal - lineDiscountValue;
        const lineTaxValue = afterDiscount * (detail.taxPercent / 100);
        const lineTotal = afterDiscount + lineTaxValue;

        setValue(`details.${index}.subTotal`, lineSubTotal);
        setValue(`details.${index}.discountValue`, lineDiscountValue);
        setValue(`details.${index}.taxValue`, lineTaxValue);
        setValue(`details.${index}.total`, lineTotal);

        subTotal += lineSubTotal;
      });

      const totalDiscountValue = subTotal * (watchedDiscountPercent / 100);
      const afterDiscount = subTotal - totalDiscountValue;
      const totalTaxValue = afterDiscount * (watchedTaxPercent / 100);
      const total = afterDiscount + totalTaxValue;

      setValue('subTotal', subTotal);
      setValue('discountValue', totalDiscountValue);
      setValue('taxValue', totalTaxValue);
      setValue('total', total);
    };

    calculateTotals();
  }, [watchedDetails, watchedDiscountPercent, watchedTaxPercent, setValue]);


  useEffect(() => {
  if (mode === 'add') {
    setTimeout(() => {
      focusQuickSearch();
    }, 500);
  }
}, [mode, focusQuickSearch]);


  // Populate form in "edit" mode, or reset in "add" mode
  useEffect(() => {
    if (mode === 'edit' && initialValues) {
      console.log('Initial values from API:', initialValues);
      console.log('Details from API:', initialValues.details);
      
      const convertedDetails = initialValues.details.map((d, index) => {
        console.log(`Converting detail ${index}:`, d);
        const converted = {
          purchaseOrderDetailID: d.id || '',
          productId: d.productID,
          productPriceId: d.productPriceID || '',
          productName: d.unitName || 'منتج غير محدد',
          unitId: d.unitId,
          unitName: d.unitName,
          unitFactor: d.unitFactor,
          quantity: d.quantity,
          price: d.price,
          discountPercent: d.discountPercent,
          discountValue: d.discountValue,
          taxPercent: d.taxPercent,
          taxValue: d.taxValue,
          subTotal: d.subTotal,
          total: d.total
        };
        console.log(`Converted detail ${index}:`, converted);
        return converted;
      });

      console.log('All converted details:', convertedDetails);

      reset({
        referenceDocNumber: initialValues.referenceDocNumber,
        date1: initialValues.date1.split('T')[0],
        date2: initialValues.date2.split('T')[0],
        warehouseId: initialValues.warehouseId,
        supplierId: initialValues.supplierId,
        discountPercent: initialValues.discountPercent,
        discountValue: initialValues.discountValue,
        taxPercent: initialValues.taxPercent,
        taxValue: initialValues.taxValue,
        subTotal: initialValues.subTotal,
        total: initialValues.total,
        status: initialValues.status,
        details: convertedDetails
      });
    } else if (mode === 'add') {
      reset(defaults);
    }
  }, [mode, initialValues, reset, t]);

  // Handle debounced quick-search
  useEffect(() => {
    if (debouncedQuickSearch.trim()) {
      handleQuickSearch(debouncedQuickSearch);
    } else {
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    }
  }, [debouncedQuickSearch]);

  const handleQuickSearch = async (query: string) => {
    try {
      setQuickSearchLoading(true);
      const result = await productsApi.searchProductPrices(query, 1, 10);
      setQuickSearchResults(result.data);
      setQuickSearchOpen(result.data.length > 0);
      setQuickSearchSelectedIndex(0);
    } catch (error) {
      console.error('Quick search error:', error);
      setQuickSearchResults([]);
      setQuickSearchOpen(false);
    } finally {
      setQuickSearchLoading(false);
    }
  };

  // Handle barcode scan result
  const handleBarcodeScanned = async (barcode: string) => {
    try {
      const result = await productsApi.searchProductPrices(barcode, 1, 1);
      if (result.data.length > 0) {
        const productPrice = result.data[0];
        addProductToForm(productPrice);
        setAlertMessage(`${t('products.productAdded')}: ${productPrice.productName}`);
        setAlertSeverity('success');
      } else {
        setAlertMessage(t('products.noProductFoundWithBarcode'));
        setAlertSeverity('warning');
      }
    } catch (error) {
      setAlertMessage(t('products.searchError'));
      setAlertSeverity('error');
    }
    setScannerOpen(false);
  };

  // Add a product from quick-search or barcode into the form's details
  const addProductToForm = (productPrice: ProductPrice) => {
    console.log('Adding product to form:', productPrice);
    
    const newItem = {
      productId: productPrice.productId,
      productPriceId: productPrice.id,
      productName: productPrice.productName,
      unitId: productPrice.unitId || '',
      unitName: productPrice.unitName,
      unitFactor: productPrice.unitFactor,
      quantity: 1,
      price: productPrice.price,
      discountPercent: 0,
      discountValue: 0,
      taxPercent: 14,
      taxValue: 0,
      subTotal: 0,
      total: 0
    };

    console.log('New item being added:', newItem);

    const currentDetails = watch('details') || [];
    setValue('details', [newItem, ...currentDetails]);
    setLastAddedIndex(0);
    setQuickSearchQuery('');
    setQuickSearchOpen(false);

    setTimeout(() => {
      if (quickSearchInputRef.current) {
        quickSearchInputRef.current.focus();
      }
    }, 100);
  };

  // Navigate quick-search results with arrows + Enter/Escape
  const handleQuickSearchKeyDown = (e: React.KeyboardEvent) => {
    if (quickSearchResults.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.min(prev + 1, quickSearchResults.length - 1);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setQuickSearchSelectedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          scrollToQuickSearchItem(newIndex);
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        if (quickSearchResults[quickSearchSelectedIndex]) {
          addProductToForm(quickSearchResults[quickSearchSelectedIndex]);
        }
        break;
      case 'Escape':
        setQuickSearchOpen(false);
        setQuickSearchQuery('');
        break;
    }
  };

  // Ensure the selected quick-search item is visible
  const scrollToQuickSearchItem = (index: number) => {
    const listElement = quickSearchRef.current;
    if (listElement) {
      const itemElement = listElement.children[index] as HTMLElement;
      if (itemElement) {
        const listRect = listElement.getBoundingClientRect();
        const itemRect = itemElement.getBoundingClientRect();
        const itemHeight = itemRect.height;
        const listHeight = listRect.height;
        const itemTop = itemElement.offsetTop;

        if (itemRect.bottom > listRect.bottom) {
          const newScrollTop = itemTop - listHeight + itemHeight + 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        } else if (itemRect.top < listRect.top) {
          const newScrollTop = itemTop - 10;
          listElement.scrollTo({ top: Math.max(0, newScrollTop), behavior: 'smooth' });
        }
      }
    }
  };

  const addDetailWithSearch = () => {
    setProductSearchOpen(true);
  };

  const handleProductPriceSelect = (productPrice: ProductPrice) => {
    addProductToForm(productPrice);
  };

  // Validate numeric fields
  const validateNumber = (value: any, fieldName: string) => {
    const numValue = parseFloat(value);
    if (isNaN(numValue) || numValue < 0) {
      setAlertMessage(`${t('validation.enterValidNumber')} ${fieldName}`);
      setAlertSeverity('error');
      return false;
    }
    return true;
  };

  // On submit, build payload (with status from form) and call onSubmit
  const submit = async (data: FormValues) => {
    if (isSubmitting) return;

    // التحقق من المورد والمخزن
    if (!data.supplierId) {
      setAlertMessage(t('validation.supplierRequired') || 'يجب اختيار المورد');
      setAlertSeverity('error');
      return;
    }

    if (!data.warehouseId) {
      setAlertMessage(t('validation.warehouseRequired') || 'يجب اختيار المخزن');
      setAlertSeverity('error');
      return;
    }

    if (data.details.length === 0) {
      setAlertMessage(t('validation.itemsRequired') || 'يجب إضافة منتج واحد على الأقل');
      setAlertSeverity('error');
      return;
    }

    // التحقق من صحة البيانات
    for (let i = 0; i < data.details.length; i++) {
      const detail = data.details[i];
      if (!validateNumber(detail.quantity, `${t('purchaseOrders.quantity')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.price, `${t('purchaseOrders.price')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.discountPercent, `${t('purchaseOrders.discount')} ${t('common.inLine')} ${i + 1}`)) return;
      if (!validateNumber(detail.taxPercent, `${t('purchaseOrders.tax')} ${t('common.inLine')} ${i + 1}`)) return;
    }
    if (!validateNumber(data.discountPercent, t('purchaseOrders.totalDiscount'))) return;
    if (!validateNumber(data.taxPercent, t('purchaseOrders.totalTax'))) return;

    setIsSubmitting(true);
    try {
      const submitData = {
        ...data,
        date1: `${data.date1}T00:00:00`,
        date2: `${data.date2}T00:00:00`,
        details: data.details.map((d, index) => {
          // التحقق من البيانات المطلوبة
          if (!d.productId) {
            console.error(`Detail ${index} missing productId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف المنتج`);
          }
          if (!d.productPriceId) {
            console.error(`Detail ${index} missing productPriceId:`, d);
            throw new Error(`Detail في السطر ${index + 1} مفقود معرف السعر`);
          }
          
          const detailData: any = {
            productID: d.productId,
            productPriceID: d.productPriceId,
            unitId: d.unitId,
            unitFactor: d.unitFactor,
            quantity: parseFloat(d.quantity.toString()),
            price: parseFloat(d.price.toString()),
            discountPercent: parseFloat(d.discountPercent.toString()),
            discountValue: parseFloat(d.discountValue.toString()),
            taxPercent: parseFloat(d.taxPercent.toString()),
            taxValue: parseFloat(d.taxValue.toString()),
            subTotal: parseFloat(d.subTotal.toString()),
            total: parseFloat(d.total.toString())
          };

          // إضافة ID للسطور الموجودة في التحديث
          if (mode === 'edit' && d.purchaseOrderDetailID && d.purchaseOrderDetailID.trim() !== '') {
            detailData.id = d.purchaseOrderDetailID;
            console.log(`Detail ${index} has existing ID:`, d.purchaseOrderDetailID);
          } else {
            console.log(`Detail ${index} is new - no ID`);
          }

          console.log(`Detail ${index} final data:`, detailData);
          return detailData;
        })
      };

      console.log('Submit data before sending:', JSON.stringify(submitData, null, 2));

      await onSubmit(submitData);

      if (data.status === 1 && mode === 'add') {
        reset(defaults);
        setTimeout(() => {
          if (quickSearchInputRef.current) {
            quickSearchInputRef.current.focus();
          }
        }, 200);
      } else {
        navigate('/purchases/purchase-orders');
      }
    } catch (error) {
      console.error('Submit error:', error);
      setAlertSeverity('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Mobile-only detail card
  const MobileDetailCard: React.FC<{ index: number; onRemove: () => void }> = ({ index, onRemove }) => (
    <Card key={index} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="subtitle2">#{index + 1}</Typography>
          {watchedStatus !== 3 && (
            <IconButton onClick={onRemove} size="small" color="error">
              <IconTrash size={16} />
            </IconButton>
          )}
        </Box>
        <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
          {watch(`details.${index}.productName`)} — {watch(`details.${index}.unitName`)}
        </Typography>

        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Controller
  name={`details.${index}.quantity`}
  control={control}
  render={({ field }) => (
    <TextField
      {...field}
      label={t('purchaseOrders.quantity')}
      type="number"
      size="small"
      name={`details.${index}.quantity`}
      onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.price`)}
      onFocus={(e) => e.target.select()}
      fullWidth
      disabled={watchedStatus === 3} // تأكد من وجود هذا السطر
      inputProps={{
        style: { textAlign: 'right' },
        step: "0.01",
        inputMode: 'decimal'
      }}
      sx={{
        '& input[type=number]': {
          '-moz-appearance': 'textfield',
        },
        '& input[type=number]::-webkit-outer-spin-button': {
          '-webkit-appearance': 'none',
          margin: 0,
        },
        '& input[type=number]::-webkit-inner-spin-button': {
          '-webkit-appearance': 'none',
          margin: 0,
        },
      }}
    />
  )}
/>
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.price`}
              control={control}
              render={({ field }) => (
                <TextField
  {...field}
  type="number"
  size="small"
  name={`details.${index}.price`}  // أضف هذا
  onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.discountPercent`)}  // أضف هذا
  onFocus={(e) => e.target.select()}  // أضف هذا
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.discountPercent`}
              control={control}
              render={({ field }) => (
                <TextField
  {...field}
  type="number"
  size="small"
  name={`details.${index}.discountPercent`}  // أضف هذا
  onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.taxPercent`)}  // أضف هذا
  onFocus={(e) => e.target.select()}  // أضف هذا
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>

          <Grid item xs={6}>
            <Controller
              name={`details.${index}.taxPercent`}
              control={control}
              render={({ field }) => (
                <TextField
  {...field}
  type="number"
  size="small"
  name={`details.${index}.taxPercent`}  // أضف هذا
  onKeyDown={(e) => handleFieldKeyDown(e)}  // بدون next field - هيرجع للـ Quick Search
  onFocus={(e) => e.target.select()}  // أضف هذا
                  fullWidth
                  disabled={watchedStatus === 3}
                  inputProps={{
                    style: { textAlign: 'right' },
                    step: "0.01",
                    inputMode: 'decimal'
                  }}
                  sx={{
                    '& input[type=number]': {
                      '-moz-appearance': 'textfield',
                    },
                    '& input[type=number]::-webkit-outer-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                    '& input[type=number]::-webkit-inner-spin-button': {
                      '-webkit-appearance': 'none',
                      margin: 0,
                    },
                  }}
                />
              )}
            />
          </Grid>
        </Grid>

        <Typography variant="body2" sx={{ mt: 1, textAlign: 'right', fontWeight: 'bold' }}>
          {t('purchaseOrders.total')}: {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
        </Typography>
      </CardContent>
    </Card>
  );

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* Breadcrumbs + Header + Total */}
      <Box sx={{ mb: 3 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            color="inherit"
            href="#"
            onClick={(e) => {
              e.preventDefault();
              navigate('/purchases/purchase-orders');
            }}
            sx={{ display: 'flex', alignItems: 'center' }}
          >
            <IconHome size={16} style={{ marginRight: 4 }} />
            {t('purchaseOrders.list')}
          </Link>
          <Typography color="text.primary">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>
        </Breadcrumbs>

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" component="h1">
            {mode === 'add' ? t('purchaseOrders.add') : t('purchaseOrders.edit')}
          </Typography>

          <Typography
            variant="h4"
            component="div"
            sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              fontSize: '2rem'
            }}
          >
            {t('purchaseOrders.total')}: {watchedTotal?.toFixed(2) || '0.00'}
          </Typography>
        </Box>

        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            onClick={() => navigate('/purchases/purchase-orders')}
            disabled={isSubmitting}
          >
            {t('common.back')}
          </Button>

          {/* "Save (Pending)" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              onClick={handleSubmit((data) => {
                data.status = 1;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.savePending')}
            </Button>
          )}

          {/* "Submit" */}
          {watchedStatus !== 3 && (
            <Button
              variant="contained"
              color="secondary"
              startIcon={<IconDeviceFloppy />}
              onClick={handleSubmit((data) => {
                data.status = 3;
                submit(data);
              })}
              disabled={isSubmitting}
            >
              {t('purchaseOrders.submit')}
            </Button>
          )}
        </Stack>
      </Box>

      {/* Row 1: Doc#, Date, Supplier, Warehouse */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={3}>
          <Controller
            name="referenceDocNumber"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.docNumber')}
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="date1"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={t('purchaseOrders.date')}
                type="date"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                InputLabelProps={{ shrink: true }}
                onFocus={(e) => e.target.select()}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="supplierId"
            control={control}
            rules={{ required: t('validation.supplierRequired') || 'يجب اختيار المورد' }}
            render={({ field, fieldState }) => (
<SearchableSelect
  label={t('purchaseOrders.supplier')}
  value={field.value}
  onChange={field.onChange}
  options={suppliers.map(s => ({ id: s.id, name: s.name }))}
  placeholder={t('purchaseOrders.selectSupplier')}
  error={!!fieldState.error}
  size="small"
  autoFocusSearch={true}
  disabled={watchedStatus === 3}
  onSelectionComplete={focusQuickSearch}  // أضف هذا السطر
/>
            )}
          />
        </Grid>

        <Grid item xs={12} md={3}>
          <Controller
            name="warehouseId"
            control={control}
            rules={{ required: t('validation.warehouseRequired') || 'يجب اختيار المخزن' }}
            render={({ field, fieldState }) => (
<SearchableSelect
  label={t('purchaseOrders.warehouse')}
  value={field.value}
  onChange={field.onChange}
  options={warehouses.map(w => ({ id: w.id, name: w.name }))}
  placeholder={t('purchaseOrders.selectWarehouse')}
  error={!!fieldState.error}
  size="small"
  autoFocusSearch={true}
  disabled={watchedStatus === 3}
  onSelectionComplete={focusQuickSearch}  // أضف هذا السطر
/>
            )}
          />
        </Grid>
      </Grid>

      {/* Row 2: Total Discount & Total Tax */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} md={6}>
          <Controller
            name="discountPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalDiscount')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
                onBlur={focusQuickSearch}
              />
            )}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <Controller
            name="taxPercent"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label={`${t('purchaseOrders.totalTax')} %`}
                type="number"
                fullWidth
                size="small"
                disabled={watchedStatus === 3}
                inputProps={{
                  style: { textAlign: 'right' },
                  step: "0.01",
                  inputMode: 'decimal'
                }}
                sx={{
                  '& input[type=number]': {
                    '-moz-appearance': 'textfield',
                  },
                  '& input[type=number]::-webkit-outer-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                  '& input[type=number]::-webkit-inner-spin-button': {
                    '-webkit-appearance': 'none',
                    margin: 0,
                  },
                }}
                onFocus={(e) => e.target.select()}
                onBlur={focusQuickSearch}
              />
            )}
          />
        </Grid>
      </Grid>

      {/* Hidden "status" field */}
      <Controller
        name="status"
        control={control}
        render={({ field }) => (
          <input type="hidden" {...field} />
        )}
      />

      {/* Quick summary row */}
      <Paper sx={{ p: 1, mb: 2, backgroundColor: 'grey.50' }}>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.subTotal')}: {watch('subTotal')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.discountValue')}: {watch('discountValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary">
              {t('purchaseOrders.taxValue')}: {watch('taxValue')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
          <Grid item xs={3}>
            <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 'bold' }}>
              {t('purchaseOrders.total')}: {watch('total')?.toFixed(2) || '0.00'}
            </Typography>
          </Grid>
        </Grid>
      </Paper>

      {/* Items section */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{
          display: 'flex',
          gap: 2,
          mb: 2,
          p: 2,
          backgroundColor: 'grey.50',
          borderRadius: 1,
          boxShadow: 1,
          alignItems: 'center'
        }}>
          <Typography variant="h6" sx={{ minWidth: 'fit-content' }}>
            {t('purchaseOrders.items')}
          </Typography>

          <Box sx={{ position: 'relative', flex: 1 }}>
            <ClickAwayListener onClickAway={() => setQuickSearchOpen(false)}>
              <Box>
                <TextField
  ref={quickSearchInputRef}  // أضف هذا السطر
  autoFocus  // أضف هذا السطر
  placeholder={t('products.quickSearch')}
  value={quickSearchQuery}
  onChange={(e) => setQuickSearchQuery(e.target.value)}
  onKeyDown={handleQuickSearchKeyDown}
  fullWidth
  size="small"
  disabled={watchedStatus === 3}
  InputProps={{
    startAdornment: (
      <InputAdornment position="start">
        <IconSearch size={20} />
      </InputAdornment>
    ),
  }}
/>

                {/* Quick Search Results Dropdown */}
                {quickSearchOpen && quickSearchResults.length > 0 && (
                  <Paper
                    ref={quickSearchRef}
                    sx={{
                      position: 'absolute',
                      top: '100%',
                      left: 0,
                      right: 0,
                      zIndex: 1000,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    <List dense>
                      {quickSearchResults.map((price, index) => (
                        <ListItem key={price.id} disablePadding>
                          <ListItemButton
                            onClick={() => addProductToForm(price)}
                            selected={index === quickSearchSelectedIndex}
                            disabled={watchedStatus === 3}
                            sx={{
                              py: 0.25,
                              backgroundColor:
                                index === quickSearchSelectedIndex ? 'action.selected' : 'transparent'
                            }}
                          >
                            <ListItemText
                              primary={`${price.productName} — ${price.unitName}`}
                              secondary={`${t('products.price')}: ${price.price.toFixed(2)}`}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </Paper>
                )}
              </Box>
            </ClickAwayListener>
          </Box>

          <Button
            variant="outlined"
            size="small"
            onClick={() => setScannerOpen(true)}
            startIcon={<IconBarcode />}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('barcode.scan')}
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<IconPlus />}
            onClick={addDetailWithSearch}
            sx={{ fontSize: '0.75rem' }}
            disabled={watchedStatus === 3}
          >
            {t('purchaseOrders.addItemWithSearch')}
          </Button>
        </Box>

        <Box sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          {isMobile ? (
            <Box>
              {fields.length === 0 ? (
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  {t('purchaseOrders.noItems')}
                </Typography>
              ) : (
                fields.map((field, index) => (
                  <MobileDetailCard
                    key={field.id}
                    index={index}
                    onRemove={() => remove(index)}
                  />
                ))
              )}
            </Box>
          ) : (
            <TableContainer>
              <Table size="small">
<TableHead>
  <TableRow>
    <TableCell>{t('purchaseOrders.product')}</TableCell>
    <TableCell>{t('purchaseOrders.unit')}</TableCell>
    <TableCell align="right">{t('purchaseOrders.quantity')}</TableCell>
    <TableCell align="right">{t('purchaseOrders.price')}</TableCell>
    <TableCell align="right">{`${t('purchaseOrders.discount')} %`}</TableCell>
    <TableCell align="right">{`${t('purchaseOrders.tax')} %`}</TableCell>
    <TableCell align="right">{t('purchaseOrders.total')}</TableCell>
    <TableCell />
  </TableRow>
</TableHead>
                <TableBody>
                  {fields.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          {t('purchaseOrders.noItems')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    fields.map((field, index) => (
<TableRow key={field.id}>
  <TableCell>{watch(`details.${index}.productName`)}</TableCell>
  <TableCell>{watch(`details.${index}.unitName`)}</TableCell>
  
{/* الكمية */}
<TableCell align="right">
  <Controller
    name={`details.${index}.quantity`}
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        type="number"
        size="small"
        name={`details.${index}.quantity`}
        onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.price`)}
        onFocus={(e) => e.target.select()}
        disabled={watchedStatus === 3} // أضف هذا السطر
        sx={{
          width: 100,
          '& input[type=number]': {
            '-moz-appearance': 'textfield',
            textAlign: 'right',
          },
          '& input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
          '& input[type=number]::-webkit-inner-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
        }}
        inputProps={{
          step: "0.01",
          inputMode: 'decimal'
        }}
      />
    )}
  />
</TableCell>

{/* السعر */}
<TableCell align="right">
  <Controller
    name={`details.${index}.price`}
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        type="number"
        size="small"
        name={`details.${index}.price`}
        onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.discountPercent`)}
        onFocus={(e) => e.target.select()}
        disabled={watchedStatus === 3} // أضف هذا السطر
        sx={{
          width: 120,
          '& input[type=number]': {
            '-moz-appearance': 'textfield',
            textAlign: 'right',
          },
          '& input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
          '& input[type=number]::-webkit-inner-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
        }}
        inputProps={{
          step: "0.01",
          inputMode: 'decimal'
        }}
      />
    )}
  />
</TableCell>

{/* الخصم */}
<TableCell align="right">
  <Controller
    name={`details.${index}.discountPercent`}
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        type="number"
        size="small"
        name={`details.${index}.discountPercent`}
        onKeyDown={(e) => handleFieldKeyDown(e, `details.${index}.taxPercent`)}
        onFocus={(e) => e.target.select()}
        disabled={watchedStatus === 3} // أضف هذا السطر
        sx={{
          width: 100,
          '& input[type=number]': {
            '-moz-appearance': 'textfield',
            textAlign: 'right',
          },
          '& input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
          '& input[type=number]::-webkit-inner-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
        }}
        inputProps={{
          step: "0.01",
          inputMode: 'decimal'
        }}
      />
    )}
  />
</TableCell>

{/* الضريبة */}
<TableCell align="right">
  <Controller
    name={`details.${index}.taxPercent`}
    control={control}
    render={({ field }) => (
      <TextField
        {...field}
        type="number"
        size="small"
        name={`details.${index}.taxPercent`}
        onKeyDown={(e) => handleFieldKeyDown(e)}
        onFocus={(e) => e.target.select()}
        disabled={watchedStatus === 3} // أضف هذا السطر
        sx={{
          width: 100,
          '& input[type=number]': {
            '-moz-appearance': 'textfield',
            textAlign: 'right',
          },
          '& input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
          '& input[type=number]::-webkit-inner-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
        }}
        inputProps={{
          step: "0.01",
          inputMode: 'decimal'
        }}
      />
    )}
  />
</TableCell>

  {/* الإجمالي */}
  <TableCell align="right">
    <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
      {watch(`details.${index}.total`)?.toFixed(2) || '0.00'}
    </Typography>
  </TableCell>

  <TableCell>
    {watchedStatus !== 3 && (
      <IconButton
        onClick={() => remove(index)}
        size="small"
        color="error"
      >
        <IconTrash size={16} />
      </IconButton>
    )}
  </TableCell>
</TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* Product Price Search Dialog */}
      <ProductPriceSearchDialog
        open={productSearchOpen}
        onClose={() => setProductSearchOpen(false)}
        onSelect={handleProductPriceSelect}
      />

      {/* Barcode Scanner */}
      <BarcodeScanner
        open={scannerOpen}
        onClose={() => setScannerOpen(false)}
        onScan={handleBarcodeScanned}
      />

      {/* Alert Snackbar */}
      <Snackbar
        open={!!alertMessage}
        autoHideDuration={6000}
        onClose={() => setAlertMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setAlertMessage('')}
          severity={alertSeverity}
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseOrderForm;


// File: PurchaseOrderRow.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  IconButton,
  Box,
  Chip
} from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { PurchaseOrder } from 'src/utils/api/purchaseOrdersApi';
import { useTranslation } from 'react-i18next';

interface Props {
  purchaseOrder: PurchaseOrder;
  onEdit: () => void;
}

const PurchaseOrderRow: React.FC<Props> = ({ purchaseOrder, onEdit }) => {
  const { t } = useTranslation();

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');
      case 3:
        return t('purchaseOrders.submitted');
      default:
        return '-';
    }
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Stack spacing={1} flex={1}>
            <Typography variant="h6" component="div">
              {purchaseOrder.referenceDocNumber}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('purchaseOrders.code')}: {purchaseOrder.code}
            </Typography>
            <Box>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.supplier')}: {purchaseOrder.supplier?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.warehouse')}: {purchaseOrder.warehouse?.name || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.date')}: {new Date(purchaseOrder.date1).toLocaleDateString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.total')}: {purchaseOrder.total.toFixed(2)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('purchaseOrders.itemsCount')}: {purchaseOrder.details?.length || 0}
              </Typography>
            </Box>
            <Chip
              label={renderStatus(purchaseOrder.status)}
              color={purchaseOrder.status === 1 ? 'warning' : purchaseOrder.status === 3 ? 'primary' : 'default'}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            />
          </Stack>

          {/*
            إذا كان status === 3 → iconEye (view)، وإلا iconEdit.
          */}
          <IconButton onClick={onEdit}>
            {purchaseOrder.status === 3 ? <IconEye size={18} /> : <IconEdit size={18} />}
          </IconButton>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default PurchaseOrderRow;


// File: PurchaseOrderTable.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { IconButton, Stack, Chip } from '@mui/material';
import { IconEdit, IconEye } from '@tabler/icons-react';
import { useTranslation } from 'react-i18next';
import { PurchaseOrder } from 'src/utils/api/purchaseOrdersApi';

interface Props {
  rows: PurchaseOrder[];
  onEdit: (po: PurchaseOrder) => void;
}

const PurchaseOrderTable: React.FC<Props> = ({ rows, onEdit }) => {
  const { t } = useTranslation();

  const handleEdit = (row: PurchaseOrder) => {
    console.log('Edit button clicked for row:', row); // ✅ للتأكد من البيانات

    // ✅ تأكد من وجود id
    if (!row.id) {
      console.error('Purchase order missing ID:', row);
      alert('خطأ: معرف أمر الشراء غير موجود');
      return;
    }

    onEdit(row);
  };

  const renderStatus = (status: number | undefined) => {
    switch (status) {
      case 1:
        return t('purchaseOrders.pending');   // “Pending”
      case 3:
        return t('purchaseOrders.submitted'); // “Submitted”
      default:
        return '-';
    }
  };

  const cols: GridColDef[] = [
    {
      field: 'referenceDocNumber',
      headerName: t('purchaseOrders.docNumber'),
      flex: 1,
      minWidth: 150
    },
    {
      field: 'code',
      headerName: t('purchaseOrders.code'),
      width: 100
    },
    {
      field: 'supplier',
      headerName: t('purchaseOrders.supplier'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.supplier?.name || 'N/A'
    },
    {
      field: 'warehouse',
      headerName: t('purchaseOrders.warehouse'),
      flex: 1,
      minWidth: 150,
      renderCell: ({ row }) => row.warehouse?.name || 'N/A'
    },
    {
      field: 'date1',
      headerName: t('purchaseOrders.date'),
      flex: 0.8,
      renderCell: ({ value }) => {
        if (!value) return '-';
        try {
          return new Date(value).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          });
        } catch {
          return '-';
        }
      }
    },
    {
      field: 'total',
      headerName: t('purchaseOrders.total'),
      width: 120,
      renderCell: ({ value }) => `${Number(value).toFixed(2)}`
    },
    {
      field: 'details',
      headerName: t('purchaseOrders.itemsCount'),
      width: 120,
      renderCell: ({ value }) => `${value?.length || 0} ${t('purchaseOrders.items')}`
    },
    {
      // ← Changed from isActive → status
      field: 'status',
      headerName: t('purchaseOrders.status'),
      width: 110,
      renderCell: ({ value }) => (
        <Chip
          label={renderStatus(value)}
          color={value === 1 ? 'warning' : value === 3 ? 'primary' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'actions',
      headerName: '',
      width: 110,
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Stack direction="row" spacing={1}>
          {/*
            If status === 3 (Submitted), show “view” icon; otherwise show edit.
          */}
          {row.status === 3 ? (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEye size={18} />
            </IconButton>
          ) : (
            <IconButton size="small" onClick={() => handleEdit(row)}>
              <IconEdit size={18} />
            </IconButton>
          )}
        </Stack>
      )
    }
  ];

  return (
    <DataGrid
      rows={rows}
      columns={cols}
      getRowId={(row) => {
        // ✅ إصلاح: تأكد من وجود id وإلا اطبع خطأ
        if (!row.id) {
          console.error('Row missing ID:', row);
          return `temp-${Math.random()}`; // استخدم prefix للتمييز
        }
        return row.id;
      }}
      autoHeight
      disableRowSelectionOnClick
      sx={{ mb: 2 }}
    />
  );
};

export default PurchaseOrderTable;


// File: SearchableSelect.tsx
import React, { useState, useEffect, useRef } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment,
  Typography,
  ListSubheader,
  MenuProps
} from '@mui/material';
import { IconSearch } from '@tabler/icons-react';
import { t } from 'i18next';

interface Option {
  id: string;
  name: string;
  [key: string]: any;
}

interface Props {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: Option[];
  placeholder?: string;
  error?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  size?: 'small' | 'medium';
  autoFocusSearch?: boolean;
  onSelectionComplete?: () => void; // موجود بالفعل
}

const SearchableSelect: React.FC<Props> = ({
  label,
  value,
  onChange,
  options,
  placeholder,
  error,
  disabled,
  fullWidth = true,
  size = 'medium',
  autoFocusSearch = false,
  onSelectionComplete
}) => {
  const [searchText, setSearchText] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const [open, setOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const searchInputRef = useRef<HTMLInputElement>(null);

  // Recompute filteredOptions when options or searchText change:
  useEffect(() => {
    const filtered = options.filter(option =>
      option.name.toLowerCase().includes(searchText.toLowerCase())
    );
    setFilteredOptions(filtered);
    setSelectedIndex(-1);
  }, [searchText, options]);

  // Whenever `open` becomes true and autoFocusSearch is set, focus the search input:
useEffect(() => {
  if (open && autoFocusSearch) {
    // تأكد من الـ focus فوراً
    const timer = setTimeout(() => {
      if (searchInputRef.current) {
        const inputElement = searchInputRef.current.querySelector('input') as HTMLInputElement;
        if (inputElement) {
          inputElement.focus();
          inputElement.select(); // تحديد النص الموجود
        }
      }
    }, 50); // وقت أقل للاستجابة الأسرع

    return () => clearTimeout(timer);
  }
}, [open, autoFocusSearch]);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSearchText('');
    setSelectedIndex(-1);
  };

  const handleChange = (event: any) => {
    onChange(event.target.value);
    handleClose();
    
    // التعديل الوحيد هنا - إضافة callback
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  };

  // Arrow-key navigation inside the search box:
const handleSearchKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'ArrowUp') {
    e.preventDefault();
    e.stopPropagation(); // منع انتقال الحدث
    setSelectedIndex(prev => Math.max(prev - 1, -1));
    // الحفاظ على الـ focus
    setTimeout(() => {
      if (searchInputRef.current) {
        searchInputRef.current.focus();
      }
    }, 0);
  } else if (e.key === 'Enter' && selectedIndex >= 0) {
    e.preventDefault();
    e.stopPropagation();
    onChange(filteredOptions[selectedIndex].id);
    handleClose();
    
    // إضافة callback هنا كمان
    if (onSelectionComplete) {
      setTimeout(() => {
        onSelectionComplete();
      }, 200);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    e.stopPropagation();
    handleClose();
  }
};

  // If the closed Select is focused and the user starts typing a letter,
  // open the dropdown with that letter in the search field:
  const handleSelectKeyDown = (e: React.KeyboardEvent) => {
    if (
      e.key.length === 1 &&
      !e.ctrlKey &&
      !e.altKey &&
      !e.metaKey
    ) {
      e.preventDefault();
      setOpen(true);
      setSearchText(e.key);
      // Focus the search input after the dropdown appears:
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
          searchInputRef.current.setSelectionRange(1, 1);
        }
      }, 100);
    }
  };

  const customMenuProps: Partial<MenuProps> = {
    PaperProps: {
      style: {
        maxHeight: 300,
      },
    },
    onClose: (_event, reason) => {
      if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
        handleClose();
      }
    },
  };

  return (
    <FormControl fullWidth={fullWidth} size={size} error={error} disabled={disabled}>
      <InputLabel>{label}</InputLabel>
      <Select
        value={value}
        label={label}
        open={open}
        onOpen={handleOpen}
        onClose={handleClose}
        onChange={handleChange}
        onKeyDown={handleSelectKeyDown}
        MenuProps={customMenuProps}
      >
        <ListSubheader>
          <TextField
            ref={searchInputRef}
            size="small"
            placeholder={t('common.search') || 'البحث...'}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconSearch size={20} />
                </InputAdornment>
              ),
            }}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            onKeyDown={handleSearchKeyDown}
            onClick={(e) => e.stopPropagation()}
            onMouseDown={(e) => e.stopPropagation()}
            autoComplete="off"
          />
        </ListSubheader>

        {placeholder && !value && (
          <MenuItem value="" disabled>
            <Typography color="text.secondary">{placeholder}</Typography>
          </MenuItem>
        )}

        {filteredOptions.length === 0 ? (
          <MenuItem disabled>
            <Typography color="text.secondary">
              {t('common.noResults') || 'لا توجد نتائج'}
            </Typography>
          </MenuItem>
        ) : (
          filteredOptions.map((option, index) => (
            <MenuItem
              key={option.id}
              value={option.id}
              selected={index === selectedIndex}
              sx={{
                backgroundColor:
                  index === selectedIndex ? 'action.selected' : 'transparent',
              }}
            >
              {option.name}
            </MenuItem>
          ))
        )}
      </Select>
    </FormControl>
  );
};

export default SearchableSelect;


// File: AddPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import * as apiSrv from 'src/utils/api/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/suppliersApi';
import * as warehousesApi from 'src/utils/api/warehousesApi';
import { Supplier } from 'src/utils/api/suppliersApi';
import { Warehouse } from 'src/utils/api/warehousesApi';

const AddPurchaseOrderPage: React.FC = () => {
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [suppliersData, warehousesData] = await Promise.all([
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || 'Failed to load data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Adding purchase order (data):', data);
      await apiSrv.add(data);
      // After either “Save (Pending)” or “Submit,” 
      // we always assume the form resets on status=1 or navigates away on status=3.
    } catch (e: any) {
      const msg = e?.message || 'Add failed';
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box textAlign="center" py={4}>
        <CircularProgress />
        <Typography sx={{ mt: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  return (
    <>
      <PurchaseOrderForm
        mode="add"
        suppliers={suppliers}
        warehouses={warehouses}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>
    </>
  );
};

export default AddPurchaseOrderPage;


// File: EditPurchaseOrderPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Snackbar, Alert, Box, Typography, CircularProgress } from '@mui/material';
import PurchaseOrderForm from './components/PurchaseOrderForm';
import * as apiSrv from 'src/utils/api/purchaseOrdersApi';
import * as suppliersApi from 'src/utils/api/suppliersApi';
import * as warehousesApi from 'src/utils/api/warehousesApi';
import { PurchaseOrder } from 'src/utils/api/purchaseOrdersApi';
import { Supplier } from 'src/utils/api/suppliersApi';
import { Warehouse } from 'src/utils/api/warehousesApi';

const EditPurchaseOrderPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [purchaseOrder, setPurchaseOrder] = useState<PurchaseOrder | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!id) {
          throw new Error('Purchase Order ID is required');
        }
        const [purchaseOrderData, suppliersData, warehousesData] = await Promise.all([
          apiSrv.getById(id),
          suppliersApi.getAll(),
          warehousesApi.getAll()
        ]);
        setPurchaseOrder(purchaseOrderData);
        setSuppliers(suppliersData);
        setWarehouses(warehousesData);
      } catch (e: any) {
        setError(e?.message || 'Failed to load data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleSubmit = async (data: any) => {
    try {
      console.log('Updating purchase order:', data);
      if (!purchaseOrder) {
        throw new Error('No purchase order loaded');
      }
      // Ensure we pass along the ID
      await apiSrv.update({ ...data, id: purchaseOrder.id! });
    } catch (e: any) {
      console.error('Update error:', e);
      const msg = e?.message || 'Update failed';
      setError(msg);
      throw e;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>جاري التحميل...</Typography>
      </Box>
    );
  }

  if (error && !purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  if (!purchaseOrder) {
    return (
      <Box textAlign="center" py={4}>
        <Typography color="error">أمر الشراء غير موجود</Typography>
      </Box>
    );
  }

  return (
    <>
      <PurchaseOrderForm
        mode="edit"
        initialValues={purchaseOrder}
        suppliers={suppliers}
        warehouses={warehouses}
        onSubmit={handleSubmit}
      />

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>
    </>
  );
};

export default EditPurchaseOrderPage;


// File: PurchaseOrdersPage.tsx
import React from 'react';
import {
  Container, useMediaQuery,
  Snackbar, Alert, Box, Typography
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import PageHeader from './components/PageHeader';
import ActionsBar from './components/ActionsBar';
import PurchaseOrderTable from './components/PurchaseOrderTable';
import PurchaseOrderRow from './components/PurchaseOrderRow';
import * as apiSrv from 'src/utils/api/purchaseOrdersApi';
import { PurchaseOrder } from 'src/utils/api/purchaseOrdersApi';
import { t } from 'i18next';

const PurchaseOrdersPage: React.FC = () => {
  const navigate = useNavigate();
  const [purchaseOrders, setPurchaseOrders] = React.useState<PurchaseOrder[]>([]);
  const [query, setQuery] = React.useState('');
  const [error, setErr] = React.useState('');
  const [loading, setLoad] = React.useState(true);

  const isDownSm = useMediaQuery((th: any) => th.breakpoints.down('sm'));

  /* ───── fetch all ───── */
  const fetchPurchaseOrders = async () => {
    try {
      const purchaseOrdersData = await apiSrv.getAll();
      setPurchaseOrders(purchaseOrdersData);
    } catch (e: any) {
      setErr(e?.message || 'Failed to load purchase orders');
    }
  };

  React.useEffect(() => {
    (async () => {
      try { 
        await fetchPurchaseOrders();
      }
      catch (e: any) { 
        setErr(e?.message || 'Load failed'); 
      }
      finally { 
        setLoad(false); 
      }
    })();
  }, []);

  /* ───── filter ───── */
  const filtered = React.useMemo(
    () => query ? purchaseOrders.filter(po => 
      po.referenceDocNumber.toLowerCase().includes(query.toLowerCase()) ||
      po.supplier?.name.toLowerCase().includes(query.toLowerCase()) ||
      po.warehouse?.name.toLowerCase().includes(query.toLowerCase())
    ) : purchaseOrders,
    [purchaseOrders, query]
  );

  /* ───── Navigation handlers ───── */
  const handleAdd = () => {
    navigate('/purchases/purchase-orders/add');
  };

  const handleEdit = (purchaseOrder: PurchaseOrder) => {
    navigate(`/purchases/purchase-orders/edit/${purchaseOrder.id}`);
  };

  /* ───── UI ───── */
  return (
    <Container maxWidth="xl">
      <PageHeader />
      <ActionsBar
        query={query}
        onQueryChange={setQuery}
        onAdd={handleAdd}
      />

      <Box mb={4}>
        <Typography variant="h5" gutterBottom>
          {t('purchaseOrders.title')} {` (${filtered.length})`}
        </Typography>
        
        {loading ? (
          <Box textAlign="center" py={4}>
            <Typography>جاري التحميل...</Typography>
          </Box>
        ) : filtered.length === 0 ? (
          <Box textAlign="center" py={4}>
            <Typography color="text.secondary">
              {query ? 'لا توجد نتائج للبحث' : 'لا توجد أوامر شراء'}
            </Typography>
          </Box>
        ) : (
          <>
            {isDownSm
              ? filtered.map(po => (
                  <PurchaseOrderRow
                    key={po.id}
                    purchaseOrder={po}
                    onEdit={() => handleEdit(po)}
                  />
                ))
              : (
                  <PurchaseOrderTable
                    rows={filtered}
                    onEdit={handleEdit}
                  />
                )}
          </>
        )}
      </Box>

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setErr('')}>
        <Alert severity="error" onClose={() => setErr('')}>
          {error}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PurchaseOrdersPage;





// File: purchaseOrdersApi.ts
import api from '../axios';

export type PurchaseOrder = {
  id?: string;
  code?: number;
  referenceDocNumber: string;
  date1: string;
  date2: string;
  warehouseId: string;
  warehouse?: {
    id: string;
    code: number;
    name: string;
    address: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  supplierId: string;
  supplier?: {
    id: string;
    code: number;
    name: string;
    phone: string;
    address: string;
    notes: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  };
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  status: number;
  details: PurchaseOrderDetail[];
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

export type PurchaseOrderDetail = {
  unitName: any;
  id?: string;
  purchaseOrderId?: string;
  productID: string;
  productPriceID?: string; // ← إضافة معرف السعر
  unitId: string;
  unitFactor: number;
  quantity: number;
  price: number;
  discountPercent: number;
  discountValue: number;
  taxPercent: number;
  taxValue: number;
  subTotal: number;
  total: number;
  isActive?: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

const toPurchaseOrder = (raw: any): PurchaseOrder => {
  console.log('Converting raw purchase order:', raw);
  
  const converted: PurchaseOrder = {
    id: raw.purchaseOrderID,
    code: raw.purchaseOrderCode,
    referenceDocNumber: raw.referanceDocNumber,
    date1: raw.date1,
    date2: raw.date2,
    warehouseId: raw.warehouseId,
    warehouse: raw.warehouse
      ? {
          id: raw.warehouse.warehouseID,
          code: raw.warehouse.warehouseCode,
          name: raw.warehouse.warehouseName,
          address: raw.warehouse.address,
          isActive: raw.warehouse.isActive,
          createdOn: raw.warehouse.createDate,
          lastModifiedOn: raw.warehouse.lastModifyDate,
          createUser: raw.warehouse.createUser,
          lastModifyUser: raw.warehouse.lastModifyUser,
          createCompany: raw.warehouse.createCompany,
          createBranch: raw.warehouse.createBranch,
        }
      : undefined,
    supplierId: raw.supplierId,
    supplier: raw.supplier
      ? {
          id: raw.supplier.supplierId,
          code: raw.supplier.supplierCode,
          name: raw.supplier.supplierName,
          phone: raw.supplier.phone,
          address: raw.supplier.address,
          notes: raw.supplier.notes,
          isActive: raw.supplier.isActive,
          createdOn: raw.supplier.createDate,
          lastModifiedOn: raw.supplier.lastModifyDate,
          createUser: raw.supplier.createUser,
          lastModifyUser: raw.supplier.lastModifyUser,
          createCompany: raw.supplier.createCompany,
          createBranch: raw.supplier.createBranch,
        }
      : undefined,
    discountPercent: raw.discountPercent,
    discountValue: raw.discountValue,
    taxPercent: raw.taxPercent,
    taxValue: raw.taxValue,
    subTotal: raw.subTotal,
    total: raw.total,
    status: raw.status,
    details: raw.details?.map(toPurchaseOrderDetail) || [],
    isActive: raw.isActive,
    createdOn: raw.createDate,
    lastModifiedOn: raw.lastModifyDate,
    createUser: raw.createUser,
    lastModifyUser: raw.lastModifyUser,
    createCompany: raw.createCompany,
    createBranch: raw.createBranch,
  };

  if (!converted.id) {
    console.error('Converted purchase order missing ID:', converted);
  }
  return converted;
};

const toPurchaseOrderDetail = (raw: any): PurchaseOrderDetail => ({
  id: raw.purchaseOrderDetailID,
  purchaseOrderId: raw.purchaseOrderID,
  productID: raw.productID,
  productPriceID: raw.productPriceId, // ← هنا الإصلاح - كان مفقود
  unitId: raw.unitId,
  unitFactor: raw.unitFactor,
  quantity: raw.quantity,
  price: raw.price,
  discountPercent: raw.discountPercent,
  discountValue: raw.discountValue,
  taxPercent: raw.taxPercent,
  taxValue: raw.taxValue,
  subTotal: raw.subTotal,
  total: raw.total,
  isActive: raw.isActive,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
  unitName: raw.unit?.unitName || raw.productPrice?.unit?.unitName || 'وحدة غير محددة'
});

/* ---------------- API ---------------- */

export const getAll = async (): Promise<PurchaseOrder[]> => {
  try {
    const response = await api.get('/GetAllPurchaseOrders');
    console.log('Raw purchase orders from API:', response.data.data);
    const converted = response.data.data.map(toPurchaseOrder);
    console.log('Converted purchase orders:', converted);
    return converted;
  } catch (error) {
    console.error('Error fetching purchase orders:', error);
    throw error;
  }
};

export const getById = async (id: string): Promise<PurchaseOrder> => {
  try {
    const response = await api.get(`/GetPurchaseOrder?id=${id}`);
    return toPurchaseOrder(response.data.data);
  } catch (error) {
    console.error('Error fetching purchase order:', error);
    throw error;
  }
};

export const add = async (body: PurchaseOrder) => {
  const apiBody = {
    referanceDocNumber: body.referenceDocNumber,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail, index) => {
      // التحقق من البيانات المطلوبة
      if (!detail.productID) {
        console.error(`Detail ${index} missing productID:`, detail);
        throw new Error(`Detail ${index} is missing productID`);
      }
      if (!detail.productPriceID) {
        console.error(`Detail ${index} missing productPriceID:`, detail);
        throw new Error(`Detail ${index} is missing ProductPriceID`);
      }

      return {
        productID: detail.productID,
        ProductPriceID: detail.productPriceID, // ← هنا الإصلاح المهم
        unitId: detail.unitId,
        unitFactor: detail.unitFactor,
        quantity: detail.quantity,
        price: detail.price,
        discountPercent: detail.discountPercent,
        discountValue: detail.discountValue,
        taxPercent: detail.taxPercent,
        taxValue: detail.taxValue,
        subTotal: detail.subTotal,
        total: detail.total
      };
    })
  };

  console.log('API Body before sending (ADD):', JSON.stringify(apiBody, null, 2));
  
  // التحقق النهائي قبل الإرسال
  apiBody.details.forEach((d, idx) => {
    if (!d.productID) {
      console.error(`Detail ${idx} missing productID:`, d);
      throw new Error(`Detail ${idx} is missing productID`);
    }
    if (!d.ProductPriceID) {
      console.error(`Detail ${idx} missing ProductPriceID:`, d);
      throw new Error(`Detail ${idx} is missing ProductPriceID`);
    }
  });

  const { data } = await api.post('/AddPurchaseOrder', apiBody);
  return toPurchaseOrder(data.data);
};

export const update = async (body: PurchaseOrder & { id: string }) => {
  const apiBody = {
    purchaseOrderID: body.id,
    referanceDocNumber: body.referenceDocNumber,
    date1: body.date1,
    date2: body.date2,
    warehouseId: body.warehouseId,
    supplierId: body.supplierId,
    discountPercent: body.discountPercent,
    discountValue: body.discountValue,
    taxPercent: body.taxPercent,
    taxValue: body.taxValue,
    subTotal: body.subTotal,
    total: body.total,
    status: body.status,
    details: body.details.map((detail, index) => {
      // التحقق من البيانات المطلوبة
      if (!detail.productID) {
        console.error(`Detail ${index} missing productID:`, detail);
        throw new Error(`Detail ${index} is missing productID`);
      }
      if (!detail.productPriceID) {
        console.error(`Detail ${index} missing productPriceID:`, detail);
        throw new Error(`Detail ${index} is missing ProductPriceID`);
      }

      const detailData: any = {
        productID: detail.productID,
        ProductPriceID: detail.productPriceID,
        unitId: detail.unitId,
        unitFactor: detail.unitFactor,
        quantity: detail.quantity,
        price: detail.price,
        discountPercent: detail.discountPercent,
        discountValue: detail.discountValue,
        taxPercent: detail.taxPercent,
        taxValue: detail.taxValue,
        subTotal: detail.subTotal,
        total: detail.total
      };

      // ← هنا الإصلاح المهم: إضافة purchaseOrderDetailID للسطور الموجودة
      if (detail.id && detail.id.trim() !== '') {
        detailData.purchaseOrderDetailID = detail.id;
        detailData.purchaseOrderID = body.id; // إضافة purchaseOrderID أيضاً
        console.log(`Adding IDs for existing detail ${index}:`, {
          purchaseOrderDetailID: detail.id,
          purchaseOrderID: body.id
        });
      } else {
        // سطر جديد - لا نضيف purchaseOrderDetailID
        console.log(`New detail ${index} - no IDs added`);
      }

      return detailData;
    })
  };

  console.log('API Body before sending (UPDATE):', JSON.stringify(apiBody, null, 2));
  
  // التحقق النهائي
  apiBody.details.forEach((d, idx) => {
    console.log(`Detail ${idx} final check:`, {
      hasProductID: !!d.productID,
      hasProductPriceID: !!d.ProductPriceID,
      hasPurchaseOrderDetailID: !!d.purchaseOrderDetailID,
      hasPurchaseOrderID: !!d.purchaseOrderID
    });
  });

  const { data } = await api.post('/UpdatePurchaseOrder', apiBody);
  return toPurchaseOrder(data.data);
};


// File: purchaseProductsApi.ts
import api from '../axios';

export type Product = {
  id: string;
  code: number;
  name: string;
  groupId: string | null;
  group: {
    id: string;
    code: number;
    name: string;
    parentId: string | null;
    parentGroup: string | null;
    backgroundColor: string;
    fontColor: string;
    isActive: boolean;
    createdOn: string;
    lastModifiedOn: string;
    createUser: string;
    lastModifyUser: string;
    createCompany: string;
    createBranch: string;
  } | null;
  productType: number;
  description: string | null;
  reorderLevel: number;
  cost: number;
  lastPurePrice: number;
  expirationDays: number;
  imageUrl: string | null;
  productPrices: ProductPrice[];
  isActive: boolean;
  createdOn: string;
  lastModifiedOn: string;
  createUser: string;
  lastModifyUser: string;
  createCompany: string;
  createBranch: string;
};

export type ProductPrice = {
  id: string;
  productId: string;
  productName: string;
  unitId: string | null;
  unitName?: string;
  unitFactor: number;
  barcode: string;
  price: number;
  cost: number;
  posPriceName: string | null;
  isGenerated: boolean;
  isActive: boolean;
  createdOn?: string;
  lastModifiedOn?: string;
  createUser?: string;
  lastModifyUser?: string;
  createCompany?: string;
  createBranch?: string;
};

export type ProductPricesResponse = {
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  pageSize: number;
  data: ProductPrice[];
};

// تحويل البيانات من API format إلى التطبيق format
const toProductPrice = (raw: any): ProductPrice => ({
  id: raw.productPriceId,
  productId: raw.product?.productID || '',
  productName: raw.product?.productName || '',
  unitId: raw.unit?.unitID || null,
  unitName: raw.unit?.unitName || 'وحدة غير محددة',
  unitFactor: raw.unitFactor,
  barcode: raw.barcode,
  price: raw.price,
  cost: raw.product?.cost || 0,
  posPriceName: raw.posPriceName,
  isGenerated: raw.isGenerated,
  isActive: raw.product?.isActive ?? true,
  createdOn: raw.createDate,
  lastModifiedOn: raw.lastModifyDate,
  createUser: raw.createUser,
  lastModifyUser: raw.lastModifyUser,
  createCompany: raw.createCompany,
  createBranch: raw.createBranch,
});

/* ---------------- API ---------------- */

// البحث في أسعار المنتجات - الـ API الوحيد المستخدم
export const searchProductPrices = async (
  filterText: string = '', 
  pageNumber: number = 1, 
  pageSize: number = 50
): Promise<ProductPricesResponse> => {
  try {
    let url = `/getProductPricebyNameOrBarcode?pageNumber=${pageNumber}&pageSize=${pageSize}`;
    
    // إضافة FilterText فقط إذا كان موجود
    if (filterText.trim()) {
      url += `&FilterText=${encodeURIComponent(filterText)}`;
    }
    
    const response = await api.get(url);
    
    if (response.data?.data) {
      return {
        totalCount: response.data.data.totalCount || 0,
        pageCount: response.data.data.pageCount || 1,
        pageNumber: response.data.data.pageNumber || 1,
        pageSize: response.data.data.pageSize || pageSize,
        data: response.data.data.data.map(toProductPrice)
      };
    } else {
      return {
        totalCount: 0,
        pageCount: 0,
        pageNumber: pageNumber,
        pageSize: pageSize,
        data: []
      };
    }
  } catch (error) {
    console.error('Error searching product prices:', error);
    return {
      totalCount: 0,
      pageCount: 0,
      pageNumber: pageNumber,
      pageSize: pageSize,
      data: []
    };
  }
};

// للتوافق مع الكود القديم - استخدام نفس API
export const getProducts = async (pageNumber: number = 1, pageSize: number = 20): Promise<ProductPricesResponse> => {
  return searchProductPrices('', pageNumber, pageSize);
};


